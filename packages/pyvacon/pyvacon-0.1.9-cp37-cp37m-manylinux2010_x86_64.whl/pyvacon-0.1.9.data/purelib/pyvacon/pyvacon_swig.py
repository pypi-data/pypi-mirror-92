# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _enum_creator


from . import _enum_creator


from . import _enum_creator


from . import _enum_creator


from . import _enum_creator



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _pyvacon_swig
else:
    import _pyvacon_swig

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyvacon_swig.delete_SwigPyIterator

    def value(self):
        return _pyvacon_swig.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _pyvacon_swig.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _pyvacon_swig.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _pyvacon_swig.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _pyvacon_swig.SwigPyIterator_equal(self, x)

    def copy(self):
        return _pyvacon_swig.SwigPyIterator_copy(self)

    def next(self):
        return _pyvacon_swig.SwigPyIterator_next(self)

    def __next__(self):
        return _pyvacon_swig.SwigPyIterator___next__(self)

    def previous(self):
        return _pyvacon_swig.SwigPyIterator_previous(self)

    def advance(self, n):
        return _pyvacon_swig.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _pyvacon_swig.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _pyvacon_swig.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _pyvacon_swig.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _pyvacon_swig.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _pyvacon_swig.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _pyvacon_swig.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _pyvacon_swig:
_pyvacon_swig.SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _pyvacon_swig.SHARED_PTR_DISOWN

def setEnumClassContainer(ec):
    r"""setEnumClassContainer(std::map< std::string,std::pair< PyObject *,PyObject * >,std::less< std::string >,std::allocator< std::pair< std::string const,std::pair< PyObject *,PyObject * > > > > * ec)"""
    return _pyvacon_swig.setEnumClassContainer(ec)
class vectorInt(object):
    r"""Proxy of C++ std::vector< int > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(vectorInt self) -> SwigPyIterator"""
        return _pyvacon_swig.vectorInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(vectorInt self) -> bool"""
        return _pyvacon_swig.vectorInt___nonzero__(self)

    def __bool__(self):
        r"""__bool__(vectorInt self) -> bool"""
        return _pyvacon_swig.vectorInt___bool__(self)

    def __len__(self):
        r"""__len__(vectorInt self) -> std::vector< int >::size_type"""
        return _pyvacon_swig.vectorInt___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(vectorInt self, std::vector< int >::difference_type i, std::vector< int >::difference_type j) -> vectorInt"""
        return _pyvacon_swig.vectorInt___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(vectorInt self, std::vector< int >::difference_type i, std::vector< int >::difference_type j)
        __setslice__(vectorInt self, std::vector< int >::difference_type i, std::vector< int >::difference_type j, vectorInt v)
        """
        return _pyvacon_swig.vectorInt___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(vectorInt self, std::vector< int >::difference_type i, std::vector< int >::difference_type j)"""
        return _pyvacon_swig.vectorInt___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(vectorInt self, std::vector< int >::difference_type i)
        __delitem__(vectorInt self, PySliceObject * slice)
        """
        return _pyvacon_swig.vectorInt___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(vectorInt self, PySliceObject * slice) -> vectorInt
        __getitem__(vectorInt self, std::vector< int >::difference_type i) -> std::vector< int >::value_type const &
        """
        return _pyvacon_swig.vectorInt___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(vectorInt self, PySliceObject * slice, vectorInt v)
        __setitem__(vectorInt self, PySliceObject * slice)
        __setitem__(vectorInt self, std::vector< int >::difference_type i, std::vector< int >::value_type const & x)
        """
        return _pyvacon_swig.vectorInt___setitem__(self, *args)

    def pop(self):
        r"""pop(vectorInt self) -> std::vector< int >::value_type"""
        return _pyvacon_swig.vectorInt_pop(self)

    def append(self, x):
        r"""append(vectorInt self, std::vector< int >::value_type const & x)"""
        return _pyvacon_swig.vectorInt_append(self, x)

    def empty(self):
        r"""empty(vectorInt self) -> bool"""
        return _pyvacon_swig.vectorInt_empty(self)

    def size(self):
        r"""size(vectorInt self) -> std::vector< int >::size_type"""
        return _pyvacon_swig.vectorInt_size(self)

    def swap(self, v):
        r"""swap(vectorInt self, vectorInt v)"""
        return _pyvacon_swig.vectorInt_swap(self, v)

    def begin(self):
        r"""begin(vectorInt self) -> std::vector< int >::iterator"""
        return _pyvacon_swig.vectorInt_begin(self)

    def end(self):
        r"""end(vectorInt self) -> std::vector< int >::iterator"""
        return _pyvacon_swig.vectorInt_end(self)

    def rbegin(self):
        r"""rbegin(vectorInt self) -> std::vector< int >::reverse_iterator"""
        return _pyvacon_swig.vectorInt_rbegin(self)

    def rend(self):
        r"""rend(vectorInt self) -> std::vector< int >::reverse_iterator"""
        return _pyvacon_swig.vectorInt_rend(self)

    def clear(self):
        r"""clear(vectorInt self)"""
        return _pyvacon_swig.vectorInt_clear(self)

    def get_allocator(self):
        r"""get_allocator(vectorInt self) -> std::vector< int >::allocator_type"""
        return _pyvacon_swig.vectorInt_get_allocator(self)

    def pop_back(self):
        r"""pop_back(vectorInt self)"""
        return _pyvacon_swig.vectorInt_pop_back(self)

    def erase(self, *args):
        r"""
        erase(vectorInt self, std::vector< int >::iterator pos) -> std::vector< int >::iterator
        erase(vectorInt self, std::vector< int >::iterator first, std::vector< int >::iterator last) -> std::vector< int >::iterator
        """
        return _pyvacon_swig.vectorInt_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(vectorInt self) -> vectorInt
        __init__(vectorInt self, vectorInt other) -> vectorInt
        __init__(vectorInt self, std::vector< int >::size_type size) -> vectorInt
        __init__(vectorInt self, std::vector< int >::size_type size, std::vector< int >::value_type const & value) -> vectorInt
        """
        _pyvacon_swig.vectorInt_swiginit(self, _pyvacon_swig.new_vectorInt(*args))

    def push_back(self, x):
        r"""push_back(vectorInt self, std::vector< int >::value_type const & x)"""
        return _pyvacon_swig.vectorInt_push_back(self, x)

    def front(self):
        r"""front(vectorInt self) -> std::vector< int >::value_type const &"""
        return _pyvacon_swig.vectorInt_front(self)

    def back(self):
        r"""back(vectorInt self) -> std::vector< int >::value_type const &"""
        return _pyvacon_swig.vectorInt_back(self)

    def assign(self, n, x):
        r"""assign(vectorInt self, std::vector< int >::size_type n, std::vector< int >::value_type const & x)"""
        return _pyvacon_swig.vectorInt_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(vectorInt self, std::vector< int >::size_type new_size)
        resize(vectorInt self, std::vector< int >::size_type new_size, std::vector< int >::value_type const & x)
        """
        return _pyvacon_swig.vectorInt_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(vectorInt self, std::vector< int >::iterator pos, std::vector< int >::value_type const & x) -> std::vector< int >::iterator
        insert(vectorInt self, std::vector< int >::iterator pos, std::vector< int >::size_type n, std::vector< int >::value_type const & x)
        """
        return _pyvacon_swig.vectorInt_insert(self, *args)

    def reserve(self, n):
        r"""reserve(vectorInt self, std::vector< int >::size_type n)"""
        return _pyvacon_swig.vectorInt_reserve(self, n)

    def capacity(self):
        r"""capacity(vectorInt self) -> std::vector< int >::size_type"""
        return _pyvacon_swig.vectorInt_capacity(self)
    __swig_destroy__ = _pyvacon_swig.delete_vectorInt

# Register vectorInt in _pyvacon_swig:
_pyvacon_swig.vectorInt_swigregister(vectorInt)

class vectorDouble(object):
    r"""Proxy of C++ std::vector< double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(vectorDouble self) -> SwigPyIterator"""
        return _pyvacon_swig.vectorDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(vectorDouble self) -> bool"""
        return _pyvacon_swig.vectorDouble___nonzero__(self)

    def __bool__(self):
        r"""__bool__(vectorDouble self) -> bool"""
        return _pyvacon_swig.vectorDouble___bool__(self)

    def __len__(self):
        r"""__len__(vectorDouble self) -> std::vector< double >::size_type"""
        return _pyvacon_swig.vectorDouble___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(vectorDouble self, std::vector< double >::difference_type i, std::vector< double >::difference_type j) -> vectorDouble"""
        return _pyvacon_swig.vectorDouble___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(vectorDouble self, std::vector< double >::difference_type i, std::vector< double >::difference_type j)
        __setslice__(vectorDouble self, std::vector< double >::difference_type i, std::vector< double >::difference_type j, vectorDouble v)
        """
        return _pyvacon_swig.vectorDouble___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(vectorDouble self, std::vector< double >::difference_type i, std::vector< double >::difference_type j)"""
        return _pyvacon_swig.vectorDouble___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(vectorDouble self, std::vector< double >::difference_type i)
        __delitem__(vectorDouble self, PySliceObject * slice)
        """
        return _pyvacon_swig.vectorDouble___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(vectorDouble self, PySliceObject * slice) -> vectorDouble
        __getitem__(vectorDouble self, std::vector< double >::difference_type i) -> std::vector< double >::value_type const &
        """
        return _pyvacon_swig.vectorDouble___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(vectorDouble self, PySliceObject * slice, vectorDouble v)
        __setitem__(vectorDouble self, PySliceObject * slice)
        __setitem__(vectorDouble self, std::vector< double >::difference_type i, std::vector< double >::value_type const & x)
        """
        return _pyvacon_swig.vectorDouble___setitem__(self, *args)

    def pop(self):
        r"""pop(vectorDouble self) -> std::vector< double >::value_type"""
        return _pyvacon_swig.vectorDouble_pop(self)

    def append(self, x):
        r"""append(vectorDouble self, std::vector< double >::value_type const & x)"""
        return _pyvacon_swig.vectorDouble_append(self, x)

    def empty(self):
        r"""empty(vectorDouble self) -> bool"""
        return _pyvacon_swig.vectorDouble_empty(self)

    def size(self):
        r"""size(vectorDouble self) -> std::vector< double >::size_type"""
        return _pyvacon_swig.vectorDouble_size(self)

    def swap(self, v):
        r"""swap(vectorDouble self, vectorDouble v)"""
        return _pyvacon_swig.vectorDouble_swap(self, v)

    def begin(self):
        r"""begin(vectorDouble self) -> std::vector< double >::iterator"""
        return _pyvacon_swig.vectorDouble_begin(self)

    def end(self):
        r"""end(vectorDouble self) -> std::vector< double >::iterator"""
        return _pyvacon_swig.vectorDouble_end(self)

    def rbegin(self):
        r"""rbegin(vectorDouble self) -> std::vector< double >::reverse_iterator"""
        return _pyvacon_swig.vectorDouble_rbegin(self)

    def rend(self):
        r"""rend(vectorDouble self) -> std::vector< double >::reverse_iterator"""
        return _pyvacon_swig.vectorDouble_rend(self)

    def clear(self):
        r"""clear(vectorDouble self)"""
        return _pyvacon_swig.vectorDouble_clear(self)

    def get_allocator(self):
        r"""get_allocator(vectorDouble self) -> std::vector< double >::allocator_type"""
        return _pyvacon_swig.vectorDouble_get_allocator(self)

    def pop_back(self):
        r"""pop_back(vectorDouble self)"""
        return _pyvacon_swig.vectorDouble_pop_back(self)

    def erase(self, *args):
        r"""
        erase(vectorDouble self, std::vector< double >::iterator pos) -> std::vector< double >::iterator
        erase(vectorDouble self, std::vector< double >::iterator first, std::vector< double >::iterator last) -> std::vector< double >::iterator
        """
        return _pyvacon_swig.vectorDouble_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(vectorDouble self) -> vectorDouble
        __init__(vectorDouble self, vectorDouble other) -> vectorDouble
        __init__(vectorDouble self, std::vector< double >::size_type size) -> vectorDouble
        __init__(vectorDouble self, std::vector< double >::size_type size, std::vector< double >::value_type const & value) -> vectorDouble
        """
        _pyvacon_swig.vectorDouble_swiginit(self, _pyvacon_swig.new_vectorDouble(*args))

    def push_back(self, x):
        r"""push_back(vectorDouble self, std::vector< double >::value_type const & x)"""
        return _pyvacon_swig.vectorDouble_push_back(self, x)

    def front(self):
        r"""front(vectorDouble self) -> std::vector< double >::value_type const &"""
        return _pyvacon_swig.vectorDouble_front(self)

    def back(self):
        r"""back(vectorDouble self) -> std::vector< double >::value_type const &"""
        return _pyvacon_swig.vectorDouble_back(self)

    def assign(self, n, x):
        r"""assign(vectorDouble self, std::vector< double >::size_type n, std::vector< double >::value_type const & x)"""
        return _pyvacon_swig.vectorDouble_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(vectorDouble self, std::vector< double >::size_type new_size)
        resize(vectorDouble self, std::vector< double >::size_type new_size, std::vector< double >::value_type const & x)
        """
        return _pyvacon_swig.vectorDouble_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(vectorDouble self, std::vector< double >::iterator pos, std::vector< double >::value_type const & x) -> std::vector< double >::iterator
        insert(vectorDouble self, std::vector< double >::iterator pos, std::vector< double >::size_type n, std::vector< double >::value_type const & x)
        """
        return _pyvacon_swig.vectorDouble_insert(self, *args)

    def reserve(self, n):
        r"""reserve(vectorDouble self, std::vector< double >::size_type n)"""
        return _pyvacon_swig.vectorDouble_reserve(self, n)

    def capacity(self):
        r"""capacity(vectorDouble self) -> std::vector< double >::size_type"""
        return _pyvacon_swig.vectorDouble_capacity(self)
    __swig_destroy__ = _pyvacon_swig.delete_vectorDouble

# Register vectorDouble in _pyvacon_swig:
_pyvacon_swig.vectorDouble_swigregister(vectorDouble)

class vectorVectorDouble(object):
    r"""Proxy of C++ std::vector< std::vector< double > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(vectorVectorDouble self) -> SwigPyIterator"""
        return _pyvacon_swig.vectorVectorDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(vectorVectorDouble self) -> bool"""
        return _pyvacon_swig.vectorVectorDouble___nonzero__(self)

    def __bool__(self):
        r"""__bool__(vectorVectorDouble self) -> bool"""
        return _pyvacon_swig.vectorVectorDouble___bool__(self)

    def __len__(self):
        r"""__len__(vectorVectorDouble self) -> std::vector< std::vector< double > >::size_type"""
        return _pyvacon_swig.vectorVectorDouble___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(vectorVectorDouble self, std::vector< std::vector< double > >::difference_type i, std::vector< std::vector< double > >::difference_type j) -> vectorVectorDouble"""
        return _pyvacon_swig.vectorVectorDouble___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(vectorVectorDouble self, std::vector< std::vector< double > >::difference_type i, std::vector< std::vector< double > >::difference_type j)
        __setslice__(vectorVectorDouble self, std::vector< std::vector< double > >::difference_type i, std::vector< std::vector< double > >::difference_type j, vectorVectorDouble v)
        """
        return _pyvacon_swig.vectorVectorDouble___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(vectorVectorDouble self, std::vector< std::vector< double > >::difference_type i, std::vector< std::vector< double > >::difference_type j)"""
        return _pyvacon_swig.vectorVectorDouble___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(vectorVectorDouble self, std::vector< std::vector< double > >::difference_type i)
        __delitem__(vectorVectorDouble self, PySliceObject * slice)
        """
        return _pyvacon_swig.vectorVectorDouble___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(vectorVectorDouble self, PySliceObject * slice) -> vectorVectorDouble
        __getitem__(vectorVectorDouble self, std::vector< std::vector< double > >::difference_type i) -> vectorDouble
        """
        return _pyvacon_swig.vectorVectorDouble___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(vectorVectorDouble self, PySliceObject * slice, vectorVectorDouble v)
        __setitem__(vectorVectorDouble self, PySliceObject * slice)
        __setitem__(vectorVectorDouble self, std::vector< std::vector< double > >::difference_type i, vectorDouble x)
        """
        return _pyvacon_swig.vectorVectorDouble___setitem__(self, *args)

    def pop(self):
        r"""pop(vectorVectorDouble self) -> vectorDouble"""
        return _pyvacon_swig.vectorVectorDouble_pop(self)

    def append(self, x):
        r"""append(vectorVectorDouble self, vectorDouble x)"""
        return _pyvacon_swig.vectorVectorDouble_append(self, x)

    def empty(self):
        r"""empty(vectorVectorDouble self) -> bool"""
        return _pyvacon_swig.vectorVectorDouble_empty(self)

    def size(self):
        r"""size(vectorVectorDouble self) -> std::vector< std::vector< double > >::size_type"""
        return _pyvacon_swig.vectorVectorDouble_size(self)

    def swap(self, v):
        r"""swap(vectorVectorDouble self, vectorVectorDouble v)"""
        return _pyvacon_swig.vectorVectorDouble_swap(self, v)

    def begin(self):
        r"""begin(vectorVectorDouble self) -> std::vector< std::vector< double > >::iterator"""
        return _pyvacon_swig.vectorVectorDouble_begin(self)

    def end(self):
        r"""end(vectorVectorDouble self) -> std::vector< std::vector< double > >::iterator"""
        return _pyvacon_swig.vectorVectorDouble_end(self)

    def rbegin(self):
        r"""rbegin(vectorVectorDouble self) -> std::vector< std::vector< double > >::reverse_iterator"""
        return _pyvacon_swig.vectorVectorDouble_rbegin(self)

    def rend(self):
        r"""rend(vectorVectorDouble self) -> std::vector< std::vector< double > >::reverse_iterator"""
        return _pyvacon_swig.vectorVectorDouble_rend(self)

    def clear(self):
        r"""clear(vectorVectorDouble self)"""
        return _pyvacon_swig.vectorVectorDouble_clear(self)

    def get_allocator(self):
        r"""get_allocator(vectorVectorDouble self) -> std::vector< std::vector< double > >::allocator_type"""
        return _pyvacon_swig.vectorVectorDouble_get_allocator(self)

    def pop_back(self):
        r"""pop_back(vectorVectorDouble self)"""
        return _pyvacon_swig.vectorVectorDouble_pop_back(self)

    def erase(self, *args):
        r"""
        erase(vectorVectorDouble self, std::vector< std::vector< double > >::iterator pos) -> std::vector< std::vector< double > >::iterator
        erase(vectorVectorDouble self, std::vector< std::vector< double > >::iterator first, std::vector< std::vector< double > >::iterator last) -> std::vector< std::vector< double > >::iterator
        """
        return _pyvacon_swig.vectorVectorDouble_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(vectorVectorDouble self) -> vectorVectorDouble
        __init__(vectorVectorDouble self, vectorVectorDouble other) -> vectorVectorDouble
        __init__(vectorVectorDouble self, std::vector< std::vector< double > >::size_type size) -> vectorVectorDouble
        __init__(vectorVectorDouble self, std::vector< std::vector< double > >::size_type size, vectorDouble value) -> vectorVectorDouble
        """
        _pyvacon_swig.vectorVectorDouble_swiginit(self, _pyvacon_swig.new_vectorVectorDouble(*args))

    def push_back(self, x):
        r"""push_back(vectorVectorDouble self, vectorDouble x)"""
        return _pyvacon_swig.vectorVectorDouble_push_back(self, x)

    def front(self):
        r"""front(vectorVectorDouble self) -> vectorDouble"""
        return _pyvacon_swig.vectorVectorDouble_front(self)

    def back(self):
        r"""back(vectorVectorDouble self) -> vectorDouble"""
        return _pyvacon_swig.vectorVectorDouble_back(self)

    def assign(self, n, x):
        r"""assign(vectorVectorDouble self, std::vector< std::vector< double > >::size_type n, vectorDouble x)"""
        return _pyvacon_swig.vectorVectorDouble_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(vectorVectorDouble self, std::vector< std::vector< double > >::size_type new_size)
        resize(vectorVectorDouble self, std::vector< std::vector< double > >::size_type new_size, vectorDouble x)
        """
        return _pyvacon_swig.vectorVectorDouble_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(vectorVectorDouble self, std::vector< std::vector< double > >::iterator pos, vectorDouble x) -> std::vector< std::vector< double > >::iterator
        insert(vectorVectorDouble self, std::vector< std::vector< double > >::iterator pos, std::vector< std::vector< double > >::size_type n, vectorDouble x)
        """
        return _pyvacon_swig.vectorVectorDouble_insert(self, *args)

    def reserve(self, n):
        r"""reserve(vectorVectorDouble self, std::vector< std::vector< double > >::size_type n)"""
        return _pyvacon_swig.vectorVectorDouble_reserve(self, n)

    def capacity(self):
        r"""capacity(vectorVectorDouble self) -> std::vector< std::vector< double > >::size_type"""
        return _pyvacon_swig.vectorVectorDouble_capacity(self)
    __swig_destroy__ = _pyvacon_swig.delete_vectorVectorDouble

# Register vectorVectorDouble in _pyvacon_swig:
_pyvacon_swig.vectorVectorDouble_swigregister(vectorVectorDouble)

class vectorString(object):
    r"""Proxy of C++ std::vector< std::string > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(vectorString self) -> SwigPyIterator"""
        return _pyvacon_swig.vectorString_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(vectorString self) -> bool"""
        return _pyvacon_swig.vectorString___nonzero__(self)

    def __bool__(self):
        r"""__bool__(vectorString self) -> bool"""
        return _pyvacon_swig.vectorString___bool__(self)

    def __len__(self):
        r"""__len__(vectorString self) -> std::vector< std::string >::size_type"""
        return _pyvacon_swig.vectorString___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(vectorString self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j) -> vectorString"""
        return _pyvacon_swig.vectorString___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(vectorString self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j)
        __setslice__(vectorString self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j, vectorString v)
        """
        return _pyvacon_swig.vectorString___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(vectorString self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j)"""
        return _pyvacon_swig.vectorString___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(vectorString self, std::vector< std::string >::difference_type i)
        __delitem__(vectorString self, PySliceObject * slice)
        """
        return _pyvacon_swig.vectorString___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(vectorString self, PySliceObject * slice) -> vectorString
        __getitem__(vectorString self, std::vector< std::string >::difference_type i) -> std::vector< std::string >::value_type const &
        """
        return _pyvacon_swig.vectorString___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(vectorString self, PySliceObject * slice, vectorString v)
        __setitem__(vectorString self, PySliceObject * slice)
        __setitem__(vectorString self, std::vector< std::string >::difference_type i, std::vector< std::string >::value_type const & x)
        """
        return _pyvacon_swig.vectorString___setitem__(self, *args)

    def pop(self):
        r"""pop(vectorString self) -> std::vector< std::string >::value_type"""
        return _pyvacon_swig.vectorString_pop(self)

    def append(self, x):
        r"""append(vectorString self, std::vector< std::string >::value_type const & x)"""
        return _pyvacon_swig.vectorString_append(self, x)

    def empty(self):
        r"""empty(vectorString self) -> bool"""
        return _pyvacon_swig.vectorString_empty(self)

    def size(self):
        r"""size(vectorString self) -> std::vector< std::string >::size_type"""
        return _pyvacon_swig.vectorString_size(self)

    def swap(self, v):
        r"""swap(vectorString self, vectorString v)"""
        return _pyvacon_swig.vectorString_swap(self, v)

    def begin(self):
        r"""begin(vectorString self) -> std::vector< std::string >::iterator"""
        return _pyvacon_swig.vectorString_begin(self)

    def end(self):
        r"""end(vectorString self) -> std::vector< std::string >::iterator"""
        return _pyvacon_swig.vectorString_end(self)

    def rbegin(self):
        r"""rbegin(vectorString self) -> std::vector< std::string >::reverse_iterator"""
        return _pyvacon_swig.vectorString_rbegin(self)

    def rend(self):
        r"""rend(vectorString self) -> std::vector< std::string >::reverse_iterator"""
        return _pyvacon_swig.vectorString_rend(self)

    def clear(self):
        r"""clear(vectorString self)"""
        return _pyvacon_swig.vectorString_clear(self)

    def get_allocator(self):
        r"""get_allocator(vectorString self) -> std::vector< std::string >::allocator_type"""
        return _pyvacon_swig.vectorString_get_allocator(self)

    def pop_back(self):
        r"""pop_back(vectorString self)"""
        return _pyvacon_swig.vectorString_pop_back(self)

    def erase(self, *args):
        r"""
        erase(vectorString self, std::vector< std::string >::iterator pos) -> std::vector< std::string >::iterator
        erase(vectorString self, std::vector< std::string >::iterator first, std::vector< std::string >::iterator last) -> std::vector< std::string >::iterator
        """
        return _pyvacon_swig.vectorString_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(vectorString self) -> vectorString
        __init__(vectorString self, vectorString other) -> vectorString
        __init__(vectorString self, std::vector< std::string >::size_type size) -> vectorString
        __init__(vectorString self, std::vector< std::string >::size_type size, std::vector< std::string >::value_type const & value) -> vectorString
        """
        _pyvacon_swig.vectorString_swiginit(self, _pyvacon_swig.new_vectorString(*args))

    def push_back(self, x):
        r"""push_back(vectorString self, std::vector< std::string >::value_type const & x)"""
        return _pyvacon_swig.vectorString_push_back(self, x)

    def front(self):
        r"""front(vectorString self) -> std::vector< std::string >::value_type const &"""
        return _pyvacon_swig.vectorString_front(self)

    def back(self):
        r"""back(vectorString self) -> std::vector< std::string >::value_type const &"""
        return _pyvacon_swig.vectorString_back(self)

    def assign(self, n, x):
        r"""assign(vectorString self, std::vector< std::string >::size_type n, std::vector< std::string >::value_type const & x)"""
        return _pyvacon_swig.vectorString_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(vectorString self, std::vector< std::string >::size_type new_size)
        resize(vectorString self, std::vector< std::string >::size_type new_size, std::vector< std::string >::value_type const & x)
        """
        return _pyvacon_swig.vectorString_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(vectorString self, std::vector< std::string >::iterator pos, std::vector< std::string >::value_type const & x) -> std::vector< std::string >::iterator
        insert(vectorString self, std::vector< std::string >::iterator pos, std::vector< std::string >::size_type n, std::vector< std::string >::value_type const & x)
        """
        return _pyvacon_swig.vectorString_insert(self, *args)

    def reserve(self, n):
        r"""reserve(vectorString self, std::vector< std::string >::size_type n)"""
        return _pyvacon_swig.vectorString_reserve(self, n)

    def capacity(self):
        r"""capacity(vectorString self) -> std::vector< std::string >::size_type"""
        return _pyvacon_swig.vectorString_capacity(self)
    __swig_destroy__ = _pyvacon_swig.delete_vectorString

# Register vectorString in _pyvacon_swig:
_pyvacon_swig.vectorString_swigregister(vectorString)

class vectorBool(object):
    r"""Proxy of C++ std::vector< bool > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(vectorBool self) -> SwigPyIterator"""
        return _pyvacon_swig.vectorBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(vectorBool self) -> bool"""
        return _pyvacon_swig.vectorBool___nonzero__(self)

    def __bool__(self):
        r"""__bool__(vectorBool self) -> bool"""
        return _pyvacon_swig.vectorBool___bool__(self)

    def __len__(self):
        r"""__len__(vectorBool self) -> std::vector< bool >::size_type"""
        return _pyvacon_swig.vectorBool___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(vectorBool self, std::vector< bool >::difference_type i, std::vector< bool >::difference_type j) -> vectorBool"""
        return _pyvacon_swig.vectorBool___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(vectorBool self, std::vector< bool >::difference_type i, std::vector< bool >::difference_type j)
        __setslice__(vectorBool self, std::vector< bool >::difference_type i, std::vector< bool >::difference_type j, vectorBool v)
        """
        return _pyvacon_swig.vectorBool___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(vectorBool self, std::vector< bool >::difference_type i, std::vector< bool >::difference_type j)"""
        return _pyvacon_swig.vectorBool___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(vectorBool self, std::vector< bool >::difference_type i)
        __delitem__(vectorBool self, PySliceObject * slice)
        """
        return _pyvacon_swig.vectorBool___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(vectorBool self, PySliceObject * slice) -> vectorBool
        __getitem__(vectorBool self, std::vector< bool >::difference_type i) -> std::vector< bool >::value_type
        """
        return _pyvacon_swig.vectorBool___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(vectorBool self, PySliceObject * slice, vectorBool v)
        __setitem__(vectorBool self, PySliceObject * slice)
        __setitem__(vectorBool self, std::vector< bool >::difference_type i, std::vector< bool >::value_type x)
        """
        return _pyvacon_swig.vectorBool___setitem__(self, *args)

    def pop(self):
        r"""pop(vectorBool self) -> std::vector< bool >::value_type"""
        return _pyvacon_swig.vectorBool_pop(self)

    def append(self, x):
        r"""append(vectorBool self, std::vector< bool >::value_type x)"""
        return _pyvacon_swig.vectorBool_append(self, x)

    def empty(self):
        r"""empty(vectorBool self) -> bool"""
        return _pyvacon_swig.vectorBool_empty(self)

    def size(self):
        r"""size(vectorBool self) -> std::vector< bool >::size_type"""
        return _pyvacon_swig.vectorBool_size(self)

    def swap(self, v):
        r"""swap(vectorBool self, vectorBool v)"""
        return _pyvacon_swig.vectorBool_swap(self, v)

    def begin(self):
        r"""begin(vectorBool self) -> std::vector< bool >::iterator"""
        return _pyvacon_swig.vectorBool_begin(self)

    def end(self):
        r"""end(vectorBool self) -> std::vector< bool >::iterator"""
        return _pyvacon_swig.vectorBool_end(self)

    def rbegin(self):
        r"""rbegin(vectorBool self) -> std::vector< bool >::reverse_iterator"""
        return _pyvacon_swig.vectorBool_rbegin(self)

    def rend(self):
        r"""rend(vectorBool self) -> std::vector< bool >::reverse_iterator"""
        return _pyvacon_swig.vectorBool_rend(self)

    def clear(self):
        r"""clear(vectorBool self)"""
        return _pyvacon_swig.vectorBool_clear(self)

    def get_allocator(self):
        r"""get_allocator(vectorBool self) -> std::vector< bool >::allocator_type"""
        return _pyvacon_swig.vectorBool_get_allocator(self)

    def pop_back(self):
        r"""pop_back(vectorBool self)"""
        return _pyvacon_swig.vectorBool_pop_back(self)

    def erase(self, *args):
        r"""
        erase(vectorBool self, std::vector< bool >::iterator pos) -> std::vector< bool >::iterator
        erase(vectorBool self, std::vector< bool >::iterator first, std::vector< bool >::iterator last) -> std::vector< bool >::iterator
        """
        return _pyvacon_swig.vectorBool_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(vectorBool self) -> vectorBool
        __init__(vectorBool self, vectorBool other) -> vectorBool
        __init__(vectorBool self, std::vector< bool >::size_type size) -> vectorBool
        __init__(vectorBool self, std::vector< bool >::size_type size, std::vector< bool >::value_type value) -> vectorBool
        """
        _pyvacon_swig.vectorBool_swiginit(self, _pyvacon_swig.new_vectorBool(*args))

    def push_back(self, x):
        r"""push_back(vectorBool self, std::vector< bool >::value_type x)"""
        return _pyvacon_swig.vectorBool_push_back(self, x)

    def front(self):
        r"""front(vectorBool self) -> std::vector< bool >::value_type"""
        return _pyvacon_swig.vectorBool_front(self)

    def back(self):
        r"""back(vectorBool self) -> std::vector< bool >::value_type"""
        return _pyvacon_swig.vectorBool_back(self)

    def assign(self, n, x):
        r"""assign(vectorBool self, std::vector< bool >::size_type n, std::vector< bool >::value_type x)"""
        return _pyvacon_swig.vectorBool_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(vectorBool self, std::vector< bool >::size_type new_size)
        resize(vectorBool self, std::vector< bool >::size_type new_size, std::vector< bool >::value_type x)
        """
        return _pyvacon_swig.vectorBool_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(vectorBool self, std::vector< bool >::iterator pos, std::vector< bool >::value_type x) -> std::vector< bool >::iterator
        insert(vectorBool self, std::vector< bool >::iterator pos, std::vector< bool >::size_type n, std::vector< bool >::value_type x)
        """
        return _pyvacon_swig.vectorBool_insert(self, *args)

    def reserve(self, n):
        r"""reserve(vectorBool self, std::vector< bool >::size_type n)"""
        return _pyvacon_swig.vectorBool_reserve(self, n)

    def capacity(self):
        r"""capacity(vectorBool self) -> std::vector< bool >::size_type"""
        return _pyvacon_swig.vectorBool_capacity(self)
    __swig_destroy__ = _pyvacon_swig.delete_vectorBool

# Register vectorBool in _pyvacon_swig:
_pyvacon_swig.vectorBool_swigregister(vectorBool)

class vectorPTime(object):
    r"""Proxy of C++ std::vector< ptime > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(vectorPTime self) -> SwigPyIterator"""
        return _pyvacon_swig.vectorPTime_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(vectorPTime self) -> bool"""
        return _pyvacon_swig.vectorPTime___nonzero__(self)

    def __bool__(self):
        r"""__bool__(vectorPTime self) -> bool"""
        return _pyvacon_swig.vectorPTime___bool__(self)

    def __len__(self):
        r"""__len__(vectorPTime self) -> std::vector< ptime >::size_type"""
        return _pyvacon_swig.vectorPTime___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(vectorPTime self, std::vector< ptime >::difference_type i, std::vector< ptime >::difference_type j) -> vectorPTime"""
        return _pyvacon_swig.vectorPTime___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(vectorPTime self, std::vector< ptime >::difference_type i, std::vector< ptime >::difference_type j)
        __setslice__(vectorPTime self, std::vector< ptime >::difference_type i, std::vector< ptime >::difference_type j, vectorPTime v)
        """
        return _pyvacon_swig.vectorPTime___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(vectorPTime self, std::vector< ptime >::difference_type i, std::vector< ptime >::difference_type j)"""
        return _pyvacon_swig.vectorPTime___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(vectorPTime self, std::vector< ptime >::difference_type i)
        __delitem__(vectorPTime self, PySliceObject * slice)
        """
        return _pyvacon_swig.vectorPTime___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(vectorPTime self, PySliceObject * slice) -> vectorPTime
        __getitem__(vectorPTime self, std::vector< ptime >::difference_type i) -> ptime
        """
        return _pyvacon_swig.vectorPTime___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(vectorPTime self, PySliceObject * slice, vectorPTime v)
        __setitem__(vectorPTime self, PySliceObject * slice)
        __setitem__(vectorPTime self, std::vector< ptime >::difference_type i, ptime x)
        """
        return _pyvacon_swig.vectorPTime___setitem__(self, *args)

    def pop(self):
        r"""pop(vectorPTime self) -> ptime"""
        return _pyvacon_swig.vectorPTime_pop(self)

    def append(self, x):
        r"""append(vectorPTime self, ptime x)"""
        return _pyvacon_swig.vectorPTime_append(self, x)

    def empty(self):
        r"""empty(vectorPTime self) -> bool"""
        return _pyvacon_swig.vectorPTime_empty(self)

    def size(self):
        r"""size(vectorPTime self) -> std::vector< ptime >::size_type"""
        return _pyvacon_swig.vectorPTime_size(self)

    def swap(self, v):
        r"""swap(vectorPTime self, vectorPTime v)"""
        return _pyvacon_swig.vectorPTime_swap(self, v)

    def begin(self):
        r"""begin(vectorPTime self) -> std::vector< ptime >::iterator"""
        return _pyvacon_swig.vectorPTime_begin(self)

    def end(self):
        r"""end(vectorPTime self) -> std::vector< ptime >::iterator"""
        return _pyvacon_swig.vectorPTime_end(self)

    def rbegin(self):
        r"""rbegin(vectorPTime self) -> std::vector< ptime >::reverse_iterator"""
        return _pyvacon_swig.vectorPTime_rbegin(self)

    def rend(self):
        r"""rend(vectorPTime self) -> std::vector< ptime >::reverse_iterator"""
        return _pyvacon_swig.vectorPTime_rend(self)

    def clear(self):
        r"""clear(vectorPTime self)"""
        return _pyvacon_swig.vectorPTime_clear(self)

    def get_allocator(self):
        r"""get_allocator(vectorPTime self) -> std::vector< ptime >::allocator_type"""
        return _pyvacon_swig.vectorPTime_get_allocator(self)

    def pop_back(self):
        r"""pop_back(vectorPTime self)"""
        return _pyvacon_swig.vectorPTime_pop_back(self)

    def erase(self, *args):
        r"""
        erase(vectorPTime self, std::vector< ptime >::iterator pos) -> std::vector< ptime >::iterator
        erase(vectorPTime self, std::vector< ptime >::iterator first, std::vector< ptime >::iterator last) -> std::vector< ptime >::iterator
        """
        return _pyvacon_swig.vectorPTime_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(vectorPTime self) -> vectorPTime
        __init__(vectorPTime self, vectorPTime other) -> vectorPTime
        __init__(vectorPTime self, std::vector< ptime >::size_type size) -> vectorPTime
        __init__(vectorPTime self, std::vector< ptime >::size_type size, ptime value) -> vectorPTime
        """
        _pyvacon_swig.vectorPTime_swiginit(self, _pyvacon_swig.new_vectorPTime(*args))

    def push_back(self, x):
        r"""push_back(vectorPTime self, ptime x)"""
        return _pyvacon_swig.vectorPTime_push_back(self, x)

    def front(self):
        r"""front(vectorPTime self) -> ptime"""
        return _pyvacon_swig.vectorPTime_front(self)

    def back(self):
        r"""back(vectorPTime self) -> ptime"""
        return _pyvacon_swig.vectorPTime_back(self)

    def assign(self, n, x):
        r"""assign(vectorPTime self, std::vector< ptime >::size_type n, ptime x)"""
        return _pyvacon_swig.vectorPTime_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(vectorPTime self, std::vector< ptime >::size_type new_size)
        resize(vectorPTime self, std::vector< ptime >::size_type new_size, ptime x)
        """
        return _pyvacon_swig.vectorPTime_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(vectorPTime self, std::vector< ptime >::iterator pos, ptime x) -> std::vector< ptime >::iterator
        insert(vectorPTime self, std::vector< ptime >::iterator pos, std::vector< ptime >::size_type n, ptime x)
        """
        return _pyvacon_swig.vectorPTime_insert(self, *args)

    def reserve(self, n):
        r"""reserve(vectorPTime self, std::vector< ptime >::size_type n)"""
        return _pyvacon_swig.vectorPTime_reserve(self, n)

    def capacity(self):
        r"""capacity(vectorPTime self) -> std::vector< ptime >::size_type"""
        return _pyvacon_swig.vectorPTime_capacity(self)
    __swig_destroy__ = _pyvacon_swig.delete_vectorPTime

# Register vectorPTime in _pyvacon_swig:
_pyvacon_swig.vectorPTime_swigregister(vectorPTime)

class vectorVectorPTime(object):
    r"""Proxy of C++ std::vector< std::vector< ptime > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(vectorVectorPTime self) -> SwigPyIterator"""
        return _pyvacon_swig.vectorVectorPTime_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(vectorVectorPTime self) -> bool"""
        return _pyvacon_swig.vectorVectorPTime___nonzero__(self)

    def __bool__(self):
        r"""__bool__(vectorVectorPTime self) -> bool"""
        return _pyvacon_swig.vectorVectorPTime___bool__(self)

    def __len__(self):
        r"""__len__(vectorVectorPTime self) -> std::vector< std::vector< ptime > >::size_type"""
        return _pyvacon_swig.vectorVectorPTime___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(vectorVectorPTime self, std::vector< std::vector< ptime > >::difference_type i, std::vector< std::vector< ptime > >::difference_type j) -> vectorVectorPTime"""
        return _pyvacon_swig.vectorVectorPTime___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(vectorVectorPTime self, std::vector< std::vector< ptime > >::difference_type i, std::vector< std::vector< ptime > >::difference_type j)
        __setslice__(vectorVectorPTime self, std::vector< std::vector< ptime > >::difference_type i, std::vector< std::vector< ptime > >::difference_type j, vectorVectorPTime v)
        """
        return _pyvacon_swig.vectorVectorPTime___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(vectorVectorPTime self, std::vector< std::vector< ptime > >::difference_type i, std::vector< std::vector< ptime > >::difference_type j)"""
        return _pyvacon_swig.vectorVectorPTime___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(vectorVectorPTime self, std::vector< std::vector< ptime > >::difference_type i)
        __delitem__(vectorVectorPTime self, PySliceObject * slice)
        """
        return _pyvacon_swig.vectorVectorPTime___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(vectorVectorPTime self, PySliceObject * slice) -> vectorVectorPTime
        __getitem__(vectorVectorPTime self, std::vector< std::vector< ptime > >::difference_type i) -> vectorPTime
        """
        return _pyvacon_swig.vectorVectorPTime___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(vectorVectorPTime self, PySliceObject * slice, vectorVectorPTime v)
        __setitem__(vectorVectorPTime self, PySliceObject * slice)
        __setitem__(vectorVectorPTime self, std::vector< std::vector< ptime > >::difference_type i, vectorPTime x)
        """
        return _pyvacon_swig.vectorVectorPTime___setitem__(self, *args)

    def pop(self):
        r"""pop(vectorVectorPTime self) -> vectorPTime"""
        return _pyvacon_swig.vectorVectorPTime_pop(self)

    def append(self, x):
        r"""append(vectorVectorPTime self, vectorPTime x)"""
        return _pyvacon_swig.vectorVectorPTime_append(self, x)

    def empty(self):
        r"""empty(vectorVectorPTime self) -> bool"""
        return _pyvacon_swig.vectorVectorPTime_empty(self)

    def size(self):
        r"""size(vectorVectorPTime self) -> std::vector< std::vector< ptime > >::size_type"""
        return _pyvacon_swig.vectorVectorPTime_size(self)

    def swap(self, v):
        r"""swap(vectorVectorPTime self, vectorVectorPTime v)"""
        return _pyvacon_swig.vectorVectorPTime_swap(self, v)

    def begin(self):
        r"""begin(vectorVectorPTime self) -> std::vector< std::vector< ptime > >::iterator"""
        return _pyvacon_swig.vectorVectorPTime_begin(self)

    def end(self):
        r"""end(vectorVectorPTime self) -> std::vector< std::vector< ptime > >::iterator"""
        return _pyvacon_swig.vectorVectorPTime_end(self)

    def rbegin(self):
        r"""rbegin(vectorVectorPTime self) -> std::vector< std::vector< ptime > >::reverse_iterator"""
        return _pyvacon_swig.vectorVectorPTime_rbegin(self)

    def rend(self):
        r"""rend(vectorVectorPTime self) -> std::vector< std::vector< ptime > >::reverse_iterator"""
        return _pyvacon_swig.vectorVectorPTime_rend(self)

    def clear(self):
        r"""clear(vectorVectorPTime self)"""
        return _pyvacon_swig.vectorVectorPTime_clear(self)

    def get_allocator(self):
        r"""get_allocator(vectorVectorPTime self) -> std::vector< std::vector< ptime > >::allocator_type"""
        return _pyvacon_swig.vectorVectorPTime_get_allocator(self)

    def pop_back(self):
        r"""pop_back(vectorVectorPTime self)"""
        return _pyvacon_swig.vectorVectorPTime_pop_back(self)

    def erase(self, *args):
        r"""
        erase(vectorVectorPTime self, std::vector< std::vector< ptime > >::iterator pos) -> std::vector< std::vector< ptime > >::iterator
        erase(vectorVectorPTime self, std::vector< std::vector< ptime > >::iterator first, std::vector< std::vector< ptime > >::iterator last) -> std::vector< std::vector< ptime > >::iterator
        """
        return _pyvacon_swig.vectorVectorPTime_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(vectorVectorPTime self) -> vectorVectorPTime
        __init__(vectorVectorPTime self, vectorVectorPTime other) -> vectorVectorPTime
        __init__(vectorVectorPTime self, std::vector< std::vector< ptime > >::size_type size) -> vectorVectorPTime
        __init__(vectorVectorPTime self, std::vector< std::vector< ptime > >::size_type size, vectorPTime value) -> vectorVectorPTime
        """
        _pyvacon_swig.vectorVectorPTime_swiginit(self, _pyvacon_swig.new_vectorVectorPTime(*args))

    def push_back(self, x):
        r"""push_back(vectorVectorPTime self, vectorPTime x)"""
        return _pyvacon_swig.vectorVectorPTime_push_back(self, x)

    def front(self):
        r"""front(vectorVectorPTime self) -> vectorPTime"""
        return _pyvacon_swig.vectorVectorPTime_front(self)

    def back(self):
        r"""back(vectorVectorPTime self) -> vectorPTime"""
        return _pyvacon_swig.vectorVectorPTime_back(self)

    def assign(self, n, x):
        r"""assign(vectorVectorPTime self, std::vector< std::vector< ptime > >::size_type n, vectorPTime x)"""
        return _pyvacon_swig.vectorVectorPTime_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(vectorVectorPTime self, std::vector< std::vector< ptime > >::size_type new_size)
        resize(vectorVectorPTime self, std::vector< std::vector< ptime > >::size_type new_size, vectorPTime x)
        """
        return _pyvacon_swig.vectorVectorPTime_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(vectorVectorPTime self, std::vector< std::vector< ptime > >::iterator pos, vectorPTime x) -> std::vector< std::vector< ptime > >::iterator
        insert(vectorVectorPTime self, std::vector< std::vector< ptime > >::iterator pos, std::vector< std::vector< ptime > >::size_type n, vectorPTime x)
        """
        return _pyvacon_swig.vectorVectorPTime_insert(self, *args)

    def reserve(self, n):
        r"""reserve(vectorVectorPTime self, std::vector< std::vector< ptime > >::size_type n)"""
        return _pyvacon_swig.vectorVectorPTime_reserve(self, n)

    def capacity(self):
        r"""capacity(vectorVectorPTime self) -> std::vector< std::vector< ptime > >::size_type"""
        return _pyvacon_swig.vectorVectorPTime_capacity(self)
    __swig_destroy__ = _pyvacon_swig.delete_vectorVectorPTime

# Register vectorVectorPTime in _pyvacon_swig:
_pyvacon_swig.vectorVectorPTime_swigregister(vectorVectorPTime)

class ptimePtr(object):
    r"""Proxy of C++ std::shared_ptr< ptime > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ptimePtr self) -> ptimePtr"""
        _pyvacon_swig.ptimePtr_swiginit(self, _pyvacon_swig.new_ptimePtr())
    __swig_destroy__ = _pyvacon_swig.delete_ptimePtr

# Register ptimePtr in _pyvacon_swig:
_pyvacon_swig.ptimePtr_swigregister(ptimePtr)

class mapStringDouble(object):
    r"""Proxy of C++ std::map< std::string,double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(mapStringDouble self) -> SwigPyIterator"""
        return _pyvacon_swig.mapStringDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(mapStringDouble self) -> bool"""
        return _pyvacon_swig.mapStringDouble___nonzero__(self)

    def __bool__(self):
        r"""__bool__(mapStringDouble self) -> bool"""
        return _pyvacon_swig.mapStringDouble___bool__(self)

    def __len__(self):
        r"""__len__(mapStringDouble self) -> std::map< std::string,double >::size_type"""
        return _pyvacon_swig.mapStringDouble___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        r"""__getitem__(mapStringDouble self, std::map< std::string,double >::key_type const & key) -> std::map< std::string,double >::mapped_type const &"""
        return _pyvacon_swig.mapStringDouble___getitem__(self, key)

    def __delitem__(self, key):
        r"""__delitem__(mapStringDouble self, std::map< std::string,double >::key_type const & key)"""
        return _pyvacon_swig.mapStringDouble___delitem__(self, key)

    def has_key(self, key):
        r"""has_key(mapStringDouble self, std::map< std::string,double >::key_type const & key) -> bool"""
        return _pyvacon_swig.mapStringDouble_has_key(self, key)

    def keys(self):
        r"""keys(mapStringDouble self) -> PyObject *"""
        return _pyvacon_swig.mapStringDouble_keys(self)

    def values(self):
        r"""values(mapStringDouble self) -> PyObject *"""
        return _pyvacon_swig.mapStringDouble_values(self)

    def items(self):
        r"""items(mapStringDouble self) -> PyObject *"""
        return _pyvacon_swig.mapStringDouble_items(self)

    def __contains__(self, key):
        r"""__contains__(mapStringDouble self, std::map< std::string,double >::key_type const & key) -> bool"""
        return _pyvacon_swig.mapStringDouble___contains__(self, key)

    def key_iterator(self):
        r"""key_iterator(mapStringDouble self) -> SwigPyIterator"""
        return _pyvacon_swig.mapStringDouble_key_iterator(self)

    def value_iterator(self):
        r"""value_iterator(mapStringDouble self) -> SwigPyIterator"""
        return _pyvacon_swig.mapStringDouble_value_iterator(self)

    def __setitem__(self, *args):
        r"""
        __setitem__(mapStringDouble self, std::map< std::string,double >::key_type const & key)
        __setitem__(mapStringDouble self, std::map< std::string,double >::key_type const & key, std::map< std::string,double >::mapped_type const & x)
        """
        return _pyvacon_swig.mapStringDouble___setitem__(self, *args)

    def asdict(self):
        r"""asdict(mapStringDouble self) -> PyObject *"""
        return _pyvacon_swig.mapStringDouble_asdict(self)

    def __init__(self, *args):
        r"""
        __init__(mapStringDouble self, std::less< std::string > const & other) -> mapStringDouble
        __init__(mapStringDouble self) -> mapStringDouble
        __init__(mapStringDouble self, mapStringDouble other) -> mapStringDouble
        """
        _pyvacon_swig.mapStringDouble_swiginit(self, _pyvacon_swig.new_mapStringDouble(*args))

    def empty(self):
        r"""empty(mapStringDouble self) -> bool"""
        return _pyvacon_swig.mapStringDouble_empty(self)

    def size(self):
        r"""size(mapStringDouble self) -> std::map< std::string,double >::size_type"""
        return _pyvacon_swig.mapStringDouble_size(self)

    def swap(self, v):
        r"""swap(mapStringDouble self, mapStringDouble v)"""
        return _pyvacon_swig.mapStringDouble_swap(self, v)

    def begin(self):
        r"""begin(mapStringDouble self) -> std::map< std::string,double >::iterator"""
        return _pyvacon_swig.mapStringDouble_begin(self)

    def end(self):
        r"""end(mapStringDouble self) -> std::map< std::string,double >::iterator"""
        return _pyvacon_swig.mapStringDouble_end(self)

    def rbegin(self):
        r"""rbegin(mapStringDouble self) -> std::map< std::string,double >::reverse_iterator"""
        return _pyvacon_swig.mapStringDouble_rbegin(self)

    def rend(self):
        r"""rend(mapStringDouble self) -> std::map< std::string,double >::reverse_iterator"""
        return _pyvacon_swig.mapStringDouble_rend(self)

    def clear(self):
        r"""clear(mapStringDouble self)"""
        return _pyvacon_swig.mapStringDouble_clear(self)

    def get_allocator(self):
        r"""get_allocator(mapStringDouble self) -> std::map< std::string,double >::allocator_type"""
        return _pyvacon_swig.mapStringDouble_get_allocator(self)

    def count(self, x):
        r"""count(mapStringDouble self, std::map< std::string,double >::key_type const & x) -> std::map< std::string,double >::size_type"""
        return _pyvacon_swig.mapStringDouble_count(self, x)

    def erase(self, *args):
        r"""
        erase(mapStringDouble self, std::map< std::string,double >::key_type const & x) -> std::map< std::string,double >::size_type
        erase(mapStringDouble self, std::map< std::string,double >::iterator position)
        erase(mapStringDouble self, std::map< std::string,double >::iterator first, std::map< std::string,double >::iterator last)
        """
        return _pyvacon_swig.mapStringDouble_erase(self, *args)

    def find(self, x):
        r"""find(mapStringDouble self, std::map< std::string,double >::key_type const & x) -> std::map< std::string,double >::iterator"""
        return _pyvacon_swig.mapStringDouble_find(self, x)

    def lower_bound(self, x):
        r"""lower_bound(mapStringDouble self, std::map< std::string,double >::key_type const & x) -> std::map< std::string,double >::iterator"""
        return _pyvacon_swig.mapStringDouble_lower_bound(self, x)

    def upper_bound(self, x):
        r"""upper_bound(mapStringDouble self, std::map< std::string,double >::key_type const & x) -> std::map< std::string,double >::iterator"""
        return _pyvacon_swig.mapStringDouble_upper_bound(self, x)
    __swig_destroy__ = _pyvacon_swig.delete_mapStringDouble

# Register mapStringDouble in _pyvacon_swig:
_pyvacon_swig.mapStringDouble_swigregister(mapStringDouble)

class setGregDate(object):
    r"""Proxy of C++ std::set< boost::gregorian::date > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(setGregDate self) -> SwigPyIterator"""
        return _pyvacon_swig.setGregDate_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(setGregDate self) -> bool"""
        return _pyvacon_swig.setGregDate___nonzero__(self)

    def __bool__(self):
        r"""__bool__(setGregDate self) -> bool"""
        return _pyvacon_swig.setGregDate___bool__(self)

    def __len__(self):
        r"""__len__(setGregDate self) -> std::set< boost::gregorian::date >::size_type"""
        return _pyvacon_swig.setGregDate___len__(self)

    def append(self, x):
        r"""append(setGregDate self, gregorian_date x)"""
        return _pyvacon_swig.setGregDate_append(self, x)

    def __contains__(self, x):
        r"""__contains__(setGregDate self, gregorian_date x) -> bool"""
        return _pyvacon_swig.setGregDate___contains__(self, x)

    def __getitem__(self, i):
        r"""__getitem__(setGregDate self, std::set< boost::gregorian::date >::difference_type i) -> gregorian_date"""
        return _pyvacon_swig.setGregDate___getitem__(self, i)

    def add(self, x):
        r"""add(setGregDate self, gregorian_date x)"""
        return _pyvacon_swig.setGregDate_add(self, x)

    def discard(self, x):
        r"""discard(setGregDate self, gregorian_date x)"""
        return _pyvacon_swig.setGregDate_discard(self, x)

    def __init__(self, *args):
        r"""
        __init__(setGregDate self, std::less< boost::gregorian::date > const & other) -> setGregDate
        __init__(setGregDate self) -> setGregDate
        __init__(setGregDate self, setGregDate other) -> setGregDate
        """
        _pyvacon_swig.setGregDate_swiginit(self, _pyvacon_swig.new_setGregDate(*args))

    def empty(self):
        r"""empty(setGregDate self) -> bool"""
        return _pyvacon_swig.setGregDate_empty(self)

    def size(self):
        r"""size(setGregDate self) -> std::set< boost::gregorian::date >::size_type"""
        return _pyvacon_swig.setGregDate_size(self)

    def clear(self):
        r"""clear(setGregDate self)"""
        return _pyvacon_swig.setGregDate_clear(self)

    def swap(self, v):
        r"""swap(setGregDate self, setGregDate v)"""
        return _pyvacon_swig.setGregDate_swap(self, v)

    def count(self, x):
        r"""count(setGregDate self, gregorian_date x) -> std::set< boost::gregorian::date >::size_type"""
        return _pyvacon_swig.setGregDate_count(self, x)

    def begin(self):
        r"""begin(setGregDate self) -> std::set< boost::gregorian::date >::iterator"""
        return _pyvacon_swig.setGregDate_begin(self)

    def end(self):
        r"""end(setGregDate self) -> std::set< boost::gregorian::date >::iterator"""
        return _pyvacon_swig.setGregDate_end(self)

    def rbegin(self):
        r"""rbegin(setGregDate self) -> std::set< boost::gregorian::date >::reverse_iterator"""
        return _pyvacon_swig.setGregDate_rbegin(self)

    def rend(self):
        r"""rend(setGregDate self) -> std::set< boost::gregorian::date >::reverse_iterator"""
        return _pyvacon_swig.setGregDate_rend(self)

    def erase(self, *args):
        r"""
        erase(setGregDate self, gregorian_date x) -> std::set< boost::gregorian::date >::size_type
        erase(setGregDate self, std::set< boost::gregorian::date >::iterator pos)
        erase(setGregDate self, std::set< boost::gregorian::date >::iterator first, std::set< boost::gregorian::date >::iterator last)
        """
        return _pyvacon_swig.setGregDate_erase(self, *args)

    def find(self, x):
        r"""find(setGregDate self, gregorian_date x) -> std::set< boost::gregorian::date >::iterator"""
        return _pyvacon_swig.setGregDate_find(self, x)

    def lower_bound(self, x):
        r"""lower_bound(setGregDate self, gregorian_date x) -> std::set< boost::gregorian::date >::iterator"""
        return _pyvacon_swig.setGregDate_lower_bound(self, x)

    def upper_bound(self, x):
        r"""upper_bound(setGregDate self, gregorian_date x) -> std::set< boost::gregorian::date >::iterator"""
        return _pyvacon_swig.setGregDate_upper_bound(self, x)

    def equal_range(self, x):
        r"""equal_range(setGregDate self, gregorian_date x) -> std::pair< std::set< boost::gregorian::date >::iterator,std::set< boost::gregorian::date >::iterator >"""
        return _pyvacon_swig.setGregDate_equal_range(self, x)

    def insert(self, __x):
        r"""insert(setGregDate self, gregorian_date __x) -> std::pair< std::set< boost::gregorian::date >::iterator,bool >"""
        return _pyvacon_swig.setGregDate_insert(self, __x)
    __swig_destroy__ = _pyvacon_swig.delete_setGregDate

# Register setGregDate in _pyvacon_swig:
_pyvacon_swig.setGregDate_swigregister(setGregDate)


def getEnumClass(a, b):
  return 0

class ptime(object):
    r"""Proxy of C++ ptime class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ptime self) -> ptime
        __init__(ptime self, int year, int month, int days, int hour, int minute, int second) -> ptime
        """
        _pyvacon_swig.ptime_swiginit(self, _pyvacon_swig.new_ptime(*args))

    def to_string(self):
        r"""to_string(ptime self) -> std::string"""
        return _pyvacon_swig.ptime_to_string(self)

    def addDays(self, result, days):
        r"""addDays(ptime self, ptime result, int days)"""
        return _pyvacon_swig.ptime_addDays(self, result, days)

    def year(self):
        r"""year(ptime self) -> int"""
        return _pyvacon_swig.ptime_year(self)

    def month(self):
        r"""month(ptime self) -> int"""
        return _pyvacon_swig.ptime_month(self)

    def day(self):
        r"""day(ptime self) -> int"""
        return _pyvacon_swig.ptime_day(self)

    def hours(self):
        r"""hours(ptime self) -> int"""
        return _pyvacon_swig.ptime_hours(self)

    def minutes(self):
        r"""minutes(ptime self) -> int"""
        return _pyvacon_swig.ptime_minutes(self)

    def seconds(self):
        r"""seconds(ptime self) -> int"""
        return _pyvacon_swig.ptime_seconds(self)
    __swig_destroy__ = _pyvacon_swig.delete_ptime

# Register ptime in _pyvacon_swig:
_pyvacon_swig.ptime_swigregister(ptime)

class time_duration(object):
    r"""Proxy of C++ time_duration class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(time_duration self) -> time_duration
        __init__(time_duration self, int hours, int minutes, int seconds, int nanoseconds) -> time_duration
        """
        _pyvacon_swig.time_duration_swiginit(self, _pyvacon_swig.new_time_duration(*args))

    @staticmethod
    def time_duration_infinite():
        r"""time_duration_infinite() -> time_duration"""
        return _pyvacon_swig.time_duration_time_duration_infinite()
    __swig_destroy__ = _pyvacon_swig.delete_time_duration

# Register time_duration in _pyvacon_swig:
_pyvacon_swig.time_duration_swigregister(time_duration)

def time_duration_time_duration_infinite():
    r"""time_duration_time_duration_infinite() -> time_duration"""
    return _pyvacon_swig.time_duration_time_duration_infinite()

class gregorian_date(object):
    r"""Proxy of C++ boost::gregorian::date class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        date() -> gregorian_date
        __init__(gregorian_date self, int year, int month, int day) -> gregorian_date
        """
        _pyvacon_swig.gregorian_date_swiginit(self, _pyvacon_swig.new_gregorian_date(*args))
    __swig_destroy__ = _pyvacon_swig.delete_gregorian_date

# Register gregorian_date in _pyvacon_swig:
_pyvacon_swig.gregorian_date_swigregister(gregorian_date)

class Period(object):
    r"""Proxy of C++ Period class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, Y, M, D):
        r"""__init__(Period self, int Y, int M, int D) -> Period"""
        _pyvacon_swig.Period_swiginit(self, _pyvacon_swig.new_Period(Y, M, D))

    def getNumYears(self):
        r"""getNumYears(Period self) -> int"""
        return _pyvacon_swig.Period_getNumYears(self)

    def getNumMonths(self):
        r"""getNumMonths(Period self) -> int"""
        return _pyvacon_swig.Period_getNumMonths(self)

    def getNumDays(self):
        r"""getNumDays(Period self) -> int"""
        return _pyvacon_swig.Period_getNumDays(self)

    def calcBoostEndDate(self, startDate):
        r"""calcBoostEndDate(Period self, ptime startDate) -> ptime"""
        return _pyvacon_swig.Period_calcBoostEndDate(self, startDate)

    @staticmethod
    def buildFromString(s):
        r"""buildFromString(std::string const & s) -> Period"""
        return _pyvacon_swig.Period_buildFromString(s)
    __swig_destroy__ = _pyvacon_swig.delete_Period

# Register Period in _pyvacon_swig:
_pyvacon_swig.Period_swigregister(Period)

def Period_buildFromString(s):
    r"""Period_buildFromString(std::string const & s) -> Period"""
    return _pyvacon_swig.Period_buildFromString(s)

class Clonable(object):
    r"""Proxy of C++ Clonable class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getClassName(self):
        r"""getClassName(Clonable self) -> std::string"""
        return _pyvacon_swig.Clonable_getClassName(self)

    @staticmethod
    def getString(obj):
        r"""getString(std::shared_ptr< Clonable const > const & obj) -> std::string"""
        return _pyvacon_swig.Clonable_getString(obj)
    __swig_destroy__ = _pyvacon_swig.delete_Clonable

# Register Clonable in _pyvacon_swig:
_pyvacon_swig.Clonable_swigregister(Clonable)

def Clonable_getString(obj):
    r"""Clonable_getString(std::shared_ptr< Clonable const > const & obj) -> std::string"""
    return _pyvacon_swig.Clonable_getString(obj)

class BaseObject(Clonable):
    r"""Proxy of C++ BaseObject class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getObjectId(self):
        r"""getObjectId(BaseObject self) -> std::string const &"""
        return _pyvacon_swig.BaseObject_getObjectId(self)

    def getType(self):
        r"""getType(BaseObject self) -> std::string"""
        return _pyvacon_swig.BaseObject_getType(self)

    def getCategory(self):
        r"""getCategory(BaseObject self) -> std::string"""
        return _pyvacon_swig.BaseObject_getCategory(self)
    __swig_destroy__ = _pyvacon_swig.delete_BaseObject

# Register BaseObject in _pyvacon_swig:
_pyvacon_swig.BaseObject_swigregister(BaseObject)

class BaseInterface(object):
    r"""Proxy of C++ BaseInterface class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyvacon_swig.delete_BaseInterface

    def clearCache(self):
        r"""clearCache(BaseInterface self)"""
        return _pyvacon_swig.BaseInterface_clearCache(self)

    def addObject(self, obj):
        r"""addObject(BaseInterface self, std::shared_ptr< BaseObject > obj)"""
        return _pyvacon_swig.BaseInterface_addObject(self, obj)

    def getObject(self, id, objectType, calcDate):
        r"""getObject(BaseInterface self, std::string const & id, std::string const & objectType, ptime calcDate) -> std::shared_ptr< BaseObject const >"""
        return _pyvacon_swig.BaseInterface_getObject(self, id, objectType, calcDate)

# Register BaseInterface in _pyvacon_swig:
_pyvacon_swig.BaseInterface_swigregister(BaseInterface)

class BaseParameter(BaseObject):
    r"""Proxy of C++ BaseParameter class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyvacon_swig.delete_BaseParameter

# Register BaseParameter in _pyvacon_swig:
_pyvacon_swig.BaseParameter_swigregister(BaseParameter)

class DataTable(BaseObject):
    r"""Proxy of C++ DataTable class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(DataTable self) -> DataTable
        __init__(DataTable self, std::string const & name) -> DataTable
        """
        _pyvacon_swig.DataTable_swiginit(self, _pyvacon_swig.new_DataTable(*args))

    def addDoubleColumn(self, name, data):
        r"""addDoubleColumn(DataTable self, std::string const & name, vectorDouble data)"""
        return _pyvacon_swig.DataTable_addDoubleColumn(self, name, data)

    def addStringColumn(self, name, data):
        r"""addStringColumn(DataTable self, std::string const & name, vectorString data)"""
        return _pyvacon_swig.DataTable_addStringColumn(self, name, data)

    def addDateColumn(self, name, data):
        r"""addDateColumn(DataTable self, std::string const & name, vectorPTime data)"""
        return _pyvacon_swig.DataTable_addDateColumn(self, name, data)

    def nRows(self):
        r"""nRows(DataTable self) -> size_t"""
        return _pyvacon_swig.DataTable_nRows(self)

    def nColumns(self):
        r"""nColumns(DataTable self) -> size_t"""
        return _pyvacon_swig.DataTable_nColumns(self)

    def getCellInformation(self, row, column):
        r"""getCellInformation(DataTable self, int row, int column) -> std::string"""
        return _pyvacon_swig.DataTable_getCellInformation(self, row, column)

    def getHeaderInformations(self):
        r"""getHeaderInformations(DataTable self) -> std::string"""
        return _pyvacon_swig.DataTable_getHeaderInformations(self)

    def getColumnDataType(self, i):
        r"""getColumnDataType(DataTable self, size_t i) -> std::string"""
        return _pyvacon_swig.DataTable_getColumnDataType(self, i)

    def writeCSV(self, fileName):
        r"""writeCSV(DataTable self, std::string fileName)"""
        return _pyvacon_swig.DataTable_writeCSV(self, fileName)
    __swig_destroy__ = _pyvacon_swig.delete_DataTable

# Register DataTable in _pyvacon_swig:
_pyvacon_swig.DataTable_swigregister(DataTable)

class Logger(object):
    r"""Proxy of C++ Logger class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def setLogFile(filename):
        r"""setLogFile(std::string const & filename)"""
        return _pyvacon_swig.Logger_setLogFile(filename)

    @staticmethod
    def setLogLevel(level):
        r"""setLogLevel(std::string const & level)"""
        return _pyvacon_swig.Logger_setLogLevel(level)
    __swig_destroy__ = _pyvacon_swig.delete_Logger

# Register Logger in _pyvacon_swig:
_pyvacon_swig.Logger_swigregister(Logger)

def Logger_setLogFile(filename):
    r"""Logger_setLogFile(std::string const & filename)"""
    return _pyvacon_swig.Logger_setLogFile(filename)

def Logger_setLogLevel(level):
    r"""Logger_setLogLevel(std::string const & level)"""
    return _pyvacon_swig.Logger_setLogLevel(level)


def setEnumClass(clsName, name, cls, strCr):
    r"""setEnumClass(std::string const & clsName, std::string const & name, PyObject * cls, PyObject * strCr)"""
    return _pyvacon_swig.setEnumClass(clsName, name, cls, strCr)

def getEnumClassContainer():
    r"""getEnumClassContainer() -> std::map< std::string,std::pair< PyObject *,PyObject * >,std::less< std::string >,std::allocator< std::pair< std::string const,std::pair< PyObject *,PyObject * > > > > *"""
    return _pyvacon_swig.getEnumClassContainer()
_ExtrapolationType_NONE = _pyvacon_swig._ExtrapolationType_NONE

_ExtrapolationType_CONSTANT = _pyvacon_swig._ExtrapolationType_CONSTANT

_ExtrapolationType_LINEAR = _pyvacon_swig._ExtrapolationType_LINEAR

_ExtrapolationType_LINEARLOG = _pyvacon_swig._ExtrapolationType_LINEARLOG

_ExtrapolationType_CONSTANT_DF = _pyvacon_swig._ExtrapolationType_CONSTANT_DF


ExtrapolationType = _enum_creator.create_enum('ExtrapolationType', vars())
_ExtrapolationType_Str = (lambda t: lambda x : t[x])(ExtrapolationType)
setEnumClass('', 'ExtrapolationType', ExtrapolationType, _ExtrapolationType_Str)

_InterpolationType_CONSTANT = _pyvacon_swig._InterpolationType_CONSTANT

_InterpolationType_LINEAR = _pyvacon_swig._InterpolationType_LINEAR

_InterpolationType_LINEARLOG = _pyvacon_swig._InterpolationType_LINEARLOG

_InterpolationType_CONSTRAINED_SPLINE = _pyvacon_swig._InterpolationType_CONSTRAINED_SPLINE

_InterpolationType_HAGAN = _pyvacon_swig._InterpolationType_HAGAN

_InterpolationType_HAGAN_DF = _pyvacon_swig._InterpolationType_HAGAN_DF


InterpolationType = _enum_creator.create_enum('InterpolationType', vars())
_InterpolationType_Str = (lambda t: lambda x : t[x])(InterpolationType)
setEnumClass('', 'InterpolationType', InterpolationType, _InterpolationType_Str)

class Interpolation1D(Clonable):
    r"""Proxy of C++ Interpolation::Interpolation1D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def compute(self, x):
        r"""compute(Interpolation1D self, double x) -> double"""
        return _pyvacon_swig.Interpolation1D_compute(self, x)

    def interpolationType(self):
        r"""interpolationType(Interpolation1D self) -> Interpolation::InterpolationType"""
        return _pyvacon_swig.Interpolation1D_interpolationType(self)

    def extrapolationType(self):
        r"""extrapolationType(Interpolation1D self) -> Extrapolation::ExtrapolationType"""
        return _pyvacon_swig.Interpolation1D_extrapolationType(self)
    __swig_destroy__ = _pyvacon_swig.delete_Interpolation1D

# Register Interpolation1D in _pyvacon_swig:
_pyvacon_swig.Interpolation1D_swigregister(Interpolation1D)

class InterpolationLinear1D(Interpolation1D):
    r"""Proxy of C++ Interpolation::InterpolationLinear1D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def compute(self, x):
        r"""compute(InterpolationLinear1D self, double x) -> double"""
        return _pyvacon_swig.InterpolationLinear1D_compute(self, x)

    def __init__(self, xValues, yValues):
        r"""__init__(InterpolationLinear1D self, vectorDouble xValues, vectorDouble yValues) -> InterpolationLinear1D"""
        _pyvacon_swig.InterpolationLinear1D_swiginit(self, _pyvacon_swig.new_InterpolationLinear1D(xValues, yValues))
    __swig_destroy__ = _pyvacon_swig.delete_InterpolationLinear1D

# Register InterpolationLinear1D in _pyvacon_swig:
_pyvacon_swig.InterpolationLinear1D_swigregister(InterpolationLinear1D)

class InterpolationMonotoneSpline1D(Interpolation1D):
    r"""Proxy of C++ Interpolation::InterpolationMonotoneSpline1D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def compute(self, x):
        r"""compute(InterpolationMonotoneSpline1D self, double x) -> double"""
        return _pyvacon_swig.InterpolationMonotoneSpline1D_compute(self, x)

    def __init__(self, xValues, yValues):
        r"""__init__(InterpolationMonotoneSpline1D self, vectorDouble xValues, vectorDouble yValues) -> InterpolationMonotoneSpline1D"""
        _pyvacon_swig.InterpolationMonotoneSpline1D_swiginit(self, _pyvacon_swig.new_InterpolationMonotoneSpline1D(xValues, yValues))
    __swig_destroy__ = _pyvacon_swig.delete_InterpolationMonotoneSpline1D

# Register InterpolationMonotoneSpline1D in _pyvacon_swig:
_pyvacon_swig.InterpolationMonotoneSpline1D_swigregister(InterpolationMonotoneSpline1D)

class InterpolationNaturalSpline1D(Interpolation1D):
    r"""Proxy of C++ Interpolation::InterpolationNaturalSpline1D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def compute(self, x):
        r"""compute(InterpolationNaturalSpline1D self, double x) -> double"""
        return _pyvacon_swig.InterpolationNaturalSpline1D_compute(self, x)

    def __init__(self, xValues, yValues):
        r"""__init__(InterpolationNaturalSpline1D self, vectorDouble xValues, vectorDouble yValues) -> InterpolationNaturalSpline1D"""
        _pyvacon_swig.InterpolationNaturalSpline1D_swiginit(self, _pyvacon_swig.new_InterpolationNaturalSpline1D(xValues, yValues))
    __swig_destroy__ = _pyvacon_swig.delete_InterpolationNaturalSpline1D

# Register InterpolationNaturalSpline1D in _pyvacon_swig:
_pyvacon_swig.InterpolationNaturalSpline1D_swigregister(InterpolationNaturalSpline1D)

class InterpolationHagan1D(Interpolation1D):
    r"""Proxy of C++ Interpolation::InterpolationHagan1D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def compute(self, x):
        r"""compute(InterpolationHagan1D self, double x) -> double"""
        return _pyvacon_swig.InterpolationHagan1D_compute(self, x)

    def __init__(self, xValues, yValues):
        r"""__init__(InterpolationHagan1D self, vectorDouble xValues, vectorDouble yValues) -> InterpolationHagan1D"""
        _pyvacon_swig.InterpolationHagan1D_swiginit(self, _pyvacon_swig.new_InterpolationHagan1D(xValues, yValues))
    __swig_destroy__ = _pyvacon_swig.delete_InterpolationHagan1D

# Register InterpolationHagan1D in _pyvacon_swig:
_pyvacon_swig.InterpolationHagan1D_swigregister(InterpolationHagan1D)

class InterpolationHagan1D_DF(InterpolationHagan1D):
    r"""Proxy of C++ Interpolation::InterpolationHagan1D_DF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def compute(self, x):
        r"""compute(InterpolationHagan1D_DF self, double x) -> double"""
        return _pyvacon_swig.InterpolationHagan1D_DF_compute(self, x)

    def __init__(self, xValues, yValues):
        r"""__init__(InterpolationHagan1D_DF self, vectorDouble xValues, vectorDouble yValues) -> InterpolationHagan1D_DF"""
        _pyvacon_swig.InterpolationHagan1D_DF_swiginit(self, _pyvacon_swig.new_InterpolationHagan1D_DF(xValues, yValues))
    __swig_destroy__ = _pyvacon_swig.delete_InterpolationHagan1D_DF

# Register InterpolationHagan1D_DF in _pyvacon_swig:
_pyvacon_swig.InterpolationHagan1D_DF_swigregister(InterpolationHagan1D_DF)

class ProjectToCorrelation(object):
    r"""Proxy of C++ LinearAlgebra::ProjectToCorrelation class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def projectToCorrelationMatrix(A, rowIndex, colIndex, maxIter=100, tol=1e-5, minEigen=0.01):
        r"""projectToCorrelationMatrix(vectorVectorDouble A, vectorInt rowIndex, vectorInt colIndex, size_t maxIter=100, double tol=1e-5, double minEigen=0.01) -> vectorVectorDouble"""
        return _pyvacon_swig.ProjectToCorrelation_projectToCorrelationMatrix(A, rowIndex, colIndex, maxIter, tol, minEigen)

    def __init__(self):
        r"""__init__(ProjectToCorrelation self) -> ProjectToCorrelation"""
        _pyvacon_swig.ProjectToCorrelation_swiginit(self, _pyvacon_swig.new_ProjectToCorrelation())
    __swig_destroy__ = _pyvacon_swig.delete_ProjectToCorrelation

# Register ProjectToCorrelation in _pyvacon_swig:
_pyvacon_swig.ProjectToCorrelation_swigregister(ProjectToCorrelation)

def ProjectToCorrelation_projectToCorrelationMatrix(A, rowIndex, colIndex, maxIter=100, tol=1e-5, minEigen=0.01):
    r"""ProjectToCorrelation_projectToCorrelationMatrix(vectorVectorDouble A, vectorInt rowIndex, vectorInt colIndex, size_t maxIter=100, double tol=1e-5, double minEigen=0.01) -> vectorVectorDouble"""
    return _pyvacon_swig.ProjectToCorrelation_projectToCorrelationMatrix(A, rowIndex, colIndex, maxIter, tol, minEigen)

class LevenbergMarquardtParameter(BaseParameter):
    r"""Proxy of C++ Optimization::LevenbergMarquardtParameter class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(LevenbergMarquardtParameter self) -> LevenbergMarquardtParameter
        __init__(LevenbergMarquardtParameter self, std::string const & id) -> LevenbergMarquardtParameter
        """
        _pyvacon_swig.LevenbergMarquardtParameter_swiginit(self, _pyvacon_swig.new_LevenbergMarquardtParameter(*args))
    maxIter = property(_pyvacon_swig.LevenbergMarquardtParameter_maxIter_get, _pyvacon_swig.LevenbergMarquardtParameter_maxIter_set, doc=r"""maxIter : int""")
    fTol = property(_pyvacon_swig.LevenbergMarquardtParameter_fTol_get, _pyvacon_swig.LevenbergMarquardtParameter_fTol_set, doc=r"""fTol : double""")
    xTol = property(_pyvacon_swig.LevenbergMarquardtParameter_xTol_get, _pyvacon_swig.LevenbergMarquardtParameter_xTol_set, doc=r"""xTol : double""")
    gTol = property(_pyvacon_swig.LevenbergMarquardtParameter_gTol_get, _pyvacon_swig.LevenbergMarquardtParameter_gTol_set, doc=r"""gTol : double""")
    epsfcn = property(_pyvacon_swig.LevenbergMarquardtParameter_epsfcn_get, _pyvacon_swig.LevenbergMarquardtParameter_epsfcn_set, doc=r"""epsfcn : double""")
    maxFEval = property(_pyvacon_swig.LevenbergMarquardtParameter_maxFEval_get, _pyvacon_swig.LevenbergMarquardtParameter_maxFEval_set, doc=r"""maxFEval : int""")
    __swig_destroy__ = _pyvacon_swig.delete_LevenbergMarquardtParameter

# Register LevenbergMarquardtParameter in _pyvacon_swig:
_pyvacon_swig.LevenbergMarquardtParameter_swigregister(LevenbergMarquardtParameter)

class RegressionBaseParameter(BaseParameter):
    r"""Proxy of C++ RegressionBaseParameter class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(RegressionBaseParameter self) -> RegressionBaseParameter"""
        _pyvacon_swig.RegressionBaseParameter_swiginit(self, _pyvacon_swig.new_RegressionBaseParameter())
    __swig_destroy__ = _pyvacon_swig.delete_RegressionBaseParameter

# Register RegressionBaseParameter in _pyvacon_swig:
_pyvacon_swig.RegressionBaseParameter_swigregister(RegressionBaseParameter)

class PolynomialRegression1DParameter(RegressionBaseParameter):
    r"""Proxy of C++ PolynomialRegression1DParameter class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(PolynomialRegression1DParameter self, std::string const & id) -> PolynomialRegression1DParameter
        __init__(PolynomialRegression1DParameter self, std::string const & id, unsigned int deg) -> PolynomialRegression1DParameter
        """
        _pyvacon_swig.PolynomialRegression1DParameter_swiginit(self, _pyvacon_swig.new_PolynomialRegression1DParameter(*args))
    degree = property(_pyvacon_swig.PolynomialRegression1DParameter_degree_get, _pyvacon_swig.PolynomialRegression1DParameter_degree_set, doc=r"""degree : unsigned int""")
    __swig_destroy__ = _pyvacon_swig.delete_PolynomialRegression1DParameter

# Register PolynomialRegression1DParameter in _pyvacon_swig:
_pyvacon_swig.PolynomialRegression1DParameter_swigregister(PolynomialRegression1DParameter)

class CubicSplineRegressionParameter(RegressionBaseParameter):
    r"""Proxy of C++ CubicSplineRegressionParameter class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, id, alpha):
        r"""__init__(CubicSplineRegressionParameter self, std::string const & id, double alpha) -> CubicSplineRegressionParameter"""
        _pyvacon_swig.CubicSplineRegressionParameter_swiginit(self, _pyvacon_swig.new_CubicSplineRegressionParameter(id, alpha))
    alpha = property(_pyvacon_swig.CubicSplineRegressionParameter_alpha_get, _pyvacon_swig.CubicSplineRegressionParameter_alpha_set, doc=r"""alpha : double""")
    allowExtrapolation = property(_pyvacon_swig.CubicSplineRegressionParameter_allowExtrapolation_get, _pyvacon_swig.CubicSplineRegressionParameter_allowExtrapolation_set, doc=r"""allowExtrapolation : bool""")
    __swig_destroy__ = _pyvacon_swig.delete_CubicSplineRegressionParameter

# Register CubicSplineRegressionParameter in _pyvacon_swig:
_pyvacon_swig.CubicSplineRegressionParameter_swigregister(CubicSplineRegressionParameter)

class RBFRegressionParameter(RegressionBaseParameter):
    r"""Proxy of C++ RBFRegressionParameter class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, id):
        r"""__init__(RBFRegressionParameter self, std::string const & id) -> RBFRegressionParameter"""
        _pyvacon_swig.RBFRegressionParameter_swiginit(self, _pyvacon_swig.new_RBFRegressionParameter(id))
    includeLinearFunctions = property(_pyvacon_swig.RBFRegressionParameter_includeLinearFunctions_get, _pyvacon_swig.RBFRegressionParameter_includeLinearFunctions_set, doc=r"""includeLinearFunctions : bool""")
    nCenters = property(_pyvacon_swig.RBFRegressionParameter_nCenters_get, _pyvacon_swig.RBFRegressionParameter_nCenters_set, doc=r"""nCenters : size_t""")
    scalingFactor = property(_pyvacon_swig.RBFRegressionParameter_scalingFactor_get, _pyvacon_swig.RBFRegressionParameter_scalingFactor_set, doc=r"""scalingFactor : double""")
    __swig_destroy__ = _pyvacon_swig.delete_RBFRegressionParameter

# Register RBFRegressionParameter in _pyvacon_swig:
_pyvacon_swig.RBFRegressionParameter_swigregister(RBFRegressionParameter)

class PiecewiseLinearRegression1DParameter(RegressionBaseParameter):
    r"""Proxy of C++ PiecewiseLinearRegression1DParameter class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(PiecewiseLinearRegression1DParameter self, std::string const & id) -> PiecewiseLinearRegression1DParameter
        __init__(PiecewiseLinearRegression1DParameter self, std::string const & id, double smoothnessPenalty, size_t nGridPoints) -> PiecewiseLinearRegression1DParameter
        """
        _pyvacon_swig.PiecewiseLinearRegression1DParameter_swiginit(self, _pyvacon_swig.new_PiecewiseLinearRegression1DParameter(*args))
    smoothnessPenalty = property(_pyvacon_swig.PiecewiseLinearRegression1DParameter_smoothnessPenalty_get, _pyvacon_swig.PiecewiseLinearRegression1DParameter_smoothnessPenalty_set, doc=r"""smoothnessPenalty : double""")
    nGridPoints = property(_pyvacon_swig.PiecewiseLinearRegression1DParameter_nGridPoints_get, _pyvacon_swig.PiecewiseLinearRegression1DParameter_nGridPoints_set, doc=r"""nGridPoints : size_t""")
    __swig_destroy__ = _pyvacon_swig.delete_PiecewiseLinearRegression1DParameter

# Register PiecewiseLinearRegression1DParameter in _pyvacon_swig:
_pyvacon_swig.PiecewiseLinearRegression1DParameter_swigregister(PiecewiseLinearRegression1DParameter)

class vectorHolidayCalendar(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< HolidayCalendar const > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(vectorHolidayCalendar self) -> SwigPyIterator"""
        return _pyvacon_swig.vectorHolidayCalendar_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(vectorHolidayCalendar self) -> bool"""
        return _pyvacon_swig.vectorHolidayCalendar___nonzero__(self)

    def __bool__(self):
        r"""__bool__(vectorHolidayCalendar self) -> bool"""
        return _pyvacon_swig.vectorHolidayCalendar___bool__(self)

    def __len__(self):
        r"""__len__(vectorHolidayCalendar self) -> std::vector< std::shared_ptr< HolidayCalendar const > >::size_type"""
        return _pyvacon_swig.vectorHolidayCalendar___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(vectorHolidayCalendar self, std::vector< std::shared_ptr< HolidayCalendar const > >::difference_type i, std::vector< std::shared_ptr< HolidayCalendar const > >::difference_type j) -> vectorHolidayCalendar"""
        return _pyvacon_swig.vectorHolidayCalendar___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(vectorHolidayCalendar self, std::vector< std::shared_ptr< HolidayCalendar const > >::difference_type i, std::vector< std::shared_ptr< HolidayCalendar const > >::difference_type j)
        __setslice__(vectorHolidayCalendar self, std::vector< std::shared_ptr< HolidayCalendar const > >::difference_type i, std::vector< std::shared_ptr< HolidayCalendar const > >::difference_type j, vectorHolidayCalendar v)
        """
        return _pyvacon_swig.vectorHolidayCalendar___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(vectorHolidayCalendar self, std::vector< std::shared_ptr< HolidayCalendar const > >::difference_type i, std::vector< std::shared_ptr< HolidayCalendar const > >::difference_type j)"""
        return _pyvacon_swig.vectorHolidayCalendar___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(vectorHolidayCalendar self, std::vector< std::shared_ptr< HolidayCalendar const > >::difference_type i)
        __delitem__(vectorHolidayCalendar self, PySliceObject * slice)
        """
        return _pyvacon_swig.vectorHolidayCalendar___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(vectorHolidayCalendar self, PySliceObject * slice) -> vectorHolidayCalendar
        __getitem__(vectorHolidayCalendar self, std::vector< std::shared_ptr< HolidayCalendar const > >::difference_type i) -> std::vector< std::shared_ptr< HolidayCalendar const > >::value_type const &
        """
        return _pyvacon_swig.vectorHolidayCalendar___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(vectorHolidayCalendar self, PySliceObject * slice, vectorHolidayCalendar v)
        __setitem__(vectorHolidayCalendar self, PySliceObject * slice)
        __setitem__(vectorHolidayCalendar self, std::vector< std::shared_ptr< HolidayCalendar const > >::difference_type i, std::vector< std::shared_ptr< HolidayCalendar const > >::value_type const & x)
        """
        return _pyvacon_swig.vectorHolidayCalendar___setitem__(self, *args)

    def pop(self):
        r"""pop(vectorHolidayCalendar self) -> std::vector< std::shared_ptr< HolidayCalendar const > >::value_type"""
        return _pyvacon_swig.vectorHolidayCalendar_pop(self)

    def append(self, x):
        r"""append(vectorHolidayCalendar self, std::vector< std::shared_ptr< HolidayCalendar const > >::value_type const & x)"""
        return _pyvacon_swig.vectorHolidayCalendar_append(self, x)

    def empty(self):
        r"""empty(vectorHolidayCalendar self) -> bool"""
        return _pyvacon_swig.vectorHolidayCalendar_empty(self)

    def size(self):
        r"""size(vectorHolidayCalendar self) -> std::vector< std::shared_ptr< HolidayCalendar const > >::size_type"""
        return _pyvacon_swig.vectorHolidayCalendar_size(self)

    def swap(self, v):
        r"""swap(vectorHolidayCalendar self, vectorHolidayCalendar v)"""
        return _pyvacon_swig.vectorHolidayCalendar_swap(self, v)

    def begin(self):
        r"""begin(vectorHolidayCalendar self) -> std::vector< std::shared_ptr< HolidayCalendar const > >::iterator"""
        return _pyvacon_swig.vectorHolidayCalendar_begin(self)

    def end(self):
        r"""end(vectorHolidayCalendar self) -> std::vector< std::shared_ptr< HolidayCalendar const > >::iterator"""
        return _pyvacon_swig.vectorHolidayCalendar_end(self)

    def rbegin(self):
        r"""rbegin(vectorHolidayCalendar self) -> std::vector< std::shared_ptr< HolidayCalendar const > >::reverse_iterator"""
        return _pyvacon_swig.vectorHolidayCalendar_rbegin(self)

    def rend(self):
        r"""rend(vectorHolidayCalendar self) -> std::vector< std::shared_ptr< HolidayCalendar const > >::reverse_iterator"""
        return _pyvacon_swig.vectorHolidayCalendar_rend(self)

    def clear(self):
        r"""clear(vectorHolidayCalendar self)"""
        return _pyvacon_swig.vectorHolidayCalendar_clear(self)

    def get_allocator(self):
        r"""get_allocator(vectorHolidayCalendar self) -> std::vector< std::shared_ptr< HolidayCalendar const > >::allocator_type"""
        return _pyvacon_swig.vectorHolidayCalendar_get_allocator(self)

    def pop_back(self):
        r"""pop_back(vectorHolidayCalendar self)"""
        return _pyvacon_swig.vectorHolidayCalendar_pop_back(self)

    def erase(self, *args):
        r"""
        erase(vectorHolidayCalendar self, std::vector< std::shared_ptr< HolidayCalendar const > >::iterator pos) -> std::vector< std::shared_ptr< HolidayCalendar const > >::iterator
        erase(vectorHolidayCalendar self, std::vector< std::shared_ptr< HolidayCalendar const > >::iterator first, std::vector< std::shared_ptr< HolidayCalendar const > >::iterator last) -> std::vector< std::shared_ptr< HolidayCalendar const > >::iterator
        """
        return _pyvacon_swig.vectorHolidayCalendar_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(vectorHolidayCalendar self) -> vectorHolidayCalendar
        __init__(vectorHolidayCalendar self, vectorHolidayCalendar other) -> vectorHolidayCalendar
        __init__(vectorHolidayCalendar self, std::vector< std::shared_ptr< HolidayCalendar const > >::size_type size) -> vectorHolidayCalendar
        __init__(vectorHolidayCalendar self, std::vector< std::shared_ptr< HolidayCalendar const > >::size_type size, std::vector< std::shared_ptr< HolidayCalendar const > >::value_type const & value) -> vectorHolidayCalendar
        """
        _pyvacon_swig.vectorHolidayCalendar_swiginit(self, _pyvacon_swig.new_vectorHolidayCalendar(*args))

    def push_back(self, x):
        r"""push_back(vectorHolidayCalendar self, std::vector< std::shared_ptr< HolidayCalendar const > >::value_type const & x)"""
        return _pyvacon_swig.vectorHolidayCalendar_push_back(self, x)

    def front(self):
        r"""front(vectorHolidayCalendar self) -> std::vector< std::shared_ptr< HolidayCalendar const > >::value_type const &"""
        return _pyvacon_swig.vectorHolidayCalendar_front(self)

    def back(self):
        r"""back(vectorHolidayCalendar self) -> std::vector< std::shared_ptr< HolidayCalendar const > >::value_type const &"""
        return _pyvacon_swig.vectorHolidayCalendar_back(self)

    def assign(self, n, x):
        r"""assign(vectorHolidayCalendar self, std::vector< std::shared_ptr< HolidayCalendar const > >::size_type n, std::vector< std::shared_ptr< HolidayCalendar const > >::value_type const & x)"""
        return _pyvacon_swig.vectorHolidayCalendar_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(vectorHolidayCalendar self, std::vector< std::shared_ptr< HolidayCalendar const > >::size_type new_size)
        resize(vectorHolidayCalendar self, std::vector< std::shared_ptr< HolidayCalendar const > >::size_type new_size, std::vector< std::shared_ptr< HolidayCalendar const > >::value_type const & x)
        """
        return _pyvacon_swig.vectorHolidayCalendar_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(vectorHolidayCalendar self, std::vector< std::shared_ptr< HolidayCalendar const > >::iterator pos, std::vector< std::shared_ptr< HolidayCalendar const > >::value_type const & x) -> std::vector< std::shared_ptr< HolidayCalendar const > >::iterator
        insert(vectorHolidayCalendar self, std::vector< std::shared_ptr< HolidayCalendar const > >::iterator pos, std::vector< std::shared_ptr< HolidayCalendar const > >::size_type n, std::vector< std::shared_ptr< HolidayCalendar const > >::value_type const & x)
        """
        return _pyvacon_swig.vectorHolidayCalendar_insert(self, *args)

    def reserve(self, n):
        r"""reserve(vectorHolidayCalendar self, std::vector< std::shared_ptr< HolidayCalendar const > >::size_type n)"""
        return _pyvacon_swig.vectorHolidayCalendar_reserve(self, n)

    def capacity(self):
        r"""capacity(vectorHolidayCalendar self) -> std::vector< std::shared_ptr< HolidayCalendar const > >::size_type"""
        return _pyvacon_swig.vectorHolidayCalendar_capacity(self)
    __swig_destroy__ = _pyvacon_swig.delete_vectorHolidayCalendar

# Register vectorHolidayCalendar in _pyvacon_swig:
_pyvacon_swig.vectorHolidayCalendar_swigregister(vectorHolidayCalendar)

class Currency(object):
    r"""Proxy of C++ Currency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, curr):
        r"""__init__(Currency self, std::string const & curr) -> Currency"""
        _pyvacon_swig.Currency_swiginit(self, _pyvacon_swig.new_Currency(curr))

    def toString(self):
        r"""toString(Currency self) -> std::string"""
        return _pyvacon_swig.Currency_toString(self)
    __swig_destroy__ = _pyvacon_swig.delete_Currency

# Register Currency in _pyvacon_swig:
_pyvacon_swig.Currency_swigregister(Currency)

class DayCounter(object):
    r"""Proxy of C++ DayCounter class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    _Type_UNDEF = _pyvacon_swig.DayCounter__Type_UNDEF
    
    _Type_ActAct = _pyvacon_swig.DayCounter__Type_ActAct
    
    _Type_Act365Fixed = _pyvacon_swig.DayCounter__Type_Act365Fixed
    
    _Type_Act360 = _pyvacon_swig.DayCounter__Type_Act360
    
    _Type_ThirtyU360 = _pyvacon_swig.DayCounter__Type_ThirtyU360
    
    _Type_ThirtyE360 = _pyvacon_swig.DayCounter__Type_ThirtyE360
    
    _Type_Act252 = _pyvacon_swig.DayCounter__Type_Act252
    

    Type = _enum_creator.create_enum('Type', vars())
    _Type_Str = (lambda t: lambda x : t[x])(Type)
    setEnumClass('DayCounter', 'Type', Type, _Type_Str)


    def __init__(self, type):
        r"""__init__(DayCounter self, DayCounter::Type const type) -> DayCounter"""
        _pyvacon_swig.DayCounter_swiginit(self, _pyvacon_swig.new_DayCounter(type))

    @staticmethod
    def yf_Act365Fixed(t1, t2):
        r"""yf_Act365Fixed(ptime t1, ptime t2) -> double"""
        return _pyvacon_swig.DayCounter_yf_Act365Fixed(t1, t2)

    @staticmethod
    def fromYf_Act365Fixed(d1, t):
        r"""fromYf_Act365Fixed(ptime d1, double t) -> ptime"""
        return _pyvacon_swig.DayCounter_fromYf_Act365Fixed(d1, t)

    def yf(self, *args):
        r"""
        yf(DayCounter self, ptime d1, ptime d2) -> double
        yf(DayCounter self, vectorDouble results, ptime d, vectorPTime dates)
        """
        return _pyvacon_swig.DayCounter_yf(self, *args)

    def getType(self):
        r"""getType(DayCounter self) -> DayCounter::Type"""
        return _pyvacon_swig.DayCounter_getType(self)
    __swig_destroy__ = _pyvacon_swig.delete_DayCounter

# Register DayCounter in _pyvacon_swig:
_pyvacon_swig.DayCounter_swigregister(DayCounter)

def DayCounter_yf_Act365Fixed(t1, t2):
    r"""DayCounter_yf_Act365Fixed(ptime t1, ptime t2) -> double"""
    return _pyvacon_swig.DayCounter_yf_Act365Fixed(t1, t2)

def DayCounter_fromYf_Act365Fixed(d1, t):
    r"""DayCounter_fromYf_Act365Fixed(ptime d1, double t) -> ptime"""
    return _pyvacon_swig.DayCounter_fromYf_Act365Fixed(d1, t)

class Issuer(BaseObject):
    r"""Proxy of C++ Issuer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Issuer self) -> Issuer
        __init__(Issuer self, std::string const & id, std::string const & fullName, std::shared_ptr< Rating const > const & rating, std::string const & country, std::string const & sector) -> Issuer
        """
        _pyvacon_swig.Issuer_swiginit(self, _pyvacon_swig.new_Issuer(*args))

    def getFullName(self):
        r"""getFullName(Issuer self) -> std::string const &"""
        return _pyvacon_swig.Issuer_getFullName(self)

    def getSector(self):
        r"""getSector(Issuer self) -> std::string const &"""
        return _pyvacon_swig.Issuer_getSector(self)

    def getCountry(self):
        r"""getCountry(Issuer self) -> std::string const &"""
        return _pyvacon_swig.Issuer_getCountry(self)

    def getRating(self):
        r"""getRating(Issuer self) -> std::shared_ptr< Rating const >"""
        return _pyvacon_swig.Issuer_getRating(self)

    def getClassName(self):
        r"""getClassName(Issuer self) -> std::string"""
        return _pyvacon_swig.Issuer_getClassName(self)
    __swig_destroy__ = _pyvacon_swig.delete_Issuer

# Register Issuer in _pyvacon_swig:
_pyvacon_swig.Issuer_swigregister(Issuer)

class HolidayCalendar(BaseObject):
    r"""Proxy of C++ HolidayCalendar class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isHoliday(self, *args):
        r"""
        isHoliday(HolidayCalendar self, gregorian_date d) -> bool
        isHoliday(HolidayCalendar self, ptime d) -> bool
        """
        return _pyvacon_swig.HolidayCalendar_isHoliday(self, *args)

    def getClassName(self):
        r"""getClassName(HolidayCalendar self) -> std::string"""
        return _pyvacon_swig.HolidayCalendar_getClassName(self)
    __swig_destroy__ = _pyvacon_swig.delete_HolidayCalendar

# Register HolidayCalendar in _pyvacon_swig:
_pyvacon_swig.HolidayCalendar_swigregister(HolidayCalendar)

class SimpleHolidayCalendar(HolidayCalendar):
    r"""Proxy of C++ SimpleHolidayCalendar class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, objId):
        r"""__init__(SimpleHolidayCalendar self, std::string const & objId) -> SimpleHolidayCalendar"""
        _pyvacon_swig.SimpleHolidayCalendar_swiginit(self, _pyvacon_swig.new_SimpleHolidayCalendar(objId))

    def setWeekdayAsHoliday(self, weekday):
        r"""setWeekdayAsHoliday(SimpleHolidayCalendar self, int weekday)"""
        return _pyvacon_swig.SimpleHolidayCalendar_setWeekdayAsHoliday(self, weekday)

    def setHolidays(self, *args):
        r"""
        setHolidays(SimpleHolidayCalendar self, setGregDate holidays)
        setHolidays(SimpleHolidayCalendar self, vectorPTime holidays)
        """
        return _pyvacon_swig.SimpleHolidayCalendar_setHolidays(self, *args)

    def getClassName(self):
        r"""getClassName(SimpleHolidayCalendar self) -> std::string"""
        return _pyvacon_swig.SimpleHolidayCalendar_getClassName(self)
    __swig_destroy__ = _pyvacon_swig.delete_SimpleHolidayCalendar

# Register SimpleHolidayCalendar in _pyvacon_swig:
_pyvacon_swig.SimpleHolidayCalendar_swigregister(SimpleHolidayCalendar)

class CombinedHolidayCalendar(HolidayCalendar):
    r"""Proxy of C++ CombinedHolidayCalendar class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, objId, calendars):
        r"""__init__(CombinedHolidayCalendar self, std::string const & objId, vectorHolidayCalendar calendars) -> CombinedHolidayCalendar"""
        _pyvacon_swig.CombinedHolidayCalendar_swiginit(self, _pyvacon_swig.new_CombinedHolidayCalendar(objId, calendars))
    __swig_destroy__ = _pyvacon_swig.delete_CombinedHolidayCalendar

# Register CombinedHolidayCalendar in _pyvacon_swig:
_pyvacon_swig.CombinedHolidayCalendar_swigregister(CombinedHolidayCalendar)

class RollConvention(object):
    r"""Proxy of C++ RollConvention class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    _Type_Following = _pyvacon_swig.RollConvention__Type_Following
    
    _Type_ModifiedFollowing = _pyvacon_swig.RollConvention__Type_ModifiedFollowing
    
    _Type_ModifiedFollowingEOM = _pyvacon_swig.RollConvention__Type_ModifiedFollowingEOM
    
    _Type_Preceding = _pyvacon_swig.RollConvention__Type_Preceding
    
    _Type_ModifiedPreceding = _pyvacon_swig.RollConvention__Type_ModifiedPreceding
    
    _Type_Unadjusted = _pyvacon_swig.RollConvention__Type_Unadjusted
    

    Type = _enum_creator.create_enum('Type', vars())
    _Type_Str = (lambda t: lambda x : t[x])(Type)
    setEnumClass('RollConvention', 'Type', Type, _Type_Str)


    def __init__(self, t):
        r"""__init__(RollConvention self, RollConvention::Type t) -> RollConvention"""
        _pyvacon_swig.RollConvention_swiginit(self, _pyvacon_swig.new_RollConvention(t))

    def toString(self):
        r"""toString(RollConvention self) -> std::string"""
        return _pyvacon_swig.RollConvention_toString(self)
    __swig_destroy__ = _pyvacon_swig.delete_RollConvention

# Register RollConvention in _pyvacon_swig:
_pyvacon_swig.RollConvention_swigregister(RollConvention)

class SpotInterface(object):
    r"""Proxy of C++ SpotInterface class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyvacon_swig.delete_SpotInterface

    def getReferenceSpot(self, udlKey, timeStamp):
        r"""getReferenceSpot(SpotInterface self, std::string const & udlKey, ptime timeStamp) -> double"""
        return _pyvacon_swig.SpotInterface_getReferenceSpot(self, udlKey, timeStamp)

    def getReferenceFxSpot(self, baseCurr, quoteCurr, timeStamp):
        r"""getReferenceFxSpot(SpotInterface self, std::string const & baseCurr, std::string const & quoteCurr, ptime timeStamp) -> double"""
        return _pyvacon_swig.SpotInterface_getReferenceFxSpot(self, baseCurr, quoteCurr, timeStamp)

# Register SpotInterface in _pyvacon_swig:
_pyvacon_swig.SpotInterface_swigregister(SpotInterface)

class InMemoryInterface(BaseInterface):
    r"""Proxy of C++ InMemoryInterface class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, readOnly):
        r"""__init__(InMemoryInterface self, bool readOnly) -> InMemoryInterface"""
        _pyvacon_swig.InMemoryInterface_swiginit(self, _pyvacon_swig.new_InMemoryInterface(readOnly))

    def addObject(self, obj):
        r"""addObject(InMemoryInterface self, std::shared_ptr< BaseObject > obj)"""
        return _pyvacon_swig.InMemoryInterface_addObject(self, obj)
    __swig_destroy__ = _pyvacon_swig.delete_InMemoryInterface

# Register InMemoryInterface in _pyvacon_swig:
_pyvacon_swig.InMemoryInterface_swigregister(InMemoryInterface)

class InMemoryCache(BaseInterface, Clonable):
    r"""Proxy of C++ InMemoryCache class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(InMemoryCache self) -> InMemoryCache"""
        _pyvacon_swig.InMemoryCache_swiginit(self, _pyvacon_swig.new_InMemoryCache())

    def getClassName(self):
        r"""getClassName(InMemoryCache self) -> std::string"""
        return _pyvacon_swig.InMemoryCache_getClassName(self)
    __swig_destroy__ = _pyvacon_swig.delete_InMemoryCache

# Register InMemoryCache in _pyvacon_swig:
_pyvacon_swig.InMemoryCache_swigregister(InMemoryCache)

class BaseUnderlying(BaseObject):
    r"""Proxy of C++ BaseUnderlying class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    fullName = property(_pyvacon_swig.BaseUnderlying_fullName_get, _pyvacon_swig.BaseUnderlying_fullName_set, doc=r"""fullName : std::string""")
    quoteKey = property(_pyvacon_swig.BaseUnderlying_quoteKey_get, _pyvacon_swig.BaseUnderlying_quoteKey_set, doc=r"""quoteKey : std::string""")
    volDc = property(_pyvacon_swig.BaseUnderlying_volDc_get, _pyvacon_swig.BaseUnderlying_volDc_set, doc=r"""volDc : std::string""")
    volKey = property(_pyvacon_swig.BaseUnderlying_volKey_get, _pyvacon_swig.BaseUnderlying_volKey_set, doc=r"""volKey : std::string""")

    def setCurrency(self, curr):
        r"""setCurrency(BaseUnderlying self, std::string const & curr)"""
        return _pyvacon_swig.BaseUnderlying_setCurrency(self, curr)

    def getClassName(self):
        r"""getClassName(BaseUnderlying self) -> std::string"""
        return _pyvacon_swig.BaseUnderlying_getClassName(self)

    def getType(self):
        r"""getType(BaseUnderlying self) -> std::string"""
        return _pyvacon_swig.BaseUnderlying_getType(self)
    __swig_destroy__ = _pyvacon_swig.delete_BaseUnderlying

# Register BaseUnderlying in _pyvacon_swig:
_pyvacon_swig.BaseUnderlying_swigregister(BaseUnderlying)

class EquityUnderlying(BaseUnderlying):
    r"""Proxy of C++ EquityUnderlying class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, id):
        r"""__init__(EquityUnderlying self, std::string const & id) -> EquityUnderlying"""
        _pyvacon_swig.EquityUnderlying_swiginit(self, _pyvacon_swig.new_EquityUnderlying(id))
    issuerId = property(_pyvacon_swig.EquityUnderlying_issuerId_get, _pyvacon_swig.EquityUnderlying_issuerId_set, doc=r"""issuerId : std::string""")
    borrowKey = property(_pyvacon_swig.EquityUnderlying_borrowKey_get, _pyvacon_swig.EquityUnderlying_borrowKey_set, doc=r"""borrowKey : std::string""")
    survivalKey = property(_pyvacon_swig.EquityUnderlying_survivalKey_get, _pyvacon_swig.EquityUnderlying_survivalKey_set, doc=r"""survivalKey : std::string""")
    divKey = property(_pyvacon_swig.EquityUnderlying_divKey_get, _pyvacon_swig.EquityUnderlying_divKey_set, doc=r"""divKey : std::string""")
    irKey = property(_pyvacon_swig.EquityUnderlying_irKey_get, _pyvacon_swig.EquityUnderlying_irKey_set, doc=r"""irKey : std::string""")
    __swig_destroy__ = _pyvacon_swig.delete_EquityUnderlying

# Register EquityUnderlying in _pyvacon_swig:
_pyvacon_swig.EquityUnderlying_swigregister(EquityUnderlying)

class FxUnderlying(BaseUnderlying):
    r"""Proxy of C++ FxUnderlying class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, id):
        r"""__init__(FxUnderlying self, std::string const & id) -> FxUnderlying"""
        _pyvacon_swig.FxUnderlying_swiginit(self, _pyvacon_swig.new_FxUnderlying(id))
    quoteCurrIrKey = property(_pyvacon_swig.FxUnderlying_quoteCurrIrKey_get, _pyvacon_swig.FxUnderlying_quoteCurrIrKey_set, doc=r"""quoteCurrIrKey : std::string""")

    def setBaseCurrency(self, curr):
        r"""setBaseCurrency(FxUnderlying self, std::string const & curr)"""
        return _pyvacon_swig.FxUnderlying_setBaseCurrency(self, curr)
    baseCurrIrKey = property(_pyvacon_swig.FxUnderlying_baseCurrIrKey_get, _pyvacon_swig.FxUnderlying_baseCurrIrKey_set, doc=r"""baseCurrIrKey : std::string""")
    survivalKey = property(_pyvacon_swig.FxUnderlying_survivalKey_get, _pyvacon_swig.FxUnderlying_survivalKey_set, doc=r"""survivalKey : std::string""")
    __swig_destroy__ = _pyvacon_swig.delete_FxUnderlying

# Register FxUnderlying in _pyvacon_swig:
_pyvacon_swig.FxUnderlying_swigregister(FxUnderlying)

class IrUnderlying(BaseUnderlying):
    r"""Proxy of C++ IrUnderlying class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, id, discountCurve, period, dayCounter, rollConvention):
        r"""__init__(IrUnderlying self, std::string const & id, std::string const & discountCurve, std::string const & period, std::string const & dayCounter, std::string const & rollConvention) -> IrUnderlying"""
        _pyvacon_swig.IrUnderlying_swiginit(self, _pyvacon_swig.new_IrUnderlying(id, discountCurve, period, dayCounter, rollConvention))
    __swig_destroy__ = _pyvacon_swig.delete_IrUnderlying

# Register IrUnderlying in _pyvacon_swig:
_pyvacon_swig.IrUnderlying_swigregister(IrUnderlying)

class IssuerToCreditMapping(BaseObject):
    r"""Proxy of C++ IssuerToCreditMapping class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getRecovery(self, issuer, curr, secLvl, calcDate, data):
        r"""getRecovery(IssuerToCreditMapping self, std::shared_ptr< Issuer const > const & issuer, std::string const & curr, std::string const & secLvl, ptime calcDate, std::shared_ptr< BaseInterface > const & data) -> std::shared_ptr< BaseDatedCurve const >"""
        return _pyvacon_swig.IssuerToCreditMapping_getRecovery(self, issuer, curr, secLvl, calcDate, data)

    def getRecoveryId(self, issuer, curr, secLvl):
        r"""getRecoveryId(IssuerToCreditMapping self, std::shared_ptr< Issuer const > const & issuer, std::string const & curr, std::string const & secLvl) -> std::string"""
        return _pyvacon_swig.IssuerToCreditMapping_getRecoveryId(self, issuer, curr, secLvl)

    def getClusterKeys(self):
        r"""getClusterKeys(IssuerToCreditMapping self) -> vectorString"""
        return _pyvacon_swig.IssuerToCreditMapping_getClusterKeys(self)

    def getTransitionMatrix(self, issuer, calcDate, data):
        r"""getTransitionMatrix(IssuerToCreditMapping self, std::shared_ptr< Issuer const > const & issuer, ptime calcDate, std::shared_ptr< BaseInterface > const & data) -> std::shared_ptr< RatingTransitionBase const >"""
        return _pyvacon_swig.IssuerToCreditMapping_getTransitionMatrix(self, issuer, calcDate, data)

    def getSurvivalCurve(self, issuer, calcDate, data):
        r"""getSurvivalCurve(IssuerToCreditMapping self, std::shared_ptr< Issuer const > const & issuer, ptime calcDate, std::shared_ptr< BaseInterface > const & data) -> std::shared_ptr< SurvivalCurve const >"""
        return _pyvacon_swig.IssuerToCreditMapping_getSurvivalCurve(self, issuer, calcDate, data)

    def getTransitionId(self, issuer):
        r"""getTransitionId(IssuerToCreditMapping self, std::shared_ptr< Issuer const > const & issuer) -> std::string"""
        return _pyvacon_swig.IssuerToCreditMapping_getTransitionId(self, issuer)

    def getSurvivalId(self, issuer):
        r"""getSurvivalId(IssuerToCreditMapping self, std::shared_ptr< Issuer const > const & issuer) -> std::string"""
        return _pyvacon_swig.IssuerToCreditMapping_getSurvivalId(self, issuer)

    def addCluster(self, cluster):
        r"""addCluster(IssuerToCreditMapping self, std::shared_ptr< CreditCluster > const & cluster)"""
        return _pyvacon_swig.IssuerToCreditMapping_addCluster(self, cluster)

    def removeCluster(self, cluster):
        r"""removeCluster(IssuerToCreditMapping self, std::string const & cluster)"""
        return _pyvacon_swig.IssuerToCreditMapping_removeCluster(self, cluster)

    def getCluster(self, cluster):
        r"""getCluster(IssuerToCreditMapping self, std::string const & cluster) -> std::shared_ptr< CreditCluster const >"""
        return _pyvacon_swig.IssuerToCreditMapping_getCluster(self, cluster)

    def getClassName(self):
        r"""getClassName(IssuerToCreditMapping self) -> std::string"""
        return _pyvacon_swig.IssuerToCreditMapping_getClassName(self)

    def __init__(self):
        r"""__init__(IssuerToCreditMapping self) -> IssuerToCreditMapping"""
        _pyvacon_swig.IssuerToCreditMapping_swiginit(self, _pyvacon_swig.new_IssuerToCreditMapping())
    __swig_destroy__ = _pyvacon_swig.delete_IssuerToCreditMapping

# Register IssuerToCreditMapping in _pyvacon_swig:
_pyvacon_swig.IssuerToCreditMapping_swigregister(IssuerToCreditMapping)

class LiborIndex(BaseUnderlying):
    r"""Proxy of C++ LiborIndex class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, objId, period, dc, roll, fixingLag, holidays):
        r"""__init__(LiborIndex self, std::string const & objId, Period period, DayCounter::Type dc, RollConvention roll, int fixingLag, std::shared_ptr< HolidayCalendar const > holidays) -> LiborIndex"""
        _pyvacon_swig.LiborIndex_swiginit(self, _pyvacon_swig.new_LiborIndex(objId, period, dc, roll, fixingLag, holidays))
    __swig_destroy__ = _pyvacon_swig.delete_LiborIndex

# Register LiborIndex in _pyvacon_swig:
_pyvacon_swig.LiborIndex_swigregister(LiborIndex)

class SwapIndex(BaseUnderlying):
    r"""Proxy of C++ SwapIndex class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, objId, liborIndex, fixPeriod, fixDc, fixRoll, floatPeriod, floatDc, floatRoll, holidays):
        r"""__init__(SwapIndex self, std::string const & objId, std::shared_ptr< LiborIndex const > const & liborIndex, Period fixPeriod, DayCounter::Type fixDc, RollConvention fixRoll, Period floatPeriod, DayCounter::Type floatDc, RollConvention floatRoll, std::shared_ptr< HolidayCalendar const > holidays) -> SwapIndex"""
        _pyvacon_swig.SwapIndex_swiginit(self, _pyvacon_swig.new_SwapIndex(objId, liborIndex, fixPeriod, fixDc, fixRoll, floatPeriod, floatDc, floatRoll, holidays))
    __swig_destroy__ = _pyvacon_swig.delete_SwapIndex

# Register SwapIndex in _pyvacon_swig:
_pyvacon_swig.SwapIndex_swigregister(SwapIndex)

class MarketDataObject(BaseObject):
    r"""Proxy of C++ MarketDataObject class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getRefDate(self, *args):
        r"""
        getRefDate(MarketDataObject self) -> ptime
        getRefDate(MarketDataObject self, ptime refDate)
        """
        return _pyvacon_swig.MarketDataObject_getRefDate(self, *args)

    def setScore(self, score):
        r"""setScore(MarketDataObject self, std::shared_ptr< MarketDataQualityScore > score)"""
        return _pyvacon_swig.MarketDataObject_setScore(self, score)

    def getScore(self):
        r"""getScore(MarketDataObject self) -> std::shared_ptr< MarketDataQualityScore >"""
        return _pyvacon_swig.MarketDataObject_getScore(self)
    __swig_destroy__ = _pyvacon_swig.delete_MarketDataObject

# Register MarketDataObject in _pyvacon_swig:
_pyvacon_swig.MarketDataObject_swigregister(MarketDataObject)

class BaseDatedCurve(MarketDataObject):
    r"""Proxy of C++ BaseDatedCurve class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def value(self, *args):
        r"""
        value(BaseDatedCurve self, ptime calcDate, ptime date) -> double
        value(BaseDatedCurve self, vectorDouble result, ptime calcDate, vectorPTime dates)
        """
        return _pyvacon_swig.BaseDatedCurve_value(self, *args)
    __swig_destroy__ = _pyvacon_swig.delete_BaseDatedCurve

# Register BaseDatedCurve in _pyvacon_swig:
_pyvacon_swig.BaseDatedCurve_swigregister(BaseDatedCurve)

class DatedCurve(BaseDatedCurve):
    r"""Proxy of C++ DatedCurve class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def value(self, *args):
        r"""
        value(DatedCurve self, ptime calcDate, ptime date) -> double
        value(DatedCurve self, vectorDouble result, ptime calcDate, vectorPTime dates)
        """
        return _pyvacon_swig.DatedCurve_value(self, *args)

    def __init__(self, *args):
        r"""__init__(DatedCurve self, std::string const & objId, ptime refDate, vectorPTime dates, vectorDouble values, std::string const & dc, std::string const & interType, std::string const & extraType="NONE") -> DatedCurve"""
        _pyvacon_swig.DatedCurve_swiginit(self, _pyvacon_swig.new_DatedCurve(*args))

    def getDayCounter(self):
        r"""getDayCounter(DatedCurve self) -> std::shared_ptr< DayCounter const > const &"""
        return _pyvacon_swig.DatedCurve_getDayCounter(self)

    def getDayCounterType(self):
        r"""getDayCounterType(DatedCurve self) -> std::string const &"""
        return _pyvacon_swig.DatedCurve_getDayCounterType(self)

    def getInterpolationType(self):
        r"""getInterpolationType(DatedCurve self) -> std::string"""
        return _pyvacon_swig.DatedCurve_getInterpolationType(self)

    def getExtrapolationType(self):
        r"""getExtrapolationType(DatedCurve self) -> std::string"""
        return _pyvacon_swig.DatedCurve_getExtrapolationType(self)

    def getNodeDates(self):
        r"""getNodeDates(DatedCurve self) -> vectorPTime"""
        return _pyvacon_swig.DatedCurve_getNodeDates(self)

    def getNodeValues(self):
        r"""getNodeValues(DatedCurve self) -> vectorDouble"""
        return _pyvacon_swig.DatedCurve_getNodeValues(self)

    def getClassName(self):
        r"""getClassName(DatedCurve self) -> std::string"""
        return _pyvacon_swig.DatedCurve_getClassName(self)
    __swig_destroy__ = _pyvacon_swig.delete_DatedCurve

# Register DatedCurve in _pyvacon_swig:
_pyvacon_swig.DatedCurve_swigregister(DatedCurve)

class DiscountCurve(BaseDatedCurve):
    r"""Proxy of C++ DiscountCurve class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(DiscountCurve self, std::string const & objId, ptime refDate, vectorPTime dates, vectorDouble discountFactors, DayCounter::Type const & dc, Interpolation::InterpolationType const & interType=LINEARLOG, Extrapolation::ExtrapolationType const & extraType=NONE) -> DiscountCurve"""
        _pyvacon_swig.DiscountCurve_swiginit(self, _pyvacon_swig.new_DiscountCurve(*args))
    __swig_destroy__ = _pyvacon_swig.delete_DiscountCurve

    def getDataTable(self):
        r"""getDataTable(DiscountCurve self) -> std::shared_ptr< DataTable const >"""
        return _pyvacon_swig.DiscountCurve_getDataTable(self)

    def value(self, *args):
        r"""
        value(DiscountCurve self, ptime calcDate, ptime date) -> double
        value(DiscountCurve self, vectorDouble result, ptime calcDate, vectorPTime dates)
        """
        return _pyvacon_swig.DiscountCurve_value(self, *args)

    def zeroRate(self, *args):
        r"""
        zeroRate(DiscountCurve self, ptime calcDate, ptime date) -> double
        zeroRate(DiscountCurve self, vectorDouble result, ptime calcDate, vectorPTime dates)
        """
        return _pyvacon_swig.DiscountCurve_zeroRate(self, *args)

    def forwardShortRate(self, calcDate, date):
        r"""forwardShortRate(DiscountCurve self, ptime calcDate, ptime date) -> double"""
        return _pyvacon_swig.DiscountCurve_forwardShortRate(self, calcDate, date)

    def valueFwd(self, *args):
        r"""
        valueFwd(DiscountCurve self, ptime valDate, ptime d1, ptime d2) -> double
        valueFwd(DiscountCurve self, vectorDouble df, ptime valDate, ptime d1, vectorPTime d2)
        """
        return _pyvacon_swig.DiscountCurve_valueFwd(self, *args)

    def getDayCounter(self):
        r"""getDayCounter(DiscountCurve self) -> std::shared_ptr< DayCounter const > const &"""
        return _pyvacon_swig.DiscountCurve_getDayCounter(self)

    def getDayCounterType(self):
        r"""getDayCounterType(DiscountCurve self) -> std::string const &"""
        return _pyvacon_swig.DiscountCurve_getDayCounterType(self)

    def getInterpolationType(self):
        r"""getInterpolationType(DiscountCurve self) -> Interpolation::InterpolationType const"""
        return _pyvacon_swig.DiscountCurve_getInterpolationType(self)

    def getExtrapolationType(self):
        r"""getExtrapolationType(DiscountCurve self) -> Extrapolation::ExtrapolationType const"""
        return _pyvacon_swig.DiscountCurve_getExtrapolationType(self)

    def getNodeDates(self):
        r"""getNodeDates(DiscountCurve self) -> vectorPTime"""
        return _pyvacon_swig.DiscountCurve_getNodeDates(self)

    def getNodeValues(self):
        r"""getNodeValues(DiscountCurve self) -> vectorDouble"""
        return _pyvacon_swig.DiscountCurve_getNodeValues(self)

    def getClassName(self):
        r"""getClassName(DiscountCurve self) -> std::string"""
        return _pyvacon_swig.DiscountCurve_getClassName(self)

# Register DiscountCurve in _pyvacon_swig:
_pyvacon_swig.DiscountCurve_swigregister(DiscountCurve)

class SurvivalCurve(BaseDatedCurve):
    r"""Proxy of C++ SurvivalCurve class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, objId, refDate, dates, values, isHazard=True):
        r"""__init__(SurvivalCurve self, std::string const & objId, ptime refDate, vectorPTime dates, vectorDouble values, bool isHazard=True) -> SurvivalCurve"""
        _pyvacon_swig.SurvivalCurve_swiginit(self, _pyvacon_swig.new_SurvivalCurve(objId, refDate, dates, values, isHazard))

    def value(self, *args):
        r"""
        value(SurvivalCurve self, ptime calcDate, ptime date) -> double
        value(SurvivalCurve self, vectorDouble result, ptime calcDate, vectorPTime dates)
        value(SurvivalCurve self, ptime calcDate, ptime start, ptime end) -> double
        """
        return _pyvacon_swig.SurvivalCurve_value(self, *args)

    def getDayCounterType(self):
        r"""getDayCounterType(SurvivalCurve self) -> std::string const &"""
        return _pyvacon_swig.SurvivalCurve_getDayCounterType(self)

    def getDayCounter(self):
        r"""getDayCounter(SurvivalCurve self) -> std::shared_ptr< DayCounter const > const &"""
        return _pyvacon_swig.SurvivalCurve_getDayCounter(self)

    def getNodeDates(self):
        r"""getNodeDates(SurvivalCurve self) -> vectorPTime"""
        return _pyvacon_swig.SurvivalCurve_getNodeDates(self)

    def getNodeValues(self):
        r"""getNodeValues(SurvivalCurve self) -> vectorDouble"""
        return _pyvacon_swig.SurvivalCurve_getNodeValues(self)

    def getClassName(self):
        r"""getClassName(SurvivalCurve self) -> std::string"""
        return _pyvacon_swig.SurvivalCurve_getClassName(self)
    __swig_destroy__ = _pyvacon_swig.delete_SurvivalCurve

# Register SurvivalCurve in _pyvacon_swig:
_pyvacon_swig.SurvivalCurve_swigregister(SurvivalCurve)

class DividendTable(MarketDataObject):
    r"""Proxy of C++ DividendTable class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(DividendTable self) -> DividendTable
        __init__(DividendTable self, std::string const & objId, ptime refDate, vectorPTime exDates, vectorDouble yDivs, vectorDouble cashDivs, vectorDouble taxFactors, vectorPTime payDates) -> DividendTable
        """
        _pyvacon_swig.DividendTable_swiginit(self, _pyvacon_swig.new_DividendTable(*args))
    __swig_destroy__ = _pyvacon_swig.delete_DividendTable

    def getExDates(self):
        r"""getExDates(DividendTable self) -> vectorPTime"""
        return _pyvacon_swig.DividendTable_getExDates(self)

    def getPayDates(self):
        r"""getPayDates(DividendTable self) -> vectorPTime"""
        return _pyvacon_swig.DividendTable_getPayDates(self)

    def getCashDivs(self):
        r"""getCashDivs(DividendTable self) -> vectorDouble"""
        return _pyvacon_swig.DividendTable_getCashDivs(self)

    def getYieldDivs(self):
        r"""getYieldDivs(DividendTable self) -> vectorDouble"""
        return _pyvacon_swig.DividendTable_getYieldDivs(self)

    def getTaxFactors(self):
        r"""getTaxFactors(DividendTable self) -> vectorDouble"""
        return _pyvacon_swig.DividendTable_getTaxFactors(self)

    def getDataTable(self):
        r"""getDataTable(DividendTable self) -> std::shared_ptr< DataTable const >"""
        return _pyvacon_swig.DividendTable_getDataTable(self)

    def getClassName(self):
        r"""getClassName(DividendTable self) -> std::string"""
        return _pyvacon_swig.DividendTable_getClassName(self)

# Register DividendTable in _pyvacon_swig:
_pyvacon_swig.DividendTable_swigregister(DividendTable)

class ForwardCurve(BaseDatedCurve):
    r"""Proxy of C++ ForwardCurve class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def value(self, *args):
        r"""
        value(ForwardCurve self, ptime calcDate, ptime date) -> double
        value(ForwardCurve self, vectorDouble result, ptime calcDate, vectorPTime dates)
        """
        return _pyvacon_swig.ForwardCurve_value(self, *args)

    def SV(self, calcDate, d):
        r"""SV(ForwardCurve self, ptime calcDate, ptime d) -> double"""
        return _pyvacon_swig.ForwardCurve_SV(self, calcDate, d)

    def getClassName(self):
        r"""getClassName(ForwardCurve self) -> std::string"""
        return _pyvacon_swig.ForwardCurve_getClassName(self)

    def getRefSpot(self):
        r"""getRefSpot(ForwardCurve self) -> double"""
        return _pyvacon_swig.ForwardCurve_getRefSpot(self)

    def getIR(self):
        r"""getIR(ForwardCurve self) -> std::shared_ptr< DiscountCurve const >"""
        return _pyvacon_swig.ForwardCurve_getIR(self)

    def getBC(self):
        r"""getBC(ForwardCurve self) -> std::shared_ptr< DiscountCurve const >"""
        return _pyvacon_swig.ForwardCurve_getBC(self)

    def getSC(self):
        r"""getSC(ForwardCurve self) -> std::shared_ptr< DiscountCurve const >"""
        return _pyvacon_swig.ForwardCurve_getSC(self)

    def getDIV(self):
        r"""getDIV(ForwardCurve self) -> std::shared_ptr< DividendTable const >"""
        return _pyvacon_swig.ForwardCurve_getDIV(self)

    def discountedFutureCashDivs(self, *args):
        r"""
        discountedFutureCashDivs(ForwardCurve self, ptime calcDate, ptime T) -> double
        discountedFutureCashDivs(ForwardCurve self, vectorDouble Result, ptime calcDate, vectorPTime T)
        """
        return _pyvacon_swig.ForwardCurve_discountedFutureCashDivs(self, *args)

    def proportionalGrowthFactor(self, *args):
        r"""
        proportionalGrowthFactor(ForwardCurve self, vectorDouble Result, ptime calcDate, vectorPTime T, size_t startIndex=0)
        proportionalGrowthFactor(ForwardCurve self, ptime calcDate, ptime T) -> double
        """
        return _pyvacon_swig.ForwardCurve_proportionalGrowthFactor(self, *args)
    __swig_destroy__ = _pyvacon_swig.delete_ForwardCurve

# Register ForwardCurve in _pyvacon_swig:
_pyvacon_swig.ForwardCurve_swigregister(ForwardCurve)

class EquityForwardCurve(ForwardCurve):
    r"""Proxy of C++ EquityForwardCurve class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(EquityForwardCurve self, ptime refDate, double spot, std::shared_ptr< DiscountCurve const > const & ir=std::shared_ptr< DiscountCurve const >(), std::shared_ptr< DiscountCurve const > const & bc=std::shared_ptr< DiscountCurve const >(), std::shared_ptr< DividendTable const > const & div=std::shared_ptr< DividendTable const >(), std::shared_ptr< DiscountCurve const > const & sc=std::shared_ptr< DiscountCurve const >(), bool skipFutureDividendCheck=True) -> EquityForwardCurve"""
        _pyvacon_swig.EquityForwardCurve_swiginit(self, _pyvacon_swig.new_EquityForwardCurve(*args))
    __swig_destroy__ = _pyvacon_swig.delete_EquityForwardCurve

    def getClassName(self):
        r"""getClassName(EquityForwardCurve self) -> std::string"""
        return _pyvacon_swig.EquityForwardCurve_getClassName(self)

# Register EquityForwardCurve in _pyvacon_swig:
_pyvacon_swig.EquityForwardCurve_swigregister(EquityForwardCurve)

class FxForwardCurve(ForwardCurve):
    r"""Proxy of C++ FxForwardCurve class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(FxForwardCurve self, ptime refDate, double spot, std::shared_ptr< DiscountCurve const > quoteCurrIR=std::shared_ptr< DiscountCurve const >(), std::shared_ptr< DiscountCurve const > baseCurrIR=std::shared_ptr< DiscountCurve const >(), std::shared_ptr< DiscountCurve const > sc=std::shared_ptr< DiscountCurve const >()) -> FxForwardCurve"""
        _pyvacon_swig.FxForwardCurve_swiginit(self, _pyvacon_swig.new_FxForwardCurve(*args))
    __swig_destroy__ = _pyvacon_swig.delete_FxForwardCurve

    def getClassName(self):
        r"""getClassName(FxForwardCurve self) -> std::string"""
        return _pyvacon_swig.FxForwardCurve_getClassName(self)

# Register FxForwardCurve in _pyvacon_swig:
_pyvacon_swig.FxForwardCurve_swigregister(FxForwardCurve)

class InflationIndexForwardCurve(DatedCurve):
    r"""Proxy of C++ InflationIndexForwardCurve class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(InflationIndexForwardCurve self, std::string const & objId, ptime refDate, vectorPTime dates, vectorDouble values, std::string inflationInterp=InflationInterpolation::toString(InflationInterpolation::UNDEFINED)) -> InflationIndexForwardCurve"""
        _pyvacon_swig.InflationIndexForwardCurve_swiginit(self, _pyvacon_swig.new_InflationIndexForwardCurve(*args))

    def value(self, *args):
        r"""value(InflationIndexForwardCurve self, ptime refDate, ptime date, std::string inflationInterp=InflationInterpolation::toString(InflationInterpolation::UNDEFINED)) -> double"""
        return _pyvacon_swig.InflationIndexForwardCurve_value(self, *args)

    def getInterpolationMethod(self):
        r"""getInterpolationMethod(InflationIndexForwardCurve self) -> std::string"""
        return _pyvacon_swig.InflationIndexForwardCurve_getInterpolationMethod(self)

    def getClassName(self):
        r"""getClassName(InflationIndexForwardCurve self) -> std::string"""
        return _pyvacon_swig.InflationIndexForwardCurve_getClassName(self)
    __swig_destroy__ = _pyvacon_swig.delete_InflationIndexForwardCurve

# Register InflationIndexForwardCurve in _pyvacon_swig:
_pyvacon_swig.InflationIndexForwardCurve_swigregister(InflationIndexForwardCurve)

class LiborCurve(MarketDataObject):
    r"""Proxy of C++ LiborCurve class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, objId, refDate, curve, liborIndex):
        r"""__init__(LiborCurve self, std::string const & objId, ptime refDate, std::shared_ptr< DiscountCurve const > const & curve, std::shared_ptr< LiborIndex const > const & liborIndex) -> LiborCurve"""
        _pyvacon_swig.LiborCurve_swiginit(self, _pyvacon_swig.new_LiborCurve(objId, refDate, curve, liborIndex))

    def getClassName(self):
        r"""getClassName(LiborCurve self) -> std::string"""
        return _pyvacon_swig.LiborCurve_getClassName(self)
    __swig_destroy__ = _pyvacon_swig.delete_LiborCurve

# Register LiborCurve in _pyvacon_swig:
_pyvacon_swig.LiborCurve_swigregister(LiborCurve)

class SwapCurve(MarketDataObject):
    r"""Proxy of C++ SwapCurve class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, objId, refDate, liborCurve, discountCurve, swapIndex):
        r"""__init__(SwapCurve self, std::string const & objId, ptime refDate, std::shared_ptr< LiborCurve const > const & liborCurve, std::shared_ptr< DiscountCurve const > const & discountCurve, std::shared_ptr< SwapIndex const > const & swapIndex) -> SwapCurve"""
        _pyvacon_swig.SwapCurve_swiginit(self, _pyvacon_swig.new_SwapCurve(objId, refDate, liborCurve, discountCurve, swapIndex))

    def getClassName(self):
        r"""getClassName(SwapCurve self) -> std::string"""
        return _pyvacon_swig.SwapCurve_getClassName(self)

    def getSwapRate(self, valDate, startDate, swapLength):
        r"""getSwapRate(SwapCurve self, ptime valDate, ptime startDate, Period swapLength) -> double"""
        return _pyvacon_swig.SwapCurve_getSwapRate(self, valDate, startDate, swapLength)
    __swig_destroy__ = _pyvacon_swig.delete_SwapCurve

# Register SwapCurve in _pyvacon_swig:
_pyvacon_swig.SwapCurve_swigregister(SwapCurve)

class VolatilityParametrization(Clonable):
    r"""Proxy of C++ VolatilityParametrization class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def calcImpliedVol(self, ttm, xStrike):
        r"""calcImpliedVol(VolatilityParametrization self, double ttm, double xStrike) -> double"""
        return _pyvacon_swig.VolatilityParametrization_calcImpliedVol(self, ttm, xStrike)

    def getClassName(self):
        r"""getClassName(VolatilityParametrization self) -> std::string"""
        return _pyvacon_swig.VolatilityParametrization_getClassName(self)
    __swig_destroy__ = _pyvacon_swig.delete_VolatilityParametrization

# Register VolatilityParametrization in _pyvacon_swig:
_pyvacon_swig.VolatilityParametrization_swigregister(VolatilityParametrization)

class VolatilityParametrizationFlat(VolatilityParametrization):
    r"""Proxy of C++ VolatilityParametrizationFlat class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, vol):
        r"""__init__(VolatilityParametrizationFlat self, double vol) -> VolatilityParametrizationFlat"""
        _pyvacon_swig.VolatilityParametrizationFlat_swiginit(self, _pyvacon_swig.new_VolatilityParametrizationFlat(vol))

    def calcImpliedVol(self, ttm, xStrike):
        r"""calcImpliedVol(VolatilityParametrizationFlat self, double ttm, double xStrike) -> double"""
        return _pyvacon_swig.VolatilityParametrizationFlat_calcImpliedVol(self, ttm, xStrike)
    __swig_destroy__ = _pyvacon_swig.delete_VolatilityParametrizationFlat

# Register VolatilityParametrizationFlat in _pyvacon_swig:
_pyvacon_swig.VolatilityParametrizationFlat_swigregister(VolatilityParametrizationFlat)

class VolatilityParametrizationTerm(VolatilityParametrization):
    r"""Proxy of C++ VolatilityParametrizationTerm class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, expiryTimes, atmfVols):
        r"""__init__(VolatilityParametrizationTerm self, vectorDouble expiryTimes, vectorDouble atmfVols) -> VolatilityParametrizationTerm"""
        _pyvacon_swig.VolatilityParametrizationTerm_swiginit(self, _pyvacon_swig.new_VolatilityParametrizationTerm(expiryTimes, atmfVols))

    def calcImpliedVol(self, ttm, xStrike):
        r"""calcImpliedVol(VolatilityParametrizationTerm self, double ttm, double xStrike) -> double"""
        return _pyvacon_swig.VolatilityParametrizationTerm_calcImpliedVol(self, ttm, xStrike)

    def getExpiryTimes(self):
        r"""getExpiryTimes(VolatilityParametrizationTerm self) -> vectorDouble"""
        return _pyvacon_swig.VolatilityParametrizationTerm_getExpiryTimes(self)

    def getAtmfVols(self):
        r"""getAtmfVols(VolatilityParametrizationTerm self) -> vectorDouble"""
        return _pyvacon_swig.VolatilityParametrizationTerm_getAtmfVols(self)

    def getClassName(self):
        r"""getClassName(VolatilityParametrizationTerm self) -> std::string"""
        return _pyvacon_swig.VolatilityParametrizationTerm_getClassName(self)
    __swig_destroy__ = _pyvacon_swig.delete_VolatilityParametrizationTerm

# Register VolatilityParametrizationTerm in _pyvacon_swig:
_pyvacon_swig.VolatilityParametrizationTerm_swigregister(VolatilityParametrizationTerm)

class VolatilityParametrizationSSVI(VolatilityParametrizationTerm):
    r"""Proxy of C++ VolatilityParametrizationSSVI class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, expiryTimes, atmfVols, rho, eta, gamma):
        r"""__init__(VolatilityParametrizationSSVI self, vectorDouble expiryTimes, vectorDouble atmfVols, double rho, double eta, double gamma) -> VolatilityParametrizationSSVI"""
        _pyvacon_swig.VolatilityParametrizationSSVI_swiginit(self, _pyvacon_swig.new_VolatilityParametrizationSSVI(expiryTimes, atmfVols, rho, eta, gamma))

    @staticmethod
    def fromVolParametrization(param):
        r"""fromVolParametrization(std::shared_ptr< VolatilityParametrization > const & param) -> std::shared_ptr< VolatilityParametrizationSSVI >"""
        return _pyvacon_swig.VolatilityParametrizationSSVI_fromVolParametrization(param)

    def getRho(self):
        r"""getRho(VolatilityParametrizationSSVI self) -> double"""
        return _pyvacon_swig.VolatilityParametrizationSSVI_getRho(self)

    def getEta(self):
        r"""getEta(VolatilityParametrizationSSVI self) -> double"""
        return _pyvacon_swig.VolatilityParametrizationSSVI_getEta(self)

    def getGamma(self):
        r"""getGamma(VolatilityParametrizationSSVI self) -> double"""
        return _pyvacon_swig.VolatilityParametrizationSSVI_getGamma(self)

    def calcImpliedVol(self, ttm, xStrike):
        r"""calcImpliedVol(VolatilityParametrizationSSVI self, double ttm, double xStrike) -> double"""
        return _pyvacon_swig.VolatilityParametrizationSSVI_calcImpliedVol(self, ttm, xStrike)

    def getClassName(self):
        r"""getClassName(VolatilityParametrizationSSVI self) -> std::string"""
        return _pyvacon_swig.VolatilityParametrizationSSVI_getClassName(self)
    __swig_destroy__ = _pyvacon_swig.delete_VolatilityParametrizationSSVI

# Register VolatilityParametrizationSSVI in _pyvacon_swig:
_pyvacon_swig.VolatilityParametrizationSSVI_swigregister(VolatilityParametrizationSSVI)

def VolatilityParametrizationSSVI_fromVolParametrization(param):
    r"""VolatilityParametrizationSSVI_fromVolParametrization(std::shared_ptr< VolatilityParametrization > const & param) -> std::shared_ptr< VolatilityParametrizationSSVI >"""
    return _pyvacon_swig.VolatilityParametrizationSSVI_fromVolParametrization(param)

class VolatilityParametrizationTimeSlice(VolatilityParametrization):
    r"""Proxy of C++ VolatilityParametrizationTimeSlice class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(VolatilityParametrizationTimeSlice self, vectorDouble expiryTimes, vectorVectorDouble strikes, vectorVectorDouble volas, std::string splineType="STANDARD") -> VolatilityParametrizationTimeSlice"""
        _pyvacon_swig.VolatilityParametrizationTimeSlice_swiginit(self, _pyvacon_swig.new_VolatilityParametrizationTimeSlice(*args))

    def calcImpliedVol(self, ttm, xStrike):
        r"""calcImpliedVol(VolatilityParametrizationTimeSlice self, double ttm, double xStrike) -> double"""
        return _pyvacon_swig.VolatilityParametrizationTimeSlice_calcImpliedVol(self, ttm, xStrike)

    def getClassName(self):
        r"""getClassName(VolatilityParametrizationTimeSlice self) -> std::string"""
        return _pyvacon_swig.VolatilityParametrizationTimeSlice_getClassName(self)
    __swig_destroy__ = _pyvacon_swig.delete_VolatilityParametrizationTimeSlice

# Register VolatilityParametrizationTimeSlice in _pyvacon_swig:
_pyvacon_swig.VolatilityParametrizationTimeSlice_swigregister(VolatilityParametrizationTimeSlice)

class VolatilitySurface(MarketDataObject):
    r"""Proxy of C++ VolatilitySurface class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, objId, refDate, fwdCurve, dc, volParam):
        r"""__init__(VolatilitySurface self, std::string const & objId, ptime refDate, std::shared_ptr< ForwardCurve const > const & fwdCurve, std::string const & dc, std::shared_ptr< VolatilityParametrization const > const volParam) -> VolatilitySurface"""
        _pyvacon_swig.VolatilitySurface_swiginit(self, _pyvacon_swig.new_VolatilitySurface(objId, refDate, fwdCurve, dc, volParam))

    def getCalibrationDate(self):
        r"""getCalibrationDate(VolatilitySurface self) -> ptime"""
        return _pyvacon_swig.VolatilitySurface_getCalibrationDate(self)

    def getForwardCurve(self):
        r"""getForwardCurve(VolatilitySurface self) -> std::shared_ptr< ForwardCurve const > const &"""
        return _pyvacon_swig.VolatilitySurface_getForwardCurve(self)

    def calcImpliedVol(self, calcDate, expiry, xStrike):
        r"""calcImpliedVol(VolatilitySurface self, ptime calcDate, ptime expiry, double xStrike) -> double"""
        return _pyvacon_swig.VolatilitySurface_calcImpliedVol(self, calcDate, expiry, xStrike)

    def getDayCounter(self):
        r"""getDayCounter(VolatilitySurface self) -> std::shared_ptr< DayCounter const > const &"""
        return _pyvacon_swig.VolatilitySurface_getDayCounter(self)

    def getVolParametrization(self):
        r"""getVolParametrization(VolatilitySurface self) -> std::shared_ptr< VolatilityParametrization const >"""
        return _pyvacon_swig.VolatilitySurface_getVolParametrization(self)

    def getDayCounterType(self):
        r"""getDayCounterType(VolatilitySurface self) -> std::string"""
        return _pyvacon_swig.VolatilitySurface_getDayCounterType(self)

    @staticmethod
    def load(filename):
        r"""load(std::string filename) -> std::shared_ptr< VolatilitySurface >"""
        return _pyvacon_swig.VolatilitySurface_load(filename)

    @staticmethod
    def save(filename, data):
        r"""save(std::string filename, std::shared_ptr< VolatilitySurface > const & data)"""
        return _pyvacon_swig.VolatilitySurface_save(filename, data)

    @staticmethod
    def createVolatilitySurfaceShiftedFwd(vol, fwdCurve):
        r"""createVolatilitySurfaceShiftedFwd(std::shared_ptr< VolatilitySurface const > const & vol, std::shared_ptr< ForwardCurve const > const & fwdCurve) -> std::shared_ptr< VolatilitySurface >"""
        return _pyvacon_swig.VolatilitySurface_createVolatilitySurfaceShiftedFwd(vol, fwdCurve)

    def getBackBone(self):
        r"""getBackBone(VolatilitySurface self) -> std::shared_ptr< VolatilityParametrizationTerm const >"""
        return _pyvacon_swig.VolatilitySurface_getBackBone(self)

    def getClassName(self):
        r"""getClassName(VolatilitySurface self) -> std::string"""
        return _pyvacon_swig.VolatilitySurface_getClassName(self)
    __swig_destroy__ = _pyvacon_swig.delete_VolatilitySurface

# Register VolatilitySurface in _pyvacon_swig:
_pyvacon_swig.VolatilitySurface_swigregister(VolatilitySurface)

def VolatilitySurface_load(filename):
    r"""VolatilitySurface_load(std::string filename) -> std::shared_ptr< VolatilitySurface >"""
    return _pyvacon_swig.VolatilitySurface_load(filename)

def VolatilitySurface_save(filename, data):
    r"""VolatilitySurface_save(std::string filename, std::shared_ptr< VolatilitySurface > const & data)"""
    return _pyvacon_swig.VolatilitySurface_save(filename, data)

def VolatilitySurface_createVolatilitySurfaceShiftedFwd(vol, fwdCurve):
    r"""VolatilitySurface_createVolatilitySurfaceShiftedFwd(std::shared_ptr< VolatilitySurface const > const & vol, std::shared_ptr< ForwardCurve const > const & fwdCurve) -> std::shared_ptr< VolatilitySurface >"""
    return _pyvacon_swig.VolatilitySurface_createVolatilitySurfaceShiftedFwd(vol, fwdCurve)

class VolatilitySurfaceBucketShifted(VolatilitySurface):
    r"""Proxy of C++ VolatilitySurfaceBucketShifted class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, vol, strikeBuckets, maturityBuckets, shiftSize):
        r"""__init__(VolatilitySurfaceBucketShifted self, std::shared_ptr< VolatilitySurface const > vol, vectorDouble strikeBuckets, vectorDouble maturityBuckets, double shiftSize) -> VolatilitySurfaceBucketShifted"""
        _pyvacon_swig.VolatilitySurfaceBucketShifted_swiginit(self, _pyvacon_swig.new_VolatilitySurfaceBucketShifted(vol, strikeBuckets, maturityBuckets, shiftSize))

    def setRBF(self, xScale, tScale):
        r"""setRBF(VolatilitySurfaceBucketShifted self, double xScale, double tScale)"""
        return _pyvacon_swig.VolatilitySurfaceBucketShifted_setRBF(self, xScale, tScale)

    def setSimpleExponentialLocalSupport(self, xScale, tScale):
        r"""setSimpleExponentialLocalSupport(VolatilitySurfaceBucketShifted self, double xScale, double tScale)"""
        return _pyvacon_swig.VolatilitySurfaceBucketShifted_setSimpleExponentialLocalSupport(self, xScale, tScale)

    def setBucket(self, i, j):
        r"""setBucket(VolatilitySurfaceBucketShifted self, size_t i, size_t j)"""
        return _pyvacon_swig.VolatilitySurfaceBucketShifted_setBucket(self, i, j)

    def getClassName(self):
        r"""getClassName(VolatilitySurfaceBucketShifted self) -> std::string"""
        return _pyvacon_swig.VolatilitySurfaceBucketShifted_getClassName(self)
    __swig_destroy__ = _pyvacon_swig.delete_VolatilitySurfaceBucketShifted

# Register VolatilitySurfaceBucketShifted in _pyvacon_swig:
_pyvacon_swig.VolatilitySurfaceBucketShifted_swigregister(VolatilitySurfaceBucketShifted)

class QuoteTable(MarketDataObject):
    r"""Proxy of C++ QuoteTable class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getUdlId(self):
        r"""getUdlId(QuoteTable self) -> std::string"""
        return _pyvacon_swig.QuoteTable_getUdlId(self)

    def getIssuer(self):
        r"""getIssuer(QuoteTable self) -> std::string"""
        return _pyvacon_swig.QuoteTable_getIssuer(self)

    def getRefSpot(self):
        r"""getRefSpot(QuoteTable self) -> double"""
        return _pyvacon_swig.QuoteTable_getRefSpot(self)

    def getDataTable(self):
        r"""getDataTable(QuoteTable self) -> std::shared_ptr< DataTable const >"""
        return _pyvacon_swig.QuoteTable_getDataTable(self)

    def getSecLevel(self):
        r"""getSecLevel(QuoteTable self) -> std::string"""
        return _pyvacon_swig.QuoteTable_getSecLevel(self)

    def getCurrency(self):
        r"""getCurrency(QuoteTable self) -> std::string"""
        return _pyvacon_swig.QuoteTable_getCurrency(self)

    def getClassName(self):
        r"""getClassName(QuoteTable self) -> std::string"""
        return _pyvacon_swig.QuoteTable_getClassName(self)
    __swig_destroy__ = _pyvacon_swig.delete_QuoteTable

# Register QuoteTable in _pyvacon_swig:
_pyvacon_swig.QuoteTable_swigregister(QuoteTable)

class FxForwardQuoteTable(QuoteTable):
    r"""Proxy of C++ FxForwardQuoteTable class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassName(self):
        r"""getClassName(FxForwardQuoteTable self) -> std::string"""
        return _pyvacon_swig.FxForwardQuoteTable_getClassName(self)
    __swig_destroy__ = _pyvacon_swig.delete_FxForwardQuoteTable

# Register FxForwardQuoteTable in _pyvacon_swig:
_pyvacon_swig.FxForwardQuoteTable_swigregister(FxForwardQuoteTable)

class FxOptionQuoteTable(QuoteTable):
    r"""Proxy of C++ FxOptionQuoteTable class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getConvexityType(self):
        r"""getConvexityType(FxOptionQuoteTable self) -> std::string"""
        return _pyvacon_swig.FxOptionQuoteTable_getConvexityType(self)

    def getDeltaType(self):
        r"""getDeltaType(FxOptionQuoteTable self) -> std::string"""
        return _pyvacon_swig.FxOptionQuoteTable_getDeltaType(self)

    def getSpotDeltaBoundary(self):
        r"""getSpotDeltaBoundary(FxOptionQuoteTable self) -> double"""
        return _pyvacon_swig.FxOptionQuoteTable_getSpotDeltaBoundary(self)

    def getClassName(self):
        r"""getClassName(FxOptionQuoteTable self) -> std::string"""
        return _pyvacon_swig.FxOptionQuoteTable_getClassName(self)
    __swig_destroy__ = _pyvacon_swig.delete_FxOptionQuoteTable

# Register FxOptionQuoteTable in _pyvacon_swig:
_pyvacon_swig.FxOptionQuoteTable_swigregister(FxOptionQuoteTable)

class EquityOptionQuoteTable(QuoteTable):
    r"""Proxy of C++ EquityOptionQuoteTable class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getExpiries(self):
        r"""getExpiries(EquityOptionQuoteTable self) -> vectorPTime"""
        return _pyvacon_swig.EquityOptionQuoteTable_getExpiries(self)

    def getClassName(self):
        r"""getClassName(EquityOptionQuoteTable self) -> std::string"""
        return _pyvacon_swig.EquityOptionQuoteTable_getClassName(self)
    __swig_destroy__ = _pyvacon_swig.delete_EquityOptionQuoteTable

# Register EquityOptionQuoteTable in _pyvacon_swig:
_pyvacon_swig.EquityOptionQuoteTable_swigregister(EquityOptionQuoteTable)

class BondQuoteTable(MarketDataObject):
    r"""Proxy of C++ BondQuoteTable class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, objId, refDate, isins, quoteTimes, bid, ask):
        r"""__init__(BondQuoteTable self, std::string const & objId, ptime refDate, vectorString isins, vectorPTime quoteTimes, vectorDouble bid, vectorDouble ask) -> BondQuoteTable"""
        _pyvacon_swig.BondQuoteTable_swiginit(self, _pyvacon_swig.new_BondQuoteTable(objId, refDate, isins, quoteTimes, bid, ask))

    def getClassName(self):
        r"""getClassName(BondQuoteTable self) -> std::string"""
        return _pyvacon_swig.BondQuoteTable_getClassName(self)
    __swig_destroy__ = _pyvacon_swig.delete_BondQuoteTable

# Register BondQuoteTable in _pyvacon_swig:
_pyvacon_swig.BondQuoteTable_swigregister(BondQuoteTable)

class BaseModel(BaseObject):
    r"""Proxy of C++ BaseModel class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getObjectId(self):
        r"""getObjectId(BaseModel self) -> std::string const &"""
        return _pyvacon_swig.BaseModel_getObjectId(self)

    def getParameters(self, x):
        r"""getParameters(BaseModel self, vectorDouble x)"""
        return _pyvacon_swig.BaseModel_getParameters(self, x)

    def setParameters(self, x):
        r"""setParameters(BaseModel self, vectorDouble x)"""
        return _pyvacon_swig.BaseModel_setParameters(self, x)

    def getParameterDescripion(self):
        r"""getParameterDescripion(BaseModel self) -> vectorString"""
        return _pyvacon_swig.BaseModel_getParameterDescripion(self)

    def getClassName(self):
        r"""getClassName(BaseModel self) -> std::string"""
        return _pyvacon_swig.BaseModel_getClassName(self)

    def getModelType(self):
        r"""getModelType(BaseModel self) -> std::string const"""
        return _pyvacon_swig.BaseModel_getModelType(self)

    @staticmethod
    def load(filename):
        r"""load(std::string filename) -> std::shared_ptr< BaseModel >"""
        return _pyvacon_swig.BaseModel_load(filename)

    @staticmethod
    def save(filename, data):
        r"""save(std::string filename, std::shared_ptr< BaseModel > const & data)"""
        return _pyvacon_swig.BaseModel_save(filename, data)

    def __init__(self):
        r"""__init__(BaseModel self) -> BaseModel"""
        _pyvacon_swig.BaseModel_swiginit(self, _pyvacon_swig.new_BaseModel())
    __swig_destroy__ = _pyvacon_swig.delete_BaseModel

# Register BaseModel in _pyvacon_swig:
_pyvacon_swig.BaseModel_swigregister(BaseModel)

def BaseModel_load(filename):
    r"""BaseModel_load(std::string filename) -> std::shared_ptr< BaseModel >"""
    return _pyvacon_swig.BaseModel_load(filename)

def BaseModel_save(filename, data):
    r"""BaseModel_save(std::string filename, std::shared_ptr< BaseModel > const & data)"""
    return _pyvacon_swig.BaseModel_save(filename, data)

class CalibrationStorage(object):
    r"""Proxy of C++ CalibrationStorage class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, refDate, models):
        r"""__init__(CalibrationStorage self, ptime refDate, std::shared_ptr< BaseInterface > models) -> CalibrationStorage"""
        _pyvacon_swig.CalibrationStorage_swiginit(self, _pyvacon_swig.new_CalibrationStorage(refDate, models))

    def add(self, udl, model):
        r"""add(CalibrationStorage self, std::string const & udl, std::shared_ptr< BaseModel > const & model)"""
        return _pyvacon_swig.CalibrationStorage_add(self, udl, model)

    def get(self, udl, model):
        r"""get(CalibrationStorage self, std::string const & udl, std::string const & model) -> std::shared_ptr< BaseModel const >"""
        return _pyvacon_swig.CalibrationStorage_get(self, udl, model)
    __swig_destroy__ = _pyvacon_swig.delete_CalibrationStorage

# Register CalibrationStorage in _pyvacon_swig:
_pyvacon_swig.CalibrationStorage_swigregister(CalibrationStorage)

class vectorCouponDescription(object):
    r"""Proxy of C++ std::vector< CouponDescription > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(vectorCouponDescription self) -> SwigPyIterator"""
        return _pyvacon_swig.vectorCouponDescription_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(vectorCouponDescription self) -> bool"""
        return _pyvacon_swig.vectorCouponDescription___nonzero__(self)

    def __bool__(self):
        r"""__bool__(vectorCouponDescription self) -> bool"""
        return _pyvacon_swig.vectorCouponDescription___bool__(self)

    def __len__(self):
        r"""__len__(vectorCouponDescription self) -> std::vector< CouponDescription >::size_type"""
        return _pyvacon_swig.vectorCouponDescription___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(vectorCouponDescription self, std::vector< CouponDescription >::difference_type i, std::vector< CouponDescription >::difference_type j) -> vectorCouponDescription"""
        return _pyvacon_swig.vectorCouponDescription___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(vectorCouponDescription self, std::vector< CouponDescription >::difference_type i, std::vector< CouponDescription >::difference_type j)
        __setslice__(vectorCouponDescription self, std::vector< CouponDescription >::difference_type i, std::vector< CouponDescription >::difference_type j, vectorCouponDescription v)
        """
        return _pyvacon_swig.vectorCouponDescription___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(vectorCouponDescription self, std::vector< CouponDescription >::difference_type i, std::vector< CouponDescription >::difference_type j)"""
        return _pyvacon_swig.vectorCouponDescription___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(vectorCouponDescription self, std::vector< CouponDescription >::difference_type i)
        __delitem__(vectorCouponDescription self, PySliceObject * slice)
        """
        return _pyvacon_swig.vectorCouponDescription___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(vectorCouponDescription self, PySliceObject * slice) -> vectorCouponDescription
        __getitem__(vectorCouponDescription self, std::vector< CouponDescription >::difference_type i) -> CouponDescription
        """
        return _pyvacon_swig.vectorCouponDescription___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(vectorCouponDescription self, PySliceObject * slice, vectorCouponDescription v)
        __setitem__(vectorCouponDescription self, PySliceObject * slice)
        __setitem__(vectorCouponDescription self, std::vector< CouponDescription >::difference_type i, CouponDescription x)
        """
        return _pyvacon_swig.vectorCouponDescription___setitem__(self, *args)

    def pop(self):
        r"""pop(vectorCouponDescription self) -> CouponDescription"""
        return _pyvacon_swig.vectorCouponDescription_pop(self)

    def append(self, x):
        r"""append(vectorCouponDescription self, CouponDescription x)"""
        return _pyvacon_swig.vectorCouponDescription_append(self, x)

    def empty(self):
        r"""empty(vectorCouponDescription self) -> bool"""
        return _pyvacon_swig.vectorCouponDescription_empty(self)

    def size(self):
        r"""size(vectorCouponDescription self) -> std::vector< CouponDescription >::size_type"""
        return _pyvacon_swig.vectorCouponDescription_size(self)

    def swap(self, v):
        r"""swap(vectorCouponDescription self, vectorCouponDescription v)"""
        return _pyvacon_swig.vectorCouponDescription_swap(self, v)

    def begin(self):
        r"""begin(vectorCouponDescription self) -> std::vector< CouponDescription >::iterator"""
        return _pyvacon_swig.vectorCouponDescription_begin(self)

    def end(self):
        r"""end(vectorCouponDescription self) -> std::vector< CouponDescription >::iterator"""
        return _pyvacon_swig.vectorCouponDescription_end(self)

    def rbegin(self):
        r"""rbegin(vectorCouponDescription self) -> std::vector< CouponDescription >::reverse_iterator"""
        return _pyvacon_swig.vectorCouponDescription_rbegin(self)

    def rend(self):
        r"""rend(vectorCouponDescription self) -> std::vector< CouponDescription >::reverse_iterator"""
        return _pyvacon_swig.vectorCouponDescription_rend(self)

    def clear(self):
        r"""clear(vectorCouponDescription self)"""
        return _pyvacon_swig.vectorCouponDescription_clear(self)

    def get_allocator(self):
        r"""get_allocator(vectorCouponDescription self) -> std::vector< CouponDescription >::allocator_type"""
        return _pyvacon_swig.vectorCouponDescription_get_allocator(self)

    def pop_back(self):
        r"""pop_back(vectorCouponDescription self)"""
        return _pyvacon_swig.vectorCouponDescription_pop_back(self)

    def erase(self, *args):
        r"""
        erase(vectorCouponDescription self, std::vector< CouponDescription >::iterator pos) -> std::vector< CouponDescription >::iterator
        erase(vectorCouponDescription self, std::vector< CouponDescription >::iterator first, std::vector< CouponDescription >::iterator last) -> std::vector< CouponDescription >::iterator
        """
        return _pyvacon_swig.vectorCouponDescription_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(vectorCouponDescription self) -> vectorCouponDescription
        __init__(vectorCouponDescription self, vectorCouponDescription other) -> vectorCouponDescription
        __init__(vectorCouponDescription self, std::vector< CouponDescription >::size_type size) -> vectorCouponDescription
        __init__(vectorCouponDescription self, std::vector< CouponDescription >::size_type size, CouponDescription value) -> vectorCouponDescription
        """
        _pyvacon_swig.vectorCouponDescription_swiginit(self, _pyvacon_swig.new_vectorCouponDescription(*args))

    def push_back(self, x):
        r"""push_back(vectorCouponDescription self, CouponDescription x)"""
        return _pyvacon_swig.vectorCouponDescription_push_back(self, x)

    def front(self):
        r"""front(vectorCouponDescription self) -> CouponDescription"""
        return _pyvacon_swig.vectorCouponDescription_front(self)

    def back(self):
        r"""back(vectorCouponDescription self) -> CouponDescription"""
        return _pyvacon_swig.vectorCouponDescription_back(self)

    def assign(self, n, x):
        r"""assign(vectorCouponDescription self, std::vector< CouponDescription >::size_type n, CouponDescription x)"""
        return _pyvacon_swig.vectorCouponDescription_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(vectorCouponDescription self, std::vector< CouponDescription >::size_type new_size)
        resize(vectorCouponDescription self, std::vector< CouponDescription >::size_type new_size, CouponDescription x)
        """
        return _pyvacon_swig.vectorCouponDescription_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(vectorCouponDescription self, std::vector< CouponDescription >::iterator pos, CouponDescription x) -> std::vector< CouponDescription >::iterator
        insert(vectorCouponDescription self, std::vector< CouponDescription >::iterator pos, std::vector< CouponDescription >::size_type n, CouponDescription x)
        """
        return _pyvacon_swig.vectorCouponDescription_insert(self, *args)

    def reserve(self, n):
        r"""reserve(vectorCouponDescription self, std::vector< CouponDescription >::size_type n)"""
        return _pyvacon_swig.vectorCouponDescription_reserve(self, n)

    def capacity(self):
        r"""capacity(vectorCouponDescription self) -> std::vector< CouponDescription >::size_type"""
        return _pyvacon_swig.vectorCouponDescription_capacity(self)
    __swig_destroy__ = _pyvacon_swig.delete_vectorCouponDescription

# Register vectorCouponDescription in _pyvacon_swig:
_pyvacon_swig.vectorCouponDescription_swigregister(vectorCouponDescription)

class vectorBaseSpecification(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< BaseSpecification const > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(vectorBaseSpecification self) -> SwigPyIterator"""
        return _pyvacon_swig.vectorBaseSpecification_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(vectorBaseSpecification self) -> bool"""
        return _pyvacon_swig.vectorBaseSpecification___nonzero__(self)

    def __bool__(self):
        r"""__bool__(vectorBaseSpecification self) -> bool"""
        return _pyvacon_swig.vectorBaseSpecification___bool__(self)

    def __len__(self):
        r"""__len__(vectorBaseSpecification self) -> std::vector< std::shared_ptr< BaseSpecification const > >::size_type"""
        return _pyvacon_swig.vectorBaseSpecification___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(vectorBaseSpecification self, std::vector< std::shared_ptr< BaseSpecification const > >::difference_type i, std::vector< std::shared_ptr< BaseSpecification const > >::difference_type j) -> vectorBaseSpecification"""
        return _pyvacon_swig.vectorBaseSpecification___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(vectorBaseSpecification self, std::vector< std::shared_ptr< BaseSpecification const > >::difference_type i, std::vector< std::shared_ptr< BaseSpecification const > >::difference_type j)
        __setslice__(vectorBaseSpecification self, std::vector< std::shared_ptr< BaseSpecification const > >::difference_type i, std::vector< std::shared_ptr< BaseSpecification const > >::difference_type j, vectorBaseSpecification v)
        """
        return _pyvacon_swig.vectorBaseSpecification___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(vectorBaseSpecification self, std::vector< std::shared_ptr< BaseSpecification const > >::difference_type i, std::vector< std::shared_ptr< BaseSpecification const > >::difference_type j)"""
        return _pyvacon_swig.vectorBaseSpecification___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(vectorBaseSpecification self, std::vector< std::shared_ptr< BaseSpecification const > >::difference_type i)
        __delitem__(vectorBaseSpecification self, PySliceObject * slice)
        """
        return _pyvacon_swig.vectorBaseSpecification___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(vectorBaseSpecification self, PySliceObject * slice) -> vectorBaseSpecification
        __getitem__(vectorBaseSpecification self, std::vector< std::shared_ptr< BaseSpecification const > >::difference_type i) -> std::vector< std::shared_ptr< BaseSpecification const > >::value_type const &
        """
        return _pyvacon_swig.vectorBaseSpecification___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(vectorBaseSpecification self, PySliceObject * slice, vectorBaseSpecification v)
        __setitem__(vectorBaseSpecification self, PySliceObject * slice)
        __setitem__(vectorBaseSpecification self, std::vector< std::shared_ptr< BaseSpecification const > >::difference_type i, std::vector< std::shared_ptr< BaseSpecification const > >::value_type const & x)
        """
        return _pyvacon_swig.vectorBaseSpecification___setitem__(self, *args)

    def pop(self):
        r"""pop(vectorBaseSpecification self) -> std::vector< std::shared_ptr< BaseSpecification const > >::value_type"""
        return _pyvacon_swig.vectorBaseSpecification_pop(self)

    def append(self, x):
        r"""append(vectorBaseSpecification self, std::vector< std::shared_ptr< BaseSpecification const > >::value_type const & x)"""
        return _pyvacon_swig.vectorBaseSpecification_append(self, x)

    def empty(self):
        r"""empty(vectorBaseSpecification self) -> bool"""
        return _pyvacon_swig.vectorBaseSpecification_empty(self)

    def size(self):
        r"""size(vectorBaseSpecification self) -> std::vector< std::shared_ptr< BaseSpecification const > >::size_type"""
        return _pyvacon_swig.vectorBaseSpecification_size(self)

    def swap(self, v):
        r"""swap(vectorBaseSpecification self, vectorBaseSpecification v)"""
        return _pyvacon_swig.vectorBaseSpecification_swap(self, v)

    def begin(self):
        r"""begin(vectorBaseSpecification self) -> std::vector< std::shared_ptr< BaseSpecification const > >::iterator"""
        return _pyvacon_swig.vectorBaseSpecification_begin(self)

    def end(self):
        r"""end(vectorBaseSpecification self) -> std::vector< std::shared_ptr< BaseSpecification const > >::iterator"""
        return _pyvacon_swig.vectorBaseSpecification_end(self)

    def rbegin(self):
        r"""rbegin(vectorBaseSpecification self) -> std::vector< std::shared_ptr< BaseSpecification const > >::reverse_iterator"""
        return _pyvacon_swig.vectorBaseSpecification_rbegin(self)

    def rend(self):
        r"""rend(vectorBaseSpecification self) -> std::vector< std::shared_ptr< BaseSpecification const > >::reverse_iterator"""
        return _pyvacon_swig.vectorBaseSpecification_rend(self)

    def clear(self):
        r"""clear(vectorBaseSpecification self)"""
        return _pyvacon_swig.vectorBaseSpecification_clear(self)

    def get_allocator(self):
        r"""get_allocator(vectorBaseSpecification self) -> std::vector< std::shared_ptr< BaseSpecification const > >::allocator_type"""
        return _pyvacon_swig.vectorBaseSpecification_get_allocator(self)

    def pop_back(self):
        r"""pop_back(vectorBaseSpecification self)"""
        return _pyvacon_swig.vectorBaseSpecification_pop_back(self)

    def erase(self, *args):
        r"""
        erase(vectorBaseSpecification self, std::vector< std::shared_ptr< BaseSpecification const > >::iterator pos) -> std::vector< std::shared_ptr< BaseSpecification const > >::iterator
        erase(vectorBaseSpecification self, std::vector< std::shared_ptr< BaseSpecification const > >::iterator first, std::vector< std::shared_ptr< BaseSpecification const > >::iterator last) -> std::vector< std::shared_ptr< BaseSpecification const > >::iterator
        """
        return _pyvacon_swig.vectorBaseSpecification_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(vectorBaseSpecification self) -> vectorBaseSpecification
        __init__(vectorBaseSpecification self, vectorBaseSpecification other) -> vectorBaseSpecification
        __init__(vectorBaseSpecification self, std::vector< std::shared_ptr< BaseSpecification const > >::size_type size) -> vectorBaseSpecification
        __init__(vectorBaseSpecification self, std::vector< std::shared_ptr< BaseSpecification const > >::size_type size, std::vector< std::shared_ptr< BaseSpecification const > >::value_type const & value) -> vectorBaseSpecification
        """
        _pyvacon_swig.vectorBaseSpecification_swiginit(self, _pyvacon_swig.new_vectorBaseSpecification(*args))

    def push_back(self, x):
        r"""push_back(vectorBaseSpecification self, std::vector< std::shared_ptr< BaseSpecification const > >::value_type const & x)"""
        return _pyvacon_swig.vectorBaseSpecification_push_back(self, x)

    def front(self):
        r"""front(vectorBaseSpecification self) -> std::vector< std::shared_ptr< BaseSpecification const > >::value_type const &"""
        return _pyvacon_swig.vectorBaseSpecification_front(self)

    def back(self):
        r"""back(vectorBaseSpecification self) -> std::vector< std::shared_ptr< BaseSpecification const > >::value_type const &"""
        return _pyvacon_swig.vectorBaseSpecification_back(self)

    def assign(self, n, x):
        r"""assign(vectorBaseSpecification self, std::vector< std::shared_ptr< BaseSpecification const > >::size_type n, std::vector< std::shared_ptr< BaseSpecification const > >::value_type const & x)"""
        return _pyvacon_swig.vectorBaseSpecification_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(vectorBaseSpecification self, std::vector< std::shared_ptr< BaseSpecification const > >::size_type new_size)
        resize(vectorBaseSpecification self, std::vector< std::shared_ptr< BaseSpecification const > >::size_type new_size, std::vector< std::shared_ptr< BaseSpecification const > >::value_type const & x)
        """
        return _pyvacon_swig.vectorBaseSpecification_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(vectorBaseSpecification self, std::vector< std::shared_ptr< BaseSpecification const > >::iterator pos, std::vector< std::shared_ptr< BaseSpecification const > >::value_type const & x) -> std::vector< std::shared_ptr< BaseSpecification const > >::iterator
        insert(vectorBaseSpecification self, std::vector< std::shared_ptr< BaseSpecification const > >::iterator pos, std::vector< std::shared_ptr< BaseSpecification const > >::size_type n, std::vector< std::shared_ptr< BaseSpecification const > >::value_type const & x)
        """
        return _pyvacon_swig.vectorBaseSpecification_insert(self, *args)

    def reserve(self, n):
        r"""reserve(vectorBaseSpecification self, std::vector< std::shared_ptr< BaseSpecification const > >::size_type n)"""
        return _pyvacon_swig.vectorBaseSpecification_reserve(self, n)

    def capacity(self):
        r"""capacity(vectorBaseSpecification self) -> std::vector< std::shared_ptr< BaseSpecification const > >::size_type"""
        return _pyvacon_swig.vectorBaseSpecification_capacity(self)
    __swig_destroy__ = _pyvacon_swig.delete_vectorBaseSpecification

# Register vectorBaseSpecification in _pyvacon_swig:
_pyvacon_swig.vectorBaseSpecification_swigregister(vectorBaseSpecification)

class BaseSpecification(BaseObject):
    r"""Proxy of C++ BaseSpecification class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyvacon_swig.delete_BaseSpecification

    def getObjectId(self):
        r"""getObjectId(BaseSpecification self) -> std::string const &"""
        return _pyvacon_swig.BaseSpecification_getObjectId(self)

    def getIssuer(self):
        r"""getIssuer(BaseSpecification self) -> std::string const &"""
        return _pyvacon_swig.BaseSpecification_getIssuer(self)

    def getClassName(self):
        r"""getClassName(BaseSpecification self) -> std::string"""
        return _pyvacon_swig.BaseSpecification_getClassName(self)

    def getExpiry(self):
        r"""getExpiry(BaseSpecification self) -> ptime"""
        return _pyvacon_swig.BaseSpecification_getExpiry(self)

    def getSecuritizationLevel(self):
        r"""getSecuritizationLevel(BaseSpecification self) -> std::string"""
        return _pyvacon_swig.BaseSpecification_getSecuritizationLevel(self)

    def getProductType(self):
        r"""getProductType(BaseSpecification self) -> std::string const &"""
        return _pyvacon_swig.BaseSpecification_getProductType(self)

    def getCurrency(self):
        r"""getCurrency(BaseSpecification self) -> std::string"""
        return _pyvacon_swig.BaseSpecification_getCurrency(self)

    @staticmethod
    def load(filename):
        r"""load(std::string filename) -> std::shared_ptr< BaseSpecification >"""
        return _pyvacon_swig.BaseSpecification_load(filename)

    @staticmethod
    def save(filename, data):
        r"""save(std::string filename, std::shared_ptr< BaseSpecification > const & data)"""
        return _pyvacon_swig.BaseSpecification_save(filename, data)

# Register BaseSpecification in _pyvacon_swig:
_pyvacon_swig.BaseSpecification_swigregister(BaseSpecification)

def BaseSpecification_load(filename):
    r"""BaseSpecification_load(std::string filename) -> std::shared_ptr< BaseSpecification >"""
    return _pyvacon_swig.BaseSpecification_load(filename)

def BaseSpecification_save(filename, data):
    r"""BaseSpecification_save(std::string filename, std::shared_ptr< BaseSpecification > const & data)"""
    return _pyvacon_swig.BaseSpecification_save(filename, data)

class FixingTable(BaseObject):
    r"""Proxy of C++ FixingTable class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(FixingTable self) -> FixingTable"""
        _pyvacon_swig.FixingTable_swiginit(self, _pyvacon_swig.new_FixingTable())

    def getClassName(self):
        r"""getClassName(FixingTable self) -> std::string"""
        return _pyvacon_swig.FixingTable_getClassName(self)

    def add(self, key, fixingDate, value):
        r"""add(FixingTable self, std::string const & key, ptime fixingDate, double value)"""
        return _pyvacon_swig.FixingTable_add(self, key, fixingDate, value)
    __swig_destroy__ = _pyvacon_swig.delete_FixingTable

# Register FixingTable in _pyvacon_swig:
_pyvacon_swig.FixingTable_swigregister(FixingTable)

class ComboSpecification(BaseSpecification):
    r"""Proxy of C++ ComboSpecification class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ComboSpecification self) -> ComboSpecification
        __init__(ComboSpecification self, std::string const & id, vectorBaseSpecification specs, vectorDouble weights) -> ComboSpecification
        """
        _pyvacon_swig.ComboSpecification_swiginit(self, _pyvacon_swig.new_ComboSpecification(*args))

    def getClassName(self):
        r"""getClassName(ComboSpecification self) -> std::string"""
        return _pyvacon_swig.ComboSpecification_getClassName(self)

    def getMemberSpecs(self):
        r"""getMemberSpecs(ComboSpecification self) -> vectorBaseSpecification"""
        return _pyvacon_swig.ComboSpecification_getMemberSpecs(self)

    def getMemberWeights(self):
        r"""getMemberWeights(ComboSpecification self) -> vectorDouble"""
        return _pyvacon_swig.ComboSpecification_getMemberWeights(self)
    __swig_destroy__ = _pyvacon_swig.delete_ComboSpecification

# Register ComboSpecification in _pyvacon_swig:
_pyvacon_swig.ComboSpecification_swigregister(ComboSpecification)

class PayoffStructure(Clonable):
    r"""Proxy of C++ PayoffStructure class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getClassName(self):
        r"""getClassName(PayoffStructure self) -> std::string"""
        return _pyvacon_swig.PayoffStructure_getClassName(self)

    def __init__(self, *args):
        r"""
        __init__(PayoffStructure self, vectorDouble sPoints, vectorDouble pPoints) -> PayoffStructure
        __init__(PayoffStructure self, double rebate) -> PayoffStructure
        """
        _pyvacon_swig.PayoffStructure_swiginit(self, _pyvacon_swig.new_PayoffStructure(*args))

    def getPayoffSpots(self):
        r"""getPayoffSpots(PayoffStructure self) -> vectorDouble"""
        return _pyvacon_swig.PayoffStructure_getPayoffSpots(self)

    def getPayoffValues(self):
        r"""getPayoffValues(PayoffStructure self) -> vectorDouble"""
        return _pyvacon_swig.PayoffStructure_getPayoffValues(self)
    __swig_destroy__ = _pyvacon_swig.delete_PayoffStructure

# Register PayoffStructure in _pyvacon_swig:
_pyvacon_swig.PayoffStructure_swigregister(PayoffStructure)

class BarrierDefinition(Clonable):
    r"""Proxy of C++ BarrierDefinition class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, barrierStart, barrierEnd, barrierPayoff, level, callable):
        r"""__init__(BarrierDefinition self, ptime barrierStart, ptime barrierEnd, std::shared_ptr< BarrierPayoff > const & barrierPayoff, double level, bool callable) -> BarrierDefinition"""
        _pyvacon_swig.BarrierDefinition_swiginit(self, _pyvacon_swig.new_BarrierDefinition(barrierStart, barrierEnd, barrierPayoff, level, callable))

    def getClassName(self):
        r"""getClassName(BarrierDefinition self) -> std::string"""
        return _pyvacon_swig.BarrierDefinition_getClassName(self)
    __swig_destroy__ = _pyvacon_swig.delete_BarrierDefinition

# Register BarrierDefinition in _pyvacon_swig:
_pyvacon_swig.BarrierDefinition_swigregister(BarrierDefinition)

class BarrierSchedule(Clonable):
    r"""Proxy of C++ BarrierSchedule class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(BarrierSchedule self) -> BarrierSchedule
        __init__(BarrierSchedule self, std::vector< std::shared_ptr< BarrierDefinition >,std::allocator< std::shared_ptr< BarrierDefinition > > > const & upBarriers, std::vector< std::shared_ptr< BarrierDefinition >,std::allocator< std::shared_ptr< BarrierDefinition > > > const & downBarriers) -> BarrierSchedule
        """
        _pyvacon_swig.BarrierSchedule_swiginit(self, _pyvacon_swig.new_BarrierSchedule(*args))

    def addUpBarrier(self, bUp):
        r"""addUpBarrier(BarrierSchedule self, std::shared_ptr< BarrierDefinition > const & bUp)"""
        return _pyvacon_swig.BarrierSchedule_addUpBarrier(self, bUp)

    def addDownBarrier(self, bDown):
        r"""addDownBarrier(BarrierSchedule self, std::shared_ptr< BarrierDefinition > const & bDown)"""
        return _pyvacon_swig.BarrierSchedule_addDownBarrier(self, bDown)

    def getClassName(self):
        r"""getClassName(BarrierSchedule self) -> std::string"""
        return _pyvacon_swig.BarrierSchedule_getClassName(self)
    __swig_destroy__ = _pyvacon_swig.delete_BarrierSchedule

# Register BarrierSchedule in _pyvacon_swig:
_pyvacon_swig.BarrierSchedule_swigregister(BarrierSchedule)

class BarrierPayoff(Clonable):
    r"""Proxy of C++ BarrierPayoff class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getClassName(self):
        r"""getClassName(BarrierPayoff self) -> std::string"""
        return _pyvacon_swig.BarrierPayoff_getClassName(self)

    def __init__(self, *args):
        r"""
        __init__(BarrierPayoff self, std::string const & id, ptime expiry, std::shared_ptr< BarrierSchedule > const & barriers, std::shared_ptr< PayoffStructure > const & payoff, std::shared_ptr< ExerciseSchedule > exerciseSchedule=std::shared_ptr< ExerciseSchedule const >()) -> BarrierPayoff
        __init__(BarrierPayoff self, std::string const & id, ptime expiry, std::shared_ptr< PayoffStructure > const & payoff, std::shared_ptr< ExerciseSchedule > exerciseSchedule=std::shared_ptr< ExerciseSchedule >()) -> BarrierPayoff
        """
        _pyvacon_swig.BarrierPayoff_swiginit(self, _pyvacon_swig.new_BarrierPayoff(*args))
    __swig_destroy__ = _pyvacon_swig.delete_BarrierPayoff

# Register BarrierPayoff in _pyvacon_swig:
_pyvacon_swig.BarrierPayoff_swigregister(BarrierPayoff)

class ExerciseSchedule(Clonable):
    r"""Proxy of C++ ExerciseSchedule class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getClassName(self):
        r"""getClassName(ExerciseSchedule self) -> std::string"""
        return _pyvacon_swig.ExerciseSchedule_getClassName(self)

    def __init__(self):
        r"""__init__(ExerciseSchedule self) -> ExerciseSchedule"""
        _pyvacon_swig.ExerciseSchedule_swiginit(self, _pyvacon_swig.new_ExerciseSchedule())
    __swig_destroy__ = _pyvacon_swig.delete_ExerciseSchedule

# Register ExerciseSchedule in _pyvacon_swig:
_pyvacon_swig.ExerciseSchedule_swigregister(ExerciseSchedule)

class BarrierSpecification(BaseSpecification):
    r"""Proxy of C++ BarrierSpecification class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getClassName(self):
        r"""getClassName(BarrierSpecification self) -> std::string"""
        return _pyvacon_swig.BarrierSpecification_getClassName(self)

    def __init__(self, id, issuer, secLvl, curr, udlId, expiry, barriers, payoff):
        r"""__init__(BarrierSpecification self, std::string const & id, std::string const & issuer, std::string const & secLvl, std::string const & curr, std::string const & udlId, ptime expiry, std::shared_ptr< BarrierSchedule const > const & barriers, std::shared_ptr< PayoffStructure const > const & payoff) -> BarrierSpecification"""
        _pyvacon_swig.BarrierSpecification_swiginit(self, _pyvacon_swig.new_BarrierSpecification(id, issuer, secLvl, curr, udlId, expiry, barriers, payoff))
    __swig_destroy__ = _pyvacon_swig.delete_BarrierSpecification

# Register BarrierSpecification in _pyvacon_swig:
_pyvacon_swig.BarrierSpecification_swigregister(BarrierSpecification)

class EuropeanVanillaSpecification(BaseSpecification):
    r"""Proxy of C++ EuropeanVanillaSpecification class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getClassName(self):
        r"""getClassName(EuropeanVanillaSpecification self) -> std::string"""
        return _pyvacon_swig.EuropeanVanillaSpecification_getClassName(self)

    def getUdlId(self):
        r"""getUdlId(EuropeanVanillaSpecification self) -> std::string const &"""
        return _pyvacon_swig.EuropeanVanillaSpecification_getUdlId(self)

    def getStrike(self):
        r"""getStrike(EuropeanVanillaSpecification self) -> double"""
        return _pyvacon_swig.EuropeanVanillaSpecification_getStrike(self)

    def getShareRatio(self):
        r"""getShareRatio(EuropeanVanillaSpecification self) -> double"""
        return _pyvacon_swig.EuropeanVanillaSpecification_getShareRatio(self)

    def __init__(self, *args):
        r"""__init__(EuropeanVanillaSpecification self, std::string const & id, std::string const & issuer, std::string const & secLvl, std::string const & curr, std::string const & udlId, std::string const & type, ptime expiry, double strike, double shareRatio=1.0, std::string const & holidays="", int const exSettle=0, int const tradeSettle=0) -> EuropeanVanillaSpecification"""
        _pyvacon_swig.EuropeanVanillaSpecification_swiginit(self, _pyvacon_swig.new_EuropeanVanillaSpecification(*args))

    def getOptionType(self):
        r"""getOptionType(EuropeanVanillaSpecification self) -> std::string"""
        return _pyvacon_swig.EuropeanVanillaSpecification_getOptionType(self)
    __swig_destroy__ = _pyvacon_swig.delete_EuropeanVanillaSpecification

# Register EuropeanVanillaSpecification in _pyvacon_swig:
_pyvacon_swig.EuropeanVanillaSpecification_swigregister(EuropeanVanillaSpecification)

class AmericanVanillaSpecification(EuropeanVanillaSpecification):
    r"""Proxy of C++ AmericanVanillaSpecification class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getClassName(self):
        r"""getClassName(AmericanVanillaSpecification self) -> std::string"""
        return _pyvacon_swig.AmericanVanillaSpecification_getClassName(self)

    def __init__(self, *args):
        r"""__init__(AmericanVanillaSpecification self, std::string const & id, std::string const & issuer, std::string const & secLvl, std::string const & curr, std::string const & udlId, std::string const & type, ptime expiry, double strike, double shareRatio=1.0, bool exerciseBeforeExDate=False, std::string const & holidays="", int const exSettle=0, int const tradeSettle=0) -> AmericanVanillaSpecification"""
        _pyvacon_swig.AmericanVanillaSpecification_swiginit(self, _pyvacon_swig.new_AmericanVanillaSpecification(*args))

    def convertIntoBarrierSpecification(self, *args):
        r"""convertIntoBarrierSpecification(AmericanVanillaSpecification self, std::shared_ptr< DividendTable const > const & div=std::shared_ptr< DividendTable const >()) -> std::shared_ptr< BarrierSpecification const >"""
        return _pyvacon_swig.AmericanVanillaSpecification_convertIntoBarrierSpecification(self, *args)
    __swig_destroy__ = _pyvacon_swig.delete_AmericanVanillaSpecification

# Register AmericanVanillaSpecification in _pyvacon_swig:
_pyvacon_swig.AmericanVanillaSpecification_swigregister(AmericanVanillaSpecification)

class CouponDescription(object):
    r"""Proxy of C++ CouponDescription class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(CouponDescription self, ptime accrualStart, ptime accrualEnd, ptime paymentDate, std::string dc, double anualizedFixedCoupon, ptime fixingDate=boost::posix_time::ptime(), ptime floatingPeriodStart=boost::posix_time::ptime(), ptime floatingPeriodEnd=boost::posix_time::ptime(), double floatingSpread=0, double floatingRateCap=1e10, double floatingRateFloor=-1e10, std::string const & floatingFixingUdl="") -> CouponDescription"""
        _pyvacon_swig.CouponDescription_swiginit(self, _pyvacon_swig.new_CouponDescription(*args))

    def isFixedCoupon(self):
        r"""isFixedCoupon(CouponDescription self) -> bool"""
        return _pyvacon_swig.CouponDescription_isFixedCoupon(self)

    def getFixingUdl(self):
        r"""getFixingUdl(CouponDescription self) -> std::string const &"""
        return _pyvacon_swig.CouponDescription_getFixingUdl(self)

    def getPaymentDate(self):
        r"""getPaymentDate(CouponDescription self) -> ptime"""
        return _pyvacon_swig.CouponDescription_getPaymentDate(self)

    def getFixingDate(self):
        r"""getFixingDate(CouponDescription self) -> ptime"""
        return _pyvacon_swig.CouponDescription_getFixingDate(self)

    def getCashflowFixedCoupon(self):
        r"""getCashflowFixedCoupon(CouponDescription self) -> double"""
        return _pyvacon_swig.CouponDescription_getCashflowFixedCoupon(self)

    def getCashflowSpread(self):
        r"""getCashflowSpread(CouponDescription self) -> double"""
        return _pyvacon_swig.CouponDescription_getCashflowSpread(self)

    def getCashflowFloatCoupon(self, valDate, fwdCurve, lastFixing):
        r"""getCashflowFloatCoupon(CouponDescription self, ptime valDate, std::shared_ptr< DiscountCurve const > const & fwdCurve, double lastFixing) -> double"""
        return _pyvacon_swig.CouponDescription_getCashflowFloatCoupon(self, valDate, fwdCurve, lastFixing)

    def getAccrualStart(self):
        r"""getAccrualStart(CouponDescription self) -> ptime"""
        return _pyvacon_swig.CouponDescription_getAccrualStart(self)

    def getAccruelEnd(self):
        r"""getAccruelEnd(CouponDescription self) -> ptime"""
        return _pyvacon_swig.CouponDescription_getAccruelEnd(self)

    def getAccrualPeriod(self):
        r"""getAccrualPeriod(CouponDescription self) -> double"""
        return _pyvacon_swig.CouponDescription_getAccrualPeriod(self)

    def getFloatingStart(self):
        r"""getFloatingStart(CouponDescription self) -> ptime"""
        return _pyvacon_swig.CouponDescription_getFloatingStart(self)

    def getFloatingEnd(self):
        r"""getFloatingEnd(CouponDescription self) -> boost::posix_time::ptime const &"""
        return _pyvacon_swig.CouponDescription_getFloatingEnd(self)

    def getFloatingCap(self):
        r"""getFloatingCap(CouponDescription self) -> double"""
        return _pyvacon_swig.CouponDescription_getFloatingCap(self)

    def getFloatingFloor(self):
        r"""getFloatingFloor(CouponDescription self) -> double"""
        return _pyvacon_swig.CouponDescription_getFloatingFloor(self)

    def getFixedCoupon(self):
        r"""getFixedCoupon(CouponDescription self) -> double"""
        return _pyvacon_swig.CouponDescription_getFixedCoupon(self)
    __swig_destroy__ = _pyvacon_swig.delete_CouponDescription

# Register CouponDescription in _pyvacon_swig:
_pyvacon_swig.CouponDescription_swigregister(CouponDescription)

class BondSpecification(BaseSpecification):
    r"""Proxy of C++ BondSpecification class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getClassName(self):
        r"""getClassName(BondSpecification self) -> std::string"""
        return _pyvacon_swig.BondSpecification_getClassName(self)

    def getCouponSchedule(self):
        r"""getCouponSchedule(BondSpecification self) -> vectorCouponDescription"""
        return _pyvacon_swig.BondSpecification_getCouponSchedule(self)

    def __init__(self, *args):
        r"""
        __init__(BondSpecification self, std::string const & id, std::string const & issuer, std::string const & secLvl, std::string const & curr, ptime expiry, ptime issueDate, double notional, std::string const & dc, vectorPTime fixedCouponDates, vectorDouble fixedCoupons, std::string const floatingRateUnderlying, vectorPTime floatingPeriods, vectorDouble spreads, std::string const & holidays="") -> BondSpecification
        __init__(BondSpecification self, std::string const & id, std::string const & issuer, std::string const & secLvl, std::string const & curr, ptime expiry, ptime issueDate, vectorDouble notional, std::string const & dc, vectorPTime fixedCouponDates, vectorDouble fixedCoupons, std::string const floatingRateUnderlying, vectorPTime floatingPeriods, vectorDouble spreads, std::string const & holidays="") -> BondSpecification
        __init__(BondSpecification self, std::string const & id, std::string const & issuer, std::string const & secLvl, std::string const & curr, ptime expiry, ptime issueDate, double notional, std::string const & dc, std::string const & couponFreq, double const & coupon, std::string const & rollConvention="Following", std::string const & holidays="") -> BondSpecification
        __init__(BondSpecification self, std::string const & id, std::string const & issuer, std::string const & secLvl, std::string const & curr, ptime expiry, ptime issueDate, double notional, std::string const & dc, std::string const & couponFreq, std::string const & floatingRateUnderlying, double const & spread, std::string const & rollConvention="Following", std::string const & holidays="") -> BondSpecification
        """
        _pyvacon_swig.BondSpecification_swiginit(self, _pyvacon_swig.new_BondSpecification(*args))

    def getNotional(self):
        r"""getNotional(BondSpecification self) -> double"""
        return _pyvacon_swig.BondSpecification_getNotional(self)

    def hasFloat(self):
        r"""hasFloat(BondSpecification self) -> bool"""
        return _pyvacon_swig.BondSpecification_hasFloat(self)

    def getFloatingRateUnderlying(self):
        r"""getFloatingRateUnderlying(BondSpecification self) -> std::string const &"""
        return _pyvacon_swig.BondSpecification_getFloatingRateUnderlying(self)
    __swig_destroy__ = _pyvacon_swig.delete_BondSpecification

# Register BondSpecification in _pyvacon_swig:
_pyvacon_swig.BondSpecification_swigregister(BondSpecification)

class InflationLinkedBondSpecification(BondSpecification):
    r"""Proxy of C++ InflationLinkedBondSpecification class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getClassName(self):
        r"""getClassName(InflationLinkedBondSpecification self) -> std::string"""
        return _pyvacon_swig.InflationLinkedBondSpecification_getClassName(self)

    def __init__(self, *args):
        r"""__init__(InflationLinkedBondSpecification self, std::string const & id, std::string const & issuer, std::string const & secLvl, std::string const & curr, ptime issueDate, ptime expiry, double notional, vectorCouponDescription coupons, unsigned int inflationLag, std::string const & inflationInterpolation, std::string const & inflationIndex, bool deflationProtection=False, ptime referenceInflationIndexDate=ptime(), int const exSettle=0, int const tradeSettle=0) -> InflationLinkedBondSpecification"""
        _pyvacon_swig.InflationLinkedBondSpecification_swiginit(self, _pyvacon_swig.new_InflationLinkedBondSpecification(*args))

    def getInflationLag(self):
        r"""getInflationLag(InflationLinkedBondSpecification self) -> unsigned int"""
        return _pyvacon_swig.InflationLinkedBondSpecification_getInflationLag(self)

    def getInflationInterpolation(self):
        r"""getInflationInterpolation(InflationLinkedBondSpecification self) -> std::string const &"""
        return _pyvacon_swig.InflationLinkedBondSpecification_getInflationInterpolation(self)

    def getInflationIndex(self):
        r"""getInflationIndex(InflationLinkedBondSpecification self) -> std::string const &"""
        return _pyvacon_swig.InflationLinkedBondSpecification_getInflationIndex(self)

    def getReferenceInflationIndexDate(self):
        r"""getReferenceInflationIndexDate(InflationLinkedBondSpecification self) -> ptime"""
        return _pyvacon_swig.InflationLinkedBondSpecification_getReferenceInflationIndexDate(self)

    def getDeflationProtection(self):
        r"""getDeflationProtection(InflationLinkedBondSpecification self) -> bool"""
        return _pyvacon_swig.InflationLinkedBondSpecification_getDeflationProtection(self)
    __swig_destroy__ = _pyvacon_swig.delete_InflationLinkedBondSpecification

# Register InflationLinkedBondSpecification in _pyvacon_swig:
_pyvacon_swig.InflationLinkedBondSpecification_swigregister(InflationLinkedBondSpecification)

class CallableBondSpecification(BondSpecification):
    r"""Proxy of C++ CallableBondSpecification class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getClassName(self):
        r"""getClassName(CallableBondSpecification self) -> std::string"""
        return _pyvacon_swig.CallableBondSpecification_getClassName(self)

    def __init__(self, *args):
        r"""
        __init__(CallableBondSpecification self, std::string const & id, std::string const & issuer, std::string const & secLvl, std::string const & curr, ptime expiry, ptime issueDate, double notional, std::string const & dc, vectorPTime fixedCouponDates, vectorDouble fixedCoupons, std::string const floatingRateUnderlying, vectorPTime floatingPeriods, vectorPTime callDates, vectorDouble callPrices, vectorDouble spreads, vectorDouble floatingRateCaps, vectorDouble floatingRateFloors, std::string const & holidays="") -> CallableBondSpecification
        __init__(CallableBondSpecification self, std::string const & id, std::string const & issuer, std::string const & secLvl, std::string const & curr, ptime expiry, ptime issueDate, double notional, std::string const & dc, std::string const & couponFreq, double const & coupon, std::string const & rollConvention="Following", std::string const & holidays="") -> CallableBondSpecification
        __init__(CallableBondSpecification self, std::string const & id, std::string const & issuer, std::string const & secLvl, std::string const & curr, ptime expiry, ptime issueDate, double notional, std::string const & dc, std::string const & couponFreq, std::string const & floatingRateUnderlying, double const & spread, double const & floatingRateCap, double const & floatingRateFloor, std::string const & rollConvention="Following", std::string const & holidays="") -> CallableBondSpecification
        """
        _pyvacon_swig.CallableBondSpecification_swiginit(self, _pyvacon_swig.new_CallableBondSpecification(*args))
    __swig_destroy__ = _pyvacon_swig.delete_CallableBondSpecification

# Register CallableBondSpecification in _pyvacon_swig:
_pyvacon_swig.CallableBondSpecification_swigregister(CallableBondSpecification)

class IrSwapLegSpecification(object):
    r"""Proxy of C++ IrSwapLegSpecification class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getType(self):
        r"""getType(IrSwapLegSpecification self) -> IrLegType::Type const"""
        return _pyvacon_swig.IrSwapLegSpecification_getType(self)
    __swig_destroy__ = _pyvacon_swig.delete_IrSwapLegSpecification

# Register IrSwapLegSpecification in _pyvacon_swig:
_pyvacon_swig.IrSwapLegSpecification_swigregister(IrSwapLegSpecification)

class IrFixedLegSpecification(IrSwapLegSpecification):
    r"""Proxy of C++ IrFixedLegSpecification class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, rate, notionals, startDates, endDates, payDates, cur, dc):
        r"""__init__(IrFixedLegSpecification self, double rate, vectorDouble notionals, vectorPTime startDates, vectorPTime endDates, vectorPTime payDates, std::string const & cur, std::string const & dc) -> IrFixedLegSpecification"""
        _pyvacon_swig.IrFixedLegSpecification_swiginit(self, _pyvacon_swig.new_IrFixedLegSpecification(rate, notionals, startDates, endDates, payDates, cur, dc))

    def getType(self):
        r"""getType(IrFixedLegSpecification self) -> IrLegType::Type const"""
        return _pyvacon_swig.IrFixedLegSpecification_getType(self)
    __swig_destroy__ = _pyvacon_swig.delete_IrFixedLegSpecification

# Register IrFixedLegSpecification in _pyvacon_swig:
_pyvacon_swig.IrFixedLegSpecification_swigregister(IrFixedLegSpecification)

class IrFloatLegSpecification(IrSwapLegSpecification):
    r"""Proxy of C++ IrFloatLegSpecification class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, notionals, resetDates, startDates, endDates, payDates, cur, udlId, dc, spread=0.0):
        r"""__init__(IrFloatLegSpecification self, vectorDouble notionals, vectorPTime resetDates, vectorPTime startDates, vectorPTime endDates, vectorPTime payDates, std::string const & cur, std::string const & udlId, std::string const & dc, double spread=0.0) -> IrFloatLegSpecification"""
        _pyvacon_swig.IrFloatLegSpecification_swiginit(self, _pyvacon_swig.new_IrFloatLegSpecification(notionals, resetDates, startDates, endDates, payDates, cur, udlId, dc, spread))

    def getType(self):
        r"""getType(IrFloatLegSpecification self) -> IrLegType::Type const"""
        return _pyvacon_swig.IrFloatLegSpecification_getType(self)
    __swig_destroy__ = _pyvacon_swig.delete_IrFloatLegSpecification

# Register IrFloatLegSpecification in _pyvacon_swig:
_pyvacon_swig.IrFloatLegSpecification_swigregister(IrFloatLegSpecification)

class InterestRateSwapSpecification(BaseSpecification):
    r"""Proxy of C++ InterestRateSwapSpecification class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getClassName(self):
        r"""getClassName(InterestRateSwapSpecification self) -> std::string"""
        return _pyvacon_swig.InterestRateSwapSpecification_getClassName(self)

    def __init__(self, *args):
        r"""__init__(InterestRateSwapSpecification self, std::string const & id, std::string const & issuer, std::string const & secLvl, std::string const & curr, ptime expiry, std::shared_ptr< IrSwapLegSpecification > const & payLeg, std::shared_ptr< IrSwapLegSpecification > const & receiveLeg, std::string const & holidays="", int const exSettle=0, int const tradeSettle=0) -> InterestRateSwapSpecification"""
        _pyvacon_swig.InterestRateSwapSpecification_swiginit(self, _pyvacon_swig.new_InterestRateSwapSpecification(*args))

    def getPayLeg(self):
        r"""getPayLeg(InterestRateSwapSpecification self) -> std::shared_ptr< IrSwapLegSpecification const >"""
        return _pyvacon_swig.InterestRateSwapSpecification_getPayLeg(self)

    def getReceiveLeg(self):
        r"""getReceiveLeg(InterestRateSwapSpecification self) -> std::shared_ptr< IrSwapLegSpecification const >"""
        return _pyvacon_swig.InterestRateSwapSpecification_getReceiveLeg(self)
    __swig_destroy__ = _pyvacon_swig.delete_InterestRateSwapSpecification

# Register InterestRateSwapSpecification in _pyvacon_swig:
_pyvacon_swig.InterestRateSwapSpecification_swigregister(InterestRateSwapSpecification)

class InterestRateBasisSwapSpecification(BaseSpecification):
    r"""Proxy of C++ InterestRateBasisSwapSpecification class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getClassName(self):
        r"""getClassName(InterestRateBasisSwapSpecification self) -> std::string"""
        return _pyvacon_swig.InterestRateBasisSwapSpecification_getClassName(self)

    def __init__(self, *args):
        r"""__init__(InterestRateBasisSwapSpecification self, std::string const & id, std::string const & issuer, std::string const & secLvl, std::string const & curr, ptime expiry, std::shared_ptr< IrFloatLegSpecification > const & payLeg, std::shared_ptr< IrFloatLegSpecification > const & receiveLeg, std::shared_ptr< IrFixedLegSpecification > const & spreadLeg, std::string const & holidays="", int const exSettle=0, int const tradeSettle=0) -> InterestRateBasisSwapSpecification"""
        _pyvacon_swig.InterestRateBasisSwapSpecification_swiginit(self, _pyvacon_swig.new_InterestRateBasisSwapSpecification(*args))
    __swig_destroy__ = _pyvacon_swig.delete_InterestRateBasisSwapSpecification

# Register InterestRateBasisSwapSpecification in _pyvacon_swig:
_pyvacon_swig.InterestRateBasisSwapSpecification_swigregister(InterestRateBasisSwapSpecification)

class DepositSpecification(BaseSpecification):
    r"""Proxy of C++ DepositSpecification class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getClassName(self):
        r"""getClassName(DepositSpecification self) -> std::string"""
        return _pyvacon_swig.DepositSpecification_getClassName(self)

    def __init__(self, *args):
        r"""__init__(DepositSpecification self, std::string const & id, std::string const & issuer, std::string const & secLvlStr, std::string const & currStr, ptime issueDate, ptime startDate, ptime expiry, double notional, double rate, std::string const & dc, std::string const & holidays="", int const exSettle=0, int const tradeSettle=0) -> DepositSpecification"""
        _pyvacon_swig.DepositSpecification_swiginit(self, _pyvacon_swig.new_DepositSpecification(*args))
    __swig_destroy__ = _pyvacon_swig.delete_DepositSpecification

# Register DepositSpecification in _pyvacon_swig:
_pyvacon_swig.DepositSpecification_swigregister(DepositSpecification)

class InterestRateFutureSpecification(BaseSpecification):
    r"""Proxy of C++ InterestRateFutureSpecification class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getClassName(self):
        r"""getClassName(InterestRateFutureSpecification self) -> std::string"""
        return _pyvacon_swig.InterestRateFutureSpecification_getClassName(self)

    def __init__(self, *args):
        r"""__init__(InterestRateFutureSpecification self, std::string const & id, std::string const & issuer, SecuritizationLevel const & secLvlStr, Currency currStr, std::string const udlId, ptime expiry, double notional, ptime startDate, ptime endDate, std::string const dc, std::string const & holidays="", int const exSettle=0, int const tradeSettle=0) -> InterestRateFutureSpecification"""
        _pyvacon_swig.InterestRateFutureSpecification_swiginit(self, _pyvacon_swig.new_InterestRateFutureSpecification(*args))
    __swig_destroy__ = _pyvacon_swig.delete_InterestRateFutureSpecification

# Register InterestRateFutureSpecification in _pyvacon_swig:
_pyvacon_swig.InterestRateFutureSpecification_swigregister(InterestRateFutureSpecification)

class LocalVolMonteCarloSpecification(object):
    r"""Proxy of C++ LocalVolMonteCarloSpecification class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyvacon_swig.delete_LocalVolMonteCarloSpecification

# Register LocalVolMonteCarloSpecification in _pyvacon_swig:
_pyvacon_swig.LocalVolMonteCarloSpecification_swigregister(LocalVolMonteCarloSpecification)

class RainbowSpecification(BaseSpecification, LocalVolMonteCarloSpecification):
    r"""Proxy of C++ RainbowSpecification class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getClassName(self):
        r"""getClassName(RainbowSpecification self) -> std::string"""
        return _pyvacon_swig.RainbowSpecification_getClassName(self)

    def __init__(self, *args):
        r"""__init__(RainbowSpecification self, std::string const & id, std::string const & issuer, std::string const & secLvlStr, std::string const & currStr, ptime expiry, std::vector< std::shared_ptr< RainbowBarrierSpec >,std::allocator< std::shared_ptr< RainbowBarrierSpec > > > const & barriers, std::vector< std::shared_ptr< RainbowUnderlyingSpec >,std::allocator< std::shared_ptr< RainbowUnderlyingSpec > > > const & udls, double shareRatio=1.0, std::string const & holidays="", int const exSettle=0, int const tradeSettle=0) -> RainbowSpecification"""
        _pyvacon_swig.RainbowSpecification_swiginit(self, _pyvacon_swig.new_RainbowSpecification(*args))
    __swig_destroy__ = _pyvacon_swig.delete_RainbowSpecification

# Register RainbowSpecification in _pyvacon_swig:
_pyvacon_swig.RainbowSpecification_swigregister(RainbowSpecification)

class MultiMemoryExpressSpecification(BaseSpecification):
    r"""Proxy of C++ MultiMemoryExpressSpecification class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getClassName(self):
        r"""getClassName(MultiMemoryExpressSpecification self) -> std::string"""
        return _pyvacon_swig.MultiMemoryExpressSpecification_getClassName(self)

    def __init__(self, *args):
        r"""__init__(MultiMemoryExpressSpecification self, std::string const & id, std::string const & issuer, std::string const & secLvlStr, std::string const & currStr, vectorString basket, vectorDouble underlyingWeights, std::string const & udlType, ptime expiry, std::shared_ptr< PayoffStructure const > const & finalPayoff, double redemptionPrice, vectorDouble redemptionLevels, bool redemptionUp, double coupon, vectorDouble couponLevels, bool couponUp, vectorPTime couponDates, vectorPTime couponPaymentDates, double shareRatio=1.0, std::string const & holidays="", int const exSettle=0, int const tradeSettle=0) -> MultiMemoryExpressSpecification"""
        _pyvacon_swig.MultiMemoryExpressSpecification_swiginit(self, _pyvacon_swig.new_MultiMemoryExpressSpecification(*args))

    def convertIntoRainbowSpecification(self, *args):
        r"""convertIntoRainbowSpecification(MultiMemoryExpressSpecification self, std::shared_ptr< FixingTable > const & fixingTable=std::shared_ptr< FixingTable >()) -> std::shared_ptr< RainbowSpecification const >"""
        return _pyvacon_swig.MultiMemoryExpressSpecification_convertIntoRainbowSpecification(self, *args)
    __swig_destroy__ = _pyvacon_swig.delete_MultiMemoryExpressSpecification

# Register MultiMemoryExpressSpecification in _pyvacon_swig:
_pyvacon_swig.MultiMemoryExpressSpecification_swigregister(MultiMemoryExpressSpecification)

class MemoryExpressSpecification(BaseSpecification):
    r"""Proxy of C++ MemoryExpressSpecification class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getClassName(self):
        r"""getClassName(MemoryExpressSpecification self) -> std::string"""
        return _pyvacon_swig.MemoryExpressSpecification_getClassName(self)

    def __init__(self, *args):
        r"""__init__(MemoryExpressSpecification self, std::string const & id, std::string const & issuer, std::string const & secLvlStr, std::string const & currStr, std::string const udlId, ptime expiry, std::shared_ptr< PayoffStructure const > const & finalPayoff, double redemptionPrice, vectorDouble redemptionLevels, bool redemptionUp, double coupon, vectorDouble couponLevels, bool couponUp, vectorPTime couponDates, vectorPTime couponPaymentDates, double shareRatio=1.0, std::string const & holidays="", int const exSettle=0, int const tradeSettle=0) -> MemoryExpressSpecification"""
        _pyvacon_swig.MemoryExpressSpecification_swiginit(self, _pyvacon_swig.new_MemoryExpressSpecification(*args))

    def convertIntoRainbowSpecification(self, *args):
        r"""convertIntoRainbowSpecification(MemoryExpressSpecification self, std::shared_ptr< FixingTable > const & fixingTable=std::shared_ptr< FixingTable >()) -> std::shared_ptr< RainbowSpecification const >"""
        return _pyvacon_swig.MemoryExpressSpecification_convertIntoRainbowSpecification(self, *args)

    def convertIntoComboSpecification(self, *args):
        r"""convertIntoComboSpecification(MemoryExpressSpecification self, std::shared_ptr< FixingTable > const & fixingTable=std::shared_ptr< FixingTable >()) -> std::shared_ptr< ComboSpecification const >"""
        return _pyvacon_swig.MemoryExpressSpecification_convertIntoComboSpecification(self, *args)
    __swig_destroy__ = _pyvacon_swig.delete_MemoryExpressSpecification

# Register MemoryExpressSpecification in _pyvacon_swig:
_pyvacon_swig.MemoryExpressSpecification_swigregister(MemoryExpressSpecification)

class ExpressPlusSpecification(BaseSpecification, LocalVolMonteCarloSpecification):
    r"""Proxy of C++ ExpressPlusSpecification class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getClassName(self):
        r"""getClassName(ExpressPlusSpecification self) -> std::string"""
        return _pyvacon_swig.ExpressPlusSpecification_getClassName(self)

    def __init__(self, *args):
        r"""__init__(ExpressPlusSpecification self, std::string const & id, std::string const & issuer, std::string const & secLvl, std::string const & curr, vectorString basket, vectorDouble underlyingWeights, ptime expiry, bool fwdStart, ptime fwdStartDate, vectorVectorDouble couponPayoffX, vectorVectorDouble couponPayoffY, vectorDouble couponLevelLower, vectorDouble couponLevelUpper, vectorPTime couponStart, vectorPTime couponEnd, vectorPTime couponPay, vectorVectorPTime couponObsDates, vectorBool couponIn, vectorVectorDouble redemptionPayoffX, vectorVectorDouble redemptionPayoffY, vectorDouble redemptionLevelLower, vectorDouble redemptionLevelUpper, vectorPTime redemptionStart, vectorPTime redemptionEnd, vectorPTime redemptionPay, vectorVectorPTime redemptionObsDates, vectorBool redemptionIn, bool plus, vectorDouble plusPayoffX, vectorDouble plusPayoffY, double plusLevelLower, double plusLevelUpper, ptime plusStart, ptime plusEnd, ptime plusPay, vectorPTime plusObsDates, bool plusIn, bool memory, bool floatCpnRelative, std::string const basketType, std::string const & holidays="", int const exSettle=0, int const tradeSettle=0, std::map< std::string,std::string,std::less< std::string >,std::allocator< std::pair< std::string const,std::string > > > const & fields=std::map< std::string,std::string >()) -> ExpressPlusSpecification"""
        _pyvacon_swig.ExpressPlusSpecification_swiginit(self, _pyvacon_swig.new_ExpressPlusSpecification(*args))

    def convertIntoRainbowSpecification(self, *args):
        r"""convertIntoRainbowSpecification(ExpressPlusSpecification self, std::shared_ptr< FixingTable > const & fixingTable=std::shared_ptr< FixingTable >()) -> std::shared_ptr< RainbowSpecification const >"""
        return _pyvacon_swig.ExpressPlusSpecification_convertIntoRainbowSpecification(self, *args)
    __swig_destroy__ = _pyvacon_swig.delete_ExpressPlusSpecification

# Register ExpressPlusSpecification in _pyvacon_swig:
_pyvacon_swig.ExpressPlusSpecification_swigregister(ExpressPlusSpecification)

class AsianVanillaSpecification(BaseSpecification):
    r"""Proxy of C++ AsianVanillaSpecification class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getClassName(self):
        r"""getClassName(AsianVanillaSpecification self) -> std::string"""
        return _pyvacon_swig.AsianVanillaSpecification_getClassName(self)

    def __init__(self):
        r"""__init__(AsianVanillaSpecification self) -> AsianVanillaSpecification"""
        _pyvacon_swig.AsianVanillaSpecification_swiginit(self, _pyvacon_swig.new_AsianVanillaSpecification())
    __swig_destroy__ = _pyvacon_swig.delete_AsianVanillaSpecification

# Register AsianVanillaSpecification in _pyvacon_swig:
_pyvacon_swig.AsianVanillaSpecification_swigregister(AsianVanillaSpecification)

class RiskControlStrategy(Clonable):
    r"""Proxy of C++ RiskControlStrategy class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getClassName(self):
        r"""getClassName(RiskControlStrategy self) -> std::string"""
        return _pyvacon_swig.RiskControlStrategy_getClassName(self)

    def __init__(self, *args):
        r"""
        __init__(RiskControlStrategy self) -> RiskControlStrategy
        __init__(RiskControlStrategy self, double targetV, double volFactor, vectorInt nVolDays, double maxWeight, double updateThreshold, bool excessReturn) -> RiskControlStrategy
        """
        _pyvacon_swig.RiskControlStrategy_swiginit(self, _pyvacon_swig.new_RiskControlStrategy(*args))
    __swig_destroy__ = _pyvacon_swig.delete_RiskControlStrategy

# Register RiskControlStrategy in _pyvacon_swig:
_pyvacon_swig.RiskControlStrategy_swigregister(RiskControlStrategy)

class AsianRiskControlSpecification(AsianVanillaSpecification):
    r"""Proxy of C++ AsianRiskControlSpecification class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getClassName(self):
        r"""getClassName(AsianRiskControlSpecification self) -> std::string"""
        return _pyvacon_swig.AsianRiskControlSpecification_getClassName(self)

    def __init__(self, *args):
        r"""__init__(AsianRiskControlSpecification self, std::shared_ptr< RiskControlStrategy > strategy, std::string const & id, std::string const & issuer, std::string const & secLvlStr, std::string const & currStr, std::string const & udlId, std::string const & typeStr, ptime expiry, double strike, vectorPTime asianDates, std::string const & asianTypeStr="ARITHMETIC", double shareRatio=1.0, std::string const & holidays="", int const exSettle=0, int const tradeSettle=0) -> AsianRiskControlSpecification"""
        _pyvacon_swig.AsianRiskControlSpecification_swiginit(self, _pyvacon_swig.new_AsianRiskControlSpecification(*args))
    __swig_destroy__ = _pyvacon_swig.delete_AsianRiskControlSpecification

# Register AsianRiskControlSpecification in _pyvacon_swig:
_pyvacon_swig.AsianRiskControlSpecification_swigregister(AsianRiskControlSpecification)

class vectorConversion(object):
    r"""Proxy of C++ std::vector< ConvertibleBondSpecification::Conversion > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(vectorConversion self) -> SwigPyIterator"""
        return _pyvacon_swig.vectorConversion_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(vectorConversion self) -> bool"""
        return _pyvacon_swig.vectorConversion___nonzero__(self)

    def __bool__(self):
        r"""__bool__(vectorConversion self) -> bool"""
        return _pyvacon_swig.vectorConversion___bool__(self)

    def __len__(self):
        r"""__len__(vectorConversion self) -> std::vector< ConvertibleBondSpecification::Conversion >::size_type"""
        return _pyvacon_swig.vectorConversion___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(vectorConversion self, std::vector< ConvertibleBondSpecification::Conversion >::difference_type i, std::vector< ConvertibleBondSpecification::Conversion >::difference_type j) -> vectorConversion"""
        return _pyvacon_swig.vectorConversion___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(vectorConversion self, std::vector< ConvertibleBondSpecification::Conversion >::difference_type i, std::vector< ConvertibleBondSpecification::Conversion >::difference_type j)
        __setslice__(vectorConversion self, std::vector< ConvertibleBondSpecification::Conversion >::difference_type i, std::vector< ConvertibleBondSpecification::Conversion >::difference_type j, vectorConversion v)
        """
        return _pyvacon_swig.vectorConversion___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(vectorConversion self, std::vector< ConvertibleBondSpecification::Conversion >::difference_type i, std::vector< ConvertibleBondSpecification::Conversion >::difference_type j)"""
        return _pyvacon_swig.vectorConversion___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(vectorConversion self, std::vector< ConvertibleBondSpecification::Conversion >::difference_type i)
        __delitem__(vectorConversion self, PySliceObject * slice)
        """
        return _pyvacon_swig.vectorConversion___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(vectorConversion self, PySliceObject * slice) -> vectorConversion
        __getitem__(vectorConversion self, std::vector< ConvertibleBondSpecification::Conversion >::difference_type i) -> ConvertibleBondSpecification_Conversion
        """
        return _pyvacon_swig.vectorConversion___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(vectorConversion self, PySliceObject * slice, vectorConversion v)
        __setitem__(vectorConversion self, PySliceObject * slice)
        __setitem__(vectorConversion self, std::vector< ConvertibleBondSpecification::Conversion >::difference_type i, ConvertibleBondSpecification_Conversion x)
        """
        return _pyvacon_swig.vectorConversion___setitem__(self, *args)

    def pop(self):
        r"""pop(vectorConversion self) -> ConvertibleBondSpecification_Conversion"""
        return _pyvacon_swig.vectorConversion_pop(self)

    def append(self, x):
        r"""append(vectorConversion self, ConvertibleBondSpecification_Conversion x)"""
        return _pyvacon_swig.vectorConversion_append(self, x)

    def empty(self):
        r"""empty(vectorConversion self) -> bool"""
        return _pyvacon_swig.vectorConversion_empty(self)

    def size(self):
        r"""size(vectorConversion self) -> std::vector< ConvertibleBondSpecification::Conversion >::size_type"""
        return _pyvacon_swig.vectorConversion_size(self)

    def swap(self, v):
        r"""swap(vectorConversion self, vectorConversion v)"""
        return _pyvacon_swig.vectorConversion_swap(self, v)

    def begin(self):
        r"""begin(vectorConversion self) -> std::vector< ConvertibleBondSpecification::Conversion >::iterator"""
        return _pyvacon_swig.vectorConversion_begin(self)

    def end(self):
        r"""end(vectorConversion self) -> std::vector< ConvertibleBondSpecification::Conversion >::iterator"""
        return _pyvacon_swig.vectorConversion_end(self)

    def rbegin(self):
        r"""rbegin(vectorConversion self) -> std::vector< ConvertibleBondSpecification::Conversion >::reverse_iterator"""
        return _pyvacon_swig.vectorConversion_rbegin(self)

    def rend(self):
        r"""rend(vectorConversion self) -> std::vector< ConvertibleBondSpecification::Conversion >::reverse_iterator"""
        return _pyvacon_swig.vectorConversion_rend(self)

    def clear(self):
        r"""clear(vectorConversion self)"""
        return _pyvacon_swig.vectorConversion_clear(self)

    def get_allocator(self):
        r"""get_allocator(vectorConversion self) -> std::vector< ConvertibleBondSpecification::Conversion >::allocator_type"""
        return _pyvacon_swig.vectorConversion_get_allocator(self)

    def pop_back(self):
        r"""pop_back(vectorConversion self)"""
        return _pyvacon_swig.vectorConversion_pop_back(self)

    def erase(self, *args):
        r"""
        erase(vectorConversion self, std::vector< ConvertibleBondSpecification::Conversion >::iterator pos) -> std::vector< ConvertibleBondSpecification::Conversion >::iterator
        erase(vectorConversion self, std::vector< ConvertibleBondSpecification::Conversion >::iterator first, std::vector< ConvertibleBondSpecification::Conversion >::iterator last) -> std::vector< ConvertibleBondSpecification::Conversion >::iterator
        """
        return _pyvacon_swig.vectorConversion_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(vectorConversion self) -> vectorConversion
        __init__(vectorConversion self, vectorConversion other) -> vectorConversion
        __init__(vectorConversion self, std::vector< ConvertibleBondSpecification::Conversion >::size_type size) -> vectorConversion
        __init__(vectorConversion self, std::vector< ConvertibleBondSpecification::Conversion >::size_type size, ConvertibleBondSpecification_Conversion value) -> vectorConversion
        """
        _pyvacon_swig.vectorConversion_swiginit(self, _pyvacon_swig.new_vectorConversion(*args))

    def push_back(self, x):
        r"""push_back(vectorConversion self, ConvertibleBondSpecification_Conversion x)"""
        return _pyvacon_swig.vectorConversion_push_back(self, x)

    def front(self):
        r"""front(vectorConversion self) -> ConvertibleBondSpecification_Conversion"""
        return _pyvacon_swig.vectorConversion_front(self)

    def back(self):
        r"""back(vectorConversion self) -> ConvertibleBondSpecification_Conversion"""
        return _pyvacon_swig.vectorConversion_back(self)

    def assign(self, n, x):
        r"""assign(vectorConversion self, std::vector< ConvertibleBondSpecification::Conversion >::size_type n, ConvertibleBondSpecification_Conversion x)"""
        return _pyvacon_swig.vectorConversion_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(vectorConversion self, std::vector< ConvertibleBondSpecification::Conversion >::size_type new_size)
        resize(vectorConversion self, std::vector< ConvertibleBondSpecification::Conversion >::size_type new_size, ConvertibleBondSpecification_Conversion x)
        """
        return _pyvacon_swig.vectorConversion_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(vectorConversion self, std::vector< ConvertibleBondSpecification::Conversion >::iterator pos, ConvertibleBondSpecification_Conversion x) -> std::vector< ConvertibleBondSpecification::Conversion >::iterator
        insert(vectorConversion self, std::vector< ConvertibleBondSpecification::Conversion >::iterator pos, std::vector< ConvertibleBondSpecification::Conversion >::size_type n, ConvertibleBondSpecification_Conversion x)
        """
        return _pyvacon_swig.vectorConversion_insert(self, *args)

    def reserve(self, n):
        r"""reserve(vectorConversion self, std::vector< ConvertibleBondSpecification::Conversion >::size_type n)"""
        return _pyvacon_swig.vectorConversion_reserve(self, n)

    def capacity(self):
        r"""capacity(vectorConversion self) -> std::vector< ConvertibleBondSpecification::Conversion >::size_type"""
        return _pyvacon_swig.vectorConversion_capacity(self)
    __swig_destroy__ = _pyvacon_swig.delete_vectorConversion

# Register vectorConversion in _pyvacon_swig:
_pyvacon_swig.vectorConversion_swigregister(vectorConversion)

class vectorCallPut(object):
    r"""Proxy of C++ std::vector< ConvertibleBondSpecification::CallPut > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(vectorCallPut self) -> SwigPyIterator"""
        return _pyvacon_swig.vectorCallPut_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(vectorCallPut self) -> bool"""
        return _pyvacon_swig.vectorCallPut___nonzero__(self)

    def __bool__(self):
        r"""__bool__(vectorCallPut self) -> bool"""
        return _pyvacon_swig.vectorCallPut___bool__(self)

    def __len__(self):
        r"""__len__(vectorCallPut self) -> std::vector< ConvertibleBondSpecification::CallPut >::size_type"""
        return _pyvacon_swig.vectorCallPut___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(vectorCallPut self, std::vector< ConvertibleBondSpecification::CallPut >::difference_type i, std::vector< ConvertibleBondSpecification::CallPut >::difference_type j) -> vectorCallPut"""
        return _pyvacon_swig.vectorCallPut___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(vectorCallPut self, std::vector< ConvertibleBondSpecification::CallPut >::difference_type i, std::vector< ConvertibleBondSpecification::CallPut >::difference_type j)
        __setslice__(vectorCallPut self, std::vector< ConvertibleBondSpecification::CallPut >::difference_type i, std::vector< ConvertibleBondSpecification::CallPut >::difference_type j, vectorCallPut v)
        """
        return _pyvacon_swig.vectorCallPut___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(vectorCallPut self, std::vector< ConvertibleBondSpecification::CallPut >::difference_type i, std::vector< ConvertibleBondSpecification::CallPut >::difference_type j)"""
        return _pyvacon_swig.vectorCallPut___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(vectorCallPut self, std::vector< ConvertibleBondSpecification::CallPut >::difference_type i)
        __delitem__(vectorCallPut self, PySliceObject * slice)
        """
        return _pyvacon_swig.vectorCallPut___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(vectorCallPut self, PySliceObject * slice) -> vectorCallPut
        __getitem__(vectorCallPut self, std::vector< ConvertibleBondSpecification::CallPut >::difference_type i) -> ConvertibleBondSpecification_CallPut
        """
        return _pyvacon_swig.vectorCallPut___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(vectorCallPut self, PySliceObject * slice, vectorCallPut v)
        __setitem__(vectorCallPut self, PySliceObject * slice)
        __setitem__(vectorCallPut self, std::vector< ConvertibleBondSpecification::CallPut >::difference_type i, ConvertibleBondSpecification_CallPut x)
        """
        return _pyvacon_swig.vectorCallPut___setitem__(self, *args)

    def pop(self):
        r"""pop(vectorCallPut self) -> ConvertibleBondSpecification_CallPut"""
        return _pyvacon_swig.vectorCallPut_pop(self)

    def append(self, x):
        r"""append(vectorCallPut self, ConvertibleBondSpecification_CallPut x)"""
        return _pyvacon_swig.vectorCallPut_append(self, x)

    def empty(self):
        r"""empty(vectorCallPut self) -> bool"""
        return _pyvacon_swig.vectorCallPut_empty(self)

    def size(self):
        r"""size(vectorCallPut self) -> std::vector< ConvertibleBondSpecification::CallPut >::size_type"""
        return _pyvacon_swig.vectorCallPut_size(self)

    def swap(self, v):
        r"""swap(vectorCallPut self, vectorCallPut v)"""
        return _pyvacon_swig.vectorCallPut_swap(self, v)

    def begin(self):
        r"""begin(vectorCallPut self) -> std::vector< ConvertibleBondSpecification::CallPut >::iterator"""
        return _pyvacon_swig.vectorCallPut_begin(self)

    def end(self):
        r"""end(vectorCallPut self) -> std::vector< ConvertibleBondSpecification::CallPut >::iterator"""
        return _pyvacon_swig.vectorCallPut_end(self)

    def rbegin(self):
        r"""rbegin(vectorCallPut self) -> std::vector< ConvertibleBondSpecification::CallPut >::reverse_iterator"""
        return _pyvacon_swig.vectorCallPut_rbegin(self)

    def rend(self):
        r"""rend(vectorCallPut self) -> std::vector< ConvertibleBondSpecification::CallPut >::reverse_iterator"""
        return _pyvacon_swig.vectorCallPut_rend(self)

    def clear(self):
        r"""clear(vectorCallPut self)"""
        return _pyvacon_swig.vectorCallPut_clear(self)

    def get_allocator(self):
        r"""get_allocator(vectorCallPut self) -> std::vector< ConvertibleBondSpecification::CallPut >::allocator_type"""
        return _pyvacon_swig.vectorCallPut_get_allocator(self)

    def pop_back(self):
        r"""pop_back(vectorCallPut self)"""
        return _pyvacon_swig.vectorCallPut_pop_back(self)

    def erase(self, *args):
        r"""
        erase(vectorCallPut self, std::vector< ConvertibleBondSpecification::CallPut >::iterator pos) -> std::vector< ConvertibleBondSpecification::CallPut >::iterator
        erase(vectorCallPut self, std::vector< ConvertibleBondSpecification::CallPut >::iterator first, std::vector< ConvertibleBondSpecification::CallPut >::iterator last) -> std::vector< ConvertibleBondSpecification::CallPut >::iterator
        """
        return _pyvacon_swig.vectorCallPut_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(vectorCallPut self) -> vectorCallPut
        __init__(vectorCallPut self, vectorCallPut other) -> vectorCallPut
        __init__(vectorCallPut self, std::vector< ConvertibleBondSpecification::CallPut >::size_type size) -> vectorCallPut
        __init__(vectorCallPut self, std::vector< ConvertibleBondSpecification::CallPut >::size_type size, ConvertibleBondSpecification_CallPut value) -> vectorCallPut
        """
        _pyvacon_swig.vectorCallPut_swiginit(self, _pyvacon_swig.new_vectorCallPut(*args))

    def push_back(self, x):
        r"""push_back(vectorCallPut self, ConvertibleBondSpecification_CallPut x)"""
        return _pyvacon_swig.vectorCallPut_push_back(self, x)

    def front(self):
        r"""front(vectorCallPut self) -> ConvertibleBondSpecification_CallPut"""
        return _pyvacon_swig.vectorCallPut_front(self)

    def back(self):
        r"""back(vectorCallPut self) -> ConvertibleBondSpecification_CallPut"""
        return _pyvacon_swig.vectorCallPut_back(self)

    def assign(self, n, x):
        r"""assign(vectorCallPut self, std::vector< ConvertibleBondSpecification::CallPut >::size_type n, ConvertibleBondSpecification_CallPut x)"""
        return _pyvacon_swig.vectorCallPut_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(vectorCallPut self, std::vector< ConvertibleBondSpecification::CallPut >::size_type new_size)
        resize(vectorCallPut self, std::vector< ConvertibleBondSpecification::CallPut >::size_type new_size, ConvertibleBondSpecification_CallPut x)
        """
        return _pyvacon_swig.vectorCallPut_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(vectorCallPut self, std::vector< ConvertibleBondSpecification::CallPut >::iterator pos, ConvertibleBondSpecification_CallPut x) -> std::vector< ConvertibleBondSpecification::CallPut >::iterator
        insert(vectorCallPut self, std::vector< ConvertibleBondSpecification::CallPut >::iterator pos, std::vector< ConvertibleBondSpecification::CallPut >::size_type n, ConvertibleBondSpecification_CallPut x)
        """
        return _pyvacon_swig.vectorCallPut_insert(self, *args)

    def reserve(self, n):
        r"""reserve(vectorCallPut self, std::vector< ConvertibleBondSpecification::CallPut >::size_type n)"""
        return _pyvacon_swig.vectorCallPut_reserve(self, n)

    def capacity(self):
        r"""capacity(vectorCallPut self) -> std::vector< ConvertibleBondSpecification::CallPut >::size_type"""
        return _pyvacon_swig.vectorCallPut_capacity(self)
    __swig_destroy__ = _pyvacon_swig.delete_vectorCallPut

# Register vectorCallPut in _pyvacon_swig:
_pyvacon_swig.vectorCallPut_swigregister(vectorCallPut)

class ConvertibleBondSpecification(BaseSpecification):
    r"""Proxy of C++ ConvertibleBondSpecification class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, id, udlId, bondSpecification, conversions, callsPuts):
        r"""__init__(ConvertibleBondSpecification self, std::string const & id, std::string const & udlId, std::shared_ptr< BondSpecification const > bondSpecification, vectorConversion conversions, vectorCallPut callsPuts) -> ConvertibleBondSpecification"""
        _pyvacon_swig.ConvertibleBondSpecification_swiginit(self, _pyvacon_swig.new_ConvertibleBondSpecification(id, udlId, bondSpecification, conversions, callsPuts))

    def convertToBarrierSpecification(self, fwdCurve=0, fixedRate=0.):
        r"""convertToBarrierSpecification(ConvertibleBondSpecification self, std::shared_ptr< DiscountCurve const > fwdCurve=0, double fixedRate=0.) -> std::shared_ptr< BarrierSpecification const >"""
        return _pyvacon_swig.ConvertibleBondSpecification_convertToBarrierSpecification(self, fwdCurve, fixedRate)
    __swig_destroy__ = _pyvacon_swig.delete_ConvertibleBondSpecification

# Register ConvertibleBondSpecification in _pyvacon_swig:
_pyvacon_swig.ConvertibleBondSpecification_swigregister(ConvertibleBondSpecification)

class ConvertibleBondSpecification_Conversion(object):
    r"""Proxy of C++ ConvertibleBondSpecification::Conversion class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, reverse, ratio, start, end):
        r"""__init__(ConvertibleBondSpecification_Conversion self, bool reverse, double ratio, ptime start, ptime end) -> ConvertibleBondSpecification_Conversion"""
        _pyvacon_swig.ConvertibleBondSpecification_Conversion_swiginit(self, _pyvacon_swig.new_ConvertibleBondSpecification_Conversion(reverse, ratio, start, end))
    __swig_destroy__ = _pyvacon_swig.delete_ConvertibleBondSpecification_Conversion

# Register ConvertibleBondSpecification_Conversion in _pyvacon_swig:
_pyvacon_swig.ConvertibleBondSpecification_Conversion_swigregister(ConvertibleBondSpecification_Conversion)

class ConvertibleBondSpecification_CallPut(object):
    r"""Proxy of C++ ConvertibleBondSpecification::CallPut class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, call, strike, start, end):
        r"""__init__(ConvertibleBondSpecification_CallPut self, bool call, double strike, ptime start, ptime end) -> ConvertibleBondSpecification_CallPut"""
        _pyvacon_swig.ConvertibleBondSpecification_CallPut_swiginit(self, _pyvacon_swig.new_ConvertibleBondSpecification_CallPut(call, strike, start, end))
    __swig_destroy__ = _pyvacon_swig.delete_ConvertibleBondSpecification_CallPut

# Register ConvertibleBondSpecification_CallPut in _pyvacon_swig:
_pyvacon_swig.ConvertibleBondSpecification_CallPut_swigregister(ConvertibleBondSpecification_CallPut)

class MarketDataManager(object):
    r"""Proxy of C++ MarketDataManager class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, mkt, env, spot, calcDate, useDefaultDiscounting=True):
        r"""__init__(MarketDataManager self, std::shared_ptr< BaseInterface > mkt, std::shared_ptr< BaseInterface > env, std::shared_ptr< SpotInterface > spot, ptime calcDate, bool useDefaultDiscounting=True) -> MarketDataManager"""
        _pyvacon_swig.MarketDataManager_swiginit(self, _pyvacon_swig.new_MarketDataManager(mkt, env, spot, calcDate, useDefaultDiscounting))

    def setCalcDate(self, calcDate):
        r"""setCalcDate(MarketDataManager self, ptime calcDate)"""
        return _pyvacon_swig.MarketDataManager_setCalcDate(self, calcDate)

    def clearMarketDataCache(self):
        r"""clearMarketDataCache(MarketDataManager self)"""
        return _pyvacon_swig.MarketDataManager_clearMarketDataCache(self)

    def getMarketDataInterface(self):
        r"""getMarketDataInterface(MarketDataManager self) -> std::shared_ptr< BaseInterface const >"""
        return _pyvacon_swig.MarketDataManager_getMarketDataInterface(self)

    def getEnvironmentInterface(self):
        r"""getEnvironmentInterface(MarketDataManager self) -> std::shared_ptr< BaseInterface const >"""
        return _pyvacon_swig.MarketDataManager_getEnvironmentInterface(self)

    def getEquityUnderlying(self, udl):
        r"""getEquityUnderlying(MarketDataManager self, std::string const & udl) -> std::shared_ptr< EquityUnderlying const > const"""
        return _pyvacon_swig.MarketDataManager_getEquityUnderlying(self, udl)

    def getIrUnderlying(self, udl):
        r"""getIrUnderlying(MarketDataManager self, std::string const & udl) -> std::shared_ptr< IrUnderlying const > const"""
        return _pyvacon_swig.MarketDataManager_getIrUnderlying(self, udl)

    def getForwardCurve(self, udlKey, spot=-1.0):
        r"""getForwardCurve(MarketDataManager self, std::string const & udlKey, double spot=-1.0) -> std::shared_ptr< ForwardCurve const > const"""
        return _pyvacon_swig.MarketDataManager_getForwardCurve(self, udlKey, spot)

    def getVolatilitySurface(self, udlKey):
        r"""getVolatilitySurface(MarketDataManager self, std::string const & udlKey) -> std::shared_ptr< VolatilitySurface const > const"""
        return _pyvacon_swig.MarketDataManager_getVolatilitySurface(self, udlKey)

    def getSpot(self, udlKey):
        r"""getSpot(MarketDataManager self, std::string const & udlKey) -> double"""
        return _pyvacon_swig.MarketDataManager_getSpot(self, udlKey)

    def getDefaultDiscountCurve(self, currency):
        r"""getDefaultDiscountCurve(MarketDataManager self, std::string const & currency) -> std::shared_ptr< DiscountCurve const >"""
        return _pyvacon_swig.MarketDataManager_getDefaultDiscountCurve(self, currency)

    def getIssuerToCreditMapping(self):
        r"""getIssuerToCreditMapping(MarketDataManager self) -> std::shared_ptr< IssuerToCreditMapping const >"""
        return _pyvacon_swig.MarketDataManager_getIssuerToCreditMapping(self)

    def getIssuer(self, id):
        r"""getIssuer(MarketDataManager self, std::string const & id) -> std::shared_ptr< Issuer const >"""
        return _pyvacon_swig.MarketDataManager_getIssuer(self, id)

    def getSurvivalCurve(self, issuer):
        r"""getSurvivalCurve(MarketDataManager self, std::string const & issuer) -> std::shared_ptr< SurvivalCurve const >"""
        return _pyvacon_swig.MarketDataManager_getSurvivalCurve(self, issuer)

    def getVolatilityObject(self, volKey):
        r"""getVolatilityObject(MarketDataManager self, std::string const & volKey) -> std::shared_ptr< VolatilitySurface const > const"""
        return _pyvacon_swig.MarketDataManager_getVolatilityObject(self, volKey)

    def getFxUnderlying(self, *args):
        r"""
        getFxUnderlying(MarketDataManager self, Currency base, Currency quote) -> std::shared_ptr< FxUnderlying const > const
        getFxUnderlying(MarketDataManager self, std::string const & udlId) -> std::shared_ptr< FxUnderlying const >
        """
        return _pyvacon_swig.MarketDataManager_getFxUnderlying(self, *args)

    def getUnderlyingType(self, udlId):
        r"""getUnderlyingType(MarketDataManager self, std::string const & udlId) -> std::string"""
        return _pyvacon_swig.MarketDataManager_getUnderlyingType(self, udlId)

    def getDefaultIrUnderlying(self, currency):
        r"""getDefaultIrUnderlying(MarketDataManager self, std::string const & currency) -> std::shared_ptr< IrUnderlying const > const"""
        return _pyvacon_swig.MarketDataManager_getDefaultIrUnderlying(self, currency)

    def getDividendTable(self, key):
        r"""getDividendTable(MarketDataManager self, std::string const & key) -> std::shared_ptr< DividendTable const >"""
        return _pyvacon_swig.MarketDataManager_getDividendTable(self, key)

    def getDiscountCurve(self, *args):
        r"""
        getDiscountCurve(MarketDataManager self, std::string const & key) -> std::shared_ptr< DiscountCurve const >
        getDiscountCurve(MarketDataManager self, std::string const & issuer, std::string const & cur, std::string const & secLvl) -> std::shared_ptr< DiscountCurve const > const
        """
        return _pyvacon_swig.MarketDataManager_getDiscountCurve(self, *args)

    def getEquityOptionQuoteTable(self, quoteTableId):
        r"""getEquityOptionQuoteTable(MarketDataManager self, std::string const & quoteTableId) -> std::shared_ptr< EquityOptionQuoteTable const > const"""
        return _pyvacon_swig.MarketDataManager_getEquityOptionQuoteTable(self, quoteTableId)

    def getFxForwardQuoteTable(self, quoteTableId):
        r"""getFxForwardQuoteTable(MarketDataManager self, std::string const & quoteTableId) -> std::shared_ptr< FxForwardQuoteTable const > const"""
        return _pyvacon_swig.MarketDataManager_getFxForwardQuoteTable(self, quoteTableId)

    def getFxOptionQuoteTable(self, quoteTableId):
        r"""getFxOptionQuoteTable(MarketDataManager self, std::string const & quoteTableId) -> std::shared_ptr< FxOptionQuoteTable const > const"""
        return _pyvacon_swig.MarketDataManager_getFxOptionQuoteTable(self, quoteTableId)

    def getCurrency(self, udlId):
        r"""getCurrency(MarketDataManager self, std::string const & udlId) -> std::string"""
        return _pyvacon_swig.MarketDataManager_getCurrency(self, udlId)

    def getRecovery(self, issuer, currency, secLvl):
        r"""getRecovery(MarketDataManager self, std::string const & issuer, std::string const & currency, std::string const & secLvl) -> std::shared_ptr< BaseDatedCurve const >"""
        return _pyvacon_swig.MarketDataManager_getRecovery(self, issuer, currency, secLvl)
    __swig_destroy__ = _pyvacon_swig.delete_MarketDataManager

# Register MarketDataManager in _pyvacon_swig:
_pyvacon_swig.MarketDataManager_swigregister(MarketDataManager)

class ParameterManager(object):
    r"""Proxy of C++ ParameterManager class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(ParameterManager self, std::shared_ptr< BaseInterface > paramInterface=0, std::shared_ptr< BaseInterface > envInterface=std::shared_ptr< BaseInterface >(), double scenarioFactor=1.0) -> ParameterManager"""
        _pyvacon_swig.ParameterManager_swiginit(self, _pyvacon_swig.new_ParameterManager(*args))

    def getParameterInterface(self):
        r"""getParameterInterface(ParameterManager self) -> std::shared_ptr< BaseInterface >"""
        return _pyvacon_swig.ParameterManager_getParameterInterface(self)

    def getCalibrationParameter(self, id):
        r"""getCalibrationParameter(ParameterManager self, std::string id) -> std::shared_ptr< BaseParameter const >"""
        return _pyvacon_swig.ParameterManager_getCalibrationParameter(self, id)

    def getPricingParameter(self, id):
        r"""getPricingParameter(ParameterManager self, std::string id) -> std::shared_ptr< BaseParameter const >"""
        return _pyvacon_swig.ParameterManager_getPricingParameter(self, id)
    __swig_destroy__ = _pyvacon_swig.delete_ParameterManager

# Register ParameterManager in _pyvacon_swig:
_pyvacon_swig.ParameterManager_swigregister(ParameterManager)

class SpecificationManager(object):
    r"""Proxy of C++ SpecificationManager class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, specInterface):
        r"""__init__(SpecificationManager self, std::shared_ptr< BaseInterface > specInterface) -> SpecificationManager"""
        _pyvacon_swig.SpecificationManager_swiginit(self, _pyvacon_swig.new_SpecificationManager(specInterface))

    def addSpecification(self, spec):
        r"""addSpecification(SpecificationManager self, std::shared_ptr< BaseSpecification const > spec)"""
        return _pyvacon_swig.SpecificationManager_addSpecification(self, spec)

    def prepareObjects(self, ids, calcDate):
        r"""prepareObjects(SpecificationManager self, vectorString ids, ptime calcDate)"""
        return _pyvacon_swig.SpecificationManager_prepareObjects(self, ids, calcDate)

    def prepareAllObjects(self, ids, earliestCalcDate, latestCalcDate):
        r"""prepareAllObjects(SpecificationManager self, vectorString ids, ptime earliestCalcDate, ptime latestCalcDate)"""
        return _pyvacon_swig.SpecificationManager_prepareAllObjects(self, ids, earliestCalcDate, latestCalcDate)

    def getSpecification(self, specKey, calcDate):
        r"""getSpecification(SpecificationManager self, std::string specKey, ptime calcDate) -> std::shared_ptr< BaseSpecification const >"""
        return _pyvacon_swig.SpecificationManager_getSpecification(self, specKey, calcDate)

    def getSpecifications(self, specs, wknRegEx, udlRegEx, typeRegEx, issuerRegEx):
        r"""getSpecifications(SpecificationManager self, vectorBaseSpecification specs, std::string const & wknRegEx, std::string const & udlRegEx, std::string const & typeRegEx, std::string const & issuerRegEx)"""
        return _pyvacon_swig.SpecificationManager_getSpecifications(self, specs, wknRegEx, udlRegEx, typeRegEx, issuerRegEx)
    __swig_destroy__ = _pyvacon_swig.delete_SpecificationManager

# Register SpecificationManager in _pyvacon_swig:
_pyvacon_swig.SpecificationManager_swigregister(SpecificationManager)

class CashflowSlices(object):
    r"""Proxy of C++ CashflowSlices class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    cashflowSlices = property(_pyvacon_swig.CashflowSlices_cashflowSlices_get, _pyvacon_swig.CashflowSlices_cashflowSlices_set, doc=r"""cashflowSlices : std::vector<(std::vector<(double,std::allocator<(double)>)>,std::allocator<(std::vector<(double,std::allocator<(double)>)>)>)>""")

    def getFutureExposure(self):
        r"""getFutureExposure(CashflowSlices self) -> vectorVectorDouble"""
        return _pyvacon_swig.CashflowSlices_getFutureExposure(self)

    def __init__(self):
        r"""__init__(CashflowSlices self) -> CashflowSlices"""
        _pyvacon_swig.CashflowSlices_swiginit(self, _pyvacon_swig.new_CashflowSlices())
    __swig_destroy__ = _pyvacon_swig.delete_CashflowSlices

# Register CashflowSlices in _pyvacon_swig:
_pyvacon_swig.CashflowSlices_swigregister(CashflowSlices)

class PricingResults(BaseObject):
    r"""Proxy of C++ PricingResults class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PricingResults self) -> PricingResults"""
        _pyvacon_swig.PricingResults_swiginit(self, _pyvacon_swig.new_PricingResults())

    def getClassName(self):
        r"""getClassName(PricingResults self) -> std::string"""
        return _pyvacon_swig.PricingResults_getClassName(self)

    def getPrice(self):
        r"""getPrice(PricingResults self) -> double"""
        return _pyvacon_swig.PricingResults_getPrice(self)

    def getPriceStdError(self):
        r"""getPriceStdError(PricingResults self) -> double"""
        return _pyvacon_swig.PricingResults_getPriceStdError(self)

    def getMacaulayDuration(self):
        r"""getMacaulayDuration(PricingResults self) -> double"""
        return _pyvacon_swig.PricingResults_getMacaulayDuration(self)

    def getRho(self, yc):
        r"""getRho(PricingResults self, std::string const & yc) -> double"""
        return _pyvacon_swig.PricingResults_getRho(self, yc)

    def getCleanPrice(self):
        r"""getCleanPrice(PricingResults self) -> double"""
        return _pyvacon_swig.PricingResults_getCleanPrice(self)

    def getForward(self, key):
        r"""getForward(PricingResults self, std::string const & key) -> double"""
        return _pyvacon_swig.PricingResults_getForward(self, key)

    def getTheta(self):
        r"""getTheta(PricingResults self) -> double"""
        return _pyvacon_swig.PricingResults_getTheta(self)

    def getYTM(self):
        r"""getYTM(PricingResults self) -> double"""
        return _pyvacon_swig.PricingResults_getYTM(self)

    def getConvexity(self):
        r"""getConvexity(PricingResults self) -> double"""
        return _pyvacon_swig.PricingResults_getConvexity(self)

    def getInsId(self):
        r"""getInsId(PricingResults self) -> std::string const &"""
        return _pyvacon_swig.PricingResults_getInsId(self)

    def getCashflowSlices(self):
        r"""getCashflowSlices(PricingResults self) -> std::shared_ptr< CashflowSlices const >"""
        return _pyvacon_swig.PricingResults_getCashflowSlices(self)

    def getCurrency(self):
        r"""getCurrency(PricingResults self) -> std::string"""
        return _pyvacon_swig.PricingResults_getCurrency(self)

    def getDelta1D(self):
        r"""getDelta1D(PricingResults self) -> double"""
        return _pyvacon_swig.PricingResults_getDelta1D(self)

    def getGamma1D(self):
        r"""getGamma1D(PricingResults self) -> double"""
        return _pyvacon_swig.PricingResults_getGamma1D(self)

    def getVega1D(self):
        r"""getVega1D(PricingResults self) -> double"""
        return _pyvacon_swig.PricingResults_getVega1D(self)

    def getVanna1D(self):
        r"""getVanna1D(PricingResults self) -> double"""
        return _pyvacon_swig.PricingResults_getVanna1D(self)

    def getDeltas(self):
        r"""getDeltas(PricingResults self) -> mapStringDouble"""
        return _pyvacon_swig.PricingResults_getDeltas(self)

    def getVegas(self):
        r"""getVegas(PricingResults self) -> mapStringDouble"""
        return _pyvacon_swig.PricingResults_getVegas(self)

    def getSplineX(self, x):
        r"""getSplineX(PricingResults self, vectorDouble x)"""
        return _pyvacon_swig.PricingResults_getSplineX(self, x)

    def getSplineY(self, y):
        r"""getSplineY(PricingResults self, vectorDouble y)"""
        return _pyvacon_swig.PricingResults_getSplineY(self, y)

    def getSpot(self, *args):
        r"""getSpot(PricingResults self, std::string const & key="") -> double"""
        return _pyvacon_swig.PricingResults_getSpot(self, *args)

    @staticmethod
    def load(filename):
        r"""load(std::string filename) -> std::shared_ptr< PricingResults >"""
        return _pyvacon_swig.PricingResults_load(filename)

    @staticmethod
    def save(filename, data):
        r"""save(std::string filename, std::shared_ptr< PricingResults > const & data)"""
        return _pyvacon_swig.PricingResults_save(filename, data)
    __swig_destroy__ = _pyvacon_swig.delete_PricingResults

# Register PricingResults in _pyvacon_swig:
_pyvacon_swig.PricingResults_swigregister(PricingResults)

def PricingResults_load(filename):
    r"""PricingResults_load(std::string filename) -> std::shared_ptr< PricingResults >"""
    return _pyvacon_swig.PricingResults_load(filename)

def PricingResults_save(filename, data):
    r"""PricingResults_save(std::string filename, std::shared_ptr< PricingResults > const & data)"""
    return _pyvacon_swig.PricingResults_save(filename, data)

class PricingRequest(BaseObject):
    r"""Proxy of C++ PricingRequest class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PricingRequest self) -> PricingRequest"""
        _pyvacon_swig.PricingRequest_swiginit(self, _pyvacon_swig.new_PricingRequest())

    def getClassName(self):
        r"""getClassName(PricingRequest self) -> std::string"""
        return _pyvacon_swig.PricingRequest_getClassName(self)

    def setGridSizes(self, gridsizes):
        r"""setGridSizes(PricingRequest self, bool gridsizes)"""
        return _pyvacon_swig.PricingRequest_setGridSizes(self, gridsizes)

    def setDeltaGamma(self, delta):
        r"""setDeltaGamma(PricingRequest self, bool delta)"""
        return _pyvacon_swig.PricingRequest_setDeltaGamma(self, delta)

    def setTheta(self, theta):
        r"""setTheta(PricingRequest self, bool theta)"""
        return _pyvacon_swig.PricingRequest_setTheta(self, theta)

    def setVega(self, vega):
        r"""setVega(PricingRequest self, bool vega)"""
        return _pyvacon_swig.PricingRequest_setVega(self, vega)

    def setVanna(self, vanna):
        r"""setVanna(PricingRequest self, bool vanna)"""
        return _pyvacon_swig.PricingRequest_setVanna(self, vanna)

    def setMacaulayDuration(self, macaulay):
        r"""setMacaulayDuration(PricingRequest self, bool macaulay)"""
        return _pyvacon_swig.PricingRequest_setMacaulayDuration(self, macaulay)

    def setZSpread(self, zSpread):
        r"""setZSpread(PricingRequest self, bool zSpread)"""
        return _pyvacon_swig.PricingRequest_setZSpread(self, zSpread)

    def setYTM(self, ytm):
        r"""setYTM(PricingRequest self, bool ytm)"""
        return _pyvacon_swig.PricingRequest_setYTM(self, ytm)

    def setConvexity(self, convexity):
        r"""setConvexity(PricingRequest self, bool convexity)"""
        return _pyvacon_swig.PricingRequest_setConvexity(self, convexity)

    def setRho(self, rho):
        r"""setRho(PricingRequest self, bool rho)"""
        return _pyvacon_swig.PricingRequest_setRho(self, rho)

    def setCleanPrice(self, clean):
        r"""setCleanPrice(PricingRequest self, bool clean)"""
        return _pyvacon_swig.PricingRequest_setCleanPrice(self, clean)

    def setVegaScale(self, vegaScale):
        r"""setVegaScale(PricingRequest self, double vegaScale)"""
        return _pyvacon_swig.PricingRequest_setVegaScale(self, vegaScale)

    def setRhoScale(self, rhoScale):
        r"""setRhoScale(PricingRequest self, double rhoScale)"""
        return _pyvacon_swig.PricingRequest_setRhoScale(self, rhoScale)

    def setThetaScale(self, thetaScale):
        r"""setThetaScale(PricingRequest self, double thetaScale)"""
        return _pyvacon_swig.PricingRequest_setThetaScale(self, thetaScale)

    def setSpline(self, spline):
        r"""setSpline(PricingRequest self, bool spline)"""
        return _pyvacon_swig.PricingRequest_setSpline(self, spline)

    def setCashflowTimes(self, cashflowTimes):
        r"""setCashflowTimes(PricingRequest self, vectorPTime cashflowTimes)"""
        return _pyvacon_swig.PricingRequest_setCashflowTimes(self, cashflowTimes)

    def setPricingData(self, pData):
        r"""setPricingData(PricingRequest self, bool pData)"""
        return _pyvacon_swig.PricingRequest_setPricingData(self, pData)

    def setAdditionalInformation(self, additionalInformation):
        r"""setAdditionalInformation(PricingRequest self, bool additionalInformation)"""
        return _pyvacon_swig.PricingRequest_setAdditionalInformation(self, additionalInformation)
    __swig_destroy__ = _pyvacon_swig.delete_PricingRequest

# Register PricingRequest in _pyvacon_swig:
_pyvacon_swig.PricingRequest_swigregister(PricingRequest)

class PricingParameter(BaseParameter):
    r"""Proxy of C++ PricingParameter class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(PricingParameter self) -> PricingParameter
        __init__(PricingParameter self, std::string const & id) -> PricingParameter
        """
        _pyvacon_swig.PricingParameter_swiginit(self, _pyvacon_swig.new_PricingParameter(*args))
    spotShift = property(_pyvacon_swig.PricingParameter_spotShift_get, _pyvacon_swig.PricingParameter_spotShift_set, doc=r"""spotShift : double""")
    volShift = property(_pyvacon_swig.PricingParameter_volShift_get, _pyvacon_swig.PricingParameter_volShift_set, doc=r"""volShift : double""")
    numDaysTimeShift = property(_pyvacon_swig.PricingParameter_numDaysTimeShift_get, _pyvacon_swig.PricingParameter_numDaysTimeShift_set, doc=r"""numDaysTimeShift : size_t""")
    rateShift = property(_pyvacon_swig.PricingParameter_rateShift_get, _pyvacon_swig.PricingParameter_rateShift_set, doc=r"""rateShift : double""")
    spotMinSpline = property(_pyvacon_swig.PricingParameter_spotMinSpline_get, _pyvacon_swig.PricingParameter_spotMinSpline_set, doc=r"""spotMinSpline : double""")
    spotMaxSpline = property(_pyvacon_swig.PricingParameter_spotMaxSpline_get, _pyvacon_swig.PricingParameter_spotMaxSpline_set, doc=r"""spotMaxSpline : double""")
    nSplinePoints = property(_pyvacon_swig.PricingParameter_nSplinePoints_get, _pyvacon_swig.PricingParameter_nSplinePoints_set, doc=r"""nSplinePoints : size_t""")

    def getClassName(self):
        r"""getClassName(PricingParameter self) -> std::string"""
        return _pyvacon_swig.PricingParameter_getClassName(self)
    __swig_destroy__ = _pyvacon_swig.delete_PricingParameter

# Register PricingParameter in _pyvacon_swig:
_pyvacon_swig.PricingParameter_swigregister(PricingParameter)

class BondPricingParameter(BaseParameter):
    r"""Proxy of C++ BondPricingParameter class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(BondPricingParameter self) -> BondPricingParameter
        __init__(BondPricingParameter self, std::string const & id) -> BondPricingParameter
        """
        _pyvacon_swig.BondPricingParameter_swiginit(self, _pyvacon_swig.new_BondPricingParameter(*args))
    useJLT = property(_pyvacon_swig.BondPricingParameter_useJLT_get, _pyvacon_swig.BondPricingParameter_useJLT_set, doc=r"""useJLT : bool""")

    def getClassName(self):
        r"""getClassName(BondPricingParameter self) -> std::string"""
        return _pyvacon_swig.BondPricingParameter_getClassName(self)
    __swig_destroy__ = _pyvacon_swig.delete_BondPricingParameter

# Register BondPricingParameter in _pyvacon_swig:
_pyvacon_swig.BondPricingParameter_swigregister(BondPricingParameter)

class CallableBondPdePricingParameter(BaseParameter):
    r"""Proxy of C++ CallableBondPdePricingParameter class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CallableBondPdePricingParameter self) -> CallableBondPdePricingParameter
        __init__(CallableBondPdePricingParameter self, std::string const & id) -> CallableBondPdePricingParameter
        """
        _pyvacon_swig.CallableBondPdePricingParameter_swiginit(self, _pyvacon_swig.new_CallableBondPdePricingParameter(*args))
    nTimeStepsPerYear = property(_pyvacon_swig.CallableBondPdePricingParameter_nTimeStepsPerYear_get, _pyvacon_swig.CallableBondPdePricingParameter_nTimeStepsPerYear_set, doc=r"""nTimeStepsPerYear : size_t""")
    nSpotSteps = property(_pyvacon_swig.CallableBondPdePricingParameter_nSpotSteps_get, _pyvacon_swig.CallableBondPdePricingParameter_nSpotSteps_set, doc=r"""nSpotSteps : size_t""")
    model = property(_pyvacon_swig.CallableBondPdePricingParameter_model_get, _pyvacon_swig.CallableBondPdePricingParameter_model_set, doc=r"""model : std::string""")
    includeTransition = property(_pyvacon_swig.CallableBondPdePricingParameter_includeTransition_get, _pyvacon_swig.CallableBondPdePricingParameter_includeTransition_set, doc=r"""includeTransition : bool""")

    def getClassName(self):
        r"""getClassName(CallableBondPdePricingParameter self) -> std::string"""
        return _pyvacon_swig.CallableBondPdePricingParameter_getClassName(self)
    __swig_destroy__ = _pyvacon_swig.delete_CallableBondPdePricingParameter

# Register CallableBondPdePricingParameter in _pyvacon_swig:
_pyvacon_swig.CallableBondPdePricingParameter_swigregister(CallableBondPdePricingParameter)

class PdePricingParameter(PricingParameter):
    r"""Proxy of C++ PdePricingParameter class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(PdePricingParameter self) -> PdePricingParameter
        __init__(PdePricingParameter self, std::string const & id) -> PdePricingParameter
        """
        _pyvacon_swig.PdePricingParameter_swiginit(self, _pyvacon_swig.new_PdePricingParameter(*args))
    nTimeStepsPerYear = property(_pyvacon_swig.PdePricingParameter_nTimeStepsPerYear_get, _pyvacon_swig.PdePricingParameter_nTimeStepsPerYear_set, doc=r"""nTimeStepsPerYear : size_t""")
    nStdDev = property(_pyvacon_swig.PdePricingParameter_nStdDev_get, _pyvacon_swig.PdePricingParameter_nStdDev_set, doc=r"""nStdDev : double""")
    nStdDevLimit = property(_pyvacon_swig.PdePricingParameter_nStdDevLimit_get, _pyvacon_swig.PdePricingParameter_nStdDevLimit_set, doc=r"""nStdDevLimit : double""")
    nSpotSteps = property(_pyvacon_swig.PdePricingParameter_nSpotSteps_get, _pyvacon_swig.PdePricingParameter_nSpotSteps_set, doc=r"""nSpotSteps : size_t""")
    nEulerStepsAfterSingularity = property(_pyvacon_swig.PdePricingParameter_nEulerStepsAfterSingularity_get, _pyvacon_swig.PdePricingParameter_nEulerStepsAfterSingularity_set, doc=r"""nEulerStepsAfterSingularity : size_t""")
    minEulerDomainAfterSingularity = property(_pyvacon_swig.PdePricingParameter_minEulerDomainAfterSingularity_get, _pyvacon_swig.PdePricingParameter_minEulerDomainAfterSingularity_set, doc=r"""minEulerDomainAfterSingularity : double""")
    exceptionBarrierNotInGrid = property(_pyvacon_swig.PdePricingParameter_exceptionBarrierNotInGrid_get, _pyvacon_swig.PdePricingParameter_exceptionBarrierNotInGrid_set, doc=r"""exceptionBarrierNotInGrid : bool""")
    splineLambda = property(_pyvacon_swig.PdePricingParameter_splineLambda_get, _pyvacon_swig.PdePricingParameter_splineLambda_set, doc=r"""splineLambda : double""")

    def getClassName(self):
        r"""getClassName(PdePricingParameter self) -> std::string"""
        return _pyvacon_swig.PdePricingParameter_getClassName(self)
    __swig_destroy__ = _pyvacon_swig.delete_PdePricingParameter

# Register PdePricingParameter in _pyvacon_swig:
_pyvacon_swig.PdePricingParameter_swigregister(PdePricingParameter)

class MonteCarloPricingParameter(PricingParameter):
    r"""Proxy of C++ MonteCarloPricingParameter class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(MonteCarloPricingParameter self) -> MonteCarloPricingParameter
        __init__(MonteCarloPricingParameter self, std::string const & id) -> MonteCarloPricingParameter
        """
        _pyvacon_swig.MonteCarloPricingParameter_swiginit(self, _pyvacon_swig.new_MonteCarloPricingParameter(*args))

    def getClassName(self):
        r"""getClassName(MonteCarloPricingParameter self) -> std::string"""
        return _pyvacon_swig.MonteCarloPricingParameter_getClassName(self)
    mcParam = property(_pyvacon_swig.MonteCarloPricingParameter_mcParam_get, _pyvacon_swig.MonteCarloPricingParameter_mcParam_set, doc=r"""mcParam : PathGeneration::PathGeneratorParameter""")
    __swig_destroy__ = _pyvacon_swig.delete_MonteCarloPricingParameter

# Register MonteCarloPricingParameter in _pyvacon_swig:
_pyvacon_swig.MonteCarloPricingParameter_swigregister(MonteCarloPricingParameter)

class InterestRateSwapPricingParameter(PricingParameter):
    r"""Proxy of C++ InterestRateSwapPricingParameter class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(InterestRateSwapPricingParameter self) -> InterestRateSwapPricingParameter
        __init__(InterestRateSwapPricingParameter self, std::string const & id) -> InterestRateSwapPricingParameter
        """
        _pyvacon_swig.InterestRateSwapPricingParameter_swiginit(self, _pyvacon_swig.new_InterestRateSwapPricingParameter(*args))

    def getClassName(self):
        r"""getClassName(InterestRateSwapPricingParameter self) -> std::string"""
        return _pyvacon_swig.InterestRateSwapPricingParameter_getClassName(self)
    fixingGracePeriod = property(_pyvacon_swig.InterestRateSwapPricingParameter_fixingGracePeriod_get, _pyvacon_swig.InterestRateSwapPricingParameter_fixingGracePeriod_set, doc=r"""fixingGracePeriod : time_duration""")
    __swig_destroy__ = _pyvacon_swig.delete_InterestRateSwapPricingParameter

# Register InterestRateSwapPricingParameter in _pyvacon_swig:
_pyvacon_swig.InterestRateSwapPricingParameter_swigregister(InterestRateSwapPricingParameter)

class vectorBasePricingData(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< BasePricingData > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(vectorBasePricingData self) -> SwigPyIterator"""
        return _pyvacon_swig.vectorBasePricingData_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(vectorBasePricingData self) -> bool"""
        return _pyvacon_swig.vectorBasePricingData___nonzero__(self)

    def __bool__(self):
        r"""__bool__(vectorBasePricingData self) -> bool"""
        return _pyvacon_swig.vectorBasePricingData___bool__(self)

    def __len__(self):
        r"""__len__(vectorBasePricingData self) -> std::vector< std::shared_ptr< BasePricingData > >::size_type"""
        return _pyvacon_swig.vectorBasePricingData___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(vectorBasePricingData self, std::vector< std::shared_ptr< BasePricingData > >::difference_type i, std::vector< std::shared_ptr< BasePricingData > >::difference_type j) -> vectorBasePricingData"""
        return _pyvacon_swig.vectorBasePricingData___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(vectorBasePricingData self, std::vector< std::shared_ptr< BasePricingData > >::difference_type i, std::vector< std::shared_ptr< BasePricingData > >::difference_type j)
        __setslice__(vectorBasePricingData self, std::vector< std::shared_ptr< BasePricingData > >::difference_type i, std::vector< std::shared_ptr< BasePricingData > >::difference_type j, vectorBasePricingData v)
        """
        return _pyvacon_swig.vectorBasePricingData___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(vectorBasePricingData self, std::vector< std::shared_ptr< BasePricingData > >::difference_type i, std::vector< std::shared_ptr< BasePricingData > >::difference_type j)"""
        return _pyvacon_swig.vectorBasePricingData___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(vectorBasePricingData self, std::vector< std::shared_ptr< BasePricingData > >::difference_type i)
        __delitem__(vectorBasePricingData self, PySliceObject * slice)
        """
        return _pyvacon_swig.vectorBasePricingData___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(vectorBasePricingData self, PySliceObject * slice) -> vectorBasePricingData
        __getitem__(vectorBasePricingData self, std::vector< std::shared_ptr< BasePricingData > >::difference_type i) -> std::vector< std::shared_ptr< BasePricingData > >::value_type const &
        """
        return _pyvacon_swig.vectorBasePricingData___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(vectorBasePricingData self, PySliceObject * slice, vectorBasePricingData v)
        __setitem__(vectorBasePricingData self, PySliceObject * slice)
        __setitem__(vectorBasePricingData self, std::vector< std::shared_ptr< BasePricingData > >::difference_type i, std::vector< std::shared_ptr< BasePricingData > >::value_type const & x)
        """
        return _pyvacon_swig.vectorBasePricingData___setitem__(self, *args)

    def pop(self):
        r"""pop(vectorBasePricingData self) -> std::vector< std::shared_ptr< BasePricingData > >::value_type"""
        return _pyvacon_swig.vectorBasePricingData_pop(self)

    def append(self, x):
        r"""append(vectorBasePricingData self, std::vector< std::shared_ptr< BasePricingData > >::value_type const & x)"""
        return _pyvacon_swig.vectorBasePricingData_append(self, x)

    def empty(self):
        r"""empty(vectorBasePricingData self) -> bool"""
        return _pyvacon_swig.vectorBasePricingData_empty(self)

    def size(self):
        r"""size(vectorBasePricingData self) -> std::vector< std::shared_ptr< BasePricingData > >::size_type"""
        return _pyvacon_swig.vectorBasePricingData_size(self)

    def swap(self, v):
        r"""swap(vectorBasePricingData self, vectorBasePricingData v)"""
        return _pyvacon_swig.vectorBasePricingData_swap(self, v)

    def begin(self):
        r"""begin(vectorBasePricingData self) -> std::vector< std::shared_ptr< BasePricingData > >::iterator"""
        return _pyvacon_swig.vectorBasePricingData_begin(self)

    def end(self):
        r"""end(vectorBasePricingData self) -> std::vector< std::shared_ptr< BasePricingData > >::iterator"""
        return _pyvacon_swig.vectorBasePricingData_end(self)

    def rbegin(self):
        r"""rbegin(vectorBasePricingData self) -> std::vector< std::shared_ptr< BasePricingData > >::reverse_iterator"""
        return _pyvacon_swig.vectorBasePricingData_rbegin(self)

    def rend(self):
        r"""rend(vectorBasePricingData self) -> std::vector< std::shared_ptr< BasePricingData > >::reverse_iterator"""
        return _pyvacon_swig.vectorBasePricingData_rend(self)

    def clear(self):
        r"""clear(vectorBasePricingData self)"""
        return _pyvacon_swig.vectorBasePricingData_clear(self)

    def get_allocator(self):
        r"""get_allocator(vectorBasePricingData self) -> std::vector< std::shared_ptr< BasePricingData > >::allocator_type"""
        return _pyvacon_swig.vectorBasePricingData_get_allocator(self)

    def pop_back(self):
        r"""pop_back(vectorBasePricingData self)"""
        return _pyvacon_swig.vectorBasePricingData_pop_back(self)

    def erase(self, *args):
        r"""
        erase(vectorBasePricingData self, std::vector< std::shared_ptr< BasePricingData > >::iterator pos) -> std::vector< std::shared_ptr< BasePricingData > >::iterator
        erase(vectorBasePricingData self, std::vector< std::shared_ptr< BasePricingData > >::iterator first, std::vector< std::shared_ptr< BasePricingData > >::iterator last) -> std::vector< std::shared_ptr< BasePricingData > >::iterator
        """
        return _pyvacon_swig.vectorBasePricingData_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(vectorBasePricingData self) -> vectorBasePricingData
        __init__(vectorBasePricingData self, vectorBasePricingData other) -> vectorBasePricingData
        __init__(vectorBasePricingData self, std::vector< std::shared_ptr< BasePricingData > >::size_type size) -> vectorBasePricingData
        __init__(vectorBasePricingData self, std::vector< std::shared_ptr< BasePricingData > >::size_type size, std::vector< std::shared_ptr< BasePricingData > >::value_type const & value) -> vectorBasePricingData
        """
        _pyvacon_swig.vectorBasePricingData_swiginit(self, _pyvacon_swig.new_vectorBasePricingData(*args))

    def push_back(self, x):
        r"""push_back(vectorBasePricingData self, std::vector< std::shared_ptr< BasePricingData > >::value_type const & x)"""
        return _pyvacon_swig.vectorBasePricingData_push_back(self, x)

    def front(self):
        r"""front(vectorBasePricingData self) -> std::vector< std::shared_ptr< BasePricingData > >::value_type const &"""
        return _pyvacon_swig.vectorBasePricingData_front(self)

    def back(self):
        r"""back(vectorBasePricingData self) -> std::vector< std::shared_ptr< BasePricingData > >::value_type const &"""
        return _pyvacon_swig.vectorBasePricingData_back(self)

    def assign(self, n, x):
        r"""assign(vectorBasePricingData self, std::vector< std::shared_ptr< BasePricingData > >::size_type n, std::vector< std::shared_ptr< BasePricingData > >::value_type const & x)"""
        return _pyvacon_swig.vectorBasePricingData_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(vectorBasePricingData self, std::vector< std::shared_ptr< BasePricingData > >::size_type new_size)
        resize(vectorBasePricingData self, std::vector< std::shared_ptr< BasePricingData > >::size_type new_size, std::vector< std::shared_ptr< BasePricingData > >::value_type const & x)
        """
        return _pyvacon_swig.vectorBasePricingData_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(vectorBasePricingData self, std::vector< std::shared_ptr< BasePricingData > >::iterator pos, std::vector< std::shared_ptr< BasePricingData > >::value_type const & x) -> std::vector< std::shared_ptr< BasePricingData > >::iterator
        insert(vectorBasePricingData self, std::vector< std::shared_ptr< BasePricingData > >::iterator pos, std::vector< std::shared_ptr< BasePricingData > >::size_type n, std::vector< std::shared_ptr< BasePricingData > >::value_type const & x)
        """
        return _pyvacon_swig.vectorBasePricingData_insert(self, *args)

    def reserve(self, n):
        r"""reserve(vectorBasePricingData self, std::vector< std::shared_ptr< BasePricingData > >::size_type n)"""
        return _pyvacon_swig.vectorBasePricingData_reserve(self, n)

    def capacity(self):
        r"""capacity(vectorBasePricingData self) -> std::vector< std::shared_ptr< BasePricingData > >::size_type"""
        return _pyvacon_swig.vectorBasePricingData_capacity(self)
    __swig_destroy__ = _pyvacon_swig.delete_vectorBasePricingData

# Register vectorBasePricingData in _pyvacon_swig:
_pyvacon_swig.vectorBasePricingData_swigregister(vectorBasePricingData)

class vectorLocalVolPdePricingData(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< LocalVolPdePricingData > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(vectorLocalVolPdePricingData self) -> SwigPyIterator"""
        return _pyvacon_swig.vectorLocalVolPdePricingData_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(vectorLocalVolPdePricingData self) -> bool"""
        return _pyvacon_swig.vectorLocalVolPdePricingData___nonzero__(self)

    def __bool__(self):
        r"""__bool__(vectorLocalVolPdePricingData self) -> bool"""
        return _pyvacon_swig.vectorLocalVolPdePricingData___bool__(self)

    def __len__(self):
        r"""__len__(vectorLocalVolPdePricingData self) -> std::vector< std::shared_ptr< LocalVolPdePricingData > >::size_type"""
        return _pyvacon_swig.vectorLocalVolPdePricingData___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(vectorLocalVolPdePricingData self, std::vector< std::shared_ptr< LocalVolPdePricingData > >::difference_type i, std::vector< std::shared_ptr< LocalVolPdePricingData > >::difference_type j) -> vectorLocalVolPdePricingData"""
        return _pyvacon_swig.vectorLocalVolPdePricingData___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(vectorLocalVolPdePricingData self, std::vector< std::shared_ptr< LocalVolPdePricingData > >::difference_type i, std::vector< std::shared_ptr< LocalVolPdePricingData > >::difference_type j)
        __setslice__(vectorLocalVolPdePricingData self, std::vector< std::shared_ptr< LocalVolPdePricingData > >::difference_type i, std::vector< std::shared_ptr< LocalVolPdePricingData > >::difference_type j, vectorLocalVolPdePricingData v)
        """
        return _pyvacon_swig.vectorLocalVolPdePricingData___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(vectorLocalVolPdePricingData self, std::vector< std::shared_ptr< LocalVolPdePricingData > >::difference_type i, std::vector< std::shared_ptr< LocalVolPdePricingData > >::difference_type j)"""
        return _pyvacon_swig.vectorLocalVolPdePricingData___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(vectorLocalVolPdePricingData self, std::vector< std::shared_ptr< LocalVolPdePricingData > >::difference_type i)
        __delitem__(vectorLocalVolPdePricingData self, PySliceObject * slice)
        """
        return _pyvacon_swig.vectorLocalVolPdePricingData___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(vectorLocalVolPdePricingData self, PySliceObject * slice) -> vectorLocalVolPdePricingData
        __getitem__(vectorLocalVolPdePricingData self, std::vector< std::shared_ptr< LocalVolPdePricingData > >::difference_type i) -> std::vector< std::shared_ptr< LocalVolPdePricingData > >::value_type const &
        """
        return _pyvacon_swig.vectorLocalVolPdePricingData___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(vectorLocalVolPdePricingData self, PySliceObject * slice, vectorLocalVolPdePricingData v)
        __setitem__(vectorLocalVolPdePricingData self, PySliceObject * slice)
        __setitem__(vectorLocalVolPdePricingData self, std::vector< std::shared_ptr< LocalVolPdePricingData > >::difference_type i, std::vector< std::shared_ptr< LocalVolPdePricingData > >::value_type const & x)
        """
        return _pyvacon_swig.vectorLocalVolPdePricingData___setitem__(self, *args)

    def pop(self):
        r"""pop(vectorLocalVolPdePricingData self) -> std::vector< std::shared_ptr< LocalVolPdePricingData > >::value_type"""
        return _pyvacon_swig.vectorLocalVolPdePricingData_pop(self)

    def append(self, x):
        r"""append(vectorLocalVolPdePricingData self, std::vector< std::shared_ptr< LocalVolPdePricingData > >::value_type const & x)"""
        return _pyvacon_swig.vectorLocalVolPdePricingData_append(self, x)

    def empty(self):
        r"""empty(vectorLocalVolPdePricingData self) -> bool"""
        return _pyvacon_swig.vectorLocalVolPdePricingData_empty(self)

    def size(self):
        r"""size(vectorLocalVolPdePricingData self) -> std::vector< std::shared_ptr< LocalVolPdePricingData > >::size_type"""
        return _pyvacon_swig.vectorLocalVolPdePricingData_size(self)

    def swap(self, v):
        r"""swap(vectorLocalVolPdePricingData self, vectorLocalVolPdePricingData v)"""
        return _pyvacon_swig.vectorLocalVolPdePricingData_swap(self, v)

    def begin(self):
        r"""begin(vectorLocalVolPdePricingData self) -> std::vector< std::shared_ptr< LocalVolPdePricingData > >::iterator"""
        return _pyvacon_swig.vectorLocalVolPdePricingData_begin(self)

    def end(self):
        r"""end(vectorLocalVolPdePricingData self) -> std::vector< std::shared_ptr< LocalVolPdePricingData > >::iterator"""
        return _pyvacon_swig.vectorLocalVolPdePricingData_end(self)

    def rbegin(self):
        r"""rbegin(vectorLocalVolPdePricingData self) -> std::vector< std::shared_ptr< LocalVolPdePricingData > >::reverse_iterator"""
        return _pyvacon_swig.vectorLocalVolPdePricingData_rbegin(self)

    def rend(self):
        r"""rend(vectorLocalVolPdePricingData self) -> std::vector< std::shared_ptr< LocalVolPdePricingData > >::reverse_iterator"""
        return _pyvacon_swig.vectorLocalVolPdePricingData_rend(self)

    def clear(self):
        r"""clear(vectorLocalVolPdePricingData self)"""
        return _pyvacon_swig.vectorLocalVolPdePricingData_clear(self)

    def get_allocator(self):
        r"""get_allocator(vectorLocalVolPdePricingData self) -> std::vector< std::shared_ptr< LocalVolPdePricingData > >::allocator_type"""
        return _pyvacon_swig.vectorLocalVolPdePricingData_get_allocator(self)

    def pop_back(self):
        r"""pop_back(vectorLocalVolPdePricingData self)"""
        return _pyvacon_swig.vectorLocalVolPdePricingData_pop_back(self)

    def erase(self, *args):
        r"""
        erase(vectorLocalVolPdePricingData self, std::vector< std::shared_ptr< LocalVolPdePricingData > >::iterator pos) -> std::vector< std::shared_ptr< LocalVolPdePricingData > >::iterator
        erase(vectorLocalVolPdePricingData self, std::vector< std::shared_ptr< LocalVolPdePricingData > >::iterator first, std::vector< std::shared_ptr< LocalVolPdePricingData > >::iterator last) -> std::vector< std::shared_ptr< LocalVolPdePricingData > >::iterator
        """
        return _pyvacon_swig.vectorLocalVolPdePricingData_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(vectorLocalVolPdePricingData self) -> vectorLocalVolPdePricingData
        __init__(vectorLocalVolPdePricingData self, vectorLocalVolPdePricingData other) -> vectorLocalVolPdePricingData
        __init__(vectorLocalVolPdePricingData self, std::vector< std::shared_ptr< LocalVolPdePricingData > >::size_type size) -> vectorLocalVolPdePricingData
        __init__(vectorLocalVolPdePricingData self, std::vector< std::shared_ptr< LocalVolPdePricingData > >::size_type size, std::vector< std::shared_ptr< LocalVolPdePricingData > >::value_type const & value) -> vectorLocalVolPdePricingData
        """
        _pyvacon_swig.vectorLocalVolPdePricingData_swiginit(self, _pyvacon_swig.new_vectorLocalVolPdePricingData(*args))

    def push_back(self, x):
        r"""push_back(vectorLocalVolPdePricingData self, std::vector< std::shared_ptr< LocalVolPdePricingData > >::value_type const & x)"""
        return _pyvacon_swig.vectorLocalVolPdePricingData_push_back(self, x)

    def front(self):
        r"""front(vectorLocalVolPdePricingData self) -> std::vector< std::shared_ptr< LocalVolPdePricingData > >::value_type const &"""
        return _pyvacon_swig.vectorLocalVolPdePricingData_front(self)

    def back(self):
        r"""back(vectorLocalVolPdePricingData self) -> std::vector< std::shared_ptr< LocalVolPdePricingData > >::value_type const &"""
        return _pyvacon_swig.vectorLocalVolPdePricingData_back(self)

    def assign(self, n, x):
        r"""assign(vectorLocalVolPdePricingData self, std::vector< std::shared_ptr< LocalVolPdePricingData > >::size_type n, std::vector< std::shared_ptr< LocalVolPdePricingData > >::value_type const & x)"""
        return _pyvacon_swig.vectorLocalVolPdePricingData_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(vectorLocalVolPdePricingData self, std::vector< std::shared_ptr< LocalVolPdePricingData > >::size_type new_size)
        resize(vectorLocalVolPdePricingData self, std::vector< std::shared_ptr< LocalVolPdePricingData > >::size_type new_size, std::vector< std::shared_ptr< LocalVolPdePricingData > >::value_type const & x)
        """
        return _pyvacon_swig.vectorLocalVolPdePricingData_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(vectorLocalVolPdePricingData self, std::vector< std::shared_ptr< LocalVolPdePricingData > >::iterator pos, std::vector< std::shared_ptr< LocalVolPdePricingData > >::value_type const & x) -> std::vector< std::shared_ptr< LocalVolPdePricingData > >::iterator
        insert(vectorLocalVolPdePricingData self, std::vector< std::shared_ptr< LocalVolPdePricingData > >::iterator pos, std::vector< std::shared_ptr< LocalVolPdePricingData > >::size_type n, std::vector< std::shared_ptr< LocalVolPdePricingData > >::value_type const & x)
        """
        return _pyvacon_swig.vectorLocalVolPdePricingData_insert(self, *args)

    def reserve(self, n):
        r"""reserve(vectorLocalVolPdePricingData self, std::vector< std::shared_ptr< LocalVolPdePricingData > >::size_type n)"""
        return _pyvacon_swig.vectorLocalVolPdePricingData_reserve(self, n)

    def capacity(self):
        r"""capacity(vectorLocalVolPdePricingData self) -> std::vector< std::shared_ptr< LocalVolPdePricingData > >::size_type"""
        return _pyvacon_swig.vectorLocalVolPdePricingData_capacity(self)
    __swig_destroy__ = _pyvacon_swig.delete_vectorLocalVolPdePricingData

# Register vectorLocalVolPdePricingData in _pyvacon_swig:
_pyvacon_swig.vectorLocalVolPdePricingData_swigregister(vectorLocalVolPdePricingData)

class vectorBlack76PricingData(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Black76PricingData > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(vectorBlack76PricingData self) -> SwigPyIterator"""
        return _pyvacon_swig.vectorBlack76PricingData_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(vectorBlack76PricingData self) -> bool"""
        return _pyvacon_swig.vectorBlack76PricingData___nonzero__(self)

    def __bool__(self):
        r"""__bool__(vectorBlack76PricingData self) -> bool"""
        return _pyvacon_swig.vectorBlack76PricingData___bool__(self)

    def __len__(self):
        r"""__len__(vectorBlack76PricingData self) -> std::vector< std::shared_ptr< Black76PricingData > >::size_type"""
        return _pyvacon_swig.vectorBlack76PricingData___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(vectorBlack76PricingData self, std::vector< std::shared_ptr< Black76PricingData > >::difference_type i, std::vector< std::shared_ptr< Black76PricingData > >::difference_type j) -> vectorBlack76PricingData"""
        return _pyvacon_swig.vectorBlack76PricingData___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(vectorBlack76PricingData self, std::vector< std::shared_ptr< Black76PricingData > >::difference_type i, std::vector< std::shared_ptr< Black76PricingData > >::difference_type j)
        __setslice__(vectorBlack76PricingData self, std::vector< std::shared_ptr< Black76PricingData > >::difference_type i, std::vector< std::shared_ptr< Black76PricingData > >::difference_type j, vectorBlack76PricingData v)
        """
        return _pyvacon_swig.vectorBlack76PricingData___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(vectorBlack76PricingData self, std::vector< std::shared_ptr< Black76PricingData > >::difference_type i, std::vector< std::shared_ptr< Black76PricingData > >::difference_type j)"""
        return _pyvacon_swig.vectorBlack76PricingData___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(vectorBlack76PricingData self, std::vector< std::shared_ptr< Black76PricingData > >::difference_type i)
        __delitem__(vectorBlack76PricingData self, PySliceObject * slice)
        """
        return _pyvacon_swig.vectorBlack76PricingData___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(vectorBlack76PricingData self, PySliceObject * slice) -> vectorBlack76PricingData
        __getitem__(vectorBlack76PricingData self, std::vector< std::shared_ptr< Black76PricingData > >::difference_type i) -> std::vector< std::shared_ptr< Black76PricingData > >::value_type const &
        """
        return _pyvacon_swig.vectorBlack76PricingData___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(vectorBlack76PricingData self, PySliceObject * slice, vectorBlack76PricingData v)
        __setitem__(vectorBlack76PricingData self, PySliceObject * slice)
        __setitem__(vectorBlack76PricingData self, std::vector< std::shared_ptr< Black76PricingData > >::difference_type i, std::vector< std::shared_ptr< Black76PricingData > >::value_type const & x)
        """
        return _pyvacon_swig.vectorBlack76PricingData___setitem__(self, *args)

    def pop(self):
        r"""pop(vectorBlack76PricingData self) -> std::vector< std::shared_ptr< Black76PricingData > >::value_type"""
        return _pyvacon_swig.vectorBlack76PricingData_pop(self)

    def append(self, x):
        r"""append(vectorBlack76PricingData self, std::vector< std::shared_ptr< Black76PricingData > >::value_type const & x)"""
        return _pyvacon_swig.vectorBlack76PricingData_append(self, x)

    def empty(self):
        r"""empty(vectorBlack76PricingData self) -> bool"""
        return _pyvacon_swig.vectorBlack76PricingData_empty(self)

    def size(self):
        r"""size(vectorBlack76PricingData self) -> std::vector< std::shared_ptr< Black76PricingData > >::size_type"""
        return _pyvacon_swig.vectorBlack76PricingData_size(self)

    def swap(self, v):
        r"""swap(vectorBlack76PricingData self, vectorBlack76PricingData v)"""
        return _pyvacon_swig.vectorBlack76PricingData_swap(self, v)

    def begin(self):
        r"""begin(vectorBlack76PricingData self) -> std::vector< std::shared_ptr< Black76PricingData > >::iterator"""
        return _pyvacon_swig.vectorBlack76PricingData_begin(self)

    def end(self):
        r"""end(vectorBlack76PricingData self) -> std::vector< std::shared_ptr< Black76PricingData > >::iterator"""
        return _pyvacon_swig.vectorBlack76PricingData_end(self)

    def rbegin(self):
        r"""rbegin(vectorBlack76PricingData self) -> std::vector< std::shared_ptr< Black76PricingData > >::reverse_iterator"""
        return _pyvacon_swig.vectorBlack76PricingData_rbegin(self)

    def rend(self):
        r"""rend(vectorBlack76PricingData self) -> std::vector< std::shared_ptr< Black76PricingData > >::reverse_iterator"""
        return _pyvacon_swig.vectorBlack76PricingData_rend(self)

    def clear(self):
        r"""clear(vectorBlack76PricingData self)"""
        return _pyvacon_swig.vectorBlack76PricingData_clear(self)

    def get_allocator(self):
        r"""get_allocator(vectorBlack76PricingData self) -> std::vector< std::shared_ptr< Black76PricingData > >::allocator_type"""
        return _pyvacon_swig.vectorBlack76PricingData_get_allocator(self)

    def pop_back(self):
        r"""pop_back(vectorBlack76PricingData self)"""
        return _pyvacon_swig.vectorBlack76PricingData_pop_back(self)

    def erase(self, *args):
        r"""
        erase(vectorBlack76PricingData self, std::vector< std::shared_ptr< Black76PricingData > >::iterator pos) -> std::vector< std::shared_ptr< Black76PricingData > >::iterator
        erase(vectorBlack76PricingData self, std::vector< std::shared_ptr< Black76PricingData > >::iterator first, std::vector< std::shared_ptr< Black76PricingData > >::iterator last) -> std::vector< std::shared_ptr< Black76PricingData > >::iterator
        """
        return _pyvacon_swig.vectorBlack76PricingData_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(vectorBlack76PricingData self) -> vectorBlack76PricingData
        __init__(vectorBlack76PricingData self, vectorBlack76PricingData other) -> vectorBlack76PricingData
        __init__(vectorBlack76PricingData self, std::vector< std::shared_ptr< Black76PricingData > >::size_type size) -> vectorBlack76PricingData
        __init__(vectorBlack76PricingData self, std::vector< std::shared_ptr< Black76PricingData > >::size_type size, std::vector< std::shared_ptr< Black76PricingData > >::value_type const & value) -> vectorBlack76PricingData
        """
        _pyvacon_swig.vectorBlack76PricingData_swiginit(self, _pyvacon_swig.new_vectorBlack76PricingData(*args))

    def push_back(self, x):
        r"""push_back(vectorBlack76PricingData self, std::vector< std::shared_ptr< Black76PricingData > >::value_type const & x)"""
        return _pyvacon_swig.vectorBlack76PricingData_push_back(self, x)

    def front(self):
        r"""front(vectorBlack76PricingData self) -> std::vector< std::shared_ptr< Black76PricingData > >::value_type const &"""
        return _pyvacon_swig.vectorBlack76PricingData_front(self)

    def back(self):
        r"""back(vectorBlack76PricingData self) -> std::vector< std::shared_ptr< Black76PricingData > >::value_type const &"""
        return _pyvacon_swig.vectorBlack76PricingData_back(self)

    def assign(self, n, x):
        r"""assign(vectorBlack76PricingData self, std::vector< std::shared_ptr< Black76PricingData > >::size_type n, std::vector< std::shared_ptr< Black76PricingData > >::value_type const & x)"""
        return _pyvacon_swig.vectorBlack76PricingData_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(vectorBlack76PricingData self, std::vector< std::shared_ptr< Black76PricingData > >::size_type new_size)
        resize(vectorBlack76PricingData self, std::vector< std::shared_ptr< Black76PricingData > >::size_type new_size, std::vector< std::shared_ptr< Black76PricingData > >::value_type const & x)
        """
        return _pyvacon_swig.vectorBlack76PricingData_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(vectorBlack76PricingData self, std::vector< std::shared_ptr< Black76PricingData > >::iterator pos, std::vector< std::shared_ptr< Black76PricingData > >::value_type const & x) -> std::vector< std::shared_ptr< Black76PricingData > >::iterator
        insert(vectorBlack76PricingData self, std::vector< std::shared_ptr< Black76PricingData > >::iterator pos, std::vector< std::shared_ptr< Black76PricingData > >::size_type n, std::vector< std::shared_ptr< Black76PricingData > >::value_type const & x)
        """
        return _pyvacon_swig.vectorBlack76PricingData_insert(self, *args)

    def reserve(self, n):
        r"""reserve(vectorBlack76PricingData self, std::vector< std::shared_ptr< Black76PricingData > >::size_type n)"""
        return _pyvacon_swig.vectorBlack76PricingData_reserve(self, n)

    def capacity(self):
        r"""capacity(vectorBlack76PricingData self) -> std::vector< std::shared_ptr< Black76PricingData > >::size_type"""
        return _pyvacon_swig.vectorBlack76PricingData_capacity(self)
    __swig_destroy__ = _pyvacon_swig.delete_vectorBlack76PricingData

# Register vectorBlack76PricingData in _pyvacon_swig:
_pyvacon_swig.vectorBlack76PricingData_swigregister(vectorBlack76PricingData)

class vectorConstVolatilities(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< VolatilitySurface const > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(vectorConstVolatilities self) -> SwigPyIterator"""
        return _pyvacon_swig.vectorConstVolatilities_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(vectorConstVolatilities self) -> bool"""
        return _pyvacon_swig.vectorConstVolatilities___nonzero__(self)

    def __bool__(self):
        r"""__bool__(vectorConstVolatilities self) -> bool"""
        return _pyvacon_swig.vectorConstVolatilities___bool__(self)

    def __len__(self):
        r"""__len__(vectorConstVolatilities self) -> std::vector< std::shared_ptr< VolatilitySurface const > >::size_type"""
        return _pyvacon_swig.vectorConstVolatilities___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(vectorConstVolatilities self, std::vector< std::shared_ptr< VolatilitySurface const > >::difference_type i, std::vector< std::shared_ptr< VolatilitySurface const > >::difference_type j) -> vectorConstVolatilities"""
        return _pyvacon_swig.vectorConstVolatilities___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(vectorConstVolatilities self, std::vector< std::shared_ptr< VolatilitySurface const > >::difference_type i, std::vector< std::shared_ptr< VolatilitySurface const > >::difference_type j)
        __setslice__(vectorConstVolatilities self, std::vector< std::shared_ptr< VolatilitySurface const > >::difference_type i, std::vector< std::shared_ptr< VolatilitySurface const > >::difference_type j, vectorConstVolatilities v)
        """
        return _pyvacon_swig.vectorConstVolatilities___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(vectorConstVolatilities self, std::vector< std::shared_ptr< VolatilitySurface const > >::difference_type i, std::vector< std::shared_ptr< VolatilitySurface const > >::difference_type j)"""
        return _pyvacon_swig.vectorConstVolatilities___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(vectorConstVolatilities self, std::vector< std::shared_ptr< VolatilitySurface const > >::difference_type i)
        __delitem__(vectorConstVolatilities self, PySliceObject * slice)
        """
        return _pyvacon_swig.vectorConstVolatilities___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(vectorConstVolatilities self, PySliceObject * slice) -> vectorConstVolatilities
        __getitem__(vectorConstVolatilities self, std::vector< std::shared_ptr< VolatilitySurface const > >::difference_type i) -> std::vector< std::shared_ptr< VolatilitySurface const > >::value_type const &
        """
        return _pyvacon_swig.vectorConstVolatilities___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(vectorConstVolatilities self, PySliceObject * slice, vectorConstVolatilities v)
        __setitem__(vectorConstVolatilities self, PySliceObject * slice)
        __setitem__(vectorConstVolatilities self, std::vector< std::shared_ptr< VolatilitySurface const > >::difference_type i, std::vector< std::shared_ptr< VolatilitySurface const > >::value_type const & x)
        """
        return _pyvacon_swig.vectorConstVolatilities___setitem__(self, *args)

    def pop(self):
        r"""pop(vectorConstVolatilities self) -> std::vector< std::shared_ptr< VolatilitySurface const > >::value_type"""
        return _pyvacon_swig.vectorConstVolatilities_pop(self)

    def append(self, x):
        r"""append(vectorConstVolatilities self, std::vector< std::shared_ptr< VolatilitySurface const > >::value_type const & x)"""
        return _pyvacon_swig.vectorConstVolatilities_append(self, x)

    def empty(self):
        r"""empty(vectorConstVolatilities self) -> bool"""
        return _pyvacon_swig.vectorConstVolatilities_empty(self)

    def size(self):
        r"""size(vectorConstVolatilities self) -> std::vector< std::shared_ptr< VolatilitySurface const > >::size_type"""
        return _pyvacon_swig.vectorConstVolatilities_size(self)

    def swap(self, v):
        r"""swap(vectorConstVolatilities self, vectorConstVolatilities v)"""
        return _pyvacon_swig.vectorConstVolatilities_swap(self, v)

    def begin(self):
        r"""begin(vectorConstVolatilities self) -> std::vector< std::shared_ptr< VolatilitySurface const > >::iterator"""
        return _pyvacon_swig.vectorConstVolatilities_begin(self)

    def end(self):
        r"""end(vectorConstVolatilities self) -> std::vector< std::shared_ptr< VolatilitySurface const > >::iterator"""
        return _pyvacon_swig.vectorConstVolatilities_end(self)

    def rbegin(self):
        r"""rbegin(vectorConstVolatilities self) -> std::vector< std::shared_ptr< VolatilitySurface const > >::reverse_iterator"""
        return _pyvacon_swig.vectorConstVolatilities_rbegin(self)

    def rend(self):
        r"""rend(vectorConstVolatilities self) -> std::vector< std::shared_ptr< VolatilitySurface const > >::reverse_iterator"""
        return _pyvacon_swig.vectorConstVolatilities_rend(self)

    def clear(self):
        r"""clear(vectorConstVolatilities self)"""
        return _pyvacon_swig.vectorConstVolatilities_clear(self)

    def get_allocator(self):
        r"""get_allocator(vectorConstVolatilities self) -> std::vector< std::shared_ptr< VolatilitySurface const > >::allocator_type"""
        return _pyvacon_swig.vectorConstVolatilities_get_allocator(self)

    def pop_back(self):
        r"""pop_back(vectorConstVolatilities self)"""
        return _pyvacon_swig.vectorConstVolatilities_pop_back(self)

    def erase(self, *args):
        r"""
        erase(vectorConstVolatilities self, std::vector< std::shared_ptr< VolatilitySurface const > >::iterator pos) -> std::vector< std::shared_ptr< VolatilitySurface const > >::iterator
        erase(vectorConstVolatilities self, std::vector< std::shared_ptr< VolatilitySurface const > >::iterator first, std::vector< std::shared_ptr< VolatilitySurface const > >::iterator last) -> std::vector< std::shared_ptr< VolatilitySurface const > >::iterator
        """
        return _pyvacon_swig.vectorConstVolatilities_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(vectorConstVolatilities self) -> vectorConstVolatilities
        __init__(vectorConstVolatilities self, vectorConstVolatilities other) -> vectorConstVolatilities
        __init__(vectorConstVolatilities self, std::vector< std::shared_ptr< VolatilitySurface const > >::size_type size) -> vectorConstVolatilities
        __init__(vectorConstVolatilities self, std::vector< std::shared_ptr< VolatilitySurface const > >::size_type size, std::vector< std::shared_ptr< VolatilitySurface const > >::value_type const & value) -> vectorConstVolatilities
        """
        _pyvacon_swig.vectorConstVolatilities_swiginit(self, _pyvacon_swig.new_vectorConstVolatilities(*args))

    def push_back(self, x):
        r"""push_back(vectorConstVolatilities self, std::vector< std::shared_ptr< VolatilitySurface const > >::value_type const & x)"""
        return _pyvacon_swig.vectorConstVolatilities_push_back(self, x)

    def front(self):
        r"""front(vectorConstVolatilities self) -> std::vector< std::shared_ptr< VolatilitySurface const > >::value_type const &"""
        return _pyvacon_swig.vectorConstVolatilities_front(self)

    def back(self):
        r"""back(vectorConstVolatilities self) -> std::vector< std::shared_ptr< VolatilitySurface const > >::value_type const &"""
        return _pyvacon_swig.vectorConstVolatilities_back(self)

    def assign(self, n, x):
        r"""assign(vectorConstVolatilities self, std::vector< std::shared_ptr< VolatilitySurface const > >::size_type n, std::vector< std::shared_ptr< VolatilitySurface const > >::value_type const & x)"""
        return _pyvacon_swig.vectorConstVolatilities_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(vectorConstVolatilities self, std::vector< std::shared_ptr< VolatilitySurface const > >::size_type new_size)
        resize(vectorConstVolatilities self, std::vector< std::shared_ptr< VolatilitySurface const > >::size_type new_size, std::vector< std::shared_ptr< VolatilitySurface const > >::value_type const & x)
        """
        return _pyvacon_swig.vectorConstVolatilities_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(vectorConstVolatilities self, std::vector< std::shared_ptr< VolatilitySurface const > >::iterator pos, std::vector< std::shared_ptr< VolatilitySurface const > >::value_type const & x) -> std::vector< std::shared_ptr< VolatilitySurface const > >::iterator
        insert(vectorConstVolatilities self, std::vector< std::shared_ptr< VolatilitySurface const > >::iterator pos, std::vector< std::shared_ptr< VolatilitySurface const > >::size_type n, std::vector< std::shared_ptr< VolatilitySurface const > >::value_type const & x)
        """
        return _pyvacon_swig.vectorConstVolatilities_insert(self, *args)

    def reserve(self, n):
        r"""reserve(vectorConstVolatilities self, std::vector< std::shared_ptr< VolatilitySurface const > >::size_type n)"""
        return _pyvacon_swig.vectorConstVolatilities_reserve(self, n)

    def capacity(self):
        r"""capacity(vectorConstVolatilities self) -> std::vector< std::shared_ptr< VolatilitySurface const > >::size_type"""
        return _pyvacon_swig.vectorConstVolatilities_capacity(self)
    __swig_destroy__ = _pyvacon_swig.delete_vectorConstVolatilities

# Register vectorConstVolatilities in _pyvacon_swig:
_pyvacon_swig.vectorConstVolatilities_swigregister(vectorConstVolatilities)

class vectorConstModel(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< BaseModel const > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(vectorConstModel self) -> SwigPyIterator"""
        return _pyvacon_swig.vectorConstModel_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(vectorConstModel self) -> bool"""
        return _pyvacon_swig.vectorConstModel___nonzero__(self)

    def __bool__(self):
        r"""__bool__(vectorConstModel self) -> bool"""
        return _pyvacon_swig.vectorConstModel___bool__(self)

    def __len__(self):
        r"""__len__(vectorConstModel self) -> std::vector< std::shared_ptr< BaseModel const > >::size_type"""
        return _pyvacon_swig.vectorConstModel___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(vectorConstModel self, std::vector< std::shared_ptr< BaseModel const > >::difference_type i, std::vector< std::shared_ptr< BaseModel const > >::difference_type j) -> vectorConstModel"""
        return _pyvacon_swig.vectorConstModel___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(vectorConstModel self, std::vector< std::shared_ptr< BaseModel const > >::difference_type i, std::vector< std::shared_ptr< BaseModel const > >::difference_type j)
        __setslice__(vectorConstModel self, std::vector< std::shared_ptr< BaseModel const > >::difference_type i, std::vector< std::shared_ptr< BaseModel const > >::difference_type j, vectorConstModel v)
        """
        return _pyvacon_swig.vectorConstModel___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(vectorConstModel self, std::vector< std::shared_ptr< BaseModel const > >::difference_type i, std::vector< std::shared_ptr< BaseModel const > >::difference_type j)"""
        return _pyvacon_swig.vectorConstModel___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(vectorConstModel self, std::vector< std::shared_ptr< BaseModel const > >::difference_type i)
        __delitem__(vectorConstModel self, PySliceObject * slice)
        """
        return _pyvacon_swig.vectorConstModel___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(vectorConstModel self, PySliceObject * slice) -> vectorConstModel
        __getitem__(vectorConstModel self, std::vector< std::shared_ptr< BaseModel const > >::difference_type i) -> std::vector< std::shared_ptr< BaseModel const > >::value_type const &
        """
        return _pyvacon_swig.vectorConstModel___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(vectorConstModel self, PySliceObject * slice, vectorConstModel v)
        __setitem__(vectorConstModel self, PySliceObject * slice)
        __setitem__(vectorConstModel self, std::vector< std::shared_ptr< BaseModel const > >::difference_type i, std::vector< std::shared_ptr< BaseModel const > >::value_type const & x)
        """
        return _pyvacon_swig.vectorConstModel___setitem__(self, *args)

    def pop(self):
        r"""pop(vectorConstModel self) -> std::vector< std::shared_ptr< BaseModel const > >::value_type"""
        return _pyvacon_swig.vectorConstModel_pop(self)

    def append(self, x):
        r"""append(vectorConstModel self, std::vector< std::shared_ptr< BaseModel const > >::value_type const & x)"""
        return _pyvacon_swig.vectorConstModel_append(self, x)

    def empty(self):
        r"""empty(vectorConstModel self) -> bool"""
        return _pyvacon_swig.vectorConstModel_empty(self)

    def size(self):
        r"""size(vectorConstModel self) -> std::vector< std::shared_ptr< BaseModel const > >::size_type"""
        return _pyvacon_swig.vectorConstModel_size(self)

    def swap(self, v):
        r"""swap(vectorConstModel self, vectorConstModel v)"""
        return _pyvacon_swig.vectorConstModel_swap(self, v)

    def begin(self):
        r"""begin(vectorConstModel self) -> std::vector< std::shared_ptr< BaseModel const > >::iterator"""
        return _pyvacon_swig.vectorConstModel_begin(self)

    def end(self):
        r"""end(vectorConstModel self) -> std::vector< std::shared_ptr< BaseModel const > >::iterator"""
        return _pyvacon_swig.vectorConstModel_end(self)

    def rbegin(self):
        r"""rbegin(vectorConstModel self) -> std::vector< std::shared_ptr< BaseModel const > >::reverse_iterator"""
        return _pyvacon_swig.vectorConstModel_rbegin(self)

    def rend(self):
        r"""rend(vectorConstModel self) -> std::vector< std::shared_ptr< BaseModel const > >::reverse_iterator"""
        return _pyvacon_swig.vectorConstModel_rend(self)

    def clear(self):
        r"""clear(vectorConstModel self)"""
        return _pyvacon_swig.vectorConstModel_clear(self)

    def get_allocator(self):
        r"""get_allocator(vectorConstModel self) -> std::vector< std::shared_ptr< BaseModel const > >::allocator_type"""
        return _pyvacon_swig.vectorConstModel_get_allocator(self)

    def pop_back(self):
        r"""pop_back(vectorConstModel self)"""
        return _pyvacon_swig.vectorConstModel_pop_back(self)

    def erase(self, *args):
        r"""
        erase(vectorConstModel self, std::vector< std::shared_ptr< BaseModel const > >::iterator pos) -> std::vector< std::shared_ptr< BaseModel const > >::iterator
        erase(vectorConstModel self, std::vector< std::shared_ptr< BaseModel const > >::iterator first, std::vector< std::shared_ptr< BaseModel const > >::iterator last) -> std::vector< std::shared_ptr< BaseModel const > >::iterator
        """
        return _pyvacon_swig.vectorConstModel_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(vectorConstModel self) -> vectorConstModel
        __init__(vectorConstModel self, vectorConstModel other) -> vectorConstModel
        __init__(vectorConstModel self, std::vector< std::shared_ptr< BaseModel const > >::size_type size) -> vectorConstModel
        __init__(vectorConstModel self, std::vector< std::shared_ptr< BaseModel const > >::size_type size, std::vector< std::shared_ptr< BaseModel const > >::value_type const & value) -> vectorConstModel
        """
        _pyvacon_swig.vectorConstModel_swiginit(self, _pyvacon_swig.new_vectorConstModel(*args))

    def push_back(self, x):
        r"""push_back(vectorConstModel self, std::vector< std::shared_ptr< BaseModel const > >::value_type const & x)"""
        return _pyvacon_swig.vectorConstModel_push_back(self, x)

    def front(self):
        r"""front(vectorConstModel self) -> std::vector< std::shared_ptr< BaseModel const > >::value_type const &"""
        return _pyvacon_swig.vectorConstModel_front(self)

    def back(self):
        r"""back(vectorConstModel self) -> std::vector< std::shared_ptr< BaseModel const > >::value_type const &"""
        return _pyvacon_swig.vectorConstModel_back(self)

    def assign(self, n, x):
        r"""assign(vectorConstModel self, std::vector< std::shared_ptr< BaseModel const > >::size_type n, std::vector< std::shared_ptr< BaseModel const > >::value_type const & x)"""
        return _pyvacon_swig.vectorConstModel_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(vectorConstModel self, std::vector< std::shared_ptr< BaseModel const > >::size_type new_size)
        resize(vectorConstModel self, std::vector< std::shared_ptr< BaseModel const > >::size_type new_size, std::vector< std::shared_ptr< BaseModel const > >::value_type const & x)
        """
        return _pyvacon_swig.vectorConstModel_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(vectorConstModel self, std::vector< std::shared_ptr< BaseModel const > >::iterator pos, std::vector< std::shared_ptr< BaseModel const > >::value_type const & x) -> std::vector< std::shared_ptr< BaseModel const > >::iterator
        insert(vectorConstModel self, std::vector< std::shared_ptr< BaseModel const > >::iterator pos, std::vector< std::shared_ptr< BaseModel const > >::size_type n, std::vector< std::shared_ptr< BaseModel const > >::value_type const & x)
        """
        return _pyvacon_swig.vectorConstModel_insert(self, *args)

    def reserve(self, n):
        r"""reserve(vectorConstModel self, std::vector< std::shared_ptr< BaseModel const > >::size_type n)"""
        return _pyvacon_swig.vectorConstModel_reserve(self, n)

    def capacity(self):
        r"""capacity(vectorConstModel self) -> std::vector< std::shared_ptr< BaseModel const > >::size_type"""
        return _pyvacon_swig.vectorConstModel_capacity(self)
    __swig_destroy__ = _pyvacon_swig.delete_vectorConstModel

# Register vectorConstModel in _pyvacon_swig:
_pyvacon_swig.vectorConstModel_swigregister(vectorConstModel)

class BasePricingData(Clonable):
    r"""Proxy of C++ BasePricingData class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getClassName(self):
        r"""getClassName(BasePricingData self) -> std::string"""
        return _pyvacon_swig.BasePricingData_getClassName(self)
    valDate = property(_pyvacon_swig.BasePricingData_valDate_get, _pyvacon_swig.BasePricingData_valDate_set, doc=r"""valDate : ptime""")
    pricer = property(_pyvacon_swig.BasePricingData_pricer_get, _pyvacon_swig.BasePricingData_pricer_set, doc=r"""pricer : std::string""")
    pricingRequest = property(_pyvacon_swig.BasePricingData_pricingRequest_get, _pyvacon_swig.BasePricingData_pricingRequest_set, doc=r"""pricingRequest : std::shared_ptr<(q(const).PricingRequest)>""")

    @staticmethod
    def load(filename):
        r"""load(std::string filename) -> std::shared_ptr< BasePricingData >"""
        return _pyvacon_swig.BasePricingData_load(filename)

    @staticmethod
    def save(filename, data):
        r"""save(std::string filename, std::shared_ptr< BasePricingData > const & data)"""
        return _pyvacon_swig.BasePricingData_save(filename, data)
    __swig_destroy__ = _pyvacon_swig.delete_BasePricingData

# Register BasePricingData in _pyvacon_swig:
_pyvacon_swig.BasePricingData_swigregister(BasePricingData)

def BasePricingData_load(filename):
    r"""BasePricingData_load(std::string filename) -> std::shared_ptr< BasePricingData >"""
    return _pyvacon_swig.BasePricingData_load(filename)

def BasePricingData_save(filename, data):
    r"""BasePricingData_save(std::string filename, std::shared_ptr< BasePricingData > const & data)"""
    return _pyvacon_swig.BasePricingData_save(filename, data)

class LocalVolPdePricingData(BasePricingData):
    r"""Proxy of C++ LocalVolPdePricingData class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    spec = property(_pyvacon_swig.LocalVolPdePricingData_spec_get, _pyvacon_swig.LocalVolPdePricingData_spec_set, doc=r"""spec : std::shared_ptr<(q(const).BarrierSpecification)>""")
    vol = property(_pyvacon_swig.LocalVolPdePricingData_vol_get, _pyvacon_swig.LocalVolPdePricingData_vol_set, doc=r"""vol : std::shared_ptr<(q(const).VolatilitySurface)>""")
    dsc = property(_pyvacon_swig.LocalVolPdePricingData_dsc_get, _pyvacon_swig.LocalVolPdePricingData_dsc_set, doc=r"""dsc : std::shared_ptr<(q(const).DiscountCurve)>""")
    param = property(_pyvacon_swig.LocalVolPdePricingData_param_get, _pyvacon_swig.LocalVolPdePricingData_param_set, doc=r"""param : std::shared_ptr<(q(const).PdePricingParameter)>""")
    fxVol = property(_pyvacon_swig.LocalVolPdePricingData_fxVol_get, _pyvacon_swig.LocalVolPdePricingData_fxVol_set, doc=r"""fxVol : std::shared_ptr<(q(const).VolatilitySurface)>""")
    qtoCorr = property(_pyvacon_swig.LocalVolPdePricingData_qtoCorr_get, _pyvacon_swig.LocalVolPdePricingData_qtoCorr_set, doc=r"""qtoCorr : double""")

    def getClassName(self):
        r"""getClassName(LocalVolPdePricingData self) -> std::string"""
        return _pyvacon_swig.LocalVolPdePricingData_getClassName(self)

    @staticmethod
    def create_from(p):
        r"""create_from(std::shared_ptr< BasePricingData > p) -> std::shared_ptr< LocalVolPdePricingData >"""
        return _pyvacon_swig.LocalVolPdePricingData_create_from(p)

    def __init__(self):
        r"""__init__(LocalVolPdePricingData self) -> LocalVolPdePricingData"""
        _pyvacon_swig.LocalVolPdePricingData_swiginit(self, _pyvacon_swig.new_LocalVolPdePricingData())
    __swig_destroy__ = _pyvacon_swig.delete_LocalVolPdePricingData

# Register LocalVolPdePricingData in _pyvacon_swig:
_pyvacon_swig.LocalVolPdePricingData_swigregister(LocalVolPdePricingData)

def LocalVolPdePricingData_create_from(p):
    r"""LocalVolPdePricingData_create_from(std::shared_ptr< BasePricingData > p) -> std::shared_ptr< LocalVolPdePricingData >"""
    return _pyvacon_swig.LocalVolPdePricingData_create_from(p)

class ComboPricingData(BasePricingData):
    r"""Proxy of C++ ComboPricingData class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    spec = property(_pyvacon_swig.ComboPricingData_spec_get, _pyvacon_swig.ComboPricingData_spec_set, doc=r"""spec : std::shared_ptr<(q(const).ComboSpecification)>""")
    pricingData = property(_pyvacon_swig.ComboPricingData_pricingData_get, _pyvacon_swig.ComboPricingData_pricingData_set, doc=r"""pricingData : std::vector<(std::shared_ptr<(BasePricingData)>,std::allocator<(std::shared_ptr<(BasePricingData)>)>)>""")

    def getClassName(self):
        r"""getClassName(ComboPricingData self) -> std::string"""
        return _pyvacon_swig.ComboPricingData_getClassName(self)

    def addPricingData(self, prData):
        r"""addPricingData(ComboPricingData self, std::shared_ptr< BasePricingData > prData)"""
        return _pyvacon_swig.ComboPricingData_addPricingData(self, prData)

    def __init__(self, *args):
        r"""
        __init__(ComboPricingData self) -> ComboPricingData
        __init__(ComboPricingData self, std::shared_ptr< ComboSpecification const > _spec, vectorLocalVolPdePricingData _pricingData) -> ComboPricingData
        """
        _pyvacon_swig.ComboPricingData_swiginit(self, _pyvacon_swig.new_ComboPricingData(*args))

    @staticmethod
    def create_from(p):
        r"""create_from(std::shared_ptr< BasePricingData > p) -> std::shared_ptr< ComboPricingData >"""
        return _pyvacon_swig.ComboPricingData_create_from(p)

    def getLocalVolPdePricingData(self):
        r"""getLocalVolPdePricingData(ComboPricingData self) -> vectorLocalVolPdePricingData"""
        return _pyvacon_swig.ComboPricingData_getLocalVolPdePricingData(self)
    __swig_destroy__ = _pyvacon_swig.delete_ComboPricingData

# Register ComboPricingData in _pyvacon_swig:
_pyvacon_swig.ComboPricingData_swigregister(ComboPricingData)

def ComboPricingData_create_from(p):
    r"""ComboPricingData_create_from(std::shared_ptr< BasePricingData > p) -> std::shared_ptr< ComboPricingData >"""
    return _pyvacon_swig.ComboPricingData_create_from(p)

class AsianRiskControlPricingData(BasePricingData):
    r"""Proxy of C++ AsianRiskControlPricingData class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    spec = property(_pyvacon_swig.AsianRiskControlPricingData_spec_get, _pyvacon_swig.AsianRiskControlPricingData_spec_set, doc=r"""spec : std::shared_ptr<(q(const).AsianRiskControlSpecification)>""")
    vol = property(_pyvacon_swig.AsianRiskControlPricingData_vol_get, _pyvacon_swig.AsianRiskControlPricingData_vol_set, doc=r"""vol : std::shared_ptr<(q(const).VolatilitySurface)>""")
    dsc = property(_pyvacon_swig.AsianRiskControlPricingData_dsc_get, _pyvacon_swig.AsianRiskControlPricingData_dsc_set, doc=r"""dsc : std::shared_ptr<(q(const).DiscountCurve)>""")
    model = property(_pyvacon_swig.AsianRiskControlPricingData_model_get, _pyvacon_swig.AsianRiskControlPricingData_model_set, doc=r"""model : std::shared_ptr<(q(const).BaseModel)>""")
    param = property(_pyvacon_swig.AsianRiskControlPricingData_param_get, _pyvacon_swig.AsianRiskControlPricingData_param_set, doc=r"""param : std::shared_ptr<(q(const).MonteCarloPricingParameter)>""")
    fxVol = property(_pyvacon_swig.AsianRiskControlPricingData_fxVol_get, _pyvacon_swig.AsianRiskControlPricingData_fxVol_set, doc=r"""fxVol : std::shared_ptr<(q(const).VolatilitySurface)>""")
    qtoCorr = property(_pyvacon_swig.AsianRiskControlPricingData_qtoCorr_get, _pyvacon_swig.AsianRiskControlPricingData_qtoCorr_set, doc=r"""qtoCorr : double""")
    spotFixings = property(_pyvacon_swig.AsianRiskControlPricingData_spotFixings_get, _pyvacon_swig.AsianRiskControlPricingData_spotFixings_set, doc=r"""spotFixings : std::vector<(double,std::allocator<(double)>)>""")
    indexFixings = property(_pyvacon_swig.AsianRiskControlPricingData_indexFixings_get, _pyvacon_swig.AsianRiskControlPricingData_indexFixings_set, doc=r"""indexFixings : std::vector<(double,std::allocator<(double)>)>""")
    lastWeight = property(_pyvacon_swig.AsianRiskControlPricingData_lastWeight_get, _pyvacon_swig.AsianRiskControlPricingData_lastWeight_set, doc=r"""lastWeight : double""")
    currentRCI = property(_pyvacon_swig.AsianRiskControlPricingData_currentRCI_get, _pyvacon_swig.AsianRiskControlPricingData_currentRCI_set, doc=r"""currentRCI : double""")

    def getClassName(self):
        r"""getClassName(AsianRiskControlPricingData self) -> std::string"""
        return _pyvacon_swig.AsianRiskControlPricingData_getClassName(self)

    def __init__(self):
        r"""__init__(AsianRiskControlPricingData self) -> AsianRiskControlPricingData"""
        _pyvacon_swig.AsianRiskControlPricingData_swiginit(self, _pyvacon_swig.new_AsianRiskControlPricingData())
    __swig_destroy__ = _pyvacon_swig.delete_AsianRiskControlPricingData

# Register AsianRiskControlPricingData in _pyvacon_swig:
_pyvacon_swig.AsianRiskControlPricingData_swigregister(AsianRiskControlPricingData)

class InterestRateSwapLegPricingData(object):
    r"""Proxy of C++ InterestRateSwapLegPricingData class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    spec = property(_pyvacon_swig.InterestRateSwapLegPricingData_spec_get, _pyvacon_swig.InterestRateSwapLegPricingData_spec_set, doc=r"""spec : std::shared_ptr<(q(const).IrSwapLegSpecification)>""")
    discountCurve = property(_pyvacon_swig.InterestRateSwapLegPricingData_discountCurve_get, _pyvacon_swig.InterestRateSwapLegPricingData_discountCurve_set, doc=r"""discountCurve : std::shared_ptr<(q(const).DiscountCurve)>""")
    fxRate = property(_pyvacon_swig.InterestRateSwapLegPricingData_fxRate_get, _pyvacon_swig.InterestRateSwapLegPricingData_fxRate_set, doc=r"""fxRate : double""")
    weight = property(_pyvacon_swig.InterestRateSwapLegPricingData_weight_get, _pyvacon_swig.InterestRateSwapLegPricingData_weight_set, doc=r"""weight : double""")

    def __init__(self):
        r"""__init__(InterestRateSwapLegPricingData self) -> InterestRateSwapLegPricingData"""
        _pyvacon_swig.InterestRateSwapLegPricingData_swiginit(self, _pyvacon_swig.new_InterestRateSwapLegPricingData())
    __swig_destroy__ = _pyvacon_swig.delete_InterestRateSwapLegPricingData

# Register InterestRateSwapLegPricingData in _pyvacon_swig:
_pyvacon_swig.InterestRateSwapLegPricingData_swigregister(InterestRateSwapLegPricingData)

class InterestRateSwapFloatLegPricingData(InterestRateSwapLegPricingData):
    r"""Proxy of C++ InterestRateSwapFloatLegPricingData class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    fixingCurve = property(_pyvacon_swig.InterestRateSwapFloatLegPricingData_fixingCurve_get, _pyvacon_swig.InterestRateSwapFloatLegPricingData_fixingCurve_set, doc=r"""fixingCurve : std::shared_ptr<(q(const).DiscountCurve)>""")

    def __init__(self):
        r"""__init__(InterestRateSwapFloatLegPricingData self) -> InterestRateSwapFloatLegPricingData"""
        _pyvacon_swig.InterestRateSwapFloatLegPricingData_swiginit(self, _pyvacon_swig.new_InterestRateSwapFloatLegPricingData())
    __swig_destroy__ = _pyvacon_swig.delete_InterestRateSwapFloatLegPricingData

# Register InterestRateSwapFloatLegPricingData in _pyvacon_swig:
_pyvacon_swig.InterestRateSwapFloatLegPricingData_swigregister(InterestRateSwapFloatLegPricingData)

class InterestRateSwapPricingData(BasePricingData):
    r"""Proxy of C++ InterestRateSwapPricingData class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    legPricingData = property(_pyvacon_swig.InterestRateSwapPricingData_legPricingData_get, _pyvacon_swig.InterestRateSwapPricingData_legPricingData_set, doc=r"""legPricingData : std::vector<(std::shared_ptr<(InterestRateSwapLegPricingData)>,std::allocator<(std::shared_ptr<(InterestRateSwapLegPricingData)>)>)>""")
    param = property(_pyvacon_swig.InterestRateSwapPricingData_param_get, _pyvacon_swig.InterestRateSwapPricingData_param_set, doc=r"""param : std::shared_ptr<(q(const).InterestRateSwapPricingParameter)>""")
    swapCurr = property(_pyvacon_swig.InterestRateSwapPricingData_swapCurr_get, _pyvacon_swig.InterestRateSwapPricingData_swapCurr_set, doc=r"""swapCurr : Currency""")

    def getClassName(self):
        r"""getClassName(InterestRateSwapPricingData self) -> std::string"""
        return _pyvacon_swig.InterestRateSwapPricingData_getClassName(self)

    def setCurr(self, c):
        r"""setCurr(InterestRateSwapPricingData self, std::string c)"""
        return _pyvacon_swig.InterestRateSwapPricingData_setCurr(self, c)

    def addLegData(self, legData):
        r"""addLegData(InterestRateSwapPricingData self, std::shared_ptr< InterestRateSwapLegPricingData > legData)"""
        return _pyvacon_swig.InterestRateSwapPricingData_addLegData(self, legData)

    def __init__(self):
        r"""__init__(InterestRateSwapPricingData self) -> InterestRateSwapPricingData"""
        _pyvacon_swig.InterestRateSwapPricingData_swiginit(self, _pyvacon_swig.new_InterestRateSwapPricingData())
    __swig_destroy__ = _pyvacon_swig.delete_InterestRateSwapPricingData

# Register InterestRateSwapPricingData in _pyvacon_swig:
_pyvacon_swig.InterestRateSwapPricingData_swigregister(InterestRateSwapPricingData)

class BondPricingData(BasePricingData):
    r"""Proxy of C++ BondPricingData class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    spec = property(_pyvacon_swig.BondPricingData_spec_get, _pyvacon_swig.BondPricingData_spec_set, doc=r"""spec : std::shared_ptr<(q(const).BondSpecification)>""")
    discountCurve = property(_pyvacon_swig.BondPricingData_discountCurve_get, _pyvacon_swig.BondPricingData_discountCurve_set, doc=r"""discountCurve : std::shared_ptr<(q(const).DiscountCurve)>""")
    fixingCurve = property(_pyvacon_swig.BondPricingData_fixingCurve_get, _pyvacon_swig.BondPricingData_fixingCurve_set, doc=r"""fixingCurve : std::shared_ptr<(q(const).DiscountCurve)>""")
    sc = property(_pyvacon_swig.BondPricingData_sc_get, _pyvacon_swig.BondPricingData_sc_set, doc=r"""sc : std::shared_ptr<(q(const).SurvivalCurve)>""")
    recoveryCurve = property(_pyvacon_swig.BondPricingData_recoveryCurve_get, _pyvacon_swig.BondPricingData_recoveryCurve_set, doc=r"""recoveryCurve : std::shared_ptr<(q(const).BaseDatedCurve)>""")
    param = property(_pyvacon_swig.BondPricingData_param_get, _pyvacon_swig.BondPricingData_param_set, doc=r"""param : std::shared_ptr<(q(const).BondPricingParameter)>""")
    pastFixing = property(_pyvacon_swig.BondPricingData_pastFixing_get, _pyvacon_swig.BondPricingData_pastFixing_set, doc=r"""pastFixing : double""")

    def getClassName(self):
        r"""getClassName(BondPricingData self) -> std::string"""
        return _pyvacon_swig.BondPricingData_getClassName(self)

    def __init__(self):
        r"""__init__(BondPricingData self) -> BondPricingData"""
        _pyvacon_swig.BondPricingData_swiginit(self, _pyvacon_swig.new_BondPricingData())
    __swig_destroy__ = _pyvacon_swig.delete_BondPricingData

# Register BondPricingData in _pyvacon_swig:
_pyvacon_swig.BondPricingData_swigregister(BondPricingData)

class InflationLinkedBondPricingData(BondPricingData):
    r"""Proxy of C++ InflationLinkedBondPricingData class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    inflationFwdCurve = property(_pyvacon_swig.InflationLinkedBondPricingData_inflationFwdCurve_get, _pyvacon_swig.InflationLinkedBondPricingData_inflationFwdCurve_set, doc=r"""inflationFwdCurve : std::shared_ptr<(q(const).InflationIndexForwardCurve)>""")
    inflationFixingReference1 = property(_pyvacon_swig.InflationLinkedBondPricingData_inflationFixingReference1_get, _pyvacon_swig.InflationLinkedBondPricingData_inflationFixingReference1_set, doc=r"""inflationFixingReference1 : double""")
    inflationFixingReference2 = property(_pyvacon_swig.InflationLinkedBondPricingData_inflationFixingReference2_get, _pyvacon_swig.InflationLinkedBondPricingData_inflationFixingReference2_set, doc=r"""inflationFixingReference2 : double""")
    inflationFixing1 = property(_pyvacon_swig.InflationLinkedBondPricingData_inflationFixing1_get, _pyvacon_swig.InflationLinkedBondPricingData_inflationFixing1_set, doc=r"""inflationFixing1 : double""")
    inflationFixing2 = property(_pyvacon_swig.InflationLinkedBondPricingData_inflationFixing2_get, _pyvacon_swig.InflationLinkedBondPricingData_inflationFixing2_set, doc=r"""inflationFixing2 : double""")

    def getClassName(self):
        r"""getClassName(InflationLinkedBondPricingData self) -> std::string"""
        return _pyvacon_swig.InflationLinkedBondPricingData_getClassName(self)

    def __init__(self):
        r"""__init__(InflationLinkedBondPricingData self) -> InflationLinkedBondPricingData"""
        _pyvacon_swig.InflationLinkedBondPricingData_swiginit(self, _pyvacon_swig.new_InflationLinkedBondPricingData())
    __swig_destroy__ = _pyvacon_swig.delete_InflationLinkedBondPricingData

# Register InflationLinkedBondPricingData in _pyvacon_swig:
_pyvacon_swig.InflationLinkedBondPricingData_swigregister(InflationLinkedBondPricingData)

class CallableBondPdePricingData(BasePricingData):
    r"""Proxy of C++ CallableBondPdePricingData class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    spec = property(_pyvacon_swig.CallableBondPdePricingData_spec_get, _pyvacon_swig.CallableBondPdePricingData_spec_set, doc=r"""spec : std::shared_ptr<(q(const).CallableBondSpecification)>""")
    riskfreeCurve = property(_pyvacon_swig.CallableBondPdePricingData_riskfreeCurve_get, _pyvacon_swig.CallableBondPdePricingData_riskfreeCurve_set, doc=r"""riskfreeCurve : std::shared_ptr<(q(const).DiscountCurve)>""")
    model = property(_pyvacon_swig.CallableBondPdePricingData_model_get, _pyvacon_swig.CallableBondPdePricingData_model_set, doc=r"""model : std::shared_ptr<(q(const).ShortRateModel1D)>""")
    recovery = property(_pyvacon_swig.CallableBondPdePricingData_recovery_get, _pyvacon_swig.CallableBondPdePricingData_recovery_set, doc=r"""recovery : std::shared_ptr<(q(const).BaseDatedCurve)>""")
    sc = property(_pyvacon_swig.CallableBondPdePricingData_sc_get, _pyvacon_swig.CallableBondPdePricingData_sc_set, doc=r"""sc : std::shared_ptr<(q(const).SurvivalCurve)>""")
    param = property(_pyvacon_swig.CallableBondPdePricingData_param_get, _pyvacon_swig.CallableBondPdePricingData_param_set, doc=r"""param : std::shared_ptr<(q(const).CallableBondPdePricingParameter)>""")
    issuerRating = property(_pyvacon_swig.CallableBondPdePricingData_issuerRating_get, _pyvacon_swig.CallableBondPdePricingData_issuerRating_set, doc=r"""issuerRating : std::shared_ptr<(q(const).Rating)>""")
    transition = property(_pyvacon_swig.CallableBondPdePricingData_transition_get, _pyvacon_swig.CallableBondPdePricingData_transition_set, doc=r"""transition : std::shared_ptr<(q(const).RatingTransitionBase)>""")
    pastFixing = property(_pyvacon_swig.CallableBondPdePricingData_pastFixing_get, _pyvacon_swig.CallableBondPdePricingData_pastFixing_set, doc=r"""pastFixing : double""")

    def getClassName(self):
        r"""getClassName(CallableBondPdePricingData self) -> std::string"""
        return _pyvacon_swig.CallableBondPdePricingData_getClassName(self)

    def __init__(self):
        r"""__init__(CallableBondPdePricingData self) -> CallableBondPdePricingData"""
        _pyvacon_swig.CallableBondPdePricingData_swiginit(self, _pyvacon_swig.new_CallableBondPdePricingData())
    __swig_destroy__ = _pyvacon_swig.delete_CallableBondPdePricingData

# Register CallableBondPdePricingData in _pyvacon_swig:
_pyvacon_swig.CallableBondPdePricingData_swigregister(CallableBondPdePricingData)

class Black76PricingData(BasePricingData):
    r"""Proxy of C++ Black76PricingData class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    spec = property(_pyvacon_swig.Black76PricingData_spec_get, _pyvacon_swig.Black76PricingData_spec_set, doc=r"""spec : std::shared_ptr<(q(const).EuropeanVanillaSpecification)>""")
    vol = property(_pyvacon_swig.Black76PricingData_vol_get, _pyvacon_swig.Black76PricingData_vol_set, doc=r"""vol : std::shared_ptr<(q(const).VolatilitySurface)>""")
    dsc = property(_pyvacon_swig.Black76PricingData_dsc_get, _pyvacon_swig.Black76PricingData_dsc_set, doc=r"""dsc : std::shared_ptr<(q(const).DiscountCurve)>""")
    param = property(_pyvacon_swig.Black76PricingData_param_get, _pyvacon_swig.Black76PricingData_param_set, doc=r"""param : std::shared_ptr<(q(const).PricingParameter)>""")

    def getClassName(self):
        r"""getClassName(Black76PricingData self) -> std::string"""
        return _pyvacon_swig.Black76PricingData_getClassName(self)

    @staticmethod
    def create_from(p):
        r"""create_from(std::shared_ptr< BasePricingData > p) -> std::shared_ptr< Black76PricingData >"""
        return _pyvacon_swig.Black76PricingData_create_from(p)

    def __init__(self):
        r"""__init__(Black76PricingData self) -> Black76PricingData"""
        _pyvacon_swig.Black76PricingData_swiginit(self, _pyvacon_swig.new_Black76PricingData())
    __swig_destroy__ = _pyvacon_swig.delete_Black76PricingData

# Register Black76PricingData in _pyvacon_swig:
_pyvacon_swig.Black76PricingData_swigregister(Black76PricingData)

def Black76PricingData_create_from(p):
    r"""Black76PricingData_create_from(std::shared_ptr< BasePricingData > p) -> std::shared_ptr< Black76PricingData >"""
    return _pyvacon_swig.Black76PricingData_create_from(p)

class LocalVolMonteCarloPricingData(BasePricingData):
    r"""Proxy of C++ LocalVolMonteCarloPricingData class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    spec = property(_pyvacon_swig.LocalVolMonteCarloPricingData_spec_get, _pyvacon_swig.LocalVolMonteCarloPricingData_spec_set, doc=r"""spec : std::shared_ptr<(q(const).LocalVolMonteCarloSpecification)>""")
    vols = property(_pyvacon_swig.LocalVolMonteCarloPricingData_vols_get, _pyvacon_swig.LocalVolMonteCarloPricingData_vols_set, doc=r"""vols : std::vector<(std::shared_ptr<(q(const).VolatilitySurface)>,std::allocator<(std::shared_ptr<(q(const).VolatilitySurface)>)>)>""")
    qtoCorrs = property(_pyvacon_swig.LocalVolMonteCarloPricingData_qtoCorrs_get, _pyvacon_swig.LocalVolMonteCarloPricingData_qtoCorrs_set, doc=r"""qtoCorrs : std::vector<(double,std::allocator<(double)>)>""")
    fxVols = property(_pyvacon_swig.LocalVolMonteCarloPricingData_fxVols_get, _pyvacon_swig.LocalVolMonteCarloPricingData_fxVols_set, doc=r"""fxVols : std::vector<(std::shared_ptr<(q(const).VolatilitySurface)>,std::allocator<(std::shared_ptr<(q(const).VolatilitySurface)>)>)>""")
    dsc = property(_pyvacon_swig.LocalVolMonteCarloPricingData_dsc_get, _pyvacon_swig.LocalVolMonteCarloPricingData_dsc_set, doc=r"""dsc : std::shared_ptr<(q(const).DiscountCurve)>""")
    param = property(_pyvacon_swig.LocalVolMonteCarloPricingData_param_get, _pyvacon_swig.LocalVolMonteCarloPricingData_param_set, doc=r"""param : std::shared_ptr<(q(const).MonteCarloPricingParameter)>""")
    correlationModel = property(_pyvacon_swig.LocalVolMonteCarloPricingData_correlationModel_get, _pyvacon_swig.LocalVolMonteCarloPricingData_correlationModel_set, doc=r"""correlationModel : std::shared_ptr<(q(const).CorrelationModel)>""")

    def getClassName(self):
        r"""getClassName(LocalVolMonteCarloPricingData self) -> std::string"""
        return _pyvacon_swig.LocalVolMonteCarloPricingData_getClassName(self)

    def setCorrelations(self, correlations):
        r"""setCorrelations(LocalVolMonteCarloPricingData self, vectorVectorDouble correlations)"""
        return _pyvacon_swig.LocalVolMonteCarloPricingData_setCorrelations(self, correlations)

    def getCorrelations(self, correlations):
        r"""getCorrelations(LocalVolMonteCarloPricingData self, vectorVectorDouble correlations)"""
        return _pyvacon_swig.LocalVolMonteCarloPricingData_getCorrelations(self, correlations)

    def __init__(self):
        r"""__init__(LocalVolMonteCarloPricingData self) -> LocalVolMonteCarloPricingData"""
        _pyvacon_swig.LocalVolMonteCarloPricingData_swiginit(self, _pyvacon_swig.new_LocalVolMonteCarloPricingData())
    __swig_destroy__ = _pyvacon_swig.delete_LocalVolMonteCarloPricingData

# Register LocalVolMonteCarloPricingData in _pyvacon_swig:
_pyvacon_swig.LocalVolMonteCarloPricingData_swigregister(LocalVolMonteCarloPricingData)

class StochasticVolMonteCarloPricingData(LocalVolMonteCarloPricingData):
    r"""Proxy of C++ StochasticVolMonteCarloPricingData class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    models = property(_pyvacon_swig.StochasticVolMonteCarloPricingData_models_get, _pyvacon_swig.StochasticVolMonteCarloPricingData_models_set, doc=r"""models : std::vector<(std::shared_ptr<(q(const).BaseModel)>,std::allocator<(std::shared_ptr<(q(const).BaseModel)>)>)>""")

    def getClassName(self):
        r"""getClassName(StochasticVolMonteCarloPricingData self) -> std::string"""
        return _pyvacon_swig.StochasticVolMonteCarloPricingData_getClassName(self)

    def setSpotVarianceCorrelations(self, correlations):
        r"""setSpotVarianceCorrelations(StochasticVolMonteCarloPricingData self, vectorVectorDouble correlations)"""
        return _pyvacon_swig.StochasticVolMonteCarloPricingData_setSpotVarianceCorrelations(self, correlations)

    def setVarianceVarianceCorrelations(self, correlations):
        r"""setVarianceVarianceCorrelations(StochasticVolMonteCarloPricingData self, vectorVectorDouble correlations)"""
        return _pyvacon_swig.StochasticVolMonteCarloPricingData_setVarianceVarianceCorrelations(self, correlations)

    def __init__(self):
        r"""__init__(StochasticVolMonteCarloPricingData self) -> StochasticVolMonteCarloPricingData"""
        _pyvacon_swig.StochasticVolMonteCarloPricingData_swiginit(self, _pyvacon_swig.new_StochasticVolMonteCarloPricingData())
    __swig_destroy__ = _pyvacon_swig.delete_StochasticVolMonteCarloPricingData

# Register StochasticVolMonteCarloPricingData in _pyvacon_swig:
_pyvacon_swig.StochasticVolMonteCarloPricingData_swigregister(StochasticVolMonteCarloPricingData)

class BasePricer(object):
    r"""Proxy of C++ BasePricer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getClassName(self):
        r"""getClassName(BasePricer self) -> std::string"""
        return _pyvacon_swig.BasePricer_getClassName(self)

    @staticmethod
    def price(*args):
        r"""
        price(std::shared_ptr< BaseSpecification const > const & spec, ptime valDate, std::shared_ptr< PricingRequest const > const & pr, std::shared_ptr< MarketDataManager const > const & mktData, std::shared_ptr< ParameterManager const > const param, std::shared_ptr< CalibrationStorage > const & calibStore) -> std::shared_ptr< PricingResults >
        price(std::shared_ptr< BasePricingData const > const & pricingData) -> std::shared_ptr< PricingResults >
        """
        return _pyvacon_swig.BasePricer_price(*args)

    @staticmethod
    def getPricingData(spec, valDate, pricingRequest, mktData, param, calibStore):
        r"""getPricingData(std::shared_ptr< BaseSpecification const > spec, ptime valDate, std::shared_ptr< PricingRequest const > const & pricingRequest, std::shared_ptr< MarketDataManager const > const & mktData, std::shared_ptr< ParameterManager const > const & param, std::shared_ptr< CalibrationStorage > const & calibStore) -> std::shared_ptr< BasePricingData >"""
        return _pyvacon_swig.BasePricer_getPricingData(spec, valDate, pricingRequest, mktData, param, calibStore)
    __swig_destroy__ = _pyvacon_swig.delete_BasePricer

# Register BasePricer in _pyvacon_swig:
_pyvacon_swig.BasePricer_swigregister(BasePricer)

def BasePricer_price(*args):
    r"""
    BasePricer_price(std::shared_ptr< BaseSpecification const > const & spec, ptime valDate, std::shared_ptr< PricingRequest const > const & pr, std::shared_ptr< MarketDataManager const > const & mktData, std::shared_ptr< ParameterManager const > const param, std::shared_ptr< CalibrationStorage > const & calibStore) -> std::shared_ptr< PricingResults >
    BasePricer_price(std::shared_ptr< BasePricingData const > const & pricingData) -> std::shared_ptr< PricingResults >
    """
    return _pyvacon_swig.BasePricer_price(*args)

def BasePricer_getPricingData(spec, valDate, pricingRequest, mktData, param, calibStore):
    r"""BasePricer_getPricingData(std::shared_ptr< BaseSpecification const > spec, ptime valDate, std::shared_ptr< PricingRequest const > const & pricingRequest, std::shared_ptr< MarketDataManager const > const & mktData, std::shared_ptr< ParameterManager const > const & param, std::shared_ptr< CalibrationStorage > const & calibStore) -> std::shared_ptr< BasePricingData >"""
    return _pyvacon_swig.BasePricer_getPricingData(spec, valDate, pricingRequest, mktData, param, calibStore)

class LocalVolPdePricer(BasePricer):
    r"""Proxy of C++ LocalVolPdePricer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getClassName(self):
        r"""getClassName(LocalVolPdePricer self) -> std::string"""
        return _pyvacon_swig.LocalVolPdePricer_getClassName(self)

    @staticmethod
    def calcImpliedVol(*args):
        r"""calcImpliedVol(double targetPrice, boost::posix_time::ptime const & valDate, std::shared_ptr< BarrierSpecification const > spec, std::shared_ptr< ForwardCurve const > fwd, std::shared_ptr< DiscountCurve const > dsc, std::shared_ptr< PdePricingParameter const > param=0, DayCounter::Type const & dc=_Type_Act365Fixed, double hint=0.25) -> double"""
        return _pyvacon_swig.LocalVolPdePricer_calcImpliedVol(*args)

    def __init__(self):
        r"""__init__(LocalVolPdePricer self) -> LocalVolPdePricer"""
        _pyvacon_swig.LocalVolPdePricer_swiginit(self, _pyvacon_swig.new_LocalVolPdePricer())
    __swig_destroy__ = _pyvacon_swig.delete_LocalVolPdePricer

# Register LocalVolPdePricer in _pyvacon_swig:
_pyvacon_swig.LocalVolPdePricer_swigregister(LocalVolPdePricer)

def LocalVolPdePricer_calcImpliedVol(*args):
    r"""LocalVolPdePricer_calcImpliedVol(double targetPrice, boost::posix_time::ptime const & valDate, std::shared_ptr< BarrierSpecification const > spec, std::shared_ptr< ForwardCurve const > fwd, std::shared_ptr< DiscountCurve const > dsc, std::shared_ptr< PdePricingParameter const > param=0, DayCounter::Type const & dc=_Type_Act365Fixed, double hint=0.25) -> double"""
    return _pyvacon_swig.LocalVolPdePricer_calcImpliedVol(*args)

class BondPricer(BasePricer):
    r"""Proxy of C++ BondPricer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getClassName(self):
        r"""getClassName(BondPricer self) -> std::string"""
        return _pyvacon_swig.BondPricer_getClassName(self)

    @staticmethod
    def computeZSpread(valDate, spec, dsc, price, isCleanPrice=True, maxIter=100):
        r"""computeZSpread(ptime valDate, std::shared_ptr< BondSpecification const > spec, std::shared_ptr< DiscountCurve const > dsc, double price, bool isCleanPrice=True, size_t maxIter=100) -> double"""
        return _pyvacon_swig.BondPricer_computeZSpread(valDate, spec, dsc, price, isCleanPrice, maxIter)

    @staticmethod
    def price(*args):
        r"""
        price(PricingResults results, ptime valDate, std::shared_ptr< BondSpecification const > spec, std::shared_ptr< DiscountCurve const > riskfreeDiscount, std::shared_ptr< SurvivalCurve const > sc, std::shared_ptr< BaseDatedCurve const > recoveryCurve, PricingRequest pricingRequest)
        price(PricingResults results, ptime valDate, std::shared_ptr< BondSpecification const > spec, std::shared_ptr< DiscountCurve const > riskfreeDiscount, std::shared_ptr< DiscountCurve const > forwardRateCurve, double fixedRate, std::shared_ptr< SurvivalCurve const > sc, std::shared_ptr< BaseDatedCurve const > recoveryCurve, PricingRequest pricingRequest)
        """
        return _pyvacon_swig.BondPricer_price(*args)

    def __init__(self):
        r"""__init__(BondPricer self) -> BondPricer"""
        _pyvacon_swig.BondPricer_swiginit(self, _pyvacon_swig.new_BondPricer())
    __swig_destroy__ = _pyvacon_swig.delete_BondPricer

# Register BondPricer in _pyvacon_swig:
_pyvacon_swig.BondPricer_swigregister(BondPricer)

def BondPricer_computeZSpread(valDate, spec, dsc, price, isCleanPrice=True, maxIter=100):
    r"""BondPricer_computeZSpread(ptime valDate, std::shared_ptr< BondSpecification const > spec, std::shared_ptr< DiscountCurve const > dsc, double price, bool isCleanPrice=True, size_t maxIter=100) -> double"""
    return _pyvacon_swig.BondPricer_computeZSpread(valDate, spec, dsc, price, isCleanPrice, maxIter)

def BondPricer_price(*args):
    r"""
    BondPricer_price(PricingResults results, ptime valDate, std::shared_ptr< BondSpecification const > spec, std::shared_ptr< DiscountCurve const > riskfreeDiscount, std::shared_ptr< SurvivalCurve const > sc, std::shared_ptr< BaseDatedCurve const > recoveryCurve, PricingRequest pricingRequest)
    BondPricer_price(PricingResults results, ptime valDate, std::shared_ptr< BondSpecification const > spec, std::shared_ptr< DiscountCurve const > riskfreeDiscount, std::shared_ptr< DiscountCurve const > forwardRateCurve, double fixedRate, std::shared_ptr< SurvivalCurve const > sc, std::shared_ptr< BaseDatedCurve const > recoveryCurve, PricingRequest pricingRequest)
    """
    return _pyvacon_swig.BondPricer_price(*args)

class InflationLinkedBondPricer(BasePricer):
    r"""Proxy of C++ InflationLinkedBondPricer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getClassName(self):
        r"""getClassName(InflationLinkedBondPricer self) -> std::string"""
        return _pyvacon_swig.InflationLinkedBondPricer_getClassName(self)

    @staticmethod
    def price(results, valDate, spec, dsc, pricingRequest, inflFwd, inflationFixingReference1, inflationFixingReference2, inflationFixing1, inflationFixing2, fwd=0, fixing=0):
        r"""price(PricingResults results, ptime valDate, std::shared_ptr< InflationLinkedBondSpecification const > spec, std::shared_ptr< DiscountCurve const > dsc, PricingRequest pricingRequest, std::shared_ptr< InflationIndexForwardCurve const > inflFwd, double inflationFixingReference1, double inflationFixingReference2, double inflationFixing1, double inflationFixing2, std::shared_ptr< DiscountCurve const > fwd=0, double fixing=0)"""
        return _pyvacon_swig.InflationLinkedBondPricer_price(results, valDate, spec, dsc, pricingRequest, inflFwd, inflationFixingReference1, inflationFixingReference2, inflationFixing1, inflationFixing2, fwd, fixing)

    def __init__(self):
        r"""__init__(InflationLinkedBondPricer self) -> InflationLinkedBondPricer"""
        _pyvacon_swig.InflationLinkedBondPricer_swiginit(self, _pyvacon_swig.new_InflationLinkedBondPricer())
    __swig_destroy__ = _pyvacon_swig.delete_InflationLinkedBondPricer

# Register InflationLinkedBondPricer in _pyvacon_swig:
_pyvacon_swig.InflationLinkedBondPricer_swigregister(InflationLinkedBondPricer)

def InflationLinkedBondPricer_price(results, valDate, spec, dsc, pricingRequest, inflFwd, inflationFixingReference1, inflationFixingReference2, inflationFixing1, inflationFixing2, fwd=0, fixing=0):
    r"""InflationLinkedBondPricer_price(PricingResults results, ptime valDate, std::shared_ptr< InflationLinkedBondSpecification const > spec, std::shared_ptr< DiscountCurve const > dsc, PricingRequest pricingRequest, std::shared_ptr< InflationIndexForwardCurve const > inflFwd, double inflationFixingReference1, double inflationFixingReference2, double inflationFixing1, double inflationFixing2, std::shared_ptr< DiscountCurve const > fwd=0, double fixing=0)"""
    return _pyvacon_swig.InflationLinkedBondPricer_price(results, valDate, spec, dsc, pricingRequest, inflFwd, inflationFixingReference1, inflationFixingReference2, inflationFixing1, inflationFixing2, fwd, fixing)

class CallableBondPdePricer(BasePricer):
    r"""Proxy of C++ CallableBondPdePricer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(CallableBondPdePricer self) -> CallableBondPdePricer"""
        _pyvacon_swig.CallableBondPdePricer_swiginit(self, _pyvacon_swig.new_CallableBondPdePricer())
    __swig_destroy__ = _pyvacon_swig.delete_CallableBondPdePricer

# Register CallableBondPdePricer in _pyvacon_swig:
_pyvacon_swig.CallableBondPdePricer_swigregister(CallableBondPdePricer)

class PathGeneratorParameter(BaseParameter):
    r"""Proxy of C++ PathGeneration::PathGeneratorParameter class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PathGeneratorParameter self) -> PathGeneratorParameter"""
        _pyvacon_swig.PathGeneratorParameter_swiginit(self, _pyvacon_swig.new_PathGeneratorParameter())
    numberOfSimulations = property(_pyvacon_swig.PathGeneratorParameter_numberOfSimulations_get, _pyvacon_swig.PathGeneratorParameter_numberOfSimulations_set, doc=r"""numberOfSimulations : size_t""")
    numberOfTimeStepsPerYear = property(_pyvacon_swig.PathGeneratorParameter_numberOfTimeStepsPerYear_get, _pyvacon_swig.PathGeneratorParameter_numberOfTimeStepsPerYear_set, doc=r"""numberOfTimeStepsPerYear : size_t""")
    maxNumThreads = property(_pyvacon_swig.PathGeneratorParameter_maxNumThreads_get, _pyvacon_swig.PathGeneratorParameter_maxNumThreads_set, doc=r"""maxNumThreads : size_t""")
    numberOfCheckpoints = property(_pyvacon_swig.PathGeneratorParameter_numberOfCheckpoints_get, _pyvacon_swig.PathGeneratorParameter_numberOfCheckpoints_set, doc=r"""numberOfCheckpoints : size_t""")
    includeSimTimesInCheckpoints = property(_pyvacon_swig.PathGeneratorParameter_includeSimTimesInCheckpoints_get, _pyvacon_swig.PathGeneratorParameter_includeSimTimesInCheckpoints_set, doc=r"""includeSimTimesInCheckpoints : bool""")
    rngSeed = property(_pyvacon_swig.PathGeneratorParameter_rngSeed_get, _pyvacon_swig.PathGeneratorParameter_rngSeed_set, doc=r"""rngSeed : size_t""")

    def getClassName(self):
        r"""getClassName(PathGeneratorParameter self) -> std::string"""
        return _pyvacon_swig.PathGeneratorParameter_getClassName(self)
    __swig_destroy__ = _pyvacon_swig.delete_PathGeneratorParameter

# Register PathGeneratorParameter in _pyvacon_swig:
_pyvacon_swig.PathGeneratorParameter_swigregister(PathGeneratorParameter)

class PreprocessingParameter(BaseParameter):
    r"""Proxy of C++ PreprocessingParameter class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(PreprocessingParameter self) -> PreprocessingParameter
        __init__(PreprocessingParameter self, std::string const & id) -> PreprocessingParameter
        """
        _pyvacon_swig.PreprocessingParameter_swiginit(self, _pyvacon_swig.new_PreprocessingParameter(*args))
    minExpiry = property(_pyvacon_swig.PreprocessingParameter_minExpiry_get, _pyvacon_swig.PreprocessingParameter_minExpiry_set, doc=r"""minExpiry : double""")
    maxExpiry = property(_pyvacon_swig.PreprocessingParameter_maxExpiry_get, _pyvacon_swig.PreprocessingParameter_maxExpiry_set, doc=r"""maxExpiry : double""")
    maxCallMoneyness = property(_pyvacon_swig.PreprocessingParameter_maxCallMoneyness_get, _pyvacon_swig.PreprocessingParameter_maxCallMoneyness_set, doc=r"""maxCallMoneyness : double""")
    minCallMoneyness = property(_pyvacon_swig.PreprocessingParameter_minCallMoneyness_get, _pyvacon_swig.PreprocessingParameter_minCallMoneyness_set, doc=r"""minCallMoneyness : double""")
    maxPutMoneyness = property(_pyvacon_swig.PreprocessingParameter_maxPutMoneyness_get, _pyvacon_swig.PreprocessingParameter_maxPutMoneyness_set, doc=r"""maxPutMoneyness : double""")
    minPutMoneyness = property(_pyvacon_swig.PreprocessingParameter_minPutMoneyness_get, _pyvacon_swig.PreprocessingParameter_minPutMoneyness_set, doc=r"""minPutMoneyness : double""")
    minNumberOfQuotesPerExpiry = property(_pyvacon_swig.PreprocessingParameter_minNumberOfQuotesPerExpiry_get, _pyvacon_swig.PreprocessingParameter_minNumberOfQuotesPerExpiry_set, doc=r"""minNumberOfQuotesPerExpiry : size_t""")
    targetNumberOfPutQuotesPerExpiry = property(_pyvacon_swig.PreprocessingParameter_targetNumberOfPutQuotesPerExpiry_get, _pyvacon_swig.PreprocessingParameter_targetNumberOfPutQuotesPerExpiry_set, doc=r"""targetNumberOfPutQuotesPerExpiry : size_t""")
    targetNumberOfCallQuotesPerExpiry = property(_pyvacon_swig.PreprocessingParameter_targetNumberOfCallQuotesPerExpiry_get, _pyvacon_swig.PreprocessingParameter_targetNumberOfCallQuotesPerExpiry_set, doc=r"""targetNumberOfCallQuotesPerExpiry : size_t""")
    exceptionLMNotConverged = property(_pyvacon_swig.PreprocessingParameter_exceptionLMNotConverged_get, _pyvacon_swig.PreprocessingParameter_exceptionLMNotConverged_set, doc=r"""exceptionLMNotConverged : bool""")
    dilateSettleQuotes = property(_pyvacon_swig.PreprocessingParameter_dilateSettleQuotes_get, _pyvacon_swig.PreprocessingParameter_dilateSettleQuotes_set, doc=r"""dilateSettleQuotes : bool""")
    atmfVolSpread = property(_pyvacon_swig.PreprocessingParameter_atmfVolSpread_get, _pyvacon_swig.PreprocessingParameter_atmfVolSpread_set, doc=r"""atmfVolSpread : double""")
    wingVolSpread = property(_pyvacon_swig.PreprocessingParameter_wingVolSpread_get, _pyvacon_swig.PreprocessingParameter_wingVolSpread_set, doc=r"""wingVolSpread : double""")

    def getClassName(self):
        r"""getClassName(PreprocessingParameter self) -> std::string"""
        return _pyvacon_swig.PreprocessingParameter_getClassName(self)
    __swig_destroy__ = _pyvacon_swig.delete_PreprocessingParameter

# Register PreprocessingParameter in _pyvacon_swig:
_pyvacon_swig.PreprocessingParameter_swigregister(PreprocessingParameter)

class VolatilityCalibratorParameter(BaseParameter):
    r"""Proxy of C++ VolatilityCalibratorParameter class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    americanAsEuropean = property(_pyvacon_swig.VolatilityCalibratorParameter_americanAsEuropean_get, _pyvacon_swig.VolatilityCalibratorParameter_americanAsEuropean_set, doc=r"""americanAsEuropean : bool""")
    nSpotStepsImpliedVol = property(_pyvacon_swig.VolatilityCalibratorParameter_nSpotStepsImpliedVol_get, _pyvacon_swig.VolatilityCalibratorParameter_nSpotStepsImpliedVol_set, doc=r"""nSpotStepsImpliedVol : int""")
    nTimeStepsPerYearImpliedVol = property(_pyvacon_swig.VolatilityCalibratorParameter_nTimeStepsPerYearImpliedVol_get, _pyvacon_swig.VolatilityCalibratorParameter_nTimeStepsPerYearImpliedVol_set, doc=r"""nTimeStepsPerYearImpliedVol : int""")
    calibrateToVols = property(_pyvacon_swig.VolatilityCalibratorParameter_calibrateToVols_get, _pyvacon_swig.VolatilityCalibratorParameter_calibrateToVols_set, doc=r"""calibrateToVols : bool""")
    spreadDependentWeights = property(_pyvacon_swig.VolatilityCalibratorParameter_spreadDependentWeights_get, _pyvacon_swig.VolatilityCalibratorParameter_spreadDependentWeights_set, doc=r"""spreadDependentWeights : bool""")

    def getCalibType(self):
        r"""getCalibType(VolatilityCalibratorParameter self) -> VolCalibType::Enum"""
        return _pyvacon_swig.VolatilityCalibratorParameter_getCalibType(self)
    prepParam = property(_pyvacon_swig.VolatilityCalibratorParameter_prepParam_get, _pyvacon_swig.VolatilityCalibratorParameter_prepParam_set, doc=r"""prepParam : std::shared_ptr<(PreprocessingParameter)>""")

    def getClassName(self):
        r"""getClassName(VolatilityCalibratorParameter self) -> std::string"""
        return _pyvacon_swig.VolatilityCalibratorParameter_getClassName(self)
    __swig_destroy__ = _pyvacon_swig.delete_VolatilityCalibratorParameter

# Register VolatilityCalibratorParameter in _pyvacon_swig:
_pyvacon_swig.VolatilityCalibratorParameter_swigregister(VolatilityCalibratorParameter)

class VolatilityCalibratorSSVIParameter(VolatilityCalibratorParameter):
    r"""Proxy of C++ VolatilityCalibratorSSVIParameter class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(VolatilityCalibratorSSVIParameter self) -> VolatilityCalibratorSSVIParameter"""
        _pyvacon_swig.VolatilityCalibratorSSVIParameter_swiginit(self, _pyvacon_swig.new_VolatilityCalibratorSSVIParameter())

    def getCalibType(self):
        r"""getCalibType(VolatilityCalibratorSSVIParameter self) -> VolCalibType::Enum"""
        return _pyvacon_swig.VolatilityCalibratorSSVIParameter_getCalibType(self)
    lmParam = property(_pyvacon_swig.VolatilityCalibratorSSVIParameter_lmParam_get, _pyvacon_swig.VolatilityCalibratorSSVIParameter_lmParam_set, doc=r"""lmParam : std::shared_ptr<(Optimization::LevenbergMarquardtParameter)>""")

    def getClassName(self):
        r"""getClassName(VolatilityCalibratorSSVIParameter self) -> std::string"""
        return _pyvacon_swig.VolatilityCalibratorSSVIParameter_getClassName(self)
    __swig_destroy__ = _pyvacon_swig.delete_VolatilityCalibratorSSVIParameter

# Register VolatilityCalibratorSSVIParameter in _pyvacon_swig:
_pyvacon_swig.VolatilityCalibratorSSVIParameter_swigregister(VolatilityCalibratorSSVIParameter)

class VolatilityCalibratorBackboneParameter(VolatilityCalibratorSSVIParameter):
    r"""Proxy of C++ VolatilityCalibratorBackboneParameter class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(VolatilityCalibratorBackboneParameter self) -> VolatilityCalibratorBackboneParameter"""
        _pyvacon_swig.VolatilityCalibratorBackboneParameter_swiginit(self, _pyvacon_swig.new_VolatilityCalibratorBackboneParameter())

    def getCalibType(self):
        r"""getCalibType(VolatilityCalibratorBackboneParameter self) -> VolCalibType::Enum"""
        return _pyvacon_swig.VolatilityCalibratorBackboneParameter_getCalibType(self)

    def getClassName(self):
        r"""getClassName(VolatilityCalibratorBackboneParameter self) -> std::string"""
        return _pyvacon_swig.VolatilityCalibratorBackboneParameter_getClassName(self)
    __swig_destroy__ = _pyvacon_swig.delete_VolatilityCalibratorBackboneParameter

# Register VolatilityCalibratorBackboneParameter in _pyvacon_swig:
_pyvacon_swig.VolatilityCalibratorBackboneParameter_swigregister(VolatilityCalibratorBackboneParameter)

class VolatilityCalibratorGridParameter(VolatilityCalibratorParameter):
    r"""Proxy of C++ VolatilityCalibratorGridParameter class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(VolatilityCalibratorGridParameter self) -> VolatilityCalibratorGridParameter"""
        _pyvacon_swig.VolatilityCalibratorGridParameter_swiginit(self, _pyvacon_swig.new_VolatilityCalibratorGridParameter())

    def getCalibType(self):
        r"""getCalibType(VolatilityCalibratorGridParameter self) -> VolCalibType::Enum"""
        return _pyvacon_swig.VolatilityCalibratorGridParameter_getCalibType(self)
    problemType = property(_pyvacon_swig.VolatilityCalibratorGridParameter_problemType_get, _pyvacon_swig.VolatilityCalibratorGridParameter_problemType_set, doc=r"""problemType : std::string""")
    solverEps = property(_pyvacon_swig.VolatilityCalibratorGridParameter_solverEps_get, _pyvacon_swig.VolatilityCalibratorGridParameter_solverEps_set, doc=r"""solverEps : double""")
    minVol = property(_pyvacon_swig.VolatilityCalibratorGridParameter_minVol_get, _pyvacon_swig.VolatilityCalibratorGridParameter_minVol_set, doc=r"""minVol : double""")
    maxVol = property(_pyvacon_swig.VolatilityCalibratorGridParameter_maxVol_get, _pyvacon_swig.VolatilityCalibratorGridParameter_maxVol_set, doc=r"""maxVol : double""")
    closeToBid = property(_pyvacon_swig.VolatilityCalibratorGridParameter_closeToBid_get, _pyvacon_swig.VolatilityCalibratorGridParameter_closeToBid_set, doc=r"""closeToBid : int""")
    useFixedGrid = property(_pyvacon_swig.VolatilityCalibratorGridParameter_useFixedGrid_get, _pyvacon_swig.VolatilityCalibratorGridParameter_useFixedGrid_set, doc=r"""useFixedGrid : bool""")
    minStrike = property(_pyvacon_swig.VolatilityCalibratorGridParameter_minStrike_get, _pyvacon_swig.VolatilityCalibratorGridParameter_minStrike_set, doc=r"""minStrike : double""")
    maxStrike = property(_pyvacon_swig.VolatilityCalibratorGridParameter_maxStrike_get, _pyvacon_swig.VolatilityCalibratorGridParameter_maxStrike_set, doc=r"""maxStrike : double""")
    nStrikes = property(_pyvacon_swig.VolatilityCalibratorGridParameter_nStrikes_get, _pyvacon_swig.VolatilityCalibratorGridParameter_nStrikes_set, doc=r"""nStrikes : size_t""")
    strikeInterpolation = property(_pyvacon_swig.VolatilityCalibratorGridParameter_strikeInterpolation_get, _pyvacon_swig.VolatilityCalibratorGridParameter_strikeInterpolation_set, doc=r"""strikeInterpolation : std::string""")
    nSmoothingSteps = property(_pyvacon_swig.VolatilityCalibratorGridParameter_nSmoothingSteps_get, _pyvacon_swig.VolatilityCalibratorGridParameter_nSmoothingSteps_set, doc=r"""nSmoothingSteps : size_t""")
    convexityCondition = property(_pyvacon_swig.VolatilityCalibratorGridParameter_convexityCondition_get, _pyvacon_swig.VolatilityCalibratorGridParameter_convexityCondition_set, doc=r"""convexityCondition : double""")
    calendarSpreadCondition = property(_pyvacon_swig.VolatilityCalibratorGridParameter_calendarSpreadCondition_get, _pyvacon_swig.VolatilityCalibratorGridParameter_calendarSpreadCondition_set, doc=r"""calendarSpreadCondition : double""")

    def getClassName(self):
        r"""getClassName(VolatilityCalibratorGridParameter self) -> std::string"""
        return _pyvacon_swig.VolatilityCalibratorGridParameter_getClassName(self)
    __swig_destroy__ = _pyvacon_swig.delete_VolatilityCalibratorGridParameter

# Register VolatilityCalibratorGridParameter in _pyvacon_swig:
_pyvacon_swig.VolatilityCalibratorGridParameter_swigregister(VolatilityCalibratorGridParameter)

class OptionQuote(object):
    r"""Proxy of C++ OptionQuote class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    UNDEFINED = property(_pyvacon_swig.OptionQuote_UNDEFINED_get, _pyvacon_swig.OptionQuote_UNDEFINED_set, doc=r"""UNDEFINED : double""")
    bidCall = property(_pyvacon_swig.OptionQuote_bidCall_get, _pyvacon_swig.OptionQuote_bidCall_set, doc=r"""bidCall : double""")
    bidPut = property(_pyvacon_swig.OptionQuote_bidPut_get, _pyvacon_swig.OptionQuote_bidPut_set, doc=r"""bidPut : double""")
    askCall = property(_pyvacon_swig.OptionQuote_askCall_get, _pyvacon_swig.OptionQuote_askCall_set, doc=r"""askCall : double""")
    askPut = property(_pyvacon_swig.OptionQuote_askPut_get, _pyvacon_swig.OptionQuote_askPut_set, doc=r"""askPut : double""")
    strike = property(_pyvacon_swig.OptionQuote_strike_get, _pyvacon_swig.OptionQuote_strike_set, doc=r"""strike : double""")

    def isValid(self, *args):
        r"""
        isValid(OptionQuote self, double x) -> bool
        isValid(OptionQuote self) -> bool
        """
        return _pyvacon_swig.OptionQuote_isValid(self, *args)

    def midCall(self):
        r"""midCall(OptionQuote self) -> double"""
        return _pyvacon_swig.OptionQuote_midCall(self)

    def midPut(self):
        r"""midPut(OptionQuote self) -> double"""
        return _pyvacon_swig.OptionQuote_midPut(self)

    def __init__(self):
        r"""__init__(OptionQuote self) -> OptionQuote"""
        _pyvacon_swig.OptionQuote_swiginit(self, _pyvacon_swig.new_OptionQuote())
    __swig_destroy__ = _pyvacon_swig.delete_OptionQuote

# Register OptionQuote in _pyvacon_swig:
_pyvacon_swig.OptionQuote_swigregister(OptionQuote)
cvar = _pyvacon_swig.cvar

class ForwardCalibratorParameter(BaseParameter):
    r"""Proxy of C++ ForwardCalibratorParameter class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    scaler = property(_pyvacon_swig.ForwardCalibratorParameter_scaler_get, _pyvacon_swig.ForwardCalibratorParameter_scaler_set, doc=r"""scaler : double""")
    atmScoreMax = property(_pyvacon_swig.ForwardCalibratorParameter_atmScoreMax_get, _pyvacon_swig.ForwardCalibratorParameter_atmScoreMax_set, doc=r"""atmScoreMax : double""")
    maxIter = property(_pyvacon_swig.ForwardCalibratorParameter_maxIter_get, _pyvacon_swig.ForwardCalibratorParameter_maxIter_set, doc=r"""maxIter : size_t""")

    def getClassName(self):
        r"""getClassName(ForwardCalibratorParameter self) -> std::string"""
        return _pyvacon_swig.ForwardCalibratorParameter_getClassName(self)

    def __init__(self):
        r"""__init__(ForwardCalibratorParameter self) -> ForwardCalibratorParameter"""
        _pyvacon_swig.ForwardCalibratorParameter_swiginit(self, _pyvacon_swig.new_ForwardCalibratorParameter())
    __swig_destroy__ = _pyvacon_swig.delete_ForwardCalibratorParameter

# Register ForwardCalibratorParameter in _pyvacon_swig:
_pyvacon_swig.ForwardCalibratorParameter_swigregister(ForwardCalibratorParameter)

class CalibrationRequest(object):
    r"""Proxy of C++ CalibrationRequest class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyvacon_swig.delete_CalibrationRequest

    def getClassName(self):
        r"""getClassName(CalibrationRequest self) -> std::string"""
        return _pyvacon_swig.CalibrationRequest_getClassName(self)

    def getCalibrationTime(self):
        r"""getCalibrationTime(CalibrationRequest self) -> std::string"""
        return _pyvacon_swig.CalibrationRequest_getCalibrationTime(self)

    def setCalibrationData(self, cData):
        r"""setCalibrationData(CalibrationRequest self, bool cData)"""
        return _pyvacon_swig.CalibrationRequest_setCalibrationData(self, cData)

    def getCalibrationData(self):
        r"""getCalibrationData(CalibrationRequest self) -> bool"""
        return _pyvacon_swig.CalibrationRequest_getCalibrationData(self)

# Register CalibrationRequest in _pyvacon_swig:
_pyvacon_swig.CalibrationRequest_swigregister(CalibrationRequest)

class ForwardCalibrationRequest(CalibrationRequest):
    r"""Proxy of C++ ForwardCalibrationRequest class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, objId):
        r"""__init__(ForwardCalibrationRequest self, std::string const & objId) -> ForwardCalibrationRequest"""
        _pyvacon_swig.ForwardCalibrationRequest_swiginit(self, _pyvacon_swig.new_ForwardCalibrationRequest(objId))
    udlId = property(_pyvacon_swig.ForwardCalibrationRequest_udlId_get, _pyvacon_swig.ForwardCalibrationRequest_udlId_set, doc=r"""udlId : std::string""")
    quoteTableId = property(_pyvacon_swig.ForwardCalibrationRequest_quoteTableId_get, _pyvacon_swig.ForwardCalibrationRequest_quoteTableId_set, doc=r"""quoteTableId : std::string""")
    targetId = property(_pyvacon_swig.ForwardCalibrationRequest_targetId_get, _pyvacon_swig.ForwardCalibrationRequest_targetId_set, doc=r"""targetId : std::string""")
    paramId = property(_pyvacon_swig.ForwardCalibrationRequest_paramId_get, _pyvacon_swig.ForwardCalibrationRequest_paramId_set, doc=r"""paramId : std::string""")

    def getClassName(self):
        r"""getClassName(ForwardCalibrationRequest self) -> std::string"""
        return _pyvacon_swig.ForwardCalibrationRequest_getClassName(self)
    __swig_destroy__ = _pyvacon_swig.delete_ForwardCalibrationRequest

# Register ForwardCalibrationRequest in _pyvacon_swig:
_pyvacon_swig.ForwardCalibrationRequest_swigregister(ForwardCalibrationRequest)

class VolatilityCalibrationRequest(CalibrationRequest):
    r"""Proxy of C++ VolatilityCalibrationRequest class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, objId):
        r"""__init__(VolatilityCalibrationRequest self, std::string const & objId) -> VolatilityCalibrationRequest"""
        _pyvacon_swig.VolatilityCalibrationRequest_swiginit(self, _pyvacon_swig.new_VolatilityCalibrationRequest(objId))
    udlId = property(_pyvacon_swig.VolatilityCalibrationRequest_udlId_get, _pyvacon_swig.VolatilityCalibrationRequest_udlId_set, doc=r"""udlId : std::string""")
    quoteTableId = property(_pyvacon_swig.VolatilityCalibrationRequest_quoteTableId_get, _pyvacon_swig.VolatilityCalibrationRequest_quoteTableId_set, doc=r"""quoteTableId : std::string""")
    targetId = property(_pyvacon_swig.VolatilityCalibrationRequest_targetId_get, _pyvacon_swig.VolatilityCalibrationRequest_targetId_set, doc=r"""targetId : std::string""")
    paramId = property(_pyvacon_swig.VolatilityCalibrationRequest_paramId_get, _pyvacon_swig.VolatilityCalibrationRequest_paramId_set, doc=r"""paramId : std::string""")

    def getClassName(self):
        r"""getClassName(VolatilityCalibrationRequest self) -> std::string"""
        return _pyvacon_swig.VolatilityCalibrationRequest_getClassName(self)
    __swig_destroy__ = _pyvacon_swig.delete_VolatilityCalibrationRequest

# Register VolatilityCalibrationRequest in _pyvacon_swig:
_pyvacon_swig.VolatilityCalibrationRequest_swigregister(VolatilityCalibrationRequest)

class CalibrationResult(BaseObject):
    r"""Proxy of C++ CalibrationResult class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getClassName(self):
        r"""getClassName(CalibrationResult self) -> std::string"""
        return _pyvacon_swig.CalibrationResult_getClassName(self)

    def __init__(self):
        r"""__init__(CalibrationResult self) -> CalibrationResult"""
        _pyvacon_swig.CalibrationResult_swiginit(self, _pyvacon_swig.new_CalibrationResult())
    __swig_destroy__ = _pyvacon_swig.delete_CalibrationResult

# Register CalibrationResult in _pyvacon_swig:
_pyvacon_swig.CalibrationResult_swigregister(CalibrationResult)

class ForwardCalibrationResult(CalibrationResult):
    r"""Proxy of C++ ForwardCalibrationResult class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, objId):
        r"""__init__(ForwardCalibrationResult self, std::string const & objId) -> ForwardCalibrationResult"""
        _pyvacon_swig.ForwardCalibrationResult_swiginit(self, _pyvacon_swig.new_ForwardCalibrationResult(objId))
    bc = property(_pyvacon_swig.ForwardCalibrationResult_bc_get, _pyvacon_swig.ForwardCalibrationResult_bc_set, doc=r"""bc : std::shared_ptr<(DiscountCurve)>""")
    fwd = property(_pyvacon_swig.ForwardCalibrationResult_fwd_get, _pyvacon_swig.ForwardCalibrationResult_fwd_set, doc=r"""fwd : std::shared_ptr<(ForwardCurve)>""")

    def getClassName(self):
        r"""getClassName(ForwardCalibrationResult self) -> std::string"""
        return _pyvacon_swig.ForwardCalibrationResult_getClassName(self)
    __swig_destroy__ = _pyvacon_swig.delete_ForwardCalibrationResult

# Register ForwardCalibrationResult in _pyvacon_swig:
_pyvacon_swig.ForwardCalibrationResult_swigregister(ForwardCalibrationResult)

class VolatilityCalibrationResult(CalibrationResult):
    r"""Proxy of C++ VolatilityCalibrationResult class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, objId):
        r"""__init__(VolatilityCalibrationResult self, std::string const & objId) -> VolatilityCalibrationResult"""
        _pyvacon_swig.VolatilityCalibrationResult_swiginit(self, _pyvacon_swig.new_VolatilityCalibrationResult(objId))
    score = property(_pyvacon_swig.VolatilityCalibrationResult_score_get, _pyvacon_swig.VolatilityCalibrationResult_score_set, doc=r"""score : std::shared_ptr<(q(const).MarketDataQualityScore)>""")
    vol = property(_pyvacon_swig.VolatilityCalibrationResult_vol_get, _pyvacon_swig.VolatilityCalibrationResult_vol_set, doc=r"""vol : std::shared_ptr<(q(const).VolatilitySurface)>""")
    quoteTable = property(_pyvacon_swig.VolatilityCalibrationResult_quoteTable_get, _pyvacon_swig.VolatilityCalibrationResult_quoteTable_set, doc=r"""quoteTable : std::shared_ptr<(q(const).EquityOptionQuoteTable)>""")

    def getClassName(self):
        r"""getClassName(VolatilityCalibrationResult self) -> std::string"""
        return _pyvacon_swig.VolatilityCalibrationResult_getClassName(self)
    __swig_destroy__ = _pyvacon_swig.delete_VolatilityCalibrationResult

# Register VolatilityCalibrationResult in _pyvacon_swig:
_pyvacon_swig.VolatilityCalibrationResult_swigregister(VolatilityCalibrationResult)

class BaseCalibrationData(Clonable):
    r"""Proxy of C++ BaseCalibrationData class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    calDate = property(_pyvacon_swig.BaseCalibrationData_calDate_get, _pyvacon_swig.BaseCalibrationData_calDate_set, doc=r"""calDate : ptime""")
    calibrator = property(_pyvacon_swig.BaseCalibrationData_calibrator_get, _pyvacon_swig.BaseCalibrationData_calibrator_set, doc=r"""calibrator : std::string""")
    calibrationRequest = property(_pyvacon_swig.BaseCalibrationData_calibrationRequest_get, _pyvacon_swig.BaseCalibrationData_calibrationRequest_set, doc=r"""calibrationRequest : std::shared_ptr<(q(const).CalibrationRequest)>""")
    __swig_destroy__ = _pyvacon_swig.delete_BaseCalibrationData

    def getClassName(self):
        r"""getClassName(BaseCalibrationData self) -> std::string"""
        return _pyvacon_swig.BaseCalibrationData_getClassName(self)

    @staticmethod
    def load(filename):
        r"""load(std::string filename) -> std::shared_ptr< BaseCalibrationData >"""
        return _pyvacon_swig.BaseCalibrationData_load(filename)

    @staticmethod
    def save(filename, data):
        r"""save(std::string filename, std::shared_ptr< BaseCalibrationData > const & data)"""
        return _pyvacon_swig.BaseCalibrationData_save(filename, data)

# Register BaseCalibrationData in _pyvacon_swig:
_pyvacon_swig.BaseCalibrationData_swigregister(BaseCalibrationData)

def BaseCalibrationData_load(filename):
    r"""BaseCalibrationData_load(std::string filename) -> std::shared_ptr< BaseCalibrationData >"""
    return _pyvacon_swig.BaseCalibrationData_load(filename)

def BaseCalibrationData_save(filename, data):
    r"""BaseCalibrationData_save(std::string filename, std::shared_ptr< BaseCalibrationData > const & data)"""
    return _pyvacon_swig.BaseCalibrationData_save(filename, data)

class ForwardCalibrationData(BaseCalibrationData):
    r"""Proxy of C++ ForwardCalibrationData class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ForwardCalibrationData self) -> ForwardCalibrationData"""
        _pyvacon_swig.ForwardCalibrationData_swiginit(self, _pyvacon_swig.new_ForwardCalibrationData())
    quoteTable = property(_pyvacon_swig.ForwardCalibrationData_quoteTable_get, _pyvacon_swig.ForwardCalibrationData_quoteTable_set, doc=r"""quoteTable : std::shared_ptr<(q(const).QuoteTable)>""")
    fwdCurve = property(_pyvacon_swig.ForwardCalibrationData_fwdCurve_get, _pyvacon_swig.ForwardCalibrationData_fwdCurve_set, doc=r"""fwdCurve : std::shared_ptr<(q(const).ForwardCurve)>""")
    dsc = property(_pyvacon_swig.ForwardCalibrationData_dsc_get, _pyvacon_swig.ForwardCalibrationData_dsc_set, doc=r"""dsc : std::shared_ptr<(q(const).DiscountCurve)>""")
    param = property(_pyvacon_swig.ForwardCalibrationData_param_get, _pyvacon_swig.ForwardCalibrationData_param_set, doc=r"""param : std::shared_ptr<(q(const).ForwardCalibratorParameter)>""")
    targetId = property(_pyvacon_swig.ForwardCalibrationData_targetId_get, _pyvacon_swig.ForwardCalibrationData_targetId_set, doc=r"""targetId : std::string""")

    def getClassName(self):
        r"""getClassName(ForwardCalibrationData self) -> std::string"""
        return _pyvacon_swig.ForwardCalibrationData_getClassName(self)
    __swig_destroy__ = _pyvacon_swig.delete_ForwardCalibrationData

# Register ForwardCalibrationData in _pyvacon_swig:
_pyvacon_swig.ForwardCalibrationData_swigregister(ForwardCalibrationData)

class VolatilityCalibrationData(BaseCalibrationData):
    r"""Proxy of C++ VolatilityCalibrationData class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(VolatilityCalibrationData self) -> VolatilityCalibrationData"""
        _pyvacon_swig.VolatilityCalibrationData_swiginit(self, _pyvacon_swig.new_VolatilityCalibrationData())
    quoteTable = property(_pyvacon_swig.VolatilityCalibrationData_quoteTable_get, _pyvacon_swig.VolatilityCalibrationData_quoteTable_set, doc=r"""quoteTable : std::shared_ptr<(q(const).EquityOptionQuoteTable)>""")
    fwdCurve = property(_pyvacon_swig.VolatilityCalibrationData_fwdCurve_get, _pyvacon_swig.VolatilityCalibrationData_fwdCurve_set, doc=r"""fwdCurve : std::shared_ptr<(q(const).ForwardCurve)>""")
    dsc = property(_pyvacon_swig.VolatilityCalibrationData_dsc_get, _pyvacon_swig.VolatilityCalibrationData_dsc_set, doc=r"""dsc : std::shared_ptr<(q(const).DiscountCurve)>""")
    startVol = property(_pyvacon_swig.VolatilityCalibrationData_startVol_get, _pyvacon_swig.VolatilityCalibrationData_startVol_set, doc=r"""startVol : std::shared_ptr<(q(const).VolatilitySurface)>""")
    param = property(_pyvacon_swig.VolatilityCalibrationData_param_get, _pyvacon_swig.VolatilityCalibrationData_param_set, doc=r"""param : std::shared_ptr<(q(const).VolatilityCalibratorParameter)>""")
    targetId = property(_pyvacon_swig.VolatilityCalibrationData_targetId_get, _pyvacon_swig.VolatilityCalibrationData_targetId_set, doc=r"""targetId : std::string""")

    def getClassName(self):
        r"""getClassName(VolatilityCalibrationData self) -> std::string"""
        return _pyvacon_swig.VolatilityCalibrationData_getClassName(self)
    __swig_destroy__ = _pyvacon_swig.delete_VolatilityCalibrationData

# Register VolatilityCalibrationData in _pyvacon_swig:
_pyvacon_swig.VolatilityCalibrationData_swigregister(VolatilityCalibrationData)

class BaseCalibrator(object):
    r"""Proxy of C++ BaseCalibrator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getCalibrationData(calibDate, calibRequest, mktData, param, calibStore):
        r"""getCalibrationData(ptime calibDate, std::shared_ptr< CalibrationRequest const > const & calibRequest, std::shared_ptr< MarketDataManager const > const & mktData, std::shared_ptr< ParameterManager const > const & param, std::shared_ptr< CalibrationStorage > const & calibStore) -> std::shared_ptr< BaseCalibrationData >"""
        return _pyvacon_swig.BaseCalibrator_getCalibrationData(calibDate, calibRequest, mktData, param, calibStore)

    @staticmethod
    def calibrate(*args):
        r"""
        calibrate(ptime calibDate, std::shared_ptr< CalibrationRequest const > const & calibRequest, std::shared_ptr< MarketDataManager const > const & mktData, std::shared_ptr< ParameterManager const > const & param, std::shared_ptr< CalibrationStorage > const & calibStore) -> std::shared_ptr< CalibrationResult >
        calibrate(std::shared_ptr< BaseCalibrationData const > const & calibrationData) -> std::shared_ptr< CalibrationResult >
        """
        return _pyvacon_swig.BaseCalibrator_calibrate(*args)
    __swig_destroy__ = _pyvacon_swig.delete_BaseCalibrator

# Register BaseCalibrator in _pyvacon_swig:
_pyvacon_swig.BaseCalibrator_swigregister(BaseCalibrator)

def BaseCalibrator_getCalibrationData(calibDate, calibRequest, mktData, param, calibStore):
    r"""BaseCalibrator_getCalibrationData(ptime calibDate, std::shared_ptr< CalibrationRequest const > const & calibRequest, std::shared_ptr< MarketDataManager const > const & mktData, std::shared_ptr< ParameterManager const > const & param, std::shared_ptr< CalibrationStorage > const & calibStore) -> std::shared_ptr< BaseCalibrationData >"""
    return _pyvacon_swig.BaseCalibrator_getCalibrationData(calibDate, calibRequest, mktData, param, calibStore)

def BaseCalibrator_calibrate(*args):
    r"""
    BaseCalibrator_calibrate(ptime calibDate, std::shared_ptr< CalibrationRequest const > const & calibRequest, std::shared_ptr< MarketDataManager const > const & mktData, std::shared_ptr< ParameterManager const > const & param, std::shared_ptr< CalibrationStorage > const & calibStore) -> std::shared_ptr< CalibrationResult >
    BaseCalibrator_calibrate(std::shared_ptr< BaseCalibrationData const > const & calibrationData) -> std::shared_ptr< CalibrationResult >
    """
    return _pyvacon_swig.BaseCalibrator_calibrate(*args)

class ForwardCalibrator(BaseCalibrator):
    r"""Proxy of C++ ForwardCalibrator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def calibrate(valDate, id, qt, dsc, fwdCurve, param):
        r"""calibrate(ptime valDate, std::string const & id, std::shared_ptr< QuoteTable const > const & qt, std::shared_ptr< DiscountCurve const > const & dsc, std::shared_ptr< ForwardCurve const > const & fwdCurve, std::shared_ptr< ForwardCalibratorParameter const > const & param) -> std::shared_ptr< ForwardCalibrationResult >"""
        return _pyvacon_swig.ForwardCalibrator_calibrate(valDate, id, qt, dsc, fwdCurve, param)

    def getClassName(self):
        r"""getClassName(ForwardCalibrator self) -> std::string"""
        return _pyvacon_swig.ForwardCalibrator_getClassName(self)

    def __init__(self):
        r"""__init__(ForwardCalibrator self) -> ForwardCalibrator"""
        _pyvacon_swig.ForwardCalibrator_swiginit(self, _pyvacon_swig.new_ForwardCalibrator())
    __swig_destroy__ = _pyvacon_swig.delete_ForwardCalibrator

# Register ForwardCalibrator in _pyvacon_swig:
_pyvacon_swig.ForwardCalibrator_swigregister(ForwardCalibrator)

def ForwardCalibrator_calibrate(valDate, id, qt, dsc, fwdCurve, param):
    r"""ForwardCalibrator_calibrate(ptime valDate, std::string const & id, std::shared_ptr< QuoteTable const > const & qt, std::shared_ptr< DiscountCurve const > const & dsc, std::shared_ptr< ForwardCurve const > const & fwdCurve, std::shared_ptr< ForwardCalibratorParameter const > const & param) -> std::shared_ptr< ForwardCalibrationResult >"""
    return _pyvacon_swig.ForwardCalibrator_calibrate(valDate, id, qt, dsc, fwdCurve, param)

class VolatilityCalibrator(BaseCalibrator):
    r"""Proxy of C++ VolatilityCalibrator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def calibrate(id, calibDate, quotes, dsc, fwdCurve, param, startVol):
        r"""calibrate(std::string const & id, ptime calibDate, std::shared_ptr< EquityOptionQuoteTable const > quotes, std::shared_ptr< DiscountCurve const > dsc, std::shared_ptr< ForwardCurve const > fwdCurve, std::shared_ptr< VolatilityCalibratorParameter const > param, std::shared_ptr< VolatilitySurface const > startVol) -> std::shared_ptr< VolatilityCalibrationResult >"""
        return _pyvacon_swig.VolatilityCalibrator_calibrate(id, calibDate, quotes, dsc, fwdCurve, param, startVol)

    @staticmethod
    def computeImpliedVols(valDate, quoteTable, dsc, fwd, pdeParam, americanAsEuropeanVols):
        r"""computeImpliedVols(ptime valDate, std::shared_ptr< QuoteTable const > quoteTable, std::shared_ptr< DiscountCurve const > dsc, std::shared_ptr< ForwardCurve const > fwd, std::shared_ptr< PdePricingParameter const > pdeParam, bool americanAsEuropeanVols) -> std::shared_ptr< EquityOptionQuoteTable >"""
        return _pyvacon_swig.VolatilityCalibrator_computeImpliedVols(valDate, quoteTable, dsc, fwd, pdeParam, americanAsEuropeanVols)

    @staticmethod
    def preprocessQuotes(calibDate, quoteTable, fwd, param):
        r"""preprocessQuotes(ptime calibDate, std::shared_ptr< EquityOptionQuoteTable const > quoteTable, std::shared_ptr< ForwardCurve const > fwd, std::shared_ptr< PreprocessingParameter const > param) -> std::shared_ptr< EquityOptionQuoteTable >"""
        return _pyvacon_swig.VolatilityCalibrator_preprocessQuotes(calibDate, quoteTable, fwd, param)

    @staticmethod
    def postprocessQuotes(calibDate, quoteTable, dsc, vol, pdeParam):
        r"""postprocessQuotes(ptime calibDate, std::shared_ptr< EquityOptionQuoteTable const > quoteTable, std::shared_ptr< DiscountCurve const > dsc, std::shared_ptr< VolatilitySurface const > vol, std::shared_ptr< PdePricingParameter const > pdeParam) -> std::shared_ptr< EquityOptionQuoteTable >"""
        return _pyvacon_swig.VolatilityCalibrator_postprocessQuotes(calibDate, quoteTable, dsc, vol, pdeParam)

    @staticmethod
    def generateCheckReport(vol, quoteTable):
        r"""generateCheckReport(std::shared_ptr< VolatilitySurface const > vol, std::shared_ptr< EquityOptionQuoteTable const > quoteTable) -> std::shared_ptr< DataTable >"""
        return _pyvacon_swig.VolatilityCalibrator_generateCheckReport(vol, quoteTable)

    @staticmethod
    def writeVolFile(file, v, quoteTable):
        r"""writeVolFile(std::string const & file, std::shared_ptr< VolatilitySurface const > v, std::shared_ptr< EquityOptionQuoteTable const > quoteTable)"""
        return _pyvacon_swig.VolatilityCalibrator_writeVolFile(file, v, quoteTable)

    def getClassName(self):
        r"""getClassName(VolatilityCalibrator self) -> std::string"""
        return _pyvacon_swig.VolatilityCalibrator_getClassName(self)

    def __init__(self):
        r"""__init__(VolatilityCalibrator self) -> VolatilityCalibrator"""
        _pyvacon_swig.VolatilityCalibrator_swiginit(self, _pyvacon_swig.new_VolatilityCalibrator())
    __swig_destroy__ = _pyvacon_swig.delete_VolatilityCalibrator

# Register VolatilityCalibrator in _pyvacon_swig:
_pyvacon_swig.VolatilityCalibrator_swigregister(VolatilityCalibrator)

def VolatilityCalibrator_calibrate(id, calibDate, quotes, dsc, fwdCurve, param, startVol):
    r"""VolatilityCalibrator_calibrate(std::string const & id, ptime calibDate, std::shared_ptr< EquityOptionQuoteTable const > quotes, std::shared_ptr< DiscountCurve const > dsc, std::shared_ptr< ForwardCurve const > fwdCurve, std::shared_ptr< VolatilityCalibratorParameter const > param, std::shared_ptr< VolatilitySurface const > startVol) -> std::shared_ptr< VolatilityCalibrationResult >"""
    return _pyvacon_swig.VolatilityCalibrator_calibrate(id, calibDate, quotes, dsc, fwdCurve, param, startVol)

def VolatilityCalibrator_computeImpliedVols(valDate, quoteTable, dsc, fwd, pdeParam, americanAsEuropeanVols):
    r"""VolatilityCalibrator_computeImpliedVols(ptime valDate, std::shared_ptr< QuoteTable const > quoteTable, std::shared_ptr< DiscountCurve const > dsc, std::shared_ptr< ForwardCurve const > fwd, std::shared_ptr< PdePricingParameter const > pdeParam, bool americanAsEuropeanVols) -> std::shared_ptr< EquityOptionQuoteTable >"""
    return _pyvacon_swig.VolatilityCalibrator_computeImpliedVols(valDate, quoteTable, dsc, fwd, pdeParam, americanAsEuropeanVols)

def VolatilityCalibrator_preprocessQuotes(calibDate, quoteTable, fwd, param):
    r"""VolatilityCalibrator_preprocessQuotes(ptime calibDate, std::shared_ptr< EquityOptionQuoteTable const > quoteTable, std::shared_ptr< ForwardCurve const > fwd, std::shared_ptr< PreprocessingParameter const > param) -> std::shared_ptr< EquityOptionQuoteTable >"""
    return _pyvacon_swig.VolatilityCalibrator_preprocessQuotes(calibDate, quoteTable, fwd, param)

def VolatilityCalibrator_postprocessQuotes(calibDate, quoteTable, dsc, vol, pdeParam):
    r"""VolatilityCalibrator_postprocessQuotes(ptime calibDate, std::shared_ptr< EquityOptionQuoteTable const > quoteTable, std::shared_ptr< DiscountCurve const > dsc, std::shared_ptr< VolatilitySurface const > vol, std::shared_ptr< PdePricingParameter const > pdeParam) -> std::shared_ptr< EquityOptionQuoteTable >"""
    return _pyvacon_swig.VolatilityCalibrator_postprocessQuotes(calibDate, quoteTable, dsc, vol, pdeParam)

def VolatilityCalibrator_generateCheckReport(vol, quoteTable):
    r"""VolatilityCalibrator_generateCheckReport(std::shared_ptr< VolatilitySurface const > vol, std::shared_ptr< EquityOptionQuoteTable const > quoteTable) -> std::shared_ptr< DataTable >"""
    return _pyvacon_swig.VolatilityCalibrator_generateCheckReport(vol, quoteTable)

def VolatilityCalibrator_writeVolFile(file, v, quoteTable):
    r"""VolatilityCalibrator_writeVolFile(std::string const & file, std::shared_ptr< VolatilitySurface const > v, std::shared_ptr< EquityOptionQuoteTable const > quoteTable)"""
    return _pyvacon_swig.VolatilityCalibrator_writeVolFile(file, v, quoteTable)

class CalibrationSwaptionPtr(object):
    r"""Proxy of C++ std::shared_ptr< CalibrationSwaption > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(CalibrationSwaptionPtr self) -> CalibrationSwaptionPtr"""
        _pyvacon_swig.CalibrationSwaptionPtr_swiginit(self, _pyvacon_swig.new_CalibrationSwaptionPtr())
    __swig_destroy__ = _pyvacon_swig.delete_CalibrationSwaptionPtr

# Register CalibrationSwaptionPtr in _pyvacon_swig:
_pyvacon_swig.CalibrationSwaptionPtr_swigregister(CalibrationSwaptionPtr)

class vectorCalibrationSwaptionPtr(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< CalibrationSwaption const > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(vectorCalibrationSwaptionPtr self) -> SwigPyIterator"""
        return _pyvacon_swig.vectorCalibrationSwaptionPtr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(vectorCalibrationSwaptionPtr self) -> bool"""
        return _pyvacon_swig.vectorCalibrationSwaptionPtr___nonzero__(self)

    def __bool__(self):
        r"""__bool__(vectorCalibrationSwaptionPtr self) -> bool"""
        return _pyvacon_swig.vectorCalibrationSwaptionPtr___bool__(self)

    def __len__(self):
        r"""__len__(vectorCalibrationSwaptionPtr self) -> std::vector< std::shared_ptr< CalibrationSwaption const > >::size_type"""
        return _pyvacon_swig.vectorCalibrationSwaptionPtr___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(vectorCalibrationSwaptionPtr self, std::vector< std::shared_ptr< CalibrationSwaption const > >::difference_type i, std::vector< std::shared_ptr< CalibrationSwaption const > >::difference_type j) -> vectorCalibrationSwaptionPtr"""
        return _pyvacon_swig.vectorCalibrationSwaptionPtr___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(vectorCalibrationSwaptionPtr self, std::vector< std::shared_ptr< CalibrationSwaption const > >::difference_type i, std::vector< std::shared_ptr< CalibrationSwaption const > >::difference_type j)
        __setslice__(vectorCalibrationSwaptionPtr self, std::vector< std::shared_ptr< CalibrationSwaption const > >::difference_type i, std::vector< std::shared_ptr< CalibrationSwaption const > >::difference_type j, vectorCalibrationSwaptionPtr v)
        """
        return _pyvacon_swig.vectorCalibrationSwaptionPtr___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(vectorCalibrationSwaptionPtr self, std::vector< std::shared_ptr< CalibrationSwaption const > >::difference_type i, std::vector< std::shared_ptr< CalibrationSwaption const > >::difference_type j)"""
        return _pyvacon_swig.vectorCalibrationSwaptionPtr___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(vectorCalibrationSwaptionPtr self, std::vector< std::shared_ptr< CalibrationSwaption const > >::difference_type i)
        __delitem__(vectorCalibrationSwaptionPtr self, PySliceObject * slice)
        """
        return _pyvacon_swig.vectorCalibrationSwaptionPtr___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(vectorCalibrationSwaptionPtr self, PySliceObject * slice) -> vectorCalibrationSwaptionPtr
        __getitem__(vectorCalibrationSwaptionPtr self, std::vector< std::shared_ptr< CalibrationSwaption const > >::difference_type i) -> std::vector< std::shared_ptr< CalibrationSwaption const > >::value_type const &
        """
        return _pyvacon_swig.vectorCalibrationSwaptionPtr___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(vectorCalibrationSwaptionPtr self, PySliceObject * slice, vectorCalibrationSwaptionPtr v)
        __setitem__(vectorCalibrationSwaptionPtr self, PySliceObject * slice)
        __setitem__(vectorCalibrationSwaptionPtr self, std::vector< std::shared_ptr< CalibrationSwaption const > >::difference_type i, std::vector< std::shared_ptr< CalibrationSwaption const > >::value_type const & x)
        """
        return _pyvacon_swig.vectorCalibrationSwaptionPtr___setitem__(self, *args)

    def pop(self):
        r"""pop(vectorCalibrationSwaptionPtr self) -> std::vector< std::shared_ptr< CalibrationSwaption const > >::value_type"""
        return _pyvacon_swig.vectorCalibrationSwaptionPtr_pop(self)

    def append(self, x):
        r"""append(vectorCalibrationSwaptionPtr self, std::vector< std::shared_ptr< CalibrationSwaption const > >::value_type const & x)"""
        return _pyvacon_swig.vectorCalibrationSwaptionPtr_append(self, x)

    def empty(self):
        r"""empty(vectorCalibrationSwaptionPtr self) -> bool"""
        return _pyvacon_swig.vectorCalibrationSwaptionPtr_empty(self)

    def size(self):
        r"""size(vectorCalibrationSwaptionPtr self) -> std::vector< std::shared_ptr< CalibrationSwaption const > >::size_type"""
        return _pyvacon_swig.vectorCalibrationSwaptionPtr_size(self)

    def swap(self, v):
        r"""swap(vectorCalibrationSwaptionPtr self, vectorCalibrationSwaptionPtr v)"""
        return _pyvacon_swig.vectorCalibrationSwaptionPtr_swap(self, v)

    def begin(self):
        r"""begin(vectorCalibrationSwaptionPtr self) -> std::vector< std::shared_ptr< CalibrationSwaption const > >::iterator"""
        return _pyvacon_swig.vectorCalibrationSwaptionPtr_begin(self)

    def end(self):
        r"""end(vectorCalibrationSwaptionPtr self) -> std::vector< std::shared_ptr< CalibrationSwaption const > >::iterator"""
        return _pyvacon_swig.vectorCalibrationSwaptionPtr_end(self)

    def rbegin(self):
        r"""rbegin(vectorCalibrationSwaptionPtr self) -> std::vector< std::shared_ptr< CalibrationSwaption const > >::reverse_iterator"""
        return _pyvacon_swig.vectorCalibrationSwaptionPtr_rbegin(self)

    def rend(self):
        r"""rend(vectorCalibrationSwaptionPtr self) -> std::vector< std::shared_ptr< CalibrationSwaption const > >::reverse_iterator"""
        return _pyvacon_swig.vectorCalibrationSwaptionPtr_rend(self)

    def clear(self):
        r"""clear(vectorCalibrationSwaptionPtr self)"""
        return _pyvacon_swig.vectorCalibrationSwaptionPtr_clear(self)

    def get_allocator(self):
        r"""get_allocator(vectorCalibrationSwaptionPtr self) -> std::vector< std::shared_ptr< CalibrationSwaption const > >::allocator_type"""
        return _pyvacon_swig.vectorCalibrationSwaptionPtr_get_allocator(self)

    def pop_back(self):
        r"""pop_back(vectorCalibrationSwaptionPtr self)"""
        return _pyvacon_swig.vectorCalibrationSwaptionPtr_pop_back(self)

    def erase(self, *args):
        r"""
        erase(vectorCalibrationSwaptionPtr self, std::vector< std::shared_ptr< CalibrationSwaption const > >::iterator pos) -> std::vector< std::shared_ptr< CalibrationSwaption const > >::iterator
        erase(vectorCalibrationSwaptionPtr self, std::vector< std::shared_ptr< CalibrationSwaption const > >::iterator first, std::vector< std::shared_ptr< CalibrationSwaption const > >::iterator last) -> std::vector< std::shared_ptr< CalibrationSwaption const > >::iterator
        """
        return _pyvacon_swig.vectorCalibrationSwaptionPtr_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(vectorCalibrationSwaptionPtr self) -> vectorCalibrationSwaptionPtr
        __init__(vectorCalibrationSwaptionPtr self, vectorCalibrationSwaptionPtr other) -> vectorCalibrationSwaptionPtr
        __init__(vectorCalibrationSwaptionPtr self, std::vector< std::shared_ptr< CalibrationSwaption const > >::size_type size) -> vectorCalibrationSwaptionPtr
        __init__(vectorCalibrationSwaptionPtr self, std::vector< std::shared_ptr< CalibrationSwaption const > >::size_type size, std::vector< std::shared_ptr< CalibrationSwaption const > >::value_type const & value) -> vectorCalibrationSwaptionPtr
        """
        _pyvacon_swig.vectorCalibrationSwaptionPtr_swiginit(self, _pyvacon_swig.new_vectorCalibrationSwaptionPtr(*args))

    def push_back(self, x):
        r"""push_back(vectorCalibrationSwaptionPtr self, std::vector< std::shared_ptr< CalibrationSwaption const > >::value_type const & x)"""
        return _pyvacon_swig.vectorCalibrationSwaptionPtr_push_back(self, x)

    def front(self):
        r"""front(vectorCalibrationSwaptionPtr self) -> std::vector< std::shared_ptr< CalibrationSwaption const > >::value_type const &"""
        return _pyvacon_swig.vectorCalibrationSwaptionPtr_front(self)

    def back(self):
        r"""back(vectorCalibrationSwaptionPtr self) -> std::vector< std::shared_ptr< CalibrationSwaption const > >::value_type const &"""
        return _pyvacon_swig.vectorCalibrationSwaptionPtr_back(self)

    def assign(self, n, x):
        r"""assign(vectorCalibrationSwaptionPtr self, std::vector< std::shared_ptr< CalibrationSwaption const > >::size_type n, std::vector< std::shared_ptr< CalibrationSwaption const > >::value_type const & x)"""
        return _pyvacon_swig.vectorCalibrationSwaptionPtr_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(vectorCalibrationSwaptionPtr self, std::vector< std::shared_ptr< CalibrationSwaption const > >::size_type new_size)
        resize(vectorCalibrationSwaptionPtr self, std::vector< std::shared_ptr< CalibrationSwaption const > >::size_type new_size, std::vector< std::shared_ptr< CalibrationSwaption const > >::value_type const & x)
        """
        return _pyvacon_swig.vectorCalibrationSwaptionPtr_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(vectorCalibrationSwaptionPtr self, std::vector< std::shared_ptr< CalibrationSwaption const > >::iterator pos, std::vector< std::shared_ptr< CalibrationSwaption const > >::value_type const & x) -> std::vector< std::shared_ptr< CalibrationSwaption const > >::iterator
        insert(vectorCalibrationSwaptionPtr self, std::vector< std::shared_ptr< CalibrationSwaption const > >::iterator pos, std::vector< std::shared_ptr< CalibrationSwaption const > >::size_type n, std::vector< std::shared_ptr< CalibrationSwaption const > >::value_type const & x)
        """
        return _pyvacon_swig.vectorCalibrationSwaptionPtr_insert(self, *args)

    def reserve(self, n):
        r"""reserve(vectorCalibrationSwaptionPtr self, std::vector< std::shared_ptr< CalibrationSwaption const > >::size_type n)"""
        return _pyvacon_swig.vectorCalibrationSwaptionPtr_reserve(self, n)

    def capacity(self):
        r"""capacity(vectorCalibrationSwaptionPtr self) -> std::vector< std::shared_ptr< CalibrationSwaption const > >::size_type"""
        return _pyvacon_swig.vectorCalibrationSwaptionPtr_capacity(self)
    __swig_destroy__ = _pyvacon_swig.delete_vectorCalibrationSwaptionPtr

# Register vectorCalibrationSwaptionPtr in _pyvacon_swig:
_pyvacon_swig.vectorCalibrationSwaptionPtr_swigregister(vectorCalibrationSwaptionPtr)

class mapSwapCurves(object):
    r"""Proxy of C++ std::unordered_map< Period,std::shared_ptr< SwapCurve const > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(mapSwapCurves self) -> SwigPyIterator"""
        return _pyvacon_swig.mapSwapCurves_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(mapSwapCurves self) -> bool"""
        return _pyvacon_swig.mapSwapCurves___nonzero__(self)

    def __bool__(self):
        r"""__bool__(mapSwapCurves self) -> bool"""
        return _pyvacon_swig.mapSwapCurves___bool__(self)

    def __len__(self):
        r"""__len__(mapSwapCurves self) -> std::unordered_map< Period,std::shared_ptr< SwapCurve const > >::size_type"""
        return _pyvacon_swig.mapSwapCurves___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        r"""__getitem__(mapSwapCurves self, Period key) -> std::unordered_map< Period,std::shared_ptr< SwapCurve const > >::mapped_type const &"""
        return _pyvacon_swig.mapSwapCurves___getitem__(self, key)

    def __delitem__(self, key):
        r"""__delitem__(mapSwapCurves self, Period key)"""
        return _pyvacon_swig.mapSwapCurves___delitem__(self, key)

    def has_key(self, key):
        r"""has_key(mapSwapCurves self, Period key) -> bool"""
        return _pyvacon_swig.mapSwapCurves_has_key(self, key)

    def keys(self):
        r"""keys(mapSwapCurves self) -> PyObject *"""
        return _pyvacon_swig.mapSwapCurves_keys(self)

    def values(self):
        r"""values(mapSwapCurves self) -> PyObject *"""
        return _pyvacon_swig.mapSwapCurves_values(self)

    def items(self):
        r"""items(mapSwapCurves self) -> PyObject *"""
        return _pyvacon_swig.mapSwapCurves_items(self)

    def __contains__(self, key):
        r"""__contains__(mapSwapCurves self, Period key) -> bool"""
        return _pyvacon_swig.mapSwapCurves___contains__(self, key)

    def key_iterator(self):
        r"""key_iterator(mapSwapCurves self) -> SwigPyIterator"""
        return _pyvacon_swig.mapSwapCurves_key_iterator(self)

    def value_iterator(self):
        r"""value_iterator(mapSwapCurves self) -> SwigPyIterator"""
        return _pyvacon_swig.mapSwapCurves_value_iterator(self)

    def __setitem__(self, *args):
        r"""
        __setitem__(mapSwapCurves self, Period key)
        __setitem__(mapSwapCurves self, Period key, std::unordered_map< Period,std::shared_ptr< SwapCurve const > >::mapped_type const & x)
        """
        return _pyvacon_swig.mapSwapCurves___setitem__(self, *args)

    def asdict(self):
        r"""asdict(mapSwapCurves self) -> PyObject *"""
        return _pyvacon_swig.mapSwapCurves_asdict(self)

    def __init__(self, *args):
        r"""
        __init__(mapSwapCurves self) -> mapSwapCurves
        __init__(mapSwapCurves self, mapSwapCurves other) -> mapSwapCurves
        """
        _pyvacon_swig.mapSwapCurves_swiginit(self, _pyvacon_swig.new_mapSwapCurves(*args))

    def empty(self):
        r"""empty(mapSwapCurves self) -> bool"""
        return _pyvacon_swig.mapSwapCurves_empty(self)

    def size(self):
        r"""size(mapSwapCurves self) -> std::unordered_map< Period,std::shared_ptr< SwapCurve const > >::size_type"""
        return _pyvacon_swig.mapSwapCurves_size(self)

    def swap(self, v):
        r"""swap(mapSwapCurves self, mapSwapCurves v)"""
        return _pyvacon_swig.mapSwapCurves_swap(self, v)

    def begin(self):
        r"""begin(mapSwapCurves self) -> std::unordered_map< Period,std::shared_ptr< SwapCurve const > >::iterator"""
        return _pyvacon_swig.mapSwapCurves_begin(self)

    def end(self):
        r"""end(mapSwapCurves self) -> std::unordered_map< Period,std::shared_ptr< SwapCurve const > >::iterator"""
        return _pyvacon_swig.mapSwapCurves_end(self)

    def clear(self):
        r"""clear(mapSwapCurves self)"""
        return _pyvacon_swig.mapSwapCurves_clear(self)

    def get_allocator(self):
        r"""get_allocator(mapSwapCurves self) -> std::unordered_map< Period,std::shared_ptr< SwapCurve const > >::allocator_type"""
        return _pyvacon_swig.mapSwapCurves_get_allocator(self)

    def count(self, x):
        r"""count(mapSwapCurves self, Period x) -> std::unordered_map< Period,std::shared_ptr< SwapCurve const > >::size_type"""
        return _pyvacon_swig.mapSwapCurves_count(self, x)

    def erase(self, *args):
        r"""
        erase(mapSwapCurves self, Period x) -> std::unordered_map< Period,std::shared_ptr< SwapCurve const > >::size_type
        erase(mapSwapCurves self, std::unordered_map< Period,std::shared_ptr< SwapCurve const > >::iterator position)
        erase(mapSwapCurves self, std::unordered_map< Period,std::shared_ptr< SwapCurve const > >::iterator first, std::unordered_map< Period,std::shared_ptr< SwapCurve const > >::iterator last)
        """
        return _pyvacon_swig.mapSwapCurves_erase(self, *args)

    def find(self, x):
        r"""find(mapSwapCurves self, Period x) -> std::unordered_map< Period,std::shared_ptr< SwapCurve const > >::iterator"""
        return _pyvacon_swig.mapSwapCurves_find(self, x)
    __swig_destroy__ = _pyvacon_swig.delete_mapSwapCurves

# Register mapSwapCurves in _pyvacon_swig:
_pyvacon_swig.mapSwapCurves_swigregister(mapSwapCurves)

class vectorCalibrationSwaptionPtrNonConst(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< CalibrationSwaption > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(vectorCalibrationSwaptionPtrNonConst self) -> SwigPyIterator"""
        return _pyvacon_swig.vectorCalibrationSwaptionPtrNonConst_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(vectorCalibrationSwaptionPtrNonConst self) -> bool"""
        return _pyvacon_swig.vectorCalibrationSwaptionPtrNonConst___nonzero__(self)

    def __bool__(self):
        r"""__bool__(vectorCalibrationSwaptionPtrNonConst self) -> bool"""
        return _pyvacon_swig.vectorCalibrationSwaptionPtrNonConst___bool__(self)

    def __len__(self):
        r"""__len__(vectorCalibrationSwaptionPtrNonConst self) -> std::vector< std::shared_ptr< CalibrationSwaption > >::size_type"""
        return _pyvacon_swig.vectorCalibrationSwaptionPtrNonConst___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(vectorCalibrationSwaptionPtrNonConst self, std::vector< std::shared_ptr< CalibrationSwaption > >::difference_type i, std::vector< std::shared_ptr< CalibrationSwaption > >::difference_type j) -> vectorCalibrationSwaptionPtrNonConst"""
        return _pyvacon_swig.vectorCalibrationSwaptionPtrNonConst___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(vectorCalibrationSwaptionPtrNonConst self, std::vector< std::shared_ptr< CalibrationSwaption > >::difference_type i, std::vector< std::shared_ptr< CalibrationSwaption > >::difference_type j)
        __setslice__(vectorCalibrationSwaptionPtrNonConst self, std::vector< std::shared_ptr< CalibrationSwaption > >::difference_type i, std::vector< std::shared_ptr< CalibrationSwaption > >::difference_type j, vectorCalibrationSwaptionPtrNonConst v)
        """
        return _pyvacon_swig.vectorCalibrationSwaptionPtrNonConst___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(vectorCalibrationSwaptionPtrNonConst self, std::vector< std::shared_ptr< CalibrationSwaption > >::difference_type i, std::vector< std::shared_ptr< CalibrationSwaption > >::difference_type j)"""
        return _pyvacon_swig.vectorCalibrationSwaptionPtrNonConst___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(vectorCalibrationSwaptionPtrNonConst self, std::vector< std::shared_ptr< CalibrationSwaption > >::difference_type i)
        __delitem__(vectorCalibrationSwaptionPtrNonConst self, PySliceObject * slice)
        """
        return _pyvacon_swig.vectorCalibrationSwaptionPtrNonConst___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(vectorCalibrationSwaptionPtrNonConst self, PySliceObject * slice) -> vectorCalibrationSwaptionPtrNonConst
        __getitem__(vectorCalibrationSwaptionPtrNonConst self, std::vector< std::shared_ptr< CalibrationSwaption > >::difference_type i) -> CalibrationSwaptionPtr
        """
        return _pyvacon_swig.vectorCalibrationSwaptionPtrNonConst___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(vectorCalibrationSwaptionPtrNonConst self, PySliceObject * slice, vectorCalibrationSwaptionPtrNonConst v)
        __setitem__(vectorCalibrationSwaptionPtrNonConst self, PySliceObject * slice)
        __setitem__(vectorCalibrationSwaptionPtrNonConst self, std::vector< std::shared_ptr< CalibrationSwaption > >::difference_type i, CalibrationSwaptionPtr x)
        """
        return _pyvacon_swig.vectorCalibrationSwaptionPtrNonConst___setitem__(self, *args)

    def pop(self):
        r"""pop(vectorCalibrationSwaptionPtrNonConst self) -> CalibrationSwaptionPtr"""
        return _pyvacon_swig.vectorCalibrationSwaptionPtrNonConst_pop(self)

    def append(self, x):
        r"""append(vectorCalibrationSwaptionPtrNonConst self, CalibrationSwaptionPtr x)"""
        return _pyvacon_swig.vectorCalibrationSwaptionPtrNonConst_append(self, x)

    def empty(self):
        r"""empty(vectorCalibrationSwaptionPtrNonConst self) -> bool"""
        return _pyvacon_swig.vectorCalibrationSwaptionPtrNonConst_empty(self)

    def size(self):
        r"""size(vectorCalibrationSwaptionPtrNonConst self) -> std::vector< std::shared_ptr< CalibrationSwaption > >::size_type"""
        return _pyvacon_swig.vectorCalibrationSwaptionPtrNonConst_size(self)

    def swap(self, v):
        r"""swap(vectorCalibrationSwaptionPtrNonConst self, vectorCalibrationSwaptionPtrNonConst v)"""
        return _pyvacon_swig.vectorCalibrationSwaptionPtrNonConst_swap(self, v)

    def begin(self):
        r"""begin(vectorCalibrationSwaptionPtrNonConst self) -> std::vector< std::shared_ptr< CalibrationSwaption > >::iterator"""
        return _pyvacon_swig.vectorCalibrationSwaptionPtrNonConst_begin(self)

    def end(self):
        r"""end(vectorCalibrationSwaptionPtrNonConst self) -> std::vector< std::shared_ptr< CalibrationSwaption > >::iterator"""
        return _pyvacon_swig.vectorCalibrationSwaptionPtrNonConst_end(self)

    def rbegin(self):
        r"""rbegin(vectorCalibrationSwaptionPtrNonConst self) -> std::vector< std::shared_ptr< CalibrationSwaption > >::reverse_iterator"""
        return _pyvacon_swig.vectorCalibrationSwaptionPtrNonConst_rbegin(self)

    def rend(self):
        r"""rend(vectorCalibrationSwaptionPtrNonConst self) -> std::vector< std::shared_ptr< CalibrationSwaption > >::reverse_iterator"""
        return _pyvacon_swig.vectorCalibrationSwaptionPtrNonConst_rend(self)

    def clear(self):
        r"""clear(vectorCalibrationSwaptionPtrNonConst self)"""
        return _pyvacon_swig.vectorCalibrationSwaptionPtrNonConst_clear(self)

    def get_allocator(self):
        r"""get_allocator(vectorCalibrationSwaptionPtrNonConst self) -> std::vector< std::shared_ptr< CalibrationSwaption > >::allocator_type"""
        return _pyvacon_swig.vectorCalibrationSwaptionPtrNonConst_get_allocator(self)

    def pop_back(self):
        r"""pop_back(vectorCalibrationSwaptionPtrNonConst self)"""
        return _pyvacon_swig.vectorCalibrationSwaptionPtrNonConst_pop_back(self)

    def erase(self, *args):
        r"""
        erase(vectorCalibrationSwaptionPtrNonConst self, std::vector< std::shared_ptr< CalibrationSwaption > >::iterator pos) -> std::vector< std::shared_ptr< CalibrationSwaption > >::iterator
        erase(vectorCalibrationSwaptionPtrNonConst self, std::vector< std::shared_ptr< CalibrationSwaption > >::iterator first, std::vector< std::shared_ptr< CalibrationSwaption > >::iterator last) -> std::vector< std::shared_ptr< CalibrationSwaption > >::iterator
        """
        return _pyvacon_swig.vectorCalibrationSwaptionPtrNonConst_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(vectorCalibrationSwaptionPtrNonConst self) -> vectorCalibrationSwaptionPtrNonConst
        __init__(vectorCalibrationSwaptionPtrNonConst self, vectorCalibrationSwaptionPtrNonConst other) -> vectorCalibrationSwaptionPtrNonConst
        __init__(vectorCalibrationSwaptionPtrNonConst self, std::vector< std::shared_ptr< CalibrationSwaption > >::size_type size) -> vectorCalibrationSwaptionPtrNonConst
        __init__(vectorCalibrationSwaptionPtrNonConst self, std::vector< std::shared_ptr< CalibrationSwaption > >::size_type size, CalibrationSwaptionPtr value) -> vectorCalibrationSwaptionPtrNonConst
        """
        _pyvacon_swig.vectorCalibrationSwaptionPtrNonConst_swiginit(self, _pyvacon_swig.new_vectorCalibrationSwaptionPtrNonConst(*args))

    def push_back(self, x):
        r"""push_back(vectorCalibrationSwaptionPtrNonConst self, CalibrationSwaptionPtr x)"""
        return _pyvacon_swig.vectorCalibrationSwaptionPtrNonConst_push_back(self, x)

    def front(self):
        r"""front(vectorCalibrationSwaptionPtrNonConst self) -> CalibrationSwaptionPtr"""
        return _pyvacon_swig.vectorCalibrationSwaptionPtrNonConst_front(self)

    def back(self):
        r"""back(vectorCalibrationSwaptionPtrNonConst self) -> CalibrationSwaptionPtr"""
        return _pyvacon_swig.vectorCalibrationSwaptionPtrNonConst_back(self)

    def assign(self, n, x):
        r"""assign(vectorCalibrationSwaptionPtrNonConst self, std::vector< std::shared_ptr< CalibrationSwaption > >::size_type n, CalibrationSwaptionPtr x)"""
        return _pyvacon_swig.vectorCalibrationSwaptionPtrNonConst_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(vectorCalibrationSwaptionPtrNonConst self, std::vector< std::shared_ptr< CalibrationSwaption > >::size_type new_size)
        resize(vectorCalibrationSwaptionPtrNonConst self, std::vector< std::shared_ptr< CalibrationSwaption > >::size_type new_size, CalibrationSwaptionPtr x)
        """
        return _pyvacon_swig.vectorCalibrationSwaptionPtrNonConst_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(vectorCalibrationSwaptionPtrNonConst self, std::vector< std::shared_ptr< CalibrationSwaption > >::iterator pos, CalibrationSwaptionPtr x) -> std::vector< std::shared_ptr< CalibrationSwaption > >::iterator
        insert(vectorCalibrationSwaptionPtrNonConst self, std::vector< std::shared_ptr< CalibrationSwaption > >::iterator pos, std::vector< std::shared_ptr< CalibrationSwaption > >::size_type n, CalibrationSwaptionPtr x)
        """
        return _pyvacon_swig.vectorCalibrationSwaptionPtrNonConst_insert(self, *args)

    def reserve(self, n):
        r"""reserve(vectorCalibrationSwaptionPtrNonConst self, std::vector< std::shared_ptr< CalibrationSwaption > >::size_type n)"""
        return _pyvacon_swig.vectorCalibrationSwaptionPtrNonConst_reserve(self, n)

    def capacity(self):
        r"""capacity(vectorCalibrationSwaptionPtrNonConst self) -> std::vector< std::shared_ptr< CalibrationSwaption > >::size_type"""
        return _pyvacon_swig.vectorCalibrationSwaptionPtrNonConst_capacity(self)
    __swig_destroy__ = _pyvacon_swig.delete_vectorCalibrationSwaptionPtrNonConst

# Register vectorCalibrationSwaptionPtrNonConst in _pyvacon_swig:
_pyvacon_swig.vectorCalibrationSwaptionPtrNonConst_swigregister(vectorCalibrationSwaptionPtrNonConst)

class mapSwapCurvesNonConst(object):
    r"""Proxy of C++ std::unordered_map< Period,std::shared_ptr< SwapCurve > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(mapSwapCurvesNonConst self) -> SwigPyIterator"""
        return _pyvacon_swig.mapSwapCurvesNonConst_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(mapSwapCurvesNonConst self) -> bool"""
        return _pyvacon_swig.mapSwapCurvesNonConst___nonzero__(self)

    def __bool__(self):
        r"""__bool__(mapSwapCurvesNonConst self) -> bool"""
        return _pyvacon_swig.mapSwapCurvesNonConst___bool__(self)

    def __len__(self):
        r"""__len__(mapSwapCurvesNonConst self) -> std::unordered_map< Period,std::shared_ptr< SwapCurve > >::size_type"""
        return _pyvacon_swig.mapSwapCurvesNonConst___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        r"""__getitem__(mapSwapCurvesNonConst self, Period key) -> std::unordered_map< Period,std::shared_ptr< SwapCurve > >::mapped_type const &"""
        return _pyvacon_swig.mapSwapCurvesNonConst___getitem__(self, key)

    def __delitem__(self, key):
        r"""__delitem__(mapSwapCurvesNonConst self, Period key)"""
        return _pyvacon_swig.mapSwapCurvesNonConst___delitem__(self, key)

    def has_key(self, key):
        r"""has_key(mapSwapCurvesNonConst self, Period key) -> bool"""
        return _pyvacon_swig.mapSwapCurvesNonConst_has_key(self, key)

    def keys(self):
        r"""keys(mapSwapCurvesNonConst self) -> PyObject *"""
        return _pyvacon_swig.mapSwapCurvesNonConst_keys(self)

    def values(self):
        r"""values(mapSwapCurvesNonConst self) -> PyObject *"""
        return _pyvacon_swig.mapSwapCurvesNonConst_values(self)

    def items(self):
        r"""items(mapSwapCurvesNonConst self) -> PyObject *"""
        return _pyvacon_swig.mapSwapCurvesNonConst_items(self)

    def __contains__(self, key):
        r"""__contains__(mapSwapCurvesNonConst self, Period key) -> bool"""
        return _pyvacon_swig.mapSwapCurvesNonConst___contains__(self, key)

    def key_iterator(self):
        r"""key_iterator(mapSwapCurvesNonConst self) -> SwigPyIterator"""
        return _pyvacon_swig.mapSwapCurvesNonConst_key_iterator(self)

    def value_iterator(self):
        r"""value_iterator(mapSwapCurvesNonConst self) -> SwigPyIterator"""
        return _pyvacon_swig.mapSwapCurvesNonConst_value_iterator(self)

    def __setitem__(self, *args):
        r"""
        __setitem__(mapSwapCurvesNonConst self, Period key)
        __setitem__(mapSwapCurvesNonConst self, Period key, std::unordered_map< Period,std::shared_ptr< SwapCurve > >::mapped_type const & x)
        """
        return _pyvacon_swig.mapSwapCurvesNonConst___setitem__(self, *args)

    def asdict(self):
        r"""asdict(mapSwapCurvesNonConst self) -> PyObject *"""
        return _pyvacon_swig.mapSwapCurvesNonConst_asdict(self)

    def __init__(self, *args):
        r"""
        __init__(mapSwapCurvesNonConst self) -> mapSwapCurvesNonConst
        __init__(mapSwapCurvesNonConst self, mapSwapCurvesNonConst other) -> mapSwapCurvesNonConst
        """
        _pyvacon_swig.mapSwapCurvesNonConst_swiginit(self, _pyvacon_swig.new_mapSwapCurvesNonConst(*args))

    def empty(self):
        r"""empty(mapSwapCurvesNonConst self) -> bool"""
        return _pyvacon_swig.mapSwapCurvesNonConst_empty(self)

    def size(self):
        r"""size(mapSwapCurvesNonConst self) -> std::unordered_map< Period,std::shared_ptr< SwapCurve > >::size_type"""
        return _pyvacon_swig.mapSwapCurvesNonConst_size(self)

    def swap(self, v):
        r"""swap(mapSwapCurvesNonConst self, mapSwapCurvesNonConst v)"""
        return _pyvacon_swig.mapSwapCurvesNonConst_swap(self, v)

    def begin(self):
        r"""begin(mapSwapCurvesNonConst self) -> std::unordered_map< Period,std::shared_ptr< SwapCurve > >::iterator"""
        return _pyvacon_swig.mapSwapCurvesNonConst_begin(self)

    def end(self):
        r"""end(mapSwapCurvesNonConst self) -> std::unordered_map< Period,std::shared_ptr< SwapCurve > >::iterator"""
        return _pyvacon_swig.mapSwapCurvesNonConst_end(self)

    def clear(self):
        r"""clear(mapSwapCurvesNonConst self)"""
        return _pyvacon_swig.mapSwapCurvesNonConst_clear(self)

    def get_allocator(self):
        r"""get_allocator(mapSwapCurvesNonConst self) -> std::unordered_map< Period,std::shared_ptr< SwapCurve > >::allocator_type"""
        return _pyvacon_swig.mapSwapCurvesNonConst_get_allocator(self)

    def count(self, x):
        r"""count(mapSwapCurvesNonConst self, Period x) -> std::unordered_map< Period,std::shared_ptr< SwapCurve > >::size_type"""
        return _pyvacon_swig.mapSwapCurvesNonConst_count(self, x)

    def erase(self, *args):
        r"""
        erase(mapSwapCurvesNonConst self, Period x) -> std::unordered_map< Period,std::shared_ptr< SwapCurve > >::size_type
        erase(mapSwapCurvesNonConst self, std::unordered_map< Period,std::shared_ptr< SwapCurve > >::iterator position)
        erase(mapSwapCurvesNonConst self, std::unordered_map< Period,std::shared_ptr< SwapCurve > >::iterator first, std::unordered_map< Period,std::shared_ptr< SwapCurve > >::iterator last)
        """
        return _pyvacon_swig.mapSwapCurvesNonConst_erase(self, *args)

    def find(self, x):
        r"""find(mapSwapCurvesNonConst self, Period x) -> std::unordered_map< Period,std::shared_ptr< SwapCurve > >::iterator"""
        return _pyvacon_swig.mapSwapCurvesNonConst_find(self, x)
    __swig_destroy__ = _pyvacon_swig.delete_mapSwapCurvesNonConst

# Register mapSwapCurvesNonConst in _pyvacon_swig:
_pyvacon_swig.mapSwapCurvesNonConst_swigregister(mapSwapCurvesNonConst)

class CalibrationSwaption(object):
    r"""Proxy of C++ CalibrationSwaption class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def createSwaption(valuationDate, swapIndex, payer, swaptionExpiry, swapLength, swapRate):
        r"""createSwaption(ptime valuationDate, SwapIndex swapIndex, bool payer, Period swaptionExpiry, Period swapLength, double swapRate) -> CalibrationSwaptionPtr"""
        return _pyvacon_swig.CalibrationSwaption_createSwaption(valuationDate, swapIndex, payer, swaptionExpiry, swapLength, swapRate)
    __swig_destroy__ = _pyvacon_swig.delete_CalibrationSwaption

# Register CalibrationSwaption in _pyvacon_swig:
_pyvacon_swig.CalibrationSwaption_swigregister(CalibrationSwaption)

def CalibrationSwaption_createSwaption(valuationDate, swapIndex, payer, swaptionExpiry, swapLength, swapRate):
    r"""CalibrationSwaption_createSwaption(ptime valuationDate, SwapIndex swapIndex, bool payer, Period swaptionExpiry, Period swapLength, double swapRate) -> CalibrationSwaptionPtr"""
    return _pyvacon_swig.CalibrationSwaption_createSwaption(valuationDate, swapIndex, payer, swaptionExpiry, swapLength, swapRate)

class HullWhiteCalibrationParameter(BaseParameter):
    r"""Proxy of C++ HullWhiteCalibrationParameter class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(HullWhiteCalibrationParameter self) -> HullWhiteCalibrationParameter"""
        _pyvacon_swig.HullWhiteCalibrationParameter_swiginit(self, _pyvacon_swig.new_HullWhiteCalibrationParameter())
    __swig_destroy__ = _pyvacon_swig.delete_HullWhiteCalibrationParameter

# Register HullWhiteCalibrationParameter in _pyvacon_swig:
_pyvacon_swig.HullWhiteCalibrationParameter_swigregister(HullWhiteCalibrationParameter)

class HullWhiteParameters(object):
    r"""Proxy of C++ HullWhiteParameters class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyvacon_swig.delete_HullWhiteParameters

# Register HullWhiteParameters in _pyvacon_swig:
_pyvacon_swig.HullWhiteParameters_swigregister(HullWhiteParameters)

class HullWhiteParametersConstCoeff(HullWhiteParameters):
    r"""Proxy of C++ HullWhiteParametersConstCoeff class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getKappa(self):
        r"""getKappa(HullWhiteParametersConstCoeff self) -> double"""
        return _pyvacon_swig.HullWhiteParametersConstCoeff_getKappa(self)

    def getSigma(self):
        r"""getSigma(HullWhiteParametersConstCoeff self) -> double"""
        return _pyvacon_swig.HullWhiteParametersConstCoeff_getSigma(self)
    __swig_destroy__ = _pyvacon_swig.delete_HullWhiteParametersConstCoeff

# Register HullWhiteParametersConstCoeff in _pyvacon_swig:
_pyvacon_swig.HullWhiteParametersConstCoeff_swigregister(HullWhiteParametersConstCoeff)

class HullWhiteParametersPwConstCoeff(HullWhiteParameters):
    r"""Proxy of C++ HullWhiteParametersPwConstCoeff class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getKappa(self):
        r"""getKappa(HullWhiteParametersPwConstCoeff self) -> vectorDouble"""
        return _pyvacon_swig.HullWhiteParametersPwConstCoeff_getKappa(self)

    def getSigma(self):
        r"""getSigma(HullWhiteParametersPwConstCoeff self) -> vectorDouble"""
        return _pyvacon_swig.HullWhiteParametersPwConstCoeff_getSigma(self)

    def getGrid(self):
        r"""getGrid(HullWhiteParametersPwConstCoeff self) -> vectorDouble"""
        return _pyvacon_swig.HullWhiteParametersPwConstCoeff_getGrid(self)
    __swig_destroy__ = _pyvacon_swig.delete_HullWhiteParametersPwConstCoeff

# Register HullWhiteParametersPwConstCoeff in _pyvacon_swig:
_pyvacon_swig.HullWhiteParametersPwConstCoeff_swigregister(HullWhiteParametersPwConstCoeff)

class vectorSwaptionData(object):
    r"""Proxy of C++ std::vector< HullWhiteCalibrationResult::SwaptionData > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(vectorSwaptionData self) -> SwigPyIterator"""
        return _pyvacon_swig.vectorSwaptionData_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(vectorSwaptionData self) -> bool"""
        return _pyvacon_swig.vectorSwaptionData___nonzero__(self)

    def __bool__(self):
        r"""__bool__(vectorSwaptionData self) -> bool"""
        return _pyvacon_swig.vectorSwaptionData___bool__(self)

    def __len__(self):
        r"""__len__(vectorSwaptionData self) -> std::vector< HullWhiteCalibrationResult::SwaptionData >::size_type"""
        return _pyvacon_swig.vectorSwaptionData___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(vectorSwaptionData self, std::vector< HullWhiteCalibrationResult::SwaptionData >::difference_type i, std::vector< HullWhiteCalibrationResult::SwaptionData >::difference_type j) -> vectorSwaptionData"""
        return _pyvacon_swig.vectorSwaptionData___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(vectorSwaptionData self, std::vector< HullWhiteCalibrationResult::SwaptionData >::difference_type i, std::vector< HullWhiteCalibrationResult::SwaptionData >::difference_type j)
        __setslice__(vectorSwaptionData self, std::vector< HullWhiteCalibrationResult::SwaptionData >::difference_type i, std::vector< HullWhiteCalibrationResult::SwaptionData >::difference_type j, vectorSwaptionData v)
        """
        return _pyvacon_swig.vectorSwaptionData___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(vectorSwaptionData self, std::vector< HullWhiteCalibrationResult::SwaptionData >::difference_type i, std::vector< HullWhiteCalibrationResult::SwaptionData >::difference_type j)"""
        return _pyvacon_swig.vectorSwaptionData___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(vectorSwaptionData self, std::vector< HullWhiteCalibrationResult::SwaptionData >::difference_type i)
        __delitem__(vectorSwaptionData self, PySliceObject * slice)
        """
        return _pyvacon_swig.vectorSwaptionData___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(vectorSwaptionData self, PySliceObject * slice) -> vectorSwaptionData
        __getitem__(vectorSwaptionData self, std::vector< HullWhiteCalibrationResult::SwaptionData >::difference_type i) -> SwaptionData
        """
        return _pyvacon_swig.vectorSwaptionData___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(vectorSwaptionData self, PySliceObject * slice, vectorSwaptionData v)
        __setitem__(vectorSwaptionData self, PySliceObject * slice)
        __setitem__(vectorSwaptionData self, std::vector< HullWhiteCalibrationResult::SwaptionData >::difference_type i, SwaptionData x)
        """
        return _pyvacon_swig.vectorSwaptionData___setitem__(self, *args)

    def pop(self):
        r"""pop(vectorSwaptionData self) -> SwaptionData"""
        return _pyvacon_swig.vectorSwaptionData_pop(self)

    def append(self, x):
        r"""append(vectorSwaptionData self, SwaptionData x)"""
        return _pyvacon_swig.vectorSwaptionData_append(self, x)

    def empty(self):
        r"""empty(vectorSwaptionData self) -> bool"""
        return _pyvacon_swig.vectorSwaptionData_empty(self)

    def size(self):
        r"""size(vectorSwaptionData self) -> std::vector< HullWhiteCalibrationResult::SwaptionData >::size_type"""
        return _pyvacon_swig.vectorSwaptionData_size(self)

    def swap(self, v):
        r"""swap(vectorSwaptionData self, vectorSwaptionData v)"""
        return _pyvacon_swig.vectorSwaptionData_swap(self, v)

    def begin(self):
        r"""begin(vectorSwaptionData self) -> std::vector< HullWhiteCalibrationResult::SwaptionData >::iterator"""
        return _pyvacon_swig.vectorSwaptionData_begin(self)

    def end(self):
        r"""end(vectorSwaptionData self) -> std::vector< HullWhiteCalibrationResult::SwaptionData >::iterator"""
        return _pyvacon_swig.vectorSwaptionData_end(self)

    def rbegin(self):
        r"""rbegin(vectorSwaptionData self) -> std::vector< HullWhiteCalibrationResult::SwaptionData >::reverse_iterator"""
        return _pyvacon_swig.vectorSwaptionData_rbegin(self)

    def rend(self):
        r"""rend(vectorSwaptionData self) -> std::vector< HullWhiteCalibrationResult::SwaptionData >::reverse_iterator"""
        return _pyvacon_swig.vectorSwaptionData_rend(self)

    def clear(self):
        r"""clear(vectorSwaptionData self)"""
        return _pyvacon_swig.vectorSwaptionData_clear(self)

    def get_allocator(self):
        r"""get_allocator(vectorSwaptionData self) -> std::vector< HullWhiteCalibrationResult::SwaptionData >::allocator_type"""
        return _pyvacon_swig.vectorSwaptionData_get_allocator(self)

    def pop_back(self):
        r"""pop_back(vectorSwaptionData self)"""
        return _pyvacon_swig.vectorSwaptionData_pop_back(self)

    def erase(self, *args):
        r"""
        erase(vectorSwaptionData self, std::vector< HullWhiteCalibrationResult::SwaptionData >::iterator pos) -> std::vector< HullWhiteCalibrationResult::SwaptionData >::iterator
        erase(vectorSwaptionData self, std::vector< HullWhiteCalibrationResult::SwaptionData >::iterator first, std::vector< HullWhiteCalibrationResult::SwaptionData >::iterator last) -> std::vector< HullWhiteCalibrationResult::SwaptionData >::iterator
        """
        return _pyvacon_swig.vectorSwaptionData_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(vectorSwaptionData self) -> vectorSwaptionData
        __init__(vectorSwaptionData self, vectorSwaptionData other) -> vectorSwaptionData
        __init__(vectorSwaptionData self, std::vector< HullWhiteCalibrationResult::SwaptionData >::size_type size) -> vectorSwaptionData
        __init__(vectorSwaptionData self, std::vector< HullWhiteCalibrationResult::SwaptionData >::size_type size, SwaptionData value) -> vectorSwaptionData
        """
        _pyvacon_swig.vectorSwaptionData_swiginit(self, _pyvacon_swig.new_vectorSwaptionData(*args))

    def push_back(self, x):
        r"""push_back(vectorSwaptionData self, SwaptionData x)"""
        return _pyvacon_swig.vectorSwaptionData_push_back(self, x)

    def front(self):
        r"""front(vectorSwaptionData self) -> SwaptionData"""
        return _pyvacon_swig.vectorSwaptionData_front(self)

    def back(self):
        r"""back(vectorSwaptionData self) -> SwaptionData"""
        return _pyvacon_swig.vectorSwaptionData_back(self)

    def assign(self, n, x):
        r"""assign(vectorSwaptionData self, std::vector< HullWhiteCalibrationResult::SwaptionData >::size_type n, SwaptionData x)"""
        return _pyvacon_swig.vectorSwaptionData_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(vectorSwaptionData self, std::vector< HullWhiteCalibrationResult::SwaptionData >::size_type new_size)
        resize(vectorSwaptionData self, std::vector< HullWhiteCalibrationResult::SwaptionData >::size_type new_size, SwaptionData x)
        """
        return _pyvacon_swig.vectorSwaptionData_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(vectorSwaptionData self, std::vector< HullWhiteCalibrationResult::SwaptionData >::iterator pos, SwaptionData x) -> std::vector< HullWhiteCalibrationResult::SwaptionData >::iterator
        insert(vectorSwaptionData self, std::vector< HullWhiteCalibrationResult::SwaptionData >::iterator pos, std::vector< HullWhiteCalibrationResult::SwaptionData >::size_type n, SwaptionData x)
        """
        return _pyvacon_swig.vectorSwaptionData_insert(self, *args)

    def reserve(self, n):
        r"""reserve(vectorSwaptionData self, std::vector< HullWhiteCalibrationResult::SwaptionData >::size_type n)"""
        return _pyvacon_swig.vectorSwaptionData_reserve(self, n)

    def capacity(self):
        r"""capacity(vectorSwaptionData self) -> std::vector< HullWhiteCalibrationResult::SwaptionData >::size_type"""
        return _pyvacon_swig.vectorSwaptionData_capacity(self)
    __swig_destroy__ = _pyvacon_swig.delete_vectorSwaptionData

# Register vectorSwaptionData in _pyvacon_swig:
_pyvacon_swig.vectorSwaptionData_swigregister(vectorSwaptionData)

class HullWhiteCalibrationResult(CalibrationResult):
    r"""Proxy of C++ HullWhiteCalibrationResult class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getParams(self):
        r"""getParams(HullWhiteCalibrationResult self) -> std::shared_ptr< HullWhiteParameters const >"""
        return _pyvacon_swig.HullWhiteCalibrationResult_getParams(self)

    def getR2(self):
        r"""getR2(HullWhiteCalibrationResult self) -> double"""
        return _pyvacon_swig.HullWhiteCalibrationResult_getR2(self)

    def getSwaptionData(self):
        r"""getSwaptionData(HullWhiteCalibrationResult self) -> vectorSwaptionData"""
        return _pyvacon_swig.HullWhiteCalibrationResult_getSwaptionData(self)

    def getNSwaptions(self):
        r"""getNSwaptions(HullWhiteCalibrationResult self) -> size_t"""
        return _pyvacon_swig.HullWhiteCalibrationResult_getNSwaptions(self)

    def getSwaptionMarketPrice(self, i):
        r"""getSwaptionMarketPrice(HullWhiteCalibrationResult self, size_t i) -> double"""
        return _pyvacon_swig.HullWhiteCalibrationResult_getSwaptionMarketPrice(self, i)

    def getSwaptionCalibratedPrice(self, i):
        r"""getSwaptionCalibratedPrice(HullWhiteCalibrationResult self, size_t i) -> double"""
        return _pyvacon_swig.HullWhiteCalibrationResult_getSwaptionCalibratedPrice(self, i)

    def getSwaptionMarketVola(self, i):
        r"""getSwaptionMarketVola(HullWhiteCalibrationResult self, size_t i) -> double"""
        return _pyvacon_swig.HullWhiteCalibrationResult_getSwaptionMarketVola(self, i)

    def getSwaptionCalibratedVola(self, i):
        r"""getSwaptionCalibratedVola(HullWhiteCalibrationResult self, size_t i) -> double"""
        return _pyvacon_swig.HullWhiteCalibrationResult_getSwaptionCalibratedVola(self, i)
    __swig_destroy__ = _pyvacon_swig.delete_HullWhiteCalibrationResult

# Register HullWhiteCalibrationResult in _pyvacon_swig:
_pyvacon_swig.HullWhiteCalibrationResult_swigregister(HullWhiteCalibrationResult)

class SwaptionData(object):
    r"""Proxy of C++ HullWhiteCalibrationResult::SwaptionData class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    marketPrice = property(_pyvacon_swig.SwaptionData_marketPrice_get, _pyvacon_swig.SwaptionData_marketPrice_set, doc=r"""marketPrice : double""")
    calibratedPrice = property(_pyvacon_swig.SwaptionData_calibratedPrice_get, _pyvacon_swig.SwaptionData_calibratedPrice_set, doc=r"""calibratedPrice : double""")
    marketVola = property(_pyvacon_swig.SwaptionData_marketVola_get, _pyvacon_swig.SwaptionData_marketVola_set, doc=r"""marketVola : double""")
    calibratedVola = property(_pyvacon_swig.SwaptionData_calibratedVola_get, _pyvacon_swig.SwaptionData_calibratedVola_set, doc=r"""calibratedVola : double""")
    __swig_destroy__ = _pyvacon_swig.delete_SwaptionData

# Register SwaptionData in _pyvacon_swig:
_pyvacon_swig.SwaptionData_swigregister(SwaptionData)

class HullWhiteCalibrator(BaseCalibrator):
    r"""Proxy of C++ HullWhiteCalibrator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    _Method_ConstantParameters = _pyvacon_swig.HullWhiteCalibrator__Method_ConstantParameters
    
    _Method_PwConstantParameters = _pyvacon_swig.HullWhiteCalibrator__Method_PwConstantParameters
    

    Method = _enum_creator.create_enum('Method', vars())
    _Method_Str = (lambda t: lambda x : t[x])(Method)
    setEnumClass('HullWhiteCalibrator', 'Method', Method, _Method_Str)


    def __init__(self):
        r"""__init__(HullWhiteCalibrator self) -> HullWhiteCalibrator"""
        _pyvacon_swig.HullWhiteCalibrator_swiginit(self, _pyvacon_swig.new_HullWhiteCalibrator())

    def calibrateImpl(self, method, calDate, swaptions, quotes, weights, discountCurve, swapCurves, param):
        r"""calibrateImpl(HullWhiteCalibrator self, HullWhiteCalibrator::Method method, ptime calDate, vectorCalibrationSwaptionPtr swaptions, vectorDouble quotes, vectorDouble weights, std::shared_ptr< DiscountCurve const > const & discountCurve, mapSwapCurves swapCurves, std::shared_ptr< HullWhiteCalibrationParameter const > const & param) -> std::shared_ptr< HullWhiteCalibrationResult >"""
        return _pyvacon_swig.HullWhiteCalibrator_calibrateImpl(self, method, calDate, swaptions, quotes, weights, discountCurve, swapCurves, param)
    __swig_destroy__ = _pyvacon_swig.delete_HullWhiteCalibrator

# Register HullWhiteCalibrator in _pyvacon_swig:
_pyvacon_swig.HullWhiteCalibrator_swigregister(HullWhiteCalibrator)


def calcEuropeanCallPrice(strike, maturity, discountFactor, forward, volatility):
    r"""calcEuropeanCallPrice(double strike, double maturity, double discountFactor, double forward, double volatility) -> double"""
    return _pyvacon_swig.calcEuropeanCallPrice(strike, maturity, discountFactor, forward, volatility)

def calcEuropeanCallDelta(normalizedStrike, maturity, discountFactor, normalizedForward, volatility):
    r"""calcEuropeanCallDelta(double normalizedStrike, double maturity, double discountFactor, double normalizedForward, double volatility) -> double"""
    return _pyvacon_swig.calcEuropeanCallDelta(normalizedStrike, maturity, discountFactor, normalizedForward, volatility)

def calcEuropeanPutPrice(strike, maturity, discountFactor, forward, volatilit):
    r"""calcEuropeanPutPrice(double strike, double maturity, double discountFactor, double forward, double volatilit) -> double"""
    return _pyvacon_swig.calcEuropeanPutPrice(strike, maturity, discountFactor, forward, volatilit)

def calcEuropeanPutDelta(normalizedStrike, maturity, discountFactor, normalizedForward, volatility):
    r"""calcEuropeanPutDelta(double normalizedStrike, double maturity, double discountFactor, double normalizedForward, double volatility) -> double"""
    return _pyvacon_swig.calcEuropeanPutDelta(normalizedStrike, maturity, discountFactor, normalizedForward, volatility)

def calcEuropeanDigitalPutPrice(strike, maturity, discountFactor, forward, volatility, dkvolatility):
    r"""calcEuropeanDigitalPutPrice(double strike, double maturity, double discountFactor, double forward, double volatility, double dkvolatility) -> double"""
    return _pyvacon_swig.calcEuropeanDigitalPutPrice(strike, maturity, discountFactor, forward, volatility, dkvolatility)

def calcEuropeanDigitalCallPrice(strike, maturity, discountFactor, forward, volatility, dkvolatility):
    r"""calcEuropeanDigitalCallPrice(double strike, double maturity, double discountFactor, double forward, double volatility, double dkvolatility) -> double"""
    return _pyvacon_swig.calcEuropeanDigitalCallPrice(strike, maturity, discountFactor, forward, volatility, dkvolatility)

def calcImpliedVol(price, strike, maturity, discountFactor, forward, optionType, tol):
    r"""calcImpliedVol(double price, double strike, double maturity, double discountFactor, double forward, std::string const & optionType, double tol) -> double"""
    return _pyvacon_swig.calcImpliedVol(price, strike, maturity, discountFactor, forward, optionType, tol)

def computeRealStrike(strikeX, nonDefFwd, discFutureCashDiv):
    r"""computeRealStrike(double strikeX, double nonDefFwd, double discFutureCashDiv) -> double"""
    return _pyvacon_swig.computeRealStrike(strikeX, nonDefFwd, discFutureCashDiv)

def computeXStrike(strike, nonDefFwd, discFutureCashDiv):
    r"""computeXStrike(double strike, double nonDefFwd, double discFutureCashDiv) -> double"""
    return _pyvacon_swig.computeXStrike(strike, nonDefFwd, discFutureCashDiv)

def calcATMStrike(fwd, maturity, vol, premiumAdjustedDelta):
    r"""calcATMStrike(double fwd, double maturity, double vol, bool premiumAdjustedDelta) -> double"""
    return _pyvacon_swig.calcATMStrike(fwd, maturity, vol, premiumAdjustedDelta)

def calcATMDelta(forDf, maturity, vol, premiumAdjustedDelta, spotDelta):
    r"""calcATMDelta(double forDf, double maturity, double vol, bool premiumAdjustedDelta, bool spotDelta) -> double"""
    return _pyvacon_swig.calcATMDelta(forDf, maturity, vol, premiumAdjustedDelta, spotDelta)

def calcFxOptionCallDelta(strike, maturity, dfQuoteCurr, forward, volatility, dfBaseCurr, premiumAdjustedDelta, spotDelta):
    r"""calcFxOptionCallDelta(double strike, double maturity, double dfQuoteCurr, double forward, double volatility, double dfBaseCurr, bool premiumAdjustedDelta, bool spotDelta) -> double"""
    return _pyvacon_swig.calcFxOptionCallDelta(strike, maturity, dfQuoteCurr, forward, volatility, dfBaseCurr, premiumAdjustedDelta, spotDelta)

def calcFxOptionPutDelta(strike, maturity, dfQuoteCurr, forward, volatility, dfBaseCurr, premiumAdjustedDelta, spotDelta):
    r"""calcFxOptionPutDelta(double strike, double maturity, double dfQuoteCurr, double forward, double volatility, double dfBaseCurr, bool premiumAdjustedDelta, bool spotDelta) -> double"""
    return _pyvacon_swig.calcFxOptionPutDelta(strike, maturity, dfQuoteCurr, forward, volatility, dfBaseCurr, premiumAdjustedDelta, spotDelta)

def calcFxOptionCallStrike(delta, maturity, dfQuoteCurr, forward, volatility, dfBaseCurr, premiumAdjustedDelta, spotDelta):
    r"""calcFxOptionCallStrike(double delta, double maturity, double dfQuoteCurr, double forward, double volatility, double dfBaseCurr, bool premiumAdjustedDelta, bool spotDelta) -> double"""
    return _pyvacon_swig.calcFxOptionCallStrike(delta, maturity, dfQuoteCurr, forward, volatility, dfBaseCurr, premiumAdjustedDelta, spotDelta)

def calcFxOptionPutStrike(delta, maturity, dfQuoteCurr, forward, volatility, dfBaseCurr, premiumAdjustedDelta, spotDelta):
    r"""calcFxOptionPutStrike(double delta, double maturity, double dfQuoteCurr, double forward, double volatility, double dfBaseCurr, bool premiumAdjustedDelta, bool spotDelta) -> double"""
    return _pyvacon_swig.calcFxOptionPutStrike(delta, maturity, dfQuoteCurr, forward, volatility, dfBaseCurr, premiumAdjustedDelta, spotDelta)
class RegisterAll(object):
    r"""Proxy of C++ RegisterAll class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(RegisterAll self) -> RegisterAll"""
        _pyvacon_swig.RegisterAll_swiginit(self, _pyvacon_swig.new_RegisterAll())
    __swig_destroy__ = _pyvacon_swig.delete_RegisterAll

# Register RegisterAll in _pyvacon_swig:
_pyvacon_swig.RegisterAll_swigregister(RegisterAll)



