name: Tests

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  release:
    types: [published]

jobs:
  tests:
    name: "${{ matrix.pymc-version }} on py${{ matrix.python-version }}"
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8"]
        pymc-version: ["pymc3==3.9.3", "pymc3==3.10", "pymc3==3.11"]
        include:
          - python-version: "3.8"
            pymc-version: "https://github.com/pymc-devs/pymc3/archive/master.zip"

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: true

      - uses: actions/cache@v2
        with:
          path: ~/.theano
          key: xo-${{ runner.os }}-py${{ matrix.python-version }}-${{ matrix.pymc-version }}-${{ github.sha }}
          restore-keys: |
            xo-${{ runner.os }}-py${{ matrix.python-version }}-${{ matrix.pymc-version }}-

      - name: Set up Python ${{ matrix.python-version }}
        uses: conda-incubator/setup-miniconda@v2
        with:
          auto-update-conda: true
          python-version: ${{ matrix.python-version }}

      # Setup
      - name: Install dependencies
        shell: bash -l {0}
        run: |
          python -m pip install -U pip
          python -m pip install "${{ matrix.pymc-version }}"
          python -m pip install -e .[test]
          python -m pip install --no-deps starry rebound-pymc3
          python -c 'import theano; print(theano.config.__str__(print_doc=False))'

      - name: Run tests
        shell: bash -l {0}
        run: python -m pytest --cov=exoplanet -v tests

      - name: Get unique id
        id: unique-id
        env:
          STRATEGY_CONTEXT: ${{ toJson(strategy) }}
        run: |
          export JOB_ID=`echo $STRATEGY_CONTEXT | md5sum`
          echo "::set-output name=id::$JOB_ID"

      - uses: actions/upload-artifact@v2
        with:
          name: cov-${{ steps.unique-id.outputs.id }}
          path: .coverage

  coverage:
    name: "Merge and upload coverage"
    needs: tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: 3.7
      - name: Download all artifacts
        uses: actions/download-artifact@v2
      - name: Merge and upload coverage
        run: |
          python -m pip install coveralls
          find . -name \.coverage -exec coverage combine --append {} \;
          coveralls
        env:
          GITHUB_TOKEN: ${{ secrets.github_token }}
