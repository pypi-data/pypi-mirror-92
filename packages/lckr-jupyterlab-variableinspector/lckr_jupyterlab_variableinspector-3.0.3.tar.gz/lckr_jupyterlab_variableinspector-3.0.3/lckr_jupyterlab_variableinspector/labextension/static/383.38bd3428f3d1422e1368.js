(self.webpackChunk_lckr_jupyterlab_variableinspector=self.webpackChunk_lckr_jupyterlab_variableinspector||[]).push([[383],{383:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>k});var r,s=t(261),i=t(797),a=t(510),o=t(654),c=t(989),l=t(379),p=t.n(l),d=t(760);p()(d.Z,{insert:"head",singleton:!1}),d.Z.locals,new i.Token("jupyterlab_extension/variableinspector:IVariableInspector");class _ extends a.Widget{constructor(){super(),this._source=null,this.addClass("jp-VarInspector"),this._title=r.createTitle(),this._title.className="jp-VarInspector-title",this._table=r.createTable(),this._table.className="jp-VarInspector-table",this.node.appendChild(this._title),this.node.appendChild(this._table)}get source(){return this._source}set source(e){this._source!==e&&(this._source&&(this._source.inspected.disconnect(this.onInspectorUpdate,this),this._source.disposed.disconnect(this.onSourceDisposed,this)),this._source=e,this._source&&(this._source.inspected.connect(this.onInspectorUpdate,this),this._source.disposed.connect(this.onSourceDisposed,this),this._source.performInspection()))}dispose(){this.isDisposed||(this.source=null,super.dispose())}onInspectorUpdate(e,n){if(!this.isAttached)return;const t=n.title,r=n.payload;let i;t.contextName?this._title.innerHTML=t.contextName:this._title.innerHTML="    Inspecting '"+t.kernelName+"' "+t.contextName,this._table.deleteTFoot(),this._table.createTFoot(),this._table.tFoot.className="jp-VarInspector-content";for(let e=0;e<r.length;e++){const n=r[e];console.log(n);const t=n.varName,o=n.varType;i=this._table.tFoot.insertRow();let l=i.insertCell(0);l.title="Delete Variable",l.className="jp-VarInspector-deleteButton";const p=c.closeIcon.element();if(p.onclick=e=>{this.source.performDelete(t)},l.append(p),l=i.insertCell(1),n.isMatrix){l.title="View Contents",l.className="jp-VarInspector-inspectButton";const e=c.searchIcon.element();e.onclick=e=>{console.log("Click on "+t),this._source.performMatrixInspection(t).then((e=>{this._showMatrix(e,t,o)}))},l.append(e)}else l.innerHTML="";l=i.insertCell(2),l.className="jp-VarInspector-varName",l.innerHTML=t,l=i.insertCell(3),l.innerHTML=o,l=i.insertCell(4),l.innerHTML=n.varSize,l=i.insertCell(5),l.innerHTML=n.varShape,l=i.insertCell(6);const d=this._source.rendermime;if(n.isWidget&&d){const e=new s.OutputAreaModel({trusted:!0}),t=new s.SimplifiedOutputArea({model:e,rendermime:d});t.future=this._source.performWidgetInspection(n.varName),a.Widget.attach(t,l)}else l.innerHTML=n.varContent.replace(/\\n/g,"</br>")}}onSourceDisposed(e,n){this.source=null}_showMatrix(e,n,t){const r=new o.DataGrid({defaultSizes:{rowHeight:32,columnWidth:128,rowHeaderWidth:64,columnHeaderHeight:32}});r.dataModel=e,r.title.label=t+": "+n,r.title.closable=!0,this.parent.layout.addWidget(r,{mode:"split-right"})}}!function(e){e.createTable=function(){const e=document.createElement("table");e.createTHead();const n=e.tHead.insertRow(0);return n.insertCell(0).innerHTML="",n.insertCell(1).innerHTML="",n.insertCell(2).innerHTML="Name",n.insertCell(3).innerHTML="Type",n.insertCell(4).innerHTML="Size",n.insertCell(5).innerHTML="Shape",n.insertCell(6).innerHTML="Content",e},e.createTitle=function(e=""){const n=document.createElement("p");return n.innerHTML=e,n}}(r||(r={}));var u=t(168);class m{constructor(e){this._kernelRestarted=new u.Signal(this),this._session=e.session,this._session.statusChanged.connect(((e,n)=>{switch(n){case"restarting":case"autorestarting":this._kernelRestarted.emit(this._session.ready)}}))}get kernelRestarted(){return this._kernelRestarted}get kernelLanguage(){return this._session.session.kernel.info.then((e=>e.language_info.name))}get kernelName(){return this._session.kernelDisplayName}get ready(){return this._session.ready}get iopubMessage(){return this._session.iopubMessage}fetch(e,n){const t=this._session.session.kernel;if(!t)return Promise.reject(new Error("Require kernel to perform variable inspection!"));const r=t.requestExecute(e);return r.onIOPub=e=>{n(e)},r.done}execute(e){return this._session.session.kernel.requestExecute(e)}}class h{constructor(e){this._disposed=new u.Signal(this),this._inspected=new u.Signal(this),this._isDisposed=!1,this._handleQueryResponse=e=>{switch(e.header.msg_type){case"execute_result":{let n=e.content.data["text/plain"];"'"!==n.slice(0,1)&&'"'!==n.slice(0,1)||(n=n.slice(1,-1),n=n.replace(/\\"/g,'"').replace(/\\'/g,"'"));const t=JSON.parse(n),r={contextName:"",kernelName:this._connector.kernelName||""};this._inspected.emit({title:r,payload:t});break}case"display_data":{let n=e.content.data["text/plain"];"'"!==n.slice(0,1)&&'"'!==n.slice(0,1)||(n=n.slice(1,-1),n=n.replace(/\\"/g,'"').replace(/\\'/g,"'"));const t=JSON.parse(n),r={contextName:"",kernelName:this._connector.kernelName||""};this._inspected.emit({title:r,payload:t});break}}},this._queryCall=(e,n)=>{switch(n.header.msg_type){case"execute_input":{const e=n.content.code;e===this._queryCommand||e===this._matrixQueryCommand||e.startsWith(this._widgetQueryCommand)||this._widgetQueryCommand.length>0||this.performInspection();break}}},this._id=e.id,this._connector=e.connector,this._rendermime=e.rendermime,this._queryCommand=e.queryCommand,this._matrixQueryCommand=e.matrixQueryCommand,this._widgetQueryCommand=e.widgetQueryCommand,this._deleteCommand=e.deleteCommand,this._initScript=e.initScript,this._ready=this._connector.ready.then((()=>{this._initOnKernel().then((e=>{this._connector.iopubMessage.connect(this._queryCall)}))})),this._connector.kernelRestarted.connect(((e,n)=>{this._inspected.emit({title:{contextName:"<b>Restarting kernel...</b> "},payload:[]}),this._ready=n.then((()=>{this._initOnKernel().then((e=>{this._connector.iopubMessage.connect(this._queryCall),this.performInspection()}))}))}))}get id(){return this._id}get rendermime(){return this._rendermime}get disposed(){return this._disposed}get isDisposed(){return this._isDisposed}get ready(){return this._ready}get inspected(){return this._inspected}performInspection(){const e={code:this._queryCommand,stop_on_error:!1,store_history:!1};this._connector.fetch(e,this._handleQueryResponse)}performWidgetInspection(e){const n={code:this._widgetQueryCommand+"("+e+")",stop_on_error:!1,store_history:!1};return this._connector.execute(n)}performMatrixInspection(e,n=1e5){const t={code:this._matrixQueryCommand+"("+e+", "+n+")",stop_on_error:!1,store_history:!1},r=this._connector;return new Promise(((e,n)=>{r.fetch(t,(t=>{switch(t.header.msg_type){case"execute_result":{let n=t.content.data["text/plain"];n=n.replace(/^'|'$/g,""),n=n.replace(/\\"/g,'"'),n=n.replace(/\\'/g,"\\\\'");const r=JSON.parse(n),s=new o.JSONModel(r);e(s);break}case"error":console.log(t),n("Kernel error on 'matrixQuery' call!")}}))}))}performDelete(e){const n={code:this._deleteCommand+"('"+e+"')",stop_on_error:!1,store_history:!1};this._connector.fetch(n,this._handleQueryResponse)}dispose(){this.isDisposed||(this._isDisposed=!0,this._disposed.emit(void 0),u.Signal.clearData(this))}_initOnKernel(){const e={code:this._initScript,stop_on_error:!1,silent:!0};return this._connector.fetch(e,(()=>{}))}}class b{constructor(e){this._isDisposed=!1,this._disposed=new u.Signal(this),this._inspected=new u.Signal(this),this._rendermime=null,this._connector=e}get disposed(){return this._disposed}get isDisposed(){return this._isDisposed}get inspected(){return this._inspected}get rendermime(){return this._rendermime}dispose(){this.isDisposed||(this._isDisposed=!0,this._disposed.emit(void 0),u.Signal.clearData(this))}performInspection(){const e={contextName:". <b>Language currently not supported.</b> ",kernelName:this._connector.kernelName||""};this._inspected.emit({title:e,payload:[]})}performMatrixInspection(e,n){return new Promise(((e,n)=>{n("Cannot inspect matrices w/ the DummyHandler!")}))}performWidgetInspection(e){return this._connector.execute({code:"",stop_on_error:!1,store_history:!1})}performDelete(e){}}const f=new i.Token("jupyterlab_extension/variableinspector:IVariableInspectorManager");class y{constructor(){this._source=null,this._panel=null,this._handlers={}}hasHandler(e){return!!this._handlers[e]}getHandler(e){return this._handlers[e]}addHandler(e){this._handlers[e.id]=e}get panel(){return this._panel}set panel(e){this.panel!==e&&(this._panel=e,e&&!e.source&&(e.source=this._source))}get source(){return this._source}set source(e){this._source!==e&&(this._source&&this._source.disposed.disconnect(this._onSourceDisposed,this),this._source=e,this._panel&&!this._panel.isDisposed&&(this._panel.source=this._source),this._source&&this._source.disposed.connect(this._onSourceDisposed,this))}_onSourceDisposed(){this._source=null}}class g{static getScript(e){return new Promise(((n,t)=>{e in g.scripts?n(g.scripts[e]):t("Language "+e+" not supported yet!")}))}}g.py_script='import json\n  import sys\n  from IPython import get_ipython\n  from IPython.core.magics.namespace import NamespaceMagics\n  \n  \n  _jupyterlab_variableinspector_nms = NamespaceMagics()\n  _jupyterlab_variableinspector_Jupyter = get_ipython()\n  _jupyterlab_variableinspector_nms.shell = _jupyterlab_variableinspector_Jupyter.kernel.shell\n  \n  __np = None\n  __pd = None\n  __pyspark = None\n  __tf = None\n  __K = None\n  __ipywidgets = None\n  \n  \n  def _check_imported():\n      global __np, __pd, __pyspark, __tf, __K, __ipywidgets\n  \n      if \'numpy\' in sys.modules:\n          # don\'t really need the try\n          import numpy as __np\n  \n      if \'pandas\' in sys.modules:\n          import pandas as __pd\n  \n      if \'pyspark\' in sys.modules:\n          import pyspark as __pyspark\n  \n      if \'tensorflow\' in sys.modules or \'keras\' in sys.modules:\n          import tensorflow as __tf\n  \n          try:\n              import keras.backend as __K\n          except ImportError:\n              try:\n                  import tensorflow.keras.backend as __K\n              except ImportError:\n                  __K = None\n  \n      if \'ipywidgets\' in sys.modules:\n          import ipywidgets as __ipywidgets\n  \n  \n  def _jupyterlab_variableinspector_getsizeof(x):\n      if type(x).__name__ in [\'ndarray\', \'Series\']:\n          return x.nbytes\n      elif __pyspark and isinstance(x, __pyspark.sql.DataFrame):\n          return "?"\n      elif __tf and isinstance(x, __tf.Variable):\n          return "?"\n      elif __pd and type(x).__name__ == \'DataFrame\':\n          return x.memory_usage().sum()\n      else:\n          return sys.getsizeof(x)\n  \n  \n  def _jupyterlab_variableinspector_getshapeof(x):\n      if __pd and isinstance(x, __pd.DataFrame):\n          return "%d rows x %d cols" % x.shape\n      if __pd and isinstance(x, __pd.Series):\n          return "%d rows" % x.shape\n      if __np and isinstance(x, __np.ndarray):\n          shape = " x ".join([str(i) for i in x.shape])\n          return "%s" % shape\n      if __pyspark and isinstance(x, __pyspark.sql.DataFrame):\n          return "? rows x %d cols" % len(x.columns)\n      if __tf and isinstance(x, __tf.Variable):\n          shape = " x ".join([str(int(i)) for i in x.shape])\n          return "%s" % shape\n      if __tf and isinstance(x, __tf.Tensor):\n          shape = " x ".join([str(int(i)) for i in x.shape])\n          return "%s" % shape\n      if isinstance(x, list):\n          return "%s" % len(x)\n      if isinstance(x, dict):\n          return "%s keys" % len(x)\n      return None\n  \n  \n  def _jupyterlab_variableinspector_getcontentof(x):\n      # returns content in a friendly way for python variables\n      # pandas and numpy\n      if __pd and isinstance(x, __pd.DataFrame):\n          colnames = \', \'.join(x.columns.map(str))\n          content = "Columns: %s" % colnames\n      elif __pd and isinstance(x, __pd.Series):\n          content = str(x.values).replace(" ", ", ")[1:-1]\n          content = content.replace("\\n", "")\n      elif __np and isinstance(x, __np.ndarray):\n          content = x.__repr__()\n      else:\n          content = str(x)\n  \n      if len(content) > 150:\n          return content[:150] + " ..."\n      else:\n          return content\n  \n  \n  def _jupyterlab_variableinspector_is_matrix(x):\n      # True if type(x).__name__ in ["DataFrame", "ndarray", "Series"] else False\n      if __pd and isinstance(x, __pd.DataFrame):\n          return True\n      if __pd and isinstance(x, __pd.Series):\n          return True\n      if __np and isinstance(x, __np.ndarray) and len(x.shape) <= 2:\n          return True\n      if __pyspark and isinstance(x, __pyspark.sql.DataFrame):\n          return True\n      if __tf and isinstance(x, __tf.Variable) and len(x.shape) <= 2:\n          return True\n      if __tf and isinstance(x, __tf.Tensor) and len(x.shape) <= 2:\n          return True\n      if isinstance(x, list):\n          return True\n      return False\n  \n  \n  def _jupyterlab_variableinspector_is_widget(x):\n      return __ipywidgets and issubclass(x, __ipywidgets.DOMWidget)\n  \n  \n  def _jupyterlab_variableinspector_dict_list():\n      _check_imported()\n      def keep_cond(v):\n          try:\n              obj = eval(v)\n              if isinstance(obj, str):\n                  return True\n              if __tf and isinstance(obj, __tf.Variable):\n                  return True\n              if __pd and __pd is not None and (\n                  isinstance(obj, __pd.core.frame.DataFrame)\n                  or isinstance(obj, __pd.core.series.Series)):\n                  return True\n              if str(obj)[0] == "<":\n                  return False\n              if  v in [\'__np\', \'__pd\', \'__pyspark\', \'__tf\', \'__K\', \'__ipywidgets\']:\n                  return obj is not None\n              if str(obj).startswith("_Feature"):\n                  # removes tf/keras objects\n                  return False\n              return True\n          except:\n              return False\n      values = _jupyterlab_variableinspector_nms.who_ls()\n      vardic = [\n          {\n              \'varName\': _v,\n              \'varType\': type(eval(_v)).__name__, \n              \'varSize\': str(_jupyterlab_variableinspector_getsizeof(eval(_v))), \n              \'varShape\': str(_jupyterlab_variableinspector_getshapeof(eval(_v))) if _jupyterlab_variableinspector_getshapeof(eval(_v)) else \'\', \n              \'varContent\': str(_jupyterlab_variableinspector_getcontentof(eval(_v))), \n              \'isMatrix\': _jupyterlab_variableinspector_is_matrix(eval(_v)),\n              \'isWidget\': _jupyterlab_variableinspector_is_widget(type(eval(_v)))\n          }\n          for _v in values if keep_cond(_v)\n      ]\n      return json.dumps(vardic, ensure_ascii=False)\n  \n  \n  def _jupyterlab_variableinspector_getmatrixcontent(x, max_rows=10000):\n      # to do: add something to handle this in the future\n      threshold = max_rows\n  \n      if __pd and __pyspark and isinstance(x, __pyspark.sql.DataFrame):\n          df = x.limit(threshold).toPandas()\n          return _jupyterlab_variableinspector_getmatrixcontent(df.copy())\n      elif __np and __pd and type(x).__name__ == "DataFrame":\n          if threshold is not None:\n              x = x.head(threshold)\n          x.columns = x.columns.map(str)\n          return x.to_json(orient="table", default_handler=_jupyterlab_variableinspector_default, force_ascii=False)\n      elif __np and __pd and type(x).__name__ == "Series":\n          if threshold is not None:\n              x = x.head(threshold)\n          return x.to_json(orient="table", default_handler=_jupyterlab_variableinspector_default, force_ascii=False)\n      elif __np and __pd and type(x).__name__ == "ndarray":\n          df = __pd.DataFrame(x)\n          return _jupyterlab_variableinspector_getmatrixcontent(df)\n      elif __tf and (isinstance(x, __tf.Variable) or isinstance(x, __tf.Tensor)):\n          df = __K.get_value(x)\n          return _jupyterlab_variableinspector_getmatrixcontent(df)\n      elif isinstance(x, list):\n          s = __pd.Series(x)\n          return _jupyterlab_variableinspector_getmatrixcontent(s)\n  \n  \n  def _jupyterlab_variableinspector_displaywidget(widget):\n      display(widget)\n  \n  \n  def _jupyterlab_variableinspector_default(o):\n      if isinstance(o, __np.number): return int(o)  \n      raise TypeError\n  \n  \n  def _jupyterlab_variableinspector_deletevariable(x):\n      exec("del %s" % x, globals())\n  ',g.r_script='library(repr)\n  \n  .ls.objects = function (pos = 1, pattern, order.by, decreasing = FALSE, head = FALSE, \n      n = 5) \n  {\n      napply <- function(names, fn) sapply(names, function(x) fn(get(x, \n          pos = pos)))\n      names <- ls(pos = pos, pattern = pattern)\n      if (length(names) == 0) {\n          return(jsonlite::toJSON(data.frame()))\n      }\n      obj.class <- napply(names, function(x) as.character(class(x))[1])\n      obj.mode <- napply(names, mode)\n      obj.type <- ifelse(is.na(obj.class), obj.mode, obj.class)\n      obj.size <- napply(names, object.size)\n      obj.dim <- t(napply(names, function(x) as.numeric(dim(x))[1:2]))\n      obj.content <- rep("NA", length(names))\n      has_no_dim <- is.na(obj.dim)[1:length(names)]                        \n      obj.dim[has_no_dim, 1] <- napply(names, length)[has_no_dim]\n      vec <- (obj.type != "function")\n      obj.content[vec] <- napply(names[vec], function(x) toString(x, width = 154)[1])\n                        \n      obj.rownames <- napply(names, rownames)\n      has_rownames <- obj.rownames != "NULL"\n      obj.rownames <- sapply(obj.rownames[has_rownames], function(x) paste(x,\n          collapse=", "))\n      obj.rownames.short <- sapply(obj.rownames, function(x) paste(substr(x, 1, 150), "...."))\n      obj.rownames <- ifelse(nchar(obj.rownames) > 154, obj.rownames.short, obj.rownames)\n      obj.rownames <- sapply(obj.rownames, function(x) paste("Row names: ",x))\n      obj.content[has_rownames] <- obj.rownames\n                                 \n                                 \n      obj.colnames <- napply(names, colnames)\n      has_colnames <- obj.colnames != "NULL"\n      obj.colnames <- sapply(obj.colnames[has_colnames], function(x) paste(x, \n          collapse = ", "))\n      obj.colnames.short <- sapply(obj.colnames, function(x) paste(substr(x, \n          1, 150), "...."))\n      obj.colnames <- ifelse(nchar(obj.colnames) > 154, obj.colnames.short, \n          obj.colnames)\n      obj.colnames <- sapply(obj.colnames, function(x) paste("Column names: ",x))\n                      \n      obj.content[has_colnames] <- obj.colnames\n                             \n      is_function <- (obj.type == "function")\n      obj.content[is_function] <- napply(names[is_function], function(x) paste(strsplit(repr_text(x),")")[[1]][1],")",sep=""))\n      obj.content <- unlist(obj.content, use.names = FALSE)\n      \n  \n      out <- data.frame(obj.type, obj.size, obj.dim)\n      names(out) <- c("varType", "varSize", "Rows", "Columns")\n      out$varShape <- paste(out$Rows, " x ", out$Columns)\n      out$varContent <- obj.content\n      out$isMatrix <- FALSE\n      out$varName <- row.names(out)\n      out <- out[, !(names(out) %in% c("Rows", "Columns"))]\n      rownames(out) <- NULL\n      print(out)\n      if (!missing(order.by)) \n          out <- out[order(out[[order.by]], decreasing = decreasing), \n              ]\n      if (head) \n          out <- head(out, n)\n      jsonlite::toJSON(out)\n  }\n  \n  .deleteVariable <- function(x) {\n      remove(list=c(x), envir=.GlobalEnv)\n  }\n      ',g.scripts={python3:{initScript:g.py_script,queryCommand:"_jupyterlab_variableinspector_dict_list()",matrixQueryCommand:"_jupyterlab_variableinspector_getmatrixcontent",widgetQueryCommand:"_jupyterlab_variableinspector_displaywidget",deleteCommand:"_jupyterlab_variableinspector_deletevariable"},python2:{initScript:g.py_script,queryCommand:"_jupyterlab_variableinspector_dict_list()",matrixQueryCommand:"_jupyterlab_variableinspector_getmatrixcontent",widgetQueryCommand:"_jupyterlab_variableinspector_displaywidget",deleteCommand:"_jupyterlab_variableinspector_deletevariable"},python:{initScript:g.py_script,queryCommand:"_jupyterlab_variableinspector_dict_list()",matrixQueryCommand:"_jupyterlab_variableinspector_getmatrixcontent",widgetQueryCommand:"_jupyterlab_variableinspector_displaywidget",deleteCommand:"_jupyterlab_variableinspector_deletevariable"},R:{initScript:g.r_script,queryCommand:".ls.objects()",matrixQueryCommand:".ls.objects",widgetQueryCommand:"TODO",deleteCommand:".deleteVariable"},scala:{initScript:"_root_.almond.api.JupyterAPIHolder.value.VariableInspector.init()",queryCommand:"_root_.almond.api.JupyterAPIHolder.value.VariableInspector.dictList()",matrixQueryCommand:"",widgetQueryCommand:"",deleteCommand:""}};var x,v=t(28),j=t(255),w=t(270),C=t(665);!function(e){e.open="variableinspector:open"}(x||(x={}));const k=[{id:"@lckr/jupyterlab_variableinspector",requires:[v.ICommandPalette,j.ILayoutRestorer,j.ILabShell],provides:f,autoStart:!0,activate:(e,n,t,r)=>{const s=new y,i=x.open,a=new v.WidgetTracker({namespace:"variableinspector"});return t.restore(a,{command:i,args:()=>null,name:()=>"variableinspector"}),e.commands.addCommand(i,{label:"Open Variable Inspector",execute:()=>{s.panel&&!s.panel.isDisposed||(s.panel=function(){const e=new _;return e.id="jp-variableinspector",e.title.label="Variable Inspector",e.title.icon=c.listIcon,e.title.closable=!0,e.disposed.connect((()=>{s.panel===e&&(s.panel=null)})),a.add(e),e}()),s.panel.isAttached||r.add(s.panel,"main"),s.source&&s.source.performInspection(),r.activateById(s.panel.id)}}),n.addItem({command:i,category:"Variable Inspector"}),console.log("JupyterLab extension @lckr/jupyterlab_variableinspector is activated!"),s}},{id:"@lckr/jupyterlab-variableinspector:consoles",requires:[f,w.IConsoleTracker,j.ILabShell],autoStart:!0,activate:(e,n,t,r)=>{const s={};t.widgetAdded.connect(((e,t)=>{n.hasHandler(t.sessionContext.path)?s[t.id]=new Promise(((e,r)=>{e(n.getHandler(t.sessionContext.path))})):s[t.id]=new Promise(((e,r)=>{const i=t.sessionContext,a=new m({session:i}),o=a.ready.then((()=>a.kernelLanguage.then((e=>g.getScript(e)))));o.then((r=>{const o=r.initScript,c={queryCommand:r.queryCommand,matrixQueryCommand:r.matrixQueryCommand,widgetQueryCommand:r.widgetQueryCommand,deleteCommand:r.deleteCommand,connector:a,initScript:o,id:i.path},l=new h(c);n.addHandler(l),t.disposed.connect((()=>{delete s[t.id],l.dispose()})),l.ready.then((()=>{e(l)}))})),o.catch((n=>{console.log(n);const r=new b(a);t.disposed.connect((()=>{delete s[t.id],r.dispose()})),e(r)}))}))})),r.currentChanged.connect(((e,r)=>{const i=r.newValue;i&&t.has(i)&&s[i.id].then((e=>{e&&(n.source=e,n.source.performInspection())}))})),e.contextMenu.addItem({command:x.open,selector:".jp-CodeConsole"})}},{id:"@lckr/jupyterlab-variableinspector:notebooks",requires:[f,C.INotebookTracker,j.ILabShell],autoStart:!0,activate:(e,n,t,r)=>{const s={};t.widgetAdded.connect(((e,t)=>{s[t.id]=new Promise(((e,r)=>{const i=t.sessionContext,a=new m({session:i}),o=t.content.rendermime,c=a.ready.then((()=>a.kernelLanguage.then((e=>g.getScript(e)))));c.then((r=>{const c=r.initScript,l={queryCommand:r.queryCommand,matrixQueryCommand:r.matrixQueryCommand,widgetQueryCommand:r.widgetQueryCommand,deleteCommand:r.deleteCommand,connector:a,rendermime:o,initScript:c,id:i.path},p=new h(l);n.addHandler(p),t.disposed.connect((()=>{delete s[t.id],p.dispose()})),p.ready.then((()=>{e(p)}))})),c.catch((e=>{r(e)}))}))})),r.currentChanged.connect(((e,r)=>{const i=r.newValue;i&&t.has(i)&&s[i.id].then((e=>{e&&(n.source=e,n.source.performInspection())}))})),e.contextMenu.addItem({command:x.open,selector:".jp-Notebook"})}}]},150:(e,n,t)=>{"use strict";t.d(n,{Z:()=>i});var r=t(645),s=t.n(r)()((function(e){return e[1]}));s.push([e.id,"",""]);const i=s},760:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});var r=t(645),s=t.n(r),i=t(150),a=s()((function(e){return e[1]}));a.i(i.Z),a.push([e.id,"\n.jp-VarInspector {\n    flex-direction: column;\n    overflow: auto;\n    font-size: var(--jp-ui-font-size1);\n  }\n  \n  .jp-VarInspector-table {\n    font-family: monospace;\n    border-collapse: collapse;\n    margin: auto;\n    width: 100%;\n    color: var(--jp-content-font-color1);\n  }\n  \n  .jp-VarInspector-table td,\n  .jp-VarInspector-table thead {\n    border: 1px solid;\n    border-color: var(--jp-layout-color2);\n    padding: 8px;\n  }\n  \n  .jp-VarInspector-table tr:nth-child(even) {\n    background-color: var(--jp-layout-color1);\n  }\n  \n  .jp-VarInspector-content tr:hover {\n    background-color: var(--jp-layout-color2);\n  }\n  \n  .jp-VarInspector-table thead {\n    font-size: var(--jp-ui-font-size0);\n    text-align: center;\n    background-color: var(--jp-layout-color2);\n    color: var(--jp-ui-font-color1);\n    font-family: sans-serif;\n    font-weight: 600;\n    letter-spacing: 1px;\n    text-transform: uppercase;\n  }\n  \n  .jp-VarInspector-title {\n    font-size: var(--jp-ui-font-size1);\n    color: var(--jp-content-font-color1);\n    text-align: left;\n    padding-left: 10px;\n  }\n  \n  .jp-VarInspector-deleteButton {\n    text-align: center;\n    width: 1em;\n  }\n\n  .jp-VarInspector-inspectButton {\n    text-align: center;\n    width: 1em;\n  }\n    \n    \n  .jp-VarInspector-varName {\n    font-weight: 600;\n  }\n\n",""]);const o=a},645:e=>{"use strict";e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t=e(n);return n[2]?"@media ".concat(n[2]," {").concat(t,"}"):t})).join("")},n.i=function(e,t,r){"string"==typeof e&&(e=[[null,e,""]]);var s={};if(r)for(var i=0;i<this.length;i++){var a=this[i][0];null!=a&&(s[a]=!0)}for(var o=0;o<e.length;o++){var c=[].concat(e[o]);r&&s[c[0]]||(t&&(c[2]?c[2]="".concat(t," and ").concat(c[2]):c[2]=t),n.push(c))}},n}},379:(e,n,t)=>{"use strict";var r,s=function(){var e={};return function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}e[n]=t}return e[n]}}(),i=[];function a(e){for(var n=-1,t=0;t<i.length;t++)if(i[t].identifier===e){n=t;break}return n}function o(e,n){for(var t={},r=[],s=0;s<e.length;s++){var o=e[s],c=n.base?o[0]+n.base:o[0],l=t[c]||0,p="".concat(c," ").concat(l);t[c]=l+1;var d=a(p),_={css:o[1],media:o[2],sourceMap:o[3]};-1!==d?(i[d].references++,i[d].updater(_)):i.push({identifier:p,updater:h(_,n),references:1}),r.push(p)}return r}function c(e){var n=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var i=t.nc;i&&(r.nonce=i)}if(Object.keys(r).forEach((function(e){n.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(n);else{var a=s(e.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(n)}return n}var l,p=(l=[],function(e,n){return l[e]=n,l.filter(Boolean).join("\n")});function d(e,n,t,r){var s=t?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=p(n,s);else{var i=document.createTextNode(s),a=e.childNodes;a[n]&&e.removeChild(a[n]),a.length?e.insertBefore(i,a[n]):e.appendChild(i)}}function _(e,n,t){var r=t.css,s=t.media,i=t.sourceMap;if(s?e.setAttribute("media",s):e.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var u=null,m=0;function h(e,n){var t,r,s;if(n.singleton){var i=m++;t=u||(u=c(n)),r=d.bind(null,t,i,!1),s=d.bind(null,t,i,!0)}else t=c(n),r=_.bind(null,t,n),s=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)};return r(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap)return;r(e=n)}else s()}}e.exports=function(e,n){(n=n||{}).singleton||"boolean"==typeof n.singleton||(n.singleton=(void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r));var t=o(e=e||[],n);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<t.length;r++){var s=a(t[r]);i[s].references--}for(var c=o(e,n),l=0;l<t.length;l++){var p=a(t[l]);0===i[p].references&&(i[p].updater(),i.splice(p,1))}t=c}}}}}]);