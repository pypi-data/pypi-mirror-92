# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _BF
else:
    import _BF

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class BasisFunc(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    z0 = property(_BF.BasisFunc_z0_get, _BF.BasisFunc_z0_set)
    x0 = property(_BF.BasisFunc_x0_get, _BF.BasisFunc_x0_set)
    c = property(_BF.BasisFunc_c_get, _BF.BasisFunc_c_set)
    nC = property(_BF.BasisFunc_nC_get, _BF.BasisFunc_nC_set)
    numC = property(_BF.BasisFunc_numC_get, _BF.BasisFunc_numC_set)
    m = property(_BF.BasisFunc_m_get, _BF.BasisFunc_m_set)
    identifier = property(_BF.BasisFunc_identifier_get, _BF.BasisFunc_identifier_set)
    xlaCapsule = property(_BF.BasisFunc_xlaCapsule_get, _BF.BasisFunc_xlaCapsule_set)
    xlaGpuCapsule = property(_BF.BasisFunc_xlaGpuCapsule_get, _BF.BasisFunc_xlaGpuCapsule_set)
    nIdentifier = property(_BF.BasisFunc_nIdentifier_get, _BF.BasisFunc_nIdentifier_set)
    BasisFuncContainer = property(_BF.BasisFunc_BasisFuncContainer_get, _BF.BasisFunc_BasisFuncContainer_set)
    __swig_destroy__ = _BF.delete_BasisFunc

    def H(self, x, d, full):
        return _BF.BasisFunc_H(self, x, d, full)

    def xla(self, out, _in):
        return _BF.BasisFunc_xla(self, out, _in)

# Register BasisFunc in _BF:
_BF.BasisFunc_swigregister(BasisFunc)
cvar = _BF.cvar

class CP(BasisFunc):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BF.CP_swiginit(self, _BF.new_CP(*args))
    __swig_destroy__ = _BF.delete_CP

# Register CP in _BF:
_BF.CP_swigregister(CP)

class LeP(BasisFunc):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BF.LeP_swiginit(self, _BF.new_LeP(*args))
    __swig_destroy__ = _BF.delete_LeP

# Register LeP in _BF:
_BF.LeP_swigregister(LeP)

class LaP(BasisFunc):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, x0, xf, nCin, min):
        _BF.LaP_swiginit(self, _BF.new_LaP(x0, xf, nCin, min))
    __swig_destroy__ = _BF.delete_LaP

# Register LaP in _BF:
_BF.LaP_swigregister(LaP)

class HoPpro(BasisFunc):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, x0, xf, nCin, min):
        _BF.HoPpro_swiginit(self, _BF.new_HoPpro(x0, xf, nCin, min))
    __swig_destroy__ = _BF.delete_HoPpro

# Register HoPpro in _BF:
_BF.HoPpro_swigregister(HoPpro)

class HoPphy(BasisFunc):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, x0, xf, nCin, min):
        _BF.HoPphy_swiginit(self, _BF.new_HoPphy(x0, xf, nCin, min))
    __swig_destroy__ = _BF.delete_HoPphy

# Register HoPphy in _BF:
_BF.HoPphy_swigregister(HoPphy)

class FS(BasisFunc):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BF.FS_swiginit(self, _BF.new_FS(*args))
    __swig_destroy__ = _BF.delete_FS

# Register FS in _BF:
_BF.FS_swigregister(FS)

class ELM(BasisFunc):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _BF.delete_ELM

    def _getW(self):
        return _BF.ELM__getW(self)

    def _setW(self, arrIn):
        return _BF.ELM__setW(self, arrIn)

    def _getB(self):
        return _BF.ELM__getB(self)

    def _setB(self, arrIn):
        return _BF.ELM__setB(self, arrIn)

    w = property(_getW,_setW)
    b = property(_getB,_setB)


# Register ELM in _BF:
_BF.ELM_swigregister(ELM)

class ELMSigmoid(ELM):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, x0, xf, nCin, min):
        _BF.ELMSigmoid_swiginit(self, _BF.new_ELMSigmoid(x0, xf, nCin, min))
    __swig_destroy__ = _BF.delete_ELMSigmoid

# Register ELMSigmoid in _BF:
_BF.ELMSigmoid_swigregister(ELMSigmoid)

class ELMReLU(ELM):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, x0, xf, nCin, min):
        _BF.ELMReLU_swiginit(self, _BF.new_ELMReLU(x0, xf, nCin, min))
    __swig_destroy__ = _BF.delete_ELMReLU

# Register ELMReLU in _BF:
_BF.ELMReLU_swigregister(ELMReLU)

class ELMTanh(ELM):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, x0, xf, nCin, min):
        _BF.ELMTanh_swiginit(self, _BF.new_ELMTanh(x0, xf, nCin, min))
    __swig_destroy__ = _BF.delete_ELMTanh

# Register ELMTanh in _BF:
_BF.ELMTanh_swigregister(ELMTanh)

class ELMSin(ELM):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, x0, xf, nCin, min):
        _BF.ELMSin_swiginit(self, _BF.new_ELMSin(x0, xf, nCin, min))
    __swig_destroy__ = _BF.delete_ELMSin

# Register ELMSin in _BF:
_BF.ELMSin_swigregister(ELMSin)

class ELMSwish(ELM):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, x0, xf, nCin, min):
        _BF.ELMSwish_swiginit(self, _BF.new_ELMSwish(x0, xf, nCin, min))
    __swig_destroy__ = _BF.delete_ELMSwish

# Register ELMSwish in _BF:
_BF.ELMSwish_swigregister(ELMSwish)

class nBasisFunc(BasisFunc):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    z0 = property(_BF.nBasisFunc_z0_get, _BF.nBasisFunc_z0_set)
    zf = property(_BF.nBasisFunc_zf_get, _BF.nBasisFunc_zf_set)
    c = property(_BF.nBasisFunc_c_get, _BF.nBasisFunc_c_set)
    x0 = property(_BF.nBasisFunc_x0_get, _BF.nBasisFunc_x0_set)
    dim = property(_BF.nBasisFunc_dim_get, _BF.nBasisFunc_dim_set)
    numBasisFunc = property(_BF.nBasisFunc_numBasisFunc_get, _BF.nBasisFunc_numBasisFunc_set)
    numBasisFuncFull = property(_BF.nBasisFunc_numBasisFuncFull_get, _BF.nBasisFunc_numBasisFuncFull_set)
    __swig_destroy__ = _BF.delete_nBasisFunc

    def H(self, x, d, full):
        return _BF.nBasisFunc_H(self, x, d, full)

    def xla(self, out, _in):
        return _BF.nBasisFunc_xla(self, out, _in)

    def _getC(self):
        return _BF.nBasisFunc__getC(self)

    c = property(_getC)


# Register nBasisFunc in _BF:
_BF.nBasisFunc_swigregister(nBasisFunc)

class nCP(nBasisFunc, CP):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, x0in, xf, nCin, min):
        _BF.nCP_swiginit(self, _BF.new_nCP(x0in, xf, nCin, min))
    __swig_destroy__ = _BF.delete_nCP

# Register nCP in _BF:
_BF.nCP_swigregister(nCP)

class nLeP(nBasisFunc, LeP):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, x0in, xf, nCin, min):
        _BF.nLeP_swiginit(self, _BF.new_nLeP(x0in, xf, nCin, min))
    __swig_destroy__ = _BF.delete_nLeP

# Register nLeP in _BF:
_BF.nLeP_swigregister(nLeP)

class nFS(nBasisFunc, FS):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, x0in, xf, nCin, min):
        _BF.nFS_swiginit(self, _BF.new_nFS(x0in, xf, nCin, min))
    __swig_destroy__ = _BF.delete_nFS

# Register nFS in _BF:
_BF.nFS_swigregister(nFS)

class nELM(nBasisFunc):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    z0 = property(_BF.nELM_z0_get, _BF.nELM_z0_set)
    zf = property(_BF.nELM_zf_get, _BF.nELM_zf_set)
    __swig_destroy__ = _BF.delete_nELM

    def _setW(self, arrIn):
        return _BF.nELM__setW(self, arrIn)

    def _getW(self):
        return _BF.nELM__getW(self)

    def _getB(self):
        return _BF.nELM__getB(self)

    def _setB(self, arrIn):
        return _BF.nELM__setB(self, arrIn)

    w = property(_getW,_setW)
    b = property(_getB,_setB)


# Register nELM in _BF:
_BF.nELM_swigregister(nELM)

class nELMSigmoid(nELM):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, x0in, xf, nCin, min):
        _BF.nELMSigmoid_swiginit(self, _BF.new_nELMSigmoid(x0in, xf, nCin, min))
    __swig_destroy__ = _BF.delete_nELMSigmoid

# Register nELMSigmoid in _BF:
_BF.nELMSigmoid_swigregister(nELMSigmoid)

class nELMTanh(nELM):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, x0in, xf, nCin, min):
        _BF.nELMTanh_swiginit(self, _BF.new_nELMTanh(x0in, xf, nCin, min))
    __swig_destroy__ = _BF.delete_nELMTanh

# Register nELMTanh in _BF:
_BF.nELMTanh_swigregister(nELMTanh)

class nELMSin(nELM):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, x0in, xf, nCin, min):
        _BF.nELMSin_swiginit(self, _BF.new_nELMSin(x0in, xf, nCin, min))
    __swig_destroy__ = _BF.delete_nELMSin

# Register nELMSin in _BF:
_BF.nELMSin_swigregister(nELMSin)

class nELMSwish(nELM):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, x0in, xf, nCin, min):
        _BF.nELMSwish_swiginit(self, _BF.new_nELMSwish(x0in, xf, nCin, min))
    __swig_destroy__ = _BF.delete_nELMSwish

# Register nELMSwish in _BF:
_BF.nELMSwish_swigregister(nELMSwish)

class nELMReLU(nELM):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, x0in, xf, nCin, min):
        _BF.nELMReLU_swiginit(self, _BF.new_nELMReLU(x0in, xf, nCin, min))
    __swig_destroy__ = _BF.delete_nELMReLU

# Register nELMReLU in _BF:
_BF.nELMReLU_swigregister(nELMReLU)



