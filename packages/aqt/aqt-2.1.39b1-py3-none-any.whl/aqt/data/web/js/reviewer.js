"use strict";
/* Copyright: Ankitects Pty Ltd and contributors
 * License: GNU AGPL, version 3 or later; http://www.gnu.org/licenses/agpl.html */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var ankiPlatform = "desktop";
var typeans;
var _updatingQueue = Promise.resolve();
var qFade = 50;
var aFade = 0;
var onUpdateHook;
var onShownHook;
function _runHook(arr) {
    var promises = [];
    for (var i = 0; i < arr.length; i++) {
        promises.push(arr[i]());
    }
    return Promise.all(promises);
}
function _queueAction(action) {
    _updatingQueue = _updatingQueue.then(action);
}
function _updateQA(html, fadeTime, onupdate, onshown) {
    return __awaiter(this, void 0, void 0, function* () {
        onUpdateHook = [onupdate];
        onShownHook = [onshown];
        var qa = $("#qa");
        // fade out current text
        yield qa.fadeTo(fadeTime, 0).promise();
        // update text
        try {
            qa.html(html);
        }
        catch (err) {
            qa.html((`Invalid HTML on card: ${String(err).substring(0, 2000)}\n` +
                String(err.stack).substring(0, 2000)).replace(/\n/g, "<br />"));
        }
        yield _runHook(onUpdateHook);
        // wait for mathjax to ready
        yield MathJax.startup.promise.then(() => {
            // clear MathJax buffers from previous typesets
            MathJax.typesetClear();
            return MathJax.typesetPromise(qa.slice(0, 1));
        });
        // and reveal when processing is done
        yield qa.fadeTo(fadeTime, 1).promise();
        yield _runHook(onShownHook);
    });
}
function _showQuestion(q, bodyclass) {
    _queueAction(() => _updateQA(q, qFade, function () {
        // return to top of window
        window.scrollTo(0, 0);
        document.body.className = bodyclass;
    }, function () {
        // focus typing area if visible
        typeans = document.getElementById("typeans");
        if (typeans) {
            typeans.focus();
        }
    }));
}
function _showAnswer(a, bodyclass) {
    _queueAction(() => _updateQA(a, aFade, function () {
        if (bodyclass) {
            //  when previewing
            document.body.className = bodyclass;
        }
        // scroll to answer?
        var e = $("#answer");
        if (e[0]) {
            e[0].scrollIntoView();
        }
    }, function () { }));
}
const _flagColours = {
    1: "#ff6666",
    2: "#ff9900",
    3: "#77ff77",
    4: "#77aaff",
};
function _drawFlag(flag) {
    var elem = $("#_flag");
    if (flag === 0) {
        elem.hide();
        return;
    }
    elem.show();
    elem.css("color", _flagColours[flag]);
}
function _drawMark(mark) {
    var elem = $("#_mark");
    if (!mark) {
        elem.hide();
    }
    else {
        elem.show();
    }
}
function _typeAnsPress() {
    if (window.event.keyCode === 13) {
        pycmd("ans");
    }
}
function _emulateMobile(enabled) {
    const list = document.documentElement.classList;
    if (enabled) {
        list.add("mobile");
    }
    else {
        list.remove("mobile");
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmV2aWV3ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9xdC9hcXQvZGF0YS93ZWIvanMvcmV2aWV3ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO2tGQUNrRjs7Ozs7Ozs7OztBQU1sRixJQUFJLFlBQVksR0FBRyxTQUFTLENBQUM7QUFDN0IsSUFBSSxPQUFPLENBQUM7QUFDWixJQUFJLGNBQWMsR0FBa0IsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDO0FBRXRELElBQUksS0FBSyxHQUFHLEVBQUUsQ0FBQztBQUNmLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQztBQUVkLElBQUksWUFBNkIsQ0FBQztBQUNsQyxJQUFJLFdBQTRCLENBQUM7QUFFakMsU0FBUyxRQUFRLENBQUMsR0FBb0I7SUFDbEMsSUFBSSxRQUFRLEdBQUcsRUFBRSxDQUFDO0lBRWxCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQ2pDLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUMzQjtJQUVELE9BQU8sT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUNqQyxDQUFDO0FBRUQsU0FBUyxZQUFZLENBQUMsTUFBZ0I7SUFDbEMsY0FBYyxHQUFHLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDakQsQ0FBQztBQUVELFNBQWUsU0FBUyxDQUNwQixJQUFZLEVBQ1osUUFBZ0IsRUFDaEIsUUFBa0IsRUFDbEIsT0FBaUI7O1FBRWpCLFlBQVksR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzFCLFdBQVcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBRXhCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUVs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LElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNaLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQzFDLENBQUM7QUFFRCxTQUFTLFNBQVMsQ0FBQyxJQUFhO0lBQzVCLElBQUksSUFBSSxHQUFHLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUN2QixJQUFJLENBQUMsSUFBSSxFQUFFO1FBQ1AsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0tBQ2Y7U0FBTTtRQUNILElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztLQUNmO0FBQ0wsQ0FBQztBQUVELFNBQVMsYUFBYTtJQUNsQixJQUFLLE1BQU0sQ0FBQyxLQUF1QixDQUFDLE9BQU8sS0FBSyxFQUFFLEVBQUU7UUFDaEQsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO0tBQ2hCO0FBQ0wsQ0FBQztBQUVELFNBQVMsY0FBYyxDQUFDLE9BQWdCO0lBQ3BDLE1BQU0sSUFBSSxHQUFHLFFBQVEsQ0FBQyxlQUFlLENBQUMsU0FBUyxDQUFDO0lBQ2hELElBQUksT0FBTyxFQUFFO1FBQ1QsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztLQUN0QjtTQUFNO1FBQ0gsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztLQUN6QjtBQUNMLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBDb3B5cmlnaHQ6IEFua2l0ZWN0cyBQdHkgTHRkIGFuZCBjb250cmlidXRvcnNcbiAqIExpY2Vuc2U6IEdOVSBBR1BMLCB2ZXJzaW9uIDMgb3IgbGF0ZXI7IGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9hZ3BsLmh0bWwgKi9cblxuZGVjbGFyZSB2YXIgTWF0aEpheDogYW55O1xuXG50eXBlIENhbGxiYWNrID0gKCkgPT4gdm9pZCB8IFByb21pc2U8dm9pZD47XG5cbnZhciBhbmtpUGxhdGZvcm0gPSBcImRlc2t0b3BcIjtcbnZhciB0eXBlYW5zO1xudmFyIF91cGRhdGluZ1F1ZXVlOiBQcm9taXNlPHZvaWQ+ID0gUHJvbWlzZS5yZXNvbHZlKCk7XG5cbnZhciBxRmFkZSA9IDUwO1xudmFyIGFGYWRlID0gMDtcblxudmFyIG9uVXBkYXRlSG9vazogQXJyYXk8Q2FsbGJhY2s+O1xudmFyIG9uU2hvd25Ib29rOiBBcnJheTxDYWxsYmFjaz47XG5cbmZ1bmN0aW9uIF9ydW5Ib29rKGFycjogQXJyYXk8Q2FsbGJhY2s+KTogUHJvbWlzZTx2b2lkW10+IHtcbiAgICB2YXIgcHJvbWlzZXMgPSBbXTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHByb21pc2VzLnB1c2goYXJyW2ldKCkpO1xuICAgIH1cblxuICAgIHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcyk7XG59XG5cbmZ1bmN0aW9uIF9xdWV1ZUFjdGlvbihhY3Rpb246IENhbGxiYWNrKTogdm9pZCB7XG4gICAgX3VwZGF0aW5nUXVldWUgPSBfdXBkYXRpbmdRdWV1ZS50aGVuKGFjdGlvbik7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIF91cGRhdGVRQShcbiAgICBodG1sOiBzdHJpbmcsXG4gICAgZmFkZVRpbWU6IG51bWJlcixcbiAgICBvbnVwZGF0ZTogQ2FsbGJhY2ssXG4gICAgb25zaG93bjogQ2FsbGJhY2tcbik6IFByb21pc2U8dm9pZD4ge1xuICAgIG9uVXBkYXRlSG9vayA9IFtvbnVwZGF0ZV07XG4gICAgb25TaG93bkhvb2sgPSBbb25zaG93bl07XG5cbiAgICB2YXIgcWEgPSAkKFwiI3FhXCIpO1xuXG4gICAgLy8gZmFkZSBvdXQgY3VycmVudCB0ZXh0XG4gICAgYXdhaXQgcWEuZmFkZVRvKGZhZGVUaW1lLCAwKS5wcm9taXNlKCk7XG5cbiAgICAvLyB1cGRhdGUgdGV4dFxuICAgIHRyeSB7XG4gICAgICAgIHFhLmh0bWwoaHRtbCk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIHFhLmh0bWwoXG4gICAgICAgICAgICAoXG4gICAgICAgICAgICAgICAgYEludmFsaWQgSFRNTCBvbiBjYXJkOiAke1N0cmluZyhlcnIpLnN1YnN0cmluZygwLCAyMDAwKX1cXG5gICtcbiAgICAgICAgICAgICAgICBTdHJpbmcoZXJyLnN0YWNrKS5zdWJzdHJpbmcoMCwgMjAwMClcbiAgICAgICAgICAgICkucmVwbGFjZSgvXFxuL2csIFwiPGJyIC8+XCIpXG4gICAgICAgICk7XG4gICAgfVxuICAgIGF3YWl0IF9ydW5Ib29rKG9uVXBkYXRlSG9vayk7XG5cbiAgICAvLyB3YWl0IGZvciBtYXRoamF4IHRvIHJlYWR5XG4gICAgYXdhaXQgTWF0aEpheC5zdGFydHVwLnByb21pc2UudGhlbigoKSA9PiB7XG4gICAgICAgIC8vIGNsZWFyIE1hdGhKYXggYnVmZmVycyBmcm9tIHByZXZpb3VzIHR5cGVzZXRzXG4gICAgICAgIE1hdGhKYXgudHlwZXNldENsZWFyKCk7XG5cbiAgICAgICAgcmV0dXJuIE1hdGhKYXgudHlwZXNldFByb21pc2UocWEuc2xpY2UoMCwgMSkpO1xuICAgIH0pO1xuXG4gICAgLy8gYW5kIHJldmVhbCB3aGVuIHByb2Nlc3NpbmcgaXMgZG9uZVxuICAgIGF3YWl0IHFhLmZhZGVUbyhmYWRlVGltZSwgMSkucHJvbWlzZSgpO1xuICAgIGF3YWl0IF9ydW5Ib29rKG9uU2hvd25Ib29rKTtcbn1cblxuZnVuY3Rpb24gX3Nob3dRdWVzdGlvbihxOiBzdHJpbmcsIGJvZHljbGFzczogc3RyaW5nKTogdm9pZCB7XG4gICAgX3F1ZXVlQWN0aW9uKCgpID0+XG4gICAgICAgIF91cGRhdGVRQShcbiAgICAgICAgICAgIHEsXG4gICAgICAgICAgICBxRmFkZSxcbiAgICAgICAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAvLyByZXR1cm4gdG8gdG9wIG9mIHdpbmRvd1xuICAgICAgICAgICAgICAgIHdpbmRvdy5zY3JvbGxUbygwLCAwKTtcblxuICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuY2xhc3NOYW1lID0gYm9keWNsYXNzO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAvLyBmb2N1cyB0eXBpbmcgYXJlYSBpZiB2aXNpYmxlXG4gICAgICAgICAgICAgICAgdHlwZWFucyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidHlwZWFuc1wiKTtcbiAgICAgICAgICAgICAgICBpZiAodHlwZWFucykge1xuICAgICAgICAgICAgICAgICAgICB0eXBlYW5zLmZvY3VzKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICApXG4gICAgKTtcbn1cblxuZnVuY3Rpb24gX3Nob3dBbnN3ZXIoYTogc3RyaW5nLCBib2R5Y2xhc3M6IHN0cmluZyk6IHZvaWQge1xuICAgIF9xdWV1ZUFjdGlvbigoKSA9PlxuICAgICAgICBfdXBkYXRlUUEoXG4gICAgICAgICAgICBhLFxuICAgICAgICAgICAgYUZhZGUsXG4gICAgICAgICAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaWYgKGJvZHljbGFzcykge1xuICAgICAgICAgICAgICAgICAgICAvLyAgd2hlbiBwcmV2aWV3aW5nXG4gICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuY2xhc3NOYW1lID0gYm9keWNsYXNzO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIHNjcm9sbCB0byBhbnN3ZXI/XG4gICAgICAgICAgICAgICAgdmFyIGUgPSAkKFwiI2Fuc3dlclwiKTtcbiAgICAgICAgICAgICAgICBpZiAoZVswXSkge1xuICAgICAgICAgICAgICAgICAgICBlWzBdLnNjcm9sbEludG9WaWV3KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGZ1bmN0aW9uICgpIHt9XG4gICAgICAgIClcbiAgICApO1xufVxuXG5jb25zdCBfZmxhZ0NvbG91cnMgPSB7XG4gICAgMTogXCIjZmY2NjY2XCIsXG4gICAgMjogXCIjZmY5OTAwXCIsXG4gICAgMzogXCIjNzdmZjc3XCIsXG4gICAgNDogXCIjNzdhYWZmXCIsXG59O1xuXG5mdW5jdGlvbiBfZHJhd0ZsYWcoZmxhZzogMCB8IDEgfCAyIHwgMyB8IDQpOiB2b2lkIHtcbiAgICB2YXIgZWxlbSA9ICQoXCIjX2ZsYWdcIik7XG4gICAgaWYgKGZsYWcgPT09IDApIHtcbiAgICAgICAgZWxlbS5oaWRlKCk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZWxlbS5zaG93KCk7XG4gICAgZWxlbS5jc3MoXCJjb2xvclwiLCBfZmxhZ0NvbG91cnNbZmxhZ10pO1xufVxuXG5mdW5jdGlvbiBfZHJhd01hcmsobWFyazogYm9vbGVhbik6IHZvaWQge1xuICAgIHZhciBlbGVtID0gJChcIiNfbWFya1wiKTtcbiAgICBpZiAoIW1hcmspIHtcbiAgICAgICAgZWxlbS5oaWRlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZWxlbS5zaG93KCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBfdHlwZUFuc1ByZXNzKCk6IHZvaWQge1xuICAgIGlmICgod2luZG93LmV2ZW50IGFzIEtleWJvYXJkRXZlbnQpLmtleUNvZGUgPT09IDEzKSB7XG4gICAgICAgIHB5Y21kKFwiYW5zXCIpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gX2VtdWxhdGVNb2JpbGUoZW5hYmxlZDogYm9vbGVhbik6IHZvaWQge1xuICAgIGNvbnN0IGxpc3QgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xhc3NMaXN0O1xuICAgIGlmIChlbmFibGVkKSB7XG4gICAgICAgIGxpc3QuYWRkKFwibW9iaWxlXCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGxpc3QucmVtb3ZlKFwibW9iaWxlXCIpO1xuICAgIH1cbn1cbiJdfQ==