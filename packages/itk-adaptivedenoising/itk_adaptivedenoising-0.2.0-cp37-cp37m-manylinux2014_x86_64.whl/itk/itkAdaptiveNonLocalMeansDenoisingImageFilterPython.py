# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 6, 0):
    raise RuntimeError("Python 3.6 or later required")


from . import _AdaptiveDenoisingPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkAdaptiveNonLocalMeansDenoisingImageFilterPython
else:
    import _itkAdaptiveNonLocalMeansDenoisingImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkAdaptiveNonLocalMeansDenoisingImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkAdaptiveNonLocalMeansDenoisingImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import collections.abc
import itk.itkSizePython
import itk.pyBasePython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.ITKCommonBasePython
import itk.itkImagePython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.vnl_matrixPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkCovariantVectorPython
import itk.itkPointPython
import itk.vnl_matrix_fixedPython
import itk.itkRGBAPixelPython
import itk.itkRGBPixelPython
import itk.itkNonLocalPatchBasedImageFilterPython
import itk.itkImageToImageFilterAPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterCommonPython

def itkAdaptiveNonLocalMeansDenoisingImageFilterID2ID2_New():
    return itkAdaptiveNonLocalMeansDenoisingImageFilterID2ID2.New()

class itkAdaptiveNonLocalMeansDenoisingImageFilterID2ID2(itk.itkNonLocalPatchBasedImageFilterPython.itkNonLocalPatchBasedImageFilterID2ID2):
    r"""Proxy of C++ itkAdaptiveNonLocalMeansDenoisingImageFilterID2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterID2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterID2ID2_Clone)
    SetInput1 = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterID2ID2_SetInput1)
    SetMaskImage = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterID2ID2_SetMaskImage)
    SetInput2 = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterID2ID2_SetInput2)
    GetMaskImage = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterID2ID2_GetMaskImage)
    SetUseRicianNoiseModel = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterID2ID2_SetUseRicianNoiseModel)
    GetUseRicianNoiseModel = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterID2ID2_GetUseRicianNoiseModel)
    UseRicianNoiseModelOn = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterID2ID2_UseRicianNoiseModelOn)
    UseRicianNoiseModelOff = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterID2ID2_UseRicianNoiseModelOff)
    SetSmoothingFactor = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterID2ID2_SetSmoothingFactor)
    GetSmoothingFactor = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterID2ID2_GetSmoothingFactor)
    SetSmoothingVariance = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterID2ID2_SetSmoothingVariance)
    GetSmoothingVariance = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterID2ID2_GetSmoothingVariance)
    SetEpsilon = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterID2ID2_SetEpsilon)
    GetEpsilon = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterID2ID2_GetEpsilon)
    SetMeanThreshold = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterID2ID2_SetMeanThreshold)
    GetMeanThreshold = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterID2ID2_GetMeanThreshold)
    SetVarianceThreshold = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterID2ID2_SetVarianceThreshold)
    GetVarianceThreshold = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterID2ID2_GetVarianceThreshold)
    SetNeighborhoodRadiusForLocalMeanAndVariance = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterID2ID2_SetNeighborhoodRadiusForLocalMeanAndVariance)
    GetNeighborhoodRadiusForLocalMeanAndVariance = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterID2ID2_GetNeighborhoodRadiusForLocalMeanAndVariance)
    __swig_destroy__ = _itkAdaptiveNonLocalMeansDenoisingImageFilterPython.delete_itkAdaptiveNonLocalMeansDenoisingImageFilterID2ID2
    cast = _swig_new_static_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterID2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkAdaptiveNonLocalMeansDenoisingImageFilterID2ID2

        Create a new object of the class itkAdaptiveNonLocalMeansDenoisingImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdaptiveNonLocalMeansDenoisingImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAdaptiveNonLocalMeansDenoisingImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAdaptiveNonLocalMeansDenoisingImageFilterID2ID2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAdaptiveNonLocalMeansDenoisingImageFilterID2ID2 in _itkAdaptiveNonLocalMeansDenoisingImageFilterPython:
_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterID2ID2_swigregister(itkAdaptiveNonLocalMeansDenoisingImageFilterID2ID2)
itkAdaptiveNonLocalMeansDenoisingImageFilterID2ID2___New_orig__ = _itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterID2ID2___New_orig__
itkAdaptiveNonLocalMeansDenoisingImageFilterID2ID2_cast = _itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterID2ID2_cast


def itkAdaptiveNonLocalMeansDenoisingImageFilterID3ID3_New():
    return itkAdaptiveNonLocalMeansDenoisingImageFilterID3ID3.New()

class itkAdaptiveNonLocalMeansDenoisingImageFilterID3ID3(itk.itkNonLocalPatchBasedImageFilterPython.itkNonLocalPatchBasedImageFilterID3ID3):
    r"""Proxy of C++ itkAdaptiveNonLocalMeansDenoisingImageFilterID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterID3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterID3ID3_Clone)
    SetInput1 = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterID3ID3_SetInput1)
    SetMaskImage = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterID3ID3_SetMaskImage)
    SetInput2 = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterID3ID3_SetInput2)
    GetMaskImage = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterID3ID3_GetMaskImage)
    SetUseRicianNoiseModel = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterID3ID3_SetUseRicianNoiseModel)
    GetUseRicianNoiseModel = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterID3ID3_GetUseRicianNoiseModel)
    UseRicianNoiseModelOn = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterID3ID3_UseRicianNoiseModelOn)
    UseRicianNoiseModelOff = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterID3ID3_UseRicianNoiseModelOff)
    SetSmoothingFactor = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterID3ID3_SetSmoothingFactor)
    GetSmoothingFactor = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterID3ID3_GetSmoothingFactor)
    SetSmoothingVariance = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterID3ID3_SetSmoothingVariance)
    GetSmoothingVariance = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterID3ID3_GetSmoothingVariance)
    SetEpsilon = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterID3ID3_SetEpsilon)
    GetEpsilon = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterID3ID3_GetEpsilon)
    SetMeanThreshold = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterID3ID3_SetMeanThreshold)
    GetMeanThreshold = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterID3ID3_GetMeanThreshold)
    SetVarianceThreshold = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterID3ID3_SetVarianceThreshold)
    GetVarianceThreshold = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterID3ID3_GetVarianceThreshold)
    SetNeighborhoodRadiusForLocalMeanAndVariance = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterID3ID3_SetNeighborhoodRadiusForLocalMeanAndVariance)
    GetNeighborhoodRadiusForLocalMeanAndVariance = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterID3ID3_GetNeighborhoodRadiusForLocalMeanAndVariance)
    __swig_destroy__ = _itkAdaptiveNonLocalMeansDenoisingImageFilterPython.delete_itkAdaptiveNonLocalMeansDenoisingImageFilterID3ID3
    cast = _swig_new_static_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterID3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkAdaptiveNonLocalMeansDenoisingImageFilterID3ID3

        Create a new object of the class itkAdaptiveNonLocalMeansDenoisingImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdaptiveNonLocalMeansDenoisingImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAdaptiveNonLocalMeansDenoisingImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAdaptiveNonLocalMeansDenoisingImageFilterID3ID3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAdaptiveNonLocalMeansDenoisingImageFilterID3ID3 in _itkAdaptiveNonLocalMeansDenoisingImageFilterPython:
_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterID3ID3_swigregister(itkAdaptiveNonLocalMeansDenoisingImageFilterID3ID3)
itkAdaptiveNonLocalMeansDenoisingImageFilterID3ID3___New_orig__ = _itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterID3ID3___New_orig__
itkAdaptiveNonLocalMeansDenoisingImageFilterID3ID3_cast = _itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterID3ID3_cast


def itkAdaptiveNonLocalMeansDenoisingImageFilterID4ID4_New():
    return itkAdaptiveNonLocalMeansDenoisingImageFilterID4ID4.New()

class itkAdaptiveNonLocalMeansDenoisingImageFilterID4ID4(itk.itkNonLocalPatchBasedImageFilterPython.itkNonLocalPatchBasedImageFilterID4ID4):
    r"""Proxy of C++ itkAdaptiveNonLocalMeansDenoisingImageFilterID4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterID4ID4___New_orig__)
    Clone = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterID4ID4_Clone)
    SetInput1 = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterID4ID4_SetInput1)
    SetMaskImage = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterID4ID4_SetMaskImage)
    SetInput2 = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterID4ID4_SetInput2)
    GetMaskImage = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterID4ID4_GetMaskImage)
    SetUseRicianNoiseModel = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterID4ID4_SetUseRicianNoiseModel)
    GetUseRicianNoiseModel = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterID4ID4_GetUseRicianNoiseModel)
    UseRicianNoiseModelOn = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterID4ID4_UseRicianNoiseModelOn)
    UseRicianNoiseModelOff = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterID4ID4_UseRicianNoiseModelOff)
    SetSmoothingFactor = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterID4ID4_SetSmoothingFactor)
    GetSmoothingFactor = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterID4ID4_GetSmoothingFactor)
    SetSmoothingVariance = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterID4ID4_SetSmoothingVariance)
    GetSmoothingVariance = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterID4ID4_GetSmoothingVariance)
    SetEpsilon = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterID4ID4_SetEpsilon)
    GetEpsilon = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterID4ID4_GetEpsilon)
    SetMeanThreshold = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterID4ID4_SetMeanThreshold)
    GetMeanThreshold = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterID4ID4_GetMeanThreshold)
    SetVarianceThreshold = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterID4ID4_SetVarianceThreshold)
    GetVarianceThreshold = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterID4ID4_GetVarianceThreshold)
    SetNeighborhoodRadiusForLocalMeanAndVariance = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterID4ID4_SetNeighborhoodRadiusForLocalMeanAndVariance)
    GetNeighborhoodRadiusForLocalMeanAndVariance = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterID4ID4_GetNeighborhoodRadiusForLocalMeanAndVariance)
    __swig_destroy__ = _itkAdaptiveNonLocalMeansDenoisingImageFilterPython.delete_itkAdaptiveNonLocalMeansDenoisingImageFilterID4ID4
    cast = _swig_new_static_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterID4ID4_cast)

    def New(*args, **kargs):
        """New() -> itkAdaptiveNonLocalMeansDenoisingImageFilterID4ID4

        Create a new object of the class itkAdaptiveNonLocalMeansDenoisingImageFilterID4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdaptiveNonLocalMeansDenoisingImageFilterID4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAdaptiveNonLocalMeansDenoisingImageFilterID4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAdaptiveNonLocalMeansDenoisingImageFilterID4ID4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAdaptiveNonLocalMeansDenoisingImageFilterID4ID4 in _itkAdaptiveNonLocalMeansDenoisingImageFilterPython:
_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterID4ID4_swigregister(itkAdaptiveNonLocalMeansDenoisingImageFilterID4ID4)
itkAdaptiveNonLocalMeansDenoisingImageFilterID4ID4___New_orig__ = _itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterID4ID4___New_orig__
itkAdaptiveNonLocalMeansDenoisingImageFilterID4ID4_cast = _itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterID4ID4_cast


def itkAdaptiveNonLocalMeansDenoisingImageFilterIF2IF2_New():
    return itkAdaptiveNonLocalMeansDenoisingImageFilterIF2IF2.New()

class itkAdaptiveNonLocalMeansDenoisingImageFilterIF2IF2(itk.itkNonLocalPatchBasedImageFilterPython.itkNonLocalPatchBasedImageFilterIF2IF2):
    r"""Proxy of C++ itkAdaptiveNonLocalMeansDenoisingImageFilterIF2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIF2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIF2IF2_Clone)
    SetInput1 = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIF2IF2_SetInput1)
    SetMaskImage = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIF2IF2_SetMaskImage)
    SetInput2 = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIF2IF2_SetInput2)
    GetMaskImage = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIF2IF2_GetMaskImage)
    SetUseRicianNoiseModel = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIF2IF2_SetUseRicianNoiseModel)
    GetUseRicianNoiseModel = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIF2IF2_GetUseRicianNoiseModel)
    UseRicianNoiseModelOn = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIF2IF2_UseRicianNoiseModelOn)
    UseRicianNoiseModelOff = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIF2IF2_UseRicianNoiseModelOff)
    SetSmoothingFactor = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIF2IF2_SetSmoothingFactor)
    GetSmoothingFactor = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIF2IF2_GetSmoothingFactor)
    SetSmoothingVariance = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIF2IF2_SetSmoothingVariance)
    GetSmoothingVariance = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIF2IF2_GetSmoothingVariance)
    SetEpsilon = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIF2IF2_SetEpsilon)
    GetEpsilon = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIF2IF2_GetEpsilon)
    SetMeanThreshold = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIF2IF2_SetMeanThreshold)
    GetMeanThreshold = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIF2IF2_GetMeanThreshold)
    SetVarianceThreshold = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIF2IF2_SetVarianceThreshold)
    GetVarianceThreshold = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIF2IF2_GetVarianceThreshold)
    SetNeighborhoodRadiusForLocalMeanAndVariance = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIF2IF2_SetNeighborhoodRadiusForLocalMeanAndVariance)
    GetNeighborhoodRadiusForLocalMeanAndVariance = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIF2IF2_GetNeighborhoodRadiusForLocalMeanAndVariance)
    __swig_destroy__ = _itkAdaptiveNonLocalMeansDenoisingImageFilterPython.delete_itkAdaptiveNonLocalMeansDenoisingImageFilterIF2IF2
    cast = _swig_new_static_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIF2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkAdaptiveNonLocalMeansDenoisingImageFilterIF2IF2

        Create a new object of the class itkAdaptiveNonLocalMeansDenoisingImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdaptiveNonLocalMeansDenoisingImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAdaptiveNonLocalMeansDenoisingImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAdaptiveNonLocalMeansDenoisingImageFilterIF2IF2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAdaptiveNonLocalMeansDenoisingImageFilterIF2IF2 in _itkAdaptiveNonLocalMeansDenoisingImageFilterPython:
_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIF2IF2_swigregister(itkAdaptiveNonLocalMeansDenoisingImageFilterIF2IF2)
itkAdaptiveNonLocalMeansDenoisingImageFilterIF2IF2___New_orig__ = _itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIF2IF2___New_orig__
itkAdaptiveNonLocalMeansDenoisingImageFilterIF2IF2_cast = _itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIF2IF2_cast


def itkAdaptiveNonLocalMeansDenoisingImageFilterIF3IF3_New():
    return itkAdaptiveNonLocalMeansDenoisingImageFilterIF3IF3.New()

class itkAdaptiveNonLocalMeansDenoisingImageFilterIF3IF3(itk.itkNonLocalPatchBasedImageFilterPython.itkNonLocalPatchBasedImageFilterIF3IF3):
    r"""Proxy of C++ itkAdaptiveNonLocalMeansDenoisingImageFilterIF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIF3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIF3IF3_Clone)
    SetInput1 = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIF3IF3_SetInput1)
    SetMaskImage = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIF3IF3_SetMaskImage)
    SetInput2 = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIF3IF3_SetInput2)
    GetMaskImage = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIF3IF3_GetMaskImage)
    SetUseRicianNoiseModel = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIF3IF3_SetUseRicianNoiseModel)
    GetUseRicianNoiseModel = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIF3IF3_GetUseRicianNoiseModel)
    UseRicianNoiseModelOn = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIF3IF3_UseRicianNoiseModelOn)
    UseRicianNoiseModelOff = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIF3IF3_UseRicianNoiseModelOff)
    SetSmoothingFactor = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIF3IF3_SetSmoothingFactor)
    GetSmoothingFactor = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIF3IF3_GetSmoothingFactor)
    SetSmoothingVariance = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIF3IF3_SetSmoothingVariance)
    GetSmoothingVariance = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIF3IF3_GetSmoothingVariance)
    SetEpsilon = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIF3IF3_SetEpsilon)
    GetEpsilon = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIF3IF3_GetEpsilon)
    SetMeanThreshold = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIF3IF3_SetMeanThreshold)
    GetMeanThreshold = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIF3IF3_GetMeanThreshold)
    SetVarianceThreshold = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIF3IF3_SetVarianceThreshold)
    GetVarianceThreshold = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIF3IF3_GetVarianceThreshold)
    SetNeighborhoodRadiusForLocalMeanAndVariance = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIF3IF3_SetNeighborhoodRadiusForLocalMeanAndVariance)
    GetNeighborhoodRadiusForLocalMeanAndVariance = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIF3IF3_GetNeighborhoodRadiusForLocalMeanAndVariance)
    __swig_destroy__ = _itkAdaptiveNonLocalMeansDenoisingImageFilterPython.delete_itkAdaptiveNonLocalMeansDenoisingImageFilterIF3IF3
    cast = _swig_new_static_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIF3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkAdaptiveNonLocalMeansDenoisingImageFilterIF3IF3

        Create a new object of the class itkAdaptiveNonLocalMeansDenoisingImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdaptiveNonLocalMeansDenoisingImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAdaptiveNonLocalMeansDenoisingImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAdaptiveNonLocalMeansDenoisingImageFilterIF3IF3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAdaptiveNonLocalMeansDenoisingImageFilterIF3IF3 in _itkAdaptiveNonLocalMeansDenoisingImageFilterPython:
_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIF3IF3_swigregister(itkAdaptiveNonLocalMeansDenoisingImageFilterIF3IF3)
itkAdaptiveNonLocalMeansDenoisingImageFilterIF3IF3___New_orig__ = _itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIF3IF3___New_orig__
itkAdaptiveNonLocalMeansDenoisingImageFilterIF3IF3_cast = _itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIF3IF3_cast


def itkAdaptiveNonLocalMeansDenoisingImageFilterIF4IF4_New():
    return itkAdaptiveNonLocalMeansDenoisingImageFilterIF4IF4.New()

class itkAdaptiveNonLocalMeansDenoisingImageFilterIF4IF4(itk.itkNonLocalPatchBasedImageFilterPython.itkNonLocalPatchBasedImageFilterIF4IF4):
    r"""Proxy of C++ itkAdaptiveNonLocalMeansDenoisingImageFilterIF4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIF4IF4___New_orig__)
    Clone = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIF4IF4_Clone)
    SetInput1 = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIF4IF4_SetInput1)
    SetMaskImage = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIF4IF4_SetMaskImage)
    SetInput2 = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIF4IF4_SetInput2)
    GetMaskImage = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIF4IF4_GetMaskImage)
    SetUseRicianNoiseModel = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIF4IF4_SetUseRicianNoiseModel)
    GetUseRicianNoiseModel = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIF4IF4_GetUseRicianNoiseModel)
    UseRicianNoiseModelOn = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIF4IF4_UseRicianNoiseModelOn)
    UseRicianNoiseModelOff = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIF4IF4_UseRicianNoiseModelOff)
    SetSmoothingFactor = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIF4IF4_SetSmoothingFactor)
    GetSmoothingFactor = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIF4IF4_GetSmoothingFactor)
    SetSmoothingVariance = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIF4IF4_SetSmoothingVariance)
    GetSmoothingVariance = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIF4IF4_GetSmoothingVariance)
    SetEpsilon = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIF4IF4_SetEpsilon)
    GetEpsilon = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIF4IF4_GetEpsilon)
    SetMeanThreshold = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIF4IF4_SetMeanThreshold)
    GetMeanThreshold = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIF4IF4_GetMeanThreshold)
    SetVarianceThreshold = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIF4IF4_SetVarianceThreshold)
    GetVarianceThreshold = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIF4IF4_GetVarianceThreshold)
    SetNeighborhoodRadiusForLocalMeanAndVariance = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIF4IF4_SetNeighborhoodRadiusForLocalMeanAndVariance)
    GetNeighborhoodRadiusForLocalMeanAndVariance = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIF4IF4_GetNeighborhoodRadiusForLocalMeanAndVariance)
    __swig_destroy__ = _itkAdaptiveNonLocalMeansDenoisingImageFilterPython.delete_itkAdaptiveNonLocalMeansDenoisingImageFilterIF4IF4
    cast = _swig_new_static_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIF4IF4_cast)

    def New(*args, **kargs):
        """New() -> itkAdaptiveNonLocalMeansDenoisingImageFilterIF4IF4

        Create a new object of the class itkAdaptiveNonLocalMeansDenoisingImageFilterIF4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdaptiveNonLocalMeansDenoisingImageFilterIF4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAdaptiveNonLocalMeansDenoisingImageFilterIF4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAdaptiveNonLocalMeansDenoisingImageFilterIF4IF4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAdaptiveNonLocalMeansDenoisingImageFilterIF4IF4 in _itkAdaptiveNonLocalMeansDenoisingImageFilterPython:
_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIF4IF4_swigregister(itkAdaptiveNonLocalMeansDenoisingImageFilterIF4IF4)
itkAdaptiveNonLocalMeansDenoisingImageFilterIF4IF4___New_orig__ = _itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIF4IF4___New_orig__
itkAdaptiveNonLocalMeansDenoisingImageFilterIF4IF4_cast = _itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIF4IF4_cast


def itkAdaptiveNonLocalMeansDenoisingImageFilterISS2ISS2_New():
    return itkAdaptiveNonLocalMeansDenoisingImageFilterISS2ISS2.New()

class itkAdaptiveNonLocalMeansDenoisingImageFilterISS2ISS2(itk.itkNonLocalPatchBasedImageFilterPython.itkNonLocalPatchBasedImageFilterISS2ISS2):
    r"""Proxy of C++ itkAdaptiveNonLocalMeansDenoisingImageFilterISS2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterISS2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterISS2ISS2_Clone)
    SetInput1 = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterISS2ISS2_SetInput1)
    SetMaskImage = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterISS2ISS2_SetMaskImage)
    SetInput2 = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterISS2ISS2_SetInput2)
    GetMaskImage = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterISS2ISS2_GetMaskImage)
    SetUseRicianNoiseModel = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterISS2ISS2_SetUseRicianNoiseModel)
    GetUseRicianNoiseModel = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterISS2ISS2_GetUseRicianNoiseModel)
    UseRicianNoiseModelOn = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterISS2ISS2_UseRicianNoiseModelOn)
    UseRicianNoiseModelOff = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterISS2ISS2_UseRicianNoiseModelOff)
    SetSmoothingFactor = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterISS2ISS2_SetSmoothingFactor)
    GetSmoothingFactor = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterISS2ISS2_GetSmoothingFactor)
    SetSmoothingVariance = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterISS2ISS2_SetSmoothingVariance)
    GetSmoothingVariance = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterISS2ISS2_GetSmoothingVariance)
    SetEpsilon = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterISS2ISS2_SetEpsilon)
    GetEpsilon = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterISS2ISS2_GetEpsilon)
    SetMeanThreshold = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterISS2ISS2_SetMeanThreshold)
    GetMeanThreshold = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterISS2ISS2_GetMeanThreshold)
    SetVarianceThreshold = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterISS2ISS2_SetVarianceThreshold)
    GetVarianceThreshold = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterISS2ISS2_GetVarianceThreshold)
    SetNeighborhoodRadiusForLocalMeanAndVariance = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterISS2ISS2_SetNeighborhoodRadiusForLocalMeanAndVariance)
    GetNeighborhoodRadiusForLocalMeanAndVariance = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterISS2ISS2_GetNeighborhoodRadiusForLocalMeanAndVariance)
    __swig_destroy__ = _itkAdaptiveNonLocalMeansDenoisingImageFilterPython.delete_itkAdaptiveNonLocalMeansDenoisingImageFilterISS2ISS2
    cast = _swig_new_static_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterISS2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkAdaptiveNonLocalMeansDenoisingImageFilterISS2ISS2

        Create a new object of the class itkAdaptiveNonLocalMeansDenoisingImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdaptiveNonLocalMeansDenoisingImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAdaptiveNonLocalMeansDenoisingImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAdaptiveNonLocalMeansDenoisingImageFilterISS2ISS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAdaptiveNonLocalMeansDenoisingImageFilterISS2ISS2 in _itkAdaptiveNonLocalMeansDenoisingImageFilterPython:
_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterISS2ISS2_swigregister(itkAdaptiveNonLocalMeansDenoisingImageFilterISS2ISS2)
itkAdaptiveNonLocalMeansDenoisingImageFilterISS2ISS2___New_orig__ = _itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterISS2ISS2___New_orig__
itkAdaptiveNonLocalMeansDenoisingImageFilterISS2ISS2_cast = _itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterISS2ISS2_cast


def itkAdaptiveNonLocalMeansDenoisingImageFilterISS3ISS3_New():
    return itkAdaptiveNonLocalMeansDenoisingImageFilterISS3ISS3.New()

class itkAdaptiveNonLocalMeansDenoisingImageFilterISS3ISS3(itk.itkNonLocalPatchBasedImageFilterPython.itkNonLocalPatchBasedImageFilterISS3ISS3):
    r"""Proxy of C++ itkAdaptiveNonLocalMeansDenoisingImageFilterISS3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterISS3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterISS3ISS3_Clone)
    SetInput1 = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterISS3ISS3_SetInput1)
    SetMaskImage = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterISS3ISS3_SetMaskImage)
    SetInput2 = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterISS3ISS3_SetInput2)
    GetMaskImage = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterISS3ISS3_GetMaskImage)
    SetUseRicianNoiseModel = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterISS3ISS3_SetUseRicianNoiseModel)
    GetUseRicianNoiseModel = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterISS3ISS3_GetUseRicianNoiseModel)
    UseRicianNoiseModelOn = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterISS3ISS3_UseRicianNoiseModelOn)
    UseRicianNoiseModelOff = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterISS3ISS3_UseRicianNoiseModelOff)
    SetSmoothingFactor = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterISS3ISS3_SetSmoothingFactor)
    GetSmoothingFactor = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterISS3ISS3_GetSmoothingFactor)
    SetSmoothingVariance = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterISS3ISS3_SetSmoothingVariance)
    GetSmoothingVariance = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterISS3ISS3_GetSmoothingVariance)
    SetEpsilon = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterISS3ISS3_SetEpsilon)
    GetEpsilon = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterISS3ISS3_GetEpsilon)
    SetMeanThreshold = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterISS3ISS3_SetMeanThreshold)
    GetMeanThreshold = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterISS3ISS3_GetMeanThreshold)
    SetVarianceThreshold = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterISS3ISS3_SetVarianceThreshold)
    GetVarianceThreshold = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterISS3ISS3_GetVarianceThreshold)
    SetNeighborhoodRadiusForLocalMeanAndVariance = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterISS3ISS3_SetNeighborhoodRadiusForLocalMeanAndVariance)
    GetNeighborhoodRadiusForLocalMeanAndVariance = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterISS3ISS3_GetNeighborhoodRadiusForLocalMeanAndVariance)
    __swig_destroy__ = _itkAdaptiveNonLocalMeansDenoisingImageFilterPython.delete_itkAdaptiveNonLocalMeansDenoisingImageFilterISS3ISS3
    cast = _swig_new_static_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterISS3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkAdaptiveNonLocalMeansDenoisingImageFilterISS3ISS3

        Create a new object of the class itkAdaptiveNonLocalMeansDenoisingImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdaptiveNonLocalMeansDenoisingImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAdaptiveNonLocalMeansDenoisingImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAdaptiveNonLocalMeansDenoisingImageFilterISS3ISS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAdaptiveNonLocalMeansDenoisingImageFilterISS3ISS3 in _itkAdaptiveNonLocalMeansDenoisingImageFilterPython:
_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterISS3ISS3_swigregister(itkAdaptiveNonLocalMeansDenoisingImageFilterISS3ISS3)
itkAdaptiveNonLocalMeansDenoisingImageFilterISS3ISS3___New_orig__ = _itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterISS3ISS3___New_orig__
itkAdaptiveNonLocalMeansDenoisingImageFilterISS3ISS3_cast = _itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterISS3ISS3_cast


def itkAdaptiveNonLocalMeansDenoisingImageFilterISS4ISS4_New():
    return itkAdaptiveNonLocalMeansDenoisingImageFilterISS4ISS4.New()

class itkAdaptiveNonLocalMeansDenoisingImageFilterISS4ISS4(itk.itkNonLocalPatchBasedImageFilterPython.itkNonLocalPatchBasedImageFilterISS4ISS4):
    r"""Proxy of C++ itkAdaptiveNonLocalMeansDenoisingImageFilterISS4ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterISS4ISS4___New_orig__)
    Clone = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterISS4ISS4_Clone)
    SetInput1 = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterISS4ISS4_SetInput1)
    SetMaskImage = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterISS4ISS4_SetMaskImage)
    SetInput2 = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterISS4ISS4_SetInput2)
    GetMaskImage = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterISS4ISS4_GetMaskImage)
    SetUseRicianNoiseModel = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterISS4ISS4_SetUseRicianNoiseModel)
    GetUseRicianNoiseModel = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterISS4ISS4_GetUseRicianNoiseModel)
    UseRicianNoiseModelOn = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterISS4ISS4_UseRicianNoiseModelOn)
    UseRicianNoiseModelOff = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterISS4ISS4_UseRicianNoiseModelOff)
    SetSmoothingFactor = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterISS4ISS4_SetSmoothingFactor)
    GetSmoothingFactor = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterISS4ISS4_GetSmoothingFactor)
    SetSmoothingVariance = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterISS4ISS4_SetSmoothingVariance)
    GetSmoothingVariance = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterISS4ISS4_GetSmoothingVariance)
    SetEpsilon = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterISS4ISS4_SetEpsilon)
    GetEpsilon = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterISS4ISS4_GetEpsilon)
    SetMeanThreshold = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterISS4ISS4_SetMeanThreshold)
    GetMeanThreshold = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterISS4ISS4_GetMeanThreshold)
    SetVarianceThreshold = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterISS4ISS4_SetVarianceThreshold)
    GetVarianceThreshold = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterISS4ISS4_GetVarianceThreshold)
    SetNeighborhoodRadiusForLocalMeanAndVariance = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterISS4ISS4_SetNeighborhoodRadiusForLocalMeanAndVariance)
    GetNeighborhoodRadiusForLocalMeanAndVariance = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterISS4ISS4_GetNeighborhoodRadiusForLocalMeanAndVariance)
    __swig_destroy__ = _itkAdaptiveNonLocalMeansDenoisingImageFilterPython.delete_itkAdaptiveNonLocalMeansDenoisingImageFilterISS4ISS4
    cast = _swig_new_static_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterISS4ISS4_cast)

    def New(*args, **kargs):
        """New() -> itkAdaptiveNonLocalMeansDenoisingImageFilterISS4ISS4

        Create a new object of the class itkAdaptiveNonLocalMeansDenoisingImageFilterISS4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdaptiveNonLocalMeansDenoisingImageFilterISS4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAdaptiveNonLocalMeansDenoisingImageFilterISS4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAdaptiveNonLocalMeansDenoisingImageFilterISS4ISS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAdaptiveNonLocalMeansDenoisingImageFilterISS4ISS4 in _itkAdaptiveNonLocalMeansDenoisingImageFilterPython:
_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterISS4ISS4_swigregister(itkAdaptiveNonLocalMeansDenoisingImageFilterISS4ISS4)
itkAdaptiveNonLocalMeansDenoisingImageFilterISS4ISS4___New_orig__ = _itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterISS4ISS4___New_orig__
itkAdaptiveNonLocalMeansDenoisingImageFilterISS4ISS4_cast = _itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterISS4ISS4_cast


def itkAdaptiveNonLocalMeansDenoisingImageFilterIUC2IUC2_New():
    return itkAdaptiveNonLocalMeansDenoisingImageFilterIUC2IUC2.New()

class itkAdaptiveNonLocalMeansDenoisingImageFilterIUC2IUC2(itk.itkNonLocalPatchBasedImageFilterPython.itkNonLocalPatchBasedImageFilterIUC2IUC2):
    r"""Proxy of C++ itkAdaptiveNonLocalMeansDenoisingImageFilterIUC2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUC2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUC2IUC2_Clone)
    SetInput1 = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUC2IUC2_SetInput1)
    SetMaskImage = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUC2IUC2_SetMaskImage)
    SetInput2 = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUC2IUC2_SetInput2)
    GetMaskImage = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUC2IUC2_GetMaskImage)
    SetUseRicianNoiseModel = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUC2IUC2_SetUseRicianNoiseModel)
    GetUseRicianNoiseModel = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUC2IUC2_GetUseRicianNoiseModel)
    UseRicianNoiseModelOn = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUC2IUC2_UseRicianNoiseModelOn)
    UseRicianNoiseModelOff = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUC2IUC2_UseRicianNoiseModelOff)
    SetSmoothingFactor = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUC2IUC2_SetSmoothingFactor)
    GetSmoothingFactor = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUC2IUC2_GetSmoothingFactor)
    SetSmoothingVariance = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUC2IUC2_SetSmoothingVariance)
    GetSmoothingVariance = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUC2IUC2_GetSmoothingVariance)
    SetEpsilon = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUC2IUC2_SetEpsilon)
    GetEpsilon = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUC2IUC2_GetEpsilon)
    SetMeanThreshold = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUC2IUC2_SetMeanThreshold)
    GetMeanThreshold = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUC2IUC2_GetMeanThreshold)
    SetVarianceThreshold = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUC2IUC2_SetVarianceThreshold)
    GetVarianceThreshold = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUC2IUC2_GetVarianceThreshold)
    SetNeighborhoodRadiusForLocalMeanAndVariance = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUC2IUC2_SetNeighborhoodRadiusForLocalMeanAndVariance)
    GetNeighborhoodRadiusForLocalMeanAndVariance = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUC2IUC2_GetNeighborhoodRadiusForLocalMeanAndVariance)
    __swig_destroy__ = _itkAdaptiveNonLocalMeansDenoisingImageFilterPython.delete_itkAdaptiveNonLocalMeansDenoisingImageFilterIUC2IUC2
    cast = _swig_new_static_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUC2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkAdaptiveNonLocalMeansDenoisingImageFilterIUC2IUC2

        Create a new object of the class itkAdaptiveNonLocalMeansDenoisingImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdaptiveNonLocalMeansDenoisingImageFilterIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAdaptiveNonLocalMeansDenoisingImageFilterIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAdaptiveNonLocalMeansDenoisingImageFilterIUC2IUC2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAdaptiveNonLocalMeansDenoisingImageFilterIUC2IUC2 in _itkAdaptiveNonLocalMeansDenoisingImageFilterPython:
_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUC2IUC2_swigregister(itkAdaptiveNonLocalMeansDenoisingImageFilterIUC2IUC2)
itkAdaptiveNonLocalMeansDenoisingImageFilterIUC2IUC2___New_orig__ = _itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUC2IUC2___New_orig__
itkAdaptiveNonLocalMeansDenoisingImageFilterIUC2IUC2_cast = _itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUC2IUC2_cast


def itkAdaptiveNonLocalMeansDenoisingImageFilterIUC3IUC3_New():
    return itkAdaptiveNonLocalMeansDenoisingImageFilterIUC3IUC3.New()

class itkAdaptiveNonLocalMeansDenoisingImageFilterIUC3IUC3(itk.itkNonLocalPatchBasedImageFilterPython.itkNonLocalPatchBasedImageFilterIUC3IUC3):
    r"""Proxy of C++ itkAdaptiveNonLocalMeansDenoisingImageFilterIUC3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUC3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUC3IUC3_Clone)
    SetInput1 = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUC3IUC3_SetInput1)
    SetMaskImage = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUC3IUC3_SetMaskImage)
    SetInput2 = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUC3IUC3_SetInput2)
    GetMaskImage = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUC3IUC3_GetMaskImage)
    SetUseRicianNoiseModel = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUC3IUC3_SetUseRicianNoiseModel)
    GetUseRicianNoiseModel = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUC3IUC3_GetUseRicianNoiseModel)
    UseRicianNoiseModelOn = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUC3IUC3_UseRicianNoiseModelOn)
    UseRicianNoiseModelOff = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUC3IUC3_UseRicianNoiseModelOff)
    SetSmoothingFactor = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUC3IUC3_SetSmoothingFactor)
    GetSmoothingFactor = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUC3IUC3_GetSmoothingFactor)
    SetSmoothingVariance = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUC3IUC3_SetSmoothingVariance)
    GetSmoothingVariance = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUC3IUC3_GetSmoothingVariance)
    SetEpsilon = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUC3IUC3_SetEpsilon)
    GetEpsilon = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUC3IUC3_GetEpsilon)
    SetMeanThreshold = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUC3IUC3_SetMeanThreshold)
    GetMeanThreshold = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUC3IUC3_GetMeanThreshold)
    SetVarianceThreshold = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUC3IUC3_SetVarianceThreshold)
    GetVarianceThreshold = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUC3IUC3_GetVarianceThreshold)
    SetNeighborhoodRadiusForLocalMeanAndVariance = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUC3IUC3_SetNeighborhoodRadiusForLocalMeanAndVariance)
    GetNeighborhoodRadiusForLocalMeanAndVariance = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUC3IUC3_GetNeighborhoodRadiusForLocalMeanAndVariance)
    __swig_destroy__ = _itkAdaptiveNonLocalMeansDenoisingImageFilterPython.delete_itkAdaptiveNonLocalMeansDenoisingImageFilterIUC3IUC3
    cast = _swig_new_static_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUC3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkAdaptiveNonLocalMeansDenoisingImageFilterIUC3IUC3

        Create a new object of the class itkAdaptiveNonLocalMeansDenoisingImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdaptiveNonLocalMeansDenoisingImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAdaptiveNonLocalMeansDenoisingImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAdaptiveNonLocalMeansDenoisingImageFilterIUC3IUC3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAdaptiveNonLocalMeansDenoisingImageFilterIUC3IUC3 in _itkAdaptiveNonLocalMeansDenoisingImageFilterPython:
_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUC3IUC3_swigregister(itkAdaptiveNonLocalMeansDenoisingImageFilterIUC3IUC3)
itkAdaptiveNonLocalMeansDenoisingImageFilterIUC3IUC3___New_orig__ = _itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUC3IUC3___New_orig__
itkAdaptiveNonLocalMeansDenoisingImageFilterIUC3IUC3_cast = _itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUC3IUC3_cast


def itkAdaptiveNonLocalMeansDenoisingImageFilterIUC4IUC4_New():
    return itkAdaptiveNonLocalMeansDenoisingImageFilterIUC4IUC4.New()

class itkAdaptiveNonLocalMeansDenoisingImageFilterIUC4IUC4(itk.itkNonLocalPatchBasedImageFilterPython.itkNonLocalPatchBasedImageFilterIUC4IUC4):
    r"""Proxy of C++ itkAdaptiveNonLocalMeansDenoisingImageFilterIUC4IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUC4IUC4___New_orig__)
    Clone = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUC4IUC4_Clone)
    SetInput1 = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUC4IUC4_SetInput1)
    SetMaskImage = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUC4IUC4_SetMaskImage)
    SetInput2 = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUC4IUC4_SetInput2)
    GetMaskImage = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUC4IUC4_GetMaskImage)
    SetUseRicianNoiseModel = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUC4IUC4_SetUseRicianNoiseModel)
    GetUseRicianNoiseModel = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUC4IUC4_GetUseRicianNoiseModel)
    UseRicianNoiseModelOn = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUC4IUC4_UseRicianNoiseModelOn)
    UseRicianNoiseModelOff = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUC4IUC4_UseRicianNoiseModelOff)
    SetSmoothingFactor = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUC4IUC4_SetSmoothingFactor)
    GetSmoothingFactor = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUC4IUC4_GetSmoothingFactor)
    SetSmoothingVariance = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUC4IUC4_SetSmoothingVariance)
    GetSmoothingVariance = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUC4IUC4_GetSmoothingVariance)
    SetEpsilon = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUC4IUC4_SetEpsilon)
    GetEpsilon = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUC4IUC4_GetEpsilon)
    SetMeanThreshold = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUC4IUC4_SetMeanThreshold)
    GetMeanThreshold = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUC4IUC4_GetMeanThreshold)
    SetVarianceThreshold = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUC4IUC4_SetVarianceThreshold)
    GetVarianceThreshold = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUC4IUC4_GetVarianceThreshold)
    SetNeighborhoodRadiusForLocalMeanAndVariance = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUC4IUC4_SetNeighborhoodRadiusForLocalMeanAndVariance)
    GetNeighborhoodRadiusForLocalMeanAndVariance = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUC4IUC4_GetNeighborhoodRadiusForLocalMeanAndVariance)
    __swig_destroy__ = _itkAdaptiveNonLocalMeansDenoisingImageFilterPython.delete_itkAdaptiveNonLocalMeansDenoisingImageFilterIUC4IUC4
    cast = _swig_new_static_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUC4IUC4_cast)

    def New(*args, **kargs):
        """New() -> itkAdaptiveNonLocalMeansDenoisingImageFilterIUC4IUC4

        Create a new object of the class itkAdaptiveNonLocalMeansDenoisingImageFilterIUC4IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdaptiveNonLocalMeansDenoisingImageFilterIUC4IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAdaptiveNonLocalMeansDenoisingImageFilterIUC4IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAdaptiveNonLocalMeansDenoisingImageFilterIUC4IUC4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAdaptiveNonLocalMeansDenoisingImageFilterIUC4IUC4 in _itkAdaptiveNonLocalMeansDenoisingImageFilterPython:
_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUC4IUC4_swigregister(itkAdaptiveNonLocalMeansDenoisingImageFilterIUC4IUC4)
itkAdaptiveNonLocalMeansDenoisingImageFilterIUC4IUC4___New_orig__ = _itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUC4IUC4___New_orig__
itkAdaptiveNonLocalMeansDenoisingImageFilterIUC4IUC4_cast = _itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUC4IUC4_cast


def itkAdaptiveNonLocalMeansDenoisingImageFilterIUS2IUS2_New():
    return itkAdaptiveNonLocalMeansDenoisingImageFilterIUS2IUS2.New()

class itkAdaptiveNonLocalMeansDenoisingImageFilterIUS2IUS2(itk.itkNonLocalPatchBasedImageFilterPython.itkNonLocalPatchBasedImageFilterIUS2IUS2):
    r"""Proxy of C++ itkAdaptiveNonLocalMeansDenoisingImageFilterIUS2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUS2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUS2IUS2_Clone)
    SetInput1 = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUS2IUS2_SetInput1)
    SetMaskImage = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUS2IUS2_SetMaskImage)
    SetInput2 = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUS2IUS2_SetInput2)
    GetMaskImage = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUS2IUS2_GetMaskImage)
    SetUseRicianNoiseModel = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUS2IUS2_SetUseRicianNoiseModel)
    GetUseRicianNoiseModel = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUS2IUS2_GetUseRicianNoiseModel)
    UseRicianNoiseModelOn = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUS2IUS2_UseRicianNoiseModelOn)
    UseRicianNoiseModelOff = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUS2IUS2_UseRicianNoiseModelOff)
    SetSmoothingFactor = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUS2IUS2_SetSmoothingFactor)
    GetSmoothingFactor = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUS2IUS2_GetSmoothingFactor)
    SetSmoothingVariance = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUS2IUS2_SetSmoothingVariance)
    GetSmoothingVariance = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUS2IUS2_GetSmoothingVariance)
    SetEpsilon = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUS2IUS2_SetEpsilon)
    GetEpsilon = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUS2IUS2_GetEpsilon)
    SetMeanThreshold = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUS2IUS2_SetMeanThreshold)
    GetMeanThreshold = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUS2IUS2_GetMeanThreshold)
    SetVarianceThreshold = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUS2IUS2_SetVarianceThreshold)
    GetVarianceThreshold = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUS2IUS2_GetVarianceThreshold)
    SetNeighborhoodRadiusForLocalMeanAndVariance = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUS2IUS2_SetNeighborhoodRadiusForLocalMeanAndVariance)
    GetNeighborhoodRadiusForLocalMeanAndVariance = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUS2IUS2_GetNeighborhoodRadiusForLocalMeanAndVariance)
    __swig_destroy__ = _itkAdaptiveNonLocalMeansDenoisingImageFilterPython.delete_itkAdaptiveNonLocalMeansDenoisingImageFilterIUS2IUS2
    cast = _swig_new_static_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUS2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkAdaptiveNonLocalMeansDenoisingImageFilterIUS2IUS2

        Create a new object of the class itkAdaptiveNonLocalMeansDenoisingImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdaptiveNonLocalMeansDenoisingImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAdaptiveNonLocalMeansDenoisingImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAdaptiveNonLocalMeansDenoisingImageFilterIUS2IUS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAdaptiveNonLocalMeansDenoisingImageFilterIUS2IUS2 in _itkAdaptiveNonLocalMeansDenoisingImageFilterPython:
_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUS2IUS2_swigregister(itkAdaptiveNonLocalMeansDenoisingImageFilterIUS2IUS2)
itkAdaptiveNonLocalMeansDenoisingImageFilterIUS2IUS2___New_orig__ = _itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUS2IUS2___New_orig__
itkAdaptiveNonLocalMeansDenoisingImageFilterIUS2IUS2_cast = _itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUS2IUS2_cast


def itkAdaptiveNonLocalMeansDenoisingImageFilterIUS3IUS3_New():
    return itkAdaptiveNonLocalMeansDenoisingImageFilterIUS3IUS3.New()

class itkAdaptiveNonLocalMeansDenoisingImageFilterIUS3IUS3(itk.itkNonLocalPatchBasedImageFilterPython.itkNonLocalPatchBasedImageFilterIUS3IUS3):
    r"""Proxy of C++ itkAdaptiveNonLocalMeansDenoisingImageFilterIUS3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUS3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUS3IUS3_Clone)
    SetInput1 = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUS3IUS3_SetInput1)
    SetMaskImage = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUS3IUS3_SetMaskImage)
    SetInput2 = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUS3IUS3_SetInput2)
    GetMaskImage = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUS3IUS3_GetMaskImage)
    SetUseRicianNoiseModel = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUS3IUS3_SetUseRicianNoiseModel)
    GetUseRicianNoiseModel = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUS3IUS3_GetUseRicianNoiseModel)
    UseRicianNoiseModelOn = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUS3IUS3_UseRicianNoiseModelOn)
    UseRicianNoiseModelOff = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUS3IUS3_UseRicianNoiseModelOff)
    SetSmoothingFactor = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUS3IUS3_SetSmoothingFactor)
    GetSmoothingFactor = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUS3IUS3_GetSmoothingFactor)
    SetSmoothingVariance = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUS3IUS3_SetSmoothingVariance)
    GetSmoothingVariance = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUS3IUS3_GetSmoothingVariance)
    SetEpsilon = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUS3IUS3_SetEpsilon)
    GetEpsilon = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUS3IUS3_GetEpsilon)
    SetMeanThreshold = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUS3IUS3_SetMeanThreshold)
    GetMeanThreshold = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUS3IUS3_GetMeanThreshold)
    SetVarianceThreshold = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUS3IUS3_SetVarianceThreshold)
    GetVarianceThreshold = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUS3IUS3_GetVarianceThreshold)
    SetNeighborhoodRadiusForLocalMeanAndVariance = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUS3IUS3_SetNeighborhoodRadiusForLocalMeanAndVariance)
    GetNeighborhoodRadiusForLocalMeanAndVariance = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUS3IUS3_GetNeighborhoodRadiusForLocalMeanAndVariance)
    __swig_destroy__ = _itkAdaptiveNonLocalMeansDenoisingImageFilterPython.delete_itkAdaptiveNonLocalMeansDenoisingImageFilterIUS3IUS3
    cast = _swig_new_static_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUS3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkAdaptiveNonLocalMeansDenoisingImageFilterIUS3IUS3

        Create a new object of the class itkAdaptiveNonLocalMeansDenoisingImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdaptiveNonLocalMeansDenoisingImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAdaptiveNonLocalMeansDenoisingImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAdaptiveNonLocalMeansDenoisingImageFilterIUS3IUS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAdaptiveNonLocalMeansDenoisingImageFilterIUS3IUS3 in _itkAdaptiveNonLocalMeansDenoisingImageFilterPython:
_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUS3IUS3_swigregister(itkAdaptiveNonLocalMeansDenoisingImageFilterIUS3IUS3)
itkAdaptiveNonLocalMeansDenoisingImageFilterIUS3IUS3___New_orig__ = _itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUS3IUS3___New_orig__
itkAdaptiveNonLocalMeansDenoisingImageFilterIUS3IUS3_cast = _itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUS3IUS3_cast


def itkAdaptiveNonLocalMeansDenoisingImageFilterIUS4IUS4_New():
    return itkAdaptiveNonLocalMeansDenoisingImageFilterIUS4IUS4.New()

class itkAdaptiveNonLocalMeansDenoisingImageFilterIUS4IUS4(itk.itkNonLocalPatchBasedImageFilterPython.itkNonLocalPatchBasedImageFilterIUS4IUS4):
    r"""Proxy of C++ itkAdaptiveNonLocalMeansDenoisingImageFilterIUS4IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUS4IUS4___New_orig__)
    Clone = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUS4IUS4_Clone)
    SetInput1 = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUS4IUS4_SetInput1)
    SetMaskImage = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUS4IUS4_SetMaskImage)
    SetInput2 = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUS4IUS4_SetInput2)
    GetMaskImage = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUS4IUS4_GetMaskImage)
    SetUseRicianNoiseModel = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUS4IUS4_SetUseRicianNoiseModel)
    GetUseRicianNoiseModel = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUS4IUS4_GetUseRicianNoiseModel)
    UseRicianNoiseModelOn = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUS4IUS4_UseRicianNoiseModelOn)
    UseRicianNoiseModelOff = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUS4IUS4_UseRicianNoiseModelOff)
    SetSmoothingFactor = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUS4IUS4_SetSmoothingFactor)
    GetSmoothingFactor = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUS4IUS4_GetSmoothingFactor)
    SetSmoothingVariance = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUS4IUS4_SetSmoothingVariance)
    GetSmoothingVariance = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUS4IUS4_GetSmoothingVariance)
    SetEpsilon = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUS4IUS4_SetEpsilon)
    GetEpsilon = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUS4IUS4_GetEpsilon)
    SetMeanThreshold = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUS4IUS4_SetMeanThreshold)
    GetMeanThreshold = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUS4IUS4_GetMeanThreshold)
    SetVarianceThreshold = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUS4IUS4_SetVarianceThreshold)
    GetVarianceThreshold = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUS4IUS4_GetVarianceThreshold)
    SetNeighborhoodRadiusForLocalMeanAndVariance = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUS4IUS4_SetNeighborhoodRadiusForLocalMeanAndVariance)
    GetNeighborhoodRadiusForLocalMeanAndVariance = _swig_new_instance_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUS4IUS4_GetNeighborhoodRadiusForLocalMeanAndVariance)
    __swig_destroy__ = _itkAdaptiveNonLocalMeansDenoisingImageFilterPython.delete_itkAdaptiveNonLocalMeansDenoisingImageFilterIUS4IUS4
    cast = _swig_new_static_method(_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUS4IUS4_cast)

    def New(*args, **kargs):
        """New() -> itkAdaptiveNonLocalMeansDenoisingImageFilterIUS4IUS4

        Create a new object of the class itkAdaptiveNonLocalMeansDenoisingImageFilterIUS4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdaptiveNonLocalMeansDenoisingImageFilterIUS4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAdaptiveNonLocalMeansDenoisingImageFilterIUS4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAdaptiveNonLocalMeansDenoisingImageFilterIUS4IUS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAdaptiveNonLocalMeansDenoisingImageFilterIUS4IUS4 in _itkAdaptiveNonLocalMeansDenoisingImageFilterPython:
_itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUS4IUS4_swigregister(itkAdaptiveNonLocalMeansDenoisingImageFilterIUS4IUS4)
itkAdaptiveNonLocalMeansDenoisingImageFilterIUS4IUS4___New_orig__ = _itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUS4IUS4___New_orig__
itkAdaptiveNonLocalMeansDenoisingImageFilterIUS4IUS4_cast = _itkAdaptiveNonLocalMeansDenoisingImageFilterPython.itkAdaptiveNonLocalMeansDenoisingImageFilterIUS4IUS4_cast


from itk.support import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def adaptive_non_local_means_denoising_image_filter(*args, **kwargs):
    """Procedural interface for AdaptiveNonLocalMeansDenoisingImageFilter"""
    import itk

    instance = itk.AdaptiveNonLocalMeansDenoisingImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()


def adaptive_non_local_means_denoising_image_filter_init_docstring():
    import itk
    from itk.support import itkTemplate
    from itk.support import itkHelpers

    if isinstance(itk.AdaptiveNonLocalMeansDenoisingImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.AdaptiveNonLocalMeansDenoisingImageFilter.values()[0]
    else:
        filter_object = itk.AdaptiveNonLocalMeansDenoisingImageFilter

    adaptive_non_local_means_denoising_image_filter.__doc__ = filter_object.__doc__
    adaptive_non_local_means_denoising_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    adaptive_non_local_means_denoising_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.AdaptiveNonLocalMeansDenoisingImageFilter, itkTemplate.itkTemplate):
        adaptive_non_local_means_denoising_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        adaptive_non_local_means_denoising_image_filter.__doc__ += "\n"
        adaptive_non_local_means_denoising_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        adaptive_non_local_means_denoising_image_filter.__doc__ += "".join(
            [
                "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
                for item in dir(filter_object)
                if item.startswith("Set")
            ]
        )




