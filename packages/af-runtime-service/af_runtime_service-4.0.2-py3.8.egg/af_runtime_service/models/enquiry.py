# coding: utf-8

"""
    AristaFlowREST/RuntimeService

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 4.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Enquiry(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'originator': 'QualifiedAgent',
        'recipients': 'list[QualifiedAgent]',
        'question': 'str',
        'reply': 'str',
        'replier': 'QualifiedAgent'
    }

    attribute_map = {
        'originator': 'originator',
        'recipients': 'recipients',
        'question': 'question',
        'reply': 'reply',
        'replier': 'replier'
    }

    def __init__(self, originator=None, recipients=None, question=None, reply=None, replier=None):  # noqa: E501
        """Enquiry - a model defined in Swagger"""  # noqa: E501
        self._originator = None
        self._recipients = None
        self._question = None
        self._reply = None
        self._replier = None
        if not(hasattr(self, "discriminator")) or not(self.discriminator):
            self.discriminator = None
        self.originator = originator
        self.recipients = recipients
        self.question = question
        if reply is not None:
            self.reply = reply
        if replier is not None:
            self.replier = replier

    @property
    def originator(self):
        """Gets the originator of this Enquiry.  # noqa: E501


        :return: The originator of this Enquiry.  # noqa: E501
        :rtype: QualifiedAgent
        """
        return self._originator

    @originator.setter
    def originator(self, originator):
        """Sets the originator of this Enquiry.


        :param originator: The originator of this Enquiry.  # noqa: E501
        :type: QualifiedAgent
        """
        if originator is None:
            raise ValueError("Invalid value for `originator`, must not be `None`")  # noqa: E501

        self._originator = originator

    @property
    def recipients(self):
        """Gets the recipients of this Enquiry.  # noqa: E501


        :return: The recipients of this Enquiry.  # noqa: E501
        :rtype: list[QualifiedAgent]
        """
        return self._recipients

    @recipients.setter
    def recipients(self, recipients):
        """Sets the recipients of this Enquiry.


        :param recipients: The recipients of this Enquiry.  # noqa: E501
        :type: list[QualifiedAgent]
        """
        if recipients is None:
            raise ValueError("Invalid value for `recipients`, must not be `None`")  # noqa: E501

        self._recipients = recipients

    @property
    def question(self):
        """Gets the question of this Enquiry.  # noqa: E501


        :return: The question of this Enquiry.  # noqa: E501
        :rtype: str
        """
        return self._question

    @question.setter
    def question(self, question):
        """Sets the question of this Enquiry.


        :param question: The question of this Enquiry.  # noqa: E501
        :type: str
        """
        if question is None:
            raise ValueError("Invalid value for `question`, must not be `None`")  # noqa: E501

        self._question = question

    @property
    def reply(self):
        """Gets the reply of this Enquiry.  # noqa: E501


        :return: The reply of this Enquiry.  # noqa: E501
        :rtype: str
        """
        return self._reply

    @reply.setter
    def reply(self, reply):
        """Sets the reply of this Enquiry.


        :param reply: The reply of this Enquiry.  # noqa: E501
        :type: str
        """

        self._reply = reply

    @property
    def replier(self):
        """Gets the replier of this Enquiry.  # noqa: E501


        :return: The replier of this Enquiry.  # noqa: E501
        :rtype: QualifiedAgent
        """
        return self._replier

    @replier.setter
    def replier(self, replier):
        """Sets the replier of this Enquiry.


        :param replier: The replier of this Enquiry.  # noqa: E501
        :type: QualifiedAgent
        """

        self._replier = replier

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Enquiry, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Enquiry):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
