# coding: utf-8

"""
    AristaFlowREST/RuntimeService

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 4.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from af_runtime_service.models.incomplete_session_context import IncompleteSessionContext  # noqa: F401,E501

class SimpleSessionContext(IncompleteSessionContext):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'session_id': 'str',
        'resumed': 'bool',
        'savepoint': 'str',
        'test_mode': 'bool',
        'view_only': 'bool'
    }
    if hasattr(IncompleteSessionContext, "swagger_types"):
        swagger_types.update(IncompleteSessionContext.swagger_types)

    attribute_map = {
        'session_id': 'sessionId',
        'resumed': 'resumed',
        'savepoint': 'savepoint',
        'test_mode': 'testMode',
        'view_only': 'viewOnly'
    }
    if hasattr(IncompleteSessionContext, "attribute_map"):
        attribute_map.update(IncompleteSessionContext.attribute_map)

    def __init__(self, session_id=None, resumed=None, savepoint=None, test_mode=None, view_only=None, *args, **kwargs):  # noqa: E501
        """SimpleSessionContext - a model defined in Swagger"""  # noqa: E501
        self._session_id = None
        self._resumed = None
        self._savepoint = None
        self._test_mode = None
        self._view_only = None
        if not(hasattr(self, "discriminator")) or not(self.discriminator):
            self.discriminator = None
        self.session_id = session_id
        self.resumed = resumed
        if savepoint is not None:
            self.savepoint = savepoint
        self.test_mode = test_mode
        self.view_only = view_only
        IncompleteSessionContext.__init__(self, *args, **kwargs)

    @property
    def session_id(self):
        """Gets the session_id of this SimpleSessionContext.  # noqa: E501


        :return: The session_id of this SimpleSessionContext.  # noqa: E501
        :rtype: str
        """
        return self._session_id

    @session_id.setter
    def session_id(self, session_id):
        """Sets the session_id of this SimpleSessionContext.


        :param session_id: The session_id of this SimpleSessionContext.  # noqa: E501
        :type: str
        """
        if session_id is None:
            raise ValueError("Invalid value for `session_id`, must not be `None`")  # noqa: E501

        self._session_id = session_id

    @property
    def resumed(self):
        """Gets the resumed of this SimpleSessionContext.  # noqa: E501


        :return: The resumed of this SimpleSessionContext.  # noqa: E501
        :rtype: bool
        """
        return self._resumed

    @resumed.setter
    def resumed(self, resumed):
        """Sets the resumed of this SimpleSessionContext.


        :param resumed: The resumed of this SimpleSessionContext.  # noqa: E501
        :type: bool
        """
        if resumed is None:
            raise ValueError("Invalid value for `resumed`, must not be `None`")  # noqa: E501

        self._resumed = resumed

    @property
    def savepoint(self):
        """Gets the savepoint of this SimpleSessionContext.  # noqa: E501


        :return: The savepoint of this SimpleSessionContext.  # noqa: E501
        :rtype: str
        """
        return self._savepoint

    @savepoint.setter
    def savepoint(self, savepoint):
        """Sets the savepoint of this SimpleSessionContext.


        :param savepoint: The savepoint of this SimpleSessionContext.  # noqa: E501
        :type: str
        """

        self._savepoint = savepoint

    @property
    def test_mode(self):
        """Gets the test_mode of this SimpleSessionContext.  # noqa: E501


        :return: The test_mode of this SimpleSessionContext.  # noqa: E501
        :rtype: bool
        """
        return self._test_mode

    @test_mode.setter
    def test_mode(self, test_mode):
        """Sets the test_mode of this SimpleSessionContext.


        :param test_mode: The test_mode of this SimpleSessionContext.  # noqa: E501
        :type: bool
        """
        if test_mode is None:
            raise ValueError("Invalid value for `test_mode`, must not be `None`")  # noqa: E501

        self._test_mode = test_mode

    @property
    def view_only(self):
        """Gets the view_only of this SimpleSessionContext.  # noqa: E501


        :return: The view_only of this SimpleSessionContext.  # noqa: E501
        :rtype: bool
        """
        return self._view_only

    @view_only.setter
    def view_only(self, view_only):
        """Sets the view_only of this SimpleSessionContext.


        :param view_only: The view_only of this SimpleSessionContext.  # noqa: E501
        :type: bool
        """
        if view_only is None:
            raise ValueError("Invalid value for `view_only`, must not be `None`")  # noqa: E501

        self._view_only = view_only

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SimpleSessionContext, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SimpleSessionContext):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
