# coding: utf-8

"""
    AristaFlowREST/RuntimeService

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 4.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from af_runtime_service.models.dummy_parent import DummyParent  # noqa: F401,E501

class IncompleteSessionContext(DummyParent):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sub_class': 'str',
        'ebp_inst_ref': 'EbpInstanceReference',
        'data_context': 'DataContext',
        'act_instance': 'ActivityInstance',
        'current_enq': 'Enquiry',
        'replied_enq': 'Enquiry',
        'user_attributes': 'dict(str, str)'
    }
    if hasattr(DummyParent, "swagger_types"):
        swagger_types.update(DummyParent.swagger_types)

    attribute_map = {
        'sub_class': 'subClass',
        'ebp_inst_ref': 'ebpInstRef',
        'data_context': 'dataContext',
        'act_instance': 'actInstance',
        'current_enq': 'currentEnq',
        'replied_enq': 'repliedEnq',
        'user_attributes': 'userAttributes'
    }
    if hasattr(DummyParent, "attribute_map"):
        attribute_map.update(DummyParent.attribute_map)

    discriminator_value_class_map = {
          'SimpleSessionContext': 'SimpleSessionContext'    }

    def __init__(self, sub_class=None, ebp_inst_ref=None, data_context=None, act_instance=None, current_enq=None, replied_enq=None, user_attributes=None, *args, **kwargs):  # noqa: E501
        """IncompleteSessionContext - a model defined in Swagger"""  # noqa: E501
        self._sub_class = None
        self._ebp_inst_ref = None
        self._data_context = None
        self._act_instance = None
        self._current_enq = None
        self._replied_enq = None
        self._user_attributes = None
        if not(hasattr(self, "discriminator")) or not(self.discriminator):
            self.discriminator = 'sub_class'
        self.sub_class = sub_class
        self.ebp_inst_ref = ebp_inst_ref
        self.data_context = data_context
        self.act_instance = act_instance
        if current_enq is not None:
            self.current_enq = current_enq
        if replied_enq is not None:
            self.replied_enq = replied_enq
        if user_attributes is not None:
            self.user_attributes = user_attributes
        DummyParent.__init__(self, *args, **kwargs)

    @property
    def sub_class(self):
        """Gets the sub_class of this IncompleteSessionContext.  # noqa: E501


        :return: The sub_class of this IncompleteSessionContext.  # noqa: E501
        :rtype: str
        """
        return self._sub_class

    @sub_class.setter
    def sub_class(self, sub_class):
        """Sets the sub_class of this IncompleteSessionContext.


        :param sub_class: The sub_class of this IncompleteSessionContext.  # noqa: E501
        :type: str
        """
        if sub_class is None:
            raise ValueError("Invalid value for `sub_class`, must not be `None`")  # noqa: E501

        self._sub_class = sub_class

    @property
    def ebp_inst_ref(self):
        """Gets the ebp_inst_ref of this IncompleteSessionContext.  # noqa: E501


        :return: The ebp_inst_ref of this IncompleteSessionContext.  # noqa: E501
        :rtype: EbpInstanceReference
        """
        return self._ebp_inst_ref

    @ebp_inst_ref.setter
    def ebp_inst_ref(self, ebp_inst_ref):
        """Sets the ebp_inst_ref of this IncompleteSessionContext.


        :param ebp_inst_ref: The ebp_inst_ref of this IncompleteSessionContext.  # noqa: E501
        :type: EbpInstanceReference
        """
        if ebp_inst_ref is None:
            raise ValueError("Invalid value for `ebp_inst_ref`, must not be `None`")  # noqa: E501

        self._ebp_inst_ref = ebp_inst_ref

    @property
    def data_context(self):
        """Gets the data_context of this IncompleteSessionContext.  # noqa: E501


        :return: The data_context of this IncompleteSessionContext.  # noqa: E501
        :rtype: DataContext
        """
        return self._data_context

    @data_context.setter
    def data_context(self, data_context):
        """Sets the data_context of this IncompleteSessionContext.


        :param data_context: The data_context of this IncompleteSessionContext.  # noqa: E501
        :type: DataContext
        """
        if data_context is None:
            raise ValueError("Invalid value for `data_context`, must not be `None`")  # noqa: E501

        self._data_context = data_context

    @property
    def act_instance(self):
        """Gets the act_instance of this IncompleteSessionContext.  # noqa: E501


        :return: The act_instance of this IncompleteSessionContext.  # noqa: E501
        :rtype: ActivityInstance
        """
        return self._act_instance

    @act_instance.setter
    def act_instance(self, act_instance):
        """Sets the act_instance of this IncompleteSessionContext.


        :param act_instance: The act_instance of this IncompleteSessionContext.  # noqa: E501
        :type: ActivityInstance
        """
        if act_instance is None:
            raise ValueError("Invalid value for `act_instance`, must not be `None`")  # noqa: E501

        self._act_instance = act_instance

    @property
    def current_enq(self):
        """Gets the current_enq of this IncompleteSessionContext.  # noqa: E501


        :return: The current_enq of this IncompleteSessionContext.  # noqa: E501
        :rtype: Enquiry
        """
        return self._current_enq

    @current_enq.setter
    def current_enq(self, current_enq):
        """Sets the current_enq of this IncompleteSessionContext.


        :param current_enq: The current_enq of this IncompleteSessionContext.  # noqa: E501
        :type: Enquiry
        """

        self._current_enq = current_enq

    @property
    def replied_enq(self):
        """Gets the replied_enq of this IncompleteSessionContext.  # noqa: E501


        :return: The replied_enq of this IncompleteSessionContext.  # noqa: E501
        :rtype: Enquiry
        """
        return self._replied_enq

    @replied_enq.setter
    def replied_enq(self, replied_enq):
        """Sets the replied_enq of this IncompleteSessionContext.


        :param replied_enq: The replied_enq of this IncompleteSessionContext.  # noqa: E501
        :type: Enquiry
        """

        self._replied_enq = replied_enq

    @property
    def user_attributes(self):
        """Gets the user_attributes of this IncompleteSessionContext.  # noqa: E501


        :return: The user_attributes of this IncompleteSessionContext.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._user_attributes

    @user_attributes.setter
    def user_attributes(self, user_attributes):
        """Sets the user_attributes of this IncompleteSessionContext.


        :param user_attributes: The user_attributes of this IncompleteSessionContext.  # noqa: E501
        :type: dict(str, str)
        """

        self._user_attributes = user_attributes

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_value = data[self.attribute_map[self.discriminator]]
        return discriminator_value if not(self.__class__.__name__ == discriminator_value) else None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IncompleteSessionContext, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IncompleteSessionContext):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
