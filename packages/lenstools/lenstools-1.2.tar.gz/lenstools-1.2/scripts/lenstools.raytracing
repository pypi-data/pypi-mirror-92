#!/usr/bin/env python

import sys
import argparse
from distutils import config

import lenstools.scripts.raytracing
from lenstools import SimulationBatch
from lenstools.pipeline.settings import EnvironmentSettings,CatalogSettings,MapSettings

import logging
from lenstools.simulations.logs import logpreamble

#Parse command line options
parser = argparse.ArgumentParser()
parser.add_argument("-v","--verbose",dest="verbose",action="store_true",default=False,help="turn output verbosity")
parser.add_argument("-e","--environment",dest="environment",action="store",type=str,help="environment configuration file")
parser.add_argument("-c","--config",dest="config_file",action="store",type=str,help="lensing configuration file")
parser.add_argument("id",nargs="*")

#Parse command arguments and check that all provided options are available
cmd_args = parser.parse_args()

if (len(cmd_args.id)==0) or (cmd_args.config_file is None) or (cmd_args.environment is None):
	parser.print_help()
	sys.exit(0)

#Verbosity level
if cmd_args.verbose:
	logging.basicConfig(level=logging.DEBUG)
else:
	logging.basicConfig(level=logging.INFO)

#Environment
logpreamble.info("Reading environment from {0}".format(cmd_args.environment))
environment_settings = EnvironmentSettings.read(cmd_args.environment)

#Get a handle on the simulation batch
batch = SimulationBatch(environment_settings)

#Lensing
logpreamble.info("Reading lensing configuration from {0}".format(cmd_args.config_file))

#Check that the configuration file is valid
lens_settings = config.ConfigParser()
lens_settings.read([cmd_args.config_file])

if not(lens_settings.has_section("MapSettings")^lens_settings.has_section("TelescopicMapSettings")^lens_settings.has_section("CatalogSettings")):
	logpreamble.error("Lens configuration file {0} should have only one between the MapSettings, TelescopicMapSettings and CatalogSettings sections!".format(cmd_args.config_file))
	sys.exit(1)


#########################################################################################################################################################################

#Proceed to main execution
if lens_settings.has_section("MapSettings"):

	logpreamble.info("Starting the production of weak lensing simulated Maps")
	map_settings = MapSettings.read(cmd_args.config_file)

	#Cycle over ids to produce the planes
	for batch_id in cmd_args.id:
		lenstools.scripts.raytracing.singleRedshift(pool=None,batch=batch,settings=map_settings,batch_id=batch_id)

elif lens_settings.has_section("TelescopicMapSettings"):

	logpreamble.info("Starting the production of weak lensing simulated Maps (telescopic)")
	map_settings = TelescopicMapSettings.read(cmd_args.config_file)

	#Cycle over ids to produce the planes
	for batch_id in cmd_args.id:
		lenstools.scripts.raytracing.singleRedshift(pool=None,batch=batch,settings=map_settings,batch_id=batch_id)

elif lens_settings.has_section("CatalogSettings"):

	logpreamble.info("Starting the production of weak lensing simulated Catalogs")
	catalog_settings = CatalogSettings.read(cmd_args.config_file)

	#Cycle over ids to produce the planes
	for batch_id in cmd_args.id:
		lenstools.scripts.raytracing.simulatedCatalog(pool=None,batch=batch,settings=catalog_settings,batch_id=batch_id)