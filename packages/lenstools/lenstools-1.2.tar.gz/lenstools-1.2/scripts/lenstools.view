#!/usr/bin/env python
import sys,os,glob
import code
import argparse

sys.modules["mpi4py"] = None

#LensTools
from lenstools.image.convergence import Spin0
from lenstools.image.shear import Spin1
from lenstools.simulations.raytracing import Plane,PotentialPlane

#Matplotlib
import matplotlib.pyplot as plt

#Seaborn
try:
	import seaborn as sns
	sns.set(font_scale=2)
except ImportError:
	pass

#Read command line options
parser = argparse.ArgumentParser(prog=os.path.split(sys.argv[0])[-1])
parser.add_argument("filename",nargs="*")
parser.add_argument("-s","--spin",dest="spin",type=int,default=0,help="Spin of the lensing field to visualize, must be 0 (scalar) or 1 (vector/tensor)")
parser.add_argument("-p","--plane",dest="plane",action="store_true",default=False,help="Enable if the image you are loading is a lensing plane (these have extra info in the header)")
parser.add_argument("-pd","--planedensity",dest="planedensity",action="store_true",default=False,help="Enable if the image you are loading is a lensing potential plane, of which you wish to compute the density")
parser.add_argument("-f","--format",dest="img_format",type=str,default=None,help="Format of the image to save on disk; if None, no image is saved")
parser.add_argument("-i","--interactive",dest="interactive",action="store_true",default=False,help="Switch to interactive mode after plotting")
parser.add_argument("-cm","--colormap",dest="colormap",action="store",type=str,default="viridis",help="matplotlib color map name")
parser.add_argument("-S","--smooth",dest="smooth",action="store",type=int,default=None,help="smoothing scale in units of pixel")
parser.add_argument("-l","--label",dest="label",action="store",type=str,default=None,help="optional label to give to the image colorbar")

cmd_args = parser.parse_args()

#Check that we have at least one image to display
if not(len(cmd_args.filename)):
	cmd_args.filename = sys.stdin.read().split("\n")

#Expand globs
filenames = list()
for f in cmd_args.filename:
	filenames += glob.glob(f)

#Cycle over filenames
for filename in filenames:

	if cmd_args.img_format is not None:
		savename = ".".join([ p for p in os.path.split(filename)[-1].split(".")[:-1]])
		savename += ".{0}".format(cmd_args.img_format)
	else:
		savename = None 

	try:
	
		if cmd_args.plane:
			img = Plane.load(filename)
	
		elif cmd_args.planedensity:
			img  = PotentialPlane.load(filename)
			img = img.density()
	
		elif cmd_args.spin==0:
			img = Spin0.load(filename)
	
		else:
			img = Spin1.load(filename)

	except IOError:
		continue
	
	#Smooth
	if cmd_args.smooth is not None:
		img.smooth(cmd_args.smooth*img.resolution,kind="gaussianFFT",inplace=True)

	#Visualize
	img.visualize(colorbar=True,cmap=cmd_args.colormap,cbar_label=cmd_args.label)

	if cmd_args.interactive:
		
		plt.ion()
		plt.show()
		code.interact(banner="[{0}] (image instance stored in 'img')".format(filename),local=locals())

	if savename is not None:
		img.savefig(savename)

	#Close the figure
	plt.close(img.fig)

