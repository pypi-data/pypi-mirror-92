# coding: utf-8

"""
    AristaFlowREST/ProcessManager

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InstanceReference(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'log_id': 'str',
        'name': 'str',
        'loc_name': 'dict(str, str)',
        'modified': 'bool',
        'templ_ref': 'TemplateReference',
        'supervisor': 'QualifiedAgent',
        'initiator': 'QualifiedAgent',
        'creation_time': 'int',
        'parent_id': 'str',
        'exec_status': 'str',
        'user_attributes': 'dict(str, str)'
    }

    attribute_map = {
        'id': 'id',
        'log_id': 'logId',
        'name': 'name',
        'loc_name': 'locName',
        'modified': 'modified',
        'templ_ref': 'templRef',
        'supervisor': 'supervisor',
        'initiator': 'initiator',
        'creation_time': 'creationTime',
        'parent_id': 'parentId',
        'exec_status': 'execStatus',
        'user_attributes': 'userAttributes'
    }

    def __init__(self, id=None, log_id=None, name=None, loc_name=None, modified=None, templ_ref=None, supervisor=None, initiator=None, creation_time=None, parent_id=None, exec_status=None, user_attributes=None):  # noqa: E501
        """InstanceReference - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._log_id = None
        self._name = None
        self._loc_name = None
        self._modified = None
        self._templ_ref = None
        self._supervisor = None
        self._initiator = None
        self._creation_time = None
        self._parent_id = None
        self._exec_status = None
        self._user_attributes = None
        if not(hasattr(self, "discriminator")) or not(self.discriminator):
            self.discriminator = None
        self.id = id
        self.log_id = log_id
        self.name = name
        if loc_name is not None:
            self.loc_name = loc_name
        if modified is not None:
            self.modified = modified
        self.templ_ref = templ_ref
        self.supervisor = supervisor
        self.initiator = initiator
        self.creation_time = creation_time
        if parent_id is not None:
            self.parent_id = parent_id
        self.exec_status = exec_status
        if user_attributes is not None:
            self.user_attributes = user_attributes

    @property
    def id(self):
        """Gets the id of this InstanceReference.  # noqa: E501


        :return: The id of this InstanceReference.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InstanceReference.


        :param id: The id of this InstanceReference.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def log_id(self):
        """Gets the log_id of this InstanceReference.  # noqa: E501


        :return: The log_id of this InstanceReference.  # noqa: E501
        :rtype: str
        """
        return self._log_id

    @log_id.setter
    def log_id(self, log_id):
        """Sets the log_id of this InstanceReference.


        :param log_id: The log_id of this InstanceReference.  # noqa: E501
        :type: str
        """
        if log_id is None:
            raise ValueError("Invalid value for `log_id`, must not be `None`")  # noqa: E501

        self._log_id = log_id

    @property
    def name(self):
        """Gets the name of this InstanceReference.  # noqa: E501


        :return: The name of this InstanceReference.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InstanceReference.


        :param name: The name of this InstanceReference.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def loc_name(self):
        """Gets the loc_name of this InstanceReference.  # noqa: E501


        :return: The loc_name of this InstanceReference.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._loc_name

    @loc_name.setter
    def loc_name(self, loc_name):
        """Sets the loc_name of this InstanceReference.


        :param loc_name: The loc_name of this InstanceReference.  # noqa: E501
        :type: dict(str, str)
        """

        self._loc_name = loc_name

    @property
    def modified(self):
        """Gets the modified of this InstanceReference.  # noqa: E501


        :return: The modified of this InstanceReference.  # noqa: E501
        :rtype: bool
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this InstanceReference.


        :param modified: The modified of this InstanceReference.  # noqa: E501
        :type: bool
        """

        self._modified = modified

    @property
    def templ_ref(self):
        """Gets the templ_ref of this InstanceReference.  # noqa: E501


        :return: The templ_ref of this InstanceReference.  # noqa: E501
        :rtype: TemplateReference
        """
        return self._templ_ref

    @templ_ref.setter
    def templ_ref(self, templ_ref):
        """Sets the templ_ref of this InstanceReference.


        :param templ_ref: The templ_ref of this InstanceReference.  # noqa: E501
        :type: TemplateReference
        """
        if templ_ref is None:
            raise ValueError("Invalid value for `templ_ref`, must not be `None`")  # noqa: E501

        self._templ_ref = templ_ref

    @property
    def supervisor(self):
        """Gets the supervisor of this InstanceReference.  # noqa: E501


        :return: The supervisor of this InstanceReference.  # noqa: E501
        :rtype: QualifiedAgent
        """
        return self._supervisor

    @supervisor.setter
    def supervisor(self, supervisor):
        """Sets the supervisor of this InstanceReference.


        :param supervisor: The supervisor of this InstanceReference.  # noqa: E501
        :type: QualifiedAgent
        """
        if supervisor is None:
            raise ValueError("Invalid value for `supervisor`, must not be `None`")  # noqa: E501

        self._supervisor = supervisor

    @property
    def initiator(self):
        """Gets the initiator of this InstanceReference.  # noqa: E501


        :return: The initiator of this InstanceReference.  # noqa: E501
        :rtype: QualifiedAgent
        """
        return self._initiator

    @initiator.setter
    def initiator(self, initiator):
        """Sets the initiator of this InstanceReference.


        :param initiator: The initiator of this InstanceReference.  # noqa: E501
        :type: QualifiedAgent
        """
        if initiator is None:
            raise ValueError("Invalid value for `initiator`, must not be `None`")  # noqa: E501

        self._initiator = initiator

    @property
    def creation_time(self):
        """Gets the creation_time of this InstanceReference.  # noqa: E501


        :return: The creation_time of this InstanceReference.  # noqa: E501
        :rtype: int
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this InstanceReference.


        :param creation_time: The creation_time of this InstanceReference.  # noqa: E501
        :type: int
        """
        if creation_time is None:
            raise ValueError("Invalid value for `creation_time`, must not be `None`")  # noqa: E501

        self._creation_time = creation_time

    @property
    def parent_id(self):
        """Gets the parent_id of this InstanceReference.  # noqa: E501


        :return: The parent_id of this InstanceReference.  # noqa: E501
        :rtype: str
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this InstanceReference.


        :param parent_id: The parent_id of this InstanceReference.  # noqa: E501
        :type: str
        """

        self._parent_id = parent_id

    @property
    def exec_status(self):
        """Gets the exec_status of this InstanceReference.  # noqa: E501


        :return: The exec_status of this InstanceReference.  # noqa: E501
        :rtype: str
        """
        return self._exec_status

    @exec_status.setter
    def exec_status(self, exec_status):
        """Sets the exec_status of this InstanceReference.


        :param exec_status: The exec_status of this InstanceReference.  # noqa: E501
        :type: str
        """
        if exec_status is None:
            raise ValueError("Invalid value for `exec_status`, must not be `None`")  # noqa: E501
        allowed_values = ["IE_RUNNING", "IE_SUSPENDED", "IE_SOFTLY_SUSPENDED", "IE_ABORTED", "IE_SOFTLY_ABORTED", "IE_FINISHED"]  # noqa: E501
        if exec_status not in allowed_values:
            raise ValueError(
                "Invalid value for `exec_status` ({0}), must be one of {1}"  # noqa: E501
                .format(exec_status, allowed_values)
            )

        self._exec_status = exec_status

    @property
    def user_attributes(self):
        """Gets the user_attributes of this InstanceReference.  # noqa: E501


        :return: The user_attributes of this InstanceReference.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._user_attributes

    @user_attributes.setter
    def user_attributes(self, user_attributes):
        """Sets the user_attributes of this InstanceReference.


        :param user_attributes: The user_attributes of this InstanceReference.  # noqa: E501
        :type: dict(str, str)
        """

        self._user_attributes = user_attributes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InstanceReference, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InstanceReference):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
