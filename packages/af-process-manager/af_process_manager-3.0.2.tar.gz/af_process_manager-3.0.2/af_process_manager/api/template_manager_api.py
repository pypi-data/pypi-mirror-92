# coding: utf-8

"""
    AristaFlowREST/ProcessManager

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from af_process_manager.api_client import ApiClient


class TemplateManagerApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_all_template_ids(self, **kwargs):  # noqa: E501
        """get_all_template_ids  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_template_ids(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] body:
        :param int count:
        :param int alive_time:
        :return: TemplIdInitialRemoteIteratorData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_template_ids_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_all_template_ids_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_all_template_ids_with_http_info(self, **kwargs):  # noqa: E501
        """get_all_template_ids  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_template_ids_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] body:
        :param int count:
        :param int alive_time:
        :return: TemplIdInitialRemoteIteratorData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'count', 'alive_time']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_template_ids" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501
        if 'alive_time' in params:
            query_params.append(('aliveTime', params['alive_time']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/TemplateManagerRest/TemplateIdIterator/template-id', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TemplIdInitialRemoteIteratorData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_and_lock_template_status(self, templ_id, **kwargs):  # noqa: E501
        """get_and_lock_template_status  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_and_lock_template_status(templ_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str templ_id: (required)
        :return: TemplateStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_and_lock_template_status_with_http_info(templ_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_and_lock_template_status_with_http_info(templ_id, **kwargs)  # noqa: E501
            return data

    def get_and_lock_template_status_with_http_info(self, templ_id, **kwargs):  # noqa: E501
        """get_and_lock_template_status  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_and_lock_template_status_with_http_info(templ_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str templ_id: (required)
        :return: TemplateStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['templ_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_and_lock_template_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'templ_id' is set
        if ('templ_id' not in params or
                params['templ_id'] is None):
            raise ValueError("Missing the required parameter `templ_id` when calling `get_and_lock_template_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'templ_id' in params:
            path_params['templId'] = params['templ_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/TemplateManagerRest/template-status/{templId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TemplateStatus',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_template_kinds(self, body, **kwargs):  # noqa: E501
        """get_template_kinds  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_template_kinds(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] body: (required)
        :param int count:
        :param int alive_time:
        :return: TemplKindInitialRemoteIteratorData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_template_kinds_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.get_template_kinds_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def get_template_kinds_with_http_info(self, body, **kwargs):  # noqa: E501
        """get_template_kinds  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_template_kinds_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] body: (required)
        :param int count:
        :param int alive_time:
        :return: TemplKindInitialRemoteIteratorData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'count', 'alive_time']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_template_kinds" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `get_template_kinds`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501
        if 'alive_time' in params:
            query_params.append(('aliveTime', params['alive_time']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/TemplateManagerRest/TemplateKindIterator/template-kind', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TemplKindInitialRemoteIteratorData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_template_refs(self, **kwargs):  # noqa: E501
        """get_template_refs  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_template_refs(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] body:
        :param int count:
        :param int alive_time:
        :return: TemplRefInitialRemoteIteratorData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_template_refs_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_template_refs_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_template_refs_with_http_info(self, **kwargs):  # noqa: E501
        """get_template_refs  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_template_refs_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] body:
        :param int count:
        :param int alive_time:
        :return: TemplRefInitialRemoteIteratorData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'count', 'alive_time']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_template_refs" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501
        if 'alive_time' in params:
            query_params.append(('aliveTime', params['alive_time']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/TemplateManagerRest/TemplateRefIterator/template-reference', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TemplRefInitialRemoteIteratorData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_template_statuses(self, body, **kwargs):  # noqa: E501
        """get_template_statuses  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_template_statuses(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] body: (required)
        :param int count:
        :param int alive_time:
        :return: TemplStatusInitialRemoteIteratorData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_template_statuses_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.get_template_statuses_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def get_template_statuses_with_http_info(self, body, **kwargs):  # noqa: E501
        """get_template_statuses  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_template_statuses_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] body: (required)
        :param int count:
        :param int alive_time:
        :return: TemplStatusInitialRemoteIteratorData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'count', 'alive_time']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_template_statuses" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `get_template_statuses`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501
        if 'alive_time' in params:
            query_params.append(('aliveTime', params['alive_time']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/TemplateManagerRest/TemplateStatusIterator/template-status', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TemplStatusInitialRemoteIteratorData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_templates(self, body, **kwargs):  # noqa: E501
        """get_templates  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_templates(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] body: (required)
        :param int count:
        :param int alive_time:
        :return: TemplInitialRemoteIteratorData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_templates_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.get_templates_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def get_templates_with_http_info(self, body, **kwargs):  # noqa: E501
        """get_templates  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_templates_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] body: (required)
        :param int count:
        :param int alive_time:
        :return: TemplInitialRemoteIteratorData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'count', 'alive_time']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_templates" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `get_templates`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501
        if 'alive_time' in params:
            query_params.append(('aliveTime', params['alive_time']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/TemplateManagerRest/TemplateIterator/template', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TemplInitialRemoteIteratorData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_template_status(self, body, **kwargs):  # noqa: E501
        """set_template_status  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_template_status(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TemplateStatus body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.set_template_status_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.set_template_status_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def set_template_status_with_http_info(self, body, **kwargs):  # noqa: E501
        """set_template_status  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_template_status_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TemplateStatus body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_template_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `set_template_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/TemplateManagerRest/template-status', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def unlock_template_status(self, templ_id, **kwargs):  # noqa: E501
        """unlock_template_status  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unlock_template_status(templ_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str templ_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.unlock_template_status_with_http_info(templ_id, **kwargs)  # noqa: E501
        else:
            (data) = self.unlock_template_status_with_http_info(templ_id, **kwargs)  # noqa: E501
            return data

    def unlock_template_status_with_http_info(self, templ_id, **kwargs):  # noqa: E501
        """unlock_template_status  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unlock_template_status_with_http_info(templ_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str templ_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['templ_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method unlock_template_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'templ_id' is set
        if ('templ_id' not in params or
                params['templ_id'] is None):
            raise ValueError("Missing the required parameter `templ_id` when calling `unlock_template_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'templ_id' in params:
            path_params['templId'] = params['templ_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/TemplateManagerRest/template-status/{templId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
