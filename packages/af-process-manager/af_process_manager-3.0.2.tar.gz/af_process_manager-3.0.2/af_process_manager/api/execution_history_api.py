# coding: utf-8

"""
    AristaFlowREST/ProcessManager

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from af_process_manager.api_client import ApiClient


class ExecutionHistoryApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def count_instance_history_entries(self, inst_log_id, **kwargs):  # noqa: E501
        """count_instance_history_entries  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.count_instance_history_entries(inst_log_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str inst_log_id: (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.count_instance_history_entries_with_http_info(inst_log_id, **kwargs)  # noqa: E501
        else:
            (data) = self.count_instance_history_entries_with_http_info(inst_log_id, **kwargs)  # noqa: E501
            return data

    def count_instance_history_entries_with_http_info(self, inst_log_id, **kwargs):  # noqa: E501
        """count_instance_history_entries  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.count_instance_history_entries_with_http_info(inst_log_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str inst_log_id: (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['inst_log_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method count_instance_history_entries" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'inst_log_id' is set
        if ('inst_log_id' not in params or
                params['inst_log_id'] is None):
            raise ValueError("Missing the required parameter `inst_log_id` when calling `count_instance_history_entries`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'inst_log_id' in params:
            path_params['instLogId'] = params['inst_log_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ExecutionLogManagerRest/instance-history-entries/{instLogId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_completed_steps_entries(self, body, **kwargs):  # noqa: E501
        """read_completed_steps_entries  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_completed_steps_entries(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AgentLocales body: (required)
        :param int start_entry_id:
        :param bool newer_entries:
        :param int max_entries:
        :param bool sort_ascending:
        :param int count:
        :param int alive_time:
        :return: WorkHistEntryInitialRemoteIteratorData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_completed_steps_entries_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.read_completed_steps_entries_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def read_completed_steps_entries_with_http_info(self, body, **kwargs):  # noqa: E501
        """read_completed_steps_entries  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_completed_steps_entries_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AgentLocales body: (required)
        :param int start_entry_id:
        :param bool newer_entries:
        :param int max_entries:
        :param bool sort_ascending:
        :param int count:
        :param int alive_time:
        :return: WorkHistEntryInitialRemoteIteratorData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'start_entry_id', 'newer_entries', 'max_entries', 'sort_ascending', 'count', 'alive_time']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_completed_steps_entries" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `read_completed_steps_entries`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_entry_id' in params:
            query_params.append(('startEntryId', params['start_entry_id']))  # noqa: E501
        if 'newer_entries' in params:
            query_params.append(('newerEntries', params['newer_entries']))  # noqa: E501
        if 'max_entries' in params:
            query_params.append(('maxEntries', params['max_entries']))  # noqa: E501
        if 'sort_ascending' in params:
            query_params.append(('sortAscending', params['sort_ascending']))  # noqa: E501
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501
        if 'alive_time' in params:
            query_params.append(('aliveTime', params['alive_time']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ExecutionLogManagerRest/WorkHistoryEntryIterator/completed-steps-entries', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WorkHistEntryInitialRemoteIteratorData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_completed_steps_time(self, body, **kwargs):  # noqa: E501
        """read_completed_steps_time  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_completed_steps_time(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AgentWithTime body: (required)
        :param int max_entries:
        :param bool sort_ascending:
        :param int count:
        :param int alive_time:
        :return: WorkHistEntryInitialRemoteIteratorData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_completed_steps_time_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.read_completed_steps_time_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def read_completed_steps_time_with_http_info(self, body, **kwargs):  # noqa: E501
        """read_completed_steps_time  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_completed_steps_time_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AgentWithTime body: (required)
        :param int max_entries:
        :param bool sort_ascending:
        :param int count:
        :param int alive_time:
        :return: WorkHistEntryInitialRemoteIteratorData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'max_entries', 'sort_ascending', 'count', 'alive_time']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_completed_steps_time" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `read_completed_steps_time`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'max_entries' in params:
            query_params.append(('maxEntries', params['max_entries']))  # noqa: E501
        if 'sort_ascending' in params:
            query_params.append(('sortAscending', params['sort_ascending']))  # noqa: E501
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501
        if 'alive_time' in params:
            query_params.append(('aliveTime', params['alive_time']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ExecutionLogManagerRest/WorkHistoryEntryIterator/completed-steps-time', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WorkHistEntryInitialRemoteIteratorData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_history(self, body, **kwargs):  # noqa: E501
        """read_history  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_history(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DisjointFilterWithLocales body: (required)
        :param int start_entry_id:
        :param bool newer_entries:
        :param int max_entries:
        :param bool sort_ascending:
        :param int count:
        :param int alive_time:
        :return: ExecHistEntryInitialRemoteIteratorData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_history_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.read_history_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def read_history_with_http_info(self, body, **kwargs):  # noqa: E501
        """read_history  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_history_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DisjointFilterWithLocales body: (required)
        :param int start_entry_id:
        :param bool newer_entries:
        :param int max_entries:
        :param bool sort_ascending:
        :param int count:
        :param int alive_time:
        :return: ExecHistEntryInitialRemoteIteratorData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'start_entry_id', 'newer_entries', 'max_entries', 'sort_ascending', 'count', 'alive_time']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_history" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `read_history`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_entry_id' in params:
            query_params.append(('startEntryId', params['start_entry_id']))  # noqa: E501
        if 'newer_entries' in params:
            query_params.append(('newerEntries', params['newer_entries']))  # noqa: E501
        if 'max_entries' in params:
            query_params.append(('maxEntries', params['max_entries']))  # noqa: E501
        if 'sort_ascending' in params:
            query_params.append(('sortAscending', params['sort_ascending']))  # noqa: E501
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501
        if 'alive_time' in params:
            query_params.append(('aliveTime', params['alive_time']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ExecutionLogManagerRest/ExecutionHistoryEntryIterator/filtered-history', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ExecHistEntryInitialRemoteIteratorData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_instance_error_information(self, inst_log_id, **kwargs):  # noqa: E501
        """read_instance_error_information  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_instance_error_information(inst_log_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str inst_log_id: (required)
        :return: ErrorData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_instance_error_information_with_http_info(inst_log_id, **kwargs)  # noqa: E501
        else:
            (data) = self.read_instance_error_information_with_http_info(inst_log_id, **kwargs)  # noqa: E501
            return data

    def read_instance_error_information_with_http_info(self, inst_log_id, **kwargs):  # noqa: E501
        """read_instance_error_information  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_instance_error_information_with_http_info(inst_log_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str inst_log_id: (required)
        :return: ErrorData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['inst_log_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_instance_error_information" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'inst_log_id' is set
        if ('inst_log_id' not in params or
                params['inst_log_id'] is None):
            raise ValueError("Missing the required parameter `inst_log_id` when calling `read_instance_error_information`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'inst_log_id' in params:
            path_params['instLogId'] = params['inst_log_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ExecutionLogManagerRest/instance-error-information/{instLogId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_instance_history(self, inst_log_id, **kwargs):  # noqa: E501
        """read_instance_history  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_instance_history(inst_log_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str inst_log_id: (required)
        :param list[str] body:
        :param int start_entry_id:
        :param bool newer_entries:
        :param int max_entries:
        :param bool sort_ascending:
        :param int count:
        :param int alive_time:
        :return: ExecHistEntryInitialRemoteIteratorData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_instance_history_with_http_info(inst_log_id, **kwargs)  # noqa: E501
        else:
            (data) = self.read_instance_history_with_http_info(inst_log_id, **kwargs)  # noqa: E501
            return data

    def read_instance_history_with_http_info(self, inst_log_id, **kwargs):  # noqa: E501
        """read_instance_history  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_instance_history_with_http_info(inst_log_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str inst_log_id: (required)
        :param list[str] body:
        :param int start_entry_id:
        :param bool newer_entries:
        :param int max_entries:
        :param bool sort_ascending:
        :param int count:
        :param int alive_time:
        :return: ExecHistEntryInitialRemoteIteratorData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['inst_log_id', 'body', 'start_entry_id', 'newer_entries', 'max_entries', 'sort_ascending', 'count', 'alive_time']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_instance_history" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'inst_log_id' is set
        if ('inst_log_id' not in params or
                params['inst_log_id'] is None):
            raise ValueError("Missing the required parameter `inst_log_id` when calling `read_instance_history`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'inst_log_id' in params:
            path_params['instLogId'] = params['inst_log_id']  # noqa: E501

        query_params = []
        if 'start_entry_id' in params:
            query_params.append(('startEntryId', params['start_entry_id']))  # noqa: E501
        if 'newer_entries' in params:
            query_params.append(('newerEntries', params['newer_entries']))  # noqa: E501
        if 'max_entries' in params:
            query_params.append(('maxEntries', params['max_entries']))  # noqa: E501
        if 'sort_ascending' in params:
            query_params.append(('sortAscending', params['sort_ascending']))  # noqa: E501
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501
        if 'alive_time' in params:
            query_params.append(('aliveTime', params['alive_time']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ExecutionLogManagerRest/ExecutionHistoryEntryIterator/instance-history/{instLogId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ExecHistEntryInitialRemoteIteratorData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_node_error_information(self, inst_log_id, node_id, node_iteration, **kwargs):  # noqa: E501
        """read_node_error_information  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_node_error_information(inst_log_id, node_id, node_iteration, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str inst_log_id: (required)
        :param int node_id: (required)
        :param int node_iteration: (required)
        :param int count:
        :param int alive_time:
        :return: ErrorDataInitialRemoteIteratorData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_node_error_information_with_http_info(inst_log_id, node_id, node_iteration, **kwargs)  # noqa: E501
        else:
            (data) = self.read_node_error_information_with_http_info(inst_log_id, node_id, node_iteration, **kwargs)  # noqa: E501
            return data

    def read_node_error_information_with_http_info(self, inst_log_id, node_id, node_iteration, **kwargs):  # noqa: E501
        """read_node_error_information  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_node_error_information_with_http_info(inst_log_id, node_id, node_iteration, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str inst_log_id: (required)
        :param int node_id: (required)
        :param int node_iteration: (required)
        :param int count:
        :param int alive_time:
        :return: ErrorDataInitialRemoteIteratorData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['inst_log_id', 'node_id', 'node_iteration', 'count', 'alive_time']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_node_error_information" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'inst_log_id' is set
        if ('inst_log_id' not in params or
                params['inst_log_id'] is None):
            raise ValueError("Missing the required parameter `inst_log_id` when calling `read_node_error_information`")  # noqa: E501
        # verify the required parameter 'node_id' is set
        if ('node_id' not in params or
                params['node_id'] is None):
            raise ValueError("Missing the required parameter `node_id` when calling `read_node_error_information`")  # noqa: E501
        # verify the required parameter 'node_iteration' is set
        if ('node_iteration' not in params or
                params['node_iteration'] is None):
            raise ValueError("Missing the required parameter `node_iteration` when calling `read_node_error_information`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'inst_log_id' in params:
            path_params['instLogId'] = params['inst_log_id']  # noqa: E501

        query_params = []
        if 'node_id' in params:
            query_params.append(('nodeId', params['node_id']))  # noqa: E501
        if 'node_iteration' in params:
            query_params.append(('nodeIteration', params['node_iteration']))  # noqa: E501
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501
        if 'alive_time' in params:
            query_params.append(('aliveTime', params['alive_time']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ExecutionLogManagerRest/ErrorDataIterator/node-errors/{instLogId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorDataInitialRemoteIteratorData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_previous_steps(self, inst_log_id, node_id, node_iteration, **kwargs):  # noqa: E501
        """read_previous_steps  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_previous_steps(inst_log_id, node_id, node_iteration, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str inst_log_id: (required)
        :param int node_id: (required)
        :param int node_iteration: (required)
        :param int count:
        :param int alive_time:
        :return: ExecHistEntryInitialRemoteIteratorData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_previous_steps_with_http_info(inst_log_id, node_id, node_iteration, **kwargs)  # noqa: E501
        else:
            (data) = self.read_previous_steps_with_http_info(inst_log_id, node_id, node_iteration, **kwargs)  # noqa: E501
            return data

    def read_previous_steps_with_http_info(self, inst_log_id, node_id, node_iteration, **kwargs):  # noqa: E501
        """read_previous_steps  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_previous_steps_with_http_info(inst_log_id, node_id, node_iteration, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str inst_log_id: (required)
        :param int node_id: (required)
        :param int node_iteration: (required)
        :param int count:
        :param int alive_time:
        :return: ExecHistEntryInitialRemoteIteratorData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['inst_log_id', 'node_id', 'node_iteration', 'count', 'alive_time']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_previous_steps" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'inst_log_id' is set
        if ('inst_log_id' not in params or
                params['inst_log_id'] is None):
            raise ValueError("Missing the required parameter `inst_log_id` when calling `read_previous_steps`")  # noqa: E501
        # verify the required parameter 'node_id' is set
        if ('node_id' not in params or
                params['node_id'] is None):
            raise ValueError("Missing the required parameter `node_id` when calling `read_previous_steps`")  # noqa: E501
        # verify the required parameter 'node_iteration' is set
        if ('node_iteration' not in params or
                params['node_iteration'] is None):
            raise ValueError("Missing the required parameter `node_iteration` when calling `read_previous_steps`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'inst_log_id' in params:
            path_params['instLogId'] = params['inst_log_id']  # noqa: E501

        query_params = []
        if 'node_id' in params:
            query_params.append(('nodeId', params['node_id']))  # noqa: E501
        if 'node_iteration' in params:
            query_params.append(('nodeIteration', params['node_iteration']))  # noqa: E501
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501
        if 'alive_time' in params:
            query_params.append(('aliveTime', params['alive_time']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ExecutionLogManagerRest/ExecutionHistoryEntryIterator/previous-steps/{instLogId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ExecHistEntryInitialRemoteIteratorData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
