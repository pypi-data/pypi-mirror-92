# coding: utf-8

"""
    AristaFlowREST/ProcessManager

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ExecLogFilter(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'timestamp_filter': 'list[LongComparison]',
        'inst_log_id_filter': 'list[UUIDComparison]',
        'node_id_filter': 'list[IntegerComparison]',
        'node_iteration_filter': 'list[IntegerComparison]',
        'state_change_filter': 'StateChangeComparison',
        'agent_id_filter': 'list[LongComparison]',
        'org_pos_id_filter': 'list[LongComparison]',
        'client_delay_filter': 'list[LongComparison]',
        'arbitrary_string_filter': 'list[StringComparison]',
        'node_name_filter': 'list[StringComparison]',
        'instance_name_filter': 'list[StringComparison]',
        'template_name_filter': 'list[StringComparison]',
        'supports_view_only_filter': 'BooleanComparison',
        'error_message_filter': 'list[StringComparison]',
        'error_state_filter': 'list[StringComparison]',
        'error_code_filter': 'list[LongComparison]'
    }

    attribute_map = {
        'timestamp_filter': 'timestampFilter',
        'inst_log_id_filter': 'instLogIdFilter',
        'node_id_filter': 'nodeIdFilter',
        'node_iteration_filter': 'nodeIterationFilter',
        'state_change_filter': 'stateChangeFilter',
        'agent_id_filter': 'agentIdFilter',
        'org_pos_id_filter': 'orgPosIdFilter',
        'client_delay_filter': 'clientDelayFilter',
        'arbitrary_string_filter': 'arbitraryStringFilter',
        'node_name_filter': 'nodeNameFilter',
        'instance_name_filter': 'instanceNameFilter',
        'template_name_filter': 'templateNameFilter',
        'supports_view_only_filter': 'supportsViewOnlyFilter',
        'error_message_filter': 'errorMessageFilter',
        'error_state_filter': 'errorStateFilter',
        'error_code_filter': 'errorCodeFilter'
    }

    def __init__(self, timestamp_filter=None, inst_log_id_filter=None, node_id_filter=None, node_iteration_filter=None, state_change_filter=None, agent_id_filter=None, org_pos_id_filter=None, client_delay_filter=None, arbitrary_string_filter=None, node_name_filter=None, instance_name_filter=None, template_name_filter=None, supports_view_only_filter=None, error_message_filter=None, error_state_filter=None, error_code_filter=None):  # noqa: E501
        """ExecLogFilter - a model defined in Swagger"""  # noqa: E501
        self._timestamp_filter = None
        self._inst_log_id_filter = None
        self._node_id_filter = None
        self._node_iteration_filter = None
        self._state_change_filter = None
        self._agent_id_filter = None
        self._org_pos_id_filter = None
        self._client_delay_filter = None
        self._arbitrary_string_filter = None
        self._node_name_filter = None
        self._instance_name_filter = None
        self._template_name_filter = None
        self._supports_view_only_filter = None
        self._error_message_filter = None
        self._error_state_filter = None
        self._error_code_filter = None
        if not(hasattr(self, "discriminator")) or not(self.discriminator):
            self.discriminator = None
        if timestamp_filter is not None:
            self.timestamp_filter = timestamp_filter
        if inst_log_id_filter is not None:
            self.inst_log_id_filter = inst_log_id_filter
        if node_id_filter is not None:
            self.node_id_filter = node_id_filter
        if node_iteration_filter is not None:
            self.node_iteration_filter = node_iteration_filter
        if state_change_filter is not None:
            self.state_change_filter = state_change_filter
        if agent_id_filter is not None:
            self.agent_id_filter = agent_id_filter
        if org_pos_id_filter is not None:
            self.org_pos_id_filter = org_pos_id_filter
        if client_delay_filter is not None:
            self.client_delay_filter = client_delay_filter
        if arbitrary_string_filter is not None:
            self.arbitrary_string_filter = arbitrary_string_filter
        if node_name_filter is not None:
            self.node_name_filter = node_name_filter
        if instance_name_filter is not None:
            self.instance_name_filter = instance_name_filter
        if template_name_filter is not None:
            self.template_name_filter = template_name_filter
        if supports_view_only_filter is not None:
            self.supports_view_only_filter = supports_view_only_filter
        if error_message_filter is not None:
            self.error_message_filter = error_message_filter
        if error_state_filter is not None:
            self.error_state_filter = error_state_filter
        if error_code_filter is not None:
            self.error_code_filter = error_code_filter

    @property
    def timestamp_filter(self):
        """Gets the timestamp_filter of this ExecLogFilter.  # noqa: E501


        :return: The timestamp_filter of this ExecLogFilter.  # noqa: E501
        :rtype: list[LongComparison]
        """
        return self._timestamp_filter

    @timestamp_filter.setter
    def timestamp_filter(self, timestamp_filter):
        """Sets the timestamp_filter of this ExecLogFilter.


        :param timestamp_filter: The timestamp_filter of this ExecLogFilter.  # noqa: E501
        :type: list[LongComparison]
        """

        self._timestamp_filter = timestamp_filter

    @property
    def inst_log_id_filter(self):
        """Gets the inst_log_id_filter of this ExecLogFilter.  # noqa: E501


        :return: The inst_log_id_filter of this ExecLogFilter.  # noqa: E501
        :rtype: list[UUIDComparison]
        """
        return self._inst_log_id_filter

    @inst_log_id_filter.setter
    def inst_log_id_filter(self, inst_log_id_filter):
        """Sets the inst_log_id_filter of this ExecLogFilter.


        :param inst_log_id_filter: The inst_log_id_filter of this ExecLogFilter.  # noqa: E501
        :type: list[UUIDComparison]
        """

        self._inst_log_id_filter = inst_log_id_filter

    @property
    def node_id_filter(self):
        """Gets the node_id_filter of this ExecLogFilter.  # noqa: E501


        :return: The node_id_filter of this ExecLogFilter.  # noqa: E501
        :rtype: list[IntegerComparison]
        """
        return self._node_id_filter

    @node_id_filter.setter
    def node_id_filter(self, node_id_filter):
        """Sets the node_id_filter of this ExecLogFilter.


        :param node_id_filter: The node_id_filter of this ExecLogFilter.  # noqa: E501
        :type: list[IntegerComparison]
        """

        self._node_id_filter = node_id_filter

    @property
    def node_iteration_filter(self):
        """Gets the node_iteration_filter of this ExecLogFilter.  # noqa: E501


        :return: The node_iteration_filter of this ExecLogFilter.  # noqa: E501
        :rtype: list[IntegerComparison]
        """
        return self._node_iteration_filter

    @node_iteration_filter.setter
    def node_iteration_filter(self, node_iteration_filter):
        """Sets the node_iteration_filter of this ExecLogFilter.


        :param node_iteration_filter: The node_iteration_filter of this ExecLogFilter.  # noqa: E501
        :type: list[IntegerComparison]
        """

        self._node_iteration_filter = node_iteration_filter

    @property
    def state_change_filter(self):
        """Gets the state_change_filter of this ExecLogFilter.  # noqa: E501


        :return: The state_change_filter of this ExecLogFilter.  # noqa: E501
        :rtype: StateChangeComparison
        """
        return self._state_change_filter

    @state_change_filter.setter
    def state_change_filter(self, state_change_filter):
        """Sets the state_change_filter of this ExecLogFilter.


        :param state_change_filter: The state_change_filter of this ExecLogFilter.  # noqa: E501
        :type: StateChangeComparison
        """

        self._state_change_filter = state_change_filter

    @property
    def agent_id_filter(self):
        """Gets the agent_id_filter of this ExecLogFilter.  # noqa: E501


        :return: The agent_id_filter of this ExecLogFilter.  # noqa: E501
        :rtype: list[LongComparison]
        """
        return self._agent_id_filter

    @agent_id_filter.setter
    def agent_id_filter(self, agent_id_filter):
        """Sets the agent_id_filter of this ExecLogFilter.


        :param agent_id_filter: The agent_id_filter of this ExecLogFilter.  # noqa: E501
        :type: list[LongComparison]
        """

        self._agent_id_filter = agent_id_filter

    @property
    def org_pos_id_filter(self):
        """Gets the org_pos_id_filter of this ExecLogFilter.  # noqa: E501


        :return: The org_pos_id_filter of this ExecLogFilter.  # noqa: E501
        :rtype: list[LongComparison]
        """
        return self._org_pos_id_filter

    @org_pos_id_filter.setter
    def org_pos_id_filter(self, org_pos_id_filter):
        """Sets the org_pos_id_filter of this ExecLogFilter.


        :param org_pos_id_filter: The org_pos_id_filter of this ExecLogFilter.  # noqa: E501
        :type: list[LongComparison]
        """

        self._org_pos_id_filter = org_pos_id_filter

    @property
    def client_delay_filter(self):
        """Gets the client_delay_filter of this ExecLogFilter.  # noqa: E501


        :return: The client_delay_filter of this ExecLogFilter.  # noqa: E501
        :rtype: list[LongComparison]
        """
        return self._client_delay_filter

    @client_delay_filter.setter
    def client_delay_filter(self, client_delay_filter):
        """Sets the client_delay_filter of this ExecLogFilter.


        :param client_delay_filter: The client_delay_filter of this ExecLogFilter.  # noqa: E501
        :type: list[LongComparison]
        """

        self._client_delay_filter = client_delay_filter

    @property
    def arbitrary_string_filter(self):
        """Gets the arbitrary_string_filter of this ExecLogFilter.  # noqa: E501


        :return: The arbitrary_string_filter of this ExecLogFilter.  # noqa: E501
        :rtype: list[StringComparison]
        """
        return self._arbitrary_string_filter

    @arbitrary_string_filter.setter
    def arbitrary_string_filter(self, arbitrary_string_filter):
        """Sets the arbitrary_string_filter of this ExecLogFilter.


        :param arbitrary_string_filter: The arbitrary_string_filter of this ExecLogFilter.  # noqa: E501
        :type: list[StringComparison]
        """

        self._arbitrary_string_filter = arbitrary_string_filter

    @property
    def node_name_filter(self):
        """Gets the node_name_filter of this ExecLogFilter.  # noqa: E501


        :return: The node_name_filter of this ExecLogFilter.  # noqa: E501
        :rtype: list[StringComparison]
        """
        return self._node_name_filter

    @node_name_filter.setter
    def node_name_filter(self, node_name_filter):
        """Sets the node_name_filter of this ExecLogFilter.


        :param node_name_filter: The node_name_filter of this ExecLogFilter.  # noqa: E501
        :type: list[StringComparison]
        """

        self._node_name_filter = node_name_filter

    @property
    def instance_name_filter(self):
        """Gets the instance_name_filter of this ExecLogFilter.  # noqa: E501


        :return: The instance_name_filter of this ExecLogFilter.  # noqa: E501
        :rtype: list[StringComparison]
        """
        return self._instance_name_filter

    @instance_name_filter.setter
    def instance_name_filter(self, instance_name_filter):
        """Sets the instance_name_filter of this ExecLogFilter.


        :param instance_name_filter: The instance_name_filter of this ExecLogFilter.  # noqa: E501
        :type: list[StringComparison]
        """

        self._instance_name_filter = instance_name_filter

    @property
    def template_name_filter(self):
        """Gets the template_name_filter of this ExecLogFilter.  # noqa: E501


        :return: The template_name_filter of this ExecLogFilter.  # noqa: E501
        :rtype: list[StringComparison]
        """
        return self._template_name_filter

    @template_name_filter.setter
    def template_name_filter(self, template_name_filter):
        """Sets the template_name_filter of this ExecLogFilter.


        :param template_name_filter: The template_name_filter of this ExecLogFilter.  # noqa: E501
        :type: list[StringComparison]
        """

        self._template_name_filter = template_name_filter

    @property
    def supports_view_only_filter(self):
        """Gets the supports_view_only_filter of this ExecLogFilter.  # noqa: E501


        :return: The supports_view_only_filter of this ExecLogFilter.  # noqa: E501
        :rtype: BooleanComparison
        """
        return self._supports_view_only_filter

    @supports_view_only_filter.setter
    def supports_view_only_filter(self, supports_view_only_filter):
        """Sets the supports_view_only_filter of this ExecLogFilter.


        :param supports_view_only_filter: The supports_view_only_filter of this ExecLogFilter.  # noqa: E501
        :type: BooleanComparison
        """

        self._supports_view_only_filter = supports_view_only_filter

    @property
    def error_message_filter(self):
        """Gets the error_message_filter of this ExecLogFilter.  # noqa: E501


        :return: The error_message_filter of this ExecLogFilter.  # noqa: E501
        :rtype: list[StringComparison]
        """
        return self._error_message_filter

    @error_message_filter.setter
    def error_message_filter(self, error_message_filter):
        """Sets the error_message_filter of this ExecLogFilter.


        :param error_message_filter: The error_message_filter of this ExecLogFilter.  # noqa: E501
        :type: list[StringComparison]
        """

        self._error_message_filter = error_message_filter

    @property
    def error_state_filter(self):
        """Gets the error_state_filter of this ExecLogFilter.  # noqa: E501


        :return: The error_state_filter of this ExecLogFilter.  # noqa: E501
        :rtype: list[StringComparison]
        """
        return self._error_state_filter

    @error_state_filter.setter
    def error_state_filter(self, error_state_filter):
        """Sets the error_state_filter of this ExecLogFilter.


        :param error_state_filter: The error_state_filter of this ExecLogFilter.  # noqa: E501
        :type: list[StringComparison]
        """

        self._error_state_filter = error_state_filter

    @property
    def error_code_filter(self):
        """Gets the error_code_filter of this ExecLogFilter.  # noqa: E501


        :return: The error_code_filter of this ExecLogFilter.  # noqa: E501
        :rtype: list[LongComparison]
        """
        return self._error_code_filter

    @error_code_filter.setter
    def error_code_filter(self, error_code_filter):
        """Sets the error_code_filter of this ExecLogFilter.


        :param error_code_filter: The error_code_filter of this ExecLogFilter.  # noqa: E501
        :type: list[LongComparison]
        """

        self._error_code_filter = error_code_filter

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExecLogFilter, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExecLogFilter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
