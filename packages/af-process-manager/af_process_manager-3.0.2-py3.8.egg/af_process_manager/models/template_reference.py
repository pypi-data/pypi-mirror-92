# coding: utf-8

"""
    AristaFlowREST/ProcessManager

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TemplateReference(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'process_type': 'str',
        'version': 'str',
        'name': 'str',
        'loc_name': 'dict(str, str)',
        'desc': 'str',
        'loc_desc': 'dict(str, str)',
        'supervisor': 'QualifiedAgent',
        'in_params': 'dict(str, ProcessModelParameter)',
        'out_params': 'dict(str, ProcessModelParameter)',
        'tl_usable': 'bool',
        'usage_as_subprocess': 'str',
        'tl_instantiable': 'bool',
        'sp_instantiable': 'bool',
        'tl_outdated': 'bool',
        'sp_outdated': 'bool',
        'tl_instance_changeable': 'bool',
        'sp_instance_changeable': 'bool',
        'derivable': 'bool',
        'tl_migratable_to': 'bool',
        'sp_migratable_to': 'bool',
        'buildtime_state': 'str',
        'user_attributes': 'dict(str, str)'
    }

    attribute_map = {
        'id': 'id',
        'process_type': 'processType',
        'version': 'version',
        'name': 'name',
        'loc_name': 'locName',
        'desc': 'desc',
        'loc_desc': 'locDesc',
        'supervisor': 'supervisor',
        'in_params': 'inParams',
        'out_params': 'outParams',
        'tl_usable': 'tlUsable',
        'usage_as_subprocess': 'usageAsSubprocess',
        'tl_instantiable': 'tlInstantiable',
        'sp_instantiable': 'spInstantiable',
        'tl_outdated': 'tlOutdated',
        'sp_outdated': 'spOutdated',
        'tl_instance_changeable': 'tlInstanceChangeable',
        'sp_instance_changeable': 'spInstanceChangeable',
        'derivable': 'derivable',
        'tl_migratable_to': 'tlMigratableTo',
        'sp_migratable_to': 'spMigratableTo',
        'buildtime_state': 'buildtimeState',
        'user_attributes': 'userAttributes'
    }

    def __init__(self, id=None, process_type=None, version=None, name=None, loc_name=None, desc=None, loc_desc=None, supervisor=None, in_params=None, out_params=None, tl_usable=None, usage_as_subprocess=None, tl_instantiable=None, sp_instantiable=None, tl_outdated=None, sp_outdated=None, tl_instance_changeable=None, sp_instance_changeable=None, derivable=None, tl_migratable_to=None, sp_migratable_to=None, buildtime_state=None, user_attributes=None):  # noqa: E501
        """TemplateReference - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._process_type = None
        self._version = None
        self._name = None
        self._loc_name = None
        self._desc = None
        self._loc_desc = None
        self._supervisor = None
        self._in_params = None
        self._out_params = None
        self._tl_usable = None
        self._usage_as_subprocess = None
        self._tl_instantiable = None
        self._sp_instantiable = None
        self._tl_outdated = None
        self._sp_outdated = None
        self._tl_instance_changeable = None
        self._sp_instance_changeable = None
        self._derivable = None
        self._tl_migratable_to = None
        self._sp_migratable_to = None
        self._buildtime_state = None
        self._user_attributes = None
        if not(hasattr(self, "discriminator")) or not(self.discriminator):
            self.discriminator = None
        self.id = id
        self.process_type = process_type
        self.version = version
        self.name = name
        if loc_name is not None:
            self.loc_name = loc_name
        self.desc = desc
        if loc_desc is not None:
            self.loc_desc = loc_desc
        self.supervisor = supervisor
        if in_params is not None:
            self.in_params = in_params
        if out_params is not None:
            self.out_params = out_params
        self.tl_usable = tl_usable
        self.usage_as_subprocess = usage_as_subprocess
        self.tl_instantiable = tl_instantiable
        self.sp_instantiable = sp_instantiable
        self.tl_outdated = tl_outdated
        self.sp_outdated = sp_outdated
        self.tl_instance_changeable = tl_instance_changeable
        self.sp_instance_changeable = sp_instance_changeable
        self.derivable = derivable
        self.tl_migratable_to = tl_migratable_to
        self.sp_migratable_to = sp_migratable_to
        self.buildtime_state = buildtime_state
        if user_attributes is not None:
            self.user_attributes = user_attributes

    @property
    def id(self):
        """Gets the id of this TemplateReference.  # noqa: E501


        :return: The id of this TemplateReference.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TemplateReference.


        :param id: The id of this TemplateReference.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def process_type(self):
        """Gets the process_type of this TemplateReference.  # noqa: E501


        :return: The process_type of this TemplateReference.  # noqa: E501
        :rtype: str
        """
        return self._process_type

    @process_type.setter
    def process_type(self, process_type):
        """Sets the process_type of this TemplateReference.


        :param process_type: The process_type of this TemplateReference.  # noqa: E501
        :type: str
        """
        if process_type is None:
            raise ValueError("Invalid value for `process_type`, must not be `None`")  # noqa: E501

        self._process_type = process_type

    @property
    def version(self):
        """Gets the version of this TemplateReference.  # noqa: E501


        :return: The version of this TemplateReference.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this TemplateReference.


        :param version: The version of this TemplateReference.  # noqa: E501
        :type: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    @property
    def name(self):
        """Gets the name of this TemplateReference.  # noqa: E501


        :return: The name of this TemplateReference.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TemplateReference.


        :param name: The name of this TemplateReference.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def loc_name(self):
        """Gets the loc_name of this TemplateReference.  # noqa: E501


        :return: The loc_name of this TemplateReference.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._loc_name

    @loc_name.setter
    def loc_name(self, loc_name):
        """Sets the loc_name of this TemplateReference.


        :param loc_name: The loc_name of this TemplateReference.  # noqa: E501
        :type: dict(str, str)
        """

        self._loc_name = loc_name

    @property
    def desc(self):
        """Gets the desc of this TemplateReference.  # noqa: E501


        :return: The desc of this TemplateReference.  # noqa: E501
        :rtype: str
        """
        return self._desc

    @desc.setter
    def desc(self, desc):
        """Sets the desc of this TemplateReference.


        :param desc: The desc of this TemplateReference.  # noqa: E501
        :type: str
        """
        if desc is None:
            raise ValueError("Invalid value for `desc`, must not be `None`")  # noqa: E501

        self._desc = desc

    @property
    def loc_desc(self):
        """Gets the loc_desc of this TemplateReference.  # noqa: E501


        :return: The loc_desc of this TemplateReference.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._loc_desc

    @loc_desc.setter
    def loc_desc(self, loc_desc):
        """Sets the loc_desc of this TemplateReference.


        :param loc_desc: The loc_desc of this TemplateReference.  # noqa: E501
        :type: dict(str, str)
        """

        self._loc_desc = loc_desc

    @property
    def supervisor(self):
        """Gets the supervisor of this TemplateReference.  # noqa: E501


        :return: The supervisor of this TemplateReference.  # noqa: E501
        :rtype: QualifiedAgent
        """
        return self._supervisor

    @supervisor.setter
    def supervisor(self, supervisor):
        """Sets the supervisor of this TemplateReference.


        :param supervisor: The supervisor of this TemplateReference.  # noqa: E501
        :type: QualifiedAgent
        """
        if supervisor is None:
            raise ValueError("Invalid value for `supervisor`, must not be `None`")  # noqa: E501

        self._supervisor = supervisor

    @property
    def in_params(self):
        """Gets the in_params of this TemplateReference.  # noqa: E501


        :return: The in_params of this TemplateReference.  # noqa: E501
        :rtype: dict(str, ProcessModelParameter)
        """
        return self._in_params

    @in_params.setter
    def in_params(self, in_params):
        """Sets the in_params of this TemplateReference.


        :param in_params: The in_params of this TemplateReference.  # noqa: E501
        :type: dict(str, ProcessModelParameter)
        """

        self._in_params = in_params

    @property
    def out_params(self):
        """Gets the out_params of this TemplateReference.  # noqa: E501


        :return: The out_params of this TemplateReference.  # noqa: E501
        :rtype: dict(str, ProcessModelParameter)
        """
        return self._out_params

    @out_params.setter
    def out_params(self, out_params):
        """Sets the out_params of this TemplateReference.


        :param out_params: The out_params of this TemplateReference.  # noqa: E501
        :type: dict(str, ProcessModelParameter)
        """

        self._out_params = out_params

    @property
    def tl_usable(self):
        """Gets the tl_usable of this TemplateReference.  # noqa: E501


        :return: The tl_usable of this TemplateReference.  # noqa: E501
        :rtype: bool
        """
        return self._tl_usable

    @tl_usable.setter
    def tl_usable(self, tl_usable):
        """Sets the tl_usable of this TemplateReference.


        :param tl_usable: The tl_usable of this TemplateReference.  # noqa: E501
        :type: bool
        """
        if tl_usable is None:
            raise ValueError("Invalid value for `tl_usable`, must not be `None`")  # noqa: E501

        self._tl_usable = tl_usable

    @property
    def usage_as_subprocess(self):
        """Gets the usage_as_subprocess of this TemplateReference.  # noqa: E501


        :return: The usage_as_subprocess of this TemplateReference.  # noqa: E501
        :rtype: str
        """
        return self._usage_as_subprocess

    @usage_as_subprocess.setter
    def usage_as_subprocess(self, usage_as_subprocess):
        """Sets the usage_as_subprocess of this TemplateReference.


        :param usage_as_subprocess: The usage_as_subprocess of this TemplateReference.  # noqa: E501
        :type: str
        """
        if usage_as_subprocess is None:
            raise ValueError("Invalid value for `usage_as_subprocess`, must not be `None`")  # noqa: E501
        allowed_values = ["NO_SUBPROCESS", "AS_COPY", "AS_REFERENCE", "COPY_OR_REFERENCE"]  # noqa: E501
        if usage_as_subprocess not in allowed_values:
            raise ValueError(
                "Invalid value for `usage_as_subprocess` ({0}), must be one of {1}"  # noqa: E501
                .format(usage_as_subprocess, allowed_values)
            )

        self._usage_as_subprocess = usage_as_subprocess

    @property
    def tl_instantiable(self):
        """Gets the tl_instantiable of this TemplateReference.  # noqa: E501


        :return: The tl_instantiable of this TemplateReference.  # noqa: E501
        :rtype: bool
        """
        return self._tl_instantiable

    @tl_instantiable.setter
    def tl_instantiable(self, tl_instantiable):
        """Sets the tl_instantiable of this TemplateReference.


        :param tl_instantiable: The tl_instantiable of this TemplateReference.  # noqa: E501
        :type: bool
        """
        if tl_instantiable is None:
            raise ValueError("Invalid value for `tl_instantiable`, must not be `None`")  # noqa: E501

        self._tl_instantiable = tl_instantiable

    @property
    def sp_instantiable(self):
        """Gets the sp_instantiable of this TemplateReference.  # noqa: E501


        :return: The sp_instantiable of this TemplateReference.  # noqa: E501
        :rtype: bool
        """
        return self._sp_instantiable

    @sp_instantiable.setter
    def sp_instantiable(self, sp_instantiable):
        """Sets the sp_instantiable of this TemplateReference.


        :param sp_instantiable: The sp_instantiable of this TemplateReference.  # noqa: E501
        :type: bool
        """
        if sp_instantiable is None:
            raise ValueError("Invalid value for `sp_instantiable`, must not be `None`")  # noqa: E501

        self._sp_instantiable = sp_instantiable

    @property
    def tl_outdated(self):
        """Gets the tl_outdated of this TemplateReference.  # noqa: E501


        :return: The tl_outdated of this TemplateReference.  # noqa: E501
        :rtype: bool
        """
        return self._tl_outdated

    @tl_outdated.setter
    def tl_outdated(self, tl_outdated):
        """Sets the tl_outdated of this TemplateReference.


        :param tl_outdated: The tl_outdated of this TemplateReference.  # noqa: E501
        :type: bool
        """
        if tl_outdated is None:
            raise ValueError("Invalid value for `tl_outdated`, must not be `None`")  # noqa: E501

        self._tl_outdated = tl_outdated

    @property
    def sp_outdated(self):
        """Gets the sp_outdated of this TemplateReference.  # noqa: E501


        :return: The sp_outdated of this TemplateReference.  # noqa: E501
        :rtype: bool
        """
        return self._sp_outdated

    @sp_outdated.setter
    def sp_outdated(self, sp_outdated):
        """Sets the sp_outdated of this TemplateReference.


        :param sp_outdated: The sp_outdated of this TemplateReference.  # noqa: E501
        :type: bool
        """
        if sp_outdated is None:
            raise ValueError("Invalid value for `sp_outdated`, must not be `None`")  # noqa: E501

        self._sp_outdated = sp_outdated

    @property
    def tl_instance_changeable(self):
        """Gets the tl_instance_changeable of this TemplateReference.  # noqa: E501


        :return: The tl_instance_changeable of this TemplateReference.  # noqa: E501
        :rtype: bool
        """
        return self._tl_instance_changeable

    @tl_instance_changeable.setter
    def tl_instance_changeable(self, tl_instance_changeable):
        """Sets the tl_instance_changeable of this TemplateReference.


        :param tl_instance_changeable: The tl_instance_changeable of this TemplateReference.  # noqa: E501
        :type: bool
        """
        if tl_instance_changeable is None:
            raise ValueError("Invalid value for `tl_instance_changeable`, must not be `None`")  # noqa: E501

        self._tl_instance_changeable = tl_instance_changeable

    @property
    def sp_instance_changeable(self):
        """Gets the sp_instance_changeable of this TemplateReference.  # noqa: E501


        :return: The sp_instance_changeable of this TemplateReference.  # noqa: E501
        :rtype: bool
        """
        return self._sp_instance_changeable

    @sp_instance_changeable.setter
    def sp_instance_changeable(self, sp_instance_changeable):
        """Sets the sp_instance_changeable of this TemplateReference.


        :param sp_instance_changeable: The sp_instance_changeable of this TemplateReference.  # noqa: E501
        :type: bool
        """
        if sp_instance_changeable is None:
            raise ValueError("Invalid value for `sp_instance_changeable`, must not be `None`")  # noqa: E501

        self._sp_instance_changeable = sp_instance_changeable

    @property
    def derivable(self):
        """Gets the derivable of this TemplateReference.  # noqa: E501


        :return: The derivable of this TemplateReference.  # noqa: E501
        :rtype: bool
        """
        return self._derivable

    @derivable.setter
    def derivable(self, derivable):
        """Sets the derivable of this TemplateReference.


        :param derivable: The derivable of this TemplateReference.  # noqa: E501
        :type: bool
        """
        if derivable is None:
            raise ValueError("Invalid value for `derivable`, must not be `None`")  # noqa: E501

        self._derivable = derivable

    @property
    def tl_migratable_to(self):
        """Gets the tl_migratable_to of this TemplateReference.  # noqa: E501


        :return: The tl_migratable_to of this TemplateReference.  # noqa: E501
        :rtype: bool
        """
        return self._tl_migratable_to

    @tl_migratable_to.setter
    def tl_migratable_to(self, tl_migratable_to):
        """Sets the tl_migratable_to of this TemplateReference.


        :param tl_migratable_to: The tl_migratable_to of this TemplateReference.  # noqa: E501
        :type: bool
        """
        if tl_migratable_to is None:
            raise ValueError("Invalid value for `tl_migratable_to`, must not be `None`")  # noqa: E501

        self._tl_migratable_to = tl_migratable_to

    @property
    def sp_migratable_to(self):
        """Gets the sp_migratable_to of this TemplateReference.  # noqa: E501


        :return: The sp_migratable_to of this TemplateReference.  # noqa: E501
        :rtype: bool
        """
        return self._sp_migratable_to

    @sp_migratable_to.setter
    def sp_migratable_to(self, sp_migratable_to):
        """Sets the sp_migratable_to of this TemplateReference.


        :param sp_migratable_to: The sp_migratable_to of this TemplateReference.  # noqa: E501
        :type: bool
        """
        if sp_migratable_to is None:
            raise ValueError("Invalid value for `sp_migratable_to`, must not be `None`")  # noqa: E501

        self._sp_migratable_to = sp_migratable_to

    @property
    def buildtime_state(self):
        """Gets the buildtime_state of this TemplateReference.  # noqa: E501


        :return: The buildtime_state of this TemplateReference.  # noqa: E501
        :rtype: str
        """
        return self._buildtime_state

    @buildtime_state.setter
    def buildtime_state(self, buildtime_state):
        """Sets the buildtime_state of this TemplateReference.


        :param buildtime_state: The buildtime_state of this TemplateReference.  # noqa: E501
        :type: str
        """
        if buildtime_state is None:
            raise ValueError("Invalid value for `buildtime_state`, must not be `None`")  # noqa: E501
        allowed_values = ["IN_CONSTRUCTION", "VALID", "RELEASED"]  # noqa: E501
        if buildtime_state not in allowed_values:
            raise ValueError(
                "Invalid value for `buildtime_state` ({0}), must be one of {1}"  # noqa: E501
                .format(buildtime_state, allowed_values)
            )

        self._buildtime_state = buildtime_state

    @property
    def user_attributes(self):
        """Gets the user_attributes of this TemplateReference.  # noqa: E501


        :return: The user_attributes of this TemplateReference.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._user_attributes

    @user_attributes.setter
    def user_attributes(self, user_attributes):
        """Sets the user_attributes of this TemplateReference.


        :param user_attributes: The user_attributes of this TemplateReference.  # noqa: E501
        :type: dict(str, str)
        """

        self._user_attributes = user_attributes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TemplateReference, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TemplateReference):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
