# coding: utf-8

"""
    AristaFlowREST/ProcessManager

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Template(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'loc_name': 'dict(str, str)',
        'desc': 'str',
        'loc_desc': 'dict(str, str)',
        'process_type': 'str',
        'version': 'str',
        'supervisor': 'QualifiedAgent',
        'inst_name_templ': 'str',
        'loc_inst_name_templ': 'dict(str, str)',
        'nodes': 'dict(str, StructuralNode)',
        'start_node_id': 'int',
        'end_node_id': 'int',
        'edges': 'list[StructuralEdge]',
        'data_elements': 'dict(str, DataElement)',
        'data_edges': 'list[StructuralDataEdge]',
        'in_params': 'dict(str, ProcessModelParameter)',
        'out_params': 'dict(str, ProcessModelParameter)',
        'conf_entries': 'dict(str, ConfigurationDescEntry)',
        'conf_values': 'AfConfiguration',
        'test_conf_values': 'AfConfiguration',
        'user_attributes': 'dict(str, str)',
        'status': 'TemplateStatus'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'loc_name': 'locName',
        'desc': 'desc',
        'loc_desc': 'locDesc',
        'process_type': 'processType',
        'version': 'version',
        'supervisor': 'supervisor',
        'inst_name_templ': 'instNameTempl',
        'loc_inst_name_templ': 'locInstNameTempl',
        'nodes': 'nodes',
        'start_node_id': 'startNodeId',
        'end_node_id': 'endNodeId',
        'edges': 'edges',
        'data_elements': 'dataElements',
        'data_edges': 'dataEdges',
        'in_params': 'inParams',
        'out_params': 'outParams',
        'conf_entries': 'confEntries',
        'conf_values': 'confValues',
        'test_conf_values': 'testConfValues',
        'user_attributes': 'userAttributes',
        'status': 'status'
    }

    def __init__(self, id=None, name=None, loc_name=None, desc=None, loc_desc=None, process_type=None, version=None, supervisor=None, inst_name_templ=None, loc_inst_name_templ=None, nodes=None, start_node_id=None, end_node_id=None, edges=None, data_elements=None, data_edges=None, in_params=None, out_params=None, conf_entries=None, conf_values=None, test_conf_values=None, user_attributes=None, status=None):  # noqa: E501
        """Template - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._loc_name = None
        self._desc = None
        self._loc_desc = None
        self._process_type = None
        self._version = None
        self._supervisor = None
        self._inst_name_templ = None
        self._loc_inst_name_templ = None
        self._nodes = None
        self._start_node_id = None
        self._end_node_id = None
        self._edges = None
        self._data_elements = None
        self._data_edges = None
        self._in_params = None
        self._out_params = None
        self._conf_entries = None
        self._conf_values = None
        self._test_conf_values = None
        self._user_attributes = None
        self._status = None
        if not(hasattr(self, "discriminator")) or not(self.discriminator):
            self.discriminator = None
        self.id = id
        self.name = name
        if loc_name is not None:
            self.loc_name = loc_name
        self.desc = desc
        if loc_desc is not None:
            self.loc_desc = loc_desc
        self.process_type = process_type
        self.version = version
        self.supervisor = supervisor
        if inst_name_templ is not None:
            self.inst_name_templ = inst_name_templ
        if loc_inst_name_templ is not None:
            self.loc_inst_name_templ = loc_inst_name_templ
        if nodes is not None:
            self.nodes = nodes
        self.start_node_id = start_node_id
        self.end_node_id = end_node_id
        self.edges = edges
        if data_elements is not None:
            self.data_elements = data_elements
        if data_edges is not None:
            self.data_edges = data_edges
        if in_params is not None:
            self.in_params = in_params
        if out_params is not None:
            self.out_params = out_params
        if conf_entries is not None:
            self.conf_entries = conf_entries
        if conf_values is not None:
            self.conf_values = conf_values
        if test_conf_values is not None:
            self.test_conf_values = test_conf_values
        if user_attributes is not None:
            self.user_attributes = user_attributes
        if status is not None:
            self.status = status

    @property
    def id(self):
        """Gets the id of this Template.  # noqa: E501


        :return: The id of this Template.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Template.


        :param id: The id of this Template.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this Template.  # noqa: E501


        :return: The name of this Template.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Template.


        :param name: The name of this Template.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def loc_name(self):
        """Gets the loc_name of this Template.  # noqa: E501


        :return: The loc_name of this Template.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._loc_name

    @loc_name.setter
    def loc_name(self, loc_name):
        """Sets the loc_name of this Template.


        :param loc_name: The loc_name of this Template.  # noqa: E501
        :type: dict(str, str)
        """

        self._loc_name = loc_name

    @property
    def desc(self):
        """Gets the desc of this Template.  # noqa: E501


        :return: The desc of this Template.  # noqa: E501
        :rtype: str
        """
        return self._desc

    @desc.setter
    def desc(self, desc):
        """Sets the desc of this Template.


        :param desc: The desc of this Template.  # noqa: E501
        :type: str
        """
        if desc is None:
            raise ValueError("Invalid value for `desc`, must not be `None`")  # noqa: E501

        self._desc = desc

    @property
    def loc_desc(self):
        """Gets the loc_desc of this Template.  # noqa: E501


        :return: The loc_desc of this Template.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._loc_desc

    @loc_desc.setter
    def loc_desc(self, loc_desc):
        """Sets the loc_desc of this Template.


        :param loc_desc: The loc_desc of this Template.  # noqa: E501
        :type: dict(str, str)
        """

        self._loc_desc = loc_desc

    @property
    def process_type(self):
        """Gets the process_type of this Template.  # noqa: E501


        :return: The process_type of this Template.  # noqa: E501
        :rtype: str
        """
        return self._process_type

    @process_type.setter
    def process_type(self, process_type):
        """Sets the process_type of this Template.


        :param process_type: The process_type of this Template.  # noqa: E501
        :type: str
        """
        if process_type is None:
            raise ValueError("Invalid value for `process_type`, must not be `None`")  # noqa: E501

        self._process_type = process_type

    @property
    def version(self):
        """Gets the version of this Template.  # noqa: E501


        :return: The version of this Template.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Template.


        :param version: The version of this Template.  # noqa: E501
        :type: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    @property
    def supervisor(self):
        """Gets the supervisor of this Template.  # noqa: E501


        :return: The supervisor of this Template.  # noqa: E501
        :rtype: QualifiedAgent
        """
        return self._supervisor

    @supervisor.setter
    def supervisor(self, supervisor):
        """Sets the supervisor of this Template.


        :param supervisor: The supervisor of this Template.  # noqa: E501
        :type: QualifiedAgent
        """
        if supervisor is None:
            raise ValueError("Invalid value for `supervisor`, must not be `None`")  # noqa: E501

        self._supervisor = supervisor

    @property
    def inst_name_templ(self):
        """Gets the inst_name_templ of this Template.  # noqa: E501


        :return: The inst_name_templ of this Template.  # noqa: E501
        :rtype: str
        """
        return self._inst_name_templ

    @inst_name_templ.setter
    def inst_name_templ(self, inst_name_templ):
        """Sets the inst_name_templ of this Template.


        :param inst_name_templ: The inst_name_templ of this Template.  # noqa: E501
        :type: str
        """

        self._inst_name_templ = inst_name_templ

    @property
    def loc_inst_name_templ(self):
        """Gets the loc_inst_name_templ of this Template.  # noqa: E501


        :return: The loc_inst_name_templ of this Template.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._loc_inst_name_templ

    @loc_inst_name_templ.setter
    def loc_inst_name_templ(self, loc_inst_name_templ):
        """Sets the loc_inst_name_templ of this Template.


        :param loc_inst_name_templ: The loc_inst_name_templ of this Template.  # noqa: E501
        :type: dict(str, str)
        """

        self._loc_inst_name_templ = loc_inst_name_templ

    @property
    def nodes(self):
        """Gets the nodes of this Template.  # noqa: E501


        :return: The nodes of this Template.  # noqa: E501
        :rtype: dict(str, StructuralNode)
        """
        return self._nodes

    @nodes.setter
    def nodes(self, nodes):
        """Sets the nodes of this Template.


        :param nodes: The nodes of this Template.  # noqa: E501
        :type: dict(str, StructuralNode)
        """

        self._nodes = nodes

    @property
    def start_node_id(self):
        """Gets the start_node_id of this Template.  # noqa: E501


        :return: The start_node_id of this Template.  # noqa: E501
        :rtype: int
        """
        return self._start_node_id

    @start_node_id.setter
    def start_node_id(self, start_node_id):
        """Sets the start_node_id of this Template.


        :param start_node_id: The start_node_id of this Template.  # noqa: E501
        :type: int
        """
        if start_node_id is None:
            raise ValueError("Invalid value for `start_node_id`, must not be `None`")  # noqa: E501

        self._start_node_id = start_node_id

    @property
    def end_node_id(self):
        """Gets the end_node_id of this Template.  # noqa: E501


        :return: The end_node_id of this Template.  # noqa: E501
        :rtype: int
        """
        return self._end_node_id

    @end_node_id.setter
    def end_node_id(self, end_node_id):
        """Sets the end_node_id of this Template.


        :param end_node_id: The end_node_id of this Template.  # noqa: E501
        :type: int
        """
        if end_node_id is None:
            raise ValueError("Invalid value for `end_node_id`, must not be `None`")  # noqa: E501

        self._end_node_id = end_node_id

    @property
    def edges(self):
        """Gets the edges of this Template.  # noqa: E501


        :return: The edges of this Template.  # noqa: E501
        :rtype: list[StructuralEdge]
        """
        return self._edges

    @edges.setter
    def edges(self, edges):
        """Sets the edges of this Template.


        :param edges: The edges of this Template.  # noqa: E501
        :type: list[StructuralEdge]
        """
        if edges is None:
            raise ValueError("Invalid value for `edges`, must not be `None`")  # noqa: E501

        self._edges = edges

    @property
    def data_elements(self):
        """Gets the data_elements of this Template.  # noqa: E501


        :return: The data_elements of this Template.  # noqa: E501
        :rtype: dict(str, DataElement)
        """
        return self._data_elements

    @data_elements.setter
    def data_elements(self, data_elements):
        """Sets the data_elements of this Template.


        :param data_elements: The data_elements of this Template.  # noqa: E501
        :type: dict(str, DataElement)
        """

        self._data_elements = data_elements

    @property
    def data_edges(self):
        """Gets the data_edges of this Template.  # noqa: E501


        :return: The data_edges of this Template.  # noqa: E501
        :rtype: list[StructuralDataEdge]
        """
        return self._data_edges

    @data_edges.setter
    def data_edges(self, data_edges):
        """Sets the data_edges of this Template.


        :param data_edges: The data_edges of this Template.  # noqa: E501
        :type: list[StructuralDataEdge]
        """

        self._data_edges = data_edges

    @property
    def in_params(self):
        """Gets the in_params of this Template.  # noqa: E501


        :return: The in_params of this Template.  # noqa: E501
        :rtype: dict(str, ProcessModelParameter)
        """
        return self._in_params

    @in_params.setter
    def in_params(self, in_params):
        """Sets the in_params of this Template.


        :param in_params: The in_params of this Template.  # noqa: E501
        :type: dict(str, ProcessModelParameter)
        """

        self._in_params = in_params

    @property
    def out_params(self):
        """Gets the out_params of this Template.  # noqa: E501


        :return: The out_params of this Template.  # noqa: E501
        :rtype: dict(str, ProcessModelParameter)
        """
        return self._out_params

    @out_params.setter
    def out_params(self, out_params):
        """Sets the out_params of this Template.


        :param out_params: The out_params of this Template.  # noqa: E501
        :type: dict(str, ProcessModelParameter)
        """

        self._out_params = out_params

    @property
    def conf_entries(self):
        """Gets the conf_entries of this Template.  # noqa: E501


        :return: The conf_entries of this Template.  # noqa: E501
        :rtype: dict(str, ConfigurationDescEntry)
        """
        return self._conf_entries

    @conf_entries.setter
    def conf_entries(self, conf_entries):
        """Sets the conf_entries of this Template.


        :param conf_entries: The conf_entries of this Template.  # noqa: E501
        :type: dict(str, ConfigurationDescEntry)
        """

        self._conf_entries = conf_entries

    @property
    def conf_values(self):
        """Gets the conf_values of this Template.  # noqa: E501


        :return: The conf_values of this Template.  # noqa: E501
        :rtype: AfConfiguration
        """
        return self._conf_values

    @conf_values.setter
    def conf_values(self, conf_values):
        """Sets the conf_values of this Template.


        :param conf_values: The conf_values of this Template.  # noqa: E501
        :type: AfConfiguration
        """

        self._conf_values = conf_values

    @property
    def test_conf_values(self):
        """Gets the test_conf_values of this Template.  # noqa: E501


        :return: The test_conf_values of this Template.  # noqa: E501
        :rtype: AfConfiguration
        """
        return self._test_conf_values

    @test_conf_values.setter
    def test_conf_values(self, test_conf_values):
        """Sets the test_conf_values of this Template.


        :param test_conf_values: The test_conf_values of this Template.  # noqa: E501
        :type: AfConfiguration
        """

        self._test_conf_values = test_conf_values

    @property
    def user_attributes(self):
        """Gets the user_attributes of this Template.  # noqa: E501


        :return: The user_attributes of this Template.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._user_attributes

    @user_attributes.setter
    def user_attributes(self, user_attributes):
        """Sets the user_attributes of this Template.


        :param user_attributes: The user_attributes of this Template.  # noqa: E501
        :type: dict(str, str)
        """

        self._user_attributes = user_attributes

    @property
    def status(self):
        """Gets the status of this Template.  # noqa: E501


        :return: The status of this Template.  # noqa: E501
        :rtype: TemplateStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Template.


        :param status: The status of this Template.  # noqa: E501
        :type: TemplateStatus
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Template, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Template):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
