# coding: utf-8

"""
    AristaFlowREST/ProcessManager

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from af_process_manager.models.executable_business_process import ExecutableBusinessProcess  # noqa: F401,E501

class Activity(ExecutableBusinessProcess):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'conf_ext': 'ActivityConfExtension',
        'test_conf_ext': 'ActivityConfExtension',
        'id': 'str',
        'exec_comp_name': 'str',
        'op_name': 'str',
        'conf_name': 'str',
        'act_name': 'str',
        'loc_act_name': 'dict(str, str)',
        'desc': 'str',
        'loc_desc': 'dict(str, str)',
        'desc_origin': 'str',
        'impl_class': 'str',
        'impl_class_origin': 'str',
        'class_path': 'list[str]',
        'sep_class_paths': 'dict(str, list[str])',
        'cl_usage': 'str',
        'cl_usage_origin': 'str',
        'system_comp': 'str',
        'system_comp_origin': 'str',
        'gui_context_id': 'str',
        'gui_context_id_origin': 'str',
        'exec_control_properties_origin': 'str',
        'supports_view_only': 'bool',
        'supports_view_only_origin': 'str',
        'supports_test_execution': 'bool',
        'supports_test_execution_origin': 'str',
        'icon_id': 'str',
        'icon_id_origin': 'str',
        'param_change_policy': 'str'
    }
    if hasattr(ExecutableBusinessProcess, "swagger_types"):
        swagger_types.update(ExecutableBusinessProcess.swagger_types)

    attribute_map = {
        'conf_ext': 'confExt',
        'test_conf_ext': 'testConfExt',
        'id': 'id',
        'exec_comp_name': 'execCompName',
        'op_name': 'opName',
        'conf_name': 'confName',
        'act_name': 'actName',
        'loc_act_name': 'locActName',
        'desc': 'desc',
        'loc_desc': 'locDesc',
        'desc_origin': 'descOrigin',
        'impl_class': 'implClass',
        'impl_class_origin': 'implClassOrigin',
        'class_path': 'classPath',
        'sep_class_paths': 'sepClassPaths',
        'cl_usage': 'clUsage',
        'cl_usage_origin': 'clUsageOrigin',
        'system_comp': 'systemComp',
        'system_comp_origin': 'systemCompOrigin',
        'gui_context_id': 'guiContextId',
        'gui_context_id_origin': 'guiContextIdOrigin',
        'exec_control_properties_origin': 'execControlPropertiesOrigin',
        'supports_view_only': 'supportsViewOnly',
        'supports_view_only_origin': 'supportsViewOnlyOrigin',
        'supports_test_execution': 'supportsTestExecution',
        'supports_test_execution_origin': 'supportsTestExecutionOrigin',
        'icon_id': 'iconId',
        'icon_id_origin': 'iconIdOrigin',
        'param_change_policy': 'paramChangePolicy'
    }
    if hasattr(ExecutableBusinessProcess, "attribute_map"):
        attribute_map.update(ExecutableBusinessProcess.attribute_map)

    discriminator_value_class_map = {
          'DecisionActivity': 'DecisionActivity'    }

    def __init__(self, conf_ext=None, test_conf_ext=None, id=None, exec_comp_name=None, op_name=None, conf_name=None, act_name=None, loc_act_name=None, desc=None, loc_desc=None, desc_origin=None, impl_class=None, impl_class_origin=None, class_path=None, sep_class_paths=None, cl_usage=None, cl_usage_origin=None, system_comp=None, system_comp_origin=None, gui_context_id=None, gui_context_id_origin=None, exec_control_properties_origin=None, supports_view_only=None, supports_view_only_origin=None, supports_test_execution=None, supports_test_execution_origin=None, icon_id=None, icon_id_origin=None, param_change_policy=None, *args, **kwargs):  # noqa: E501
        """Activity - a model defined in Swagger"""  # noqa: E501
        self._conf_ext = None
        self._test_conf_ext = None
        self._id = None
        self._exec_comp_name = None
        self._op_name = None
        self._conf_name = None
        self._act_name = None
        self._loc_act_name = None
        self._desc = None
        self._loc_desc = None
        self._desc_origin = None
        self._impl_class = None
        self._impl_class_origin = None
        self._class_path = None
        self._sep_class_paths = None
        self._cl_usage = None
        self._cl_usage_origin = None
        self._system_comp = None
        self._system_comp_origin = None
        self._gui_context_id = None
        self._gui_context_id_origin = None
        self._exec_control_properties_origin = None
        self._supports_view_only = None
        self._supports_view_only_origin = None
        self._supports_test_execution = None
        self._supports_test_execution_origin = None
        self._icon_id = None
        self._icon_id_origin = None
        self._param_change_policy = None
        if not(hasattr(self, "discriminator")) or not(self.discriminator):
            self.discriminator = 'sub_class'
        self.conf_ext = conf_ext
        self.test_conf_ext = test_conf_ext
        self.id = id
        self.exec_comp_name = exec_comp_name
        self.op_name = op_name
        if conf_name is not None:
            self.conf_name = conf_name
        self.act_name = act_name
        if loc_act_name is not None:
            self.loc_act_name = loc_act_name
        if desc is not None:
            self.desc = desc
        if loc_desc is not None:
            self.loc_desc = loc_desc
        self.desc_origin = desc_origin
        if impl_class is not None:
            self.impl_class = impl_class
        self.impl_class_origin = impl_class_origin
        if class_path is not None:
            self.class_path = class_path
        if sep_class_paths is not None:
            self.sep_class_paths = sep_class_paths
        self.cl_usage = cl_usage
        self.cl_usage_origin = cl_usage_origin
        if system_comp is not None:
            self.system_comp = system_comp
        self.system_comp_origin = system_comp_origin
        if gui_context_id is not None:
            self.gui_context_id = gui_context_id
        self.gui_context_id_origin = gui_context_id_origin
        self.exec_control_properties_origin = exec_control_properties_origin
        self.supports_view_only = supports_view_only
        self.supports_view_only_origin = supports_view_only_origin
        self.supports_test_execution = supports_test_execution
        self.supports_test_execution_origin = supports_test_execution_origin
        if icon_id is not None:
            self.icon_id = icon_id
        self.icon_id_origin = icon_id_origin
        self.param_change_policy = param_change_policy
        ExecutableBusinessProcess.__init__(self, *args, **kwargs)

    @property
    def conf_ext(self):
        """Gets the conf_ext of this Activity.  # noqa: E501


        :return: The conf_ext of this Activity.  # noqa: E501
        :rtype: ActivityConfExtension
        """
        return self._conf_ext

    @conf_ext.setter
    def conf_ext(self, conf_ext):
        """Sets the conf_ext of this Activity.


        :param conf_ext: The conf_ext of this Activity.  # noqa: E501
        :type: ActivityConfExtension
        """
        if conf_ext is None:
            raise ValueError("Invalid value for `conf_ext`, must not be `None`")  # noqa: E501

        self._conf_ext = conf_ext

    @property
    def test_conf_ext(self):
        """Gets the test_conf_ext of this Activity.  # noqa: E501


        :return: The test_conf_ext of this Activity.  # noqa: E501
        :rtype: ActivityConfExtension
        """
        return self._test_conf_ext

    @test_conf_ext.setter
    def test_conf_ext(self, test_conf_ext):
        """Sets the test_conf_ext of this Activity.


        :param test_conf_ext: The test_conf_ext of this Activity.  # noqa: E501
        :type: ActivityConfExtension
        """
        if test_conf_ext is None:
            raise ValueError("Invalid value for `test_conf_ext`, must not be `None`")  # noqa: E501

        self._test_conf_ext = test_conf_ext

    @property
    def id(self):
        """Gets the id of this Activity.  # noqa: E501


        :return: The id of this Activity.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Activity.


        :param id: The id of this Activity.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def exec_comp_name(self):
        """Gets the exec_comp_name of this Activity.  # noqa: E501


        :return: The exec_comp_name of this Activity.  # noqa: E501
        :rtype: str
        """
        return self._exec_comp_name

    @exec_comp_name.setter
    def exec_comp_name(self, exec_comp_name):
        """Sets the exec_comp_name of this Activity.


        :param exec_comp_name: The exec_comp_name of this Activity.  # noqa: E501
        :type: str
        """
        if exec_comp_name is None:
            raise ValueError("Invalid value for `exec_comp_name`, must not be `None`")  # noqa: E501

        self._exec_comp_name = exec_comp_name

    @property
    def op_name(self):
        """Gets the op_name of this Activity.  # noqa: E501


        :return: The op_name of this Activity.  # noqa: E501
        :rtype: str
        """
        return self._op_name

    @op_name.setter
    def op_name(self, op_name):
        """Sets the op_name of this Activity.


        :param op_name: The op_name of this Activity.  # noqa: E501
        :type: str
        """
        if op_name is None:
            raise ValueError("Invalid value for `op_name`, must not be `None`")  # noqa: E501

        self._op_name = op_name

    @property
    def conf_name(self):
        """Gets the conf_name of this Activity.  # noqa: E501


        :return: The conf_name of this Activity.  # noqa: E501
        :rtype: str
        """
        return self._conf_name

    @conf_name.setter
    def conf_name(self, conf_name):
        """Sets the conf_name of this Activity.


        :param conf_name: The conf_name of this Activity.  # noqa: E501
        :type: str
        """

        self._conf_name = conf_name

    @property
    def act_name(self):
        """Gets the act_name of this Activity.  # noqa: E501


        :return: The act_name of this Activity.  # noqa: E501
        :rtype: str
        """
        return self._act_name

    @act_name.setter
    def act_name(self, act_name):
        """Sets the act_name of this Activity.


        :param act_name: The act_name of this Activity.  # noqa: E501
        :type: str
        """
        if act_name is None:
            raise ValueError("Invalid value for `act_name`, must not be `None`")  # noqa: E501

        self._act_name = act_name

    @property
    def loc_act_name(self):
        """Gets the loc_act_name of this Activity.  # noqa: E501


        :return: The loc_act_name of this Activity.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._loc_act_name

    @loc_act_name.setter
    def loc_act_name(self, loc_act_name):
        """Sets the loc_act_name of this Activity.


        :param loc_act_name: The loc_act_name of this Activity.  # noqa: E501
        :type: dict(str, str)
        """

        self._loc_act_name = loc_act_name

    @property
    def desc(self):
        """Gets the desc of this Activity.  # noqa: E501


        :return: The desc of this Activity.  # noqa: E501
        :rtype: str
        """
        return self._desc

    @desc.setter
    def desc(self, desc):
        """Sets the desc of this Activity.


        :param desc: The desc of this Activity.  # noqa: E501
        :type: str
        """

        self._desc = desc

    @property
    def loc_desc(self):
        """Gets the loc_desc of this Activity.  # noqa: E501


        :return: The loc_desc of this Activity.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._loc_desc

    @loc_desc.setter
    def loc_desc(self, loc_desc):
        """Sets the loc_desc of this Activity.


        :param loc_desc: The loc_desc of this Activity.  # noqa: E501
        :type: dict(str, str)
        """

        self._loc_desc = loc_desc

    @property
    def desc_origin(self):
        """Gets the desc_origin of this Activity.  # noqa: E501


        :return: The desc_origin of this Activity.  # noqa: E501
        :rtype: str
        """
        return self._desc_origin

    @desc_origin.setter
    def desc_origin(self, desc_origin):
        """Sets the desc_origin of this Activity.


        :param desc_origin: The desc_origin of this Activity.  # noqa: E501
        :type: str
        """
        if desc_origin is None:
            raise ValueError("Invalid value for `desc_origin`, must not be `None`")  # noqa: E501
        allowed_values = ["ECD", "OPERATION", "ATD"]  # noqa: E501
        if desc_origin not in allowed_values:
            raise ValueError(
                "Invalid value for `desc_origin` ({0}), must be one of {1}"  # noqa: E501
                .format(desc_origin, allowed_values)
            )

        self._desc_origin = desc_origin

    @property
    def impl_class(self):
        """Gets the impl_class of this Activity.  # noqa: E501


        :return: The impl_class of this Activity.  # noqa: E501
        :rtype: str
        """
        return self._impl_class

    @impl_class.setter
    def impl_class(self, impl_class):
        """Sets the impl_class of this Activity.


        :param impl_class: The impl_class of this Activity.  # noqa: E501
        :type: str
        """

        self._impl_class = impl_class

    @property
    def impl_class_origin(self):
        """Gets the impl_class_origin of this Activity.  # noqa: E501


        :return: The impl_class_origin of this Activity.  # noqa: E501
        :rtype: str
        """
        return self._impl_class_origin

    @impl_class_origin.setter
    def impl_class_origin(self, impl_class_origin):
        """Sets the impl_class_origin of this Activity.


        :param impl_class_origin: The impl_class_origin of this Activity.  # noqa: E501
        :type: str
        """
        if impl_class_origin is None:
            raise ValueError("Invalid value for `impl_class_origin`, must not be `None`")  # noqa: E501
        allowed_values = ["ECD", "OPERATION", "ATD"]  # noqa: E501
        if impl_class_origin not in allowed_values:
            raise ValueError(
                "Invalid value for `impl_class_origin` ({0}), must be one of {1}"  # noqa: E501
                .format(impl_class_origin, allowed_values)
            )

        self._impl_class_origin = impl_class_origin

    @property
    def class_path(self):
        """Gets the class_path of this Activity.  # noqa: E501


        :return: The class_path of this Activity.  # noqa: E501
        :rtype: list[str]
        """
        return self._class_path

    @class_path.setter
    def class_path(self, class_path):
        """Sets the class_path of this Activity.


        :param class_path: The class_path of this Activity.  # noqa: E501
        :type: list[str]
        """

        self._class_path = class_path

    @property
    def sep_class_paths(self):
        """Gets the sep_class_paths of this Activity.  # noqa: E501


        :return: The sep_class_paths of this Activity.  # noqa: E501
        :rtype: dict(str, list[str])
        """
        return self._sep_class_paths

    @sep_class_paths.setter
    def sep_class_paths(self, sep_class_paths):
        """Sets the sep_class_paths of this Activity.


        :param sep_class_paths: The sep_class_paths of this Activity.  # noqa: E501
        :type: dict(str, list[str])
        """

        self._sep_class_paths = sep_class_paths

    @property
    def cl_usage(self):
        """Gets the cl_usage of this Activity.  # noqa: E501


        :return: The cl_usage of this Activity.  # noqa: E501
        :rtype: str
        """
        return self._cl_usage

    @cl_usage.setter
    def cl_usage(self, cl_usage):
        """Sets the cl_usage of this Activity.


        :param cl_usage: The cl_usage of this Activity.  # noqa: E501
        :type: str
        """
        if cl_usage is None:
            raise ValueError("Invalid value for `cl_usage`, must not be `None`")  # noqa: E501
        allowed_values = ["PLATFORM", "SHARE_RUNTIME_MANAGER", "SHARE_ACTIVITY_INSTANCES", "NON_SHARED", "SHARE_EXECUTABLE_COMPONENT", "SHARE_IMPLEMENTATION_CLASS"]  # noqa: E501
        if cl_usage not in allowed_values:
            raise ValueError(
                "Invalid value for `cl_usage` ({0}), must be one of {1}"  # noqa: E501
                .format(cl_usage, allowed_values)
            )

        self._cl_usage = cl_usage

    @property
    def cl_usage_origin(self):
        """Gets the cl_usage_origin of this Activity.  # noqa: E501


        :return: The cl_usage_origin of this Activity.  # noqa: E501
        :rtype: str
        """
        return self._cl_usage_origin

    @cl_usage_origin.setter
    def cl_usage_origin(self, cl_usage_origin):
        """Sets the cl_usage_origin of this Activity.


        :param cl_usage_origin: The cl_usage_origin of this Activity.  # noqa: E501
        :type: str
        """
        if cl_usage_origin is None:
            raise ValueError("Invalid value for `cl_usage_origin`, must not be `None`")  # noqa: E501
        allowed_values = ["ECD", "OPERATION", "ATD"]  # noqa: E501
        if cl_usage_origin not in allowed_values:
            raise ValueError(
                "Invalid value for `cl_usage_origin` ({0}), must be one of {1}"  # noqa: E501
                .format(cl_usage_origin, allowed_values)
            )

        self._cl_usage_origin = cl_usage_origin

    @property
    def system_comp(self):
        """Gets the system_comp of this Activity.  # noqa: E501


        :return: The system_comp of this Activity.  # noqa: E501
        :rtype: str
        """
        return self._system_comp

    @system_comp.setter
    def system_comp(self, system_comp):
        """Sets the system_comp of this Activity.


        :param system_comp: The system_comp of this Activity.  # noqa: E501
        :type: str
        """

        self._system_comp = system_comp

    @property
    def system_comp_origin(self):
        """Gets the system_comp_origin of this Activity.  # noqa: E501


        :return: The system_comp_origin of this Activity.  # noqa: E501
        :rtype: str
        """
        return self._system_comp_origin

    @system_comp_origin.setter
    def system_comp_origin(self, system_comp_origin):
        """Sets the system_comp_origin of this Activity.


        :param system_comp_origin: The system_comp_origin of this Activity.  # noqa: E501
        :type: str
        """
        if system_comp_origin is None:
            raise ValueError("Invalid value for `system_comp_origin`, must not be `None`")  # noqa: E501
        allowed_values = ["ECD", "OPERATION", "ATD"]  # noqa: E501
        if system_comp_origin not in allowed_values:
            raise ValueError(
                "Invalid value for `system_comp_origin` ({0}), must be one of {1}"  # noqa: E501
                .format(system_comp_origin, allowed_values)
            )

        self._system_comp_origin = system_comp_origin

    @property
    def gui_context_id(self):
        """Gets the gui_context_id of this Activity.  # noqa: E501


        :return: The gui_context_id of this Activity.  # noqa: E501
        :rtype: str
        """
        return self._gui_context_id

    @gui_context_id.setter
    def gui_context_id(self, gui_context_id):
        """Sets the gui_context_id of this Activity.


        :param gui_context_id: The gui_context_id of this Activity.  # noqa: E501
        :type: str
        """

        self._gui_context_id = gui_context_id

    @property
    def gui_context_id_origin(self):
        """Gets the gui_context_id_origin of this Activity.  # noqa: E501


        :return: The gui_context_id_origin of this Activity.  # noqa: E501
        :rtype: str
        """
        return self._gui_context_id_origin

    @gui_context_id_origin.setter
    def gui_context_id_origin(self, gui_context_id_origin):
        """Sets the gui_context_id_origin of this Activity.


        :param gui_context_id_origin: The gui_context_id_origin of this Activity.  # noqa: E501
        :type: str
        """
        if gui_context_id_origin is None:
            raise ValueError("Invalid value for `gui_context_id_origin`, must not be `None`")  # noqa: E501
        allowed_values = ["ECD", "OPERATION", "ATD"]  # noqa: E501
        if gui_context_id_origin not in allowed_values:
            raise ValueError(
                "Invalid value for `gui_context_id_origin` ({0}), must be one of {1}"  # noqa: E501
                .format(gui_context_id_origin, allowed_values)
            )

        self._gui_context_id_origin = gui_context_id_origin

    @property
    def exec_control_properties_origin(self):
        """Gets the exec_control_properties_origin of this Activity.  # noqa: E501


        :return: The exec_control_properties_origin of this Activity.  # noqa: E501
        :rtype: str
        """
        return self._exec_control_properties_origin

    @exec_control_properties_origin.setter
    def exec_control_properties_origin(self, exec_control_properties_origin):
        """Sets the exec_control_properties_origin of this Activity.


        :param exec_control_properties_origin: The exec_control_properties_origin of this Activity.  # noqa: E501
        :type: str
        """
        if exec_control_properties_origin is None:
            raise ValueError("Invalid value for `exec_control_properties_origin`, must not be `None`")  # noqa: E501
        allowed_values = ["ECD", "OPERATION", "ATD"]  # noqa: E501
        if exec_control_properties_origin not in allowed_values:
            raise ValueError(
                "Invalid value for `exec_control_properties_origin` ({0}), must be one of {1}"  # noqa: E501
                .format(exec_control_properties_origin, allowed_values)
            )

        self._exec_control_properties_origin = exec_control_properties_origin

    @property
    def supports_view_only(self):
        """Gets the supports_view_only of this Activity.  # noqa: E501


        :return: The supports_view_only of this Activity.  # noqa: E501
        :rtype: bool
        """
        return self._supports_view_only

    @supports_view_only.setter
    def supports_view_only(self, supports_view_only):
        """Sets the supports_view_only of this Activity.


        :param supports_view_only: The supports_view_only of this Activity.  # noqa: E501
        :type: bool
        """
        if supports_view_only is None:
            raise ValueError("Invalid value for `supports_view_only`, must not be `None`")  # noqa: E501

        self._supports_view_only = supports_view_only

    @property
    def supports_view_only_origin(self):
        """Gets the supports_view_only_origin of this Activity.  # noqa: E501


        :return: The supports_view_only_origin of this Activity.  # noqa: E501
        :rtype: str
        """
        return self._supports_view_only_origin

    @supports_view_only_origin.setter
    def supports_view_only_origin(self, supports_view_only_origin):
        """Sets the supports_view_only_origin of this Activity.


        :param supports_view_only_origin: The supports_view_only_origin of this Activity.  # noqa: E501
        :type: str
        """
        if supports_view_only_origin is None:
            raise ValueError("Invalid value for `supports_view_only_origin`, must not be `None`")  # noqa: E501
        allowed_values = ["ECD", "OPERATION", "ATD"]  # noqa: E501
        if supports_view_only_origin not in allowed_values:
            raise ValueError(
                "Invalid value for `supports_view_only_origin` ({0}), must be one of {1}"  # noqa: E501
                .format(supports_view_only_origin, allowed_values)
            )

        self._supports_view_only_origin = supports_view_only_origin

    @property
    def supports_test_execution(self):
        """Gets the supports_test_execution of this Activity.  # noqa: E501


        :return: The supports_test_execution of this Activity.  # noqa: E501
        :rtype: bool
        """
        return self._supports_test_execution

    @supports_test_execution.setter
    def supports_test_execution(self, supports_test_execution):
        """Sets the supports_test_execution of this Activity.


        :param supports_test_execution: The supports_test_execution of this Activity.  # noqa: E501
        :type: bool
        """
        if supports_test_execution is None:
            raise ValueError("Invalid value for `supports_test_execution`, must not be `None`")  # noqa: E501

        self._supports_test_execution = supports_test_execution

    @property
    def supports_test_execution_origin(self):
        """Gets the supports_test_execution_origin of this Activity.  # noqa: E501


        :return: The supports_test_execution_origin of this Activity.  # noqa: E501
        :rtype: str
        """
        return self._supports_test_execution_origin

    @supports_test_execution_origin.setter
    def supports_test_execution_origin(self, supports_test_execution_origin):
        """Sets the supports_test_execution_origin of this Activity.


        :param supports_test_execution_origin: The supports_test_execution_origin of this Activity.  # noqa: E501
        :type: str
        """
        if supports_test_execution_origin is None:
            raise ValueError("Invalid value for `supports_test_execution_origin`, must not be `None`")  # noqa: E501
        allowed_values = ["ECD", "OPERATION", "ATD"]  # noqa: E501
        if supports_test_execution_origin not in allowed_values:
            raise ValueError(
                "Invalid value for `supports_test_execution_origin` ({0}), must be one of {1}"  # noqa: E501
                .format(supports_test_execution_origin, allowed_values)
            )

        self._supports_test_execution_origin = supports_test_execution_origin

    @property
    def icon_id(self):
        """Gets the icon_id of this Activity.  # noqa: E501


        :return: The icon_id of this Activity.  # noqa: E501
        :rtype: str
        """
        return self._icon_id

    @icon_id.setter
    def icon_id(self, icon_id):
        """Sets the icon_id of this Activity.


        :param icon_id: The icon_id of this Activity.  # noqa: E501
        :type: str
        """

        self._icon_id = icon_id

    @property
    def icon_id_origin(self):
        """Gets the icon_id_origin of this Activity.  # noqa: E501


        :return: The icon_id_origin of this Activity.  # noqa: E501
        :rtype: str
        """
        return self._icon_id_origin

    @icon_id_origin.setter
    def icon_id_origin(self, icon_id_origin):
        """Sets the icon_id_origin of this Activity.


        :param icon_id_origin: The icon_id_origin of this Activity.  # noqa: E501
        :type: str
        """
        if icon_id_origin is None:
            raise ValueError("Invalid value for `icon_id_origin`, must not be `None`")  # noqa: E501
        allowed_values = ["ECD", "OPERATION", "ATD"]  # noqa: E501
        if icon_id_origin not in allowed_values:
            raise ValueError(
                "Invalid value for `icon_id_origin` ({0}), must be one of {1}"  # noqa: E501
                .format(icon_id_origin, allowed_values)
            )

        self._icon_id_origin = icon_id_origin

    @property
    def param_change_policy(self):
        """Gets the param_change_policy of this Activity.  # noqa: E501


        :return: The param_change_policy of this Activity.  # noqa: E501
        :rtype: str
        """
        return self._param_change_policy

    @param_change_policy.setter
    def param_change_policy(self, param_change_policy):
        """Sets the param_change_policy of this Activity.


        :param param_change_policy: The param_change_policy of this Activity.  # noqa: E501
        :type: str
        """
        if param_change_policy is None:
            raise ValueError("Invalid value for `param_change_policy`, must not be `None`")  # noqa: E501
        allowed_values = ["GENERIC", "ADD_CHANGE_PARAMETERS", "ADD_PARAMETERS", "CHANGE_PARAMETERS", "ADD_VIRTUAL", "FIXED"]  # noqa: E501
        if param_change_policy not in allowed_values:
            raise ValueError(
                "Invalid value for `param_change_policy` ({0}), must be one of {1}"  # noqa: E501
                .format(param_change_policy, allowed_values)
            )

        self._param_change_policy = param_change_policy

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_value = data[self.attribute_map[self.discriminator]]
        return discriminator_value if not(self.__class__.__name__ == discriminator_value) else None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Activity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Activity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
