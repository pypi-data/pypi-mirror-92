# coding: utf-8

"""
    AristaFlowREST/ProcessManager

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from af_process_manager.models.dummy_parent import DummyParent  # noqa: F401,E501

class Node(DummyParent):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sub_class': 'str',
        'id': 'int',
        'name': 'str',
        'loc_name': 'dict(str, str)',
        'desc': 'str',
        'loc_desc': 'dict(str, str)',
        'icon_id': 'str',
        'assignment_rule': 'str',
        'ebp': 'ExecutableBusinessProcess',
        'auto_start': 'bool',
        'group_name': 'str',
        'group_execution_context': 'str',
        'sys_in_params': 'dict(str, ProcessModelParameter)',
        'sys_out_params': 'dict(str, ProcessModelParameter)',
        'in_param_conns': 'dict(str, int)',
        'out_param_conns': 'dict(str, int)',
        'sys_in_param_conns': 'dict(str, int)',
        'sys_out_param_conns': 'dict(str, int)',
        'user_attributes': 'dict(str, str)'
    }
    if hasattr(DummyParent, "swagger_types"):
        swagger_types.update(DummyParent.swagger_types)

    attribute_map = {
        'sub_class': 'subClass',
        'id': 'id',
        'name': 'name',
        'loc_name': 'locName',
        'desc': 'desc',
        'loc_desc': 'locDesc',
        'icon_id': 'iconId',
        'assignment_rule': 'assignmentRule',
        'ebp': 'ebp',
        'auto_start': 'autoStart',
        'group_name': 'groupName',
        'group_execution_context': 'groupExecutionContext',
        'sys_in_params': 'sysInParams',
        'sys_out_params': 'sysOutParams',
        'in_param_conns': 'inParamConns',
        'out_param_conns': 'outParamConns',
        'sys_in_param_conns': 'sysInParamConns',
        'sys_out_param_conns': 'sysOutParamConns',
        'user_attributes': 'userAttributes'
    }
    if hasattr(DummyParent, "attribute_map"):
        attribute_map.update(DummyParent.attribute_map)

    discriminator_value_class_map = {
          'StructuralNode': 'StructuralNode'    }

    def __init__(self, sub_class=None, id=None, name=None, loc_name=None, desc=None, loc_desc=None, icon_id=None, assignment_rule=None, ebp=None, auto_start=None, group_name=None, group_execution_context=None, sys_in_params=None, sys_out_params=None, in_param_conns=None, out_param_conns=None, sys_in_param_conns=None, sys_out_param_conns=None, user_attributes=None, *args, **kwargs):  # noqa: E501
        """Node - a model defined in Swagger"""  # noqa: E501
        self._sub_class = None
        self._id = None
        self._name = None
        self._loc_name = None
        self._desc = None
        self._loc_desc = None
        self._icon_id = None
        self._assignment_rule = None
        self._ebp = None
        self._auto_start = None
        self._group_name = None
        self._group_execution_context = None
        self._sys_in_params = None
        self._sys_out_params = None
        self._in_param_conns = None
        self._out_param_conns = None
        self._sys_in_param_conns = None
        self._sys_out_param_conns = None
        self._user_attributes = None
        if not(hasattr(self, "discriminator")) or not(self.discriminator):
            self.discriminator = 'sub_class'
        self.sub_class = sub_class
        self.id = id
        self.name = name
        if loc_name is not None:
            self.loc_name = loc_name
        self.desc = desc
        if loc_desc is not None:
            self.loc_desc = loc_desc
        if icon_id is not None:
            self.icon_id = icon_id
        self.assignment_rule = assignment_rule
        if ebp is not None:
            self.ebp = ebp
        if auto_start is not None:
            self.auto_start = auto_start
        if group_name is not None:
            self.group_name = group_name
        if group_execution_context is not None:
            self.group_execution_context = group_execution_context
        if sys_in_params is not None:
            self.sys_in_params = sys_in_params
        if sys_out_params is not None:
            self.sys_out_params = sys_out_params
        if in_param_conns is not None:
            self.in_param_conns = in_param_conns
        if out_param_conns is not None:
            self.out_param_conns = out_param_conns
        if sys_in_param_conns is not None:
            self.sys_in_param_conns = sys_in_param_conns
        if sys_out_param_conns is not None:
            self.sys_out_param_conns = sys_out_param_conns
        if user_attributes is not None:
            self.user_attributes = user_attributes
        DummyParent.__init__(self, *args, **kwargs)

    @property
    def sub_class(self):
        """Gets the sub_class of this Node.  # noqa: E501


        :return: The sub_class of this Node.  # noqa: E501
        :rtype: str
        """
        return self._sub_class

    @sub_class.setter
    def sub_class(self, sub_class):
        """Sets the sub_class of this Node.


        :param sub_class: The sub_class of this Node.  # noqa: E501
        :type: str
        """
        if sub_class is None:
            raise ValueError("Invalid value for `sub_class`, must not be `None`")  # noqa: E501

        self._sub_class = sub_class

    @property
    def id(self):
        """Gets the id of this Node.  # noqa: E501


        :return: The id of this Node.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Node.


        :param id: The id of this Node.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this Node.  # noqa: E501


        :return: The name of this Node.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Node.


        :param name: The name of this Node.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def loc_name(self):
        """Gets the loc_name of this Node.  # noqa: E501


        :return: The loc_name of this Node.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._loc_name

    @loc_name.setter
    def loc_name(self, loc_name):
        """Sets the loc_name of this Node.


        :param loc_name: The loc_name of this Node.  # noqa: E501
        :type: dict(str, str)
        """

        self._loc_name = loc_name

    @property
    def desc(self):
        """Gets the desc of this Node.  # noqa: E501


        :return: The desc of this Node.  # noqa: E501
        :rtype: str
        """
        return self._desc

    @desc.setter
    def desc(self, desc):
        """Sets the desc of this Node.


        :param desc: The desc of this Node.  # noqa: E501
        :type: str
        """
        if desc is None:
            raise ValueError("Invalid value for `desc`, must not be `None`")  # noqa: E501

        self._desc = desc

    @property
    def loc_desc(self):
        """Gets the loc_desc of this Node.  # noqa: E501


        :return: The loc_desc of this Node.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._loc_desc

    @loc_desc.setter
    def loc_desc(self, loc_desc):
        """Sets the loc_desc of this Node.


        :param loc_desc: The loc_desc of this Node.  # noqa: E501
        :type: dict(str, str)
        """

        self._loc_desc = loc_desc

    @property
    def icon_id(self):
        """Gets the icon_id of this Node.  # noqa: E501


        :return: The icon_id of this Node.  # noqa: E501
        :rtype: str
        """
        return self._icon_id

    @icon_id.setter
    def icon_id(self, icon_id):
        """Sets the icon_id of this Node.


        :param icon_id: The icon_id of this Node.  # noqa: E501
        :type: str
        """

        self._icon_id = icon_id

    @property
    def assignment_rule(self):
        """Gets the assignment_rule of this Node.  # noqa: E501


        :return: The assignment_rule of this Node.  # noqa: E501
        :rtype: str
        """
        return self._assignment_rule

    @assignment_rule.setter
    def assignment_rule(self, assignment_rule):
        """Sets the assignment_rule of this Node.


        :param assignment_rule: The assignment_rule of this Node.  # noqa: E501
        :type: str
        """
        if assignment_rule is None:
            raise ValueError("Invalid value for `assignment_rule`, must not be `None`")  # noqa: E501

        self._assignment_rule = assignment_rule

    @property
    def ebp(self):
        """Gets the ebp of this Node.  # noqa: E501


        :return: The ebp of this Node.  # noqa: E501
        :rtype: ExecutableBusinessProcess
        """
        return self._ebp

    @ebp.setter
    def ebp(self, ebp):
        """Sets the ebp of this Node.


        :param ebp: The ebp of this Node.  # noqa: E501
        :type: ExecutableBusinessProcess
        """

        self._ebp = ebp

    @property
    def auto_start(self):
        """Gets the auto_start of this Node.  # noqa: E501


        :return: The auto_start of this Node.  # noqa: E501
        :rtype: bool
        """
        return self._auto_start

    @auto_start.setter
    def auto_start(self, auto_start):
        """Sets the auto_start of this Node.


        :param auto_start: The auto_start of this Node.  # noqa: E501
        :type: bool
        """

        self._auto_start = auto_start

    @property
    def group_name(self):
        """Gets the group_name of this Node.  # noqa: E501


        :return: The group_name of this Node.  # noqa: E501
        :rtype: str
        """
        return self._group_name

    @group_name.setter
    def group_name(self, group_name):
        """Sets the group_name of this Node.


        :param group_name: The group_name of this Node.  # noqa: E501
        :type: str
        """

        self._group_name = group_name

    @property
    def group_execution_context(self):
        """Gets the group_execution_context of this Node.  # noqa: E501


        :return: The group_execution_context of this Node.  # noqa: E501
        :rtype: str
        """
        return self._group_execution_context

    @group_execution_context.setter
    def group_execution_context(self, group_execution_context):
        """Sets the group_execution_context of this Node.


        :param group_execution_context: The group_execution_context of this Node.  # noqa: E501
        :type: str
        """

        self._group_execution_context = group_execution_context

    @property
    def sys_in_params(self):
        """Gets the sys_in_params of this Node.  # noqa: E501


        :return: The sys_in_params of this Node.  # noqa: E501
        :rtype: dict(str, ProcessModelParameter)
        """
        return self._sys_in_params

    @sys_in_params.setter
    def sys_in_params(self, sys_in_params):
        """Sets the sys_in_params of this Node.


        :param sys_in_params: The sys_in_params of this Node.  # noqa: E501
        :type: dict(str, ProcessModelParameter)
        """

        self._sys_in_params = sys_in_params

    @property
    def sys_out_params(self):
        """Gets the sys_out_params of this Node.  # noqa: E501


        :return: The sys_out_params of this Node.  # noqa: E501
        :rtype: dict(str, ProcessModelParameter)
        """
        return self._sys_out_params

    @sys_out_params.setter
    def sys_out_params(self, sys_out_params):
        """Sets the sys_out_params of this Node.


        :param sys_out_params: The sys_out_params of this Node.  # noqa: E501
        :type: dict(str, ProcessModelParameter)
        """

        self._sys_out_params = sys_out_params

    @property
    def in_param_conns(self):
        """Gets the in_param_conns of this Node.  # noqa: E501


        :return: The in_param_conns of this Node.  # noqa: E501
        :rtype: dict(str, int)
        """
        return self._in_param_conns

    @in_param_conns.setter
    def in_param_conns(self, in_param_conns):
        """Sets the in_param_conns of this Node.


        :param in_param_conns: The in_param_conns of this Node.  # noqa: E501
        :type: dict(str, int)
        """

        self._in_param_conns = in_param_conns

    @property
    def out_param_conns(self):
        """Gets the out_param_conns of this Node.  # noqa: E501


        :return: The out_param_conns of this Node.  # noqa: E501
        :rtype: dict(str, int)
        """
        return self._out_param_conns

    @out_param_conns.setter
    def out_param_conns(self, out_param_conns):
        """Sets the out_param_conns of this Node.


        :param out_param_conns: The out_param_conns of this Node.  # noqa: E501
        :type: dict(str, int)
        """

        self._out_param_conns = out_param_conns

    @property
    def sys_in_param_conns(self):
        """Gets the sys_in_param_conns of this Node.  # noqa: E501


        :return: The sys_in_param_conns of this Node.  # noqa: E501
        :rtype: dict(str, int)
        """
        return self._sys_in_param_conns

    @sys_in_param_conns.setter
    def sys_in_param_conns(self, sys_in_param_conns):
        """Sets the sys_in_param_conns of this Node.


        :param sys_in_param_conns: The sys_in_param_conns of this Node.  # noqa: E501
        :type: dict(str, int)
        """

        self._sys_in_param_conns = sys_in_param_conns

    @property
    def sys_out_param_conns(self):
        """Gets the sys_out_param_conns of this Node.  # noqa: E501


        :return: The sys_out_param_conns of this Node.  # noqa: E501
        :rtype: dict(str, int)
        """
        return self._sys_out_param_conns

    @sys_out_param_conns.setter
    def sys_out_param_conns(self, sys_out_param_conns):
        """Sets the sys_out_param_conns of this Node.


        :param sys_out_param_conns: The sys_out_param_conns of this Node.  # noqa: E501
        :type: dict(str, int)
        """

        self._sys_out_param_conns = sys_out_param_conns

    @property
    def user_attributes(self):
        """Gets the user_attributes of this Node.  # noqa: E501


        :return: The user_attributes of this Node.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._user_attributes

    @user_attributes.setter
    def user_attributes(self, user_attributes):
        """Sets the user_attributes of this Node.


        :param user_attributes: The user_attributes of this Node.  # noqa: E501
        :type: dict(str, str)
        """

        self._user_attributes = user_attributes

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_value = data[self.attribute_map[self.discriminator]]
        return discriminator_value if not(self.__class__.__name__ == discriminator_value) else None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Node, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Node):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
