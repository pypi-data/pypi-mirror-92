# coding: utf-8

"""
    Oliver API

    Oliver web API service  # noqa: E501

    OpenAPI spec version: 4.1.0
    Contact: api@behavioralsignals.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ResultJSONKpi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'escalation': 'bool',
        'resolution': 'bool',
        'agentperfscore': 'float',
        'satisfaction': 'float',
        'propensity': 'float',
        'success': 'float',
        'negativity': 'float',
        'trends': 'ResultJSONKpiTrends',
        'compliance': 'ResultJSONKpiCompliance'
    }

    attribute_map = {
        'escalation': 'escalation',
        'resolution': 'resolution',
        'agentperfscore': 'agentperfscore',
        'satisfaction': 'satisfaction',
        'propensity': 'propensity',
        'success': 'success',
        'negativity': 'negativity',
        'trends': 'trends',
        'compliance': 'compliance'
    }

    def __init__(self, escalation=None, resolution=None, agentperfscore=None, satisfaction=None, propensity=None, success=None, negativity=None, trends=None, compliance=None):  # noqa: E501
        """ResultJSONKpi - a model defined in Swagger"""  # noqa: E501
        self._escalation = None
        self._resolution = None
        self._agentperfscore = None
        self._satisfaction = None
        self._propensity = None
        self._success = None
        self._negativity = None
        self._trends = None
        self._compliance = None
        self.discriminator = None
        if escalation is not None:
            self.escalation = escalation
        if resolution is not None:
            self.resolution = resolution
        if agentperfscore is not None:
            self.agentperfscore = agentperfscore
        if satisfaction is not None:
            self.satisfaction = satisfaction
        if propensity is not None:
            self.propensity = propensity
        if success is not None:
            self.success = success
        if negativity is not None:
            self.negativity = negativity
        if trends is not None:
            self.trends = trends
        if compliance is not None:
            self.compliance = compliance

    @property
    def escalation(self):
        """Gets the escalation of this ResultJSONKpi.  # noqa: E501

        Escalation during the call, e.g., negative emotions are on the rise  # noqa: E501

        :return: The escalation of this ResultJSONKpi.  # noqa: E501
        :rtype: bool
        """
        return self._escalation

    @escalation.setter
    def escalation(self, escalation):
        """Sets the escalation of this ResultJSONKpi.

        Escalation during the call, e.g., negative emotions are on the rise  # noqa: E501

        :param escalation: The escalation of this ResultJSONKpi.  # noqa: E501
        :type: bool
        """

        self._escalation = escalation

    @property
    def resolution(self):
        """Gets the resolution of this ResultJSONKpi.  # noqa: E501

        Resolution during the call, e.g., negative emotions are falling  # noqa: E501

        :return: The resolution of this ResultJSONKpi.  # noqa: E501
        :rtype: bool
        """
        return self._resolution

    @resolution.setter
    def resolution(self, resolution):
        """Sets the resolution of this ResultJSONKpi.

        Resolution during the call, e.g., negative emotions are falling  # noqa: E501

        :param resolution: The resolution of this ResultJSONKpi.  # noqa: E501
        :type: bool
        """

        self._resolution = resolution

    @property
    def agentperfscore(self):
        """Gets the agentperfscore of this ResultJSONKpi.  # noqa: E501

        Agent performance score, normalized between 0 (bad)  and 1 (excellent)  # noqa: E501

        :return: The agentperfscore of this ResultJSONKpi.  # noqa: E501
        :rtype: float
        """
        return self._agentperfscore

    @agentperfscore.setter
    def agentperfscore(self, agentperfscore):
        """Sets the agentperfscore of this ResultJSONKpi.

        Agent performance score, normalized between 0 (bad)  and 1 (excellent)  # noqa: E501

        :param agentperfscore: The agentperfscore of this ResultJSONKpi.  # noqa: E501
        :type: float
        """

        self._agentperfscore = agentperfscore

    @property
    def satisfaction(self):
        """Gets the satisfaction of this ResultJSONKpi.  # noqa: E501

        Customer satisfaction, normalized between 0 and 1 (100% satisfied)  # noqa: E501

        :return: The satisfaction of this ResultJSONKpi.  # noqa: E501
        :rtype: float
        """
        return self._satisfaction

    @satisfaction.setter
    def satisfaction(self, satisfaction):
        """Sets the satisfaction of this ResultJSONKpi.

        Customer satisfaction, normalized between 0 and 1 (100% satisfied)  # noqa: E501

        :param satisfaction: The satisfaction of this ResultJSONKpi.  # noqa: E501
        :type: float
        """

        self._satisfaction = satisfaction

    @property
    def propensity(self):
        """Gets the propensity of this ResultJSONKpi.  # noqa: E501

        Propensity to buy/donate, normalized between 0 (no sale) and 1 (sale)  # noqa: E501

        :return: The propensity of this ResultJSONKpi.  # noqa: E501
        :rtype: float
        """
        return self._propensity

    @propensity.setter
    def propensity(self, propensity):
        """Sets the propensity of this ResultJSONKpi.

        Propensity to buy/donate, normalized between 0 (no sale) and 1 (sale)  # noqa: E501

        :param propensity: The propensity of this ResultJSONKpi.  # noqa: E501
        :type: float
        """

        self._propensity = propensity

    @property
    def success(self):
        """Gets the success of this ResultJSONKpi.  # noqa: E501

        Call success, normalized between 0 (fail) and 1 (success)  # noqa: E501

        :return: The success of this ResultJSONKpi.  # noqa: E501
        :rtype: float
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this ResultJSONKpi.

        Call success, normalized between 0 (fail) and 1 (success)  # noqa: E501

        :param success: The success of this ResultJSONKpi.  # noqa: E501
        :type: float
        """

        self._success = success

    @property
    def negativity(self):
        """Gets the negativity of this ResultJSONKpi.  # noqa: E501

        Probability that the call contains negative emotions  # noqa: E501

        :return: The negativity of this ResultJSONKpi.  # noqa: E501
        :rtype: float
        """
        return self._negativity

    @negativity.setter
    def negativity(self, negativity):
        """Sets the negativity of this ResultJSONKpi.

        Probability that the call contains negative emotions  # noqa: E501

        :param negativity: The negativity of this ResultJSONKpi.  # noqa: E501
        :type: float
        """

        self._negativity = negativity

    @property
    def trends(self):
        """Gets the trends of this ResultJSONKpi.  # noqa: E501


        :return: The trends of this ResultJSONKpi.  # noqa: E501
        :rtype: ResultJSONKpiTrends
        """
        return self._trends

    @trends.setter
    def trends(self, trends):
        """Sets the trends of this ResultJSONKpi.


        :param trends: The trends of this ResultJSONKpi.  # noqa: E501
        :type: ResultJSONKpiTrends
        """

        self._trends = trends

    @property
    def compliance(self):
        """Gets the compliance of this ResultJSONKpi.  # noqa: E501


        :return: The compliance of this ResultJSONKpi.  # noqa: E501
        :rtype: ResultJSONKpiCompliance
        """
        return self._compliance

    @compliance.setter
    def compliance(self, compliance):
        """Sets the compliance of this ResultJSONKpi.


        :param compliance: The compliance of this ResultJSONKpi.  # noqa: E501
        :type: ResultJSONKpiCompliance
        """

        self._compliance = compliance

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ResultJSONKpi, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResultJSONKpi):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
