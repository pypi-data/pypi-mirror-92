# coding: utf-8

"""
    Oliver API

    Oliver web API service  # noqa: E501

    OpenAPI spec version: 4.1.0
    Contact: api@behavioralsignals.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ResultJSONCore(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'behaviors': 'list[ResultJSONCoreBehaviors]',
        'diarization': 'ResultJSONCoreDiarization',
        'strength': 'ResultJSONCoreStrength',
        'positivity': 'ResultJSONCorePositivity',
        'emotions': 'ResultJSONCoreEmotions',
        'engagement': 'ResultJSONCoreEngagement',
        'politeness': 'ResultJSONCorePoliteness',
        'empathy': 'ResultJSONCoreEmpathy',
        'soundquality': 'ResultJSONCoreSoundquality'
    }

    attribute_map = {
        'behaviors': 'behaviors',
        'diarization': 'diarization',
        'strength': 'strength',
        'positivity': 'positivity',
        'emotions': 'emotions',
        'engagement': 'engagement',
        'politeness': 'politeness',
        'empathy': 'empathy',
        'soundquality': 'soundquality'
    }

    def __init__(self, behaviors=None, diarization=None, strength=None, positivity=None, emotions=None, engagement=None, politeness=None, empathy=None, soundquality=None):  # noqa: E501
        """ResultJSONCore - a model defined in Swagger"""  # noqa: E501
        self._behaviors = None
        self._diarization = None
        self._strength = None
        self._positivity = None
        self._emotions = None
        self._engagement = None
        self._politeness = None
        self._empathy = None
        self._soundquality = None
        self.discriminator = None
        if behaviors is not None:
            self.behaviors = behaviors
        if diarization is not None:
            self.diarization = diarization
        if strength is not None:
            self.strength = strength
        if positivity is not None:
            self.positivity = positivity
        if emotions is not None:
            self.emotions = emotions
        if engagement is not None:
            self.engagement = engagement
        if politeness is not None:
            self.politeness = politeness
        if empathy is not None:
            self.empathy = empathy
        if soundquality is not None:
            self.soundquality = soundquality

    @property
    def behaviors(self):
        """Gets the behaviors of this ResultJSONCore.  # noqa: E501

        Contains all aggregated behavior predictions for all classification tasks  # noqa: E501

        :return: The behaviors of this ResultJSONCore.  # noqa: E501
        :rtype: list[ResultJSONCoreBehaviors]
        """
        return self._behaviors

    @behaviors.setter
    def behaviors(self, behaviors):
        """Sets the behaviors of this ResultJSONCore.

        Contains all aggregated behavior predictions for all classification tasks  # noqa: E501

        :param behaviors: The behaviors of this ResultJSONCore.  # noqa: E501
        :type: list[ResultJSONCoreBehaviors]
        """

        self._behaviors = behaviors

    @property
    def diarization(self):
        """Gets the diarization of this ResultJSONCore.  # noqa: E501


        :return: The diarization of this ResultJSONCore.  # noqa: E501
        :rtype: ResultJSONCoreDiarization
        """
        return self._diarization

    @diarization.setter
    def diarization(self, diarization):
        """Sets the diarization of this ResultJSONCore.


        :param diarization: The diarization of this ResultJSONCore.  # noqa: E501
        :type: ResultJSONCoreDiarization
        """

        self._diarization = diarization

    @property
    def strength(self):
        """Gets the strength of this ResultJSONCore.  # noqa: E501


        :return: The strength of this ResultJSONCore.  # noqa: E501
        :rtype: ResultJSONCoreStrength
        """
        return self._strength

    @strength.setter
    def strength(self, strength):
        """Sets the strength of this ResultJSONCore.


        :param strength: The strength of this ResultJSONCore.  # noqa: E501
        :type: ResultJSONCoreStrength
        """

        self._strength = strength

    @property
    def positivity(self):
        """Gets the positivity of this ResultJSONCore.  # noqa: E501


        :return: The positivity of this ResultJSONCore.  # noqa: E501
        :rtype: ResultJSONCorePositivity
        """
        return self._positivity

    @positivity.setter
    def positivity(self, positivity):
        """Sets the positivity of this ResultJSONCore.


        :param positivity: The positivity of this ResultJSONCore.  # noqa: E501
        :type: ResultJSONCorePositivity
        """

        self._positivity = positivity

    @property
    def emotions(self):
        """Gets the emotions of this ResultJSONCore.  # noqa: E501


        :return: The emotions of this ResultJSONCore.  # noqa: E501
        :rtype: ResultJSONCoreEmotions
        """
        return self._emotions

    @emotions.setter
    def emotions(self, emotions):
        """Sets the emotions of this ResultJSONCore.


        :param emotions: The emotions of this ResultJSONCore.  # noqa: E501
        :type: ResultJSONCoreEmotions
        """

        self._emotions = emotions

    @property
    def engagement(self):
        """Gets the engagement of this ResultJSONCore.  # noqa: E501


        :return: The engagement of this ResultJSONCore.  # noqa: E501
        :rtype: ResultJSONCoreEngagement
        """
        return self._engagement

    @engagement.setter
    def engagement(self, engagement):
        """Sets the engagement of this ResultJSONCore.


        :param engagement: The engagement of this ResultJSONCore.  # noqa: E501
        :type: ResultJSONCoreEngagement
        """

        self._engagement = engagement

    @property
    def politeness(self):
        """Gets the politeness of this ResultJSONCore.  # noqa: E501


        :return: The politeness of this ResultJSONCore.  # noqa: E501
        :rtype: ResultJSONCorePoliteness
        """
        return self._politeness

    @politeness.setter
    def politeness(self, politeness):
        """Sets the politeness of this ResultJSONCore.


        :param politeness: The politeness of this ResultJSONCore.  # noqa: E501
        :type: ResultJSONCorePoliteness
        """

        self._politeness = politeness

    @property
    def empathy(self):
        """Gets the empathy of this ResultJSONCore.  # noqa: E501


        :return: The empathy of this ResultJSONCore.  # noqa: E501
        :rtype: ResultJSONCoreEmpathy
        """
        return self._empathy

    @empathy.setter
    def empathy(self, empathy):
        """Sets the empathy of this ResultJSONCore.


        :param empathy: The empathy of this ResultJSONCore.  # noqa: E501
        :type: ResultJSONCoreEmpathy
        """

        self._empathy = empathy

    @property
    def soundquality(self):
        """Gets the soundquality of this ResultJSONCore.  # noqa: E501


        :return: The soundquality of this ResultJSONCore.  # noqa: E501
        :rtype: ResultJSONCoreSoundquality
        """
        return self._soundquality

    @soundquality.setter
    def soundquality(self, soundquality):
        """Sets the soundquality of this ResultJSONCore.


        :param soundquality: The soundquality of this ResultJSONCore.  # noqa: E501
        :type: ResultJSONCoreSoundquality
        """

        self._soundquality = soundquality

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ResultJSONCore, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResultJSONCore):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
