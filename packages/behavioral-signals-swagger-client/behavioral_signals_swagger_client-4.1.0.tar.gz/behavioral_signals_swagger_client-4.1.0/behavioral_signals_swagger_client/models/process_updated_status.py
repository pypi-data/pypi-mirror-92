# coding: utf-8

"""
    Oliver API

    Oliver web API service  # noqa: E501

    OpenAPI spec version: 4.1.0
    Contact: api@behavioralsignals.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProcessUpdatedStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'pid': 'int',
        'status': 'int',
        'message': 'str'
    }

    attribute_map = {
        'pid': 'pid',
        'status': 'status',
        'message': 'message'
    }

    def __init__(self, pid=None, status=None, message=None):  # noqa: E501
        """ProcessUpdatedStatus - a model defined in Swagger"""  # noqa: E501
        self._pid = None
        self._status = None
        self._message = None
        self.discriminator = None
        self.pid = pid
        self.status = status
        self.message = message

    @property
    def pid(self):
        """Gets the pid of this ProcessUpdatedStatus.  # noqa: E501

        Unique ID for the processing job  # noqa: E501

        :return: The pid of this ProcessUpdatedStatus.  # noqa: E501
        :rtype: int
        """
        return self._pid

    @pid.setter
    def pid(self, pid):
        """Sets the pid of this ProcessUpdatedStatus.

        Unique ID for the processing job  # noqa: E501

        :param pid: The pid of this ProcessUpdatedStatus.  # noqa: E501
        :type: int
        """
        if pid is None:
            raise ValueError("Invalid value for `pid`, must not be `None`")  # noqa: E501

        self._pid = pid

    @property
    def status(self):
        """Gets the status of this ProcessUpdatedStatus.  # noqa: E501

        Shows the status of the job ufter update  # noqa: E501

        :return: The status of this ProcessUpdatedStatus.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ProcessUpdatedStatus.

        Shows the status of the job ufter update  # noqa: E501

        :param status: The status of this ProcessUpdatedStatus.  # noqa: E501
        :type: int
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def message(self):
        """Gets the message of this ProcessUpdatedStatus.  # noqa: E501

        A message with update detail  # noqa: E501

        :return: The message of this ProcessUpdatedStatus.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ProcessUpdatedStatus.

        A message with update detail  # noqa: E501

        :param message: The message of this ProcessUpdatedStatus.  # noqa: E501
        :type: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")  # noqa: E501

        self._message = message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProcessUpdatedStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProcessUpdatedStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
