# -*- coding: utf-8 -*-

"""
    apimaticcalculatorlatest

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""

import apimaticcalculatorlatest.models.manual_policies

class ManualPolicy(object):

    """Implementation of the 'ManualPolicy' model.

    TODO: type model description here.

    Attributes:
        mtype (ManualPolicyTypeEnum): TODO: type description here.
        manual_policies (list of ManualPolicies): Model

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "mtype":'type',
        "manual_policies":'manualPolicies'
    }

    def __init__(self,
                 mtype=None,
                 manual_policies=None):
        """Constructor for the ManualPolicy class"""

        # Initialize members of the class
        self.mtype = mtype
        self.manual_policies = manual_policies


    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        mtype = dictionary.get('type')
        manual_policies = None
        if dictionary.get('manualPolicies') != None:
            manual_policies = list()
            for structure in dictionary.get('manualPolicies'):
                manual_policies.append(apimaticcalculatorlatest.models.manual_policies.ManualPolicies.from_dictionary(structure))

        # Return an object of this model
        return cls(mtype,
                   manual_policies)


