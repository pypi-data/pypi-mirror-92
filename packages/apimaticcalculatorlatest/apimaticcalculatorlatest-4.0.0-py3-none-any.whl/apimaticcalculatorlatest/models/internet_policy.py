# -*- coding: utf-8 -*-

"""
    apimaticcalculatorlatest

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""


class InternetPolicy(object):

    """Implementation of the 'InternetPolicy' model.

    TODO: type model description here.

    Attributes:
        access_internet (bool): Access internet into properties
        kind_of_internet (KindofInternetTypeEnum): TODO: type description
            here.
        available_internet (AvailableInternetEnum): TODO: type description
            here.
        charge_internet (string): Charge internet. Example: “Free”, “$ 100”.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "access_internet":'accessInternet',
        "kind_of_internet":'kindOfInternet',
        "available_internet":'availableInternet',
        "charge_internet":'chargeInternet'
    }

    def __init__(self,
                 access_internet=None,
                 kind_of_internet=None,
                 available_internet=None,
                 charge_internet=None):
        """Constructor for the InternetPolicy class"""

        # Initialize members of the class
        self.access_internet = access_internet
        self.kind_of_internet = kind_of_internet
        self.available_internet = available_internet
        self.charge_internet = charge_internet


    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        access_internet = dictionary.get('accessInternet')
        kind_of_internet = dictionary.get('kindOfInternet')
        available_internet = dictionary.get('availableInternet')
        charge_internet = dictionary.get('chargeInternet')

        # Return an object of this model
        return cls(access_internet,
                   kind_of_internet,
                   available_internet,
                   charge_internet)


