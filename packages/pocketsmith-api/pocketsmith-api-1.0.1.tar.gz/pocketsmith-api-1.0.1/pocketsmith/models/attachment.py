# coding: utf-8

"""
    PocketSmith

    The public PocketSmith API  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: api@pocketsmith.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pocketsmith.configuration import Configuration


class Attachment(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'content_type': 'str',
        'content_type_meta': 'AttachmentContentTypeMeta',
        'created_at': 'datetime',
        'file_name': 'str',
        'id': 'int',
        'original_url': 'str',
        'title': 'str',
        'type': 'str',
        'updated_at': 'datetime',
        'variants': 'AttachmentVariants'
    }

    attribute_map = {
        'content_type': 'content_type',
        'content_type_meta': 'content_type_meta',
        'created_at': 'created_at',
        'file_name': 'file_name',
        'id': 'id',
        'original_url': 'original_url',
        'title': 'title',
        'type': 'type',
        'updated_at': 'updated_at',
        'variants': 'variants'
    }

    def __init__(self, content_type=None, content_type_meta=None, created_at=None, file_name=None, id=None, original_url=None, title=None, type=None, updated_at=None, variants=None, local_vars_configuration=None):  # noqa: E501
        """Attachment - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._content_type = None
        self._content_type_meta = None
        self._created_at = None
        self._file_name = None
        self._id = None
        self._original_url = None
        self._title = None
        self._type = None
        self._updated_at = None
        self._variants = None
        self.discriminator = None

        if content_type is not None:
            self.content_type = content_type
        if content_type_meta is not None:
            self.content_type_meta = content_type_meta
        if created_at is not None:
            self.created_at = created_at
        if file_name is not None:
            self.file_name = file_name
        if id is not None:
            self.id = id
        if original_url is not None:
            self.original_url = original_url
        if title is not None:
            self.title = title
        if type is not None:
            self.type = type
        if updated_at is not None:
            self.updated_at = updated_at
        if variants is not None:
            self.variants = variants

    @property
    def content_type(self):
        """Gets the content_type of this Attachment.  # noqa: E501

        The content type of the attachment.  # noqa: E501

        :return: The content_type of this Attachment.  # noqa: E501
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this Attachment.

        The content type of the attachment.  # noqa: E501

        :param content_type: The content_type of this Attachment.  # noqa: E501
        :type: str
        """

        self._content_type = content_type

    @property
    def content_type_meta(self):
        """Gets the content_type_meta of this Attachment.  # noqa: E501


        :return: The content_type_meta of this Attachment.  # noqa: E501
        :rtype: AttachmentContentTypeMeta
        """
        return self._content_type_meta

    @content_type_meta.setter
    def content_type_meta(self, content_type_meta):
        """Sets the content_type_meta of this Attachment.


        :param content_type_meta: The content_type_meta of this Attachment.  # noqa: E501
        :type: AttachmentContentTypeMeta
        """

        self._content_type_meta = content_type_meta

    @property
    def created_at(self):
        """Gets the created_at of this Attachment.  # noqa: E501

        When the attachment was created  # noqa: E501

        :return: The created_at of this Attachment.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Attachment.

        When the attachment was created  # noqa: E501

        :param created_at: The created_at of this Attachment.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def file_name(self):
        """Gets the file_name of this Attachment.  # noqa: E501

        The file name of the attachment  # noqa: E501

        :return: The file_name of this Attachment.  # noqa: E501
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this Attachment.

        The file name of the attachment  # noqa: E501

        :param file_name: The file_name of this Attachment.  # noqa: E501
        :type: str
        """

        self._file_name = file_name

    @property
    def id(self):
        """Gets the id of this Attachment.  # noqa: E501

        The unique identifier of the attachment  # noqa: E501

        :return: The id of this Attachment.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Attachment.

        The unique identifier of the attachment  # noqa: E501

        :param id: The id of this Attachment.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def original_url(self):
        """Gets the original_url of this Attachment.  # noqa: E501

        The url of the attachment  # noqa: E501

        :return: The original_url of this Attachment.  # noqa: E501
        :rtype: str
        """
        return self._original_url

    @original_url.setter
    def original_url(self, original_url):
        """Sets the original_url of this Attachment.

        The url of the attachment  # noqa: E501

        :param original_url: The original_url of this Attachment.  # noqa: E501
        :type: str
        """

        self._original_url = original_url

    @property
    def title(self):
        """Gets the title of this Attachment.  # noqa: E501

        The title of the attachment. If blank or not provided, the title will be derived from the file name.  # noqa: E501

        :return: The title of this Attachment.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Attachment.

        The title of the attachment. If blank or not provided, the title will be derived from the file name.  # noqa: E501

        :param title: The title of this Attachment.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def type(self):
        """Gets the type of this Attachment.  # noqa: E501

        The type of attachment  # noqa: E501

        :return: The type of this Attachment.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Attachment.

        The type of attachment  # noqa: E501

        :param type: The type of this Attachment.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def updated_at(self):
        """Gets the updated_at of this Attachment.  # noqa: E501

        When the attachment was last updated  # noqa: E501

        :return: The updated_at of this Attachment.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Attachment.

        When the attachment was last updated  # noqa: E501

        :param updated_at: The updated_at of this Attachment.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def variants(self):
        """Gets the variants of this Attachment.  # noqa: E501


        :return: The variants of this Attachment.  # noqa: E501
        :rtype: AttachmentVariants
        """
        return self._variants

    @variants.setter
    def variants(self, variants):
        """Sets the variants of this Attachment.


        :param variants: The variants of this Attachment.  # noqa: E501
        :type: AttachmentVariants
        """

        self._variants = variants

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Attachment):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Attachment):
            return True

        return self.to_dict() != other.to_dict()
