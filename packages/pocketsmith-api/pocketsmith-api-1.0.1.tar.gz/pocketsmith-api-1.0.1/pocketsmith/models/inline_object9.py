# coding: utf-8

"""
    PocketSmith

    The public PocketSmith API  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: api@pocketsmith.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pocketsmith.configuration import Configuration


class InlineObject9(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'always_show_base_currency': 'bool',
        'base_currency_code': 'str',
        'beta_user': 'bool',
        'email': 'str',
        'name': 'str',
        'time_zone': 'str',
        'week_start_day': 'int'
    }

    attribute_map = {
        'always_show_base_currency': 'always_show_base_currency',
        'base_currency_code': 'base_currency_code',
        'beta_user': 'beta_user',
        'email': 'email',
        'name': 'name',
        'time_zone': 'time_zone',
        'week_start_day': 'week_start_day'
    }

    def __init__(self, always_show_base_currency=None, base_currency_code=None, beta_user=None, email=None, name=None, time_zone=None, week_start_day=None, local_vars_configuration=None):  # noqa: E501
        """InlineObject9 - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._always_show_base_currency = None
        self._base_currency_code = None
        self._beta_user = None
        self._email = None
        self._name = None
        self._time_zone = None
        self._week_start_day = None
        self.discriminator = None

        if always_show_base_currency is not None:
            self.always_show_base_currency = always_show_base_currency
        if base_currency_code is not None:
            self.base_currency_code = base_currency_code
        if beta_user is not None:
            self.beta_user = beta_user
        if email is not None:
            self.email = email
        if name is not None:
            self.name = name
        if time_zone is not None:
            self.time_zone = time_zone
        if week_start_day is not None:
            self.week_start_day = week_start_day

    @property
    def always_show_base_currency(self):
        """Gets the always_show_base_currency of this InlineObject9.  # noqa: E501

        Whether the user wishes to have all monetary values converted to their base currency.  # noqa: E501

        :return: The always_show_base_currency of this InlineObject9.  # noqa: E501
        :rtype: bool
        """
        return self._always_show_base_currency

    @always_show_base_currency.setter
    def always_show_base_currency(self, always_show_base_currency):
        """Sets the always_show_base_currency of this InlineObject9.

        Whether the user wishes to have all monetary values converted to their base currency.  # noqa: E501

        :param always_show_base_currency: The always_show_base_currency of this InlineObject9.  # noqa: E501
        :type: bool
        """

        self._always_show_base_currency = always_show_base_currency

    @property
    def base_currency_code(self):
        """Gets the base_currency_code of this InlineObject9.  # noqa: E501

        A new base currency code for the user.  # noqa: E501

        :return: The base_currency_code of this InlineObject9.  # noqa: E501
        :rtype: str
        """
        return self._base_currency_code

    @base_currency_code.setter
    def base_currency_code(self, base_currency_code):
        """Sets the base_currency_code of this InlineObject9.

        A new base currency code for the user.  # noqa: E501

        :param base_currency_code: The base_currency_code of this InlineObject9.  # noqa: E501
        :type: str
        """

        self._base_currency_code = base_currency_code

    @property
    def beta_user(self):
        """Gets the beta_user of this InlineObject9.  # noqa: E501

        Whether the user is a beta user, and wishes to try out new features.  # noqa: E501

        :return: The beta_user of this InlineObject9.  # noqa: E501
        :rtype: bool
        """
        return self._beta_user

    @beta_user.setter
    def beta_user(self, beta_user):
        """Sets the beta_user of this InlineObject9.

        Whether the user is a beta user, and wishes to try out new features.  # noqa: E501

        :param beta_user: The beta_user of this InlineObject9.  # noqa: E501
        :type: bool
        """

        self._beta_user = beta_user

    @property
    def email(self):
        """Gets the email of this InlineObject9.  # noqa: E501

        A new email address for the user.  # noqa: E501

        :return: The email of this InlineObject9.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this InlineObject9.

        A new email address for the user.  # noqa: E501

        :param email: The email of this InlineObject9.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def name(self):
        """Gets the name of this InlineObject9.  # noqa: E501

        A new name for the user.  # noqa: E501

        :return: The name of this InlineObject9.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineObject9.

        A new name for the user.  # noqa: E501

        :param name: The name of this InlineObject9.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def time_zone(self):
        """Gets the time_zone of this InlineObject9.  # noqa: E501

        A new time zone for the user.  # noqa: E501

        :return: The time_zone of this InlineObject9.  # noqa: E501
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this InlineObject9.

        A new time zone for the user.  # noqa: E501

        :param time_zone: The time_zone of this InlineObject9.  # noqa: E501
        :type: str
        """

        self._time_zone = time_zone

    @property
    def week_start_day(self):
        """Gets the week_start_day of this InlineObject9.  # noqa: E501

        The day of the week the user wishes their calendars to start on. A number between 0 and 6, where 0 is Sunday and 6 is Saturday.  # noqa: E501

        :return: The week_start_day of this InlineObject9.  # noqa: E501
        :rtype: int
        """
        return self._week_start_day

    @week_start_day.setter
    def week_start_day(self, week_start_day):
        """Sets the week_start_day of this InlineObject9.

        The day of the week the user wishes their calendars to start on. A number between 0 and 6, where 0 is Sunday and 6 is Saturday.  # noqa: E501

        :param week_start_day: The week_start_day of this InlineObject9.  # noqa: E501
        :type: int
        """

        self._week_start_day = week_start_day

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineObject9):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineObject9):
            return True

        return self.to_dict() != other.to_dict()
