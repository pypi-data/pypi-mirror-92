# coding: utf-8

"""
    PocketSmith

    The public PocketSmith API  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: api@pocketsmith.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pocketsmith.configuration import Configuration


class BudgetAnalysisPackage(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'category': 'Category',
        'expense': 'BudgetAnalysis',
        'income': 'BudgetAnalysis',
        'is_transfer': 'bool'
    }

    attribute_map = {
        'category': 'category',
        'expense': 'expense',
        'income': 'income',
        'is_transfer': 'is_transfer'
    }

    def __init__(self, category=None, expense=None, income=None, is_transfer=None, local_vars_configuration=None):  # noqa: E501
        """BudgetAnalysisPackage - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._category = None
        self._expense = None
        self._income = None
        self._is_transfer = None
        self.discriminator = None

        if category is not None:
            self.category = category
        if expense is not None:
            self.expense = expense
        if income is not None:
            self.income = income
        if is_transfer is not None:
            self.is_transfer = is_transfer

    @property
    def category(self):
        """Gets the category of this BudgetAnalysisPackage.  # noqa: E501


        :return: The category of this BudgetAnalysisPackage.  # noqa: E501
        :rtype: Category
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this BudgetAnalysisPackage.


        :param category: The category of this BudgetAnalysisPackage.  # noqa: E501
        :type: Category
        """

        self._category = category

    @property
    def expense(self):
        """Gets the expense of this BudgetAnalysisPackage.  # noqa: E501


        :return: The expense of this BudgetAnalysisPackage.  # noqa: E501
        :rtype: BudgetAnalysis
        """
        return self._expense

    @expense.setter
    def expense(self, expense):
        """Sets the expense of this BudgetAnalysisPackage.


        :param expense: The expense of this BudgetAnalysisPackage.  # noqa: E501
        :type: BudgetAnalysis
        """

        self._expense = expense

    @property
    def income(self):
        """Gets the income of this BudgetAnalysisPackage.  # noqa: E501


        :return: The income of this BudgetAnalysisPackage.  # noqa: E501
        :rtype: BudgetAnalysis
        """
        return self._income

    @income.setter
    def income(self, income):
        """Sets the income of this BudgetAnalysisPackage.


        :param income: The income of this BudgetAnalysisPackage.  # noqa: E501
        :type: BudgetAnalysis
        """

        self._income = income

    @property
    def is_transfer(self):
        """Gets the is_transfer of this BudgetAnalysisPackage.  # noqa: E501

        Whether the expense budget analysis looks like a transfer to the income budget analysis, based on a number of heuristics.  # noqa: E501

        :return: The is_transfer of this BudgetAnalysisPackage.  # noqa: E501
        :rtype: bool
        """
        return self._is_transfer

    @is_transfer.setter
    def is_transfer(self, is_transfer):
        """Sets the is_transfer of this BudgetAnalysisPackage.

        Whether the expense budget analysis looks like a transfer to the income budget analysis, based on a number of heuristics.  # noqa: E501

        :param is_transfer: The is_transfer of this BudgetAnalysisPackage.  # noqa: E501
        :type: bool
        """

        self._is_transfer = is_transfer

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BudgetAnalysisPackage):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BudgetAnalysisPackage):
            return True

        return self.to_dict() != other.to_dict()
