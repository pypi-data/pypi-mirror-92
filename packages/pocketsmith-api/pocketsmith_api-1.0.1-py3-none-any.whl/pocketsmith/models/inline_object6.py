# coding: utf-8

"""
    PocketSmith

    The public PocketSmith API  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: api@pocketsmith.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pocketsmith.configuration import Configuration


class InlineObject6(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'amount': 'float',
        'category_id': 'int',
        'cheque_number': 'str',
        'date': 'str',
        'is_transfer': 'bool',
        'labels': 'str',
        'memo': 'str',
        'note': 'str',
        'payee': 'str'
    }

    attribute_map = {
        'amount': 'amount',
        'category_id': 'category_id',
        'cheque_number': 'cheque_number',
        'date': 'date',
        'is_transfer': 'is_transfer',
        'labels': 'labels',
        'memo': 'memo',
        'note': 'note',
        'payee': 'payee'
    }

    def __init__(self, amount=None, category_id=None, cheque_number=None, date=None, is_transfer=None, labels=None, memo=None, note=None, payee=None, local_vars_configuration=None):  # noqa: E501
        """InlineObject6 - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._amount = None
        self._category_id = None
        self._cheque_number = None
        self._date = None
        self._is_transfer = None
        self._labels = None
        self._memo = None
        self._note = None
        self._payee = None
        self.discriminator = None

        self.amount = amount
        if category_id is not None:
            self.category_id = category_id
        if cheque_number is not None:
            self.cheque_number = cheque_number
        self.date = date
        if is_transfer is not None:
            self.is_transfer = is_transfer
        if labels is not None:
            self.labels = labels
        if memo is not None:
            self.memo = memo
        if note is not None:
            self.note = note
        self.payee = payee

    @property
    def amount(self):
        """Gets the amount of this InlineObject6.  # noqa: E501

        The amount of the transaction. A positive amount is a credit, and a negative amount is a debit.  # noqa: E501

        :return: The amount of this InlineObject6.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this InlineObject6.

        The amount of the transaction. A positive amount is a credit, and a negative amount is a debit.  # noqa: E501

        :param amount: The amount of this InlineObject6.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and amount is None:  # noqa: E501
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def category_id(self):
        """Gets the category_id of this InlineObject6.  # noqa: E501

        The unique identifier of a category for the transaction.  # noqa: E501

        :return: The category_id of this InlineObject6.  # noqa: E501
        :rtype: int
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this InlineObject6.

        The unique identifier of a category for the transaction.  # noqa: E501

        :param category_id: The category_id of this InlineObject6.  # noqa: E501
        :type: int
        """

        self._category_id = category_id

    @property
    def cheque_number(self):
        """Gets the cheque_number of this InlineObject6.  # noqa: E501

        A cheque number for the transaction.  # noqa: E501

        :return: The cheque_number of this InlineObject6.  # noqa: E501
        :rtype: str
        """
        return self._cheque_number

    @cheque_number.setter
    def cheque_number(self, cheque_number):
        """Sets the cheque_number of this InlineObject6.

        A cheque number for the transaction.  # noqa: E501

        :param cheque_number: The cheque_number of this InlineObject6.  # noqa: E501
        :type: str
        """

        self._cheque_number = cheque_number

    @property
    def date(self):
        """Gets the date of this InlineObject6.  # noqa: E501

        The date when the transaction occurred.  # noqa: E501

        :return: The date of this InlineObject6.  # noqa: E501
        :rtype: str
        """
        return self._date

    @date.setter
    def date(self, date):
        """Sets the date of this InlineObject6.

        The date when the transaction occurred.  # noqa: E501

        :param date: The date of this InlineObject6.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and date is None:  # noqa: E501
            raise ValueError("Invalid value for `date`, must not be `None`")  # noqa: E501

        self._date = date

    @property
    def is_transfer(self):
        """Gets the is_transfer of this InlineObject6.  # noqa: E501

        Whether the transaction should be indicated as a transfer.  # noqa: E501

        :return: The is_transfer of this InlineObject6.  # noqa: E501
        :rtype: bool
        """
        return self._is_transfer

    @is_transfer.setter
    def is_transfer(self, is_transfer):
        """Sets the is_transfer of this InlineObject6.

        Whether the transaction should be indicated as a transfer.  # noqa: E501

        :param is_transfer: The is_transfer of this InlineObject6.  # noqa: E501
        :type: bool
        """

        self._is_transfer = is_transfer

    @property
    def labels(self):
        """Gets the labels of this InlineObject6.  # noqa: E501

        A set of comma-separated labels for the transaction.  # noqa: E501

        :return: The labels of this InlineObject6.  # noqa: E501
        :rtype: str
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this InlineObject6.

        A set of comma-separated labels for the transaction.  # noqa: E501

        :param labels: The labels of this InlineObject6.  # noqa: E501
        :type: str
        """

        self._labels = labels

    @property
    def memo(self):
        """Gets the memo of this InlineObject6.  # noqa: E501

        A memo for the transaction.  # noqa: E501

        :return: The memo of this InlineObject6.  # noqa: E501
        :rtype: str
        """
        return self._memo

    @memo.setter
    def memo(self, memo):
        """Sets the memo of this InlineObject6.

        A memo for the transaction.  # noqa: E501

        :param memo: The memo of this InlineObject6.  # noqa: E501
        :type: str
        """

        self._memo = memo

    @property
    def note(self):
        """Gets the note of this InlineObject6.  # noqa: E501

        A note for the transaction.  # noqa: E501

        :return: The note of this InlineObject6.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this InlineObject6.

        A note for the transaction.  # noqa: E501

        :param note: The note of this InlineObject6.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def payee(self):
        """Gets the payee of this InlineObject6.  # noqa: E501

        The payee/merchant of the transaction.  # noqa: E501

        :return: The payee of this InlineObject6.  # noqa: E501
        :rtype: str
        """
        return self._payee

    @payee.setter
    def payee(self, payee):
        """Sets the payee of this InlineObject6.

        The payee/merchant of the transaction.  # noqa: E501

        :param payee: The payee of this InlineObject6.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and payee is None:  # noqa: E501
            raise ValueError("Invalid value for `payee`, must not be `None`")  # noqa: E501

        self._payee = payee

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineObject6):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineObject6):
            return True

        return self.to_dict() != other.to_dict()
