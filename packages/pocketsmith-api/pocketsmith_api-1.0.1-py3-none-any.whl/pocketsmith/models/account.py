# coding: utf-8

"""
    PocketSmith

    The public PocketSmith API  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: api@pocketsmith.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pocketsmith.configuration import Configuration


class Account(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'created_at': 'date',
        'currency_code': 'str',
        'current_balance': 'float',
        'current_balance_date': 'date',
        'id': 'int',
        'is_net_worth': 'bool',
        'primary_scenario': 'Scenario',
        'primary_transaction_account': 'TransactionAccount',
        'scenarios': 'list[Scenario]',
        'title': 'str',
        'transaction_accounts': 'list[TransactionAccount]',
        'type': 'str',
        'updated_at': 'date'
    }

    attribute_map = {
        'created_at': 'created_at',
        'currency_code': 'currency_code',
        'current_balance': 'current_balance',
        'current_balance_date': 'current_balance_date',
        'id': 'id',
        'is_net_worth': 'is_net_worth',
        'primary_scenario': 'primary_scenario',
        'primary_transaction_account': 'primary_transaction_account',
        'scenarios': 'scenarios',
        'title': 'title',
        'transaction_accounts': 'transaction_accounts',
        'type': 'type',
        'updated_at': 'updated_at'
    }

    def __init__(self, created_at=None, currency_code=None, current_balance=None, current_balance_date=None, id=None, is_net_worth=None, primary_scenario=None, primary_transaction_account=None, scenarios=None, title=None, transaction_accounts=None, type=None, updated_at=None, local_vars_configuration=None):  # noqa: E501
        """Account - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._created_at = None
        self._currency_code = None
        self._current_balance = None
        self._current_balance_date = None
        self._id = None
        self._is_net_worth = None
        self._primary_scenario = None
        self._primary_transaction_account = None
        self._scenarios = None
        self._title = None
        self._transaction_accounts = None
        self._type = None
        self._updated_at = None
        self.discriminator = None

        if created_at is not None:
            self.created_at = created_at
        if currency_code is not None:
            self.currency_code = currency_code
        if current_balance is not None:
            self.current_balance = current_balance
        if current_balance_date is not None:
            self.current_balance_date = current_balance_date
        if id is not None:
            self.id = id
        if is_net_worth is not None:
            self.is_net_worth = is_net_worth
        if primary_scenario is not None:
            self.primary_scenario = primary_scenario
        if primary_transaction_account is not None:
            self.primary_transaction_account = primary_transaction_account
        if scenarios is not None:
            self.scenarios = scenarios
        if title is not None:
            self.title = title
        if transaction_accounts is not None:
            self.transaction_accounts = transaction_accounts
        if type is not None:
            self.type = type
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def created_at(self):
        """Gets the created_at of this Account.  # noqa: E501

        When the account was created.  # noqa: E501

        :return: The created_at of this Account.  # noqa: E501
        :rtype: date
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Account.

        When the account was created.  # noqa: E501

        :param created_at: The created_at of this Account.  # noqa: E501
        :type: date
        """

        self._created_at = created_at

    @property
    def currency_code(self):
        """Gets the currency_code of this Account.  # noqa: E501

        The currency code for the account.  # noqa: E501

        :return: The currency_code of this Account.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this Account.

        The currency code for the account.  # noqa: E501

        :param currency_code: The currency_code of this Account.  # noqa: E501
        :type: str
        """

        self._currency_code = currency_code

    @property
    def current_balance(self):
        """Gets the current_balance of this Account.  # noqa: E501

        The current balance of the account.  # noqa: E501

        :return: The current_balance of this Account.  # noqa: E501
        :rtype: float
        """
        return self._current_balance

    @current_balance.setter
    def current_balance(self, current_balance):
        """Sets the current_balance of this Account.

        The current balance of the account.  # noqa: E501

        :param current_balance: The current_balance of this Account.  # noqa: E501
        :type: float
        """

        self._current_balance = current_balance

    @property
    def current_balance_date(self):
        """Gets the current_balance_date of this Account.  # noqa: E501

        The date of the current balance.  # noqa: E501

        :return: The current_balance_date of this Account.  # noqa: E501
        :rtype: date
        """
        return self._current_balance_date

    @current_balance_date.setter
    def current_balance_date(self, current_balance_date):
        """Sets the current_balance_date of this Account.

        The date of the current balance.  # noqa: E501

        :param current_balance_date: The current_balance_date of this Account.  # noqa: E501
        :type: date
        """

        self._current_balance_date = current_balance_date

    @property
    def id(self):
        """Gets the id of this Account.  # noqa: E501

        The unique identifier of the account.  # noqa: E501

        :return: The id of this Account.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Account.

        The unique identifier of the account.  # noqa: E501

        :param id: The id of this Account.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def is_net_worth(self):
        """Gets the is_net_worth of this Account.  # noqa: E501

        Whether the account is a net worth asset.  # noqa: E501

        :return: The is_net_worth of this Account.  # noqa: E501
        :rtype: bool
        """
        return self._is_net_worth

    @is_net_worth.setter
    def is_net_worth(self, is_net_worth):
        """Sets the is_net_worth of this Account.

        Whether the account is a net worth asset.  # noqa: E501

        :param is_net_worth: The is_net_worth of this Account.  # noqa: E501
        :type: bool
        """

        self._is_net_worth = is_net_worth

    @property
    def primary_scenario(self):
        """Gets the primary_scenario of this Account.  # noqa: E501


        :return: The primary_scenario of this Account.  # noqa: E501
        :rtype: Scenario
        """
        return self._primary_scenario

    @primary_scenario.setter
    def primary_scenario(self, primary_scenario):
        """Sets the primary_scenario of this Account.


        :param primary_scenario: The primary_scenario of this Account.  # noqa: E501
        :type: Scenario
        """

        self._primary_scenario = primary_scenario

    @property
    def primary_transaction_account(self):
        """Gets the primary_transaction_account of this Account.  # noqa: E501


        :return: The primary_transaction_account of this Account.  # noqa: E501
        :rtype: TransactionAccount
        """
        return self._primary_transaction_account

    @primary_transaction_account.setter
    def primary_transaction_account(self, primary_transaction_account):
        """Sets the primary_transaction_account of this Account.


        :param primary_transaction_account: The primary_transaction_account of this Account.  # noqa: E501
        :type: TransactionAccount
        """

        self._primary_transaction_account = primary_transaction_account

    @property
    def scenarios(self):
        """Gets the scenarios of this Account.  # noqa: E501

        All scenarios that compose the account, including the primary.  # noqa: E501

        :return: The scenarios of this Account.  # noqa: E501
        :rtype: list[Scenario]
        """
        return self._scenarios

    @scenarios.setter
    def scenarios(self, scenarios):
        """Sets the scenarios of this Account.

        All scenarios that compose the account, including the primary.  # noqa: E501

        :param scenarios: The scenarios of this Account.  # noqa: E501
        :type: list[Scenario]
        """

        self._scenarios = scenarios

    @property
    def title(self):
        """Gets the title of this Account.  # noqa: E501

        The title of the account.  # noqa: E501

        :return: The title of this Account.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Account.

        The title of the account.  # noqa: E501

        :param title: The title of this Account.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def transaction_accounts(self):
        """Gets the transaction_accounts of this Account.  # noqa: E501

        All transaction accounts that compose the account, including the primary.  # noqa: E501

        :return: The transaction_accounts of this Account.  # noqa: E501
        :rtype: list[TransactionAccount]
        """
        return self._transaction_accounts

    @transaction_accounts.setter
    def transaction_accounts(self, transaction_accounts):
        """Sets the transaction_accounts of this Account.

        All transaction accounts that compose the account, including the primary.  # noqa: E501

        :param transaction_accounts: The transaction_accounts of this Account.  # noqa: E501
        :type: list[TransactionAccount]
        """

        self._transaction_accounts = transaction_accounts

    @property
    def type(self):
        """Gets the type of this Account.  # noqa: E501

        The type of the account.  # noqa: E501

        :return: The type of this Account.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Account.

        The type of the account.  # noqa: E501

        :param type: The type of this Account.  # noqa: E501
        :type: str
        """
        allowed_values = ["bank", "credits", "stocks", "mortgage", "loans", "vehicle", "property", "other_liability"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def updated_at(self):
        """Gets the updated_at of this Account.  # noqa: E501

        When the account was last updated.  # noqa: E501

        :return: The updated_at of this Account.  # noqa: E501
        :rtype: date
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Account.

        When the account was last updated.  # noqa: E501

        :param updated_at: The updated_at of this Account.  # noqa: E501
        :type: date
        """

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Account):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Account):
            return True

        return self.to_dict() != other.to_dict()
