# coding: utf-8

"""
    PocketSmith

    The public PocketSmith API  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: api@pocketsmith.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pocketsmith.configuration import Configuration


class TransactionAccount(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'created_at': 'datetime',
        'currency_code': 'str',
        'current_balance': 'float',
        'current_balance_date': 'date',
        'id': 'int',
        'institution': 'Institution',
        'name': 'str',
        'number': 'str',
        'starting_balance': 'float',
        'starting_balance_date': 'date',
        'updated_at': 'datetime'
    }

    attribute_map = {
        'created_at': 'created_at',
        'currency_code': 'currency_code',
        'current_balance': 'current_balance',
        'current_balance_date': 'current_balance_date',
        'id': 'id',
        'institution': 'institution',
        'name': 'name',
        'number': 'number',
        'starting_balance': 'starting_balance',
        'starting_balance_date': 'starting_balance_date',
        'updated_at': 'updated_at'
    }

    def __init__(self, created_at=None, currency_code=None, current_balance=None, current_balance_date=None, id=None, institution=None, name=None, number=None, starting_balance=None, starting_balance_date=None, updated_at=None, local_vars_configuration=None):  # noqa: E501
        """TransactionAccount - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._created_at = None
        self._currency_code = None
        self._current_balance = None
        self._current_balance_date = None
        self._id = None
        self._institution = None
        self._name = None
        self._number = None
        self._starting_balance = None
        self._starting_balance_date = None
        self._updated_at = None
        self.discriminator = None

        if created_at is not None:
            self.created_at = created_at
        if currency_code is not None:
            self.currency_code = currency_code
        if current_balance is not None:
            self.current_balance = current_balance
        if current_balance_date is not None:
            self.current_balance_date = current_balance_date
        if id is not None:
            self.id = id
        if institution is not None:
            self.institution = institution
        if name is not None:
            self.name = name
        if number is not None:
            self.number = number
        if starting_balance is not None:
            self.starting_balance = starting_balance
        if starting_balance_date is not None:
            self.starting_balance_date = starting_balance_date
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def created_at(self):
        """Gets the created_at of this TransactionAccount.  # noqa: E501


        :return: The created_at of this TransactionAccount.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this TransactionAccount.


        :param created_at: The created_at of this TransactionAccount.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def currency_code(self):
        """Gets the currency_code of this TransactionAccount.  # noqa: E501

        The currency that the account is in. This is determined by the account that the transaction account belongs to.  # noqa: E501

        :return: The currency_code of this TransactionAccount.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this TransactionAccount.

        The currency that the account is in. This is determined by the account that the transaction account belongs to.  # noqa: E501

        :param currency_code: The currency_code of this TransactionAccount.  # noqa: E501
        :type: str
        """

        self._currency_code = currency_code

    @property
    def current_balance(self):
        """Gets the current_balance of this TransactionAccount.  # noqa: E501


        :return: The current_balance of this TransactionAccount.  # noqa: E501
        :rtype: float
        """
        return self._current_balance

    @current_balance.setter
    def current_balance(self, current_balance):
        """Sets the current_balance of this TransactionAccount.


        :param current_balance: The current_balance of this TransactionAccount.  # noqa: E501
        :type: float
        """

        self._current_balance = current_balance

    @property
    def current_balance_date(self):
        """Gets the current_balance_date of this TransactionAccount.  # noqa: E501


        :return: The current_balance_date of this TransactionAccount.  # noqa: E501
        :rtype: date
        """
        return self._current_balance_date

    @current_balance_date.setter
    def current_balance_date(self, current_balance_date):
        """Sets the current_balance_date of this TransactionAccount.


        :param current_balance_date: The current_balance_date of this TransactionAccount.  # noqa: E501
        :type: date
        """

        self._current_balance_date = current_balance_date

    @property
    def id(self):
        """Gets the id of this TransactionAccount.  # noqa: E501


        :return: The id of this TransactionAccount.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TransactionAccount.


        :param id: The id of this TransactionAccount.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def institution(self):
        """Gets the institution of this TransactionAccount.  # noqa: E501


        :return: The institution of this TransactionAccount.  # noqa: E501
        :rtype: Institution
        """
        return self._institution

    @institution.setter
    def institution(self, institution):
        """Sets the institution of this TransactionAccount.


        :param institution: The institution of this TransactionAccount.  # noqa: E501
        :type: Institution
        """

        self._institution = institution

    @property
    def name(self):
        """Gets the name of this TransactionAccount.  # noqa: E501


        :return: The name of this TransactionAccount.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TransactionAccount.


        :param name: The name of this TransactionAccount.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def number(self):
        """Gets the number of this TransactionAccount.  # noqa: E501


        :return: The number of this TransactionAccount.  # noqa: E501
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this TransactionAccount.


        :param number: The number of this TransactionAccount.  # noqa: E501
        :type: str
        """

        self._number = number

    @property
    def starting_balance(self):
        """Gets the starting_balance of this TransactionAccount.  # noqa: E501


        :return: The starting_balance of this TransactionAccount.  # noqa: E501
        :rtype: float
        """
        return self._starting_balance

    @starting_balance.setter
    def starting_balance(self, starting_balance):
        """Sets the starting_balance of this TransactionAccount.


        :param starting_balance: The starting_balance of this TransactionAccount.  # noqa: E501
        :type: float
        """

        self._starting_balance = starting_balance

    @property
    def starting_balance_date(self):
        """Gets the starting_balance_date of this TransactionAccount.  # noqa: E501


        :return: The starting_balance_date of this TransactionAccount.  # noqa: E501
        :rtype: date
        """
        return self._starting_balance_date

    @starting_balance_date.setter
    def starting_balance_date(self, starting_balance_date):
        """Sets the starting_balance_date of this TransactionAccount.


        :param starting_balance_date: The starting_balance_date of this TransactionAccount.  # noqa: E501
        :type: date
        """

        self._starting_balance_date = starting_balance_date

    @property
    def updated_at(self):
        """Gets the updated_at of this TransactionAccount.  # noqa: E501


        :return: The updated_at of this TransactionAccount.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this TransactionAccount.


        :param updated_at: The updated_at of this TransactionAccount.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TransactionAccount):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TransactionAccount):
            return True

        return self.to_dict() != other.to_dict()
