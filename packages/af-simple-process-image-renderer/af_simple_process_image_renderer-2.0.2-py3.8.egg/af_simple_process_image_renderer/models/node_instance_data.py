# coding: utf-8

"""
    AristaFlowREST/SimpleProcessImageRenderer

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NodeInstanceData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'state': 'str',
        'iteration': 'int',
        'execution_mode': 'str',
        'performing_agent': 'QualifiedAgent',
        'sub_inst_ids': 'list[list[str]]'
    }

    attribute_map = {
        'state': 'state',
        'iteration': 'iteration',
        'execution_mode': 'executionMode',
        'performing_agent': 'performingAgent',
        'sub_inst_ids': 'subInstIds'
    }

    def __init__(self, state=None, iteration=None, execution_mode=None, performing_agent=None, sub_inst_ids=None):  # noqa: E501
        """NodeInstanceData - a model defined in Swagger"""  # noqa: E501
        self._state = None
        self._iteration = None
        self._execution_mode = None
        self._performing_agent = None
        self._sub_inst_ids = None
        if not(hasattr(self, "discriminator")) or not(self.discriminator):
            self.discriminator = None
        self.state = state
        self.iteration = iteration
        if execution_mode is not None:
            self.execution_mode = execution_mode
        if performing_agent is not None:
            self.performing_agent = performing_agent
        if sub_inst_ids is not None:
            self.sub_inst_ids = sub_inst_ids

    @property
    def state(self):
        """Gets the state of this NodeInstanceData.  # noqa: E501


        :return: The state of this NodeInstanceData.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this NodeInstanceData.


        :param state: The state of this NodeInstanceData.  # noqa: E501
        :type: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501
        allowed_values = ["NS_NOT_ACTIVATED", "NS_ACTIVATED", "NS_SELECTED", "NS_RUNNING", "NS_SUSPENDED", "NS_ENQUIRED", "NS_COMPLETED", "NS_FAILED", "NS_SKIPPED", "NS_ACTIVATED_SUPPR", "NS_SELECTED_SUPPR", "NS_SUSPENDED_SUPPR"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def iteration(self):
        """Gets the iteration of this NodeInstanceData.  # noqa: E501


        :return: The iteration of this NodeInstanceData.  # noqa: E501
        :rtype: int
        """
        return self._iteration

    @iteration.setter
    def iteration(self, iteration):
        """Sets the iteration of this NodeInstanceData.


        :param iteration: The iteration of this NodeInstanceData.  # noqa: E501
        :type: int
        """
        if iteration is None:
            raise ValueError("Invalid value for `iteration`, must not be `None`")  # noqa: E501

        self._iteration = iteration

    @property
    def execution_mode(self):
        """Gets the execution_mode of this NodeInstanceData.  # noqa: E501


        :return: The execution_mode of this NodeInstanceData.  # noqa: E501
        :rtype: str
        """
        return self._execution_mode

    @execution_mode.setter
    def execution_mode(self, execution_mode):
        """Sets the execution_mode of this NodeInstanceData.


        :param execution_mode: The execution_mode of this NodeInstanceData.  # noqa: E501
        :type: str
        """
        allowed_values = ["SUBSTITUTED_TEST", "COMPONENT_TEST", "PRODUCTION", "VIEW_ONLY"]  # noqa: E501
        if execution_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `execution_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(execution_mode, allowed_values)
            )

        self._execution_mode = execution_mode

    @property
    def performing_agent(self):
        """Gets the performing_agent of this NodeInstanceData.  # noqa: E501


        :return: The performing_agent of this NodeInstanceData.  # noqa: E501
        :rtype: QualifiedAgent
        """
        return self._performing_agent

    @performing_agent.setter
    def performing_agent(self, performing_agent):
        """Sets the performing_agent of this NodeInstanceData.


        :param performing_agent: The performing_agent of this NodeInstanceData.  # noqa: E501
        :type: QualifiedAgent
        """

        self._performing_agent = performing_agent

    @property
    def sub_inst_ids(self):
        """Gets the sub_inst_ids of this NodeInstanceData.  # noqa: E501


        :return: The sub_inst_ids of this NodeInstanceData.  # noqa: E501
        :rtype: list[list[str]]
        """
        return self._sub_inst_ids

    @sub_inst_ids.setter
    def sub_inst_ids(self, sub_inst_ids):
        """Sets the sub_inst_ids of this NodeInstanceData.


        :param sub_inst_ids: The sub_inst_ids of this NodeInstanceData.  # noqa: E501
        :type: list[list[str]]
        """

        self._sub_inst_ids = sub_inst_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NodeInstanceData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NodeInstanceData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
