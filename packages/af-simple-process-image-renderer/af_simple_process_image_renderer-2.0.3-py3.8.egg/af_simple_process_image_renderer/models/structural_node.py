# coding: utf-8

"""
    AristaFlowREST/SimpleProcessImageRenderer

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from af_simple_process_image_renderer.models.node import Node  # noqa: F401,E501

class StructuralNode(Node):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'top_id': 'int',
        'branch_id': 'int',
        'split_node_id': 'int',
        'block_node_id': 'int',
        'disabled_conns': 'list[int]'
    }
    if hasattr(Node, "swagger_types"):
        swagger_types.update(Node.swagger_types)

    attribute_map = {
        'type': 'type',
        'top_id': 'topId',
        'branch_id': 'branchId',
        'split_node_id': 'splitNodeId',
        'block_node_id': 'blockNodeId',
        'disabled_conns': 'disabledConns'
    }
    if hasattr(Node, "attribute_map"):
        attribute_map.update(Node.attribute_map)

    def __init__(self, type=None, top_id=None, branch_id=None, split_node_id=None, block_node_id=None, disabled_conns=None, *args, **kwargs):  # noqa: E501
        """StructuralNode - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._top_id = None
        self._branch_id = None
        self._split_node_id = None
        self._block_node_id = None
        self._disabled_conns = None
        if not(hasattr(self, "discriminator")) or not(self.discriminator):
            self.discriminator = None
        self.type = type
        self.top_id = top_id
        self.branch_id = branch_id
        if split_node_id is not None:
            self.split_node_id = split_node_id
        if block_node_id is not None:
            self.block_node_id = block_node_id
        if disabled_conns is not None:
            self.disabled_conns = disabled_conns
        Node.__init__(self, *args, **kwargs)

    @property
    def type(self):
        """Gets the type of this StructuralNode.  # noqa: E501


        :return: The type of this StructuralNode.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this StructuralNode.


        :param type: The type of this StructuralNode.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["NT_NORMAL", "NT_STARTFLOW", "NT_ENDFLOW", "NT_AND_SPLIT", "NT_AND_JOIN", "NT_XOR_SPLIT", "NT_XOR_JOIN", "NT_STARTLOOP", "NT_ENDLOOP", "NT_DFRD_XOR_SPLIT"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def top_id(self):
        """Gets the top_id of this StructuralNode.  # noqa: E501


        :return: The top_id of this StructuralNode.  # noqa: E501
        :rtype: int
        """
        return self._top_id

    @top_id.setter
    def top_id(self, top_id):
        """Sets the top_id of this StructuralNode.


        :param top_id: The top_id of this StructuralNode.  # noqa: E501
        :type: int
        """
        if top_id is None:
            raise ValueError("Invalid value for `top_id`, must not be `None`")  # noqa: E501

        self._top_id = top_id

    @property
    def branch_id(self):
        """Gets the branch_id of this StructuralNode.  # noqa: E501


        :return: The branch_id of this StructuralNode.  # noqa: E501
        :rtype: int
        """
        return self._branch_id

    @branch_id.setter
    def branch_id(self, branch_id):
        """Sets the branch_id of this StructuralNode.


        :param branch_id: The branch_id of this StructuralNode.  # noqa: E501
        :type: int
        """
        if branch_id is None:
            raise ValueError("Invalid value for `branch_id`, must not be `None`")  # noqa: E501

        self._branch_id = branch_id

    @property
    def split_node_id(self):
        """Gets the split_node_id of this StructuralNode.  # noqa: E501


        :return: The split_node_id of this StructuralNode.  # noqa: E501
        :rtype: int
        """
        return self._split_node_id

    @split_node_id.setter
    def split_node_id(self, split_node_id):
        """Sets the split_node_id of this StructuralNode.


        :param split_node_id: The split_node_id of this StructuralNode.  # noqa: E501
        :type: int
        """

        self._split_node_id = split_node_id

    @property
    def block_node_id(self):
        """Gets the block_node_id of this StructuralNode.  # noqa: E501


        :return: The block_node_id of this StructuralNode.  # noqa: E501
        :rtype: int
        """
        return self._block_node_id

    @block_node_id.setter
    def block_node_id(self, block_node_id):
        """Sets the block_node_id of this StructuralNode.


        :param block_node_id: The block_node_id of this StructuralNode.  # noqa: E501
        :type: int
        """

        self._block_node_id = block_node_id

    @property
    def disabled_conns(self):
        """Gets the disabled_conns of this StructuralNode.  # noqa: E501


        :return: The disabled_conns of this StructuralNode.  # noqa: E501
        :rtype: list[int]
        """
        return self._disabled_conns

    @disabled_conns.setter
    def disabled_conns(self, disabled_conns):
        """Sets the disabled_conns of this StructuralNode.


        :param disabled_conns: The disabled_conns of this StructuralNode.  # noqa: E501
        :type: list[int]
        """

        self._disabled_conns = disabled_conns

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StructuralNode, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StructuralNode):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
