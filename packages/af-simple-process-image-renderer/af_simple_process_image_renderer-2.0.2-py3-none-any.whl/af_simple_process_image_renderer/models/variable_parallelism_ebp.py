# coding: utf-8

"""
    AristaFlowREST/SimpleProcessImageRenderer

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from af_simple_process_image_renderer.models.executable_business_process import ExecutableBusinessProcess  # noqa: F401,E501

class VariableParallelismEbp(ExecutableBusinessProcess):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'indexed_in_params': 'dict(str, ProcessModelParameter)',
        'lwp': 'LightWeightProcess'
    }
    if hasattr(ExecutableBusinessProcess, "swagger_types"):
        swagger_types.update(ExecutableBusinessProcess.swagger_types)

    attribute_map = {
        'indexed_in_params': 'indexedInParams',
        'lwp': 'lwp'
    }
    if hasattr(ExecutableBusinessProcess, "attribute_map"):
        attribute_map.update(ExecutableBusinessProcess.attribute_map)

    def __init__(self, indexed_in_params=None, lwp=None, *args, **kwargs):  # noqa: E501
        """VariableParallelismEbp - a model defined in Swagger"""  # noqa: E501
        self._indexed_in_params = None
        self._lwp = None
        if not(hasattr(self, "discriminator")) or not(self.discriminator):
            self.discriminator = None
        self.indexed_in_params = indexed_in_params
        self.lwp = lwp
        ExecutableBusinessProcess.__init__(self, *args, **kwargs)

    @property
    def indexed_in_params(self):
        """Gets the indexed_in_params of this VariableParallelismEbp.  # noqa: E501


        :return: The indexed_in_params of this VariableParallelismEbp.  # noqa: E501
        :rtype: dict(str, ProcessModelParameter)
        """
        return self._indexed_in_params

    @indexed_in_params.setter
    def indexed_in_params(self, indexed_in_params):
        """Sets the indexed_in_params of this VariableParallelismEbp.


        :param indexed_in_params: The indexed_in_params of this VariableParallelismEbp.  # noqa: E501
        :type: dict(str, ProcessModelParameter)
        """
        if indexed_in_params is None:
            raise ValueError("Invalid value for `indexed_in_params`, must not be `None`")  # noqa: E501

        self._indexed_in_params = indexed_in_params

    @property
    def lwp(self):
        """Gets the lwp of this VariableParallelismEbp.  # noqa: E501


        :return: The lwp of this VariableParallelismEbp.  # noqa: E501
        :rtype: LightWeightProcess
        """
        return self._lwp

    @lwp.setter
    def lwp(self, lwp):
        """Sets the lwp of this VariableParallelismEbp.


        :param lwp: The lwp of this VariableParallelismEbp.  # noqa: E501
        :type: LightWeightProcess
        """
        if lwp is None:
            raise ValueError("Invalid value for `lwp`, must not be `None`")  # noqa: E501

        self._lwp = lwp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VariableParallelismEbp, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VariableParallelismEbp):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
