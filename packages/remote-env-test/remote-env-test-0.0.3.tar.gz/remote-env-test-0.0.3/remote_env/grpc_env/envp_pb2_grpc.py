# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from grpc_env import envp_pb2 as envp__pb2


class EnvpStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Make = channel.unary_unary(
                '/Envp/Make',
                request_serializer=envp__pb2.Name.SerializeToString,
                response_deserializer=envp__pb2.Info.FromString,
                )
        self.Reset = channel.unary_unary(
                '/Envp/Reset',
                request_serializer=envp__pb2.EnvIDs.SerializeToString,
                response_deserializer=envp__pb2.Observations.FromString,
                )
        self.Render = channel.unary_unary(
                '/Envp/Render',
                request_serializer=envp__pb2.Renders.SerializeToString,
                response_deserializer=envp__pb2.RenderOuts.FromString,
                )
        self.Seed = channel.unary_unary(
                '/Envp/Seed',
                request_serializer=envp__pb2.EnvSeeds.SerializeToString,
                response_deserializer=envp__pb2.Empty.FromString,
                )
        self.Step = channel.unary_unary(
                '/Envp/Step',
                request_serializer=envp__pb2.Actions.SerializeToString,
                response_deserializer=envp__pb2.Transitions.FromString,
                )
        self.Sample = channel.unary_unary(
                '/Envp/Sample',
                request_serializer=envp__pb2.Empty.SerializeToString,
                response_deserializer=envp__pb2.Actions.FromString,
                )
        self.Close = channel.unary_unary(
                '/Envp/Close',
                request_serializer=envp__pb2.EnvIDs.SerializeToString,
                response_deserializer=envp__pb2.Empty.FromString,
                )


class EnvpServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Make(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Reset(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Render(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Seed(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Step(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Sample(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Close(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_EnvpServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Make': grpc.unary_unary_rpc_method_handler(
                    servicer.Make,
                    request_deserializer=envp__pb2.Name.FromString,
                    response_serializer=envp__pb2.Info.SerializeToString,
            ),
            'Reset': grpc.unary_unary_rpc_method_handler(
                    servicer.Reset,
                    request_deserializer=envp__pb2.EnvIDs.FromString,
                    response_serializer=envp__pb2.Observations.SerializeToString,
            ),
            'Render': grpc.unary_unary_rpc_method_handler(
                    servicer.Render,
                    request_deserializer=envp__pb2.Renders.FromString,
                    response_serializer=envp__pb2.RenderOuts.SerializeToString,
            ),
            'Seed': grpc.unary_unary_rpc_method_handler(
                    servicer.Seed,
                    request_deserializer=envp__pb2.EnvSeeds.FromString,
                    response_serializer=envp__pb2.Empty.SerializeToString,
            ),
            'Step': grpc.unary_unary_rpc_method_handler(
                    servicer.Step,
                    request_deserializer=envp__pb2.Actions.FromString,
                    response_serializer=envp__pb2.Transitions.SerializeToString,
            ),
            'Sample': grpc.unary_unary_rpc_method_handler(
                    servicer.Sample,
                    request_deserializer=envp__pb2.Empty.FromString,
                    response_serializer=envp__pb2.Actions.SerializeToString,
            ),
            'Close': grpc.unary_unary_rpc_method_handler(
                    servicer.Close,
                    request_deserializer=envp__pb2.EnvIDs.FromString,
                    response_serializer=envp__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Envp', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Envp(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Make(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Envp/Make',
            envp__pb2.Name.SerializeToString,
            envp__pb2.Info.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Reset(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Envp/Reset',
            envp__pb2.EnvIDs.SerializeToString,
            envp__pb2.Observations.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Render(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Envp/Render',
            envp__pb2.Renders.SerializeToString,
            envp__pb2.RenderOuts.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Seed(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Envp/Seed',
            envp__pb2.EnvSeeds.SerializeToString,
            envp__pb2.Empty.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Step(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Envp/Step',
            envp__pb2.Actions.SerializeToString,
            envp__pb2.Transitions.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Sample(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Envp/Sample',
            envp__pb2.Empty.SerializeToString,
            envp__pb2.Actions.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Close(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Envp/Close',
            envp__pb2.EnvIDs.SerializeToString,
            envp__pb2.Empty.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
