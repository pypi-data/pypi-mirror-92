# coding: utf-8

"""
    AristaFlowREST/ProcessImageRenderer

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ConfigurationDescEntry(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'desc': 'str',
        'loc_desc': 'dict(str, str)',
        'type': 'str',
        'optional': 'bool',
        'restrictions': 'list[str]',
        'user_attributes': 'dict(str, str)'
    }

    attribute_map = {
        'name': 'name',
        'desc': 'desc',
        'loc_desc': 'locDesc',
        'type': 'type',
        'optional': 'optional',
        'restrictions': 'restrictions',
        'user_attributes': 'userAttributes'
    }

    def __init__(self, name=None, desc=None, loc_desc=None, type=None, optional=None, restrictions=None, user_attributes=None):  # noqa: E501
        """ConfigurationDescEntry - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._desc = None
        self._loc_desc = None
        self._type = None
        self._optional = None
        self._restrictions = None
        self._user_attributes = None
        if not(hasattr(self, "discriminator")) or not(self.discriminator):
            self.discriminator = None
        self.name = name
        self.desc = desc
        if loc_desc is not None:
            self.loc_desc = loc_desc
        self.type = type
        self.optional = optional
        if restrictions is not None:
            self.restrictions = restrictions
        if user_attributes is not None:
            self.user_attributes = user_attributes

    @property
    def name(self):
        """Gets the name of this ConfigurationDescEntry.  # noqa: E501


        :return: The name of this ConfigurationDescEntry.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConfigurationDescEntry.


        :param name: The name of this ConfigurationDescEntry.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def desc(self):
        """Gets the desc of this ConfigurationDescEntry.  # noqa: E501


        :return: The desc of this ConfigurationDescEntry.  # noqa: E501
        :rtype: str
        """
        return self._desc

    @desc.setter
    def desc(self, desc):
        """Sets the desc of this ConfigurationDescEntry.


        :param desc: The desc of this ConfigurationDescEntry.  # noqa: E501
        :type: str
        """
        if desc is None:
            raise ValueError("Invalid value for `desc`, must not be `None`")  # noqa: E501

        self._desc = desc

    @property
    def loc_desc(self):
        """Gets the loc_desc of this ConfigurationDescEntry.  # noqa: E501


        :return: The loc_desc of this ConfigurationDescEntry.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._loc_desc

    @loc_desc.setter
    def loc_desc(self, loc_desc):
        """Sets the loc_desc of this ConfigurationDescEntry.


        :param loc_desc: The loc_desc of this ConfigurationDescEntry.  # noqa: E501
        :type: dict(str, str)
        """

        self._loc_desc = loc_desc

    @property
    def type(self):
        """Gets the type of this ConfigurationDescEntry.  # noqa: E501


        :return: The type of this ConfigurationDescEntry.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ConfigurationDescEntry.


        :param type: The type of this ConfigurationDescEntry.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["INTEGER", "FLOAT", "STRING", "BOOLEAN", "DATE", "URI", "USERDEFINED"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def optional(self):
        """Gets the optional of this ConfigurationDescEntry.  # noqa: E501


        :return: The optional of this ConfigurationDescEntry.  # noqa: E501
        :rtype: bool
        """
        return self._optional

    @optional.setter
    def optional(self, optional):
        """Sets the optional of this ConfigurationDescEntry.


        :param optional: The optional of this ConfigurationDescEntry.  # noqa: E501
        :type: bool
        """
        if optional is None:
            raise ValueError("Invalid value for `optional`, must not be `None`")  # noqa: E501

        self._optional = optional

    @property
    def restrictions(self):
        """Gets the restrictions of this ConfigurationDescEntry.  # noqa: E501


        :return: The restrictions of this ConfigurationDescEntry.  # noqa: E501
        :rtype: list[str]
        """
        return self._restrictions

    @restrictions.setter
    def restrictions(self, restrictions):
        """Sets the restrictions of this ConfigurationDescEntry.


        :param restrictions: The restrictions of this ConfigurationDescEntry.  # noqa: E501
        :type: list[str]
        """

        self._restrictions = restrictions

    @property
    def user_attributes(self):
        """Gets the user_attributes of this ConfigurationDescEntry.  # noqa: E501


        :return: The user_attributes of this ConfigurationDescEntry.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._user_attributes

    @user_attributes.setter
    def user_attributes(self, user_attributes):
        """Sets the user_attributes of this ConfigurationDescEntry.


        :param user_attributes: The user_attributes of this ConfigurationDescEntry.  # noqa: E501
        :type: dict(str, str)
        """

        self._user_attributes = user_attributes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigurationDescEntry, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigurationDescEntry):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
