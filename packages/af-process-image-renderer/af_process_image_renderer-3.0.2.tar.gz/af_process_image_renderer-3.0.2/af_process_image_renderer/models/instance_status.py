# coding: utf-8

"""
    AristaFlowREST/ProcessImageRenderer

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InstanceStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'inst_id': 'str',
        'migration_status': 'str',
        'migration_status_date': 'int',
        'migration_status_comment': 'str',
        'execution_status': 'str',
        'execution_status_date': 'int',
        'execution_status_comment': 'str'
    }

    attribute_map = {
        'inst_id': 'instId',
        'migration_status': 'migrationStatus',
        'migration_status_date': 'migrationStatusDate',
        'migration_status_comment': 'migrationStatusComment',
        'execution_status': 'executionStatus',
        'execution_status_date': 'executionStatusDate',
        'execution_status_comment': 'executionStatusComment'
    }

    def __init__(self, inst_id=None, migration_status=None, migration_status_date=None, migration_status_comment=None, execution_status=None, execution_status_date=None, execution_status_comment=None):  # noqa: E501
        """InstanceStatus - a model defined in Swagger"""  # noqa: E501
        self._inst_id = None
        self._migration_status = None
        self._migration_status_date = None
        self._migration_status_comment = None
        self._execution_status = None
        self._execution_status_date = None
        self._execution_status_comment = None
        if not(hasattr(self, "discriminator")) or not(self.discriminator):
            self.discriminator = None
        self.inst_id = inst_id
        self.migration_status = migration_status
        self.migration_status_date = migration_status_date
        if migration_status_comment is not None:
            self.migration_status_comment = migration_status_comment
        self.execution_status = execution_status
        self.execution_status_date = execution_status_date
        if execution_status_comment is not None:
            self.execution_status_comment = execution_status_comment

    @property
    def inst_id(self):
        """Gets the inst_id of this InstanceStatus.  # noqa: E501


        :return: The inst_id of this InstanceStatus.  # noqa: E501
        :rtype: str
        """
        return self._inst_id

    @inst_id.setter
    def inst_id(self, inst_id):
        """Sets the inst_id of this InstanceStatus.


        :param inst_id: The inst_id of this InstanceStatus.  # noqa: E501
        :type: str
        """
        if inst_id is None:
            raise ValueError("Invalid value for `inst_id`, must not be `None`")  # noqa: E501

        self._inst_id = inst_id

    @property
    def migration_status(self):
        """Gets the migration_status of this InstanceStatus.  # noqa: E501


        :return: The migration_status of this InstanceStatus.  # noqa: E501
        :rtype: str
        """
        return self._migration_status

    @migration_status.setter
    def migration_status(self, migration_status):
        """Sets the migration_status of this InstanceStatus.


        :param migration_status: The migration_status of this InstanceStatus.  # noqa: E501
        :type: str
        """
        if migration_status is None:
            raise ValueError("Invalid value for `migration_status`, must not be `None`")  # noqa: E501
        allowed_values = ["IM_MIGRATABLE", "IM_MIGRATING", "IM_NOT_MIGRATABLE"]  # noqa: E501
        if migration_status not in allowed_values:
            raise ValueError(
                "Invalid value for `migration_status` ({0}), must be one of {1}"  # noqa: E501
                .format(migration_status, allowed_values)
            )

        self._migration_status = migration_status

    @property
    def migration_status_date(self):
        """Gets the migration_status_date of this InstanceStatus.  # noqa: E501


        :return: The migration_status_date of this InstanceStatus.  # noqa: E501
        :rtype: int
        """
        return self._migration_status_date

    @migration_status_date.setter
    def migration_status_date(self, migration_status_date):
        """Sets the migration_status_date of this InstanceStatus.


        :param migration_status_date: The migration_status_date of this InstanceStatus.  # noqa: E501
        :type: int
        """
        if migration_status_date is None:
            raise ValueError("Invalid value for `migration_status_date`, must not be `None`")  # noqa: E501

        self._migration_status_date = migration_status_date

    @property
    def migration_status_comment(self):
        """Gets the migration_status_comment of this InstanceStatus.  # noqa: E501


        :return: The migration_status_comment of this InstanceStatus.  # noqa: E501
        :rtype: str
        """
        return self._migration_status_comment

    @migration_status_comment.setter
    def migration_status_comment(self, migration_status_comment):
        """Sets the migration_status_comment of this InstanceStatus.


        :param migration_status_comment: The migration_status_comment of this InstanceStatus.  # noqa: E501
        :type: str
        """

        self._migration_status_comment = migration_status_comment

    @property
    def execution_status(self):
        """Gets the execution_status of this InstanceStatus.  # noqa: E501


        :return: The execution_status of this InstanceStatus.  # noqa: E501
        :rtype: str
        """
        return self._execution_status

    @execution_status.setter
    def execution_status(self, execution_status):
        """Sets the execution_status of this InstanceStatus.


        :param execution_status: The execution_status of this InstanceStatus.  # noqa: E501
        :type: str
        """
        if execution_status is None:
            raise ValueError("Invalid value for `execution_status`, must not be `None`")  # noqa: E501
        allowed_values = ["IE_RUNNING", "IE_SUSPENDED", "IE_SOFTLY_SUSPENDED", "IE_ABORTED", "IE_SOFTLY_ABORTED", "IE_FINISHED"]  # noqa: E501
        if execution_status not in allowed_values:
            raise ValueError(
                "Invalid value for `execution_status` ({0}), must be one of {1}"  # noqa: E501
                .format(execution_status, allowed_values)
            )

        self._execution_status = execution_status

    @property
    def execution_status_date(self):
        """Gets the execution_status_date of this InstanceStatus.  # noqa: E501


        :return: The execution_status_date of this InstanceStatus.  # noqa: E501
        :rtype: int
        """
        return self._execution_status_date

    @execution_status_date.setter
    def execution_status_date(self, execution_status_date):
        """Sets the execution_status_date of this InstanceStatus.


        :param execution_status_date: The execution_status_date of this InstanceStatus.  # noqa: E501
        :type: int
        """
        if execution_status_date is None:
            raise ValueError("Invalid value for `execution_status_date`, must not be `None`")  # noqa: E501

        self._execution_status_date = execution_status_date

    @property
    def execution_status_comment(self):
        """Gets the execution_status_comment of this InstanceStatus.  # noqa: E501


        :return: The execution_status_comment of this InstanceStatus.  # noqa: E501
        :rtype: str
        """
        return self._execution_status_comment

    @execution_status_comment.setter
    def execution_status_comment(self, execution_status_comment):
        """Sets the execution_status_comment of this InstanceStatus.


        :param execution_status_comment: The execution_status_comment of this InstanceStatus.  # noqa: E501
        :type: str
        """

        self._execution_status_comment = execution_status_comment

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InstanceStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InstanceStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
