# coding: utf-8

"""
    AristaFlowREST/ProcessImageRenderer

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RenderOptions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'width': 'int',
        'height': 'int',
        'view_port': 'Rectangle',
        'data_edges_visible': 'bool',
        'data_elements_visible': 'bool',
        'system_data_edges_visible': 'bool',
        'system_data_elements_visible': 'bool',
        'decision_data_edges_visible': 'bool',
        'decision_data_elements_visible': 'bool',
        'data_flow_lane_visible': 'bool',
        'sync_edges_visible': 'bool',
        'hidden_nodes_visible': 'bool',
        'adv_options': 'dict(str, str)'
    }

    attribute_map = {
        'type': 'type',
        'width': 'width',
        'height': 'height',
        'view_port': 'viewPort',
        'data_edges_visible': 'dataEdgesVisible',
        'data_elements_visible': 'dataElementsVisible',
        'system_data_edges_visible': 'systemDataEdgesVisible',
        'system_data_elements_visible': 'systemDataElementsVisible',
        'decision_data_edges_visible': 'decisionDataEdgesVisible',
        'decision_data_elements_visible': 'decisionDataElementsVisible',
        'data_flow_lane_visible': 'dataFlowLaneVisible',
        'sync_edges_visible': 'syncEdgesVisible',
        'hidden_nodes_visible': 'hiddenNodesVisible',
        'adv_options': 'advOptions'
    }

    def __init__(self, type=None, width=None, height=None, view_port=None, data_edges_visible=None, data_elements_visible=None, system_data_edges_visible=None, system_data_elements_visible=None, decision_data_edges_visible=None, decision_data_elements_visible=None, data_flow_lane_visible=None, sync_edges_visible=None, hidden_nodes_visible=None, adv_options=None):  # noqa: E501
        """RenderOptions - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._width = None
        self._height = None
        self._view_port = None
        self._data_edges_visible = None
        self._data_elements_visible = None
        self._system_data_edges_visible = None
        self._system_data_elements_visible = None
        self._decision_data_edges_visible = None
        self._decision_data_elements_visible = None
        self._data_flow_lane_visible = None
        self._sync_edges_visible = None
        self._hidden_nodes_visible = None
        self._adv_options = None
        if not(hasattr(self, "discriminator")) or not(self.discriminator):
            self.discriminator = None
        self.type = type
        if width is not None:
            self.width = width
        if height is not None:
            self.height = height
        if view_port is not None:
            self.view_port = view_port
        self.data_edges_visible = data_edges_visible
        self.data_elements_visible = data_elements_visible
        self.system_data_edges_visible = system_data_edges_visible
        self.system_data_elements_visible = system_data_elements_visible
        self.decision_data_edges_visible = decision_data_edges_visible
        self.decision_data_elements_visible = decision_data_elements_visible
        self.data_flow_lane_visible = data_flow_lane_visible
        self.sync_edges_visible = sync_edges_visible
        self.hidden_nodes_visible = hidden_nodes_visible
        if adv_options is not None:
            self.adv_options = adv_options

    @property
    def type(self):
        """Gets the type of this RenderOptions.  # noqa: E501


        :return: The type of this RenderOptions.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RenderOptions.


        :param type: The type of this RenderOptions.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def width(self):
        """Gets the width of this RenderOptions.  # noqa: E501


        :return: The width of this RenderOptions.  # noqa: E501
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this RenderOptions.


        :param width: The width of this RenderOptions.  # noqa: E501
        :type: int
        """

        self._width = width

    @property
    def height(self):
        """Gets the height of this RenderOptions.  # noqa: E501


        :return: The height of this RenderOptions.  # noqa: E501
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this RenderOptions.


        :param height: The height of this RenderOptions.  # noqa: E501
        :type: int
        """

        self._height = height

    @property
    def view_port(self):
        """Gets the view_port of this RenderOptions.  # noqa: E501


        :return: The view_port of this RenderOptions.  # noqa: E501
        :rtype: Rectangle
        """
        return self._view_port

    @view_port.setter
    def view_port(self, view_port):
        """Sets the view_port of this RenderOptions.


        :param view_port: The view_port of this RenderOptions.  # noqa: E501
        :type: Rectangle
        """

        self._view_port = view_port

    @property
    def data_edges_visible(self):
        """Gets the data_edges_visible of this RenderOptions.  # noqa: E501


        :return: The data_edges_visible of this RenderOptions.  # noqa: E501
        :rtype: bool
        """
        return self._data_edges_visible

    @data_edges_visible.setter
    def data_edges_visible(self, data_edges_visible):
        """Sets the data_edges_visible of this RenderOptions.


        :param data_edges_visible: The data_edges_visible of this RenderOptions.  # noqa: E501
        :type: bool
        """
        if data_edges_visible is None:
            raise ValueError("Invalid value for `data_edges_visible`, must not be `None`")  # noqa: E501

        self._data_edges_visible = data_edges_visible

    @property
    def data_elements_visible(self):
        """Gets the data_elements_visible of this RenderOptions.  # noqa: E501


        :return: The data_elements_visible of this RenderOptions.  # noqa: E501
        :rtype: bool
        """
        return self._data_elements_visible

    @data_elements_visible.setter
    def data_elements_visible(self, data_elements_visible):
        """Sets the data_elements_visible of this RenderOptions.


        :param data_elements_visible: The data_elements_visible of this RenderOptions.  # noqa: E501
        :type: bool
        """
        if data_elements_visible is None:
            raise ValueError("Invalid value for `data_elements_visible`, must not be `None`")  # noqa: E501

        self._data_elements_visible = data_elements_visible

    @property
    def system_data_edges_visible(self):
        """Gets the system_data_edges_visible of this RenderOptions.  # noqa: E501


        :return: The system_data_edges_visible of this RenderOptions.  # noqa: E501
        :rtype: bool
        """
        return self._system_data_edges_visible

    @system_data_edges_visible.setter
    def system_data_edges_visible(self, system_data_edges_visible):
        """Sets the system_data_edges_visible of this RenderOptions.


        :param system_data_edges_visible: The system_data_edges_visible of this RenderOptions.  # noqa: E501
        :type: bool
        """
        if system_data_edges_visible is None:
            raise ValueError("Invalid value for `system_data_edges_visible`, must not be `None`")  # noqa: E501

        self._system_data_edges_visible = system_data_edges_visible

    @property
    def system_data_elements_visible(self):
        """Gets the system_data_elements_visible of this RenderOptions.  # noqa: E501


        :return: The system_data_elements_visible of this RenderOptions.  # noqa: E501
        :rtype: bool
        """
        return self._system_data_elements_visible

    @system_data_elements_visible.setter
    def system_data_elements_visible(self, system_data_elements_visible):
        """Sets the system_data_elements_visible of this RenderOptions.


        :param system_data_elements_visible: The system_data_elements_visible of this RenderOptions.  # noqa: E501
        :type: bool
        """
        if system_data_elements_visible is None:
            raise ValueError("Invalid value for `system_data_elements_visible`, must not be `None`")  # noqa: E501

        self._system_data_elements_visible = system_data_elements_visible

    @property
    def decision_data_edges_visible(self):
        """Gets the decision_data_edges_visible of this RenderOptions.  # noqa: E501


        :return: The decision_data_edges_visible of this RenderOptions.  # noqa: E501
        :rtype: bool
        """
        return self._decision_data_edges_visible

    @decision_data_edges_visible.setter
    def decision_data_edges_visible(self, decision_data_edges_visible):
        """Sets the decision_data_edges_visible of this RenderOptions.


        :param decision_data_edges_visible: The decision_data_edges_visible of this RenderOptions.  # noqa: E501
        :type: bool
        """
        if decision_data_edges_visible is None:
            raise ValueError("Invalid value for `decision_data_edges_visible`, must not be `None`")  # noqa: E501

        self._decision_data_edges_visible = decision_data_edges_visible

    @property
    def decision_data_elements_visible(self):
        """Gets the decision_data_elements_visible of this RenderOptions.  # noqa: E501


        :return: The decision_data_elements_visible of this RenderOptions.  # noqa: E501
        :rtype: bool
        """
        return self._decision_data_elements_visible

    @decision_data_elements_visible.setter
    def decision_data_elements_visible(self, decision_data_elements_visible):
        """Sets the decision_data_elements_visible of this RenderOptions.


        :param decision_data_elements_visible: The decision_data_elements_visible of this RenderOptions.  # noqa: E501
        :type: bool
        """
        if decision_data_elements_visible is None:
            raise ValueError("Invalid value for `decision_data_elements_visible`, must not be `None`")  # noqa: E501

        self._decision_data_elements_visible = decision_data_elements_visible

    @property
    def data_flow_lane_visible(self):
        """Gets the data_flow_lane_visible of this RenderOptions.  # noqa: E501


        :return: The data_flow_lane_visible of this RenderOptions.  # noqa: E501
        :rtype: bool
        """
        return self._data_flow_lane_visible

    @data_flow_lane_visible.setter
    def data_flow_lane_visible(self, data_flow_lane_visible):
        """Sets the data_flow_lane_visible of this RenderOptions.


        :param data_flow_lane_visible: The data_flow_lane_visible of this RenderOptions.  # noqa: E501
        :type: bool
        """
        if data_flow_lane_visible is None:
            raise ValueError("Invalid value for `data_flow_lane_visible`, must not be `None`")  # noqa: E501

        self._data_flow_lane_visible = data_flow_lane_visible

    @property
    def sync_edges_visible(self):
        """Gets the sync_edges_visible of this RenderOptions.  # noqa: E501


        :return: The sync_edges_visible of this RenderOptions.  # noqa: E501
        :rtype: bool
        """
        return self._sync_edges_visible

    @sync_edges_visible.setter
    def sync_edges_visible(self, sync_edges_visible):
        """Sets the sync_edges_visible of this RenderOptions.


        :param sync_edges_visible: The sync_edges_visible of this RenderOptions.  # noqa: E501
        :type: bool
        """
        if sync_edges_visible is None:
            raise ValueError("Invalid value for `sync_edges_visible`, must not be `None`")  # noqa: E501

        self._sync_edges_visible = sync_edges_visible

    @property
    def hidden_nodes_visible(self):
        """Gets the hidden_nodes_visible of this RenderOptions.  # noqa: E501


        :return: The hidden_nodes_visible of this RenderOptions.  # noqa: E501
        :rtype: bool
        """
        return self._hidden_nodes_visible

    @hidden_nodes_visible.setter
    def hidden_nodes_visible(self, hidden_nodes_visible):
        """Sets the hidden_nodes_visible of this RenderOptions.


        :param hidden_nodes_visible: The hidden_nodes_visible of this RenderOptions.  # noqa: E501
        :type: bool
        """
        if hidden_nodes_visible is None:
            raise ValueError("Invalid value for `hidden_nodes_visible`, must not be `None`")  # noqa: E501

        self._hidden_nodes_visible = hidden_nodes_visible

    @property
    def adv_options(self):
        """Gets the adv_options of this RenderOptions.  # noqa: E501


        :return: The adv_options of this RenderOptions.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._adv_options

    @adv_options.setter
    def adv_options(self, adv_options):
        """Sets the adv_options of this RenderOptions.


        :param adv_options: The adv_options of this RenderOptions.  # noqa: E501
        :type: dict(str, str)
        """

        self._adv_options = adv_options

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RenderOptions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RenderOptions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
