# coding: utf-8

"""
    AristaFlowREST/ProcessImageRenderer

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProcessImageData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'image': 'str',
        'image_size': 'Rectangle',
        'node_area': 'dict(str, Rectangle)',
        'data_element_area': 'dict(str, Rectangle)'
    }

    attribute_map = {
        'type': 'type',
        'image': 'image',
        'image_size': 'imageSize',
        'node_area': 'nodeArea',
        'data_element_area': 'dataElementArea'
    }

    def __init__(self, type=None, image=None, image_size=None, node_area=None, data_element_area=None):  # noqa: E501
        """ProcessImageData - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._image = None
        self._image_size = None
        self._node_area = None
        self._data_element_area = None
        if not(hasattr(self, "discriminator")) or not(self.discriminator):
            self.discriminator = None
        self.type = type
        self.image = image
        self.image_size = image_size
        if node_area is not None:
            self.node_area = node_area
        if data_element_area is not None:
            self.data_element_area = data_element_area

    @property
    def type(self):
        """Gets the type of this ProcessImageData.  # noqa: E501


        :return: The type of this ProcessImageData.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ProcessImageData.


        :param type: The type of this ProcessImageData.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def image(self):
        """Gets the image of this ProcessImageData.  # noqa: E501


        :return: The image of this ProcessImageData.  # noqa: E501
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this ProcessImageData.


        :param image: The image of this ProcessImageData.  # noqa: E501
        :type: str
        """
        if image is None:
            raise ValueError("Invalid value for `image`, must not be `None`")  # noqa: E501

        self._image = image

    @property
    def image_size(self):
        """Gets the image_size of this ProcessImageData.  # noqa: E501


        :return: The image_size of this ProcessImageData.  # noqa: E501
        :rtype: Rectangle
        """
        return self._image_size

    @image_size.setter
    def image_size(self, image_size):
        """Sets the image_size of this ProcessImageData.


        :param image_size: The image_size of this ProcessImageData.  # noqa: E501
        :type: Rectangle
        """
        if image_size is None:
            raise ValueError("Invalid value for `image_size`, must not be `None`")  # noqa: E501

        self._image_size = image_size

    @property
    def node_area(self):
        """Gets the node_area of this ProcessImageData.  # noqa: E501


        :return: The node_area of this ProcessImageData.  # noqa: E501
        :rtype: dict(str, Rectangle)
        """
        return self._node_area

    @node_area.setter
    def node_area(self, node_area):
        """Sets the node_area of this ProcessImageData.


        :param node_area: The node_area of this ProcessImageData.  # noqa: E501
        :type: dict(str, Rectangle)
        """

        self._node_area = node_area

    @property
    def data_element_area(self):
        """Gets the data_element_area of this ProcessImageData.  # noqa: E501


        :return: The data_element_area of this ProcessImageData.  # noqa: E501
        :rtype: dict(str, Rectangle)
        """
        return self._data_element_area

    @data_element_area.setter
    def data_element_area(self, data_element_area):
        """Sets the data_element_area of this ProcessImageData.


        :param data_element_area: The data_element_area of this ProcessImageData.  # noqa: E501
        :type: dict(str, Rectangle)
        """

        self._data_element_area = data_element_area

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProcessImageData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProcessImageData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
