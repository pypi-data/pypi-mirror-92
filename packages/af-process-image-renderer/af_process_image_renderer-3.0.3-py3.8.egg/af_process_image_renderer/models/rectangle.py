# coding: utf-8

"""
    AristaFlowREST/ProcessImageRenderer

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Rectangle(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'x': 'int',
        'y': 'int',
        'width': 'int',
        'height': 'int',
        'is_relative': 'bool'
    }

    attribute_map = {
        'x': 'x',
        'y': 'y',
        'width': 'width',
        'height': 'height',
        'is_relative': 'isRelative'
    }

    def __init__(self, x=None, y=None, width=None, height=None, is_relative=None):  # noqa: E501
        """Rectangle - a model defined in Swagger"""  # noqa: E501
        self._x = None
        self._y = None
        self._width = None
        self._height = None
        self._is_relative = None
        if not(hasattr(self, "discriminator")) or not(self.discriminator):
            self.discriminator = None
        if x is not None:
            self.x = x
        if y is not None:
            self.y = y
        if width is not None:
            self.width = width
        if height is not None:
            self.height = height
        self.is_relative = is_relative

    @property
    def x(self):
        """Gets the x of this Rectangle.  # noqa: E501


        :return: The x of this Rectangle.  # noqa: E501
        :rtype: int
        """
        return self._x

    @x.setter
    def x(self, x):
        """Sets the x of this Rectangle.


        :param x: The x of this Rectangle.  # noqa: E501
        :type: int
        """

        self._x = x

    @property
    def y(self):
        """Gets the y of this Rectangle.  # noqa: E501


        :return: The y of this Rectangle.  # noqa: E501
        :rtype: int
        """
        return self._y

    @y.setter
    def y(self, y):
        """Sets the y of this Rectangle.


        :param y: The y of this Rectangle.  # noqa: E501
        :type: int
        """

        self._y = y

    @property
    def width(self):
        """Gets the width of this Rectangle.  # noqa: E501


        :return: The width of this Rectangle.  # noqa: E501
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this Rectangle.


        :param width: The width of this Rectangle.  # noqa: E501
        :type: int
        """

        self._width = width

    @property
    def height(self):
        """Gets the height of this Rectangle.  # noqa: E501


        :return: The height of this Rectangle.  # noqa: E501
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this Rectangle.


        :param height: The height of this Rectangle.  # noqa: E501
        :type: int
        """

        self._height = height

    @property
    def is_relative(self):
        """Gets the is_relative of this Rectangle.  # noqa: E501


        :return: The is_relative of this Rectangle.  # noqa: E501
        :rtype: bool
        """
        return self._is_relative

    @is_relative.setter
    def is_relative(self, is_relative):
        """Sets the is_relative of this Rectangle.


        :param is_relative: The is_relative of this Rectangle.  # noqa: E501
        :type: bool
        """
        if is_relative is None:
            raise ValueError("Invalid value for `is_relative`, must not be `None`")  # noqa: E501

        self._is_relative = is_relative

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Rectangle, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Rectangle):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
