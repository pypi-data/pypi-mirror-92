# coding: utf-8

"""
    AristaFlowREST/ProcessImageRenderer

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DecisionStatement(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'label': 'str',
        'loc_label': 'dict(str, str)',
        'statement': 'str',
        'loc_statement': 'dict(str, str)',
        'user_attributes': 'dict(str, str)'
    }

    attribute_map = {
        'id': 'id',
        'label': 'label',
        'loc_label': 'locLabel',
        'statement': 'statement',
        'loc_statement': 'locStatement',
        'user_attributes': 'userAttributes'
    }

    def __init__(self, id=None, label=None, loc_label=None, statement=None, loc_statement=None, user_attributes=None):  # noqa: E501
        """DecisionStatement - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._label = None
        self._loc_label = None
        self._statement = None
        self._loc_statement = None
        self._user_attributes = None
        if not(hasattr(self, "discriminator")) or not(self.discriminator):
            self.discriminator = None
        self.id = id
        self.label = label
        if loc_label is not None:
            self.loc_label = loc_label
        self.statement = statement
        if loc_statement is not None:
            self.loc_statement = loc_statement
        if user_attributes is not None:
            self.user_attributes = user_attributes

    @property
    def id(self):
        """Gets the id of this DecisionStatement.  # noqa: E501


        :return: The id of this DecisionStatement.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DecisionStatement.


        :param id: The id of this DecisionStatement.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def label(self):
        """Gets the label of this DecisionStatement.  # noqa: E501


        :return: The label of this DecisionStatement.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this DecisionStatement.


        :param label: The label of this DecisionStatement.  # noqa: E501
        :type: str
        """
        if label is None:
            raise ValueError("Invalid value for `label`, must not be `None`")  # noqa: E501

        self._label = label

    @property
    def loc_label(self):
        """Gets the loc_label of this DecisionStatement.  # noqa: E501


        :return: The loc_label of this DecisionStatement.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._loc_label

    @loc_label.setter
    def loc_label(self, loc_label):
        """Sets the loc_label of this DecisionStatement.


        :param loc_label: The loc_label of this DecisionStatement.  # noqa: E501
        :type: dict(str, str)
        """

        self._loc_label = loc_label

    @property
    def statement(self):
        """Gets the statement of this DecisionStatement.  # noqa: E501


        :return: The statement of this DecisionStatement.  # noqa: E501
        :rtype: str
        """
        return self._statement

    @statement.setter
    def statement(self, statement):
        """Sets the statement of this DecisionStatement.


        :param statement: The statement of this DecisionStatement.  # noqa: E501
        :type: str
        """
        if statement is None:
            raise ValueError("Invalid value for `statement`, must not be `None`")  # noqa: E501

        self._statement = statement

    @property
    def loc_statement(self):
        """Gets the loc_statement of this DecisionStatement.  # noqa: E501


        :return: The loc_statement of this DecisionStatement.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._loc_statement

    @loc_statement.setter
    def loc_statement(self, loc_statement):
        """Sets the loc_statement of this DecisionStatement.


        :param loc_statement: The loc_statement of this DecisionStatement.  # noqa: E501
        :type: dict(str, str)
        """

        self._loc_statement = loc_statement

    @property
    def user_attributes(self):
        """Gets the user_attributes of this DecisionStatement.  # noqa: E501


        :return: The user_attributes of this DecisionStatement.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._user_attributes

    @user_attributes.setter
    def user_attributes(self, user_attributes):
        """Sets the user_attributes of this DecisionStatement.


        :param user_attributes: The user_attributes of this DecisionStatement.  # noqa: E501
        :type: dict(str, str)
        """

        self._user_attributes = user_attributes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DecisionStatement, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DecisionStatement):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
