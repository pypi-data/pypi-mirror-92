# coding: utf-8

"""
    BIMData API

    BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: support@bimdata.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from bimdata_api_client.configuration import Configuration


class OrthogonalCamera(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'view_to_world_scale': 'float',
        'camera_direction': 'Direction',
        'camera_up_vector': 'Direction',
        'camera_view_point': 'Point'
    }

    attribute_map = {
        'view_to_world_scale': 'view_to_world_scale',
        'camera_direction': 'camera_direction',
        'camera_up_vector': 'camera_up_vector',
        'camera_view_point': 'camera_view_point'
    }

    def __init__(self, view_to_world_scale=None, camera_direction=None, camera_up_vector=None, camera_view_point=None, local_vars_configuration=None):  # noqa: E501
        """OrthogonalCamera - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._view_to_world_scale = None
        self._camera_direction = None
        self._camera_up_vector = None
        self._camera_view_point = None
        self.discriminator = None

        self.view_to_world_scale = view_to_world_scale
        self.camera_direction = camera_direction
        self.camera_up_vector = camera_up_vector
        self.camera_view_point = camera_view_point

    @property
    def view_to_world_scale(self):
        """Gets the view_to_world_scale of this OrthogonalCamera.  # noqa: E501


        :return: The view_to_world_scale of this OrthogonalCamera.  # noqa: E501
        :rtype: float
        """
        return self._view_to_world_scale

    @view_to_world_scale.setter
    def view_to_world_scale(self, view_to_world_scale):
        """Sets the view_to_world_scale of this OrthogonalCamera.


        :param view_to_world_scale: The view_to_world_scale of this OrthogonalCamera.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and view_to_world_scale is None:  # noqa: E501
            raise ValueError("Invalid value for `view_to_world_scale`, must not be `None`")  # noqa: E501

        self._view_to_world_scale = view_to_world_scale

    @property
    def camera_direction(self):
        """Gets the camera_direction of this OrthogonalCamera.  # noqa: E501


        :return: The camera_direction of this OrthogonalCamera.  # noqa: E501
        :rtype: Direction
        """
        return self._camera_direction

    @camera_direction.setter
    def camera_direction(self, camera_direction):
        """Sets the camera_direction of this OrthogonalCamera.


        :param camera_direction: The camera_direction of this OrthogonalCamera.  # noqa: E501
        :type: Direction
        """
        if self.local_vars_configuration.client_side_validation and camera_direction is None:  # noqa: E501
            raise ValueError("Invalid value for `camera_direction`, must not be `None`")  # noqa: E501

        self._camera_direction = camera_direction

    @property
    def camera_up_vector(self):
        """Gets the camera_up_vector of this OrthogonalCamera.  # noqa: E501


        :return: The camera_up_vector of this OrthogonalCamera.  # noqa: E501
        :rtype: Direction
        """
        return self._camera_up_vector

    @camera_up_vector.setter
    def camera_up_vector(self, camera_up_vector):
        """Sets the camera_up_vector of this OrthogonalCamera.


        :param camera_up_vector: The camera_up_vector of this OrthogonalCamera.  # noqa: E501
        :type: Direction
        """
        if self.local_vars_configuration.client_side_validation and camera_up_vector is None:  # noqa: E501
            raise ValueError("Invalid value for `camera_up_vector`, must not be `None`")  # noqa: E501

        self._camera_up_vector = camera_up_vector

    @property
    def camera_view_point(self):
        """Gets the camera_view_point of this OrthogonalCamera.  # noqa: E501


        :return: The camera_view_point of this OrthogonalCamera.  # noqa: E501
        :rtype: Point
        """
        return self._camera_view_point

    @camera_view_point.setter
    def camera_view_point(self, camera_view_point):
        """Sets the camera_view_point of this OrthogonalCamera.


        :param camera_view_point: The camera_view_point of this OrthogonalCamera.  # noqa: E501
        :type: Point
        """
        if self.local_vars_configuration.client_side_validation and camera_view_point is None:  # noqa: E501
            raise ValueError("Invalid value for `camera_view_point`, must not be `None`")  # noqa: E501

        self._camera_view_point = camera_view_point

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrthogonalCamera):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OrthogonalCamera):
            return True

        return self.to_dict() != other.to_dict()
