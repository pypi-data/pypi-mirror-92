# coding: utf-8

"""
    BIMData API

    BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: support@bimdata.io
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from bimdata_api_client.api_client import ApiClient
from bimdata_api_client.exceptions import (
    ApiTypeError,
    ApiValueError
)


class BcfApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_comment(self, projects_pk, topics_guid, data, **kwargs):  # noqa: E501
        """Create a comment  # noqa: E501

        Create a comment Required scopes: bcf:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_comment(projects_pk, topics_guid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str projects_pk: (required)
        :param str topics_guid: (required)
        :param Comment data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Comment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.create_comment_with_http_info(projects_pk, topics_guid, data, **kwargs)  # noqa: E501

    def create_comment_with_http_info(self, projects_pk, topics_guid, data, **kwargs):  # noqa: E501
        """Create a comment  # noqa: E501

        Create a comment Required scopes: bcf:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_comment_with_http_info(projects_pk, topics_guid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str projects_pk: (required)
        :param str topics_guid: (required)
        :param Comment data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Comment, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['projects_pk', 'topics_guid', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_comment" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projects_pk' is set
        if self.api_client.client_side_validation and ('projects_pk' not in local_var_params or  # noqa: E501
                                                        local_var_params['projects_pk'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projects_pk` when calling `create_comment`")  # noqa: E501
        # verify the required parameter 'topics_guid' is set
        if self.api_client.client_side_validation and ('topics_guid' not in local_var_params or  # noqa: E501
                                                        local_var_params['topics_guid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `topics_guid` when calling `create_comment`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `create_comment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projects_pk' in local_var_params:
            path_params['projects_pk'] = local_var_params['projects_pk']  # noqa: E501
        if 'topics_guid' in local_var_params:
            path_params['topics_guid'] = local_var_params['topics_guid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer', 'bimdata_connect', 'client_credentials']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_guid}/comments', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Comment',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_full_topic(self, projects_pk, data, **kwargs):  # noqa: E501
        """Create a Topic with viewpoints and comments  # noqa: E501

        This is not a standard route. You can send a topic, viewpoints and comments in a single call Required scopes: bcf:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_full_topic(projects_pk, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str projects_pk: (required)
        :param FullTopic data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: FullTopic
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.create_full_topic_with_http_info(projects_pk, data, **kwargs)  # noqa: E501

    def create_full_topic_with_http_info(self, projects_pk, data, **kwargs):  # noqa: E501
        """Create a Topic with viewpoints and comments  # noqa: E501

        This is not a standard route. You can send a topic, viewpoints and comments in a single call Required scopes: bcf:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_full_topic_with_http_info(projects_pk, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str projects_pk: (required)
        :param FullTopic data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(FullTopic, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['projects_pk', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_full_topic" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projects_pk' is set
        if self.api_client.client_side_validation and ('projects_pk' not in local_var_params or  # noqa: E501
                                                        local_var_params['projects_pk'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projects_pk` when calling `create_full_topic`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `create_full_topic`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projects_pk' in local_var_params:
            path_params['projects_pk'] = local_var_params['projects_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer', 'bimdata_connect', 'client_credentials']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/full-topic', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FullTopic',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_topic(self, projects_pk, data, **kwargs):  # noqa: E501
        """Create a topic  # noqa: E501

        Create a topic Required scopes: bcf:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_topic(projects_pk, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str projects_pk: (required)
        :param Topic data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Topic
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.create_topic_with_http_info(projects_pk, data, **kwargs)  # noqa: E501

    def create_topic_with_http_info(self, projects_pk, data, **kwargs):  # noqa: E501
        """Create a topic  # noqa: E501

        Create a topic Required scopes: bcf:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_topic_with_http_info(projects_pk, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str projects_pk: (required)
        :param Topic data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Topic, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['projects_pk', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_topic" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projects_pk' is set
        if self.api_client.client_side_validation and ('projects_pk' not in local_var_params or  # noqa: E501
                                                        local_var_params['projects_pk'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projects_pk` when calling `create_topic`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `create_topic`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projects_pk' in local_var_params:
            path_params['projects_pk'] = local_var_params['projects_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer', 'bimdata_connect', 'client_credentials']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Topic',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_viewpoint(self, projects_pk, topics_guid, data, **kwargs):  # noqa: E501
        """Create a Viewpoint  # noqa: E501

        Create a Viewpoint Required scopes: bcf:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_viewpoint(projects_pk, topics_guid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str projects_pk: (required)
        :param str topics_guid: (required)
        :param Viewpoint data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Viewpoint
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.create_viewpoint_with_http_info(projects_pk, topics_guid, data, **kwargs)  # noqa: E501

    def create_viewpoint_with_http_info(self, projects_pk, topics_guid, data, **kwargs):  # noqa: E501
        """Create a Viewpoint  # noqa: E501

        Create a Viewpoint Required scopes: bcf:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_viewpoint_with_http_info(projects_pk, topics_guid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str projects_pk: (required)
        :param str topics_guid: (required)
        :param Viewpoint data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Viewpoint, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['projects_pk', 'topics_guid', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_viewpoint" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projects_pk' is set
        if self.api_client.client_side_validation and ('projects_pk' not in local_var_params or  # noqa: E501
                                                        local_var_params['projects_pk'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projects_pk` when calling `create_viewpoint`")  # noqa: E501
        # verify the required parameter 'topics_guid' is set
        if self.api_client.client_side_validation and ('topics_guid' not in local_var_params or  # noqa: E501
                                                        local_var_params['topics_guid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `topics_guid` when calling `create_viewpoint`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `create_viewpoint`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projects_pk' in local_var_params:
            path_params['projects_pk'] = local_var_params['projects_pk']  # noqa: E501
        if 'topics_guid' in local_var_params:
            path_params['topics_guid'] = local_var_params['topics_guid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer', 'bimdata_connect', 'client_credentials']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_guid}/viewpoints', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Viewpoint',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_comment(self, guid, projects_pk, topics_guid, **kwargs):  # noqa: E501
        """Delete a comment  # noqa: E501

        Delete a comment Required scopes: bcf:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_comment(guid, projects_pk, topics_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str guid: (required)
        :param str projects_pk: (required)
        :param str topics_guid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.delete_comment_with_http_info(guid, projects_pk, topics_guid, **kwargs)  # noqa: E501

    def delete_comment_with_http_info(self, guid, projects_pk, topics_guid, **kwargs):  # noqa: E501
        """Delete a comment  # noqa: E501

        Delete a comment Required scopes: bcf:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_comment_with_http_info(guid, projects_pk, topics_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str guid: (required)
        :param str projects_pk: (required)
        :param str topics_guid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['guid', 'projects_pk', 'topics_guid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_comment" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'guid' is set
        if self.api_client.client_side_validation and ('guid' not in local_var_params or  # noqa: E501
                                                        local_var_params['guid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `guid` when calling `delete_comment`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if self.api_client.client_side_validation and ('projects_pk' not in local_var_params or  # noqa: E501
                                                        local_var_params['projects_pk'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projects_pk` when calling `delete_comment`")  # noqa: E501
        # verify the required parameter 'topics_guid' is set
        if self.api_client.client_side_validation and ('topics_guid' not in local_var_params or  # noqa: E501
                                                        local_var_params['topics_guid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `topics_guid` when calling `delete_comment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in local_var_params:
            path_params['guid'] = local_var_params['guid']  # noqa: E501
        if 'projects_pk' in local_var_params:
            path_params['projects_pk'] = local_var_params['projects_pk']  # noqa: E501
        if 'topics_guid' in local_var_params:
            path_params['topics_guid'] = local_var_params['topics_guid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Bearer', 'bimdata_connect', 'client_credentials']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_guid}/comments/{guid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_topic(self, guid, projects_pk, **kwargs):  # noqa: E501
        """Delete a topic  # noqa: E501

        Delete a topic Required scopes: bcf:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_topic(guid, projects_pk, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str guid: (required)
        :param str projects_pk: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.delete_topic_with_http_info(guid, projects_pk, **kwargs)  # noqa: E501

    def delete_topic_with_http_info(self, guid, projects_pk, **kwargs):  # noqa: E501
        """Delete a topic  # noqa: E501

        Delete a topic Required scopes: bcf:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_topic_with_http_info(guid, projects_pk, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str guid: (required)
        :param str projects_pk: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['guid', 'projects_pk']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_topic" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'guid' is set
        if self.api_client.client_side_validation and ('guid' not in local_var_params or  # noqa: E501
                                                        local_var_params['guid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `guid` when calling `delete_topic`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if self.api_client.client_side_validation and ('projects_pk' not in local_var_params or  # noqa: E501
                                                        local_var_params['projects_pk'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projects_pk` when calling `delete_topic`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in local_var_params:
            path_params['guid'] = local_var_params['guid']  # noqa: E501
        if 'projects_pk' in local_var_params:
            path_params['projects_pk'] = local_var_params['projects_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Bearer', 'bimdata_connect', 'client_credentials']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{guid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_viewpoint(self, guid, projects_pk, topics_guid, **kwargs):  # noqa: E501
        """Delete a Viewpoint  # noqa: E501

        This is not a standard route. Delete a Viewpoint Required scopes: bcf:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_viewpoint(guid, projects_pk, topics_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str guid: (required)
        :param str projects_pk: (required)
        :param str topics_guid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.delete_viewpoint_with_http_info(guid, projects_pk, topics_guid, **kwargs)  # noqa: E501

    def delete_viewpoint_with_http_info(self, guid, projects_pk, topics_guid, **kwargs):  # noqa: E501
        """Delete a Viewpoint  # noqa: E501

        This is not a standard route. Delete a Viewpoint Required scopes: bcf:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_viewpoint_with_http_info(guid, projects_pk, topics_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str guid: (required)
        :param str projects_pk: (required)
        :param str topics_guid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['guid', 'projects_pk', 'topics_guid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_viewpoint" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'guid' is set
        if self.api_client.client_side_validation and ('guid' not in local_var_params or  # noqa: E501
                                                        local_var_params['guid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `guid` when calling `delete_viewpoint`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if self.api_client.client_side_validation and ('projects_pk' not in local_var_params or  # noqa: E501
                                                        local_var_params['projects_pk'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projects_pk` when calling `delete_viewpoint`")  # noqa: E501
        # verify the required parameter 'topics_guid' is set
        if self.api_client.client_side_validation and ('topics_guid' not in local_var_params or  # noqa: E501
                                                        local_var_params['topics_guid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `topics_guid` when calling `delete_viewpoint`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in local_var_params:
            path_params['guid'] = local_var_params['guid']  # noqa: E501
        if 'projects_pk' in local_var_params:
            path_params['projects_pk'] = local_var_params['projects_pk']  # noqa: E501
        if 'topics_guid' in local_var_params:
            path_params['topics_guid'] = local_var_params['topics_guid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Bearer', 'bimdata_connect', 'client_credentials']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_guid}/viewpoints/{guid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def download_bcf_export(self, id, **kwargs):  # noqa: E501
        """Export project's topics in bcf-xml format  # noqa: E501

        Export project's topics in bcf-xml format Required scopes: bcf:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.download_bcf_export(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int id: A unique integer value identifying this project. (required)
        :param str topics: topic guids to export, comma separated. Default = all
        :param str format: topic format to export, comma separated. Default = all
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.download_bcf_export_with_http_info(id, **kwargs)  # noqa: E501

    def download_bcf_export_with_http_info(self, id, **kwargs):  # noqa: E501
        """Export project's topics in bcf-xml format  # noqa: E501

        Export project's topics in bcf-xml format Required scopes: bcf:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.download_bcf_export_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int id: A unique integer value identifying this project. (required)
        :param str topics: topic guids to export, comma separated. Default = all
        :param str format: topic format to export, comma separated. Default = all
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(file, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'topics', 'format']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method download_bcf_export" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `download_bcf_export`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'topics' in local_var_params and local_var_params['topics'] is not None:  # noqa: E501
            query_params.append(('topics', local_var_params['topics']))  # noqa: E501
        if 'format' in local_var_params and local_var_params['format'] is not None:  # noqa: E501
            query_params.append(('format', local_var_params['format']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer', 'bimdata_connect', 'client_credentials']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{id}/export', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def full_update_bcf_project(self, id, data, **kwargs):  # noqa: E501
        """Update all fields of a BCF project  # noqa: E501

        Update all fields of a BCF project Required scopes: bcf:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.full_update_bcf_project(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int id: A unique integer value identifying this project. (required)
        :param BcfProject data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: BcfProject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.full_update_bcf_project_with_http_info(id, data, **kwargs)  # noqa: E501

    def full_update_bcf_project_with_http_info(self, id, data, **kwargs):  # noqa: E501
        """Update all fields of a BCF project  # noqa: E501

        Update all fields of a BCF project Required scopes: bcf:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.full_update_bcf_project_with_http_info(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int id: A unique integer value identifying this project. (required)
        :param BcfProject data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(BcfProject, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method full_update_bcf_project" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `full_update_bcf_project`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `full_update_bcf_project`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer', 'bimdata_connect', 'client_credentials']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BcfProject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def full_update_comment(self, guid, projects_pk, topics_guid, data, **kwargs):  # noqa: E501
        """Update all fields of a comment  # noqa: E501

        Update all fields of a comment Required scopes: bcf:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.full_update_comment(guid, projects_pk, topics_guid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str guid: (required)
        :param str projects_pk: (required)
        :param str topics_guid: (required)
        :param Comment data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Comment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.full_update_comment_with_http_info(guid, projects_pk, topics_guid, data, **kwargs)  # noqa: E501

    def full_update_comment_with_http_info(self, guid, projects_pk, topics_guid, data, **kwargs):  # noqa: E501
        """Update all fields of a comment  # noqa: E501

        Update all fields of a comment Required scopes: bcf:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.full_update_comment_with_http_info(guid, projects_pk, topics_guid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str guid: (required)
        :param str projects_pk: (required)
        :param str topics_guid: (required)
        :param Comment data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Comment, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['guid', 'projects_pk', 'topics_guid', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method full_update_comment" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'guid' is set
        if self.api_client.client_side_validation and ('guid' not in local_var_params or  # noqa: E501
                                                        local_var_params['guid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `guid` when calling `full_update_comment`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if self.api_client.client_side_validation and ('projects_pk' not in local_var_params or  # noqa: E501
                                                        local_var_params['projects_pk'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projects_pk` when calling `full_update_comment`")  # noqa: E501
        # verify the required parameter 'topics_guid' is set
        if self.api_client.client_side_validation and ('topics_guid' not in local_var_params or  # noqa: E501
                                                        local_var_params['topics_guid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `topics_guid` when calling `full_update_comment`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `full_update_comment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in local_var_params:
            path_params['guid'] = local_var_params['guid']  # noqa: E501
        if 'projects_pk' in local_var_params:
            path_params['projects_pk'] = local_var_params['projects_pk']  # noqa: E501
        if 'topics_guid' in local_var_params:
            path_params['topics_guid'] = local_var_params['topics_guid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer', 'bimdata_connect', 'client_credentials']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_guid}/comments/{guid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Comment',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def full_update_full_topic(self, guid, projects_pk, data, **kwargs):  # noqa: E501
        """Update all fields of a topic  # noqa: E501

        This is not a standard route. You can update topic, viewpoints and comment is a signle call Required scopes: bcf:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.full_update_full_topic(guid, projects_pk, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str guid: (required)
        :param str projects_pk: (required)
        :param FullTopic data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: FullTopic
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.full_update_full_topic_with_http_info(guid, projects_pk, data, **kwargs)  # noqa: E501

    def full_update_full_topic_with_http_info(self, guid, projects_pk, data, **kwargs):  # noqa: E501
        """Update all fields of a topic  # noqa: E501

        This is not a standard route. You can update topic, viewpoints and comment is a signle call Required scopes: bcf:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.full_update_full_topic_with_http_info(guid, projects_pk, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str guid: (required)
        :param str projects_pk: (required)
        :param FullTopic data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(FullTopic, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['guid', 'projects_pk', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method full_update_full_topic" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'guid' is set
        if self.api_client.client_side_validation and ('guid' not in local_var_params or  # noqa: E501
                                                        local_var_params['guid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `guid` when calling `full_update_full_topic`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if self.api_client.client_side_validation and ('projects_pk' not in local_var_params or  # noqa: E501
                                                        local_var_params['projects_pk'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projects_pk` when calling `full_update_full_topic`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `full_update_full_topic`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in local_var_params:
            path_params['guid'] = local_var_params['guid']  # noqa: E501
        if 'projects_pk' in local_var_params:
            path_params['projects_pk'] = local_var_params['projects_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer', 'bimdata_connect', 'client_credentials']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/full-topic/{guid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FullTopic',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def full_update_topic(self, guid, projects_pk, data, **kwargs):  # noqa: E501
        """Update all fields of a topic  # noqa: E501

        Update all fields of a topic Required scopes: bcf:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.full_update_topic(guid, projects_pk, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str guid: (required)
        :param str projects_pk: (required)
        :param Topic data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Topic
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.full_update_topic_with_http_info(guid, projects_pk, data, **kwargs)  # noqa: E501

    def full_update_topic_with_http_info(self, guid, projects_pk, data, **kwargs):  # noqa: E501
        """Update all fields of a topic  # noqa: E501

        Update all fields of a topic Required scopes: bcf:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.full_update_topic_with_http_info(guid, projects_pk, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str guid: (required)
        :param str projects_pk: (required)
        :param Topic data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Topic, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['guid', 'projects_pk', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method full_update_topic" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'guid' is set
        if self.api_client.client_side_validation and ('guid' not in local_var_params or  # noqa: E501
                                                        local_var_params['guid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `guid` when calling `full_update_topic`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if self.api_client.client_side_validation and ('projects_pk' not in local_var_params or  # noqa: E501
                                                        local_var_params['projects_pk'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projects_pk` when calling `full_update_topic`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `full_update_topic`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in local_var_params:
            path_params['guid'] = local_var_params['guid']  # noqa: E501
        if 'projects_pk' in local_var_params:
            path_params['projects_pk'] = local_var_params['projects_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer', 'bimdata_connect', 'client_credentials']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{guid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Topic',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def full_update_viewpoint(self, guid, projects_pk, topics_guid, data, **kwargs):  # noqa: E501
        """Update all fields of a Viewpoint  # noqa: E501

        This is not a standard route. Update all fields of a Viewpoint Required scopes: bcf:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.full_update_viewpoint(guid, projects_pk, topics_guid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str guid: (required)
        :param str projects_pk: (required)
        :param str topics_guid: (required)
        :param Viewpoint data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Viewpoint
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.full_update_viewpoint_with_http_info(guid, projects_pk, topics_guid, data, **kwargs)  # noqa: E501

    def full_update_viewpoint_with_http_info(self, guid, projects_pk, topics_guid, data, **kwargs):  # noqa: E501
        """Update all fields of a Viewpoint  # noqa: E501

        This is not a standard route. Update all fields of a Viewpoint Required scopes: bcf:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.full_update_viewpoint_with_http_info(guid, projects_pk, topics_guid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str guid: (required)
        :param str projects_pk: (required)
        :param str topics_guid: (required)
        :param Viewpoint data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Viewpoint, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['guid', 'projects_pk', 'topics_guid', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method full_update_viewpoint" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'guid' is set
        if self.api_client.client_side_validation and ('guid' not in local_var_params or  # noqa: E501
                                                        local_var_params['guid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `guid` when calling `full_update_viewpoint`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if self.api_client.client_side_validation and ('projects_pk' not in local_var_params or  # noqa: E501
                                                        local_var_params['projects_pk'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projects_pk` when calling `full_update_viewpoint`")  # noqa: E501
        # verify the required parameter 'topics_guid' is set
        if self.api_client.client_side_validation and ('topics_guid' not in local_var_params or  # noqa: E501
                                                        local_var_params['topics_guid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `topics_guid` when calling `full_update_viewpoint`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `full_update_viewpoint`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in local_var_params:
            path_params['guid'] = local_var_params['guid']  # noqa: E501
        if 'projects_pk' in local_var_params:
            path_params['projects_pk'] = local_var_params['projects_pk']  # noqa: E501
        if 'topics_guid' in local_var_params:
            path_params['topics_guid'] = local_var_params['topics_guid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer', 'bimdata_connect', 'client_credentials']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_guid}/viewpoints/{guid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Viewpoint',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_bcf_project(self, id, **kwargs):  # noqa: E501
        """Retrieve a BCF project  # noqa: E501

        Retrieve a BCF project Required scopes: bcf:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_bcf_project(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int id: A unique integer value identifying this project. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: BcfProject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_bcf_project_with_http_info(id, **kwargs)  # noqa: E501

    def get_bcf_project_with_http_info(self, id, **kwargs):  # noqa: E501
        """Retrieve a BCF project  # noqa: E501

        Retrieve a BCF project Required scopes: bcf:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_bcf_project_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int id: A unique integer value identifying this project. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(BcfProject, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_bcf_project" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `get_bcf_project`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer', 'bimdata_connect', 'client_credentials']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BcfProject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_bcf_projects(self, **kwargs):  # noqa: E501
        """Retrieve all BCF projects  # noqa: E501

        Retrieve all BCF projects Required scopes: bcf:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_bcf_projects(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[BcfProject]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_bcf_projects_with_http_info(**kwargs)  # noqa: E501

    def get_bcf_projects_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve all BCF projects  # noqa: E501

        Retrieve all BCF projects Required scopes: bcf:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_bcf_projects_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[BcfProject], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_bcf_projects" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer', 'bimdata_connect', 'client_credentials']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[BcfProject]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_colorings(self, guid, projects_pk, topics_guid, **kwargs):  # noqa: E501
        """Retrieve all colorings of a viewpoint  # noqa: E501

        Retrieve all colorings of a viewpoint Required scopes: bcf:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_colorings(guid, projects_pk, topics_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str guid: (required)
        :param str projects_pk: (required)
        :param str topics_guid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[Coloring]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_colorings_with_http_info(guid, projects_pk, topics_guid, **kwargs)  # noqa: E501

    def get_colorings_with_http_info(self, guid, projects_pk, topics_guid, **kwargs):  # noqa: E501
        """Retrieve all colorings of a viewpoint  # noqa: E501

        Retrieve all colorings of a viewpoint Required scopes: bcf:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_colorings_with_http_info(guid, projects_pk, topics_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str guid: (required)
        :param str projects_pk: (required)
        :param str topics_guid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[Coloring], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['guid', 'projects_pk', 'topics_guid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_colorings" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'guid' is set
        if self.api_client.client_side_validation and ('guid' not in local_var_params or  # noqa: E501
                                                        local_var_params['guid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `guid` when calling `get_colorings`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if self.api_client.client_side_validation and ('projects_pk' not in local_var_params or  # noqa: E501
                                                        local_var_params['projects_pk'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projects_pk` when calling `get_colorings`")  # noqa: E501
        # verify the required parameter 'topics_guid' is set
        if self.api_client.client_side_validation and ('topics_guid' not in local_var_params or  # noqa: E501
                                                        local_var_params['topics_guid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `topics_guid` when calling `get_colorings`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in local_var_params:
            path_params['guid'] = local_var_params['guid']  # noqa: E501
        if 'projects_pk' in local_var_params:
            path_params['projects_pk'] = local_var_params['projects_pk']  # noqa: E501
        if 'topics_guid' in local_var_params:
            path_params['topics_guid'] = local_var_params['topics_guid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer', 'bimdata_connect', 'client_credentials']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_guid}/viewpoints/{guid}/coloring', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Coloring]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_comment(self, guid, projects_pk, topics_guid, **kwargs):  # noqa: E501
        """Retrieve a comment  # noqa: E501

        Retrieve a comment Required scopes: bcf:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_comment(guid, projects_pk, topics_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str guid: (required)
        :param str projects_pk: (required)
        :param str topics_guid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Comment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_comment_with_http_info(guid, projects_pk, topics_guid, **kwargs)  # noqa: E501

    def get_comment_with_http_info(self, guid, projects_pk, topics_guid, **kwargs):  # noqa: E501
        """Retrieve a comment  # noqa: E501

        Retrieve a comment Required scopes: bcf:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_comment_with_http_info(guid, projects_pk, topics_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str guid: (required)
        :param str projects_pk: (required)
        :param str topics_guid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Comment, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['guid', 'projects_pk', 'topics_guid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_comment" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'guid' is set
        if self.api_client.client_side_validation and ('guid' not in local_var_params or  # noqa: E501
                                                        local_var_params['guid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `guid` when calling `get_comment`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if self.api_client.client_side_validation and ('projects_pk' not in local_var_params or  # noqa: E501
                                                        local_var_params['projects_pk'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projects_pk` when calling `get_comment`")  # noqa: E501
        # verify the required parameter 'topics_guid' is set
        if self.api_client.client_side_validation and ('topics_guid' not in local_var_params or  # noqa: E501
                                                        local_var_params['topics_guid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `topics_guid` when calling `get_comment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in local_var_params:
            path_params['guid'] = local_var_params['guid']  # noqa: E501
        if 'projects_pk' in local_var_params:
            path_params['projects_pk'] = local_var_params['projects_pk']  # noqa: E501
        if 'topics_guid' in local_var_params:
            path_params['topics_guid'] = local_var_params['topics_guid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer', 'bimdata_connect', 'client_credentials']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_guid}/comments/{guid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Comment',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_comments(self, projects_pk, topics_guid, **kwargs):  # noqa: E501
        """Retrieve all comments  # noqa: E501

        Retrieve all comments Required scopes: bcf:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_comments(projects_pk, topics_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str projects_pk: (required)
        :param str topics_guid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[Comment]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_comments_with_http_info(projects_pk, topics_guid, **kwargs)  # noqa: E501

    def get_comments_with_http_info(self, projects_pk, topics_guid, **kwargs):  # noqa: E501
        """Retrieve all comments  # noqa: E501

        Retrieve all comments Required scopes: bcf:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_comments_with_http_info(projects_pk, topics_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str projects_pk: (required)
        :param str topics_guid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[Comment], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['projects_pk', 'topics_guid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_comments" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projects_pk' is set
        if self.api_client.client_side_validation and ('projects_pk' not in local_var_params or  # noqa: E501
                                                        local_var_params['projects_pk'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projects_pk` when calling `get_comments`")  # noqa: E501
        # verify the required parameter 'topics_guid' is set
        if self.api_client.client_side_validation and ('topics_guid' not in local_var_params or  # noqa: E501
                                                        local_var_params['topics_guid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `topics_guid` when calling `get_comments`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projects_pk' in local_var_params:
            path_params['projects_pk'] = local_var_params['projects_pk']  # noqa: E501
        if 'topics_guid' in local_var_params:
            path_params['topics_guid'] = local_var_params['topics_guid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer', 'bimdata_connect', 'client_credentials']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_guid}/comments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Comment]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_extensions(self, projects_pk, **kwargs):  # noqa: E501
        """Retrieve project extensions  # noqa: E501

        Retrieve project extensions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_extensions(projects_pk, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str projects_pk: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Extensions
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_extensions_with_http_info(projects_pk, **kwargs)  # noqa: E501

    def get_extensions_with_http_info(self, projects_pk, **kwargs):  # noqa: E501
        """Retrieve project extensions  # noqa: E501

        Retrieve project extensions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_extensions_with_http_info(projects_pk, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str projects_pk: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Extensions, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['projects_pk']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_extensions" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projects_pk' is set
        if self.api_client.client_side_validation and ('projects_pk' not in local_var_params or  # noqa: E501
                                                        local_var_params['projects_pk'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projects_pk` when calling `get_extensions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projects_pk' in local_var_params:
            path_params['projects_pk'] = local_var_params['projects_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer', 'bimdata_connect', 'client_credentials']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/extensions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Extensions',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_full_topic(self, guid, projects_pk, **kwargs):  # noqa: E501
        """Retrieve a full topic  # noqa: E501

        This is not a standard route. It responds with a topic, its viewpoints and its comments Required scopes: bcf:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_full_topic(guid, projects_pk, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str guid: (required)
        :param str projects_pk: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: FullTopic
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_full_topic_with_http_info(guid, projects_pk, **kwargs)  # noqa: E501

    def get_full_topic_with_http_info(self, guid, projects_pk, **kwargs):  # noqa: E501
        """Retrieve a full topic  # noqa: E501

        This is not a standard route. It responds with a topic, its viewpoints and its comments Required scopes: bcf:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_full_topic_with_http_info(guid, projects_pk, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str guid: (required)
        :param str projects_pk: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(FullTopic, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['guid', 'projects_pk']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_full_topic" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'guid' is set
        if self.api_client.client_side_validation and ('guid' not in local_var_params or  # noqa: E501
                                                        local_var_params['guid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `guid` when calling `get_full_topic`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if self.api_client.client_side_validation and ('projects_pk' not in local_var_params or  # noqa: E501
                                                        local_var_params['projects_pk'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projects_pk` when calling `get_full_topic`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in local_var_params:
            path_params['guid'] = local_var_params['guid']  # noqa: E501
        if 'projects_pk' in local_var_params:
            path_params['projects_pk'] = local_var_params['projects_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer', 'bimdata_connect', 'client_credentials']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/full-topic/{guid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FullTopic',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_full_topics(self, projects_pk, **kwargs):  # noqa: E501
        """Retrieve all full topics  # noqa: E501

        This is not a standard route. It responds with all topics, their viewpoints and their comments Required scopes: bcf:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_full_topics(projects_pk, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str projects_pk: (required)
        :param str ifcs: Filter the returned list by ifcs
        :param str format: Filter the returned list by format
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[FullTopic]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_full_topics_with_http_info(projects_pk, **kwargs)  # noqa: E501

    def get_full_topics_with_http_info(self, projects_pk, **kwargs):  # noqa: E501
        """Retrieve all full topics  # noqa: E501

        This is not a standard route. It responds with all topics, their viewpoints and their comments Required scopes: bcf:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_full_topics_with_http_info(projects_pk, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str projects_pk: (required)
        :param str ifcs: Filter the returned list by ifcs
        :param str format: Filter the returned list by format
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[FullTopic], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['projects_pk', 'ifcs', 'format']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_full_topics" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projects_pk' is set
        if self.api_client.client_side_validation and ('projects_pk' not in local_var_params or  # noqa: E501
                                                        local_var_params['projects_pk'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projects_pk` when calling `get_full_topics`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projects_pk' in local_var_params:
            path_params['projects_pk'] = local_var_params['projects_pk']  # noqa: E501

        query_params = []
        if 'ifcs' in local_var_params and local_var_params['ifcs'] is not None:  # noqa: E501
            query_params.append(('ifcs', local_var_params['ifcs']))  # noqa: E501
        if 'format' in local_var_params and local_var_params['format'] is not None:  # noqa: E501
            query_params.append(('format', local_var_params['format']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer', 'bimdata_connect', 'client_credentials']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/full-topic', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[FullTopic]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_selections(self, guid, projects_pk, topics_guid, **kwargs):  # noqa: E501
        """Retrieve all selections of a viewpoint  # noqa: E501

        Retrieve all selections of a viewpoint Required scopes: bcf:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_selections(guid, projects_pk, topics_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str guid: (required)
        :param str projects_pk: (required)
        :param str topics_guid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[Component]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_selections_with_http_info(guid, projects_pk, topics_guid, **kwargs)  # noqa: E501

    def get_selections_with_http_info(self, guid, projects_pk, topics_guid, **kwargs):  # noqa: E501
        """Retrieve all selections of a viewpoint  # noqa: E501

        Retrieve all selections of a viewpoint Required scopes: bcf:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_selections_with_http_info(guid, projects_pk, topics_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str guid: (required)
        :param str projects_pk: (required)
        :param str topics_guid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[Component], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['guid', 'projects_pk', 'topics_guid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_selections" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'guid' is set
        if self.api_client.client_side_validation and ('guid' not in local_var_params or  # noqa: E501
                                                        local_var_params['guid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `guid` when calling `get_selections`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if self.api_client.client_side_validation and ('projects_pk' not in local_var_params or  # noqa: E501
                                                        local_var_params['projects_pk'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projects_pk` when calling `get_selections`")  # noqa: E501
        # verify the required parameter 'topics_guid' is set
        if self.api_client.client_side_validation and ('topics_guid' not in local_var_params or  # noqa: E501
                                                        local_var_params['topics_guid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `topics_guid` when calling `get_selections`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in local_var_params:
            path_params['guid'] = local_var_params['guid']  # noqa: E501
        if 'projects_pk' in local_var_params:
            path_params['projects_pk'] = local_var_params['projects_pk']  # noqa: E501
        if 'topics_guid' in local_var_params:
            path_params['topics_guid'] = local_var_params['topics_guid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer', 'bimdata_connect', 'client_credentials']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_guid}/viewpoints/{guid}/selection', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Component]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_snapshot(self, guid, projects_pk, topics_guid, **kwargs):  # noqa: E501
        """Retrieve the viewpoint' snapshot  # noqa: E501

        Retrieve the viewpoint' snapshot Required scopes: bcf:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_snapshot(guid, projects_pk, topics_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str guid: (required)
        :param str projects_pk: (required)
        :param str topics_guid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_snapshot_with_http_info(guid, projects_pk, topics_guid, **kwargs)  # noqa: E501

    def get_snapshot_with_http_info(self, guid, projects_pk, topics_guid, **kwargs):  # noqa: E501
        """Retrieve the viewpoint' snapshot  # noqa: E501

        Retrieve the viewpoint' snapshot Required scopes: bcf:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_snapshot_with_http_info(guid, projects_pk, topics_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str guid: (required)
        :param str projects_pk: (required)
        :param str topics_guid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(file, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['guid', 'projects_pk', 'topics_guid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_snapshot" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'guid' is set
        if self.api_client.client_side_validation and ('guid' not in local_var_params or  # noqa: E501
                                                        local_var_params['guid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `guid` when calling `get_snapshot`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if self.api_client.client_side_validation and ('projects_pk' not in local_var_params or  # noqa: E501
                                                        local_var_params['projects_pk'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projects_pk` when calling `get_snapshot`")  # noqa: E501
        # verify the required parameter 'topics_guid' is set
        if self.api_client.client_side_validation and ('topics_guid' not in local_var_params or  # noqa: E501
                                                        local_var_params['topics_guid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `topics_guid` when calling `get_snapshot`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in local_var_params:
            path_params['guid'] = local_var_params['guid']  # noqa: E501
        if 'projects_pk' in local_var_params:
            path_params['projects_pk'] = local_var_params['projects_pk']  # noqa: E501
        if 'topics_guid' in local_var_params:
            path_params['topics_guid'] = local_var_params['topics_guid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer', 'bimdata_connect', 'client_credentials']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_guid}/viewpoints/{guid}/snapshot', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_topic(self, guid, projects_pk, **kwargs):  # noqa: E501
        """Retrieve a topic  # noqa: E501

        Retrieve a topic Required scopes: bcf:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_topic(guid, projects_pk, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str guid: (required)
        :param str projects_pk: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Topic
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_topic_with_http_info(guid, projects_pk, **kwargs)  # noqa: E501

    def get_topic_with_http_info(self, guid, projects_pk, **kwargs):  # noqa: E501
        """Retrieve a topic  # noqa: E501

        Retrieve a topic Required scopes: bcf:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_topic_with_http_info(guid, projects_pk, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str guid: (required)
        :param str projects_pk: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Topic, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['guid', 'projects_pk']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_topic" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'guid' is set
        if self.api_client.client_side_validation and ('guid' not in local_var_params or  # noqa: E501
                                                        local_var_params['guid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `guid` when calling `get_topic`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if self.api_client.client_side_validation and ('projects_pk' not in local_var_params or  # noqa: E501
                                                        local_var_params['projects_pk'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projects_pk` when calling `get_topic`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in local_var_params:
            path_params['guid'] = local_var_params['guid']  # noqa: E501
        if 'projects_pk' in local_var_params:
            path_params['projects_pk'] = local_var_params['projects_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer', 'bimdata_connect', 'client_credentials']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{guid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Topic',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_topic_viewpoints(self, projects_pk, topics_guid, **kwargs):  # noqa: E501
        """Retrieve all viewpoints attached to the topic  # noqa: E501

        This is not a standard route. It returns all viewpoints of the topic that are not attached to a comment. Required scopes: bcf:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_topic_viewpoints(projects_pk, topics_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str projects_pk: (required)
        :param str topics_guid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[Viewpoint]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_topic_viewpoints_with_http_info(projects_pk, topics_guid, **kwargs)  # noqa: E501

    def get_topic_viewpoints_with_http_info(self, projects_pk, topics_guid, **kwargs):  # noqa: E501
        """Retrieve all viewpoints attached to the topic  # noqa: E501

        This is not a standard route. It returns all viewpoints of the topic that are not attached to a comment. Required scopes: bcf:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_topic_viewpoints_with_http_info(projects_pk, topics_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str projects_pk: (required)
        :param str topics_guid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[Viewpoint], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['projects_pk', 'topics_guid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_topic_viewpoints" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projects_pk' is set
        if self.api_client.client_side_validation and ('projects_pk' not in local_var_params or  # noqa: E501
                                                        local_var_params['projects_pk'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projects_pk` when calling `get_topic_viewpoints`")  # noqa: E501
        # verify the required parameter 'topics_guid' is set
        if self.api_client.client_side_validation and ('topics_guid' not in local_var_params or  # noqa: E501
                                                        local_var_params['topics_guid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `topics_guid` when calling `get_topic_viewpoints`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projects_pk' in local_var_params:
            path_params['projects_pk'] = local_var_params['projects_pk']  # noqa: E501
        if 'topics_guid' in local_var_params:
            path_params['topics_guid'] = local_var_params['topics_guid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer', 'bimdata_connect', 'client_credentials']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_guid}/topic-viewpoints', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Viewpoint]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_topics(self, projects_pk, **kwargs):  # noqa: E501
        """Retrieve all topics  # noqa: E501

        Retrieve all topics Required scopes: bcf:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_topics(projects_pk, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str projects_pk: (required)
        :param str ifcs: Filter the returned list by ifcs
        :param str format: Filter the returned list by format
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[Topic]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_topics_with_http_info(projects_pk, **kwargs)  # noqa: E501

    def get_topics_with_http_info(self, projects_pk, **kwargs):  # noqa: E501
        """Retrieve all topics  # noqa: E501

        Retrieve all topics Required scopes: bcf:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_topics_with_http_info(projects_pk, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str projects_pk: (required)
        :param str ifcs: Filter the returned list by ifcs
        :param str format: Filter the returned list by format
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[Topic], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['projects_pk', 'ifcs', 'format']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_topics" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projects_pk' is set
        if self.api_client.client_side_validation and ('projects_pk' not in local_var_params or  # noqa: E501
                                                        local_var_params['projects_pk'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projects_pk` when calling `get_topics`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projects_pk' in local_var_params:
            path_params['projects_pk'] = local_var_params['projects_pk']  # noqa: E501

        query_params = []
        if 'ifcs' in local_var_params and local_var_params['ifcs'] is not None:  # noqa: E501
            query_params.append(('ifcs', local_var_params['ifcs']))  # noqa: E501
        if 'format' in local_var_params and local_var_params['format'] is not None:  # noqa: E501
            query_params.append(('format', local_var_params['format']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer', 'bimdata_connect', 'client_credentials']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Topic]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_user(self, **kwargs):  # noqa: E501
        """Get current user info  # noqa: E501

        Get current user info. If request comes from an App, the response is always:         {             \"id\": None,             \"name\": None,             \"is_client\": True,         } Required scopes: bcf:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: SelfBcfUser
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_user_with_http_info(**kwargs)  # noqa: E501

    def get_user_with_http_info(self, **kwargs):  # noqa: E501
        """Get current user info  # noqa: E501

        Get current user info. If request comes from an App, the response is always:         {             \"id\": None,             \"name\": None,             \"is_client\": True,         } Required scopes: bcf:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(SelfBcfUser, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer', 'bimdata_connect', 'client_credentials']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/current-user', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SelfBcfUser',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_viewpoint(self, guid, projects_pk, topics_guid, **kwargs):  # noqa: E501
        """Retrieve a Viewpoint  # noqa: E501

        Retrieve a Viewpoint Required scopes: bcf:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_viewpoint(guid, projects_pk, topics_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str guid: (required)
        :param str projects_pk: (required)
        :param str topics_guid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Viewpoint
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_viewpoint_with_http_info(guid, projects_pk, topics_guid, **kwargs)  # noqa: E501

    def get_viewpoint_with_http_info(self, guid, projects_pk, topics_guid, **kwargs):  # noqa: E501
        """Retrieve a Viewpoint  # noqa: E501

        Retrieve a Viewpoint Required scopes: bcf:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_viewpoint_with_http_info(guid, projects_pk, topics_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str guid: (required)
        :param str projects_pk: (required)
        :param str topics_guid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Viewpoint, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['guid', 'projects_pk', 'topics_guid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_viewpoint" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'guid' is set
        if self.api_client.client_side_validation and ('guid' not in local_var_params or  # noqa: E501
                                                        local_var_params['guid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `guid` when calling `get_viewpoint`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if self.api_client.client_side_validation and ('projects_pk' not in local_var_params or  # noqa: E501
                                                        local_var_params['projects_pk'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projects_pk` when calling `get_viewpoint`")  # noqa: E501
        # verify the required parameter 'topics_guid' is set
        if self.api_client.client_side_validation and ('topics_guid' not in local_var_params or  # noqa: E501
                                                        local_var_params['topics_guid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `topics_guid` when calling `get_viewpoint`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in local_var_params:
            path_params['guid'] = local_var_params['guid']  # noqa: E501
        if 'projects_pk' in local_var_params:
            path_params['projects_pk'] = local_var_params['projects_pk']  # noqa: E501
        if 'topics_guid' in local_var_params:
            path_params['topics_guid'] = local_var_params['topics_guid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer', 'bimdata_connect', 'client_credentials']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_guid}/viewpoints/{guid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Viewpoint',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_viewpoints(self, projects_pk, topics_guid, **kwargs):  # noqa: E501
        """Retrieve all Viewpoints of a topic  # noqa: E501

        Retrieve all Viewpoints of a topic Required scopes: bcf:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_viewpoints(projects_pk, topics_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str projects_pk: (required)
        :param str topics_guid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[Viewpoint]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_viewpoints_with_http_info(projects_pk, topics_guid, **kwargs)  # noqa: E501

    def get_viewpoints_with_http_info(self, projects_pk, topics_guid, **kwargs):  # noqa: E501
        """Retrieve all Viewpoints of a topic  # noqa: E501

        Retrieve all Viewpoints of a topic Required scopes: bcf:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_viewpoints_with_http_info(projects_pk, topics_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str projects_pk: (required)
        :param str topics_guid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[Viewpoint], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['projects_pk', 'topics_guid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_viewpoints" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projects_pk' is set
        if self.api_client.client_side_validation and ('projects_pk' not in local_var_params or  # noqa: E501
                                                        local_var_params['projects_pk'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projects_pk` when calling `get_viewpoints`")  # noqa: E501
        # verify the required parameter 'topics_guid' is set
        if self.api_client.client_side_validation and ('topics_guid' not in local_var_params or  # noqa: E501
                                                        local_var_params['topics_guid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `topics_guid` when calling `get_viewpoints`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projects_pk' in local_var_params:
            path_params['projects_pk'] = local_var_params['projects_pk']  # noqa: E501
        if 'topics_guid' in local_var_params:
            path_params['topics_guid'] = local_var_params['topics_guid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer', 'bimdata_connect', 'client_credentials']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_guid}/viewpoints', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Viewpoint]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_visibilities(self, guid, projects_pk, topics_guid, **kwargs):  # noqa: E501
        """Retrieve all visibilities of a viewpoint  # noqa: E501

        Retrieve all visibilities of a viewpoint Required scopes: bcf:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_visibilities(guid, projects_pk, topics_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str guid: (required)
        :param str projects_pk: (required)
        :param str topics_guid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Visibility
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_visibilities_with_http_info(guid, projects_pk, topics_guid, **kwargs)  # noqa: E501

    def get_visibilities_with_http_info(self, guid, projects_pk, topics_guid, **kwargs):  # noqa: E501
        """Retrieve all visibilities of a viewpoint  # noqa: E501

        Retrieve all visibilities of a viewpoint Required scopes: bcf:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_visibilities_with_http_info(guid, projects_pk, topics_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str guid: (required)
        :param str projects_pk: (required)
        :param str topics_guid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Visibility, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['guid', 'projects_pk', 'topics_guid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_visibilities" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'guid' is set
        if self.api_client.client_side_validation and ('guid' not in local_var_params or  # noqa: E501
                                                        local_var_params['guid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `guid` when calling `get_visibilities`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if self.api_client.client_side_validation and ('projects_pk' not in local_var_params or  # noqa: E501
                                                        local_var_params['projects_pk'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projects_pk` when calling `get_visibilities`")  # noqa: E501
        # verify the required parameter 'topics_guid' is set
        if self.api_client.client_side_validation and ('topics_guid' not in local_var_params or  # noqa: E501
                                                        local_var_params['topics_guid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `topics_guid` when calling `get_visibilities`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in local_var_params:
            path_params['guid'] = local_var_params['guid']  # noqa: E501
        if 'projects_pk' in local_var_params:
            path_params['projects_pk'] = local_var_params['projects_pk']  # noqa: E501
        if 'topics_guid' in local_var_params:
            path_params['topics_guid'] = local_var_params['topics_guid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer', 'bimdata_connect', 'client_credentials']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_guid}/viewpoints/{guid}/visibility', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Visibility',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def import_bcf(self, id, name, **kwargs):  # noqa: E501
        """Import bcf-xml format into this project  # noqa: E501

        Import bcf-xml format into this project. If there are guid conflict, an error will be raised. If there are index conflicts, indexes of the imported file will be overriden with a new index. Author and assigned_to fields will be linked to existing users in the project. If no matching user are found, fields will be emptied. Only BCF 2.1 is supported Required scopes: bcf:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.import_bcf(id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int id: A unique integer value identifying this project. (required)
        :param str name: Name of the project (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.import_bcf_with_http_info(id, name, **kwargs)  # noqa: E501

    def import_bcf_with_http_info(self, id, name, **kwargs):  # noqa: E501
        """Import bcf-xml format into this project  # noqa: E501

        Import bcf-xml format into this project. If there are guid conflict, an error will be raised. If there are index conflicts, indexes of the imported file will be overriden with a new index. Author and assigned_to fields will be linked to existing users in the project. If no matching user are found, fields will be emptied. Only BCF 2.1 is supported Required scopes: bcf:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.import_bcf_with_http_info(id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int id: A unique integer value identifying this project. (required)
        :param str name: Name of the project (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method import_bcf" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `import_bcf`")  # noqa: E501
        # verify the required parameter 'name' is set
        if self.api_client.client_side_validation and ('name' not in local_var_params or  # noqa: E501
                                                        local_var_params['name'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `name` when calling `import_bcf`")  # noqa: E501

        if self.api_client.client_side_validation and ('name' in local_var_params and  # noqa: E501
                                                        len(local_var_params['name']) > 256):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `name` when calling `import_bcf`, length must be less than or equal to `256`")  # noqa: E501
        if self.api_client.client_side_validation and ('name' in local_var_params and  # noqa: E501
                                                        len(local_var_params['name']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `name` when calling `import_bcf`, length must be greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'name' in local_var_params:
            form_params.append(('name', local_var_params['name']))  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer', 'bimdata_connect', 'client_credentials']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{id}/import', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_bcf_project(self, id, data, **kwargs):  # noqa: E501
        """Update some fields of a BCF project  # noqa: E501

        Update some fields of a BCF project Required scopes: bcf:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_bcf_project(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int id: A unique integer value identifying this project. (required)
        :param BcfProject data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: BcfProject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.update_bcf_project_with_http_info(id, data, **kwargs)  # noqa: E501

    def update_bcf_project_with_http_info(self, id, data, **kwargs):  # noqa: E501
        """Update some fields of a BCF project  # noqa: E501

        Update some fields of a BCF project Required scopes: bcf:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_bcf_project_with_http_info(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int id: A unique integer value identifying this project. (required)
        :param BcfProject data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(BcfProject, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_bcf_project" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `update_bcf_project`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `update_bcf_project`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer', 'bimdata_connect', 'client_credentials']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BcfProject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_comment(self, guid, projects_pk, topics_guid, data, **kwargs):  # noqa: E501
        """Update some fields of a comment  # noqa: E501

        Update some fields of a comment Required scopes: bcf:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_comment(guid, projects_pk, topics_guid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str guid: (required)
        :param str projects_pk: (required)
        :param str topics_guid: (required)
        :param Comment data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Comment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.update_comment_with_http_info(guid, projects_pk, topics_guid, data, **kwargs)  # noqa: E501

    def update_comment_with_http_info(self, guid, projects_pk, topics_guid, data, **kwargs):  # noqa: E501
        """Update some fields of a comment  # noqa: E501

        Update some fields of a comment Required scopes: bcf:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_comment_with_http_info(guid, projects_pk, topics_guid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str guid: (required)
        :param str projects_pk: (required)
        :param str topics_guid: (required)
        :param Comment data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Comment, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['guid', 'projects_pk', 'topics_guid', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_comment" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'guid' is set
        if self.api_client.client_side_validation and ('guid' not in local_var_params or  # noqa: E501
                                                        local_var_params['guid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `guid` when calling `update_comment`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if self.api_client.client_side_validation and ('projects_pk' not in local_var_params or  # noqa: E501
                                                        local_var_params['projects_pk'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projects_pk` when calling `update_comment`")  # noqa: E501
        # verify the required parameter 'topics_guid' is set
        if self.api_client.client_side_validation and ('topics_guid' not in local_var_params or  # noqa: E501
                                                        local_var_params['topics_guid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `topics_guid` when calling `update_comment`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `update_comment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in local_var_params:
            path_params['guid'] = local_var_params['guid']  # noqa: E501
        if 'projects_pk' in local_var_params:
            path_params['projects_pk'] = local_var_params['projects_pk']  # noqa: E501
        if 'topics_guid' in local_var_params:
            path_params['topics_guid'] = local_var_params['topics_guid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer', 'bimdata_connect', 'client_credentials']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_guid}/comments/{guid}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Comment',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_extensions(self, projects_pk, data, **kwargs):  # noqa: E501
        """Update project extensions  # noqa: E501

        Update project extensions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_extensions(projects_pk, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str projects_pk: (required)
        :param Extensions data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Extensions
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.update_extensions_with_http_info(projects_pk, data, **kwargs)  # noqa: E501

    def update_extensions_with_http_info(self, projects_pk, data, **kwargs):  # noqa: E501
        """Update project extensions  # noqa: E501

        Update project extensions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_extensions_with_http_info(projects_pk, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str projects_pk: (required)
        :param Extensions data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Extensions, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['projects_pk', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_extensions" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projects_pk' is set
        if self.api_client.client_side_validation and ('projects_pk' not in local_var_params or  # noqa: E501
                                                        local_var_params['projects_pk'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projects_pk` when calling `update_extensions`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `update_extensions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projects_pk' in local_var_params:
            path_params['projects_pk'] = local_var_params['projects_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer', 'bimdata_connect', 'client_credentials']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/extensions', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Extensions',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_full_topic(self, guid, projects_pk, data, **kwargs):  # noqa: E501
        """Update some fields of a topic  # noqa: E501

        This is not a standard route. You can update topic, viewpoints and comment is a signle call Required scopes: bcf:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_full_topic(guid, projects_pk, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str guid: (required)
        :param str projects_pk: (required)
        :param FullTopic data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: FullTopic
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.update_full_topic_with_http_info(guid, projects_pk, data, **kwargs)  # noqa: E501

    def update_full_topic_with_http_info(self, guid, projects_pk, data, **kwargs):  # noqa: E501
        """Update some fields of a topic  # noqa: E501

        This is not a standard route. You can update topic, viewpoints and comment is a signle call Required scopes: bcf:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_full_topic_with_http_info(guid, projects_pk, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str guid: (required)
        :param str projects_pk: (required)
        :param FullTopic data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(FullTopic, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['guid', 'projects_pk', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_full_topic" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'guid' is set
        if self.api_client.client_side_validation and ('guid' not in local_var_params or  # noqa: E501
                                                        local_var_params['guid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `guid` when calling `update_full_topic`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if self.api_client.client_side_validation and ('projects_pk' not in local_var_params or  # noqa: E501
                                                        local_var_params['projects_pk'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projects_pk` when calling `update_full_topic`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `update_full_topic`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in local_var_params:
            path_params['guid'] = local_var_params['guid']  # noqa: E501
        if 'projects_pk' in local_var_params:
            path_params['projects_pk'] = local_var_params['projects_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer', 'bimdata_connect', 'client_credentials']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/full-topic/{guid}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FullTopic',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_topic(self, guid, projects_pk, data, **kwargs):  # noqa: E501
        """Update some fields of a topic  # noqa: E501

        Update some fields of a topic Required scopes: bcf:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_topic(guid, projects_pk, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str guid: (required)
        :param str projects_pk: (required)
        :param Topic data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Topic
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.update_topic_with_http_info(guid, projects_pk, data, **kwargs)  # noqa: E501

    def update_topic_with_http_info(self, guid, projects_pk, data, **kwargs):  # noqa: E501
        """Update some fields of a topic  # noqa: E501

        Update some fields of a topic Required scopes: bcf:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_topic_with_http_info(guid, projects_pk, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str guid: (required)
        :param str projects_pk: (required)
        :param Topic data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Topic, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['guid', 'projects_pk', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_topic" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'guid' is set
        if self.api_client.client_side_validation and ('guid' not in local_var_params or  # noqa: E501
                                                        local_var_params['guid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `guid` when calling `update_topic`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if self.api_client.client_side_validation and ('projects_pk' not in local_var_params or  # noqa: E501
                                                        local_var_params['projects_pk'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projects_pk` when calling `update_topic`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `update_topic`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in local_var_params:
            path_params['guid'] = local_var_params['guid']  # noqa: E501
        if 'projects_pk' in local_var_params:
            path_params['projects_pk'] = local_var_params['projects_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer', 'bimdata_connect', 'client_credentials']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{guid}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Topic',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_viewpoint(self, guid, projects_pk, topics_guid, data, **kwargs):  # noqa: E501
        """Update some fields of a Viewpoint  # noqa: E501

        This is not a standard route. Update some fields of a Viewpoint Required scopes: bcf:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_viewpoint(guid, projects_pk, topics_guid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str guid: (required)
        :param str projects_pk: (required)
        :param str topics_guid: (required)
        :param Viewpoint data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Viewpoint
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.update_viewpoint_with_http_info(guid, projects_pk, topics_guid, data, **kwargs)  # noqa: E501

    def update_viewpoint_with_http_info(self, guid, projects_pk, topics_guid, data, **kwargs):  # noqa: E501
        """Update some fields of a Viewpoint  # noqa: E501

        This is not a standard route. Update some fields of a Viewpoint Required scopes: bcf:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_viewpoint_with_http_info(guid, projects_pk, topics_guid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str guid: (required)
        :param str projects_pk: (required)
        :param str topics_guid: (required)
        :param Viewpoint data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Viewpoint, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['guid', 'projects_pk', 'topics_guid', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_viewpoint" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'guid' is set
        if self.api_client.client_side_validation and ('guid' not in local_var_params or  # noqa: E501
                                                        local_var_params['guid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `guid` when calling `update_viewpoint`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if self.api_client.client_side_validation and ('projects_pk' not in local_var_params or  # noqa: E501
                                                        local_var_params['projects_pk'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projects_pk` when calling `update_viewpoint`")  # noqa: E501
        # verify the required parameter 'topics_guid' is set
        if self.api_client.client_side_validation and ('topics_guid' not in local_var_params or  # noqa: E501
                                                        local_var_params['topics_guid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `topics_guid` when calling `update_viewpoint`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `update_viewpoint`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in local_var_params:
            path_params['guid'] = local_var_params['guid']  # noqa: E501
        if 'projects_pk' in local_var_params:
            path_params['projects_pk'] = local_var_params['projects_pk']  # noqa: E501
        if 'topics_guid' in local_var_params:
            path_params['topics_guid'] = local_var_params['topics_guid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer', 'bimdata_connect', 'client_credentials']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_guid}/viewpoints/{guid}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Viewpoint',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
