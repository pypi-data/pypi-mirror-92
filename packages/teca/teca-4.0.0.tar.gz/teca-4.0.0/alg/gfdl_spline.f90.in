module spline_@decorator@_module
use iso_c_binding
use iso_fortran_env, only : error_unit
implicit none

interface
subroutine teca_tc_warning(msg) bind(C)
  use iso_c_binding
  implicit none
  character(c_char) :: msg(*)
end subroutine

subroutine teca_tc_error(msg) bind(C)
  use iso_c_binding
  implicit none
  character(c_char) :: msg(*)
end subroutine
end interface

contains

!-----------------------------------------------------------------------
! Given an M by N tabulated function YA and tabulated independant
! variables X1A (M values) and X2A (N values), this routine constructs
! one-dimensional natural cubic splines of the rows and returns
! the second-derivatives in the array Y2A.
!-----------------------------------------------------------------------
subroutine splie2_@decorator@(x2a, ya, y2a)
  implicit none

  @iso_c_type_coord@, intent(in), dimension(:) :: x2a
  @iso_c_type_var@, intent(in), dimension(:,:) :: ya
  @iso_c_type_var@, intent(out), dimension(:,:) :: y2a

  @iso_c_type_var@, dimension(size(ya,2)) :: ytmp, y2tmp
  integer :: m, j

  @iso_c_type_var@, parameter :: ypval = 1.e30

  m = size(ya, 1)

  do j = 1,m
    ytmp(:) = ya(j,:)
    call spline_@decorator@(x2a, ytmp, ypval, ypval, y2tmp)
    y2a(j,:) = y2tmp(:)
  end do

end subroutine splie2_@decorator@

!-----------------------------------------------------------------------
! Given an M by N tabulated function YA and tabulated independant
! variables X1A (M values) and X2A (N values), this routine constructs
! one-dimensional natural cubic splines of the rows and returns
! the second-derivatives in the array Y2A.
!-----------------------------------------------------------------------
subroutine splie3_@decorator@(x1a, ya, y2a)
  implicit none

  @iso_c_type_coord@, intent(in), dimension(:) :: x1a
  @iso_c_type_var@, intent(in), dimension(:,:) :: ya
  @iso_c_type_var@, intent(out), dimension(:,:) :: y2a

  @iso_c_type_var@, dimension(size(ya,1)) :: ytmp, y2tmp
  integer :: n, k

  @iso_c_type_var@, parameter :: ypval = 1.e30

  n = size(ya, 2)

  do k = 1,n
    ytmp(:) = ya(:,k)
    call spline_@decorator@(x1a, ytmp, ypval, ypval, y2tmp)
    y2a(:,k) = y2tmp(:)
  end do

end subroutine splie3_@decorator@

!-----------------------------------------------------------------------
! Given arrays X and Y of lenght N containing a tabulated function,i.e.
! Yi = f(Xi), with X1<X2<...<Xn, and given values YP1 and YPN for the
! first derivative of the interpolating function at points 1 and N,
! respectively, this routine returns an array Y2 of length N which
! contains the second derivatives of the interpolating function
! of the tabulated points Xi.
! If YP1 and/or YPN are equal to 1.E30 or larger, the routine
! is signalled to set the corresponding boundary  condition
! for a natural spline, wuth zero derivative on that boundary.
!-----------------------------------------------------------------------
subroutine spline_@decorator@(x, y, yp1, ypn, y2)
  implicit none

  @iso_c_type_var@, intent(in) :: yp1, ypn
  @iso_c_type_coord@, intent(in), dimension(:) :: x
  @iso_c_type_var@, intent(in), dimension(:) :: y
  @iso_c_type_var@, intent(out), dimension(:) :: y2

  !@iso_c_type_coord@, dimension(size(x)) :: u, sig, p
  @iso_c_type_var@, dimension(size(x)) :: u, sig, p
  @iso_c_type_var@ :: qn, un
  integer :: n, i

  @iso_c_type_var@, parameter :: yptest = 0.99e30

  n = size(x)

  if (yp1 > yptest) then
    y2(1) = 0.
    u(1) = 0.
  else
    y2(1) = -0.5
    u(1) = (3.0 / (x(2) - x(1))) * &
           ((y(2) - y(1)) / (x(2) - x(1)) - yp1)
  endif

  do i = 2,n-1
    sig(i) = (x(i) - x(i-1)) / (x(i+1) - x(i-1))
    p(i) = sig(i) * y2(i-1) + 2.
    y2(i) = (sig(i) - 1.) / p(i)
    u(i) = (6.0 * ((y(i+1) - y(i))    &
                   / (x(i+1) - x(i))    &
                   - (y(i)   - y(i-1))    &
                   / (x(i)   - x(i-1)))  &
                   / (x(i+1) - x(i-1)) - sig(i) * u(i-1)) / p(i)
  end do

  if (ypn > yptest) then
    qn = 0.
    un = 0.
  else
    qn = 0.5
    un = (3.0 / (x(n) - x(n-1))) * &
         (ypn - (y(n) - y(n-1)) / (x(n) - x(n-1)))
  endif

  y2(n) = (un - qn * u(n-1)) / (qn * y2(n-1) + 1.)
  do i = n-1,1,-1
    y2(i) = y2(i) * y2(i+1) + u(i)
  end do

end subroutine spline_@decorator@

!-----------------------------------------------------------------------
! Given the arrays XA and YA of length N, which tabulate a function
! (with the XA's in order), and given the array Y2A, which is the output
! from spline above, and given a value of X, this routine
! returns a cubic-spline interpolated value Y.
!-----------------------------------------------------------------------
subroutine splint_@decorator@(xa, ya, y2a, x, y, dy)
  implicit none

  @iso_c_type_coord@, intent(in) :: x
  @iso_c_type_coord@, intent(in), dimension(:) :: xa
  @iso_c_type_var@, intent(in), dimension(:) :: ya, y2a
  @iso_c_type_var@, intent(out) :: y, dy

  integer :: n, k, klo, khi
  @iso_c_type_coord@ :: h, a, b
  character(len=256, kind=c_char) :: e_msg

  n = size(xa)

  klo = 1
  khi = n

1 if ((khi - klo) > 1) then
    k = (khi + klo) / 2
    if (xa(k) > x) then
      khi = k
    else
      klo = k
    endif
    goto 1
  endif

  h = xa(khi) - xa(klo)

  if (h < 1e-10) then
    write(e_msg, '(A,A$)')'splint_@decorator@ bad xa input',c_null_char
    call teca_tc_error(e_msg)
  endif

  a = (xa(khi) - x) / h
  b = (x - xa(klo)) / h

  y = a * ya(klo) + b * ya(khi)  &
     + ((a**3 - a) * y2a(klo) &
       + (b**3 - b) * y2a(khi)) * (h**2) / 6.

  dy = (ya(khi) - ya(klo)) / h                  &
     - (3.0 * a**2 - 1.0) * h * y2a(klo) / 6.0  &
     + (3.0 * b**2 - 1.0) * h * y2a(khi) / 6.0

  !ddy = a * y2a(klo) + b * y2a(khi)

end subroutine splint_@decorator@

!-----------------------------------------------------------------------
! Given X1A, X2A, YA, M, N as described in splie2_@decorator@ and Y2A as produced
! by that routine; and given a desired interpolating point X1, X2;
! this routine returns an interpolated function value Y by bicubic
! spline interpolation
!-----------------------------------------------------------------------
subroutine splin2_@decorator@(x1a, x2a, ya, y2a, x1, x2, y, dy)
  implicit none

  @iso_c_type_coord@, intent(in) :: x1, x2
  @iso_c_type_coord@, intent(in), dimension(:) :: x1a, x2a
  @iso_c_type_var@, intent(in), dimension(:,:) :: ya, y2a
  @iso_c_type_var@, intent(out) :: y, dy

  @iso_c_type_var@, dimension(size(ya,2)) :: ytmp, y2tmp
  @iso_c_type_var@, dimension(size(ya,1)) :: yytmp, yy2tmp

  @iso_c_type_var@ :: y1
  integer :: m, j

  @iso_c_type_var@, parameter :: ypval = 1.e30

  m = size(ya, 1)

  do j = 1,m
    ytmp(:) = ya(j,:)
    y2tmp(:) = y2a(j,:)
    call splint_@decorator@(x2a, ytmp, y2tmp, x2, yytmp(j), y1)
  end do

  call spline_@decorator@(x1a, yytmp, ypval, ypval, yy2tmp)
  call splint_@decorator@(x1a, yytmp, yy2tmp, x1, y, dy)

end subroutine splin2_@decorator@

!-----------------------------------------------------------------------
! Given X1A, X2A, YA, M, N as described in splie2_@decorator@ and Y2A as produced
! by that routine; and given a desired interpolating point X1, X2;
! this routine returns an interpolated function value Y by bicubic
! spline interpolation
!-----------------------------------------------------------------------
subroutine splin3_@decorator@(x1a, x2a, ya, y2a, x1, x2, y, dy)
  implicit none

  @iso_c_type_coord@, intent(in) :: x1, x2
  @iso_c_type_coord@, intent(in), dimension(:) :: x1a, x2a
  @iso_c_type_var@, intent(in), dimension(:,:) :: ya, y2a
  @iso_c_type_var@, intent(out) :: y, dy

  @iso_c_type_var@, dimension(size(ya,1)) :: ytmp, y2tmp
  @iso_c_type_var@, dimension(size(ya,2)) :: yytmp, yy2tmp

  @iso_c_type_var@ :: y1
  integer :: n, k

  @iso_c_type_var@, parameter :: ypval = 1.e30

  n = size(ya, 2)

  do k = 1,n
    ytmp(:) =  ya(:,k)
    y2tmp(:) = y2a(:,k)
    call splint_@decorator@(x1a, ytmp, y2tmp, x1, yytmp(k), y1)
  end do

  call spline_@decorator@(x2a, yytmp, ypval, ypval, yy2tmp)
  call splint_@decorator@(x2a, yytmp, yy2tmp, x2, y, dy)

end subroutine splin3_@decorator@

!-----------------------------------------------------------------------
! Given a starting point P that is a vector of length N, Fletcher-Reeves
! Polak-Ribiere minimization is performed on a function FUNV, using its
! gradient as calculated by a routine DFUNC,. The convergence tolerance
! on the function value is input as FTOL. Returned quantities are P
! (the location of the minimum), ITER (the number of iterations
! that were performed), and FRET(the minimum value of the function).
! The routine linmim_@decorator@ is called to perform line minimizations.
! Maximum anticipated value of N; maximum allowed number of iterations;
! small number to rectify special case of converging to exactly zero
! function value
!-----------------------------------------------------------------------
subroutine frprm_@decorator@(&
  x1a, x2a, ya, y2a, y3a, p, ftol, itmax, fret, ierror)

  implicit none

  @iso_c_type_var@, parameter :: eps = 1.0E-10

  @iso_c_type_var@, intent(in) :: ftol
  @iso_c_type_coord@, intent(in), dimension(:) :: x1a, x2a
  @iso_c_type_var@, intent(in), dimension(:,:) :: ya, y2a, y3a
  @iso_c_type_coord@, intent(inout), dimension(2) :: p
  @iso_c_type_var@, intent(out) :: fret
  integer, intent(in) :: itmax
  integer, intent(inout) :: ierror

  @iso_c_type_coord@, dimension(2) :: g, h, xi

  integer :: its, ier
  @iso_c_type_var@ :: p1, px, py, fp
  @iso_c_type_coord@ :: pp1, pp2, s0, gg, dgg, gam
  character(len=256, kind=c_char) :: w_msg

  ierror = 1

  call splin2_@decorator@(x1a, x2a, ya, y2a, p(1), p(2), p1, px)
  call splin3_@decorator@(x1a, x2a, ya, y3a, p(1), p(2), p1, py)

  fp = p1
  xi(1) = px
  xi(2) = py

  g = -xi
  h = g
  xi = h

  do its = 1,itmax

    s0 = sqrt(xi(1)**2 + xi(2)**2)
    xi = xi / s0

    ier = 1
    call linmim_@decorator@(p, xi, fret, x1a, x2a, ya, y2a, ier)

    if (ier == 1) then
      ierror = 1
      return
    endif

    if ((2.0*abs(fret - fp)) <=   &
      (ftol*(abs(fret) + abs(fp) + eps))) then
      ierror = 0
      return
    endif

    ! apply periodic bc's
    pp1 = merge(p(1) + 360.0, &
      merge(p(1) - 360.0, p(1), p(1) >= 360.0), &
      p(1) <= 0.0)

    pp2 = merge(-p(2) - 180.0, &
      merge(-p(2) + 180.0, p(2), p(2) >= 90.0), &
      p(2) <= -90.0)

    ! TODO -- can we implement early termination here
    ! based on storm radius ??

    call splin2_@decorator@(x1a, x2a, ya, y2a, pp1, pp2, p1, px)
    call splin3_@decorator@(x1a, x2a, ya, y3a, pp1, pp2, p1, py)

    xi(1) = px
    xi(2) = py

    fp = p1

    gg = g(1)**2 + g(2)**2

    if (.not. (abs(gg) > 0.0)) then
      ierror = 0
      return
    endif

    dgg = xi(1)**2 + (xi(1) + g(1)) * xi(1) &
      + xi(2)**2 + (xi(2) + g(2)) * xi(2)

    gam = dgg / gg

    g = -xi
    h =  g + gam*h
    xi = h

  end do

  ierror = 1
  write(w_msg, '(A,I0,A)') &
    'frprm_@decorator@: maximum iterations exceeded. it=',itmax,c_null_char
  call teca_tc_warning(w_msg)

end subroutine frprm_@decorator@

!-----------------------------------------------------------------------
subroutine linmim_@decorator@(p, xi, fret, x1a, x2a, ya, y2a, ier)
  implicit none

  @iso_c_type_coord@, parameter :: tol = 1.0E-4

  @iso_c_type_coord@, intent(in), dimension(:) :: x1a, x2a
  @iso_c_type_var@, intent(in), dimension(:,:) :: ya, y2a
  @iso_c_type_coord@, intent(inout), dimension(2) :: p, xi
  @iso_c_type_var@, intent(out) :: fret
  integer, intent(out) :: ier

  @iso_c_type_var@ :: fa, fx, fb
  @iso_c_type_coord@ :: ax, xx, bx, xmin
  @iso_c_type_coord@, dimension(2) :: pcom
  @iso_c_type_coord@, dimension(2) :: xicom

  pcom = p
  xicom = xi

  ax = 0.0
  xx = 1.0

  call mnbrak_@decorator@(ax, xx, bx, fa, fx, fb, &
    x1a, x2a, ya, y2a, pcom, xicom)

  ier = 0

  call brent_@decorator@(ax, xx, bx, tol, fret, xmin, &
    x1a, x2a, ya, y2a, ier, pcom, xicom)

  if (xmin <= 1.E-5) xmin = 0.0

  xi = xmin * xi
  p = p + xi

end subroutine linmim_@decorator@

!-----------------------------------------------------------------------
subroutine linmin1_@decorator@(p, xi, fret, x1a, x2a, ya, y2a, ier, &
    max_dy, max_dr)
  implicit none
  @iso_c_type_var@, intent(in) :: max_dy, max_dr
  @iso_c_type_coord@, intent(in), dimension(:) :: x1a, x2a, xi
  @iso_c_type_var@, intent(in), dimension(:,:) :: ya, y2a

  @iso_c_type_coord@, intent(inout), dimension(2) :: p

  @iso_c_type_var@, intent(out) :: fret
  integer, intent(out) :: ier

  @iso_c_type_coord@, dimension(size(p)) :: xt
  @iso_c_type_coord@ :: x20, y20, x, d
  @iso_c_type_var@ :: y, py, y0, y1
  @iso_c_type_coord@, dimension(2) :: pcom, xicom

  x20 = P(1)
  y20 = p(2)

  pcom = p
  xicom = xi

  ier = 0
  x = 1.0
  d = 0.0

  call splin2_@decorator@(x1a, x2a, ya, y2a, p(1), p(2), y, py)

  y0 = y

  do while(.true.)

    xt = p + x * xicom

    ! distance from initial point
    d = sqrt((xt(1) - x20)**2 + (xt(2) - y20)**2)

    ! minimum is too far
    if (d >= max_dr) then
      ier = 1
      return
    endif

    if (x <= 0.0001) then
      ! TODO -- why are we sending back y? y has the initial value y1 has the
      ! latest value
      fret = y
      return
    endif

    call splin2_@decorator@(x1a, x2a, ya, y2a, xt(1), xt(2), y1, py)

    ! change in y from initial value is too great
    if ((y0 - y1) >= max_dy) return

    ! TODO -- what do these values 2 and 1e6 represent ?
    if (((y0 - y1) <= 2.0) .and. (y <= 1000000.0)) then
      p(1) = xt(1)
      p(2) = xt(2)
      cycle
    endif

    if (y1 >= 10000000.0) then
      p(1) = xt(1);
      p(2) = xt(2);
    endif

    x = x / 2.0

  enddo

end subroutine linmin1_@decorator@

!-----------------------------------------------------------------------
subroutine f1d1m_@decorator@(y, x, x1a, x2a, ya, y2a, pcom, xicom)
  implicit none
  @iso_c_type_coord@, intent(in) :: x
  @iso_c_type_coord@, intent(in), dimension(:) :: x1a, x2a
  @iso_c_type_var@, intent(in), dimension(:,:) :: ya, y2a
  @iso_c_type_coord@, intent(in), dimension(2) :: pcom, xicom
  @iso_c_type_var@, intent(out) :: y

  @iso_c_type_coord@, dimension(2) :: xt
  @iso_c_type_var@ :: py

  xt = pcom + x * xicom

  ! apply periodic bc's
  xt(1) = merge(xt(1) + 360.0, &
    merge(xt(1) - 360.0, xt(1), xt(1) >= 360.0), &
    xt(1) <= 0.0)

  xt(2) = merge(-xt(2) - 180.0, &
    merge(-xt(2) + 180.0, xt(2), xt(2) >= 90.0), &
    xt(2) <= -90.0)

  call splin2_@decorator@(x1a, x2a, ya, y2a, xt(1), xt(2), y, py)

end subroutine f1d1m_@decorator@


!-----------------------------------------------------------------------
subroutine mnbrak_@decorator@(&
  ax, bx, cx, fa, fb, fc,  x1a, x2a, ya, y2a, pcom, xicom)
  implicit none

  @iso_c_type_coord@, parameter :: gold = 1.618034
  @iso_c_type_coord@, parameter :: glimit = 100.0
  @iso_c_type_coord@, parameter :: small_num = 1.0E-20

  @iso_c_type_coord@, intent(inout) :: ax, bx, cx
  @iso_c_type_var@, intent(out) :: fa, fb, fc
  @iso_c_type_coord@, intent(in), dimension(:) :: x1a, x2a
  @iso_c_type_var@, intent(in), dimension(:,:) :: ya, y2a
  @iso_c_type_coord@, intent(in), dimension(2) :: pcom, xicom

  @iso_c_type_var@ :: fu, v_dum
  @iso_c_type_coord@ :: q, r, u, ulim, c_dum
  @iso_c_type_coord@ :: uxt, uxb

  call f1d1m_@decorator@(fa, ax, x1a, x2a, ya, y2a, pcom, xicom)
  call f1d1m_@decorator@(fb, bx, x1a, x2a, ya, y2a, pcom, xicom)

  if (fb > fa) then
    c_dum = ax
    ax  = bx
    bx  = c_dum

    v_dum = fb
    fb  = fa
    fa  = v_dum
  endif

  cx = bx + gold * (bx - ax)
  call f1d1m_@decorator@(fc, cx, x1a, x2a, ya, y2a, pcom, xicom)

  do while(fb >= fc)
    r = (bx - ax) * (fb - fc)
    q = (bx - cx) * (fb - fa)

    !u = bx - ((bx - cx) * q - (bx - ax) * r) /  &
    !  (2.0 * sign(max(abs(q - r), small_num), q - r))

    uxt = (bx - cx) * q - (bx - ax) * r
    uxb =  2.0 * sign(max(abs(q - r), small_num), q - r)
    u = bx - uxt / uxb
    u = min(cx + gold * (cx - bx), u)
    ulim = bx + glimit * (cx - bx)

    if (((bx - u) * (u - cx)) > 0.0) then
       call f1d1m_@decorator@(fu, u, x1a, x2a, ya, y2a, pcom, xicom)
      if (fu < fc) then
        ax = bx
        fa = fb
        bx = u
        fb = fu
        return
      else if (fu > fb) then
        cx = u
        fc = fu
        return
      endif
      u = cx + gold * (cx - bx)
      call f1d1m_@decorator@(fu, u, x1a, x2a, ya, y2a , pcom, xicom)
    else if (((cx - u) * (u - ulim)) > 0.0) then
      call f1d1m_@decorator@(fu, u, x1a, x2a, ya, y2a, pcom, xicom)
      if (fu < fc) then
        bx = cx
        cx = u
        u  = cx + gold * (cx - bx)
        fb = fc
        fc = fu
        call f1d1m_@decorator@(fu, u, x1a, x2a, ya, y2a, pcom, xicom)
      endif
    else if (((u - ulim) * (ulim - cx)) >= 0.0) then
      u = ulim
      call f1d1m_@decorator@(fu, u, x1a, x2a, ya, y2a, pcom, xicom)
    else
      u = cx + gold * (cx - bx)
      call f1d1m_@decorator@(fu, u, x1a, x2a, ya, y2a, pcom, xicom)
    endif

    ax = bx
    bx = cx
    cx = u
    fa = fb
    fb = fc
    fc = fu
  enddo

end subroutine mnbrak_@decorator@


!-----------------------------------------------------------------------
subroutine brent_@decorator@(&
  ax, bx, cx, tol, fret, xmin, x1a, x2a, ya, y2a, ier, pcom, xicom)

  implicit none

  @iso_c_type_coord@, parameter :: cgold = 0.3819660
  @iso_c_type_coord@, parameter :: zeps  = 1.0E-10
  integer, parameter :: itmax = 100

  @iso_c_type_coord@, intent(in) :: ax, bx, cx, tol
  @iso_c_type_coord@, intent(in), dimension(:) :: x1a, x2a
  @iso_c_type_var@, intent(in), dimension(:,:) :: ya, y2a
  integer, intent(inout) :: ier
  @iso_c_type_var@, intent(out) :: fret
  @iso_c_type_coord@, intent(out) :: xmin
  @iso_c_type_coord@, intent(in), dimension(2) :: pcom, xicom

  integer :: iter
  @iso_c_type_coord@ :: v, w, e, d, u, a, b, tol1, tol2, x, xm
  @iso_c_type_var@ :: fx, fv, fw, fu
  @iso_c_type_var@ :: r, q, p, etemp
  character(len=256, kind=c_char) :: w_msg

  a = min(ax, cx)
  b = max(ax, cx)
  v = bx
  w = v
  x = v
  d = 0.
  e = 0.
  call f1d1m_@decorator@(fx, x, x1a, x2a, ya, y2a, pcom, xicom)
  fv = fx
  fw = fx

  do iter = 1,itmax

    xm   = 0.5 * (a + b)
    tol1 = tol * abs(x) + zeps
    tol2 = 2.0 * tol1

    if (abs(x - xm) <= (tol2 - 0.5 * (b - a))) goto 3

    ! TODO -- could we implement early termination here??

    if (abs(e) > tol1) then
      r = (x - w) * (fx - fv)
      q = (x - v) * (fx - fw)
      p = (x - v) * q - (x - w) * r
      q = 2.0 * (q - r)
      if (q > 0.0) p = -p
      q = abs(q)
      etemp = e
      e = d

      if ((abs(p) >= abs(0.5 * q * etemp)) .or.  &
        (p   <= (q * (a - x))) .or. (p   >= (q * (b - x)))) &
        goto 1

      d = p / q
      u = x + d

      if (((u - a) < tol2) .or. ((b - u) < tol2)) &
        d = sign(tol1, xm - x)

      goto 2

    endif

1   continue
    if (x >= xm) then
      e = a - x
    else
      e = b - x
    endif
    d = cgold * e

2   continue
    if (abs(d) >= tol1) then
      u = x + d
    else
      u = x + sign(tol1, d)
    endif

    call f1d1m_@decorator@(fu, u, x1a, x2a, ya, y2a, pcom, xicom)

    if (fu <= fx) then
      if (u >= x) then
        a = x
      else
        b = x
      endif
      v =  w
      fv = fw
      w =  x
      fw = fx
      x =  u
      fx = fu
    else
      if (u < x) then
        a = u
      else
        b = u
      endif
      if ((fu <= fw) .or. (w == x)) then
        v = w
        fv = fw
        w = u
        fw = fu
      else if ((fu <= fv) .or. (v == x) .or. (v == w)) then
        v =  u
        fv = fu
      endif
    endif

  end do

  ier = 1
  write(w_msg, '(A,I0,A)') &
    'brent_@decorator@ exceed maximum iterations. it=', itmax,c_null_char
  call teca_tc_warning(w_msg)

3 continue
  xmin = x
  fret = fx

end subroutine brent_@decorator@

!-----------------------------------------------------------------------
! Given a starting point P that is a vector of length N, Fletcher-Reeves
! Polak-Ribiere minimization is performed on a function FUNV, using its
! gradient as calculated by a routine DFUNC,. The convergence tolerance
! on the function value is input as FTOL. Returned quantities are P
! (the location of the minimum), ITER (the number of iterations
! that were performed), and FRET(the minimum value of the function).
! The routine linmin1_@decorator@ is called to perform line minimizations.
! Maximum anticipated value of N; maximum allowed number of iterations;
! small number to rectify special case of converging to exactly zero
! function value.
!-----------------------------------------------------------------------
subroutine shape_@decorator@(x1a, x2a, &
  ya, y2a, y3a, p, ierror2, max_dy, max_dr)

  implicit none

  @iso_c_type_coord@, intent(in), dimension(:) :: x1a, x2a, p
  @iso_c_type_var@, intent(in), dimension(:,:) :: ya, y2a, y3a
  @iso_c_type_var@, intent(in) :: max_dy, max_dr
  integer, intent(inout) :: ierror2

  @iso_c_type_coord@, dimension(size(p)) :: q, xi
  @iso_c_type_var@, dimension(size(ya,1),size(ya,2)) :: ta, t2a, t3a

  integer :: i, ier
  @iso_c_type_coord@ :: dr
  @iso_c_type_var@ :: fret1

  @iso_c_type_coord@, dimension(8) :: xi1 = (/ 0., 0., 1., -1., 1., 1., -1., -1. /)
  @iso_c_type_coord@, dimension(8) :: xi2 = (/ 1., -1., 0., 0., -1., 1., 1., -1. /)

  ta(:,:) = -ya(:,:)
  t2a(:,:) = -y2a(:,:)
  t3a(:,:) = -y3a(:,:)

  ierror2 = 1

  do i = 1,8

    q  = p

    xi(1) = xi1(i)
    xi(2) = xi2(i)

    ier = 1

    call linmin1_@decorator@(q, xi, fret1, &
        x1a, x2a, ta, t2a, ier, max_dy, max_dr)

    if (ier == 1) return

    ! TODO -- what is 100 here ?
    dr = (p(1) - q(1))**2 + (p(2) - q(2))**2
    if (dr >= 100.0) return

  end do

  ierror2 = 0
  return

end subroutine shape_@decorator@

end module spline_@decorator@_module
