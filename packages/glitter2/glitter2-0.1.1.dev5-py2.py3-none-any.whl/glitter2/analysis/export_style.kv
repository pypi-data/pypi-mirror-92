#:import pretty_space base_kivy_app.utils.pretty_space
#:import pretty_time base_kivy_app.utils.pretty_time
#:import Factory kivy.factory.Factory
#:import NoTransition kivy.uix.screenmanager.NoTransition

<ExportWidget@BoxLayout>:
    size_hint_min_x: self.minimum_width
    orientation: 'vertical'
    spacing: '5dp'
    canvas:
        Color:
            rgba: app.theme.primary_light
        Rectangle:
            pos: self.pos
            size: self.size
    ExportSourceItemLog:
        on_kv_post:
            app.source_item_log = self.__self__
            root.remove_widget(self)
    ProcessingModeSelection
    InputSelection
    ProcessingContainer


<ProcessingModeSelection@BoxLayout>:
    orientation: 'vertical'
    size_hint_y: None
    size_hint_min_x: self.minimum_width
    height: self.minimum_height
    padding: '15dp', '10dp'
    spacing: '8dp'
    canvas:
        Color:
            rgba: app.theme.primary
        Rectangle:
            pos: self.pos
            size: self.size
    BoxLayout:
        size_hint_y: None
        height: self.minimum_height
        size_hint_min_x: self.minimum_width
        spacing: '5dp'
        Widget
        MinSizeYFlatLabel:
            text: 'Select batch mode:'
            bold: True
            center_texture: True
        SizedFlatSpinner:
            disabled: bool(app.export_manager.thread_has_job)
            id: batch_mode
            text_autoupdate: True
            values: ['Export raw data', 'Export channel statistics', 'Import data files']
            on_text:
                app.export_manager.batch_mode = {'raw': 'export_raw', 'channel': 'export_stats', 'data': 'import'}[self.text.split(' ')[-2]]
                app.export_manager.clear_sources()
        Widget
    ScreenManager:
        id: screen_manager
        size_hint_y: None
        height: self.current_screen.height
        on_current_screen: self.height = self.current_screen.height
        current: batch_mode.text
        transition: NoTransition()
        Screen:
            name: 'Export raw data'
            size_hint_y: None
            height: raw.minimum_height
            RawDataExportSelection:
                id: raw
        Screen:
            name: 'Export channel statistics'
            size_hint_y: None
            height: stats.minimum_height
            on_height: if self.name == screen_manager.current: screen_manager.height = self.height
            StatisticsExportSelection:
                id: stats
        Screen:
            name: 'Import data files'
            size_hint_y: None
            height: imports.minimum_height
            ImportSelection:
                id: imports


<RawDataExportSelection@BoxLayout>:
    orientation: 'vertical'
    size_hint_y: None
    size_hint_min_x: self.minimum_width
    height: self.minimum_height
    disabled: bool(app.export_manager.thread_has_job)
    BoxLayout:
        size_hint_y: None
        height: self.minimum_height
        size_hint_min_x: self.minimum_width
        spacing: '5dp'
        MinSizeYFlatLabel:
            text: "Output directory to save raw data:"
        FlatImageButton:
            scale_down_color: True
            source: 'flat_folder.png'
            flat_color: app.theme.accent
            on_release: app.open_filechooser(callback=app.export_manager.gui_set_path('root_raw_data_export_path'), target=app.export_manager.root_raw_data_export_path, dirselect=True, title='Select raw data directory')
        FlatSizedTextInput:
            text: app.export_manager.root_raw_data_export_path
            background_color: app.theme.primary_light
            hint_text: 'Raw data output directory'
            on_focus: if not self.focus: app.export_manager.root_raw_data_export_path = self.text
            size_hint_min_x: '200dp'
    BoxLayout:
        size_hint: None, None
        size: self.minimum_width, '26dp'
        MinSizeYFlatLabel:
            text: "For each position channel, include whether it is in the zone, for all zones:"
            padding_x: '1dp'
        CheckBox:
            state: 'down' if app.export_manager.raw_dump_zone_collider else 'normal'
            on_state: app.export_manager.raw_dump_zone_collider = self.state == 'down'
            size_hint: None, None
            height: '30dp'
            width: self.height
            color: app.theme.accent


<StatisticsExportSelection@BoxLayout>:
    orientation: 'vertical'
    size_hint_y: None
    size_hint_min_x: self.minimum_width
    height: self.minimum_height
    spacing: '5dp'
    BoxLayout:
        size_hint_y: None
        height: '26dp'
        size_hint_min_x: self.minimum_width
        spacing: '5dp'
        disabled: bool(app.export_manager.thread_has_job)
        MinSizeYFlatLabel:
            text: 'Select sample input data file:'
        FlatImageButton:
            scale_down_color: True
            source: 'flat_folder.png'
            flat_color: app.theme.accent
            on_release: app.open_filechooser(callback=app.export_stats.get_template_file_setter(app.export_manager.gui_set_path('stats_template_path')), target=app.export_manager.stats_template_path, title='Prototype data file', filters=['*.h5', '*.*'])
        FlatSizedTextInput:
            id: template_file
            text: app.export_manager.stats_template_path
            background_color: app.theme.primary_light
            hint_text: 'Data file template'
            on_focus:
                if not self.focus and app.export_manager.stats_template_path != self.text: export_stats.set_template_file(self.text)
                if not self.focus: app.export_manager.stats_template_path = self.text
            size_hint_min_x: '200dp'
    BoxLayout:
        size_hint_y: None
        height: '26dp'
        size_hint_min_x: self.minimum_width
        spacing: '5dp'
        disabled: bool(app.export_manager.thread_has_job)
        MinSizeYFlatLabel:
            text: 'Select output excel file:'
        FlatImageButton:
            scale_down_color: True
            source: 'flat_folder.png'
            flat_color: app.theme.accent
            on_release: app.open_filechooser(callback=app.export_manager.gui_set_path('stats_export_path'), target=app.export_manager.stats_export_path, title='Create output file', mode='save', filters=['*.xlsx'])
        FlatSizedTextInput:
            text: app.export_manager.stats_export_path
            background_color: app.theme.primary_light
            hint_text: 'Output excel filename'
            on_focus: if not self.focus: app.export_manager.stats_export_path = self.text
            size_hint_min_x: '200dp'
        MinSizeYFlatLabel:
            text: 'Demo export results for sample file:'
        FlatImageButton:
            scale_down_color: True
            source: 'flat_play.png'
            flat_color: app.theme.accent
            on_release: app.export_manager.request_process_files(app.export_manager.stats_template_path)
    FlatSplitter:
        size_hint_y: None
        height: '200dp'
        min_size: min(dp(100), export_stats.height)
        max_size: '800dp'
        sizable_from: 'bottom'
        flat_color: app.theme.accent
        ScrollView:
            always_overscroll: False
            bar_width: '10dp'
            scroll_type: ['bars']
            ExportStatsSelection:
                id: export_stats
                disabled: not template_file.text
                on_kv_post: app.export_stats = self.__self__


<ImportSelection@BoxLayout>:
    orientation: 'vertical'
    size_hint_y: None
    size_hint_min_x: self.minimum_width
    height: self.minimum_height
    disabled: bool(app.export_manager.thread_has_job)
    BoxLayout:
        size_hint_y: None
        height: self.minimum_height
        size_hint_min_x: self.minimum_width
        spacing: '5dp'
        MinSizeYFlatLabel:
            text: 'Select import operation:'
            bold: True
        SizedFlatSpinner:
            id: batch_mode
            text_autoupdate: True
            values: ['Create data file from legacy Glitter H5 files', 'Create/append data files from CleverSys TXT files', 'Create/append data files from csv XYT files']
            on_text:
                app.export_manager.batch_export_mode = {'H5': 'legacy', 'TXT': 'cleversys', 'XYT': 'csv'}[self.text.split(' ')[-2]]
                app.export_manager.clear_sources()
    BoxLayout:
        size_hint_y: None
        height: '26dp'
        size_hint_min_x: self.minimum_width
        MinSizeYFlatLabel:
            text: 'Data output directory:'
        FlatImageButton:
            scale_down_color: True
            source: 'flat_folder.png'
            flat_color: app.theme.accent
            on_release: app.open_filechooser(callback=app.export_manager.gui_set_path('generated_file_output_path'), target=app.export_manager.generated_file_output_path, dirselect=True, title='Select output directory')
        FlatSizedTextInput:
            text: app.export_manager.generated_file_output_path
            background_color: app.theme.primary_light
            hint_text: 'Output directory for generated data files'
            on_focus: if not self.focus: app.export_manager.generated_file_output_path = self.text
            size_hint_min_x: '200dp'
    BoxLayout:
        size_hint_y: None
        height: '26dp'
        size_hint_min_x: self.minimum_width
        MinSizeYFlatLabel:
            text: 'If output file already exists, append new data (rather than skipping):'
        CheckBox:
            state: 'normal'
            on_state: app.export_manager.import_append_if_file_exists = self.state == 'down'
            size_hint: None, None
            height: '30dp'
            width: self.height
            color: app.theme.accent


<InputSelection@BoxLayout>:
    orientation: 'vertical'
    size_hint_y: None
    size_hint_min_x: self.minimum_width
    height: self.minimum_height
    padding: '15dp', '5dp'
    spacing: '8dp'
    canvas:
        Color:
            rgba: app.theme.primary
        Rectangle:
            pos: self.pos
            size: self.size
    MinSizeXFlatLabel:
        text: 'Select input files'
        bold: True
    BoxLayout:
        size_hint_y: None
        size_hint_min_x: self.minimum_width
        height: '34dp'
        spacing: '5dp'
        MinSizeYFlatLabel:
            text: 'Refresh file list:'
        AnimatedToggleButton:
            anim_active: bool(app.export_manager.source_processing)
            disabled: bool(app.export_manager.thread_has_job) and not app.export_manager.source_processing
            scale_down_color: True
            source: 'flat_refresh.png' if self.state == 'normal' else 'flat_stop.png'
            flat_color: app.theme.accent
            state: 'down' if app.export_manager.source_processing else 'normal'
            on_release:
                if self.state == 'down': app.export_manager.request_refresh_source_contents()
                if self.state == 'normal': app.export_manager.stop_op = True
        BoxLayout:
            disabled: app.export_manager.thread_has_job
            size_hint_min_x: self.minimum_width
            spacing: '5dp'
            MinSizeYFlatLabel:
                text: 'Input file filter:'
            FlatSizedTextInput:
                text: app.export_manager.source_match_suffix
                background_color: app.theme.primary_light
                hint_text: '.ext'
                on_focus: if not self.focus: app.export_manager.source_match_suffix = self.text
                width: '100dp'
                size_hint_x: None
            MinSizeYFlatLabel:
                text: 'Source folder:'
            FlatImageButton:
                scale_down_color: True
                source: 'flat_folder.png'
                flat_color: app.theme.accent
                on_release: app.open_filechooser(callback=app.export_manager.gui_set_path('source'), target=app.export_manager.source_viz, dirselect=True, title='Select data directories')
            FlatSizedTextInput:
                text: app.export_manager.source_viz
                background_color: app.theme.primary_light
                hint_text: 'Source'
                on_focus: if not self.focus: app.export_manager.set_source(self.text)
                size_hint_min_x: '100dp'


<ProcessingContainer@BoxLayout>:
    orientation: 'vertical'
    size_hint_min: self.minimum_size
    padding: '15dp', '5dp'
    spacing: '8dp'
    canvas:
        Color:
            rgba: app.theme.primary
        Rectangle:
            pos: self.pos
            size: self.size
    MinSizeXFlatLabel:
        text: 'Input Files to process'
        bold: True
    BoxLayout:
        size_hint_y: None
        size_hint_min_x: self.minimum_width
        height: '34dp'
        padding: '15dp', '5dp'
        spacing: '5dp'
        MinSizeYFlatLabel:
            text:'Start processing:'
            center_texture: True
        AnimatedToggleButton:
            anim_active: bool(app.export_manager.currently_processing)
            disabled: bool(app.export_manager.thread_has_job) and not app.export_manager.currently_processing
            scale_down_color: True
            source: 'flat_play.png' if self.state == 'normal' else 'flat_stop.png'
            flat_color: app.theme.accent
            state: 'down' if app.export_manager.currently_processing else 'normal'
            on_release:
                if self.state == 'down': app.export_manager.request_process_files()
                if self.state == 'normal': app.export_manager.stop_op = True
        MinSizeYMaxXFlatLabel:
            text: pretty_time(app.export_manager.elapsed_time)
        MinSizeYFlatLabel:
            text: '/'
        MinSizeYMaxXFlatLabel:
            text: pretty_time(app.export_manager.total_estimated_time)
        MinSizeYMaxXFlatLabel:
            text: '({}%)'.format(int(app.export_manager.fraction_done * 100))
        Widget
        FlatButton:
            disabled: bool(app.export_manager.thread_has_job)
            text: "Skip all"
            padding_x: '5dp'
            size_hint_x: None
            width: self.texture_size[0]
            size_hint_min_y: self.texture_size[1]
            center_texture: True
            on_release: app.export_manager.request_toggle_skip()
            scale_down_color: True
            flat_color: app.theme.text_primary
            flat_background_color: app.theme.primary_light if self.state == 'normal' else app.theme.primary_dark
        MinSizeYFlatLabel:
            text:'Succeeded: [b]{}[/b], Failed: [b]{}[/b], Skipped: [b]{}[/b], Total: [b]{}[/b]'.format(app.export_manager.num_processed_files, app.export_manager.num_failed_files, app.export_manager.num_skipped_files, app.export_manager.num_files)
            center_texture: False
            markup: True
    RecycleView:
        on_kv_post: app.export_manager.recycle_view = self.__self__
        viewclass: 'SourceItemView'
        size_hint_min_x: rv.minimum_width
        size_hint_min_y: min(dp(50), rv.minimum_height)
        bar_width: '10dp'
        scroll_type: ['bars']
        padding: '10dp', 0
        RecycleBoxLayout:
            id: rv
            default_size: None, None
            default_size_hint: 1, None
            size_hint_y: None
            height: self.minimum_height
            orientation: 'vertical'
            spacing: '1dp'
            canvas:
                Color:
                    rgba: app.theme.accent
                Rectangle:
                    pos: self.pos
                    size: self.size


<SourceItemView@RecycleKVIDsDataViewBehavior+BoxLayout>:
    spacing: '5dp'
    size_hint_y: None
    height: self.minimum_height
    result: ''
    source_obj: None
    padding: '10dp', '2dp'
    canvas:
        Color:
            rgba: app.theme.primary
        Rectangle:
            pos: self.pos
            size: self.size
    MinSizeYFlatLabel:
        text: 'Filename:'
        bold: True
        center_texture: False
    FlatLabel:
        id: filename
        flat_color: app.theme.text_primary
        text_size: self.width, None
        shorten: True
        shorten_from: 'left'
        size_hint_min_x: '100dp'
        padding_y: '2dp'
    FlatLabel:
        id: file_size
        size: max(self.texture_size[0], self.width), self.texture_size[1]
        size_hint: None, None
        flat_color: app.theme.text_primary
        bold: True
        center_texture: False
    FlatToggleButton:
        id: skip
        disabled: bool(app.export_manager.thread_has_job)
        text: "Not skipping" if self.state == 'normal' else 'Skipping'
        size_hint: None, None
        size: max(self.texture_size[0], self.width), self.texture_size[1]
        padding_x: '1dp'
        bold: True
        on_release: app.export_manager.request_set_skip(root.source_obj, self.state == 'down')
        scale_down_color: True
        flat_color: app.theme.text_primary
        flat_background_color: app.theme.primary_light if self.state == 'normal' else app.theme.primary_dark
    FlatLabel:
        id: status
        size: '100dp', self.texture_size[1]
        size_hint: None, None
        flat_color: [1, 0, 0, 1] if self.text == 'failed' else app.theme.text_primary
        center_texture: False
    AnimatedButton:
        disabled: status.text == 'processing'
        anim_active: status.text == 'processing'
        source: 'flat_refresh.png' if status.text == 'processing' else 'flat_dots_vertical.png'
        flat_color: app.theme.accent
        on_release:
            app.source_item_log.result = root.result
            app.source_item_log.open(root)


<ExportSourceItemLog@FlatDropDown>:
    flat_color: app.theme.primary_text
    flat_border_color: app.theme.divider
    do_scroll: False, False
    result: ''
    FlatSplitter:
        size_hint: None, None
        height: self.minimum_height
        min_size: '300dp'
        max_size: '800dp'
        width: '400'
        sizable_from: 'right'
        flat_color: app.theme.accent
        BoxLayout:
            size_hint_min_y: self.minimum_height
            ScrollView:
                always_overscroll: False
                size_hint_min_y: dp(300)
                bar_width: '10dp'
                scroll_type: ['bars']
                SizedFlatLabel:
                    id: result
                    text: root.result


<ExportStatsSelection>:
    global_parameters: global_parameters.__self__
    local_parameters: local_parameters.__self__
    new_channels_widget: new_channels_widget.__self__
    compute_methods_widget: compute_methods_widget.__self__
    orientation: 'vertical'
    size_hint: None, None
    height: self.minimum_height
    width: max(self.minimum_width, self.parent.width)
    spacing: '8dp'
    BoxLayout:
        size_hint_y: None
        height: self.minimum_height
        size_hint_min_x: self.minimum_width
        ExpandButton:
            id: expand_globals
            state: 'normal'
        MinSizeXYFlatLabel:
            text: ' (1) Computation parameters with optional default values'
            bold: True
            center_texture: False
    BoxShowMore:
        more: global_parameters.__self__
        show_more: expand_globals.state == 'down'
        size_hint_min_x: global_parameters.minimum_width
        size_hint_y: None
        height: self.minimum_height
        padding: expand_globals.width, 0, 0, 0
        BoxLayout:
            id: global_parameters
            orientation: 'vertical'
            size_hint_y: None
            size_hint_min_x: self.minimum_width
            height: self.minimum_height
            spacing: '1dp'
            disabled: bool(app.export_manager.thread_has_job)
            canvas:
                Color:
                    rgba: app.theme.primary_light
                Rectangle:
                    pos: self.pos
                    size: self.size
    BoxLayout:
        size_hint_y: None
        height: self.minimum_height
        size_hint_min_x: self.minimum_width
        ExpandButton:
            id: expand_locals
            state: 'normal'
        MinSizeXYFlatLabel:
            text: '(1*) Computation parameters that cannot have default values'
            bold: True
            center_texture: False
    BoxShowMore:
        more: local_parameters.__self__
        show_more: expand_locals.state == 'down'
        size_hint_min_x: local_parameters.minimum_width
        size_hint_y: None
        height: self.minimum_height
        padding: expand_locals.width, 0, 0, 0
        BoxLayout:
            id: local_parameters
            orientation: 'vertical'
            size_hint_y: None
            size_hint_min_x: self.minimum_width
            height: self.minimum_height
            spacing: '1dp'
            canvas:
                Color:
                    rgba: app.theme.primary_light
                Rectangle:
                    pos: self.pos
                    size: self.size
    BoxLayout:
        size_hint_y: None
        height: self.minimum_height
        size_hint_min_x: self.minimum_width
        ExpandButton:
            id: expand_new_channels
            state: 'normal'
        MinSizeXYFlatLabel:
            text: '(2) Measure that generates intermediate data channel (e.g. instantaneous speed)'
            bold: True
            center_texture: False
    BoxShowMore:
        more: new_channels_more.__self__
        show_more: expand_new_channels.state == 'down'
        size_hint_min_x: new_channels_more.minimum_width
        size_hint_y: None
        height: self.minimum_height
        padding: expand_new_channels.width, 0, 0, 0
        BoxLayout:
            id: new_channels_more
            orientation: 'vertical'
            size_hint_y: None
            size_hint_min_x: self.minimum_width
            height: self.minimum_height
            spacing: '5dp'
            disabled: bool(app.export_manager.thread_has_job)
            BoxLayout:
                size_hint_y: None
                height: self.minimum_height
                size_hint_min_x: self.minimum_width
                spacing: '5dp'
                padding: '5dp'
                canvas:
                    Color:
                        a: .25
                    Rectangle:
                        pos: self.pos
                        size: self.size
                FlatImageButton:
                    scale_down_color: True
                    source: 'flat_plus.png'
                    flat_color: app.theme.accent
                    on_release: if new_channel_method.text: root.add_new_channel_computation(new_channel_type_selector.text, new_channel_method.text)
                MinSizeYFlatLabel:
                    text: 'Add measure for channel type:'
                SizedFlatSpinner:
                    id: new_channel_type_selector
                    text_autoupdate: True
                    bold: True
                    values: ['event', 'pos', 'zone']
                MinSizeYFlatLabel:
                    text: 'Measure name:'
                SizedFlatSpinner:
                    id: new_channel_method
                    text_autoupdate: True
                    bold: True
                    values: root.new_channel_methods[new_channel_type_selector.text or 'event']
            BoxLayout:
                id: new_channels_widget
                orientation: 'vertical'
                size_hint_y: None
                size_hint_min_x: self.minimum_width
                height: self.minimum_height
                spacing: '1dp'
                canvas:
                    Color:
                        rgba: app.theme.primary_light
                    Rectangle:
                        pos: self.pos
                        size: self.size
    BoxLayout:
        size_hint_y: None
        height: self.minimum_height
        size_hint_min_x: self.minimum_width
        ExpandButton:
            id: expand_compute_methods
            state: 'normal'
        MinSizeXYFlatLabel:
            text: '(3) summary measure (e.g. overall mean speed) to be exported'
            bold: True
            center_texture: False
    BoxShowMore:
        more: compute_methods_more.__self__
        show_more: expand_compute_methods.state == 'down'
        size_hint_min_x: compute_methods_more.minimum_width
        size_hint_y: None
        height: self.minimum_height
        padding: expand_compute_methods.width, 0, 0, 0
        BoxLayout:
            id: compute_methods_more
            orientation: 'vertical'
            size_hint_y: None
            size_hint_min_x: self.minimum_width
            height: self.minimum_height
            spacing: '5dp'
            disabled: bool(app.export_manager.thread_has_job)
            BoxLayout:
                size_hint_y: None
                height: self.minimum_height
                size_hint_min_x: self.minimum_width
                spacing: '5dp'
                padding: '5dp'
                canvas:
                    Color:
                        a: .25
                    Rectangle:
                        pos: self.pos
                        size: self.size
                FlatImageButton:
                    scale_down_color: True
                    source: 'flat_plus.png'
                    flat_color: app.theme.accent
                    on_release: if compute_channel_method.text: root.add_computation(compute_channel_type_selector.text, compute_channel_method.text)
                MinSizeYFlatLabel:
                    text: 'Add measure for channel type:'
                SizedFlatSpinner:
                    id: compute_channel_type_selector
                    text_autoupdate: True
                    bold: True
                    values: ['event', 'pos', 'zone']
                MinSizeYFlatLabel:
                    text: 'Measure name:'
                SizedFlatSpinner:
                    id: compute_channel_method
                    text_autoupdate: True
                    bold: True
                    values: root.compute_methods[compute_channel_type_selector.text or 'event']
            BoxLayout:
                id: compute_methods_widget
                orientation: 'vertical'
                size_hint_y: None
                size_hint_min_x: self.minimum_width
                height: self.minimum_height
                spacing: '1dp'
                canvas:
                    Color:
                        rgba: app.theme.primary_light
                    Rectangle:
                        pos: self.pos
                        size: self.size


<ComputeNewChannelWidget>:
    variables_container: variables_container.__self__
    channel_selector: channel_selector.__self__
    name_label: label
    orientation: 'vertical'
    size_hint_y: None
    size_hint_min_x: self.minimum_width
    height: self.minimum_height
    spacing: '5dp'
    padding: 0, '4dp'
    canvas:
        Color:
            rgba: app.theme.primary
        Rectangle:
            pos: self.pos
            size: self.size
    BoxLayout:
        size_hint_y: None
        size_hint_min_x: self.minimum_width
        height: self.minimum_height
        spacing: '5dp'
        ExpandButton:
            id: expand
            state: 'normal'
        Widget:
            size_hint_x: None
            size_hint_min_y: label.texture_size[1]
            FlatLabel:
                id: label
                text: root.name
                bold: True
                size: self.texture_size[0], self.parent.height
                flat_color: app.theme.text_primary
                pos: self.parent.pos
        MinSizeYFlatLabel:
            text: f'@ {root.channel_type} channel:' + (' ' * {5: 0, 4: 1, 3: 3}[len(root.channel_type)])
        VariableContextSpinner:
            id: channel_selector
            bold: True
            variable_context: root.__self__
            include_none_in_values: False
            variable_name: f'{root.channel_type}_channel_names'
            variable_value_callback: lambda _, x: setattr(root, 'compute_channel', x)
        MinSizeYFlatLabel:
            text: 'New channel name:'
        FlatSizedTextInput:
            background_color: app.theme.primary_light
            hint_text: 'Intermediate channel name'
            on_focus: if not self.focus: self.text = app.export_stats.update_new_channel_name(root.__self__, self.text)
            size_hint_min_x: '200dp'
        FlatImageButton:
            scale_down_color: True
            source: 'flat_delete.png'
            flat_color: app.theme.accent
            on_release: app.export_stats.delete_new_channel(root)
    BoxShowMore:
        more: more_widget.__self__
        show_more: expand.state == 'down'
        size_hint_min_x: more_widget.minimum_width
        size_hint_y: None
        height: self.minimum_height
        padding: expand.width, 0, 0, 0
        BoxLayout:
            id: more_widget
            orientation: 'vertical'
            size_hint_y: None
            size_hint_min_x: self.minimum_width
            height: self.minimum_height
            spacing: '5dp'
            FlatLabel:
                text: root.doc
                text_size: self.width, None
                size_hint_min_x: '100dp'
                size_hint_y: None
                height: self.texture_size[1]
                flat_color: app.theme.text_primary
            GridLayout:
                id: variables_container
                cols: 2
                size_hint_y: None
                size_hint_min_x: self.minimum_width
                height: self.minimum_height
                spacing: '5dp'


<ComputeMethodWidget>:
    variables_container: variables_container.__self__
    channel_selector: channel_selector.__self__
    name_label: label
    orientation: 'vertical'
    size_hint_y: None
    size_hint_min_x: self.minimum_width
    height: self.minimum_height
    spacing: '5dp'
    padding: 0, '4dp'
    canvas:
        Color:
            rgba: app.theme.primary
        Rectangle:
            pos: self.pos
            size: self.size
    BoxLayout:
        size_hint_y: None
        size_hint_min_x: self.minimum_width
        height: self.minimum_height
        spacing: '5dp'
        ExpandButton:
            id: expand
            state: 'normal'
        Widget:
            size_hint_x: None
            size_hint_min_y: label.texture_size[1]
            FlatLabel:
                id: label
                text: root.name
                bold: True
                size: self.texture_size[0], self.parent.height
                flat_color: app.theme.text_primary
                pos: self.parent.pos
        MinSizeYFlatLabel:
            text: f'@ {root.channel_type} channels:' + (' ' * {5: 0, 4: 1, 3: 3}[len(root.channel_type)])
        SpinnerListFromContext:
            id: channel_selector
            bold: True
            variable_context: app.export_stats
            include_none_in_values: False
            variable_name: f'{root.channel_type}_channel_names'
            variable_value_callback: lambda _, x: setattr(root, 'compute_channels', x)
        MinSizeYFlatLabel:
            text: 'Export ID:'
        FlatSizedTextInput:
            background_color: app.theme.primary_light
            hint_text: 'Optional export ID'
            on_focus: if not self.focus: root.export_key = self.text
            size_hint_min_x: '200dp'
        FlatImageButton:
            scale_down_color: True
            source: 'flat_delete.png'
            flat_color: app.theme.accent
            on_release: app.export_stats.delete_computation(root)
    BoxShowMore:
        more: more_widget.__self__
        show_more: expand.state == 'down'
        size_hint_min_x: more_widget.minimum_width
        size_hint_y: None
        height: self.minimum_height
        padding: expand.width, 0, 0, 0
        BoxLayout:
            id: more_widget
            orientation: 'vertical'
            size_hint_y: None
            size_hint_min_x: self.minimum_width
            height: self.minimum_height
            spacing: '5dp'
            FlatLabel:
                text: root.doc
                text_size: self.width, None
                size_hint_min_x: '100dp'
                size_hint_y: None
                height: self.texture_size[1]
                flat_color: app.theme.text_primary
            GridLayout:
                id: variables_container
                cols: 2
                size_hint_y: None
                size_hint_min_x: self.minimum_width
                height: self.minimum_height
                spacing: '5dp'


<ExportVariableTextInput@FlatSizedTextInput>:
    background_color: app.theme.primary_light
    on_focus: if not self.focus: self.value_callback(self.text)
    size_hint_min_x: '200dp'


<VariableDocWithDefault>:
    name_label: label
    orientation: 'vertical'
    size_hint_min_x: self.minimum_width
    size_hint_y: None
    height: self.minimum_height
    padding: '0dp', '4dp'
    canvas:
        Color:
            rgba: app.theme.primary
        Rectangle:
            pos: self.pos
            size: self.size
    BoxLayout:
        size_hint_min_x: self.minimum_width
        size_hint_y: None
        height: self.minimum_height
        spacing: '10dp'
        Widget:
            size_hint_x: None
            size_hint_min_y: label.texture_size[1]
            FlatLabel:
                id: label
                on_kv_post: root.add_variable_widget(self.parent.parent)
                text: f'{root.name}:'
                bold: True
                size: self.texture_size[0], self.parent.height
                flat_color: app.theme.text_primary
                pos: self.parent.pos
    FlatLabel:
        text: root.doc
        size_hint_y: None
        height: self.texture_size[1]
        text_size: self.width, None
        flat_color: app.theme.text_primary
        size_hint_min_x: '100dp'


<VariableDocNoDefault>:
    name_label: label
    size_hint_min_x: self.minimum_width
    size_hint_y: None
    height: self.minimum_height
    spacing: '10dp'
    padding: '0dp', '4dp'
    canvas:
        Color:
            rgba: app.theme.primary
        Rectangle:
            pos: self.pos
            size: self.size
    Widget:
        size_hint_x: None
        size_hint_min_y: label.texture_size[1]
        FlatLabel:
            id: label
            text: f'{root.name}:'
            bold: True
            size: self.texture_size[0], self.parent.height
            flat_color: app.theme.text_primary
            pos: self.parent.pos
    FlatLabel:
        text: root.doc
        size_hint_y: None
        height: self.texture_size[1]
        text_size: self.width, None
        flat_color: app.theme.text_primary
        size_hint_min_x: '100dp'


<SpinnerTextOnlyContext@SpinnerTextContextBehavior+SizedFlatSpinner>
    size_hint_min_x: '100dp'
    text: '<none>'
    text_autoupdate: False
    on_text: self.change_spinner_item_referenced()


<ContextSpinner@SpinnerFromContextBehavior+SpinnerTextOnlyContext>


<VariableContextSpinner@SpinnerTextCallbackBehavior+ContextSpinner>:
    on_text: self.variable_value = self.text


<SpinnerChannelNameItem>:
    size_hint: None, None
    size: self.minimum_width, '34dp'
    padding: '7dp', 0, 0, 0
    label: label
    on_text: self.parent.spinner_root.update_values_from_children()
    canvas:
        Color:
            rgba: app.theme.primary
        Rectangle:
            pos: self.pos
            size: self.size
    MinSizeYFlatLabel:
        id: label
        text: root.text
        bold: root.bold
    FlatImageButton:
        scale_down_color: True
        source: 'flat_delete.png'
        flat_color: app.theme.accent
        on_release: root.remove_reference_to_spinner_item()


<SpinnerListFromContext>:
    size_hint_y: None
    height: self.minimum_height
    size_hint_min_x: self.minimum_width
    size_hint_max_x: self.minimum_width - min(dp(200), channel_selectors.width) + channel_selectors.width
    spacing: '5dp'
    bold: False
    BoxLayout:
        size_hint: None, None
        size: self.minimum_size
        canvas:
            Color:
                a: .18
            Rectangle:
                pos: self.pos
                size: self.size
        SpinnerTextOnlyContext:
            id: channel_selector
        BoxLayout:
            size_hint_x: None
            width: self.minimum_width
            size_hint_min_y: self.minimum_height
            canvas:
                Color:
                    a: .25
                Rectangle:
                    pos: self.pos
                    size: self.size
            FlatImageButton:
                scale_down_color: True
                source: 'flat_plus.png'
                flat_color: app.theme.accent
                on_release:
                    if channel_selector.text != '<none>' and channel_selector.text not in [w.text for w in channel_selectors.children]: channel_selectors.add_widget(Factory.SpinnerChannelNameItem(text=channel_selector.text, bold=root.bold))
    ScrollView:
        id: scroll
        always_overscroll: False
        size_hint_min_y: channels_box.minimum_height
        bar_width: '10dp'
        scroll_type: ['bars']
        size_hint_min_x: min(dp(200), channels_box.width)
        do_scroll_y: False
        BoxLayout:
            id: channels_box
            size_hint: None, None
            size: self.minimum_width, scroll.height
            padding: '1dp'
            canvas:
                Color:
                    rgba: app.theme.primary_light
                Rectangle:
                    pos: self.pos
                    size: self.size
            Widget:
                size_hint_x: None
                width: empty_label.width
                size_hint_min_y: empty_label.size_hint_min_y
                canvas:
                    Color:
                        rgba: app.theme.primary
                    Rectangle:
                        pos: self.pos
                        size: self.size
                MinSizeYFlatLabel:
                    id: empty_label
                    height: self.parent.height
                    pos: self.parent.pos
                    padding_x: '5dp'
                    text: '' if channel_selectors.children else '<-Add channels'
            BoxLayout:
                id: channel_selectors
                spinner_root: root
                size_hint_x: None
                width: self.minimum_width
                size_hint_min_y: self.minimum_height
                on_children: root.update_values_from_children()
                spacing: '1dp'
