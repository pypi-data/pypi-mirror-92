#:import math math

<ControlDisplay@BoxLayout>:
    spacing: '5dp'
    BoxLayout:
        orientation: 'vertical'
        spacing: '2dp'
        padding: '2dp'
        size_hint_x: None
        width: '46dp'
        size_hint_min_y: self.minimum_height
        BoxLayout:
            disabled: not app.interactive_player_mode
            orientation: 'vertical'
            spacing: '5dp'
            size_hint_min_y: self.minimum_height
            canvas:
                Color:
                    rgba: app.theme.primary
                Rectangle:
                    pos: self.pos
                    size: self.size
            FlatSizedTextInput:
                background_color: app.theme.primary_light
                on_focus: if not self.focus: app.player.set_play_rate(float(self.text or 0))
                text: app.player.get_play_rate_text(app.player.play_rate)
                input_filter: 'float'
            TickSlider:
                test_name: 'rate_slider'
                id: rate_slider
                orientation: 'vertical'
                size_hint_min_y: '100dp'
                on_value: app.player.set_log_play_rate(self.value)
                max: 1
                min: -1
                value: app.player.get_slider_log_play_rate(app.player.play_rate)
                log: True
                ticks_major: 1
                ticks_minor: 5
                canvas:
                    Color:
                        rgba: app.theme.accent
        BoxLayout:
            orientation: 'vertical'
            spacing: '5dp'
            size_hint_y: None
            height: self.minimum_height
            canvas:
                Color:
                    rgba: app.theme.primary
                Rectangle:
                    pos: self.pos
                    size: self.size
            FlatImageButton:
                size_hint_y: None
                height: '36dp'
                on_release: slider.value = max(slider.min, slider.value - 0.25)
                source: 'magnify-minus-outline.png'
                scale_down_color: True
                flat_color: app.theme.accent
            FlatImageButton:
                size_hint_y: None
                height: '36dp'
                on_release: slider.value = min(slider.max, slider.value + 0.25)
                source: 'magnify-plus-outline.png'
                scale_down_color: True
                flat_color: app.theme.accent
            Slider:
                id: slider
                disabled: app.player.player_state in ('none', 'opening')
                orientation: 'vertical'
                size_hint_y: None
                height: '200dp'
                max: 4
                min: max(0.01, min((scroll.width - dp(15)) / max(image_display.width, 1), (scroll.height - dp(15)) / max(image_display.height, 1)))
                on_min: self.value = self.min
                value: 1.
                on_value: scatter.scale = self.value
    BoxLayout:
        orientation: 'vertical'
        size_hint_min_y: self.minimum_height
        size_hint_min_x: '200dp'
        spacing: '5dp'
        BoxLayout:
            orientation: 'vertical'
            size_hint_max_y: dp(47) + min(dp(100), scoring_viewer.height)
            size_hint_min_y: self.minimum_height
            padding: '20dp', '5dp', '20dp', 0
            canvas:
                Color:
                    rgba: app.theme.primary
                Rectangle:
                    pos: self.pos
                    size: self.size
            ScrollView:
                scroll_type: ['bars']
                bar_width: '15dp'
                size_hint_min_y: min(dp(50), scoring_viewer.height)
                canvas.before:
                    Color:
                        rgba: [0, 0, 0, 1]
                    Rectangle:
                        size: self.size
                        pos: self.pos
                RelativeLayout:
                    id: scoring_viewer
                    on_kv_post: app.channel_controller.overview_controller.set_widget(self.__self__)
                    size_hint_y: None
                    height: 0
                    on_width: app.channel_controller.overview_controller.set_width(int(self.width))
            FloatLayout:
                size_hint_y: None
                height: '42dp'
                Graph:
                    size_hint_y: None
                    height: '42dp'
                    pos_hint: {'pos': (0, 0)}
                    xmin: 0
                    xmax: app.player.duration
                    x_ticks_major: seek_slider.compute_ticks_spacing(self, self.width, app.player.duration)
                    x_ticks_minor: 5
                    x_grid_label: True
                    draw_border: False
                    _with_stencilbuffer: False
                    label_options: {'color': (0, 0, 0, 1)}
                SeekSlider:
                    id: seek_slider
                    disabled: app.player.player_state not in ('playing', 'finished', 'paused')
                    padding: 0
                    disabled: not app.player.filename
                    size_hint_y: None
                    height: '30dp'
                    pos_hint: {'top': 1, 'x': 0}
                    max: app.player.duration
                    min: 0
                    value: app.player.last_frame_pts
                    on_release: app.player.seek(self.value)
        ScrollView:
            id: scroll
            scroll_type: ['bars']
            bar_width: '15dp'
            size_hint_min_y: '200dp'
            canvas.before:
                Color:
                    rgba: [0, 0, 0, 1]
                Rectangle:
                    size: self.size
                    pos: self.pos
            BoxLayout:
                id: box
                size_hint: None, None
                size: image_display.width * scatter.scale + dp(15), image_display.height * scatter.scale + dp(15)
                padding: 0, 0, '15dp', '15dp'
                Scatter:
                    id: scatter
                    do_scale: False
                    do_translation: False, False
                    do_rotation: False
                    auto_bring_to_front: False
                    do_collide_after_children: True
                    size_hint: None, None
                    size: image_display.size
                    on_scale:
                        app.channel_controller.set_graphics_scale(self.scale)
                        app.ruler.set_graphics_scale(self.scale)
                    ImageDisplayWidgetManager:
                        on_kv_post:
                            app.image_display_manager = self.__self__
                            app.image_display_manager.zone_painter = zone_painter.__self__
                            app.zone_painter = zone_painter.__self__
                            app.image_display_manager.pos_channel_painter = pos_channel_painter.__self__
                            app.ruler_widget = ruler_widget.__self__
                        channel_controller: app.channel_controller
                        size: image_display.size
                        BufferImage:
                            id: image_display
                            on_kv_post: app.image_display = self.__self__
                            auto_bring_to_front: False
                            size_hint: None, None
                            size: 0, 0
                            on_image_size: self.size = self.image_size
                            scale_to_image: False

                            do_scale: False
                            do_translation: False, False
                            do_rotation: False
                        PosChannelPainter:
                            test_name: 'pos_painter'
                            id: pos_channel_painter
                            size_hint: None, None
                            size: image_display.size
                        ZonePainter:
                            id: zone_painter
                            app: app.__self__
                            size_hint: None, None
                            size: image_display.size
                            locked: True
                        RulerWidget:
                            id: ruler_widget
                            ruler: app.ruler
                            size_hint: None, None
                            size: image_display.size
                            ruler_active: app.ruler_active
                            on_ruler_active: app.ruler.show_ruler(self.canvas, self.size) if self.ruler_active else app.ruler.hide_ruler()
