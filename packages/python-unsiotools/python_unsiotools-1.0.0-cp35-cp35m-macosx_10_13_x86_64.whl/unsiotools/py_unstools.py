# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _py_unstools
else:
    import _py_unstools

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class cfalcon(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _py_unstools.cfalcon_swiginit(self, _py_unstools.new_cfalcon())
    __swig_destroy__ = _py_unstools.delete_cfalcon

    @staticmethod
    def addGravity(nbody, pos, mass, acc, phi, eps, G=1.0, theta=0.6, kernel_type=1, ncrit=6):
        return _py_unstools.cfalcon_addGravity(nbody, pos, mass, acc, phi, eps, G, theta, kernel_type, ncrit)

    @staticmethod
    def addGravity2(nbody, pos, mass, nbody_tp, pos_tp, acc, phi, selfp, eps, G=1.0, theta=0.6, kernel_type=1, ncrit=6):
        return _py_unstools.cfalcon_addGravity2(nbody, pos, mass, nbody_tp, pos_tp, acc, phi, selfp, eps, G, theta, kernel_type, ncrit)

    def compute_gravity(self, n1, n2, n3, n4, eps, G=1.0, theta=0.6, kernel_type=1, ncrit=6):
        return _py_unstools.cfalcon_compute_gravity(self, n1, n2, n3, n4, eps, G, theta, kernel_type, ncrit)

    def compute_density(self, n1, n2, n3, n4, method=0, K=32, N=1, ncrit=0):
        return _py_unstools.cfalcon_compute_density(self, n1, n2, n3, n4, method, K, N, ncrit)

# Register cfalcon in _py_unstools:
_py_unstools.cfalcon_swigregister(cfalcon)

def cfalcon_addGravity(nbody, pos, mass, acc, phi, eps, G=1.0, theta=0.6, kernel_type=1, ncrit=6):
    return _py_unstools.cfalcon_addGravity(nbody, pos, mass, acc, phi, eps, G, theta, kernel_type, ncrit)

def cfalcon_addGravity2(nbody, pos, mass, nbody_tp, pos_tp, acc, phi, selfp, eps, G=1.0, theta=0.6, kernel_type=1, ncrit=6):
    return _py_unstools.cfalcon_addGravity2(nbody, pos, mass, nbody_tp, pos_tp, acc, phi, selfp, eps, G, theta, kernel_type, ncrit)

class CDensity(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _py_unstools.CDensity_swiginit(self, _py_unstools.new_CDensity(*args))
    __swig_destroy__ = _py_unstools.delete_CDensity

    def setData(self, nbody, pos, mass):
        return _py_unstools.CDensity_setData(self, nbody, pos, mass)

    def compute(self, method=0, K=32, N=1, ncrit=0):
        return _py_unstools.CDensity_compute(self, method, K, N, ncrit)
    F = property(_py_unstools.CDensity_F_get, _py_unstools.CDensity_F_set)
    N = property(_py_unstools.CDensity_N_get, _py_unstools.CDensity_N_set)

    def getRho(self):
        return _py_unstools.CDensity_getRho(self)

    def getHsml(self):
        return _py_unstools.CDensity_getHsml(self)

# Register CDensity in _py_unstools:
_py_unstools.CDensity_swigregister(CDensity)
cvar = _py_unstools.cvar

class node(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    type = property(_py_unstools.node_type_get, _py_unstools.node_type_set)
    mass = property(_py_unstools.node_mass_get, _py_unstools.node_mass_set)
    pos = property(_py_unstools.node_pos_get, _py_unstools.node_pos_set)

    def __init__(self):
        _py_unstools.node_swiginit(self, _py_unstools.new_node())
    __swig_destroy__ = _py_unstools.delete_node

# Register node in _py_unstools:
_py_unstools.node_swigregister(node)

BODY = _py_unstools.BODY
class body(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    type = property(_py_unstools.body_type_get, _py_unstools.body_type_set)
    mass = property(_py_unstools.body_mass_get, _py_unstools.body_mass_set)
    pos = property(_py_unstools.body_pos_get, _py_unstools.body_pos_set)
    id = property(_py_unstools.body_id_get, _py_unstools.body_id_set)
    level = property(_py_unstools.body_level_get, _py_unstools.body_level_set)

    def __init__(self):
        _py_unstools.body_swiginit(self, _py_unstools.new_body())
    __swig_destroy__ = _py_unstools.delete_body

# Register body in _py_unstools:
_py_unstools.body_swigregister(body)

CELL = _py_unstools.CELL
NSUB = _py_unstools.NSUB
class cell(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    type = property(_py_unstools.cell_type_get, _py_unstools.cell_type_set)
    mass = property(_py_unstools.cell_mass_get, _py_unstools.cell_mass_set)
    pos = property(_py_unstools.cell_pos_get, _py_unstools.cell_pos_set)
    subp = property(_py_unstools.cell_subp_get, _py_unstools.cell_subp_set)

    def __init__(self):
        _py_unstools.cell_swiginit(self, _py_unstools.new_cell())
    __swig_destroy__ = _py_unstools.delete_cell

# Register cell in _py_unstools:
_py_unstools.cell_swigregister(cell)

class CSamePos(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, _i1, _i2):
        _py_unstools.CSamePos_swiginit(self, _py_unstools.new_CSamePos(_i1, _i2))

    def getId1(self):
        return _py_unstools.CSamePos_getId1(self)

    def getId2(self):
        return _py_unstools.CSamePos_getId2(self)
    __swig_destroy__ = _py_unstools.delete_CSamePos

# Register CSamePos in _py_unstools:
_py_unstools.CSamePos_swigregister(CSamePos)

LMAX = _py_unstools.LMAX
NDIM = _py_unstools.NDIM
class CTreeF(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _py_unstools.CTreeF_swiginit(self, _py_unstools.new_CTreeF(*args))
    __swig_destroy__ = _py_unstools.delete_CTreeF

    def getRoot(self):
        return _py_unstools.CTreeF_getRoot(self)

    def getRmin(self):
        return _py_unstools.CTreeF_getRmin(self)

    def getRsize(self):
        return _py_unstools.CTreeF_getRsize(self)

    def getLevelMax(self):
        return _py_unstools.CTreeF_getLevelMax(self)

    def getLevelMin(self):
        return _py_unstools.CTreeF_getLevelMin(self)

    def getBodyData(self):
        return _py_unstools.CTreeF_getBodyData(self)

    def getNbody(self):
        return _py_unstools.CTreeF_getNbody(self)

    def getTotalCells(self):
        return _py_unstools.CTreeF_getTotalCells(self)

    def getSamePos(self):
        return _py_unstools.CTreeF_getSamePos(self)

    def distanceBodyToMesh(self, i):
        return _py_unstools.CTreeF_distanceBodyToMesh(self, i)

    def displayLevelStats(self):
        return _py_unstools.CTreeF_displayLevelStats(self)

    def get_levels(self, n):
        return _py_unstools.CTreeF_get_levels(self, n)

    def get_closest_distance_to_mesh(self, n):
        return _py_unstools.CTreeF_get_closest_distance_to_mesh(self, n)

# Register CTreeF in _py_unstools:
_py_unstools.CTreeF_swigregister(CTreeF)

class CTreeD(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _py_unstools.CTreeD_swiginit(self, _py_unstools.new_CTreeD(*args))
    __swig_destroy__ = _py_unstools.delete_CTreeD

    def getRoot(self):
        return _py_unstools.CTreeD_getRoot(self)

    def getRmin(self):
        return _py_unstools.CTreeD_getRmin(self)

    def getRsize(self):
        return _py_unstools.CTreeD_getRsize(self)

    def getLevelMax(self):
        return _py_unstools.CTreeD_getLevelMax(self)

    def getLevelMin(self):
        return _py_unstools.CTreeD_getLevelMin(self)

    def getBodyData(self):
        return _py_unstools.CTreeD_getBodyData(self)

    def getNbody(self):
        return _py_unstools.CTreeD_getNbody(self)

    def getTotalCells(self):
        return _py_unstools.CTreeD_getTotalCells(self)

    def getSamePos(self):
        return _py_unstools.CTreeD_getSamePos(self)

    def distanceBodyToMesh(self, i):
        return _py_unstools.CTreeD_distanceBodyToMesh(self, i)

    def displayLevelStats(self):
        return _py_unstools.CTreeD_displayLevelStats(self)

    def get_levels(self, n):
        return _py_unstools.CTreeD_get_levels(self, n)

    def get_closest_distance_to_mesh(self, n):
        return _py_unstools.CTreeD_get_closest_distance_to_mesh(self, n)

# Register CTreeD in _py_unstools:
_py_unstools.CTreeD_swigregister(CTreeD)

class CDataIndex(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _py_unstools.CDataIndex_swiginit(self, _py_unstools.new_CDataIndex(*args))

    def foo(self):
        return _py_unstools.CDataIndex_foo(self)

    def setDI(self, _data, _index):
        return _py_unstools.CDataIndex_setDI(self, _data, _index)

    @staticmethod
    def sortData(a, b):
        return _py_unstools.CDataIndex_sortData(a, b)
    data = property(_py_unstools.CDataIndex_data_get, _py_unstools.CDataIndex_data_set)
    index = property(_py_unstools.CDataIndex_index_get, _py_unstools.CDataIndex_index_set)
    __swig_destroy__ = _py_unstools.delete_CDataIndex

# Register CDataIndex in _py_unstools:
_py_unstools.CDataIndex_swigregister(CDataIndex)

def CDataIndex_sortData(a, b):
    return _py_unstools.CDataIndex_sortData(a, b)

class CRectify(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, _verbose=False):
        _py_unstools.CRectify_swiginit(self, _py_unstools.new_CRectify(_verbose))

    def rectify(self, *args):
        return _py_unstools.CRectify_rectify(self, *args)

    def computeEigenVectors(self, *args):
        return _py_unstools.CRectify_computeEigenVectors(self, *args)

    def process(self):
        return _py_unstools.CRectify_process(self)

    @staticmethod
    def snapTransform(nbody, time, pos, vel, rect_file, status):
        return _py_unstools.CRectify_snapTransform(nbody, time, pos, vel, rect_file, status)

    def initOldFrame(self):
        return _py_unstools.CRectify_initOldFrame(self)
    __swig_destroy__ = _py_unstools.delete_CRectify

# Register CRectify in _py_unstools:
_py_unstools.CRectify_swigregister(CRectify)

def CRectify_snapTransform(nbody, time, pos, vel, rect_file, status):
    return _py_unstools.CRectify_snapTransform(nbody, time, pos, vel, rect_file, status)


def rectify_snap_(nbody, time, pos, vel, rect_file, status, lenstring):
    return _py_unstools.rectify_snap_(nbody, time, pos, vel, rect_file, status, lenstring)

def rectify_full_(nbody, time, pos, vel, mass, rho, use_rho, cod_file, rect_file, radius, dmin, dmax, len_cod, len_rect):
    return _py_unstools.rectify_full_(nbody, time, pos, vel, mass, rho, use_rho, cod_file, rect_file, radius, dmin, dmax, len_cod, len_rect)
NTHREAD_MAX = _py_unstools.NTHREAD_MAX
class t_cuda_grid(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    devid = property(_py_unstools.t_cuda_grid_devid_get, _py_unstools.t_cuda_grid_devid_set)
    nblock = property(_py_unstools.t_cuda_grid_nblock_get, _py_unstools.t_cuda_grid_nblock_set)
    offset = property(_py_unstools.t_cuda_grid_offset_get, _py_unstools.t_cuda_grid_offset_set)

    def __init__(self):
        _py_unstools.t_cuda_grid_swiginit(self, _py_unstools.new_t_cuda_grid())
    __swig_destroy__ = _py_unstools.delete_t_cuda_grid

# Register t_cuda_grid in _py_unstools:
_py_unstools.t_cuda_grid_swigregister(t_cuda_grid)

class CPartProp(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, _x, _y, _prop, _hsml):
        _py_unstools.CPartProp_swiginit(self, _py_unstools.new_CPartProp(_x, _y, _prop, _hsml))

    @staticmethod
    def mySort(a, b):
        return _py_unstools.CPartProp_mySort(a, b)

    @staticmethod
    def mySortR2(a, b):
        return _py_unstools.CPartProp_mySortR2(a, b)
    x = property(_py_unstools.CPartProp_x_get, _py_unstools.CPartProp_x_set)
    y = property(_py_unstools.CPartProp_y_get, _py_unstools.CPartProp_y_set)
    prop = property(_py_unstools.CPartProp_prop_get, _py_unstools.CPartProp_prop_set)
    hsml = property(_py_unstools.CPartProp_hsml_get, _py_unstools.CPartProp_hsml_set)
    __swig_destroy__ = _py_unstools.delete_CPartProp

# Register CPartProp in _py_unstools:
_py_unstools.CPartProp_swigregister(CPartProp)

def CPartProp_mySort(a, b):
    return _py_unstools.CPartProp_mySort(a, b)

def CPartProp_mySortR2(a, b):
    return _py_unstools.CPartProp_mySortR2(a, b)

class C2dplotF(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2, arg3, arg4, arg5, arg6):
        _py_unstools.C2dplotF_swiginit(self, _py_unstools.new_C2dplotF(arg2, arg3, arg4, arg5, arg6))

    def compute(self, pic, _no_frame, _nbody, _pos, _range, _title, _sel_comp, _filename, _time, _xy, _xz, _zy, _sview, _weight, psort, hsml, _itf, wedge, legend, _cmap):
        return _py_unstools.C2dplotF_compute(self, pic, _no_frame, _nbody, _pos, _range, _title, _sel_comp, _filename, _time, _xy, _xz, _zy, _sview, _weight, psort, hsml, _itf, wedge, legend, _cmap)

    def compute_image(self, _dev, _no_frame, n1, n4, _title, _sel_comp, _filename, _timu, _xy, _xz, _zy, _sview, n2, _psort, n3, _itf, _wedge, _legend, _cmap):
        return _py_unstools.C2dplotF_compute_image(self, _dev, _no_frame, n1, n4, _title, _sel_comp, _filename, _timu, _xy, _xz, _zy, _sview, n2, _psort, n3, _itf, _wedge, _legend, _cmap)
    __swig_destroy__ = _py_unstools.delete_C2dplotF

# Register C2dplotF in _py_unstools:
_py_unstools.C2dplotF_swigregister(C2dplotF)

class C2dplotD(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2, arg3, arg4, arg5, arg6):
        _py_unstools.C2dplotD_swiginit(self, _py_unstools.new_C2dplotD(arg2, arg3, arg4, arg5, arg6))

    def compute(self, pic, _no_frame, _nbody, _pos, _range, _title, _sel_comp, _filename, _time, _xy, _xz, _zy, _sview, _weight, psort, hsml, _itf, wedge, legend, _cmap):
        return _py_unstools.C2dplotD_compute(self, pic, _no_frame, _nbody, _pos, _range, _title, _sel_comp, _filename, _time, _xy, _xz, _zy, _sview, _weight, psort, hsml, _itf, wedge, legend, _cmap)

    def compute_image(self, _dev, _no_frame, n1, n4, _title, _sel_comp, _filename, _timu, _xy, _xz, _zy, _sview, n2, _psort, n3, _itf, _wedge, _legend, _cmap):
        return _py_unstools.C2dplotD_compute_image(self, _dev, _no_frame, n1, n4, _title, _sel_comp, _filename, _timu, _xy, _xz, _zy, _sview, n2, _psort, n3, _itf, _wedge, _legend, _cmap)
    __swig_destroy__ = _py_unstools.delete_C2dplotD

# Register C2dplotD in _py_unstools:
_py_unstools.C2dplotD_swigregister(C2dplotD)



