# coding: utf-8

"""
    AristaFlowREST/RuntimeManager

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 4.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GuiContext(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'act_instance': 'ActivityInstance',
        'ebp_inst_ref': 'EbpInstanceReference',
        'session_id': 'str',
        'execution_context': 'ExecutionContext',
        'transferred_gui_context_id': 'str',
        'gui_context_attributes': 'dict(str, str)',
        'lang_tag': 'str'
    }

    attribute_map = {
        'act_instance': 'actInstance',
        'ebp_inst_ref': 'ebpInstRef',
        'session_id': 'sessionId',
        'execution_context': 'executionContext',
        'transferred_gui_context_id': 'transferredGuiContextId',
        'gui_context_attributes': 'guiContextAttributes',
        'lang_tag': 'langTag'
    }

    def __init__(self, act_instance=None, ebp_inst_ref=None, session_id=None, execution_context=None, transferred_gui_context_id=None, gui_context_attributes=None, lang_tag=None):  # noqa: E501
        """GuiContext - a model defined in Swagger"""  # noqa: E501
        self._act_instance = None
        self._ebp_inst_ref = None
        self._session_id = None
        self._execution_context = None
        self._transferred_gui_context_id = None
        self._gui_context_attributes = None
        self._lang_tag = None
        if not(hasattr(self, "discriminator")) or not(self.discriminator):
            self.discriminator = None
        self.act_instance = act_instance
        self.ebp_inst_ref = ebp_inst_ref
        self.session_id = session_id
        self.execution_context = execution_context
        self.transferred_gui_context_id = transferred_gui_context_id
        if gui_context_attributes is not None:
            self.gui_context_attributes = gui_context_attributes
        if lang_tag is not None:
            self.lang_tag = lang_tag

    @property
    def act_instance(self):
        """Gets the act_instance of this GuiContext.  # noqa: E501


        :return: The act_instance of this GuiContext.  # noqa: E501
        :rtype: ActivityInstance
        """
        return self._act_instance

    @act_instance.setter
    def act_instance(self, act_instance):
        """Sets the act_instance of this GuiContext.


        :param act_instance: The act_instance of this GuiContext.  # noqa: E501
        :type: ActivityInstance
        """
        if act_instance is None:
            raise ValueError("Invalid value for `act_instance`, must not be `None`")  # noqa: E501

        self._act_instance = act_instance

    @property
    def ebp_inst_ref(self):
        """Gets the ebp_inst_ref of this GuiContext.  # noqa: E501


        :return: The ebp_inst_ref of this GuiContext.  # noqa: E501
        :rtype: EbpInstanceReference
        """
        return self._ebp_inst_ref

    @ebp_inst_ref.setter
    def ebp_inst_ref(self, ebp_inst_ref):
        """Sets the ebp_inst_ref of this GuiContext.


        :param ebp_inst_ref: The ebp_inst_ref of this GuiContext.  # noqa: E501
        :type: EbpInstanceReference
        """
        if ebp_inst_ref is None:
            raise ValueError("Invalid value for `ebp_inst_ref`, must not be `None`")  # noqa: E501

        self._ebp_inst_ref = ebp_inst_ref

    @property
    def session_id(self):
        """Gets the session_id of this GuiContext.  # noqa: E501


        :return: The session_id of this GuiContext.  # noqa: E501
        :rtype: str
        """
        return self._session_id

    @session_id.setter
    def session_id(self, session_id):
        """Sets the session_id of this GuiContext.


        :param session_id: The session_id of this GuiContext.  # noqa: E501
        :type: str
        """
        if session_id is None:
            raise ValueError("Invalid value for `session_id`, must not be `None`")  # noqa: E501

        self._session_id = session_id

    @property
    def execution_context(self):
        """Gets the execution_context of this GuiContext.  # noqa: E501


        :return: The execution_context of this GuiContext.  # noqa: E501
        :rtype: ExecutionContext
        """
        return self._execution_context

    @execution_context.setter
    def execution_context(self, execution_context):
        """Sets the execution_context of this GuiContext.


        :param execution_context: The execution_context of this GuiContext.  # noqa: E501
        :type: ExecutionContext
        """
        if execution_context is None:
            raise ValueError("Invalid value for `execution_context`, must not be `None`")  # noqa: E501

        self._execution_context = execution_context

    @property
    def transferred_gui_context_id(self):
        """Gets the transferred_gui_context_id of this GuiContext.  # noqa: E501


        :return: The transferred_gui_context_id of this GuiContext.  # noqa: E501
        :rtype: str
        """
        return self._transferred_gui_context_id

    @transferred_gui_context_id.setter
    def transferred_gui_context_id(self, transferred_gui_context_id):
        """Sets the transferred_gui_context_id of this GuiContext.


        :param transferred_gui_context_id: The transferred_gui_context_id of this GuiContext.  # noqa: E501
        :type: str
        """
        if transferred_gui_context_id is None:
            raise ValueError("Invalid value for `transferred_gui_context_id`, must not be `None`")  # noqa: E501

        self._transferred_gui_context_id = transferred_gui_context_id

    @property
    def gui_context_attributes(self):
        """Gets the gui_context_attributes of this GuiContext.  # noqa: E501


        :return: The gui_context_attributes of this GuiContext.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._gui_context_attributes

    @gui_context_attributes.setter
    def gui_context_attributes(self, gui_context_attributes):
        """Sets the gui_context_attributes of this GuiContext.


        :param gui_context_attributes: The gui_context_attributes of this GuiContext.  # noqa: E501
        :type: dict(str, str)
        """

        self._gui_context_attributes = gui_context_attributes

    @property
    def lang_tag(self):
        """Gets the lang_tag of this GuiContext.  # noqa: E501


        :return: The lang_tag of this GuiContext.  # noqa: E501
        :rtype: str
        """
        return self._lang_tag

    @lang_tag.setter
    def lang_tag(self, lang_tag):
        """Sets the lang_tag of this GuiContext.


        :param lang_tag: The lang_tag of this GuiContext.  # noqa: E501
        :type: str
        """

        self._lang_tag = lang_tag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GuiContext, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GuiContext):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
