# coding: utf-8

"""
    AristaFlowREST/RuntimeManager

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 4.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from af_remote_html_runtime_manager.models.dummy_parent import DummyParent  # noqa: F401,E501

class ExecutableBusinessProcessInstance(DummyParent):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sub_class': 'str',
        'process_type': 'str',
        'process_template_version': 'str',
        'process_template_name': 'str',
        'loc_process_template_name': 'dict(str, str)',
        'process_instance_name': 'str',
        'loc_process_instance_name': 'dict(str, str)',
        'name': 'str',
        'loc_name': 'dict(str, str)',
        'desc': 'str',
        'loc_desc': 'dict(str, str)',
        'icon_id': 'str',
        'exec_control_properties': 'ExecutionControlProperties',
        'conf': 'AfConfiguration',
        'parameters': 'list[AccessedProcessModelParameter]',
        'attached_data_context': 'InputDataContext',
        'group_name': 'str',
        'group_execution_context': 'str',
        'user_attributes': 'dict(str, str)'
    }
    if hasattr(DummyParent, "swagger_types"):
        swagger_types.update(DummyParent.swagger_types)

    attribute_map = {
        'sub_class': 'subClass',
        'process_type': 'processType',
        'process_template_version': 'processTemplateVersion',
        'process_template_name': 'processTemplateName',
        'loc_process_template_name': 'locProcessTemplateName',
        'process_instance_name': 'processInstanceName',
        'loc_process_instance_name': 'locProcessInstanceName',
        'name': 'name',
        'loc_name': 'locName',
        'desc': 'desc',
        'loc_desc': 'locDesc',
        'icon_id': 'iconId',
        'exec_control_properties': 'execControlProperties',
        'conf': 'conf',
        'parameters': 'parameters',
        'attached_data_context': 'attachedDataContext',
        'group_name': 'groupName',
        'group_execution_context': 'groupExecutionContext',
        'user_attributes': 'userAttributes'
    }
    if hasattr(DummyParent, "attribute_map"):
        attribute_map.update(DummyParent.attribute_map)

    discriminator_value_class_map = {
          'ActivityInstance': 'ActivityInstance'    }

    def __init__(self, sub_class=None, process_type=None, process_template_version=None, process_template_name=None, loc_process_template_name=None, process_instance_name=None, loc_process_instance_name=None, name=None, loc_name=None, desc=None, loc_desc=None, icon_id=None, exec_control_properties=None, conf=None, parameters=None, attached_data_context=None, group_name=None, group_execution_context=None, user_attributes=None, *args, **kwargs):  # noqa: E501
        """ExecutableBusinessProcessInstance - a model defined in Swagger"""  # noqa: E501
        self._sub_class = None
        self._process_type = None
        self._process_template_version = None
        self._process_template_name = None
        self._loc_process_template_name = None
        self._process_instance_name = None
        self._loc_process_instance_name = None
        self._name = None
        self._loc_name = None
        self._desc = None
        self._loc_desc = None
        self._icon_id = None
        self._exec_control_properties = None
        self._conf = None
        self._parameters = None
        self._attached_data_context = None
        self._group_name = None
        self._group_execution_context = None
        self._user_attributes = None
        if not(hasattr(self, "discriminator")) or not(self.discriminator):
            self.discriminator = 'sub_class'
        self.sub_class = sub_class
        self.process_type = process_type
        self.process_template_version = process_template_version
        self.process_template_name = process_template_name
        if loc_process_template_name is not None:
            self.loc_process_template_name = loc_process_template_name
        self.process_instance_name = process_instance_name
        if loc_process_instance_name is not None:
            self.loc_process_instance_name = loc_process_instance_name
        self.name = name
        if loc_name is not None:
            self.loc_name = loc_name
        if desc is not None:
            self.desc = desc
        if loc_desc is not None:
            self.loc_desc = loc_desc
        if icon_id is not None:
            self.icon_id = icon_id
        self.exec_control_properties = exec_control_properties
        self.conf = conf
        self.parameters = parameters
        self.attached_data_context = attached_data_context
        self.group_name = group_name
        if group_execution_context is not None:
            self.group_execution_context = group_execution_context
        if user_attributes is not None:
            self.user_attributes = user_attributes
        DummyParent.__init__(self, *args, **kwargs)

    @property
    def sub_class(self):
        """Gets the sub_class of this ExecutableBusinessProcessInstance.  # noqa: E501


        :return: The sub_class of this ExecutableBusinessProcessInstance.  # noqa: E501
        :rtype: str
        """
        return self._sub_class

    @sub_class.setter
    def sub_class(self, sub_class):
        """Sets the sub_class of this ExecutableBusinessProcessInstance.


        :param sub_class: The sub_class of this ExecutableBusinessProcessInstance.  # noqa: E501
        :type: str
        """
        if sub_class is None:
            raise ValueError("Invalid value for `sub_class`, must not be `None`")  # noqa: E501

        self._sub_class = sub_class

    @property
    def process_type(self):
        """Gets the process_type of this ExecutableBusinessProcessInstance.  # noqa: E501


        :return: The process_type of this ExecutableBusinessProcessInstance.  # noqa: E501
        :rtype: str
        """
        return self._process_type

    @process_type.setter
    def process_type(self, process_type):
        """Sets the process_type of this ExecutableBusinessProcessInstance.


        :param process_type: The process_type of this ExecutableBusinessProcessInstance.  # noqa: E501
        :type: str
        """
        if process_type is None:
            raise ValueError("Invalid value for `process_type`, must not be `None`")  # noqa: E501

        self._process_type = process_type

    @property
    def process_template_version(self):
        """Gets the process_template_version of this ExecutableBusinessProcessInstance.  # noqa: E501


        :return: The process_template_version of this ExecutableBusinessProcessInstance.  # noqa: E501
        :rtype: str
        """
        return self._process_template_version

    @process_template_version.setter
    def process_template_version(self, process_template_version):
        """Sets the process_template_version of this ExecutableBusinessProcessInstance.


        :param process_template_version: The process_template_version of this ExecutableBusinessProcessInstance.  # noqa: E501
        :type: str
        """
        if process_template_version is None:
            raise ValueError("Invalid value for `process_template_version`, must not be `None`")  # noqa: E501

        self._process_template_version = process_template_version

    @property
    def process_template_name(self):
        """Gets the process_template_name of this ExecutableBusinessProcessInstance.  # noqa: E501


        :return: The process_template_name of this ExecutableBusinessProcessInstance.  # noqa: E501
        :rtype: str
        """
        return self._process_template_name

    @process_template_name.setter
    def process_template_name(self, process_template_name):
        """Sets the process_template_name of this ExecutableBusinessProcessInstance.


        :param process_template_name: The process_template_name of this ExecutableBusinessProcessInstance.  # noqa: E501
        :type: str
        """
        if process_template_name is None:
            raise ValueError("Invalid value for `process_template_name`, must not be `None`")  # noqa: E501

        self._process_template_name = process_template_name

    @property
    def loc_process_template_name(self):
        """Gets the loc_process_template_name of this ExecutableBusinessProcessInstance.  # noqa: E501


        :return: The loc_process_template_name of this ExecutableBusinessProcessInstance.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._loc_process_template_name

    @loc_process_template_name.setter
    def loc_process_template_name(self, loc_process_template_name):
        """Sets the loc_process_template_name of this ExecutableBusinessProcessInstance.


        :param loc_process_template_name: The loc_process_template_name of this ExecutableBusinessProcessInstance.  # noqa: E501
        :type: dict(str, str)
        """

        self._loc_process_template_name = loc_process_template_name

    @property
    def process_instance_name(self):
        """Gets the process_instance_name of this ExecutableBusinessProcessInstance.  # noqa: E501


        :return: The process_instance_name of this ExecutableBusinessProcessInstance.  # noqa: E501
        :rtype: str
        """
        return self._process_instance_name

    @process_instance_name.setter
    def process_instance_name(self, process_instance_name):
        """Sets the process_instance_name of this ExecutableBusinessProcessInstance.


        :param process_instance_name: The process_instance_name of this ExecutableBusinessProcessInstance.  # noqa: E501
        :type: str
        """
        if process_instance_name is None:
            raise ValueError("Invalid value for `process_instance_name`, must not be `None`")  # noqa: E501

        self._process_instance_name = process_instance_name

    @property
    def loc_process_instance_name(self):
        """Gets the loc_process_instance_name of this ExecutableBusinessProcessInstance.  # noqa: E501


        :return: The loc_process_instance_name of this ExecutableBusinessProcessInstance.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._loc_process_instance_name

    @loc_process_instance_name.setter
    def loc_process_instance_name(self, loc_process_instance_name):
        """Sets the loc_process_instance_name of this ExecutableBusinessProcessInstance.


        :param loc_process_instance_name: The loc_process_instance_name of this ExecutableBusinessProcessInstance.  # noqa: E501
        :type: dict(str, str)
        """

        self._loc_process_instance_name = loc_process_instance_name

    @property
    def name(self):
        """Gets the name of this ExecutableBusinessProcessInstance.  # noqa: E501


        :return: The name of this ExecutableBusinessProcessInstance.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ExecutableBusinessProcessInstance.


        :param name: The name of this ExecutableBusinessProcessInstance.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def loc_name(self):
        """Gets the loc_name of this ExecutableBusinessProcessInstance.  # noqa: E501


        :return: The loc_name of this ExecutableBusinessProcessInstance.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._loc_name

    @loc_name.setter
    def loc_name(self, loc_name):
        """Sets the loc_name of this ExecutableBusinessProcessInstance.


        :param loc_name: The loc_name of this ExecutableBusinessProcessInstance.  # noqa: E501
        :type: dict(str, str)
        """

        self._loc_name = loc_name

    @property
    def desc(self):
        """Gets the desc of this ExecutableBusinessProcessInstance.  # noqa: E501


        :return: The desc of this ExecutableBusinessProcessInstance.  # noqa: E501
        :rtype: str
        """
        return self._desc

    @desc.setter
    def desc(self, desc):
        """Sets the desc of this ExecutableBusinessProcessInstance.


        :param desc: The desc of this ExecutableBusinessProcessInstance.  # noqa: E501
        :type: str
        """

        self._desc = desc

    @property
    def loc_desc(self):
        """Gets the loc_desc of this ExecutableBusinessProcessInstance.  # noqa: E501


        :return: The loc_desc of this ExecutableBusinessProcessInstance.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._loc_desc

    @loc_desc.setter
    def loc_desc(self, loc_desc):
        """Sets the loc_desc of this ExecutableBusinessProcessInstance.


        :param loc_desc: The loc_desc of this ExecutableBusinessProcessInstance.  # noqa: E501
        :type: dict(str, str)
        """

        self._loc_desc = loc_desc

    @property
    def icon_id(self):
        """Gets the icon_id of this ExecutableBusinessProcessInstance.  # noqa: E501


        :return: The icon_id of this ExecutableBusinessProcessInstance.  # noqa: E501
        :rtype: str
        """
        return self._icon_id

    @icon_id.setter
    def icon_id(self, icon_id):
        """Sets the icon_id of this ExecutableBusinessProcessInstance.


        :param icon_id: The icon_id of this ExecutableBusinessProcessInstance.  # noqa: E501
        :type: str
        """

        self._icon_id = icon_id

    @property
    def exec_control_properties(self):
        """Gets the exec_control_properties of this ExecutableBusinessProcessInstance.  # noqa: E501


        :return: The exec_control_properties of this ExecutableBusinessProcessInstance.  # noqa: E501
        :rtype: ExecutionControlProperties
        """
        return self._exec_control_properties

    @exec_control_properties.setter
    def exec_control_properties(self, exec_control_properties):
        """Sets the exec_control_properties of this ExecutableBusinessProcessInstance.


        :param exec_control_properties: The exec_control_properties of this ExecutableBusinessProcessInstance.  # noqa: E501
        :type: ExecutionControlProperties
        """
        if exec_control_properties is None:
            raise ValueError("Invalid value for `exec_control_properties`, must not be `None`")  # noqa: E501

        self._exec_control_properties = exec_control_properties

    @property
    def conf(self):
        """Gets the conf of this ExecutableBusinessProcessInstance.  # noqa: E501


        :return: The conf of this ExecutableBusinessProcessInstance.  # noqa: E501
        :rtype: AfConfiguration
        """
        return self._conf

    @conf.setter
    def conf(self, conf):
        """Sets the conf of this ExecutableBusinessProcessInstance.


        :param conf: The conf of this ExecutableBusinessProcessInstance.  # noqa: E501
        :type: AfConfiguration
        """
        if conf is None:
            raise ValueError("Invalid value for `conf`, must not be `None`")  # noqa: E501

        self._conf = conf

    @property
    def parameters(self):
        """Gets the parameters of this ExecutableBusinessProcessInstance.  # noqa: E501


        :return: The parameters of this ExecutableBusinessProcessInstance.  # noqa: E501
        :rtype: list[AccessedProcessModelParameter]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this ExecutableBusinessProcessInstance.


        :param parameters: The parameters of this ExecutableBusinessProcessInstance.  # noqa: E501
        :type: list[AccessedProcessModelParameter]
        """
        if parameters is None:
            raise ValueError("Invalid value for `parameters`, must not be `None`")  # noqa: E501

        self._parameters = parameters

    @property
    def attached_data_context(self):
        """Gets the attached_data_context of this ExecutableBusinessProcessInstance.  # noqa: E501


        :return: The attached_data_context of this ExecutableBusinessProcessInstance.  # noqa: E501
        :rtype: InputDataContext
        """
        return self._attached_data_context

    @attached_data_context.setter
    def attached_data_context(self, attached_data_context):
        """Sets the attached_data_context of this ExecutableBusinessProcessInstance.


        :param attached_data_context: The attached_data_context of this ExecutableBusinessProcessInstance.  # noqa: E501
        :type: InputDataContext
        """
        if attached_data_context is None:
            raise ValueError("Invalid value for `attached_data_context`, must not be `None`")  # noqa: E501

        self._attached_data_context = attached_data_context

    @property
    def group_name(self):
        """Gets the group_name of this ExecutableBusinessProcessInstance.  # noqa: E501


        :return: The group_name of this ExecutableBusinessProcessInstance.  # noqa: E501
        :rtype: str
        """
        return self._group_name

    @group_name.setter
    def group_name(self, group_name):
        """Sets the group_name of this ExecutableBusinessProcessInstance.


        :param group_name: The group_name of this ExecutableBusinessProcessInstance.  # noqa: E501
        :type: str
        """
        if group_name is None:
            raise ValueError("Invalid value for `group_name`, must not be `None`")  # noqa: E501

        self._group_name = group_name

    @property
    def group_execution_context(self):
        """Gets the group_execution_context of this ExecutableBusinessProcessInstance.  # noqa: E501


        :return: The group_execution_context of this ExecutableBusinessProcessInstance.  # noqa: E501
        :rtype: str
        """
        return self._group_execution_context

    @group_execution_context.setter
    def group_execution_context(self, group_execution_context):
        """Sets the group_execution_context of this ExecutableBusinessProcessInstance.


        :param group_execution_context: The group_execution_context of this ExecutableBusinessProcessInstance.  # noqa: E501
        :type: str
        """

        self._group_execution_context = group_execution_context

    @property
    def user_attributes(self):
        """Gets the user_attributes of this ExecutableBusinessProcessInstance.  # noqa: E501


        :return: The user_attributes of this ExecutableBusinessProcessInstance.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._user_attributes

    @user_attributes.setter
    def user_attributes(self, user_attributes):
        """Sets the user_attributes of this ExecutableBusinessProcessInstance.


        :param user_attributes: The user_attributes of this ExecutableBusinessProcessInstance.  # noqa: E501
        :type: dict(str, str)
        """

        self._user_attributes = user_attributes

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_value = data[self.attribute_map[self.discriminator]]
        return discriminator_value if not(self.__class__.__name__ == discriminator_value) else None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExecutableBusinessProcessInstance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExecutableBusinessProcessInstance):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
