# coding: utf-8

"""
    AristaFlowREST/RuntimeManager

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 4.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ClientSessionDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'agent': 'RichAgent',
        'token': 'str',
        'caller_uri': 'str',
        'add_attributes': 'dict(str, str)'
    }

    attribute_map = {
        'agent': 'agent',
        'token': 'token',
        'caller_uri': 'callerUri',
        'add_attributes': 'addAttributes'
    }

    def __init__(self, agent=None, token=None, caller_uri=None, add_attributes=None):  # noqa: E501
        """ClientSessionDetails - a model defined in Swagger"""  # noqa: E501
        self._agent = None
        self._token = None
        self._caller_uri = None
        self._add_attributes = None
        if not(hasattr(self, "discriminator")) or not(self.discriminator):
            self.discriminator = None
        self.agent = agent
        self.token = token
        if caller_uri is not None:
            self.caller_uri = caller_uri
        if add_attributes is not None:
            self.add_attributes = add_attributes

    @property
    def agent(self):
        """Gets the agent of this ClientSessionDetails.  # noqa: E501


        :return: The agent of this ClientSessionDetails.  # noqa: E501
        :rtype: RichAgent
        """
        return self._agent

    @agent.setter
    def agent(self, agent):
        """Sets the agent of this ClientSessionDetails.


        :param agent: The agent of this ClientSessionDetails.  # noqa: E501
        :type: RichAgent
        """
        if agent is None:
            raise ValueError("Invalid value for `agent`, must not be `None`")  # noqa: E501

        self._agent = agent

    @property
    def token(self):
        """Gets the token of this ClientSessionDetails.  # noqa: E501

        This is Base64-URL-encoded (RFC 4648, table 2)!  # noqa: E501

        :return: The token of this ClientSessionDetails.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this ClientSessionDetails.

        This is Base64-URL-encoded (RFC 4648, table 2)!  # noqa: E501

        :param token: The token of this ClientSessionDetails.  # noqa: E501
        :type: str
        """
        if token is None:
            raise ValueError("Invalid value for `token`, must not be `None`")  # noqa: E501

        self._token = token

    @property
    def caller_uri(self):
        """Gets the caller_uri of this ClientSessionDetails.  # noqa: E501


        :return: The caller_uri of this ClientSessionDetails.  # noqa: E501
        :rtype: str
        """
        return self._caller_uri

    @caller_uri.setter
    def caller_uri(self, caller_uri):
        """Sets the caller_uri of this ClientSessionDetails.


        :param caller_uri: The caller_uri of this ClientSessionDetails.  # noqa: E501
        :type: str
        """

        self._caller_uri = caller_uri

    @property
    def add_attributes(self):
        """Gets the add_attributes of this ClientSessionDetails.  # noqa: E501


        :return: The add_attributes of this ClientSessionDetails.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._add_attributes

    @add_attributes.setter
    def add_attributes(self, add_attributes):
        """Sets the add_attributes of this ClientSessionDetails.


        :param add_attributes: The add_attributes of this ClientSessionDetails.  # noqa: E501
        :type: dict(str, str)
        """

        self._add_attributes = add_attributes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClientSessionDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClientSessionDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
