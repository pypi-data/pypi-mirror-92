#

"""
    Python Insight API

    This is an internal REST API between Python and Mosel  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech

    (c) 2020 Fair Isaac Corporation
"""


import pprint
import re  #

import six

from xpressinsight.rest.configuration import Configuration


class AttachmentRules(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'maxsize': 'int',
        'maxattachcount': 'int',
        'maxfilenamelen': 'int',
        'invalidfilenamechars': 'list[str]',
        'maxdescriptionlen': 'int'
    }

    attribute_map = {
        'maxsize': 'maxsize',
        'maxattachcount': 'maxattachcount',
        'maxfilenamelen': 'maxfilenamelen',
        'invalidfilenamechars': 'invalidfilenamechars',
        'maxdescriptionlen': 'maxdescriptionlen'
    }

    def __init__(self, maxsize=None, maxattachcount=None, maxfilenamelen=None, invalidfilenamechars=None, maxdescriptionlen=None, local_vars_configuration=None):  #
        """AttachmentRules - a model defined in OpenAPI"""  #
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._maxsize = None
        self._maxattachcount = None
        self._maxfilenamelen = None
        self._invalidfilenamechars = None
        self._maxdescriptionlen = None
        self.discriminator = None

        if maxsize is not None:
            self.maxsize = maxsize
        if maxattachcount is not None:
            self.maxattachcount = maxattachcount
        if maxfilenamelen is not None:
            self.maxfilenamelen = maxfilenamelen
        if invalidfilenamechars is not None:
            self.invalidfilenamechars = invalidfilenamechars
        if maxdescriptionlen is not None:
            self.maxdescriptionlen = maxdescriptionlen

    @property
    def maxsize(self):
        """Gets the maxsize of this AttachmentRules.  # noqa: E501

        the maximum size, in bytes, that an attachment may have  # noqa: E501

        :return: The maxsize of this AttachmentRules.  # noqa: E501
        :rtype: int
        """
        return self._maxsize

    @maxsize.setter
    def maxsize(self, maxsize):
        """Sets the maxsize of this AttachmentRules.

        the maximum size, in bytes, that an attachment may have  # noqa: E501

        :param maxsize: The maxsize of this AttachmentRules.  # noqa: E501
        :type: int
        """

        self._maxsize = maxsize

    @property
    def maxattachcount(self):
        """Gets the maxattachcount of this AttachmentRules.  # noqa: E501

        the maximum number of attachments that can be attached to a single scenario  # noqa: E501

        :return: The maxattachcount of this AttachmentRules.  # noqa: E501
        :rtype: int
        """
        return self._maxattachcount

    @maxattachcount.setter
    def maxattachcount(self, maxattachcount):
        """Sets the maxattachcount of this AttachmentRules.

        the maximum number of attachments that can be attached to a single scenario  # noqa: E501

        :param maxattachcount: The maxattachcount of this AttachmentRules.  # noqa: E501
        :type: int
        """

        self._maxattachcount = maxattachcount

    @property
    def maxfilenamelen(self):
        """Gets the maxfilenamelen of this AttachmentRules.  # noqa: E501

        the maximum permitted length, in characters, of an attachment filename  # noqa: E501

        :return: The maxfilenamelen of this AttachmentRules.  # noqa: E501
        :rtype: int
        """
        return self._maxfilenamelen

    @maxfilenamelen.setter
    def maxfilenamelen(self, maxfilenamelen):
        """Sets the maxfilenamelen of this AttachmentRules.

        the maximum permitted length, in characters, of an attachment filename  # noqa: E501

        :param maxfilenamelen: The maxfilenamelen of this AttachmentRules.  # noqa: E501
        :type: int
        """

        self._maxfilenamelen = maxfilenamelen

    @property
    def invalidfilenamechars(self):
        """Gets the invalidfilenamechars of this AttachmentRules.  # noqa: E501

        a list of characters that are not permitted in attachment filenames. Must be a list of single-character text values  # noqa: E501

        :return: The invalidfilenamechars of this AttachmentRules.  # noqa: E501
        :rtype: list[str]
        """
        return self._invalidfilenamechars

    @invalidfilenamechars.setter
    def invalidfilenamechars(self, invalidfilenamechars):
        """Sets the invalidfilenamechars of this AttachmentRules.

        a list of characters that are not permitted in attachment filenames. Must be a list of single-character text values  # noqa: E501

        :param invalidfilenamechars: The invalidfilenamechars of this AttachmentRules.  # noqa: E501
        :type: list[str]
        """

        self._invalidfilenamechars = invalidfilenamechars

    @property
    def maxdescriptionlen(self):
        """Gets the maxdescriptionlen of this AttachmentRules.  # noqa: E501

        the maximum permitted length, in characters, of an attachment description  # noqa: E501

        :return: The maxdescriptionlen of this AttachmentRules.  # noqa: E501
        :rtype: int
        """
        return self._maxdescriptionlen

    @maxdescriptionlen.setter
    def maxdescriptionlen(self, maxdescriptionlen):
        """Sets the maxdescriptionlen of this AttachmentRules.

        the maximum permitted length, in characters, of an attachment description  # noqa: E501

        :param maxdescriptionlen: The maxdescriptionlen of this AttachmentRules.  # noqa: E501
        :type: int
        """

        self._maxdescriptionlen = maxdescriptionlen

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AttachmentRules):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AttachmentRules):
            return True

        return self.to_dict() != other.to_dict()
