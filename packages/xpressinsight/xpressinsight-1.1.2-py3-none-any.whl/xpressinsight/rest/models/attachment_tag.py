#

"""
    Python Insight API

    This is an internal REST API between Python and Mosel  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech

    (c) 2020 Fair Isaac Corporation
"""


import pprint
import re  #

import six

from xpressinsight.rest.configuration import Configuration


class AttachmentTag(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'description': 'str',
        'mandatory': 'bool',
        'usage': 'str'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'mandatory': 'mandatory',
        'usage': 'usage'
    }

    def __init__(self, name=None, description=None, mandatory=None, usage=None, local_vars_configuration=None):  #
        """AttachmentTag - a model defined in OpenAPI"""  #
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._description = None
        self._mandatory = None
        self._usage = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if mandatory is not None:
            self.mandatory = mandatory
        if usage is not None:
            self.usage = usage

    @property
    def name(self):
        """Gets the name of this AttachmentTag.  # noqa: E501

        name of the tag  # noqa: E501

        :return: The name of this AttachmentTag.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AttachmentTag.

        name of the tag  # noqa: E501

        :param name: The name of this AttachmentTag.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this AttachmentTag.  # noqa: E501

        description of the tag  # noqa: E501

        :return: The description of this AttachmentTag.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AttachmentTag.

        description of the tag  # noqa: E501

        :param description: The description of this AttachmentTag.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def mandatory(self):
        """Gets the mandatory of this AttachmentTag.  # noqa: E501

        whether the tag is mandatory  # noqa: E501

        :return: The mandatory of this AttachmentTag.  # noqa: E501
        :rtype: bool
        """
        return self._mandatory

    @mandatory.setter
    def mandatory(self, mandatory):
        """Sets the mandatory of this AttachmentTag.

        whether the tag is mandatory  # noqa: E501

        :param mandatory: The mandatory of this AttachmentTag.  # noqa: E501
        :type: bool
        """

        self._mandatory = mandatory

    @property
    def usage(self):
        """Gets the usage of this AttachmentTag.  # noqa: E501

        tag usage restrictions  # noqa: E501

        :return: The usage of this AttachmentTag.  # noqa: E501
        :rtype: str
        """
        return self._usage

    @usage.setter
    def usage(self, usage):
        """Sets the usage of this AttachmentTag.

        tag usage restrictions  # noqa: E501

        :param usage: The usage of this AttachmentTag.  # noqa: E501
        :type: str
        """
        allowed_values = ["single-file", "multi-file"]  #
        if self.local_vars_configuration.client_side_validation and usage not in allowed_values:  #
            raise ValueError(
                "Invalid value for `usage` ({0}), must be one of {1}"  #
                .format(usage, allowed_values)
            )

        self._usage = usage

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AttachmentTag):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AttachmentTag):
            return True

        return self.to_dict() != other.to_dict()
