#

"""
    Python Insight API

    This is an internal REST API between Python and Mosel  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech

    (c) 2020 Fair Isaac Corporation
"""


import pprint
import re  #

import six

from xpressinsight.rest.configuration import Configuration


class Attachment(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'filename': 'str',
        'description': 'str',
        'tags': 'list[str]',
        'size': 'int',
        'last_modified_user': 'str',
        'last_modified_date': 'datetime',
        'hidden': 'bool'
    }

    attribute_map = {
        'filename': 'filename',
        'description': 'description',
        'tags': 'tags',
        'size': 'size',
        'last_modified_user': 'lastModifiedUser',
        'last_modified_date': 'lastModifiedDate',
        'hidden': 'hidden'
    }

    def __init__(self, filename=None, description=None, tags=None, size=None, last_modified_user=None, last_modified_date=None, hidden=None, local_vars_configuration=None):  #
        """Attachment - a model defined in OpenAPI"""  #
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._filename = None
        self._description = None
        self._tags = None
        self._size = None
        self._last_modified_user = None
        self._last_modified_date = None
        self._hidden = None
        self.discriminator = None

        if filename is not None:
            self.filename = filename
        if description is not None:
            self.description = description
        if tags is not None:
            self.tags = tags
        if size is not None:
            self.size = size
        if last_modified_user is not None:
            self.last_modified_user = last_modified_user
        if last_modified_date is not None:
            self.last_modified_date = last_modified_date
        if hidden is not None:
            self.hidden = hidden

    @property
    def filename(self):
        """Gets the filename of this Attachment.  # noqa: E501

        filename of the attachment  # noqa: E501

        :return: The filename of this Attachment.  # noqa: E501
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this Attachment.

        filename of the attachment  # noqa: E501

        :param filename: The filename of this Attachment.  # noqa: E501
        :type: str
        """

        self._filename = filename

    @property
    def description(self):
        """Gets the description of this Attachment.  # noqa: E501

        description of the attachment  # noqa: E501

        :return: The description of this Attachment.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Attachment.

        description of the attachment  # noqa: E501

        :param description: The description of this Attachment.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def tags(self):
        """Gets the tags of this Attachment.  # noqa: E501

        collection of tags associated with the attachment  # noqa: E501

        :return: The tags of this Attachment.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Attachment.

        collection of tags associated with the attachment  # noqa: E501

        :param tags: The tags of this Attachment.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def size(self):
        """Gets the size of this Attachment.  # noqa: E501

        size of the attachment, in bytes  # noqa: E501

        :return: The size of this Attachment.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this Attachment.

        size of the attachment, in bytes  # noqa: E501

        :param size: The size of this Attachment.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def last_modified_user(self):
        """Gets the last_modified_user of this Attachment.  # noqa: E501

        name of the last Insight user to modify the attachment  # noqa: E501

        :return: The last_modified_user of this Attachment.  # noqa: E501
        :rtype: str
        """
        return self._last_modified_user

    @last_modified_user.setter
    def last_modified_user(self, last_modified_user):
        """Sets the last_modified_user of this Attachment.

        name of the last Insight user to modify the attachment  # noqa: E501

        :param last_modified_user: The last_modified_user of this Attachment.  # noqa: E501
        :type: str
        """

        self._last_modified_user = last_modified_user

    @property
    def last_modified_date(self):
        """Gets the last_modified_date of this Attachment.  # noqa: E501

        date and time of last modification to attachment  # noqa: E501

        :return: The last_modified_date of this Attachment.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified_date

    @last_modified_date.setter
    def last_modified_date(self, last_modified_date):
        """Sets the last_modified_date of this Attachment.

        date and time of last modification to attachment  # noqa: E501

        :param last_modified_date: The last_modified_date of this Attachment.  # noqa: E501
        :type: datetime
        """

        self._last_modified_date = last_modified_date

    @property
    def hidden(self):
        """Gets the hidden of this Attachment.  # noqa: E501

        whether the attachment is hidden from the UI  # noqa: E501

        :return: The hidden of this Attachment.  # noqa: E501
        :rtype: bool
        """
        return self._hidden

    @hidden.setter
    def hidden(self, hidden):
        """Sets the hidden of this Attachment.

        whether the attachment is hidden from the UI  # noqa: E501

        :param hidden: The hidden of this Attachment.  # noqa: E501
        :type: bool
        """

        self._hidden = hidden

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Attachment):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Attachment):
            return True

        return self.to_dict() != other.to_dict()
