# coding: utf-8

"""
    CardPay REST API

    Welcome to the CardPay REST API. The CardPay API uses HTTP verbs and a [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) resources endpoint structure (see more info about REST). Request and response payloads are formatted as JSON. Merchant uses API to create payments, refunds, payouts or recurrings, check or update transaction status and get information about created transactions. In API authentication process based on [OAuth 2.0](https://oauth.net/2/) standard. For recent changes see changelog section.  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PaymentRequestCryptocurrencyAccount(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {"rollback_address": "str"}

    attribute_map = {"rollback_address": "rollback_address"}

    def __init__(self, rollback_address=None):  # noqa: E501
        """PaymentRequestCryptocurrencyAccount - a model defined in Swagger"""  # noqa: E501

        self._rollback_address = None
        self.discriminator = None

        if rollback_address is not None:
            self.rollback_address = rollback_address

    @property
    def rollback_address(self):
        """Gets the rollback_address of this PaymentRequestCryptocurrencyAccount.  # noqa: E501

        Customer's bitcoin address to be used for rollback  # noqa: E501

        :return: The rollback_address of this PaymentRequestCryptocurrencyAccount.  # noqa: E501
        :rtype: str
        """
        return self._rollback_address

    @rollback_address.setter
    def rollback_address(self, rollback_address):
        """Sets the rollback_address of this PaymentRequestCryptocurrencyAccount.

        Customer's bitcoin address to be used for rollback  # noqa: E501

        :param rollback_address: The rollback_address of this PaymentRequestCryptocurrencyAccount.  # noqa: E501
        :type: str
        """
        if rollback_address is not None and len(rollback_address) > 100:
            raise ValueError(
                "Invalid value for `rollback_address`, length must be less than or equal to `100`"
            )  # noqa: E501
        if rollback_address is not None and len(rollback_address) < 26:
            raise ValueError(
                "Invalid value for `rollback_address`, length must be greater than or equal to `26`"
            )  # noqa: E501

        self._rollback_address = rollback_address

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                if value is not None:
                    result[attr] = value
        if issubclass(PaymentRequestCryptocurrencyAccount, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaymentRequestCryptocurrencyAccount):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
