Metadata-Version: 2.0
Name: invocations
Version: 2.0.0
Summary: Common/best-practice Invoke tasks and collections
Home-page: https://invocations.readthedocs.io
Author: Jeff Forcier
Author-email: jeff@bitprophet.org
License: BSD
Platform: UNKNOWN
Classifier: Development Status :: 5 - Production/Stable
Classifier: Environment :: Console
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: System Administrators
Classifier: License :: OSI Approved :: BSD License
Classifier: Operating System :: POSIX
Classifier: Operating System :: Unix
Classifier: Operating System :: MacOS :: MacOS X
Classifier: Operating System :: Microsoft :: Windows
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 2
Classifier: Programming Language :: Python :: 2.7
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.5
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Topic :: Software Development
Classifier: Topic :: Software Development :: Build Tools
Classifier: Topic :: Software Development :: Libraries
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Topic :: System :: Software Distribution
Classifier: Topic :: System :: Systems Administration
Requires-Dist: invoke (>=1.0,<2.0)
Requires-Dist: blessings (>=1.6,<2)
Requires-Dist: releases (>=1.6,<2)
Requires-Dist: semantic-version (>=2.4,<2.7)
Requires-Dist: tabulate (==0.7.5)
Requires-Dist: tqdm (>=4.8.1)
Requires-Dist: wheel (>=0.24.0)
Requires-Dist: enum34 (>=1.1,<2); python_version < "3"

Invocations is a collection of reusable `Invoke <http://pyinvoke.org>`_ tasks,
task collections and helper functions. Originally sourced from the Invoke
project's own project-management tasks file, they are now highly configurable
and used across a number of projects, with the intent to become a clearinghouse
for implementing common best practices.

Currently implemented topics include (but are not limited to):

- management of Sphinx documentation trees
- Python project release lifecycles
- dependency vendoring
- running test suites (unit, integration, coverage-oriented, etc)
- console utilities such as confirmation prompts

and more.


