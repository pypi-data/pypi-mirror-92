{"version":3,"sources":["draftReviewBannerView.es6.js"],"names":[],"mappings":"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","file":"draftReviewBannerView.js","sourcesContent":["/**\n * A banner that represents a pending draft review.\n *\n * The banner displays at the top of the page and provides buttons for\n * editing the review, publishing, and discarding.\n *\n * The banner is a singleton. There's only ever one at a time.\n */\nRB.DraftReviewBannerView = Backbone.View.extend({\n    events: {\n        'click #review-banner-edit': '_onEditReviewClicked',\n        'click #review-banner-discard': '_onDiscardClicked',\n    },\n\n    /**\n     * Render the view.\n     *\n     * Returns:\n     *     RB.DraftReviewBannerView:\n     *     This object, for chaining.\n     */\n    render() {\n        this._$buttons = this.$('input');\n        this._$banner = this.$('.banner');\n\n        const model = this.model;\n        this.listenTo(model, 'saving destroying',\n                      () => this._$buttons.prop('disabled', true));\n        this.listenTo(model, 'saved destroyed',\n                      () => this._$buttons.prop('disabled', false));\n        this.listenTo(model, 'publishError', errorText => alert(errorText));\n\n        this._publishButton = new RB.SplitButtonView({\n            el: $('#review-banner-publish-container'),\n            text: gettext('Publish Review'),\n            click: _.bind(this._onPublishClicked, this),\n            id: 'review-banner-publish',\n            alternatives: [\n                {\n                    text: gettext('... and only e-mail the owner'),\n                    click: () => this._onPublishClicked({\n                        publishToOwnerOnly: true,\n                    }),\n                    id: 'review-banner-publish-submitter-only',\n                },\n            ],\n\n        });\n\n        this._publishButton.render();\n\n        if (!this.$el.hasClass('hidden')) {\n            this.show();\n        }\n\n        this.$el.addClass('ui-ready');\n\n        return this;\n    },\n\n    /*\n     * Show the banner.\n     *\n     * The banner will appear to slide down from the top of the page.\n     */\n    show() {\n        const height = this._$banner.outerHeight();\n\n        RB.scrollManager.markForUpdate(this.$el);\n\n        this.$el\n            .removeClass('hidden')\n            .css({\n                maxHeight: height,\n                height: height,\n            });\n        RB.scrollManager.scrollYOffset += height;\n        RB.scrollManager.markUpdated(this.$el);\n    },\n\n    /*\n     * Hide the banner.\n     *\n     * The banner will slide up to the top of the page.\n     */\n    hide() {\n        RB.scrollManager.markForUpdate(this.$el);\n\n        const height = this._$banner.outerHeight();\n\n        this.$el\n            .addClass('hidden')\n            .css('max-height', '');\n\n        /*\n         * If we set the height immediately, the browser will appear to not\n         * animate, since it can't transition heights (only max-heights). So\n         * we delay for a short period after we know the transition will have\n         * completed.\n         */\n        _.delay(\n            () => {\n                this.$el.css('height', '');\n                RB.scrollManager.markUpdated(this.$el);\n                RB.scrollManager.scrollYOffset -= height;\n            },\n            500);\n    },\n\n    /**\n     * Hide the banner and reloads the page.\n     *\n     * XXX Remove this function when we make the pages more dynamic.\n     */\n    hideAndReload() {\n        this.hide();\n\n        /*\n         * hideAndReload might have been called from within a $.funcQueue.\n         * With Firefox, later async functions that are queued in the\n         * $.funcQueue will not run when we change window.location, which\n         * means that we might miss out on some teardown that was\n         * scheduled. We defer changing the location until the next tick\n         * of the event loop to let any teardown occur.\n         */\n        _.defer(() => {\n            window.location = this.model.get('parentObject').get('reviewURL');\n        });\n    },\n\n    /**\n     * Return the height of the banner.\n     *\n     * Returns:\n     *     number:\n     *     The height of the banner.\n     */\n    getHeight() {\n        return this._$banner.outerHeight();\n    },\n\n    /**\n     * Remove the banner from the page.\n     */\n    remove() {\n        if (this._publishButton) {\n            this._publishButton.remove();\n        }\n\n        _super(this).remove.call(this);\n    },\n\n    /**\n     * Handler for the Edit Review button.\n     *\n     * Displays the review editor dialog.\n     *\n     * Returns:\n     *     boolean:\n     *     false, always.\n     */\n    _onEditReviewClicked() {\n        RB.ReviewDialogView.create({\n            review: this.model,\n            reviewRequestEditor: this.options.reviewRequestEditor,\n        });\n\n        return false;\n    },\n\n    /**\n     * Handler for the Publish button.\n     *\n     * Publishes the review.\n     *\n     * Args:\n     *     options (object):\n     *         Options that determine special cases for submission.\n     *\n     * Option Args:\n     *     publishToOwnerOnly (boolean):\n     *         Whether or not we should only notify the submitter of the review.\n     *\n     * Returns:\n     *     boolean:\n     *     false, always.\n     */\n    _onPublishClicked(options={}) {\n        if (options.publishToOwnerOnly) {\n            this.model.set('publishToOwnerOnly', true);\n        }\n\n        this.model.publish({\n            attrs: ['public', 'publishToOwnerOnly'],\n        });\n\n        return false;\n    },\n\n    /**\n     * Handler for the Discard button.\n     *\n     * Prompts the user to confirm that they want the review discarded.\n     * If they confirm, the review will be discarded.\n     *\n     * Returns:\n     *     boolean:\n     *     false, always.\n     */\n    _onDiscardClicked() {\n        $('<p/>')\n            .text(gettext('If you discard this review, all related comments will be permanently deleted.'))\n            .modalBox({\n                title: gettext('Are you sure you want to discard this review?'),\n                buttons: [\n                    $('<input type=\"button\">')\n                        .val(gettext('Cancel')),\n                    $('<input type=\"button\">')\n                        .val(gettext('Discard'))\n                        .click(() => this.model.destroy()),\n                ],\n            });\n\n        return false;\n    },\n}, {\n    instance: null,\n\n    /**\n     * Create the draft review banner singleton.\n     *\n     * Returns:\n     *     RB.DraftReviewBannerView:\n     *     The banner view.\n     */\n    create(options) {\n        if (!this.instance) {\n            this.instance = new RB.DraftReviewBannerView(options);\n            this.instance.render();\n        }\n\n        return this.instance;\n    },\n});\n"]}