{"version":3,"sources":["commentIssueBarView.es6.js"],"names":[],"mappings":"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","file":"commentIssueBarView.js","sourcesContent":["/**\n * Manages a comment's issue status bar.\n *\n * The buttons on the bar will update the comment's issue status on the server\n * when clicked. The bar will update to reflect the issue status of any\n * comments tracked by the issue summary table.\n */\nRB.CommentIssueBarView = Backbone.View.extend({\n    events: {\n        'click .reopen': '_onReopenClicked',\n        'click .resolve': '_onFixedClicked',\n        'click .drop': '_onDropClicked',\n        'click .verify-dropped': '_onVerifyDroppedClicked',\n        'click .verify-resolved': '_onVerifyFixedClicked',\n    },\n\n    statusInfo: {\n        open: {\n            visibleButtons: ['.drop', '.resolve'],\n            text: gettext('An issue was opened.'),\n        },\n        resolved: {\n            visibleButtons: ['.reopen'],\n            text: gettext('The issue has been resolved.'),\n        },\n        dropped: {\n            visibleButtons: ['.reopen'],\n            text: gettext('The issue has been dropped.'),\n        },\n        'verifying-dropped': {\n            visibleButtons: ['.reopen'],\n            text: gettext('Waiting for verification before dropping...'),\n        },\n        'verifying-resolved': {\n            visibleButtons: ['.reopen'],\n            text: gettext('Waiting for verification before resolving...'),\n        },\n    },\n\n    template: _.template(dedent`\n        <div class=\"issue-state\">\n         <div class=\"issue-container\">\n          <span class=\"rb-icon\"></span>\n          <span class=\"issue-details\">\n           <span class=\"issue-message\"></span>\n           <% if (interactive) { %>\n            <span class=\"issue-actions\">\n             <input type=\"button\" class=\"issue-button resolve\"\n                    value=\"<%- fixedLabel %>\">\n             <input type=\"button\" class=\"issue-button drop\"\n                    value=\"<%- dropLabel %>\">\n             <input type=\"button\" class=\"issue-button reopen\"\n                    value=\"<%- reopenLabel %>\">\n             <input type=\"button\" class=\"issue-button verify-resolved\"\n                    value=\"<%- verifyFixedLabel %>\">\n             <input type=\"button\" class=\"issue-button verify-dropped\"\n                    value=\"<%- verifyDroppedLabel %>\">\n            </span>\n           <% } %>\n          </span>\n         </div>\n        </div>\n    `),\n\n    /**\n     * Initialize the view.\n     */\n    initialize() {\n        const page = RB.PageManager.getPage();\n\n        this._manager = (this.options.commentIssueManager ||\n                         page.model.commentIssueManager);\n        this._issueStatus = this.options.issueStatus;\n        this._$buttons = null;\n        this._$state = null;\n        this._$icon = null;\n        this._$message = null;\n    },\n\n    /**\n     * Render the issue status bar.\n     *\n     * Returns:\n     *     RB.CommentIssueBarView:\n     *     This object, for chaining.\n     */\n    render() {\n        if (this.$el.children().length === 0) {\n            this.$el.append(this.template({\n                interactive: this.options.interactive,\n                fixedLabel: gettext('Fixed'),\n                dropLabel: gettext('Drop'),\n                reopenLabel: gettext('Re-open'),\n                verifyDroppedLabel: gettext('Verify Dropped'),\n                verifyFixedLabel: gettext('Verify Fixed'),\n            }));\n        }\n\n        this._$buttons = this.$('.issue-button');\n        this._$state = this.$('.issue-state');\n        this._$icon = this.$('.rb-icon');\n        this._$message = this.$('.issue-message');\n\n        this._manager.on('issueStatusUpdated',\n                         this._onIssueStatusUpdated,\n                         this);\n        this._showStatus(this._issueStatus);\n\n        return this;\n    },\n\n    /**\n     * Set the issue status of the comment on the server.\n     *\n     * Args:\n     *     issueStatus (string):\n     *         The new issue status (one of ``open``, ``resolved``, or\n     *         ``dropped``).\n     */\n    _setStatus(issueStatus) {\n        this._$buttons.prop('disabled', true);\n        this._manager.setCommentState(this.options.reviewID,\n                                      this.options.commentID,\n                                      this.options.commentType,\n                                      issueStatus);\n    },\n\n    /**\n     * Show the current issue status of the comment.\n     *\n     * This will affect the button visibility and the text of the bar.\n     *\n     * Args:\n     *     issueStatus (string):\n     *         The issue status to show (one of ``open``, ``resolved``, or\n     *         ``dropped``).\n     */\n    _showStatus(issueStatus) {\n        const statusInfo = this.statusInfo[issueStatus];\n        const prevStatus = this._issueStatus;\n\n        this._issueStatus = issueStatus;\n\n        this._$state\n            .removeClass(prevStatus)\n            .addClass(issueStatus);\n\n        let iconClass;\n\n        if (issueStatus === RB.BaseComment.STATE_VERIFYING_DROPPED ||\n            issueStatus === RB.BaseComment.STATE_VERIFYING_RESOLVED) {\n            iconClass = 'rb-icon rb-icon-issue-verifying';\n        } else {\n            iconClass = `rb-icon rb-icon-issue-${issueStatus}`;\n        }\n\n        this._$icon.attr('class', iconClass);\n        this._$buttons.hide();\n        this._$message.text(statusInfo.text);\n\n        if (this.options.interactive) {\n            let visibleButtons = statusInfo.visibleButtons;\n\n            if (this.options.canVerify) {\n                if (issueStatus === RB.BaseComment.STATE_VERIFYING_DROPPED) {\n                    visibleButtons.push('.verify-dropped');\n                } else if (issueStatus ===\n                           RB.BaseComment.STATE_VERIFYING_RESOLVED) {\n                    visibleButtons.push('.verify-resolved');\n                }\n            }\n\n            this._$buttons.filter(visibleButtons.join(',')).show();\n            this._$buttons.prop('disabled', false);\n        }\n\n        this.trigger('statusChanged', prevStatus, issueStatus);\n    },\n\n    /**\n     * Handler for when \"Re-open\" is clicked.\n     *\n     * Reopens the issue.\n     */\n    _onReopenClicked() {\n        this._setStatus(RB.BaseComment.STATE_OPEN);\n    },\n\n    /**\n     * Handler for when \"Fixed\" is clicked.\n     *\n     * Marks the issue as fixed.\n     */\n    _onFixedClicked() {\n        const comment = this._manager.getComment(this.options.reviewID,\n                                                 this.options.commentID,\n                                                 this.options.commentType);\n\n        comment.ready({\n            ready: () => {\n                if (comment.requiresVerification() &&\n                    comment.getAuthorUsername() !==\n                        RB.UserSession.instance.get('username')) {\n                    this._setStatus(RB.BaseComment.STATE_VERIFYING_RESOLVED);\n                } else {\n                    this._setStatus(RB.BaseComment.STATE_RESOLVED);\n                }\n            },\n        });\n    },\n\n    /**\n     * Handler for when \"Drop\" is clicked.\n     *\n     * Marks the issue as dropped.\n     */\n    _onDropClicked() {\n        const comment = this._manager.getComment(this.options.reviewID,\n                                                 this.options.commentID,\n                                                 this.options.commentType);\n\n        comment.ready({\n            ready: () => {\n                if (comment.requiresVerification() &&\n                    comment.getAuthorUsername() !==\n                        RB.UserSession.instance.get('username')) {\n                    this._setStatus(RB.BaseComment.STATE_VERIFYING_DROPPED);\n                } else {\n                    this._setStatus(RB.BaseComment.STATE_DROPPED);\n                }\n            },\n        });\n    },\n\n    /**\n     * Handler for when \"Verify Fixed\" is clicked.\n     */\n    _onVerifyFixedClicked() {\n        this._setStatus(RB.BaseComment.STATE_RESOLVED);\n    },\n\n    /**\n     * Handler for when \"Verify Dropped\" is clicked.\n     */\n    _onVerifyDroppedClicked() {\n        this._setStatus(RB.BaseComment.STATE_DROPPED);\n    },\n\n    /**\n     * Handler for when the issue status for the comment changes.\n     *\n     * Updates the dispaly to reflect the issue's current status.\n     *\n     * Args:\n     *     comment (RB.BaseComment):\n     *         The comment model which was updated.\n     */\n    _onIssueStatusUpdated(comment) {\n        if (comment.id === this.options.commentID) {\n            this._showStatus(comment.get('issueStatus'));\n        }\n    },\n});\n"]}