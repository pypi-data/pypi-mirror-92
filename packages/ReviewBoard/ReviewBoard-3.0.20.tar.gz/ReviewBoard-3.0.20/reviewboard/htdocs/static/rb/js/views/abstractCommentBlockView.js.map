{"version":3,"sources":["abstractCommentBlockView.es6.js"],"names":[],"mappings":"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","file":"abstractCommentBlockView.js","sourcesContent":["RB.AbstractCommentBlockView = Backbone.View.extend({\n    events: {\n        'click': '_onClicked'\n    },\n\n    tooltipSides: 'lrbt',\n\n    /**\n     * Dispose the comment block.\n     *\n     * This will remove the view and the tooltip.\n     */\n    dispose() {\n        this.trigger('removing');\n        this.remove();\n        this._$tooltip.remove();\n    },\n\n    /**\n     * Render the comment block.\n     *\n     * Along with the block, a floating tooltip will be created that\n     * displays summaries of the comments.\n     *\n     * Returns:\n     *     RB.AbstractCommentBlockView:\n     *     This object, for chaining.\n     */\n    render() {\n        this._$tooltip = $.tooltip(this.$el, { side: this.tooltipSides })\n            .addClass('comments');\n\n        this.renderContent();\n\n        this.model.on('change:draftComment', this._onDraftCommentChanged, this);\n        this._onDraftCommentChanged();\n\n        this._updateTooltip();\n\n        return this;\n    },\n\n    /**\n     * Hide the tooltip from the page.\n     *\n     * This will force the tooltip to hide, preventing it from interfering\n     * with operations such as moving a comment block.\n     *\n     * It will automatically show again the next time there is a mouse enter\n     * event.\n     */\n    hideTooltip() {\n        this._$tooltip.hide();\n    },\n\n    /**\n     * Position the comment dlg to the right side of comment block.\n     *\n     * This can be overridden to change where the comment dialog will\n     * be displayed.\n     *\n     * Args:\n     *     commntDlg (RB.CommentDialogView):\n     *          The view for the comment dialog.\n     */\n    positionCommentDlg(commentDlg) {\n        commentDlg.positionBeside(this.$el, {\n            side: 'r',\n            fitOnScreen: true\n        });\n    },\n\n    /**\n     * Position the notification bubble around the comment block.\n     *\n     * This can be overridden to change where the bubble will be displayed.\n     * By default, it is centered over the block.\n     *\n     * Args:\n     *     $bubble (jQuery):\n     *         The selector for the notification bubble.\n     */\n    positionNotifyBubble($bubble) {\n        $bubble.move(Math.round((this.$el.width()  - $bubble.width())  / 2),\n                     Math.round((this.$el.height() - $bubble.height()) / 2));\n    },\n\n    /**\n     * Notify the user of some update.\n     *\n     * This notification appears in the comment area.\n     *\n     * Args:\n     *     text (string):\n     *         The text to show in the notification.\n     *\n     *     cb (function, optional):\n     *         A callback function to call once the notification has been\n     *         removed.\n     *\n     *     context (object):\n     *         Context to bind when calling the ``cb`` callback function.\n     */\n    notify(text, cb, context) {\n        const $bubble = $('<div class=\"bubble\">')\n            .css('opacity', 0)\n            .appendTo(this.$el)\n            .text(text);\n\n        this.positionNotifyBubble($bubble);\n\n        $bubble\n            .animate({\n                top: '-=10px',\n                opacity: 0.8,\n            }, 350, 'swing')\n            .delay(1200)\n            .animate({\n                top: '+=10px',\n                opacity: 0,\n            }, 350, 'swing', () => {\n                $bubble.remove();\n\n                if (_.isFunction(cb)) {\n                    cb.call(context);\n                }\n            });\n    },\n\n    /**\n     * Update the tooltip contents.\n     *\n     * The contents will show the summary of each comment, including\n     * the draft comment, if any.\n     */\n    _updateTooltip() {\n        const $list = $('<ul/>');\n        const draftComment = this.model.get('draftComment');\n        const tooltipTemplate = _.template(dedent`\n            <li>\n             <div class=\"reviewer\">\n              <%- user %>:\n             </div>\n             <pre class=\"rich-text\"><%= html %></pre>\n            </li>\n        `);\n\n        if (draftComment) {\n            $(tooltipTemplate({\n                user: RB.UserSession.instance.get('fullName'),\n                html: draftComment.get('html'),\n            }))\n            .addClass('draft')\n            .appendTo($list);\n        }\n\n        this.model.get('serializedComments').forEach(comment => {\n            $(tooltipTemplate({\n                user: comment.user.name,\n                html: comment.html,\n            }))\n            .appendTo($list);\n        });\n\n        this._$tooltip\n            .empty()\n            .append($list);\n    },\n\n    /**\n     * Handle changes to the model's draftComment property.\n     *\n     * If there's a new draft comment, we'll begin listening for updates\n     * on it in order to update the tooltip or display notification bubbles.\n     *\n     * The comment block's style will reflect whether or not we have a\n     * draft comment.\n     *\n     * If the draft comment is deleted, and there are no other comments,\n     * the view will be removed.\n     */\n    _onDraftCommentChanged() {\n        const comment = this.model.get('draftComment');\n\n        if (!comment) {\n            this.$el.removeClass('draft');\n            return;\n        }\n\n        comment.on('change:text', this._updateTooltip, this);\n\n        comment.on('destroy', () => {\n            this.notify(gettext('Comment Deleted'), () => {\n                // Discard the comment block if empty.\n                if (this.model.isEmpty()) {\n                    this.$el.fadeOut(350, () => this.dispose());\n                } else {\n                    this.$el.removeClass('draft');\n                    this._updateTooltip();\n                }\n            });\n        });\n\n        comment.on('saved', options => {\n            this._updateTooltip();\n\n            if (!options.boundsUpdated) {\n                this.notify(gettext('Comment Saved'));\n            }\n\n            RB.DraftReviewBannerView.instance.show();\n        });\n\n        this.$el.addClass('draft');\n    },\n\n    /**\n     * Handle the comment block being clicked.\n     *\n     * Emits the 'clicked' signal so that parent views can process it.\n     */\n    _onClicked() {\n        this.trigger('clicked');\n    },\n});\n"]}