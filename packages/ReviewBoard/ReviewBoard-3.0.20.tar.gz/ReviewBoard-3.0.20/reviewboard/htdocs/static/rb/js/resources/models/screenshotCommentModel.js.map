{"version":3,"sources":["screenshotCommentModel.es6.js"],"names":[],"mappings":"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","file":"screenshotCommentModel.js","sourcesContent":["/**\n * A comment on a screenshot.\n *\n * Model Attributes:\n *     x (number):\n *         The X coordinate of the pixel at the top-left of the comment region.\n *\n *     y (number):\n *         The Y coordinate of the pixel at the top-left of the comment region.\n *\n *     width (number):\n *         The width of the comment region, in pixels.\n *\n *     height (number):\n *         The height of the comment region, in pixels.\n *\n *     screenshotID (number):\n *         The ID of the screenshot that this comment is on.\n *\n *     screenshot (RB.Screenshot):\n *         The screenshot that this comment is on.\n *\n *     thumbnailURL (string):\n *         The URL to an image file showing the region of the comment.\n */\nRB.ScreenshotComment = RB.BaseComment.extend({\n    defaults: _.defaults({\n        x: null,\n        y: null,\n        width: null,\n        height: null,\n        screenshotID: null,\n        screenshot: null,\n        thumbnailURL: null\n    }, RB.BaseComment.prototype.defaults()),\n\n    rspNamespace: 'screenshot_comment',\n    expandedFields: ['screenshot'],\n\n    attrToJsonMap: _.defaults({\n        width: 'w',\n        height: 'h',\n        thumbnailURL: 'thumbnail_url',\n        screenshotID: 'screenshot_id'\n    }, RB.BaseComment.prototype.attrToJsonMap),\n\n    serializedAttrs: [\n        'x',\n        'y',\n        'width',\n        'height',\n        'screenshotID'\n    ].concat(RB.BaseComment.prototype.serializedAttrs),\n\n    deserializedAttrs: [\n        'x',\n        'y',\n        'width',\n        'height',\n        'thumbnailURL'\n    ].concat(RB.BaseComment.prototype.deserializedAttrs),\n\n    serializers: _.defaults({\n        screenshotID: RB.JSONSerializers.onlyIfUnloaded\n    }, RB.BaseComment.prototype.serializers),\n\n    /**\n     * Deserialize comment data from an API payload.\n     *\n     * Args:\n     *     rsp (object):\n     *         The response from the server.\n     *\n     * Returns:\n     *     object:\n     *     Attribute values to set on the model.\n     */\n    parseResourceData(rsp) {\n        const result = RB.BaseComment.prototype.parseResourceData.call(\n            this, rsp);\n\n        result.screenshot = new RB.Screenshot(rsp.screenshot, {\n            parse: true\n        });\n        result.screenshotID = result.screenshot.id;\n\n        return result;\n    },\n\n    /*\n     * Validate the attributes of the model.\n     *\n     * This will check the screenshot ID and the region of the comment,\n     * along with the default comment validation.\n     *\n     * Args:\n     *     attrs (object):\n     *         The model attributes to validate.\n     *\n     * Returns:\n     *     string:\n     *     An error string, if appropriate.\n     */\n    validate(attrs) {\n        if (_.has(attrs, 'screenshotID') && !attrs.screenshotID) {\n            return RB.ScreenshotComment.strings.INVALID_SCREENSHOT_ID;\n        }\n\n        if (_.has(attrs, 'x') && attrs.x < 0) {\n            return RB.ScreenshotComment.strings.INVALID_X;\n        }\n\n        if (_.has(attrs, 'y') && attrs.y < 0) {\n            return RB.ScreenshotComment.strings.INVALID_Y;\n        }\n\n        if (_.has(attrs, 'width') && attrs.width <= 0) {\n            return RB.ScreenshotComment.strings.INVALID_WIDTH;\n        }\n\n        if (_.has(attrs, 'height') && attrs.height <= 0) {\n            return RB.ScreenshotComment.strings.INVALID_HEIGHT;\n        }\n\n        return RB.BaseComment.prototype.validate.apply(this, arguments);\n    }\n}, {\n    strings: {\n        INVALID_SCREENSHOT_ID: 'screenshotID must be a valid ID',\n        INVALID_X: 'x must be >= 0',\n        INVALID_Y: 'y must be >= 0',\n        INVALID_WIDTH: 'width must be > 0',\n        INVALID_HEIGHT: 'height must be > 0'\n    }\n});\n"]}