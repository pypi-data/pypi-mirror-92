{"version":3,"sources":["diffViewerPageModel.es6.js"],"names":[],"mappings":"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","file":"diffViewerPageModel.js","sourcesContent":["/**\n * The model for the diff viewer page.\n *\n * This handles all attribute storage and diff context parsing needed to\n * display and update the diff viewer.\n *\n * Model Attributes:\n *     canDownloadDiff (boolean):\n *         Whether a diff file can be downloaded, given the current revision\n *         state.\n *\n *     filenamePatterns (Array):\n *         A list of filenames or patterns used to filter the diff viewer.\n *         This is optional.\n *\n *     numDiffs (number):\n *         The total number of diffs.\n */\nRB.DiffViewerPage = RB.ReviewablePage.extend({\n    defaults: _.defaults({\n        canDownloadDiff: false,\n        filenamePatterns: null,\n        numDiffs: 1,\n    }, RB.ReviewablePage.prototype.defaults),\n\n    /**\n     * Construct the page's instance.\n     *\n     * This defines child objects for managing state related to the page\n     * prior to parsing the provided attributes payload and initializing\n     * the instance.\n     */\n    constructor() {\n        this.commentsHint = new RB.DiffCommentsHint();\n        this.files = new RB.DiffFileCollection();\n        this.pagination = new RB.Pagination();\n        this.revision = new RB.DiffRevision();\n\n        RB.ReviewablePage.apply(this, arguments);\n    },\n\n    /**\n     * Initialize the page.\n     *\n     * This will begin listening for events on the page and set up default\n     * state.\n     */\n    initialize() {\n        RB.ReviewablePage.prototype.initialize.apply(this, arguments);\n\n        this.diffReviewables = new RB.DiffReviewableCollection([], {\n            reviewRequest: this.get('reviewRequest'),\n        });\n        this.diffReviewables.watchFiles(this.files);\n    },\n\n    /**\n     * Parse the data for the page.\n     *\n     * Args:\n     *     rsp (object):\n     *         The payload to parse.\n     *\n     * Returns:\n     *     object:\n     *     The returned attributes.\n     */\n    parse(rsp) {\n        return _.extend(this._parseDiffContext(rsp),\n                        RB.ReviewablePage.prototype.parse.call(this, rsp));\n    },\n\n    /**\n     * Load a new diff from the server.\n     *\n     * Args:\n     *     options (object):\n     *         The options for the diff to load.\n     *\n     * Option Args:\n     *     filenames (string):\n     *         A comma-separated string of filenames or filename patterns to\n     *         load.\n     *\n     *     page (number):\n     *         The page number to load. Defaults to the first page.\n     *\n     *     revision (number):\n     *         The base revision. If displaying an interdiff, this will be\n     *         the first revision in the range.\n     *\n     *     interdiffRevision (number):\n     *         The optional interdiff revision, representing the ending\n     *         revision in a range.\n     */\n    loadDiffRevision(options={}) {\n        const reviewRequestURL = this.get('reviewRequest').url();\n        const queryData = [];\n\n        if (options.revision) {\n            queryData.push({\n                name: 'revision',\n                value: options.revision,\n            });\n        }\n\n        if (options.interdiffRevision) {\n            queryData.push({\n                name: 'interdiff-revision',\n                value: options.interdiffRevision,\n            });\n        }\n\n        if (options.page && options.page !== 1) {\n            queryData.push({\n                name: 'page',\n                value: options.page,\n            });\n        }\n\n        if (options.filenamePatterns) {\n            queryData.push({\n                name: 'filenames',\n                value: options.filenamePatterns,\n            });\n        }\n\n        const url = Djblets.buildURL({\n            baseURL: `${reviewRequestURL}diff-context/`,\n            queryData: queryData,\n        });\n\n        $.ajax(url)\n            .done(rsp => this.set(this._parseDiffContext(rsp.diff_context)));\n    },\n\n    /**\n     * Parse context for a displayed diff.\n     *\n     * Args:\n     *     rsp (object):\n     *         The payload to parse.\n     *\n     * Returns:\n     *     object:\n     *     The returned attributes.\n     */\n    _parseDiffContext(rsp) {\n        if (rsp.comments_hint) {\n            this.commentsHint.set(this.commentsHint.parse(rsp.comments_hint));\n        }\n\n        if (rsp.files) {\n            this.files.reset(rsp.files, {parse: true});\n        }\n\n        if (rsp.pagination) {\n            this.pagination.set(this.pagination.parse(rsp.pagination));\n        }\n\n        if (rsp.revision) {\n            this.revision.set(this.revision.parse(rsp.revision));\n        }\n\n        return {\n            canDownloadDiff: (rsp.revision &&\n                              rsp.revision.interdiff_revision === null),\n            filenamePatterns: rsp.filename_patterns || null,\n            numDiffs: rsp.num_diffs || 0,\n        };\n    },\n});\n"]}