{"version":3,"sources":["regionCommentBlockModel.es6.js"],"names":[],"mappings":";;AAAA;;;;;;AAMA,GAAG,kBAAH,GAAwB,GAAG,0BAAH,CAA8B,MAA9B,CAAqC;AACzD,cAAU,EAAE,QAAF,CAAW;AACjB,WAAG,IADc;AAEjB,WAAG,IAFc;AAGjB,eAAO,IAHU;AAIjB,gBAAQ;AAJS,KAAX,EAKP,GAAG,oBAAH,CAAwB,SAAxB,CAAkC,QAL3B,CAD+C;;AAQzD,sBAAkB,CAAC,GAAD,EAAM,GAAN,EAAW,OAAX,EAAoB,QAApB,CARuC;;AAUzD;;;;;;;;;;;;;;AAcA,SAxByD,iBAwBnD,MAxBmD,EAwB3C;AACV,eAAO,CAAP,GAAW,SAAS,OAAO,CAAhB,EAAmB,EAAnB,KAA0B,SAArC;AACA,eAAO,CAAP,GAAW,SAAS,OAAO,CAAhB,EAAmB,EAAnB,KAA0B,SAArC;AACA,eAAO,KAAP,GAAe,SAAS,OAAO,KAAhB,EAAuB,EAAvB,KAA8B,SAA7C;AACA,eAAO,MAAP,GAAgB,SAAS,OAAO,MAAhB,EAAwB,EAAxB,KAA+B,SAA/C;;AAEA,eAAO,MAAP;AACH,KA/BwD;;;AAiCzD;;;;;;;;;;AAUA,mBA3CyD,6BA2CvC;AACd,eAAO,EAAE,OAAF,CAAU,KAAK,GAAL,CAAS,oBAAT,CAAV,CAAP;AACH,KA7CwD;;;AA+CzD;;;;;;AAMA,0BArDyD,oCAqDhC;AAAA;;AACrB,YAAM,eAAe,KAAK,GAAL,CAAS,cAAT,CAArB;;AAEA,qBAAa,KAAb,CAAmB;AACf,mBAAO,iBAAM;AACT,oBAAM,YAAY,aAAa,GAAb,CAAiB,WAAjB,CAAlB;;AAEA,0BAAU,CAAV,GAAc,MAAK,GAAL,CAAS,GAAT,CAAd;AACA,0BAAU,CAAV,GAAc,MAAK,GAAL,CAAS,GAAT,CAAd;AACA,0BAAU,KAAV,GAAkB,MAAK,GAAL,CAAS,OAAT,CAAlB;AACA,0BAAU,MAAV,GAAmB,MAAK,GAAL,CAAS,QAAT,CAAnB;;AAEA,6BAAa,IAAb,CAAkB;AACd,2BAAO,CACH,cADG,EAEH,cAFG,EAGH,kBAHG,EAIH,mBAJG,CADO;AAOd,mCAAe;AAPD,iBAAlB;AASH;AAlBc,SAAnB;AAoBH;AA5EwD,CAArC,CAAxB","file":"regionCommentBlockModel.js","sourcesContent":["/**\n * Represents the comments on a region of an image or document.\n *\n * RegionCommentBlock deals with creating and representing comments\n * that exist in a specific region of some content.\n */\nRB.RegionCommentBlock = RB.FileAttachmentCommentBlock.extend({\n    defaults: _.defaults({\n        x: null,\n        y: null,\n        width: null,\n        height: null,\n    }, RB.AbstractCommentBlock.prototype.defaults),\n\n    serializedFields: ['x', 'y', 'width', 'height'],\n\n    /**\n     * Parse the incoming attributes for the comment block.\n     *\n     * The fields are stored server-side as strings, so we need to convert\n     * them back to integers where appropriate.\n     *\n     * Args:\n     *     fields (object):\n     *         The serialized fields for the comment.\n     *\n     * Returns:\n     *     object:\n     *     The parsed data.\n     */\n    parse(fields) {\n        fields.x = parseInt(fields.x, 10) || undefined;\n        fields.y = parseInt(fields.y, 10) || undefined;\n        fields.width = parseInt(fields.width, 10) || undefined;\n        fields.height = parseInt(fields.height, 10) || undefined;\n\n        return fields;\n    },\n\n    /**\n     * Return whether the bounds of this region can be updated.\n     *\n     * If there are any existing published comments on this region, it\n     * cannot be updated.\n     *\n     * Returns:\n     *     boolean:\n     *     A value indicating whether new bounds can be set for this region.\n     */\n    canUpdateBounds() {\n        return _.isEmpty(this.get('serializedComments'));\n    },\n\n    /**\n     * Save the new bounds of the draft comment to the server.\n     *\n     * The new bounds will be stored in the comment's ``x``, ``y``,\n     * ``width``, and ``height`` keys in ``extra_data``.\n     */\n    saveDraftCommentBounds() {\n        const draftComment = this.get('draftComment');\n\n        draftComment.ready({\n            ready: () => {\n                const extraData = draftComment.get('extraData');\n\n                extraData.x = this.get('x');\n                extraData.y = this.get('y');\n                extraData.width = this.get('width');\n                extraData.height = this.get('height');\n\n                draftComment.save({\n                    attrs: [\n                        'extra_data.x',\n                        'extra_data.y',\n                        'extra_data.width',\n                        'extra_data.height',\n                    ],\n                    boundsUpdated: true,\n                });\n            }\n        });\n    },\n});\n"]}