{"version":3,"sources":["textBasedCommentBlockView.es6.js"],"names":[],"mappings":"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","file":"textBasedCommentBlockView.js","sourcesContent":["/**\n * Provides a visual comment indicator to display comments for text-based file\n * attachments.\n *\n * This will show a comment indicator flag (a \"ghost comment flag\") beside the\n * content indicating there are comments there. It will also show the\n * number of comments, along with a tooltip showing comment summaries.\n *\n * This is meant to be used with a TextCommentBlock model.\n */\nRB.TextBasedCommentBlockView = RB.AbstractCommentBlockView.extend({\n    tagName: 'span',\n    className: 'commentflag',\n\n    template: _.template(dedent`\n        <span class=\"commentflag-shadow\"></span>\n        <span class=\"commentflag-inner\">\n         <span class=\"commentflag-count\"></span>\n        </span>\n        <a name=\"<%= anchorName %>\" class=\"commentflag-anchor\"></a>\n    `),\n\n    /**\n     * Initialize the view.\n     */\n    initialize() {\n        this.$beginRow = null;\n        this.$endRow = null;\n        this._$window = $(window);\n\n        this._prevCommentHeight = null;\n        this._prevWindowWidth = null;\n        this._resizeRegistered = false;\n    },\n\n    /**\n     * Render the contents of the comment flag.\n     *\n     * This will display the comment flag and then start listening for\n     * events for updating the comment count or repositioning the comment\n     * (for zoom level changes and wrapping changes).\n     *\n     * Returns:\n     *     RB.TextBasedCommentBlockView:\n     *     This object, for chaining.\n     */\n    renderContent() {\n        this.$el.html(this.template(_.defaults(this.model.attributes, {\n            anchorName: this.buildAnchorName(),\n        })));\n\n        this.$('.commentflag-count')\n            .bindProperty('text', this.model, 'count', {\n                elementToModel: false,\n            });\n    },\n\n    /**\n     * Remove the comment from the page.\n     */\n    remove() {\n        /*\n         * This can't use _.super() because AbstractCommentBlockView doesn't\n         * define a 'remove'.\n         */\n        Backbone.View.prototype.remove.call(this);\n\n        if (this._resizeRegistered) {\n            this._$window.off('resize.' + this.cid);\n        }\n    },\n\n    /**\n     * Set the row span for the comment flag.\n     *\n     * The comment will update to match the row of lines.\n     *\n     * Args:\n     *     $beginRow (jQuery):\n     *         The first row of the comment.\n     *\n     *     $endRow (jQuery):\n     *         The last row of the comment. This may be the same as\n     *         ``$beginRow``.\n     */\n    setRows($beginRow, $endRow) {\n        this.$beginRow = $beginRow;\n        this.$endRow = $endRow;\n\n        /*\n         * We need to set the sizes and show the element after other layout\n         * operations and the DOM have settled.\n         */\n        _.defer(_.bind(function() {\n            this._updateSize();\n            this.$el.show();\n        }, this));\n\n        if ($beginRow && $endRow) {\n            if (!this._resizeRegistered) {\n                this._$window.on('resize.' + this.cid,\n                                 _.bind(this._updateSize, this));\n            }\n        } else {\n            if (this._resizeRegistered) {\n                this._$window.off('resize.' + this.cid);\n            }\n        }\n    },\n\n    /**\n     * Position the comment dialog relative to the comment flag position.\n     *\n     * The dialog will be positioned in the center of the page (horizontally),\n     * just to the bottom of the flag.\n     *\n     * Args:\n     *     commntDlg (RB.CommentDialogView):\n     *          The view for the comment dialog.\n     */\n    positionCommentDlg(commentDlg) {\n        commentDlg.$el.css({\n            left: $(document).scrollLeft() +\n                  (this._$window.width() - commentDlg.$el.width()) / 2,\n            top: this.$endRow.offset().top + this.$endRow.height(),\n        });\n    },\n\n    /**\n     * Position the comment update notifications bubble.\n     *\n     * The bubble will be positioned just to the top-right of the flag.\n     *\n     * Args:\n     *     $bubble (jQuery):\n     *         The selector for the notification bubble.\n     */\n    positionNotifyBubble($bubble) {\n        $bubble.css({\n            left: this.$el.width(),\n            top: 0,\n        });\n    },\n\n    /**\n     * Return the name for the comment flag anchor.\n     *\n     * Returns:\n     *     string:\n     *     The name to use for the anchor element.\n     */\n    buildAnchorName() {\n        return `line${this.model.get('beginLineNum')}`;\n    },\n\n    /**\n     * Update the size of the comment flag.\n     */\n    _updateSize() {\n        const windowWidth = this._$window.width();\n\n        if (this._prevWindowWidth === windowWidth) {\n            return;\n        }\n\n        this._prevWindowWidth = windowWidth;\n\n        /*\n         * On IE and Safari, the marginTop in getExtents may be wrong.\n         * We force a value that ends up working for us.\n         */\n        const commentHeight = this.$endRow.offset().top +\n                              this.$endRow.outerHeight() -\n                              this.$beginRow.offset().top -\n                              (this.$el.getExtents('m', 't') || -4);\n\n        if (commentHeight !== this._prevCommentHeight) {\n            this.$el.height(commentHeight);\n            this._prevCommentHeight = commentHeight;\n        }\n    },\n});\n"]}