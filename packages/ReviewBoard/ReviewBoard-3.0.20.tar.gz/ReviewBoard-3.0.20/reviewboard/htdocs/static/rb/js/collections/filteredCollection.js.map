{"version":3,"sources":["filteredCollection.es6.js"],"names":[],"mappings":";;AAAA;;;;;;;;;AASA,GAAG,kBAAH,GAAwB,GAAG,cAAH,CAAkB,MAAlB,CAAyB;AAC7C;;;;;;;;;;;;;;;;;;;;;;;AAuBA,cAxB6C,sBAwBlC,MAxBkC,EAwB1B,OAxB0B,EAwBjB;AACxB,aAAK,UAAL,GAAkB,QAAQ,UAA1B;AACA,aAAK,OAAL,GAAe,QAAQ,OAAvB;;AAEA,aAAK,QAAL,CAAc,KAAK,UAAnB,EAA+B,KAA/B,EAAsC,KAAK,YAA3C;AACA,aAAK,QAAL,CAAc,KAAK,UAAnB,EAA+B,QAA/B,EAAyC,KAAK,MAA9C;AACA,aAAK,QAAL,CAAc,KAAK,UAAnB,EAA+B,OAA/B,EAAwC,KAAK,QAA7C;;AAEA,aAAK,QAAL;AACH,KAjC4C;;;AAmC7C;;;;;;;;;AASA,cA5C6C,sBA4ClC,OA5CkC,EA4CzB;AAChB,aAAK,OAAL,GAAe,OAAf;;AAEA,aAAK,QAAL;AACH,KAhD4C;;;AAkD7C;;;;;;;;;;AAUA,gBA5D6C,wBA4DhC,IA5DgC,EA4D1B;AACf,YAAI,KAAK,cAAL,CAAoB,IAApB,EAA0B,IAA1B,CAAJ,EAAqC;AACjC,iBAAK,GAAL,CAAS,IAAT;AACH;AACJ,KAhE4C;;;AAkE7C;;;;;;AAMA,YAxE6C,sBAwElC;AACP,YAAI,EAAE,OAAF,CAAU,KAAK,OAAf,CAAJ,EAA6B;AACzB,iBAAK,KAAL,CAAW,KAAK,UAAL,CAAgB,MAA3B;AACH,SAFD,MAEO;AACH,iBAAK,KAAL,CAAW,KAAK,UAAL,CAAgB,MAAhB,CAAuB,KAAK,cAA5B,EAA4C,IAA5C,CAAX;AACH;AACJ,KA9E4C;;;AAgF7C;;;;;;;;;;AAUA,kBA1F6C,0BA0F9B,IA1F8B,EA0FxB,UA1FwB,EA0FZ;AAC7B,YAAI,eAAe,CAAC,KAAK,OAAN,IAAiB,EAAE,OAAF,CAAU,KAAK,OAAf,CAAhC,CAAJ,EAA8D;AAC1D,mBAAO,IAAP;AACH;;AAED,eAAO,EAAE,KAAF,CAAQ,KAAK,OAAb,EAAsB,UAAC,KAAD,EAAQ,GAAR,EAAgB;AACzC,gBAAM,YAAY,KAAK,GAAL,CAAS,GAAT,CAAlB;;AAEA,gBAAI,EAAE,QAAF,CAAW,KAAX,CAAJ,EAAuB;AACnB,uBAAO,UAAU,OAAV,CAAkB,KAAlB,MAA6B,CAApC;AACH,aAFD,MAEO;AACH,uBAAO,cAAc,KAArB;AACH;AACJ,SARM,CAAP;AASH;AAxG4C,CAAzB,CAAxB","file":"filteredCollection.js","sourcesContent":["/**\n * A collection for filtered results from another collection.\n *\n * This allows a consumer to filter the contents of another collection.\n * A filter can be set by passing the 'filters' option at construction\n * time or calling setFilters, both taking a dictionary of attributes and\n * values. In order for an item to be in this collection, each key in the item\n * must start with the value in the filter.\n */\nRB.FilteredCollection = RB.BaseCollection.extend({\n    /**\n     * Initialize the collection.\n     *\n     * This begins listening for events on the main collection, in order\n     * to update and present a filtered view.\n     *\n     * Args:\n     *     models (Array of object):\n     *         Initial models for the collection.\n     *\n     *     options (object):\n     *         Options for the collection.\n     *\n     * Option Args:\n     *     collection (Backbone.Collection):\n     *         Main collection to filter.\n     *\n     *     filters (object):\n     *         A set of filters to apply. This is an object where the keys are\n     *         the name of the attributes and the values are the value to\n     *         filter for. If the values are strings, this will do a\n     *         starts-with comparison.\n     */\n    initialize(models, options) {\n        this.collection = options.collection;\n        this.filters = options.filters;\n\n        this.listenTo(this.collection, 'add', this._onItemAdded);\n        this.listenTo(this.collection, 'remove', this.remove);\n        this.listenTo(this.collection, 'reset', this._rebuild);\n\n        this._rebuild();\n    },\n\n    /**\n     * Set new filters for the collection.\n     *\n     * The items in the collection will be rebuilt to match the filter.\n     *\n     * Args:\n     *     filters (object):\n     *         A list of filters to apply.\n     */\n    setFilters(filters) {\n        this.filters = filters;\n\n        this._rebuild();\n    },\n\n    /**\n     * Handler for when an item in the main collection is added.\n     *\n     * If the item passes the filter, it will be added to this collection\n     * as well.\n     *\n     * Args:\n     *     item (Backbone.Model):\n     *         The newly-added item.\n     */\n    _onItemAdded(item) {\n        if (this._passesFilters(item, true)) {\n            this.add(item);\n        }\n    },\n\n    /**\n     * Rebuild the collection.\n     *\n     * This iterates through all the items in the main collection and\n     * adds any that pass the filter to this collection.\n     */\n    _rebuild() {\n        if (_.isEmpty(this.filters)) {\n            this.reset(this.collection.models);\n        } else {\n            this.reset(this.collection.filter(this._passesFilters, this));\n        }\n    },\n\n    /**\n     * Return whether an item passes the filters.\n     *\n     * Args:\n     *     item (Backbone.Model):\n     *         The item to check.\n     *\n     *     checkEmpty (boolean):\n     *         Whether to allow items if the filters list is empty.\n     */\n    _passesFilters(item, checkEmpty) {\n        if (checkEmpty && (!this.filters || _.isEmpty(this.filters))) {\n            return true;\n        }\n\n        return _.every(this.filters, (value, key) => {\n            const attrValue = item.get(key);\n\n            if (_.isString(value)) {\n                return attrValue.indexOf(value) === 0;\n            } else {\n                return attrValue === value;\n            }\n        });\n    }\n});\n"]}