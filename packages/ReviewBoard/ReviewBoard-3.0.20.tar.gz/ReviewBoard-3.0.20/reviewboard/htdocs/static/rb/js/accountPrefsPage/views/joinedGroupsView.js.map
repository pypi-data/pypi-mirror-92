{"version":3,"sources":["joinedGroupsView.es6.js"],"names":[],"mappings":"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","file":"joinedGroupsView.js","sourcesContent":["(function() {\n\n\n/**\n * An item representing the user's membership with a group.\n *\n * This keeps track of the group's information and the membership state\n * for the user. It also allows changing that membership.\n *\n * This provides two actions: 'Join', and 'Leave'.\n */\nconst GroupMembershipItem = Djblets.Config.ListItem.extend({\n    defaults: _.defaults({\n        localSiteName: null,\n        displayName: null,\n        groupName: null,\n        joined: false,\n        showRemove: false,\n        url: null\n    }, Djblets.Config.ListItem.prototype.defaults),\n\n    /**\n     * Initialize the item.\n     *\n     * The item's name and URL will be taken from the serialized group\n     * information, and a proxy ReviewGroup will be created to handle\n     * membership.\n     */\n    initialize() {\n        Djblets.Config.ListItem.prototype.initialize.apply(this, arguments);\n\n        const name = this.get('name');\n        const localSiteName = this.get('localSiteName');\n\n        this.set({\n            text: name,\n            editURL: this.get('url')\n        });\n\n        this.group = new RB.ReviewGroup({\n            id: this.get('reviewGroupID'),\n            name: name,\n            localSitePrefix: (localSiteName ? 's/' + localSiteName + '/' : '')\n        });\n\n        this.on('change:joined', this._updateActions, this);\n        this._updateActions();\n    },\n\n    /**\n     * Join the group.\n     *\n     * This will add the user to the group, and set the 'joined' property\n     * to true upon completion.\n     */\n    joinGroup() {\n        this.group.addUser(\n            RB.UserSession.instance.get('username'),\n            {\n                success: () => this.set('joined', true)\n            });\n    },\n\n    /**\n     * Leave the group.\n     *\n     * This will remove the user from the group, and set the 'joined' property\n     * to false upon completion.\n     */\n    leaveGroup() {\n        this.group.removeUser(\n            RB.UserSession.instance.get('username'),\n            {\n                success: () => this.set('joined', false)\n            });\n    },\n\n    /**\n     * Update the list of actions.\n     *\n     * This will replace the existing action, if any, with a new action\n     * allowing the user to join or leave the group, depending on their\n     * current membership status.\n     */\n    _updateActions() {\n        if (this.get('joined')) {\n            this.actions = [{\n                id: 'leave',\n                label: gettext('Leave')\n            }];\n        } else {\n            this.actions = [{\n                id: 'join',\n                label: gettext('Join')\n            }];\n        }\n\n        this.trigger('actionsChanged');\n    }\n});\n\n\n/**\n * Provides UI for showing a group membership.\n *\n * This will display the group information and provide buttons for\n * the Join/Leave actions.\n */\nconst GroupMembershipItemView = Djblets.Config.ListItemView.extend({\n    actionHandlers: {\n        'join': '_onJoinClicked',\n        'leave': '_onLeaveClicked'\n    },\n\n    template: _.template([\n        '<span class=\"config-group-name\">',\n        ' <a href=\"<%- editURL %>\"><%- text %></a>',\n        '</span>',\n        '<span class=\"config-group-display-name\"><%- displayName %></span>'\n    ].join('')),\n\n    /**\n     * Handler for when Join is clicked.\n     *\n     * Tells the model to join the group.\n     */\n    _onJoinClicked() {\n        this.model.joinGroup();\n    },\n\n    /**\n     * Handler for when Leave is clicked.\n     *\n     * Tells the model to leave the group.\n     */\n    _onLeaveClicked() {\n        this.model.leaveGroup();\n    }\n});\n\n\n/**\n * Displays a list of group membership items, globally or for a Local Site.\n *\n * If displaying for a Local Site, then the name of the site will be shown\n * before the list.\n *\n * Each group in the list will be shown as an item with Join/Leave buttons.\n *\n * The list of groups are filterable. When filtering, if there are no groups\n * that match the filter, then the whole view will be hidden.\n */\nconst SiteGroupsView = Backbone.View.extend({\n    template: _.template([\n        '<% if (name) { %>',\n        ' <h3><%- name %></h3>',\n        '<% } %>',\n        '<div class=\"groups\" />'\n    ].join('')),\n\n    /**\n     * Initialize the view.\n     *\n     * This will create a list for all groups in this view.\n     *\n     * Args:\n     *     options (object):\n     *         Options for view construction.\n     *\n     * Option Args:\n     *     name (string):\n     *         The name of the local site, if any.\n     */\n    initialize(options) {\n        this.name = options.name;\n        this.collection = new RB.FilteredCollection(null, {\n            collection: new Backbone.Collection(options.groups, {\n                model: GroupMembershipItem\n            })\n        });\n        this.groupList = new Djblets.Config.List({}, {\n            collection: this.collection\n        });\n    },\n\n    /**\n     * Render the view.\n     *\n     * Returns:\n     *     SiteGroupsView:\n     *     This object, for chaining.\n     */\n    render() {\n        this._listView = new Djblets.Config.ListView({\n            ItemView: GroupMembershipItemView,\n            model: this.groupList\n        });\n\n        this.$el.html(this.template({\n            name: this.name\n        }));\n\n        this._listView.render();\n        this._listView.$el\n            .addClass('box-recessed')\n            .appendTo(this.$('.groups'));\n\n        return this;\n    },\n\n    /**\n     * Filter the list of groups by name.\n     *\n     * If no groups are found, then the view will hide itself.\n     *\n     * Args:\n     *     name (string):\n     *         The group name to search for.\n     */\n    filterBy(name) {\n        this.collection.setFilters({\n            'name': name\n        });\n\n        this.$el.setVisible(this.collection.length > 0);\n    }\n});\n\n\n/**\n * Provides UI for managing a user's group memberships.\n *\n * All accessible groups will be shown to the user, sectioned by\n * Local Site. This list is filterable through a search box at the top of\n * the view.\n *\n * Each group entry provides a button for joining or leaving the group,\n * allowing users to manage their memberships.\n */\nRB.JoinedGroupsView = Backbone.View.extend({\n    template: _.template([\n        '<div class=\"search\">',\n        ' <span class=\"rb-icon rb-icon-search-dark\"></span>',\n        ' <input type=\"text\" />',\n        '</div>',\n        '<div class=\"group-lists\" />'\n    ].join('')),\n\n    events: {\n        'submit': '_onSubmit',\n        'keyup .search input': '_onGroupSearchChanged',\n        'change .search input': '_onGroupSearchChanged'\n    },\n\n    /*\n     * Initialize the view.\n     *\n     * Args:\n     *     options (object):\n     *         Options for view construction.\n     *\n     * Option Args:\n     *     groups (Array of object):\n     *         Initial set of groups.\n     */\n    initialize(options) {\n        this.groups = options.groups;\n\n        this._$listsContainer = null;\n        this._$search = null;\n        this._searchText = null;\n        this._groupViews = [];\n    },\n\n    /**\n     * Render the view.\n     *\n     * This will set up the elements and the list of SiteGroupsViews.\n     *\n     * Returns:\n     *     RB.JoinedGroupsView.\n     *     This object, for chaining.\n     */\n    render() {\n        this.$el.html(this.template());\n\n        this._$listsContainer = this.$('.group-lists');\n        this._$search = this.$('.search input');\n\n        for (let [localSiteName, groups] of Object.entries(this.groups)) {\n            if (groups.length > 0) {\n                const view = new SiteGroupsView({\n                    name: localSiteName,\n                    groups: groups\n                });\n\n                view.$el.appendTo(this._$listsContainer);\n                view.render();\n\n                this._groupViews.push(view);\n            }\n        }\n\n        return this;\n    },\n\n    /**\n     * Handler for when the search box changes.\n     *\n     * This will instruct the SiteGroupsViews to filter their contents\n     * by the text entered into the search box.\n     */\n    _onGroupSearchChanged() {\n        const text = this._$search.val();\n\n        if (text !== this._searchText) {\n            this._searchText = text;\n            this._groupViews.forEach(view => view.filterBy(this._searchText));\n        }\n    },\n\n    /**\n     * Prevent form submission.\n     *\n     * This form live updates based on the content of the <input> field and\n     * submitting it will result in a CSRF error.\n     *\n     * Args:\n     *     e (Event):\n     *         The form submission event.\n     */\n    _onSubmit(e) {\n        e.preventDefault();\n    }\n});\n\n\n})();\n"]}