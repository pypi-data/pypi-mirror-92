{"version":3,"sources":["diffReviewableModel.es6.js"],"names":[],"mappings":"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","file":"diffReviewableModel.js","sourcesContent":["/**\n * Provides state and utility functions for loading and reviewing diffs.\n *\n * Model Attributes:\n *     fileDiffID (number):\n *         The ID of the FileDiff.\n *\n *     file (RB.DiffFile):\n *         Information on the file associated with this diff.\n *\n *     interdiffRevision (number):\n *         The revision on the end of an interdiff range.\n *\n *     interFileDiffID (number):\n *         The ID of the FileDiff on the end of an interdiff range.\n *\n *     revision (number):\n *         The revision of the FileDiff.\n */\nRB.DiffReviewable = RB.AbstractReviewable.extend({\n    defaults: _.defaults({\n        file: null,\n        fileDiffID: null,\n        interdiffRevision: null,\n        interFileDiffID: null,\n        revision: null,\n    }, RB.AbstractReviewable.prototype.defaults),\n\n    commentBlockModel: RB.DiffCommentBlock,\n    defaultCommentBlockFields: ['fileDiffID', 'interFileDiffID'],\n\n    /**\n     * Load a serialized comment and add comment blocks for it.\n     *\n     * Args:\n     *     serializedCommentBlock (object):\n     *         The serialized data for the new comment block(s).\n     */\n    loadSerializedCommentBlock(serializedCommentBlock) {\n        this.createCommentBlock({\n            reviewRequest: this.get('reviewRequest'),\n            review: this.get('review'),\n            fileDiffID: this.get('fileDiffID'),\n            interFileDiffID: this.get('interFileDiffID'),\n            beginLineNum: serializedCommentBlock.linenum,\n            endLineNum: serializedCommentBlock.linenum +\n                        serializedCommentBlock.num_lines - 1,\n            serializedComments: serializedCommentBlock.comments || [],\n        });\n    },\n\n    /**\n     * Return the rendered diff for a file.\n     *\n     * The rendered file will be fetched from the server and eventually\n     * returned as the argument to the success callback.\n     *\n     * Args:\n     *     callbacks (object):\n     *         The functions used to fetch the corresponding diff fragments.\n     *\n     *     context (object):\n     *         The context passed to each callback function.\n     *\n     *     options (object, optional):\n     *         The option arguments that control the behavior of this function.\n     *\n     * Option Args:\n     *     showDeleted (boolean):\n     *         Determines whether or not we want to requeue the corresponding\n     *         diff in order to show its deleted content.\n     */\n    getRenderedDiff(callbacks, context, options={}) {\n        let url = this._buildRenderedDiffURL() + '?index=' +\n                  this.get('file').get('index');\n\n        if (options.showDeleted) {\n            url += '&show-deleted=1';\n        }\n\n        url += '&' + TEMPLATE_SERIAL;\n\n        this._fetchFragment({\n            url: url,\n            noActivityIndicator: true,\n        }, callbacks, context);\n    },\n\n    /**\n     * Return a rendered fragment of a diff.\n     *\n     * The fragment will be fetched from the server and eventually returned\n     * as the argument to the success callback.\n     *\n     * Args:\n     *     options (object):\n     *         The option arguments that control the behavior of this function.\n     *\n     *     callbacks (object):\n     *         The functions used to fetch the corresponding diff fragments.\n     *\n     *     context (object):\n     *         The context passed to each callback function.\n     *\n     * Option Args:\n     *     chunkIndex (string):\n     *         The chunk index to load.\n     */\n    getRenderedDiffFragment(options, callbacks, context) {\n        console.assert(options.chunkIndex !== undefined,\n                       'chunkIndex must be provided');\n\n        this._fetchFragment({\n            url: `${this._buildRenderedDiffURL()}chunk/${options.chunkIndex}/`,\n            data: {\n                'index': this.get('file').get('index'),\n                'lines-of-context': options.linesOfContext\n            }\n        }, callbacks, context);\n    },\n\n    /**\n     * Fetch the diff fragment from the server.\n     *\n     * This is used internally by getRenderedDiff and getRenderedDiffFragment\n     * to do all the actual fetching and calling of callbacks.\n     *\n     * Args:\n     *     options (object):\n     *         The option arguments that control the behavior of this function.\n     *\n     *     callbacks (object):\n     *         The functions used to fetch the corresponding diff fragments.\n     *\n     *     context (object):\n     *         The context passed to each callback function.\n     */\n    _fetchFragment(options, callbacks, context) {\n        RB.apiCall(_.defaults(\n            {\n                type: 'GET',\n                dataType: 'html'\n            },\n            options,\n            _.bindCallbacks(callbacks, context)\n        ));\n    },\n\n    /**\n     * Return a URL that forms the base of a diff fragment fetch.\n     *\n     * Returns:\n     *     string:\n     *     The URL for fetching diff fragments.\n     */\n    _buildRenderedDiffURL() {\n        const interdiffRevision = this.get('interdiffRevision');\n        const interFileDiffID = this.get('interFileDiffID');\n        let revisionStr = this.get('revision');\n\n        if (interdiffRevision) {\n            revisionStr += '-' + interdiffRevision;\n        }\n\n        return this.get('reviewRequest').get('reviewURL') + 'diff/' +\n               revisionStr + '/fragment/' + this.get('fileDiffID') +\n               (interFileDiffID ? '-' + interFileDiffID : '') +\n               '/';\n    },\n});\n"]}