{"version":3,"sources":["reviewEntryView.es6.js"],"names":[],"mappings":"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","file":"reviewEntryView.js","sourcesContent":["(function() {\n\n\nconst ParentView = RB.ReviewRequestPage.EntryView;\n\n\n/**\n * Displays a review with discussion on the review request page.\n *\n * Review boxes contain discussion on parts of a review request. This includes\n * comments, screenshots, and file attachments.\n */\nRB.ReviewRequestPage.ReviewEntryView = ParentView.extend({\n    events: _.defaults({\n        'click .revoke-ship-it': '_revokeShipIt',\n    }, ParentView.prototype.events),\n\n    /**\n     * Initialize the view.\n     */\n    initialize() {\n        ParentView.prototype.initialize.call(this);\n\n        this._reviewView = null;\n        this._draftBannerShown = false;\n        this._$boxStatus = null;\n        this._$fixItLabel = null;\n        this._$shipItLabel = null;\n    },\n\n    /**\n     * Save state before applying an update from the server.\n     *\n     * This will save all the loaded diff fragments on the entry so that\n     * they'll be loaded from cache when processing the fragments again for\n     * the entry after reload.\n     */\n    beforeApplyUpdate() {\n        const diffFragmentQueue = RB.PageManager.getPage().diffFragmentQueue;\n        const diffCommentsData = this.model.get('diffCommentsData');\n\n        for (let i = 0; i < diffCommentsData.length; i++) {\n            diffFragmentQueue.saveFragment(diffCommentsData[i][0]);\n        }\n    },\n\n    /**\n     * Render the review box.\n     *\n     * This will prepare a reply draft banner, used if the user is replying\n     * to any comments on the review.\n     *\n     * Each comment section will be set up to allow discussion.\n     *\n     * Returns:\n     *     RB.ReviewRequestPage.ReviewEntryView:\n     *     This object, for chaining.\n     */\n    render() {\n        ParentView.prototype.render.call(this);\n\n        this._reviewView = new RB.ReviewRequestPage.ReviewView({\n            el: this.el,\n            model: this.model.get('review'),\n            entryModel: this.model,\n            $bannerFloatContainer: this._$box,\n            $bannerParent: this.$('.banners'),\n            bannerNoFloatContainerClass: 'collapsed',\n        });\n\n        this._$boxStatus = this.$('.box-status');\n        this._$fixItLabel = this._$boxStatus.find('.fix-it-label');\n        this._$shipItLabel = this._$boxStatus.find('.ship-it-label');\n\n        this.listenTo(this._reviewView, 'hasDraftChanged',\n                      hasDraft => this.$el.toggleClass('has-draft', hasDraft));\n        this.listenTo(this._reviewView, 'openIssuesChanged',\n                      this._updateLabels);\n\n        this._reviewView.render();\n        this._updateLabels();\n\n        return this;\n    },\n\n    /**\n     * Return the ReviewReplyEditorView with the given context type and ID.\n     *\n     * Args:\n     *     contextType (string):\n     *         The type of object being replied to (such as ``body_top`` or\n     *         ``diff_comments``)\n     *\n     *     contextID (number, optional):\n     *         The ID of the comment being replied to, if appropriate.\n     *\n     * Returns:\n     *     RB.ReviewRequestPage.ReviewReplyEditorView:\n     *     The matching editor view.\n     */\n    getReviewReplyEditorView(contextType, contextID) {\n        return this._reviewView.getReviewReplyEditorView(contextType,\n                                                         contextID);\n    },\n\n    /**\n     * Update the \"Ship It\" and \"Fix It\" labels based on the open issue counts.\n     *\n     * If there are open issues, there will be a \"Fix it!\" label.\n     *\n     * If there's a Ship It, there will be a \"Ship it!\" label.\n     *\n     * If there's both a Ship It and open issues, the \"Fix it!\" label will\n     * be shown overlaid on top of the \"Ship it!\" label, and will go away\n     * once the issues are resolved.\n     */\n    _updateLabels() {\n        this._updateLabel(this._$fixItLabel,\n                          this._reviewView.hasOpenIssues(),\n                          'has-issues');\n        this._updateLabel(this._$shipItLabel,\n                          this.model.get('review').get('shipIt'),\n                          'ship-it');\n    },\n\n    /**\n     * Update the visibility of a label.\n     *\n     * The label's position and opacity will be set based on whether the\n     * label is intended to be visible. The label status box's CSS classes will\n     * also be updated based on the visibility and the provided CSS class name.\n     *\n     * Combined with CSS rules, the label will transition the opacity and\n     * the position.\n     *\n     * Args:\n     *     $label (jQuery):\n     *         The label element.\n     *\n     *     visible (boolean):\n     *         Whether the label should be shown as visible.\n     *\n     *     boxClassName (string):\n     *         The CSS class to add to or remove from the status box.\n     */\n    _updateLabel($label, visible, boxClassName) {\n        if (visible) {\n            this._$boxStatus.addClass(boxClassName);\n            $label\n                .show()\n                .css({\n                    opacity: 1,\n                    left: 0,\n                });\n        } else {\n            $label.css({\n                opacity: 0,\n                left: '-100px',\n            });\n            this._$boxStatus.removeClass(boxClassName);\n        }\n    },\n\n    /**\n     * Revoke the Ship It on the review.\n     *\n     * This will first confirm that the user does want to revoke the Ship It.\n     * If they confirm, the Ship It will be removed via an API call.\n     */\n    _revokeShipIt() {\n        this._$boxStatus.addClass('revoking-ship-it');\n\n        const confirmation =\n            RB.ReviewRequestPage.ReviewEntryView.strings.revokeShipItConfirm;\n\n        if (!confirm(confirmation)) {\n            this._clearRevokingShipIt();\n            return;\n        }\n\n        const review = this.model.get('review');\n\n        review.ready({\n            ready: () => {\n                review.set('shipIt', false);\n                review.save({\n                    attrs: ['shipIt', 'includeTextTypes'],\n                    success: () => {\n                        this._updateLabels();\n\n                        /*\n                         * Add a delay before removing this, so that the\n                         * animation won't be impacted. This will encompass\n                         * the length of the animation.\n                         */\n                        setTimeout(() => this._clearRevokingShipIt(), 900);\n                    },\n                    error: (model, xhr) => {\n                        review.set('shipIt', true);\n                        this._clearRevokingShipIt();\n\n                        alert(xhr.responseJSON.err.msg);\n                    },\n                });\n            },\n        });\n    },\n\n    /**\n     * Clear the Revoke Ship It state.\n     *\n     * This will clear the CSS classes related to the revokation.\n     */\n    _clearRevokingShipIt() {\n        this._$boxStatus.removeClass('revoking-ship-it');\n    },\n}, {\n    strings: {\n        revokeShipItConfirm: gettext('Are you sure you want to revoke this Ship It?\\n\\nThis cannot be undone.'),\n    },\n});\n\n\n})();\n"]}