{"version":3,"sources":["resourceListItemModel.es6.js"],"names":[],"mappings":";;AAAA;;;;;;;;;AASA,GAAG,MAAH,CAAU,gBAAV,GAA6B,QAAQ,MAAR,CAAe,QAAf,CAAwB,MAAxB,CAA+B;AACxD,cAAU,EAAE,QAAF,CAAW;AACjB,kBAAU;AADO,KAAX,EAEP,QAAQ,MAAR,CAAe,QAAf,CAAwB,SAAxB,CAAkC,QAF3B,CAD8C;;AAKxD;AACA,eAAW,EAN6C;;AAQxD;;;;;;AAMA,cAdwD,wBAc3C;AAAA;;AACT,YAAI,WAAW,KAAK,GAAL,CAAS,UAAT,CAAf;;AAEA,YAAI,QAAJ,EAAc;AACV,iBAAK,GAAL,CAAS,EAAE,IAAF,CAAO,SAAS,UAAhB,EAA4B,KAAK,SAAjC,CAAT;AACH,SAFD,MAEO;AACH;;;;AAIA,uBAAW,KAAK,cAAL,CAAoB,EAAE,MAAF,CAC3B,EAAE,IAAI,KAAK,GAAL,CAAS,IAAT,CAAN,EAD2B,EAE3B,EAAE,IAAF,CAAO,KAAK,UAAZ,EAAwB,KAAK,SAA7B,CAF2B,CAApB,CAAX;;AAIA,iBAAK,GAAL,CAAS,UAAT,EAAqB,QAArB;AACH;;AAED,aAAK,QAAL,GAAgB,QAAhB;;AAEA,gBAAQ,MAAR,CAAe,QAAf,CAAwB,SAAxB,CAAkC,UAAlC,CAA6C,KAA7C,CAAmD,IAAnD,EAAyD,SAAzD;;AAEA;AACA,aAAK,QAAL,CAAc,QAAd,EAAwB,SAAxB,EACc;AAAA,8CAAI,IAAJ;AAAI,oBAAJ;AAAA;;AAAA,mBAAa,MAAK,OAAL,eAAa,SAAb,SAA2B,IAA3B,EAAb;AAAA,SADd;AAEA,aAAK,QAAL,CAAc,QAAd,EAAwB,MAAxB,EACc;AAAA,+CAAI,IAAJ;AAAI,oBAAJ;AAAA;;AAAA,mBAAa,MAAK,OAAL,eAAa,MAAb,SAAwB,IAAxB,EAAb;AAAA,SADd;;AAGA;AACA,aAAK,QAAL,CAAc,QAAd,EAAwB,SAAxB,EAAmC,KAAK,OAAxC;;AAEA;;;;AAIA,aAAK,SAAL,CAAe,OAAf,CACI;AAAA,mBAAQ,MAAK,QAAL,CAAc,QAAd,cAAkC,IAAlC,EACc,UAAC,KAAD,EAAQ,KAAR;AAAA,uBAAkB,MAAK,GAAL,CAAS,IAAT,EAAe,KAAf,CAAlB;AAAA,aADd,CAAR;AAAA,SADJ;AAGH,KAnDuD;;;AAqDxD;;;AAGA,kBAxDwD,4BAwDzC,WAAa;AACxB,gBAAQ,MAAR,CAAe,KAAf,EAAsB,oCAAtB;AACH,KA1DuD;;;AA4DxD;;;;;;;;;;;;;;AAcA,WA1EwD,qBA0EpC;AAAA,YAAZ,OAAY,uEAAJ,EAAI;;AAChB,aAAK,aAAL,CAAmB,KAAK,QAAxB;AACA,aAAK,OAAL,CAAa,SAAb,EAAwB,IAAxB,EAA8B,KAAK,UAAnC,EAA+C,OAA/C;;AAEA,YAAI,EAAE,UAAF,CAAa,QAAQ,OAArB,CAAJ,EAAmC;AAC/B,oBAAQ,OAAR,CAAgB,IAAhB,EAAsB,IAAtB,EAA4B,OAA5B;AACH;AACJ;AAjFuD,CAA/B,CAA7B","file":"resourceListItemModel.js","sourcesContent":["/**\n * A list item representing a resource in the API.\n *\n * This item will be backed by a resource model, which will be used for\n * all synchronization with the API. It will work as a proxy for requests\n * and events, and synchronize attributes between the resource and the list\n * item. This allows callers to work directly with the list item instead of\n * digging down into the resource.\n */\nRB.Config.ResourceListItem = Djblets.Config.ListItem.extend({\n    defaults: _.defaults({\n        resource: null\n    }, Djblets.Config.ListItem.prototype.defaults),\n\n    /** A list of attributes synced between the ListItem and the Resource. */\n    syncAttrs: [],\n\n    /**\n     * Initialize the list item.\n     *\n     * This will begin listening for events on the resource, updating\n     * the state of the icon based on changes.\n     */\n    initialize() {\n        let resource = this.get('resource');\n\n        if (resource) {\n            this.set(_.pick(resource.attributes, this.syncAttrs));\n        } else {\n            /*\n             * Create a resource using the attributes provided to this list\n             * item.\n             */\n            resource = this.createResource(_.extend(\n                { id: this.get('id') },\n                _.pick(this.attributes, this.syncAttrs)));\n\n            this.set('resource', resource);\n        }\n\n        this.resource = resource;\n\n        Djblets.Config.ListItem.prototype.initialize.apply(this, arguments);\n\n        /* Forward on a couple events we want the caller to see. */\n        this.listenTo(resource, 'request',\n                      (...args) => this.trigger('request', ...args));\n        this.listenTo(resource, 'sync',\n                      (...args) => this.trigger('sync', ...args));\n\n        /* Destroy this item when the resource is destroyed. */\n        this.listenTo(resource, 'destroy', this.destroy);\n\n        /*\n         * Listen for each synced attribute change so we can update this\n         * list item.\n         */\n        this.syncAttrs.forEach(\n            attr => this.listenTo(resource, `change:${attr}`,\n                                  (model, value) => this.set(attr, value)));\n    },\n\n    /**\n     * Create the Resource for this list item, with the given attributes.\n     */\n    createResource(/* attrs */) {\n        console.assert(false, 'createResource must be implemented');\n    },\n\n    /**\n     * Destroy the list item.\n     *\n     * This will just emit the 'destroy' signal. It is typically called when\n     * the resource itself is destroyed.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the destroy operation.\n     *\n     * Option Args:\n     *     success (function):\n     *         Optional success callback.\n     */\n    destroy(options={}) {\n        this.stopListening(this.resource);\n        this.trigger('destroy', this, this.collection, options);\n\n        if (_.isFunction(options.success)) {\n            options.success(this, null, options);\n        }\n    }\n});\n"]}