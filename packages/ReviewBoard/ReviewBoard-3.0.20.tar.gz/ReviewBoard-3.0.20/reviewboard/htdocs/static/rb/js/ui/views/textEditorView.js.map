{"version":3,"sources":["textEditorView.es6.js"],"names":[],"mappings":"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","file":"textEditorView.js","sourcesContent":["(function() {\n\n\n/**\n * Wraps CodeMirror, providing a standard interface for TextEditorView's usage.\n */\nconst CodeMirrorWrapper = Backbone.View.extend({\n    /**\n     * Initialize CodeMirrorWrapper.\n     *\n     * This will set up CodeMirror based on the objects, add it to the parent,\n     * and begin listening to events.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the wrapper.\n     *\n     * Option Args:\n     *     autoSize (boolean):\n     *         Whether the editor should automatically resize itself to fit its\n     *         container.\n     *\n     *     parentEl (Element):\n     *        The parent element for the editor.\n     *\n     *    minHeight (number):\n     *        The minimum vertical size of the editor.\n     */\n    initialize(options) {\n        const codeMirrorOptions = {\n            mode: {\n                name: 'gfm',\n                /*\n                 *The following token type overrides will be prefixed with\n                 * ``cm-`` when used as classes.\n                 */\n                tokenTypeOverrides: {\n                    code: 'rb-markdown-code',\n                    list1: 'rb-markdown-list1',\n                    list2: 'rb-markdown-list2',\n                    list3: 'rb-markdown-list3'\n                }\n            },\n            theme: 'rb default',\n            lineWrapping: true,\n            electricChars: false,\n            extraKeys: {\n                'Home': 'goLineLeft',\n                'End': 'goLineRight',\n                'Enter': 'newlineAndIndentContinueMarkdownList',\n                'Shift-Tab': false,\n                'Tab': false\n            }\n        };\n\n        if (options.autoSize) {\n            codeMirrorOptions.viewportMargin = Infinity;\n        }\n\n        this._codeMirror = new CodeMirror(options.parentEl,\n                                          codeMirrorOptions);\n\n        this.setElement(this._codeMirror.getWrapperElement());\n\n        if (this.options.minHeight !== undefined) {\n            this.$el.css('min-height', this.options.minHeight);\n        }\n\n        this._codeMirror.on('viewportChange',\n                            () => this.$el.triggerHandler('resize'));\n        this._codeMirror.on('change', () => this.trigger('change'));\n    },\n\n    /**\n     * Return whether or not the editor's contents have changed.\n     *\n     * Args:\n     *     initialValue (string):\n     *         The initial value of the editor.\n     *\n     * Returns:\n     *     boolean:\n     *     Whether or not the editor is dirty.\n     */\n    isDirty(initialValue) {\n        /*\n         * We cannot trust codeMirror's isClean() method.\n         *\n         * It is also possible for initialValue to be undefined, so we use an\n         * empty string in that case instead.\n         */\n        return (initialValue || '') !== this.getText();\n    },\n\n    /**\n     * Set the text in the editor.\n     *\n     * Args:\n     *     text (string):\n     *         The new text for the editor.\n     */\n    setText(text) {\n        this._codeMirror.setValue(text);\n    },\n\n    /**\n     * Return the text in the editor.\n     *\n     * Returns:\n     *     string:\n     *     The current contents of the editor.\n     */\n    getText() {\n        return this._codeMirror.getValue();\n    },\n\n    /**\n     * Insert a new line of text into the editor.\n     *\n     * If the editor has focus, insert at the cursor position. Otherwise,\n     * insert at the end.\n     *\n     * Args:\n     *     text (string):\n     *         The text to insert.\n     */\n    insertLine(text) {\n        let position;\n\n        if (this._codeMirror.hasFocus()) {\n            const cursor = this._codeMirror.getCursor();\n            const line = this._codeMirror.getLine(cursor.line);\n            position = CodeMirror.Pos(cursor.line, line.length - 1);\n\n            if (line.length !== 0) {\n                /*\n                 * If the current line has some content, insert the new text on\n                 * the line after it.\n                 */\n                text = '\\n' + text;\n            }\n\n            if (!text.endsWith('\\n')) {\n                text += '\\n';\n            }\n        } else {\n            position = CodeMirror.Pos(this._codeMirror.lastLine());\n            text = '\\n' + text;\n        }\n\n        this._codeMirror.replaceRange(text, position);\n    },\n\n    /**\n     * Return the full client height of the content.\n     *\n     * Returns:\n     *     number:\n     *     The client height of the editor.\n     */\n    getClientHeight() {\n        return this._codeMirror.getScrollInfo().clientHeight;\n    },\n\n    /**\n     * Set the size of the editor.\n     *\n     * Args:\n     *     width (number):\n     *         The new width of the editor.\n     *\n     *     height (number):\n     *         The new height of the editor.\n     */\n    setSize(width, height) {\n        this._codeMirror.setSize(width, height);\n        this._codeMirror.refresh();\n    },\n\n    /**\n     * Focus the editor.\n     */\n    focus() {\n        this._codeMirror.focus();\n    }\n});\n\n\n/**\n * Wraps <textarea>, providing a standard interface for TextEditorView's usage.\n */\nconst TextAreaWrapper = Backbone.View.extend({\n    tagName: 'textarea',\n\n    /*\n     * Initialize TextAreaWrapper.\n     *\n     * This will set up the element based on the provided options, begin\n     * listening for events, and add the element to the parent.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the wrapper.\n     *\n     * Option Args:\n     *     autoSize (boolean):\n     *         Whether the editor should automatically resize itself to fit its\n     *         container.\n     *\n     *     parentEl (Element):\n     *        The parent element for the editor.\n     *\n     *    minHeight (number):\n     *        The minimum vertical size of the editor.\n     */\n    initialize(options) {\n        this.options = options;\n\n        if (options.autoSize) {\n            this.$el.autoSizeTextArea();\n        }\n\n        this.$el\n            .css('width', '100%')\n            .appendTo(options.parentEl)\n            .on('change keydown keyup keypress', () => this.trigger('change'));\n\n        if (options.minHeight !== undefined) {\n            if (options.autoSize) {\n                this.$el.autoSizeTextArea('setMinHeight',\n                                          options.minHeight);\n            } else {\n                this.$el.css('min-height', this.options.minHeight);\n            }\n        }\n    },\n\n    /**\n     * Return whether or not the editor's contents have changed.\n     *\n     * Args:\n     *     initialValue (string):\n     *         The initial value of the editor.\n     *\n     * Returns:\n     *     boolean:\n     *     Whether or not the editor is dirty.\n     */\n    isDirty(initialValue) {\n        const value = this.el.value || '';\n\n        return value.length !== initialValue.length ||\n               value !== initialValue;\n    },\n\n    /**\n     * Set the text in the editor.\n     *\n     * Args:\n     *     text (string):\n     *         The new text for the editor.\n     */\n    setText(text) {\n        this.el.value = text;\n\n        if (this.options.autoSize) {\n            this.$el.autoSizeTextArea('autoSize');\n        }\n    },\n\n    /**\n     * Return the text in the editor.\n     *\n     * Returns:\n     *     string:\n     *     The current contents of the editor.\n     */\n    getText() {\n        return this.el.value;\n    },\n\n    /**\n     * Insert a new line of text into the editor.\n     *\n     * Args:\n     *     text (string):\n     *         The text to insert.\n     */\n    insertLine(text) {\n        if (this.$el.is(':focus')) {\n            const value = this.el.value;\n            const cursor = this.el.selectionEnd;\n            const endOfLine = value.indexOf('\\n', cursor);\n\n            if (endOfLine === -1) {\n                // The cursor is on the last line.\n                this.el.value += '\\n' + text;\n            } else {\n                // The cursor is in the middle of the text.\n                this.el.value = (value.slice(0, endOfLine + 1) + '\\n' + text +\n                                 '\\n' + value.slice(endOfLine));\n            }\n        } else {\n            this.el.value += '\\n' + text;\n        }\n    },\n\n    /**\n     * Return the full client height of the content.\n     *\n     * Returns:\n     *     number:\n     *     The client height of the editor.\n     */\n    getClientHeight() {\n        return this.el.clientHeight;\n    },\n\n    /**\n     * Set the size of the editor.\n     *\n     * Args:\n     *     width (number):\n     *         The new width of the editor.\n     *\n     *     height (number):\n     *         The new height of the editor.\n     */\n    setSize(width, height) {\n        if (width !== null) {\n            this.$el.innerWidth(width);\n        }\n\n        if (height !== null) {\n            if (height === 'auto' && this.options.autoSize) {\n                this.$el.autoSizeTextArea('autoSize', true);\n            } else {\n                this.$el.innerHeight(height);\n            }\n        }\n    },\n\n    /**\n     * Focus the editor.\n     */\n    focus() {\n        this.$el.focus();\n    }\n});\n\n\n/**\n * Provides an editor for editing plain or Markdown text.\n *\n * The editor allows for switching between plain or Markdown text on-the-fly.\n *\n * When editing plain text, this uses a standard textarea widget.\n *\n * When editing Markdown, this makes use of CodeMirror. All Markdown content\n * will be formatted as the user types, making it easier to notice when a\n * stray _ or ` will cause Markdown-specific behavior.\n */\nRB.TextEditorView = Backbone.View.extend({\n    className: 'text-editor',\n\n    defaultOptions: {\n        autoSize: true,\n        minHeight: 70\n    },\n\n    events: {\n        'focus': 'focus',\n        'remove': '_onRemove'\n    },\n\n    /**\n     * Initialize the view with any provided options.\n     *\n     * Args:\n     *     options (object):\n     *         Options for view construction.\n     *\n     * Option Args:\n     *     richText (boolean):\n     *         Whether the editor is using rich text (Markdown).\n     *\n     *     text (string):\n     *         The initial text.\n     *\n     *     bindRichText (object):\n     *         An object with ``model`` and ``attrName`` keys, for when the\n     *         rich text should be bound to an attribute on another model.\n     */\n    initialize(options={}) {\n        this._files = [];\n        this._editor = null;\n        this._prevClientHeight = null;\n\n        this.options = _.defaults(options, this.defaultOptions);\n        this.richText = !!this.options.richText;\n        this._dropTarget = null;\n        this._value = this.options.text || '';\n        this._richTextDirty = false;\n\n        if (this.options.bindRichText) {\n            this.bindRichTextAttr(this.options.bindRichText.model,\n                                  this.options.bindRichText.attrName);\n        }\n\n        /*\n         * If the user is defaulting to rich text, we're going to want to\n         * show the rich text UI by default, even if any bound rich text\n         * flag is set to False.\n         *\n         * This requires cooperation with the template or API results\n         * that end up backing this TextEditor. The expectation is that\n         * those will be providing escaped data for any plain text, if\n         * the user's set to use rich text by default. If this expectation\n         * holds, the user will have a consistent experience for any new\n         * text fields.\n         */\n        if (RB.UserSession.instance.get('defaultUseRichText')) {\n            this.setRichText(true);\n        }\n    },\n\n    /**\n     * Render the text editor.\n     *\n     * This will set the class name on the element, ensuring we have a\n     * standard set of styles, even if this editor is bound to an existing\n     * element.\n     *\n     * Returns:\n     *     RB.TextEditorView:\n     *     This object, for chaining.\n     */\n    render() {\n        this.$el.addClass(this.className);\n\n        return this;\n    },\n\n    /**\n     * Set whether or not rich text (Markdown) is to be used.\n     *\n     * This can dynamically change the text editor to work in plain text\n     * or Markdown.\n     *\n     * Args:\n     *     richText (boolean):\n     *         Whether the editor should use rich text.\n     */\n    setRichText(richText) {\n        if (richText === this.richText) {\n            return;\n        }\n\n        if (this._editor) {\n            this._hideEditor();\n            this.richText = richText;\n            this._showEditor();\n\n            this._richTextDirty = true;\n\n            this.$el.triggerHandler('resize');\n        } else {\n            this.richText = richText;\n        }\n\n        this.trigger('change:richText', richText);\n        this.trigger('change');\n    },\n\n    /**\n     * Bind a richText attribute on a model to the mode on this editor.\n     *\n     * This editor's richText setting will stay in sync with the attribute\n     * on the given mode.\n     *\n     * Args:\n     *     model (Backbone.Model):\n     *         A model to bind to.\n     *\n     *     attrName (string):\n     *         The name of the attribute to bind.\n     */\n    bindRichTextAttr(model, attrName) {\n        this.setRichText(model.get(attrName));\n\n        this.listenTo(model, `change:${attrName}`,\n                      (model, value) => this.setRichText(value));\n    },\n\n    /**\n     * Bind an Enable Markdown checkbox to this text editor.\n     *\n     * The checkbox will initially be set to the value of the editor's\n     * richText property. Toggling the checkbox will then manipulate that\n     * property.\n     *\n     * Args:\n     *     $checkbox (jQuery):\n     *         The checkbox to bind.\n     */\n    bindRichTextCheckbox($checkbox) {\n        $checkbox\n            .prop('checked', this.richText)\n            .on('change', () => this.setRichText($checkbox.prop('checked')));\n\n        this.on('change:richText',\n                () => $checkbox.prop('checked', this.richText));\n    },\n\n    /**\n     * Bind the visibility of an element to the richText property.\n     *\n     * If richText ist true, the element will be shown. Otherwise, it\n     * will be hidden.\n     *\n     * Args:\n     *     $el (jQuery):\n     *         The element to show when richText is true.\n     */\n    bindRichTextVisibility($el) {\n        $el.setVisible(this.richText);\n\n        this.on('change:richText', () => $el.setVisible(this.richText));\n    },\n\n    /**\n     * Return whether or not the editor's contents have changed.\n     *\n     * Args:\n     *     initialValue (string):\n     *         The initial value of the editor.\n     *\n     * Returns:\n     *     boolean:\n     *     Whether or not the editor is dirty.\n     */\n    isDirty(initialValue) {\n        return this._editor !== null &&\n               (this._richTextDirty ||\n                this._editor.isDirty(initialValue || ''));\n    },\n\n    /**\n     * Set the text in the editor.\n     *\n     * Args:\n     *     text (string):\n     *         The new text for the editor.\n     */\n    setText(text) {\n        if (text !== this.getText()) {\n            if (this._editor) {\n                this._editor.setText(text);\n            } else {\n                this._value = text;\n            }\n        }\n    },\n\n    /**\n     * Return the text in the editor.\n     *\n     * Returns:\n     *     string:\n     *     The current contents of the editor.\n     */\n    getText() {\n        return this._editor ? this._editor.getText() : this._value;\n    },\n\n    /**\n     * Insert a new line of text into the editor.\n     *\n     * Args:\n     *     text (string):\n     *         The text to insert.\n     */\n    insertLine(text) {\n        if (this._editor) {\n            this._editor.insertLine(text);\n        } else {\n            if (this._value.endsWith('\\n')) {\n                this._value += text + '\\n';\n            } else {\n                this._value += '\\n' + text;\n            }\n        }\n    },\n\n    /**\n     * Set the size of the editor.\n     *\n     * Args:\n     *     width (number):\n     *         The new width of the editor.\n     *\n     *     height (number):\n     *         The new height of the editor.\n     */\n    setSize(width, height) {\n        if (this._editor) {\n            this._editor.setSize(width, height);\n        }\n    },\n\n    /**\n     * Show the editor.\n     */\n    show() {\n        this.$el.show();\n        this._showEditor();\n    },\n\n    /**\n     * Hide the editor.\n     */\n    hide() {\n        this._hideEditor();\n        this.$el.hide();\n    },\n\n    /**\n     * Focus the editor.\n     */\n    focus() {\n        if (this._editor) {\n            this._editor.focus();\n        }\n    },\n\n    /**\n     * Handler for the remove event.\n     *\n     * Disables the drag-and-drop overlay.\n     */\n    _onRemove() {\n        RB.DnDUploader.instance.unregisterDropTarget(this.$el);\n    },\n\n    /**\n     * Show the actual editor wrapper.\n     *\n     * Any stored text will be transferred to the editor, and the editor\n     * will take control over all operations.\n     */\n    _showEditor() {\n        const EditorCls = this.richText ? CodeMirrorWrapper : TextAreaWrapper;\n\n        if (this.richText) {\n            RB.DnDUploader.instance.registerDropTarget(\n                this.$el, gettext('Drop to add an image'),\n                this._uploadImage.bind(this));\n        }\n\n        this._editor = new EditorCls({\n            parentEl: this.el,\n            autoSize: this.options.autoSize,\n            minHeight: this.options.minHeight\n        });\n\n        this._editor.setText(this._value);\n        this._value = '';\n        this._richTextDirty = false;\n        this._prevClientHeight = null;\n\n        this._editor.$el.on(\n            'resize',\n            _.throttle(() => this.$el.triggerHandler('resize'), 250));\n\n        this.listenTo(this._editor, 'change', _.throttle(() => {\n            /*\n             * Make sure that the editor wasn't closed before the throttled\n             * handler was reached.\n             */\n            if (this._editor === null) {\n                return;\n            }\n\n            const clientHeight = this._editor.getClientHeight();\n\n            if (clientHeight !== this._prevClientHeight) {\n                this._prevClientHeight = clientHeight;\n                this.$el.triggerHandler('resize');\n            }\n\n            this.trigger('change');\n        }, 500));\n\n        this.focus();\n    },\n\n    /**\n     * Hide the actual editor wrapper.\n     *\n     * The last value from the editor will be stored for later retrieval.\n     */\n    _hideEditor() {\n        RB.DnDUploader.instance.unregisterDropTarget(this.$el);\n\n        if (this._editor) {\n            this._value = this._editor.getText();\n            this._richTextDirty = false;\n            this._editor.remove();\n            this._editor = null;\n\n            this.$el.empty();\n        }\n    },\n\n    /**\n     * Return whether or not a given file is an image.\n     *\n     * Args:\n     *     file (File):\n     *         The file to check.\n     *\n     * Returns:\n     *     boolean:\n     *     True if the given file appears to be an image.\n     */\n    _isImage(file) {\n        if (file.type) {\n            return (file.type.split('/')[0] === 'image');\n        }\n\n        const filename = file.name.toLowerCase();\n        return ['.jpeg', '.jpg', '.png', '.gif', '.bmp', '.tiff', '.svg'].some(\n            extension => filename.endsWith(extension));\n    },\n\n    /**\n     * Upload the image and append an image link to the editor's contents.\n     *\n     * Creates an instance of UserFileAttachment and saves it without the file,\n     * then updates the model with the file. This allows the file to be\n     * uploaded asynchronously after we get the link that is generated when the\n     * UserFileAttachment is created.\n     *\n     * Args:\n     *     file (File):\n     *         The image file to upload.\n     */\n    _uploadImage(file) {\n        if (!this._isImage(file)) {\n            return;\n        }\n\n        const userFileAttachment = new RB.UserFileAttachment({\n            caption: file.name,\n        });\n\n        userFileAttachment.save({\n            success: () => {\n                this.insertLine(\n                    `![Image](${userFileAttachment.get('downloadURL')})`);\n\n                userFileAttachment.set('file', file);\n                userFileAttachment.save({\n                    error: (model, response) => alert(response.errorText)\n                });\n            },\n            error: (model, response) => alert(response.errorText)\n        });\n    }\n}, {\n    /**\n     * Return options used to display a TextEditorView in an inlineEditor.\n     *\n     * Args:\n     *     options (object):\n     *         Options to be passed on to the TextEditorView.\n     *\n     * Returns:\n     *     object:\n     *     An options object to be used with an inlineEditor. The resulting\n     *     inlineEditor will make use of the TextEditorView instead of its\n     *     default textarea.\n     */\n    getInlineEditorOptions(options) {\n        let textEditor;\n\n        return {\n            matchHeight: false,\n            multiline: true,\n\n            createMultilineField(editor) {\n                const $editor = editor.element;\n                let origRichText;\n\n                textEditor = new RB.TextEditorView(options);\n                textEditor.render();\n\n                $editor.one('beginEdit', function() {\n                    const $buttons = $editor.inlineEditor('buttons');\n                    const $span = $('<span class=\"enable-markdown\" />');\n\n                    const $checkbox = $('<input/>')\n                        .attr({\n                            id: _.uniqueId('markdown_check'),\n                            type: 'checkbox'\n                        })\n                        .appendTo($span);\n                    textEditor.bindRichTextCheckbox($checkbox);\n\n                    $span.append($('<label/>')\n                        .attr('for', $checkbox[0].id)\n                        .text(gettext('Enable Markdown')));\n\n                    $buttons.append($span);\n\n                    const $markdownRef = $('<a/>')\n                        .addClass('markdown-info')\n                        .attr({\n                            href: MANUAL_URL + 'users/markdown/',\n                            target: '_blank'\n                        })\n                        .text(gettext('Markdown Reference'))\n                        .setVisible(textEditor.richText)\n                        .appendTo($buttons);\n                    textEditor.bindRichTextVisibility($markdownRef);\n                });\n\n                $editor.on('beginEdit', function() {\n                    textEditor._showEditor();\n                    origRichText = textEditor.richText;\n                });\n\n                $editor.on('cancel', function() {\n                    textEditor._hideEditor();\n                    textEditor.setRichText(origRichText);\n                });\n\n                $editor.on('complete', function() {\n                    textEditor._hideEditor();\n                });\n\n                textEditor.$el.data('text-editor', textEditor);\n\n                return textEditor.$el;\n            },\n\n            setFieldValue(editor, value) {\n                textEditor.setText(value || '');\n            },\n\n            getFieldValue() {\n                return textEditor.getText();\n            },\n\n            isFieldDirty(editor, initialValue) {\n                return textEditor.isDirty(initialValue);\n            }\n        };\n    },\n\n    /**\n     * Return the TextEditorView for an inlineEditor element.\n     *\n     * Returns:\n     *     TextEditorView:\n     *     The view corresponding to the editor.\n     */\n    getFromInlineEditor($editor) {\n        return $editor.inlineEditor('field').data('text-editor');\n    }\n});\n\n\n})();\n"]}