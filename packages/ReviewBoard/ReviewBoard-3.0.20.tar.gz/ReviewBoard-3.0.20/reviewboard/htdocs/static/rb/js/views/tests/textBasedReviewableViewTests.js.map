{"version":3,"sources":["textBasedReviewableViewTests.es6.js"],"names":[],"mappings":";;AAAA,MAAM,kCAAN,EAA0C,YAAW;AACjD,QAAM,wXAAN;;AAeA,QAAI,mBAAJ;AACA,QAAI,sBAAJ;AACA,QAAI,cAAJ;AACA,QAAI,aAAJ;;AAEA,eAAW,YAAW;AAClB,qBAAa,EAAE,QAAF,EAAY,QAAZ,CAAqB,aAArB,CAAb;;AAEA,wBAAgB,IAAI,GAAG,aAAP,CAAqB;AACjC,uBAAW;AADsB,SAArB,CAAhB;;AAIA,gBAAQ,IAAI,GAAG,mBAAP,CAA2B;AAC/B,6BAAiB,IADc;AAE/B,sBAAU,UAFqB;AAG/B,8BAAkB,GAHa;AAI/B,2BAAe;AAJgB,SAA3B,CAAR;;AAOA,eAAO,IAAI,GAAG,uBAAP,CAA+B;AAClC,mBAAO,KAD2B;AAElC,gBAAI;AAF8B,SAA/B,CAAP;;AAKA;;;;AAIA,cAAM,OAAO,OAAb,EAAsB,WAAtB;AACA,cAAM,OAAO,OAAb,EAAsB,cAAtB;;AAEA;;;;AAIA,cAAM,KAAK,MAAX,EAAmB,SAAnB,EAA8B,GAA9B,CAAkC,WAAlC;AACA,cAAM,KAAK,MAAX,EAAmB,UAAnB,EAA+B,GAA/B,CAAmC,QAAnC,CAA4C,UAAC,GAAD,EAAM,OAAN,EAAkB;AAC1D,gBAAI,CAAC,OAAD,IAAY,QAAQ,OAAR,KAAoB,KAApC,EAA2C;AACvC,yBAAS,OAAT,CAAiB,OAAjB,CAAyB,GAAzB;AACH;AACJ,SAJD;;AAMA,aAAK,MAAL;AACH,KAtCD;;AAwCA,cAAU,YAAW;AACjB,aAAK,MAAL;AACA,mBAAW,MAAX;;AAEA,iBAAS,OAAT,CAAiB,IAAjB;AACH,KALD;;AAOA,OAAG,4BAAH,EAAiC,YAAW;AACxC,aAAK,MAAL,CAAY,QAAZ,CAAqB,WAArB;AACA,eAAO,KAAK,MAAL,CAAY,OAAnB,EACK,oBADL,CAC0B,gBAD1B,EAC4C,UAD5C,EACwD,IADxD;AAEA,eAAO,WAAW,IAAX,CAAgB,SAAhB,EAA2B,IAA3B,CAAgC,gBAAhC,CAAP,EACK,IADL,CACU,UADV;AAEA,eAAO,MAAM,GAAN,CAAU,UAAV,CAAP,EAA8B,IAA9B,CAAmC,UAAnC;;AAEA,aAAK,MAAL,CAAY,QAAZ,CAAqB,SAArB;AACA,eAAO,KAAK,MAAL,CAAY,OAAnB,EACK,oBADL,CAC0B,gBAD1B,EAC4C,QAD5C,EACsD,IADtD;AAEA,eAAO,WAAW,IAAX,CAAgB,SAAhB,EAA2B,IAA3B,CAAgC,gBAAhC,CAAP,EACK,IADL,CACU,QADV;AAEA,eAAO,MAAM,GAAN,CAAU,UAAV,CAAP,EAA8B,IAA9B,CAAmC,QAAnC;;AAEA,aAAK,MAAL,CAAY,QAAZ,CAAqB,WAArB;AACA,eAAO,KAAK,MAAL,CAAY,OAAnB,EACK,oBADL,CAC0B,gBAD1B,EAC4C,UAD5C,EACwD,IADxD;AAEA,eAAO,WAAW,IAAX,CAAgB,SAAhB,EAA2B,IAA3B,CAAgC,gBAAhC,CAAP,EACK,IADL,CACU,UADV;AAEA,eAAO,MAAM,GAAN,CAAU,UAAV,CAAP,EAA8B,IAA9B,CAAmC,UAAnC;AACH,KArBD;AAsBH,CA1FD","file":"textBasedReviewableViewTests.js","sourcesContent":["suite('rb/views/TextBasedReviewableView', function() {\n    const template = dedent`\n      <div id=\"container\">\n       <div class=\"text-review-ui-views\">\n        <ul>\n         <li class=\"active\" data-view-mode=\"rendered\">\n          <a href=\"#rendered\">Rendered</a>\n         </li>\n         <li data-view-mode=\"source\"><a href=\"#source\">Source</a></li>\n        </ul>\n       </div>\n       <table class=\"text-review-ui-rendered-table\"></table>\n       <table class=\"text-review-ui-text-table\"></table>\n      </div>\n    `;\n\n    let $container;\n    let reviewRequest;\n    let model;\n    let view;\n\n    beforeEach(function() {\n        $container = $(template).appendTo($testsScratch);\n\n        reviewRequest = new RB.ReviewRequest({\n            reviewURL: '/r/123/',\n        });\n\n        model = new RB.TextBasedReviewable({\n            hasRenderedView: true,\n            viewMode: 'rendered',\n            fileAttachmentID: 456,\n            reviewRequest: reviewRequest,\n        });\n\n        view = new RB.TextBasedReviewableView({\n            model: model,\n            el: $container,\n        });\n\n        /*\n         * Disable the router so that the page doesn't change the URL on the\n         * page while tests run.\n         */\n        spyOn(window.history, 'pushState');\n        spyOn(window.history, 'replaceState');\n\n        /*\n         * Bypass all the actual history logic and get to the actual\n         * router handler.\n         */\n        spyOn(view.router, 'trigger').and.callThrough();\n        spyOn(view.router, 'navigate').and.callFake((url, options) => {\n            if (!options || options.trigger !== false) {\n                Backbone.history.loadUrl(url);\n            }\n        });\n\n        view.render();\n    });\n\n    afterEach(function() {\n        view.remove();\n        $container.remove();\n\n        Backbone.history.stop();\n    });\n\n    it('Router switches view modes', function() {\n        view.router.navigate('#rendered');\n        expect(view.router.trigger)\n            .toHaveBeenCalledWith('route:viewMode', 'rendered', null);\n        expect($container.find('.active').attr('data-view-mode'))\n            .toBe('rendered');\n        expect(model.get('viewMode')).toBe('rendered');\n\n        view.router.navigate('#source');\n        expect(view.router.trigger)\n            .toHaveBeenCalledWith('route:viewMode', 'source', null);\n        expect($container.find('.active').attr('data-view-mode'))\n            .toBe('source');\n        expect(model.get('viewMode')).toBe('source');\n\n        view.router.navigate('#rendered');\n        expect(view.router.trigger)\n            .toHaveBeenCalledWith('route:viewMode', 'rendered', null);\n        expect($container.find('.active').attr('data-view-mode'))\n            .toBe('rendered');\n        expect(model.get('viewMode')).toBe('rendered');\n    });\n});\n"]}