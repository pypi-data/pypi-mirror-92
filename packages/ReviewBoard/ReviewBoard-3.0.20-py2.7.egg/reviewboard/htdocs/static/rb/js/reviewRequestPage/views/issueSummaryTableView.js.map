{"version":3,"sources":["issueSummaryTableView.es6.js"],"names":[],"mappings":"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","file":"issueSummaryTableView.js","sourcesContent":["/**\n * View that manages a display of issues filed on a review request.\n *\n * This displays all the issues filed against a review request, and allows\n * sorting by state and reviewer. As issues are updated on reviews, the\n * table is updated to reflect the new states.\n */\nRB.ReviewRequestPage.IssueSummaryTableView = Backbone.View.extend({\n    events: {\n        'change #issue-reviewer-filter': '_onReviewerChanged',\n        'click .issue-summary-tab': '_onTabChanged',\n        'click thead th': '_onHeaderClicked',\n        'click .issue': '_onIssueClicked',\n    },\n\n    /** Maps a status filter state to its corresponding selector. */\n    stateToSelectorMap: {\n        open: '.open',\n        dropped: '.dropped',\n        resolved: '.resolved',\n        verifying: '.verifying-resolved, .verifying-dropped',\n        all: '',\n    },\n\n    /** Maps an issue status type to its corresponding icon. */\n    statusIconsMap: {\n        open: 'rb-icon-issue-open',\n        dropped: 'rb-icon-issue-dropped',\n        resolved: 'rb-icon-issue-resolved',\n        verifying: 'rb-icon-issue-verifying',\n    },\n\n    COLUMN_DESCRIPTION: 1,\n    COLUMN_REVIEWER: 2,\n    COLUMN_LAST_UPDATED: 3,\n\n    _noIssuesTemplate: _.template(dedent`\n        <tr class=\"no-issues\">\n         <td colspan=\"5\"><em><%- text %></em></td>\n        </tr>\n    `),\n\n    /**\n     * Initialize the issue summary table.\n     */\n    initialize() {\n        this.statusFilterState = null;\n        this.reviewerFilterState = null;\n\n        // Maps a reviewer name to issues issued by the reviewer.\n        this.reviewerToSelectorMap = null;\n\n        this._lastWindowWidth = null;\n        this._$window = $(window);\n        this._$currentTab = null;\n\n        _.bindAll(this, '_onWindowResize');\n    },\n\n    /**\n     * Render the issue summary table.\n     *\n     * Returns:\n     *     RB.ReviewRequestPage.IssueSummaryTableView:\n     *     This instance, for chaining.\n     */\n    render() {\n        this._$table = this.$el.find('table');\n        this._$thead = this._$table.find('thead');\n        this._$tbody = this._$table.find('tbody');\n        this._$filters = this.$('.issue-summary-filters');\n        this._$reviewerFilter = this._$filters.find('#issue-reviewer-filter');\n        this._$reviewerHeader = this._$thead.find('.from-header');\n\n        let hasExistingState = false;\n\n        if (this.statusFilterState === null) {\n            this._$currentTab = this.$('.issue-summary-tab.active');\n            console.assert(this._$currentTab.length === 1);\n\n            this.statusFilterState = this._$currentTab.data('issue-state');\n        } else {\n            this.$('.issue-summary-tab.active').removeClass('active');\n            this._$currentTab =\n                this.$('.issue-summary-tab' +\n                       `[data-issue-state=${this.statusFilterState}]`)\n                    .addClass('active');\n            hasExistingState = true;\n        }\n\n        this._buildReviewerFilterMap();\n\n        if (this.reviewerFilterState === null) {\n            this.reviewerFilterState = this._$reviewerFilter.val();\n        } else {\n            this._$reviewerFilter.val(this.reviewerFilterState);\n            hasExistingState = true;\n        }\n\n        if (hasExistingState) {\n            this._resetFilters();\n            this._applyFilters();\n        } else {\n            this._checkIssues();\n        }\n\n        this.stopListening(this.model, 'issueStatusUpdated');\n        this.listenTo(this.model, 'issueStatusUpdated',\n                      this._onIssueStatusChanged);\n\n        this._$window.off('resize', this._onWindowResize);\n        this._$window.on('resize', this._onWindowResize);\n        this._onWindowResize();\n\n        this.$('.user').user_infobox();\n        this.$('time.timesince').timesince();\n        Djblets.enableRetinaImages(this.$el);\n\n        return this;\n    },\n\n    /**\n     * Reset the filters on the list.\n     *\n     * This will unhide all rows, preparing the list for a new filter.\n     */\n    _resetFilters() {\n        this._$tbody.find('.issue.hidden').removeClass('hidden');\n    },\n\n    /**\n     * Apply the filters on the list.\n     *\n     * This will show or hide rows, based on the current state and reviewer\n     * filters.\n     */\n    _applyFilters() {\n        const sel = this.stateToSelectorMap[this.statusFilterState] +\n                    this.reviewerToSelectorMap[this.reviewerFilterState];\n\n        if (sel) {\n            this._$tbody.find('.issue').not(sel).addClass('hidden');\n        }\n\n        this._checkIssues();\n        this._updateReviewersPos();\n    },\n\n    /**\n     * Update the position of the reviewers filter.\n     *\n     * The filter will be aligned with the header column in the table.\n     */\n    _updateReviewersPos() {\n        if (this._$reviewerHeader.is(':visible')) {\n            this._$filters.css({\n                left: this._$reviewerHeader.offset().left -\n                      this._$table.offset().left +\n                      this._$reviewerHeader.getExtents('p', 'l'),\n            });\n        } else {\n            this._$filters.css('left', '');\n        }\n    },\n\n    /**\n     * Update the UI to reflect whether the issue list is empty.\n     *\n     * If the issue list is empty, this will add a row saying there are no\n     * issues, using wording that reflects the current filter state.\n     */\n    _checkIssues() {\n        this._$tbody.find('tr.no-issues').remove();\n        this._$thead.show();\n\n        if (this._$tbody.find('tr.issue').not('.hidden').length === 0) {\n            let text;\n\n            if (this.reviewerFilterState !== 'all') {\n                if (this.statusFilterState === 'open') {\n                    text = interpolate(\n                        gettext('There are no open issues from %s'),\n                        [this.reviewerFilterState]);\n                } else if (this.statusFilterState === 'verifying') {\n                    text = interpolate(\n                        gettext('There are no issues waiting for verification from %s'),\n                        [this.reviewerFilterState]);\n                } else if (this.statusFilterState === 'dropped') {\n                    text = interpolate(\n                        gettext('There are no dropped issues from %s'),\n                        [this.reviewerFilterState]);\n                } else if (this.statusFilterState === 'resolved') {\n                    text = interpolate(\n                        gettext('There are no resolved issues from %s'),\n                        [this.reviewerFilterState]);\n                }\n            } else {\n                if (this.statusFilterState === 'open') {\n                    text = gettext('There are no open issues');\n                } else if (this.statusFilterState === 'verifying') {\n                    text = gettext('There are no issues waiting for verification');\n                } else if (this.statusFilterState === 'dropped') {\n                    text = gettext('There are no dropped issues');\n                } else if (this.statusFilterState === 'resolved') {\n                    text = gettext('There are no resolved issues');\n                }\n            }\n\n            this._$thead.hide();\n            this._$tbody.append(this._noIssuesTemplate({\n                text: text,\n            }));\n        }\n    },\n\n    /**\n     * Sort the issues by the selected column in ascending order.\n     *\n     * The Last Updated column will be sorted based on its timestamp. All\n     * other columns will be sorted based on their normalized text contents.\n     *\n     * Args:\n     *     colIndex (number):\n     *         The 0-based index of the column clicked.\n     *\n     *     ascending (boolean):\n     *         Whether to sort by ascending order.\n     */\n    _sortByCol(colIndex, ascending) {\n        this._$tbody.html($('.issue').sort((issueA, issueB) => {\n            const $issueA = $(issueA);\n            const $issueB = $(issueB);\n            const $columnA = $issueA.children(`td:nth-child(${colIndex})`);\n            const $columnB = $issueB.children(`td:nth-child(${colIndex})`);\n            let value1;\n            let value2;\n\n            if (colIndex === this.COLUMN_LAST_UPDATED) {\n                /*\n                 * Note that we're reversing the values here. We want newer\n                 * timestamps (which is \"greater\", comparison-wise).\n                 */\n                value1 = $columnB.children('time').attr('datetime');\n                value2 = $columnA.children('time').attr('datetime');\n            } else {\n                value1 = $columnA.text().strip().toLowerCase();\n                value2 = $columnB.text().strip().toLowerCase();\n            }\n\n            /*\n             * If the two values are the same, we'll want to order by\n             * issue ID instead, helping to keep ordering consistent within\n             * an author or published timestamp.\n             *\n             * They should always be in ascending order, relative to the\n             * column being sorted.\n             */\n            if (value1 === value2) {\n                const issueID1 = $issueA.data('issue-id');\n                const issueID2 = $issueB.data('issue-id');\n\n                if (ascending) {\n                    value1 = issueID1;\n                    value2 = issueID2;\n                } else {\n                    value1 = issueID2;\n                    value2 = issueID1;\n                }\n            }\n\n            /*\n             * Compute an initial value intended for ascending order. Then\n             * we'll negate it if sorting in descending order.\n             */\n            let result;\n\n            if (value1 < value2) {\n                result = -1;\n            } else if (value1 > value2) {\n                result = 1;\n            } else {\n                result = 0;\n            }\n\n            if (!ascending) {\n                result = -result;\n            }\n\n            return result;\n        }));\n    },\n\n    /**\n     * Build the entries for the reviewers filter.\n     */\n    _buildReviewerFilterMap() {\n        this._$reviewerFilter.children().not('[value=\"all\"]').remove();\n\n        this.reviewerToSelectorMap = {\n            all: '',\n        };\n\n        _.each(this._$tbody.find('.issue'), issueEl => {\n            const reviewer = $(issueEl).data('reviewer');\n\n            if (!_.has(this.reviewerToSelectorMap, reviewer)) {\n                this.reviewerToSelectorMap[reviewer] =\n                    `[data-reviewer=\"${reviewer}\"]`;\n                this._$reviewerFilter.append(\n                    $('<option>').text(reviewer).val(reviewer));\n            }\n        });\n    },\n\n    /**\n     * Handler for when the issue status of a comment changes.\n     *\n     * Updates the display of the table to reflect the state of that issue.\n     *\n     * Args:\n     *     comment (RB.BaseComment):\n     *         The comment whose issue has changed.\n     *\n     *     oldStatus (string):\n     *         The old status.\n     *\n     *     timestamp (Date):\n     *         The new timestamp for the comment.\n     */\n    _onIssueStatusChanged(comment, oldStatus, timestamp) {\n        const $entry = $(`#summary-table-entry-${comment.id}`);\n        const newStatus = comment.get('issueStatus');\n\n        RB.scrollManager.markForUpdate(this.$el);\n\n        /* Update the icon for this entry to reflect the new status. */\n        $entry\n            .removeClass(oldStatus)\n            .addClass(newStatus)\n            .find('.issue-icon')\n                .removeClass(this.statusIconsMap[oldStatus])\n                .addClass(this.statusIconsMap[newStatus]);\n\n        /* Show or hide the entry according to the current filter state. */\n        if (this.statusFilterState !== newStatus &&\n            this.statusFilterState !== 'all') {\n            $entry.addClass('hidden');\n        } else {\n            $entry.removeClass('hidden');\n        }\n\n        /* Update the displayed counters for this issue type. */\n        const $oldCounter = $(`#${oldStatus}-counter`);\n        const $newCounter = $(`#${newStatus}-counter`);\n\n        $oldCounter.text(parseInt($oldCounter.text(), 10) - 1);\n        $newCounter.text(parseInt($newCounter.text(), 10) + 1);\n\n        /* Update the timestamp for this issue's entry. */\n        $entry.find('.last-updated time')\n            .attr('datetime', new Date(timestamp).toISOString())\n            .text(timestamp)\n            .timesince();\n\n        /*\n         * If we're no longer showing any issues for this filter, update\n         * the table accordingly.\n         */\n        this._checkIssues();\n\n        /*\n         * The updates may have impacted the reviewers filter, so update its\n         * position.\n         */\n        this._updateReviewersPos();\n\n        /*\n         * Update the scroll position to counteract the addition/deletion\n         * of the entry in the issue summary table, so the page doesn't\n         * appear to jump.\n         */\n        RB.scrollManager.markUpdated(this.$el);\n    },\n\n    /**\n     * Handler for when a header on the table is clicked.\n     *\n     * This will sort the table by the header.\n     *\n     * Args:\n     *     evt (Event):\n     *         The click event.\n     */\n    _onHeaderClicked(evt) {\n        evt.stopPropagation();\n\n        if (this._$tbody.find('tr.issue').not('.hidden').length !== 0) {\n            this._sortByCol(\n                $(evt.target).parent().children().index(evt.target) + 1,\n                !evt.shiftKey);\n        }\n    },\n\n    /**\n     * Handler for when an issue is clicked.\n     *\n     * This will notify any listeners to the ``issueClicked`` event that the\n     * issue has been clicked, providing the comment type and the issue ID.\n     *\n     * It will then navigate to the URL for that particular comment.\n     *\n     * Args:\n     *     evt (Event):\n     *         The click event.\n     */\n    _onIssueClicked(evt) {\n        if (evt.target.tagName === 'A') {\n            /* Allow the link to go through. */\n            return;\n        }\n\n        evt.stopPropagation();\n\n        /*\n         * Extract the comment's attributes from the issue element and trigger\n         * the issueClicked event so the page can navigate the user to the\n         * relevant issue comment.\n         */\n        const $el = $(evt.currentTarget);\n\n        this.trigger('issueClicked', {\n            commentType: $el.data('comment-type'),\n            commentID: $el.data('issue-id'),\n            commentURL: $el.data('comment-href'),\n        });\n    },\n\n    /**\n     * Handler for when the tab has changed.\n     *\n     * This will switch the view to show the issues that match the tab's\n     * issue state and the current reviewer filter.\n     *\n     * Args:\n     *     evt (Event):\n     *         The click event.\n     */\n    _onTabChanged(evt) {\n        const $tab = $(evt.currentTarget);\n\n        this._$currentTab.removeClass('active');\n\n        this._resetFilters();\n        this.statusFilterState = $tab.data('issue-state');\n        this._applyFilters();\n\n        $tab.addClass('active');\n        this._$currentTab = $tab;\n    },\n\n    /**\n     * Handler for when the reviewer filter changes.\n     *\n     * This will switch the view to show issues that match the reviewer\n     * and the current issue filter state.\n     */\n    _onReviewerChanged() {\n        this._resetFilters();\n        this.reviewerFilterState = this._$reviewerFilter.val();\n        this._applyFilters();\n    },\n\n    /**\n     * Handler for when the window resizes.\n     *\n     * Updates the calculated position of the reviewers filter.\n     */\n    _onWindowResize() {\n        const winWidth = this._$window.width();\n\n        if (winWidth !== this._lastWindowWidth) {\n            this._updateReviewersPos();\n        }\n\n        this._lastWindowWidth = winWidth;\n    }\n});\n"]}