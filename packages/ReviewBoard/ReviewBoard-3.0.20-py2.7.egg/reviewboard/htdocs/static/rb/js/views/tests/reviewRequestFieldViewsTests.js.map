{"version":3,"sources":["reviewRequestFieldViewsTests.es6.js"],"names":[],"mappings":"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","file":"reviewRequestFieldViewsTests.js","sourcesContent":["suite('rb/views/reviewRequestFieldViews', function() {\n    let reviewRequest;\n    let draft;\n    let extraData;\n    let rawTextFields;\n    let editor;\n    let editorView;\n    let field;\n\n    beforeEach(function() {\n        reviewRequest = new RB.ReviewRequest({\n            id: 1,\n        });\n\n        draft = reviewRequest.draft;\n        extraData = draft.get('extraData');\n\n        rawTextFields = {\n            extra_data: {},\n        };\n        draft.set('rawTextFields', rawTextFields);\n\n        editor = new RB.ReviewRequestEditor({\n            reviewRequest: reviewRequest,\n        });\n\n        editorView = new RB.ReviewRequestEditorView({\n            model: editor,\n        });\n\n        spyOn(draft, 'save');\n        spyOn(draft, 'ready').and.callFake(function(options, context) {\n            options.ready.call(context);\n        });\n    });\n\n    describe('BaseFieldView', function() {\n        beforeEach(function() {\n            field = new RB.ReviewRequestFields.BaseFieldView({\n                model: editor,\n                fieldID: 'my_field',\n            });\n        });\n\n        describe('Initialization', function() {\n            it('Default behavior', function() {\n                expect(field.$el.data('field-id')).toBe('my_field');\n                expect(field.jsonFieldName).toBe('my_field');\n            });\n\n            it('With custom jsonFieldName', function() {\n                const field = new RB.ReviewRequestFields.BaseFieldView({\n                    model: editor,\n                    fieldID: 'my_field',\n                    jsonFieldName: 'my_custom_name',\n                });\n\n                expect(field.$el.data('field-id')).toBe('my_field');\n                expect(field.jsonFieldName).toBe('my_custom_name');\n            });\n        });\n\n        describe('Properties', function() {\n            it('fieldName', function() {\n                expect(field.fieldName()).toBe('myField');\n            });\n        });\n\n        describe('Methods', function() {\n            describe('_loadValue', function() {\n                it('Built-in field', function() {\n                    field.useExtraData = false;\n                    draft.set('myField', 'this is a test');\n\n                    expect(field._loadValue()).toBe('this is a test');\n                });\n\n                it('Custom field', function() {\n                    extraData.my_field = 'this is a test';\n\n                    expect(field._loadValue()).toBe('this is a test');\n                });\n\n                it('Custom field and custom jsonFieldName', function() {\n                    const field = new RB.ReviewRequestFields.BaseFieldView({\n                        model: editor,\n                        fieldID: 'my_field',\n                        jsonFieldName: 'foo',\n                    });\n\n                    extraData.foo = 'this is a test';\n\n                    expect(field._loadValue()).toBe('this is a test');\n                });\n            });\n\n            describe('_saveValue', function() {\n                it('Built-in field', function() {\n                    field.useExtraData = false;\n                    field._saveValue('test');\n\n                    expect(draft.save.calls.argsFor(0)[0].data).toEqual({\n                        my_field: 'test',\n                    });\n                });\n\n                it('Custom field', function() {\n                    field._saveValue('this is a test');\n\n                    expect(draft.save.calls.argsFor(0)[0].data).toEqual({\n                        'extra_data.my_field': 'this is a test',\n                    });\n                });\n\n                it('Custom field and custom jsonFieldName', function() {\n                    const field = new RB.ReviewRequestFields.BaseFieldView({\n                        model: editor,\n                        fieldID: 'my_field',\n                        jsonFieldName: 'foo',\n                    });\n\n                    field._saveValue('this is a test');\n\n                    expect(draft.save.calls.argsFor(0)[0].data).toEqual({\n                        'extra_data.foo': 'this is a test',\n                    });\n                });\n            });\n        });\n    });\n\n    describe('TextFieldView', function() {\n        beforeEach(function() {\n            field = new RB.ReviewRequestFields.TextFieldView({\n                model: editor,\n                fieldID: 'my_field',\n            });\n            editorView.addFieldView(field);\n        });\n\n        describe('Properties', function() {\n            describe('jsonTextTypeFieldName', function() {\n                it('With fieldID != \"text\"', function() {\n                    expect(field.jsonTextTypeFieldName)\n                        .toBe('my_field_text_type');\n                });\n\n                it('With fieldID = \"text\"', function() {\n                    field = new RB.ReviewRequestFields.TextFieldView({\n                        model: editor,\n                        fieldID: 'text',\n                    });\n\n                    expect(field.jsonTextTypeFieldName).toBe('text_type');\n                });\n            });\n\n            describe('richTextAttr', function() {\n                it('With allowRichText=true', function() {\n                    field.allowRichText = true;\n\n                    expect(field.richTextAttr()).toBe('myFieldRichText');\n                });\n\n                it('With allowRichText=false', function() {\n                    field.allowRichText = false;\n\n                    expect(field.richTextAttr()).toBe(null);\n                });\n            });\n        });\n\n        describe('Methods', function() {\n            describe('render', function() {\n                beforeEach(function() {\n                    field.$el.addClass('editable');\n                    rawTextFields.extra_data = {\n                        my_field: '**Hello world**',\n                        my_field_text_type: 'markdown',\n                    };\n                });\n\n                describe('With allowRichText=true', function() {\n                    beforeEach(function() {\n                        field.allowRichText = true;\n                    });\n\n                    it('With richText=true', function() {\n                        rawTextFields.extra_data.my_field_text_type =\n                            'markdown';\n\n                        field.render();\n\n                        expect(field.inlineEditorView.textEditor.richText)\n                            .toBe(true);\n                        expect(field.inlineEditorView.options.rawValue)\n                            .toBe('**Hello world**');\n                    });\n\n                    it('With richText=false', function() {\n                        rawTextFields.extra_data.my_field_text_type = 'plain';\n\n                        field.render();\n\n                        expect(field.inlineEditorView.textEditor.richText)\n                            .toBe(false);\n                        expect(field.inlineEditorView.options.rawValue)\n                            .toBe('**Hello world**');\n                    });\n                });\n            });\n\n            describe('_formatField', function() {\n                it('With built-in field', function() {\n                    field.useExtraData = false;\n\n                    draft.set('myField', 'Hello world');\n\n                    field._formatField();\n                    expect(field.$el.text()).toBe('Hello world');\n                });\n\n                it('With custom field', function() {\n                    editorView.addFieldView(field);\n\n                    extraData.my_field = 'Hello world';\n\n                    field._formatField();\n                    expect(field.$el.text()).toBe('Hello world');\n                });\n\n                it('With formatValue as function', function() {\n                    field.formatValue = function(value) {\n                        this.$el.text(`[${value}]`);\n                    };\n\n                    extraData.my_field = 'Hello world';\n\n                    field._formatField();\n                    expect(field.$el.text()).toBe('[Hello world]');\n                });\n            });\n\n            describe('_getInlineEditorClass', function() {\n                it('With allowRichText=true', function() {\n                    field.allowRichText = true;\n\n                    expect(field._getInlineEditorClass())\n                        .toBe(RB.RichTextInlineEditorView);\n                });\n\n                it('With allowRichText=false', function() {\n                    field.allowRichText = false;\n\n                    expect(field._getInlineEditorClass())\n                        .toBe(RB.InlineEditorView);\n                });\n            });\n\n            describe('_loadRichTextValue', function() {\n                beforeEach(function() {\n                    field.allowRichText = true;\n                });\n\n                describe('With built-in field', function() {\n                    beforeEach(function() {\n                        field.useExtraData = false;\n                    });\n\n                    it('With value=undefined', function() {\n                        draft.set('myFieldRichText', undefined);\n                        expect(field._loadRichTextValue()).toBe(undefined);\n                    });\n\n                    it('With value=false', function() {\n                        draft.set('myFieldRichText', false);\n                        expect(field._loadRichTextValue()).toBe(false);\n                    });\n\n                    it('With value=true', function() {\n                        draft.set('myFieldRichText', true);\n                        expect(field._loadRichTextValue()).toBe(true);\n                    });\n                });\n\n                describe('With custom field', function() {\n                    it('With textType=undefined', function() {\n                        expect(field._loadRichTextValue()).toBe(undefined);\n                    });\n\n                    it('With textType=plain', function() {\n                        rawTextFields.extra_data.my_field_text_type = 'plain';\n                        expect(field._loadRichTextValue()).toBe(false);\n                    });\n\n                    it('With textType=markdown', function() {\n                        rawTextFields.extra_data.my_field_text_type =\n                            'markdown';\n                        expect(field._loadRichTextValue()).toBe(true);\n                    });\n\n                    it('With textType=invalid value', function() {\n                        rawTextFields.extra_data.my_field_text_type = 'html';\n\n                        try {\n                            field._loadRichTextValue();\n                        } catch (e) {}\n\n                        expect(console.assert).toHaveBeenCalledWith(\n                            false,\n                            'Text type \"html\" in field \"my_field_text_type\" ' +\n                            'not supported.');\n                    });\n                });\n            });\n        });\n    });\n\n    describe('MultilineTextFieldView', function() {\n        describe('Initialization from DOM', function() {\n            let $el;\n\n            beforeEach(function() {\n                $el = $('<span data-allow-markdown=\"true\"/>')\n                    .text('DOM text value');\n            });\n\n            describe('allowRichText', function() {\n                it('allow-markdown=true', function() {\n                    field = new RB.ReviewRequestFields.MultilineTextFieldView({\n                        model: editor,\n                        fieldID: 'my_field',\n                        jsonFieldName: 'foo',\n                        el: $el,\n                    });\n\n                    expect(field.allowRichText).toBe(true);\n                });\n\n                it('allow-markdown=false', function() {\n\n                    field = new RB.ReviewRequestFields.MultilineTextFieldView({\n                        model: editor,\n                        fieldID: 'my_field',\n                        jsonFieldName: 'foo',\n                        el: $el.attr('data-allow-markdown', 'false'),\n                    });\n\n                    expect(field.allowRichText).toBe(false);\n                });\n\n                it('allow-markdown unset', function() {\n                    field = new RB.ReviewRequestFields.MultilineTextFieldView({\n                        model: editor,\n                        fieldID: 'my_field',\n                        jsonFieldName: 'foo',\n                        el: $el.removeAttr('data-allow-markdown'),\n                    });\n\n                    expect(field.allowRichText).toBe(undefined);\n                });\n            });\n\n            describe('Text value', function() {\n                it('raw-value set', function() {\n\n                    field = new RB.ReviewRequestFields.MultilineTextFieldView({\n                        model: editor,\n                        fieldID: 'my_field',\n                        jsonFieldName: 'foo',\n                        el: $el.attr('data-raw-value', 'attr text value'),\n                    });\n\n                    expect(extraData.foo).toBe('attr text value');\n                    expect($el.attr('data-raw-value')).toBe(undefined);\n                });\n\n                it('raw-value unset', function() {\n                    field = new RB.ReviewRequestFields.MultilineTextFieldView({\n                        model: editor,\n                        fieldID: 'my_field',\n                        jsonFieldName: 'foo',\n                        el: $el,\n                    });\n\n                    expect(extraData.foo).toBe('DOM text value');\n                });\n            });\n\n            describe('Text type value', function() {\n                it('rich-text class present', function() {\n                    field = new RB.ReviewRequestFields.MultilineTextFieldView({\n                        model: editor,\n                        fieldID: 'my_field',\n                        jsonFieldName: 'foo',\n                        el: $el.addClass('rich-text'),\n                    });\n\n                    expect(extraData.foo_text_type).toBe('markdown');\n                });\n\n                it('rich-text class not present', function() {\n                    field = new RB.ReviewRequestFields.MultilineTextFieldView({\n                        model: editor,\n                        fieldID: 'my_field',\n                        jsonFieldName: 'foo',\n                        el: $el,\n                    });\n\n                    expect(extraData.foo_text_type).toBe('plain');\n                });\n            });\n        });\n    });\n});\n"]}