{"version":3,"sources":["baseStatusUpdatesEntryViewTests.es6.js"],"names":[],"mappings":"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","file":"baseStatusUpdatesEntryViewTests.js","sourcesContent":["suite('rb/reviewRequestPage/views/BaseStatusUpdatesEntryView', function() {\n    /* It's much easier to test against a stub than the full page. */\n    const TestPage = Backbone.View.extend({\n        stopWatchingEntryUpdates() {},\n        watchEntryUpdates() {},\n        queueLoadDiff() {},\n    });\n\n    const statusUpdateHTML = dedent`\n        <div id=\"initial_status_updates\"\n             class=\"review-request-page-entry status-updates\">\n         <a name=\"initial_status_updates\"></a>\n         <div class=\"review-request-page-entry-contents\">\n          <div class=\"header status-update-state-pending\">\n           <div class=\"collapse-button btn\">\n            <div class=\"rb-icon rb-icon-collapse-review\"></div>\n           </div>\n           <div class=\"header-details\">\n            <div class=\"summary\">\n             <span class=\"review-request-page-entry-title\">\n              Checks run (1 waiting to run)\n             </span>\n            </div>\n            <a href=\"#initial_status_updates\" class=\"timestamp\">\n             <time class=\"timesince\"\n                   datetime=\"2018-11-27T00:18:43.664524+00:00\"\n                   title=\"Nov. 27, 2018, 12:18 a.m.\">0 minutes ago</time>\n            </a>\n           </div>\n          </div>\n          <div class=\"banners\"></div>\n          <div class=\"body\">\n           <section class=\"status-update-summary\">\n            <div class=\"status-update-summary-entry\n             status-update-state-not-yet-run\">\n             <span class=\"summary\">nyc</span>\n             Waiting to run\n             <input type=\"button\" value=\"Run\" class=\"status-update-request-run\"\n                    data-status-update-id=\"1\">\n            </div>\n           </section>\n          </div>\n         </div>\n        </div>\n    `;\n\n    let entryView;\n    let page;\n    let entry;\n\n    beforeEach(function() {\n        const reviewRequest = new RB.ReviewRequest({ id: 5 });\n        const editor = new RB.ReviewRequestEditor({\n            reviewRequest: reviewRequest\n        });\n\n        entry = new RB.ReviewRequestPage.StatusUpdatesEntry({\n            reviews: [\n                reviewRequest.createReview(100, {\n                    loaded: true,\n                    links: {\n                        replies: {\n                            href: '/api/review/100/replies/'\n                        }\n                    }\n                }),\n                reviewRequest.createReview(101, {\n                    loaded: true,\n                    links: {\n                        replies: {\n                            href: '/api/review/101/replies/'\n                        }\n                    }\n                }),\n            ],\n            localSitePrefix: null,\n            reviewRequest: reviewRequest,\n            reviewRequestEditor: editor,\n            reviewRequestId: 5,\n            id: '0',\n            typeID: 'initial_status_updates',\n            addedTimestamp: new Date(Date.UTC(2017, 7, 18, 13, 40, 25)),\n            updatedTimestamp: new Date(Date.UTC(2017, 7, 18, 16, 20, 0)),\n            pendingStatusUpdates: true,\n            diffCommentsData: [\n                ['1', '100'],\n                ['2', '100-101'],\n            ],\n        });\n\n        const $el = $(statusUpdateHTML).appendTo($testsScratch);\n\n        entryView = new RB.ReviewRequestPage.BaseStatusUpdatesEntryView({\n            el: $el,\n            model: entry,\n        });\n\n        page = new TestPage();\n        page.diffFragmentQueue = new RB.DiffFragmentQueueView({\n            containerPrefix: 'comment',\n        });\n        entry.set('page', page);\n        RB.PageManager.setPage(page);\n    });\n\n    afterEach(function() {\n        RB.PageManager.setPage(null);\n    });\n\n    describe('Dynamic Updating', function() {\n        describe('Update checking', function() {\n            it('Enabled when pendingStatusUpdates=true', function() {\n                spyOn(entry, 'watchUpdates');\n\n                entry.set('pendingStatusUpdates', true);\n                entryView.render();\n\n                expect(entry.watchUpdates).toHaveBeenCalled();\n            });\n\n            it('Disabled when pendingStatusUpdates=false', function() {\n                spyOn(entry, 'watchUpdates');\n\n                entry.set('pendingStatusUpdates', false);\n                entryView.render();\n\n                expect(entry.watchUpdates).not.toHaveBeenCalled();\n            });\n        });\n\n        it('Saves fragments on beforeApplyUpdate', function() {\n            spyOn(page.diffFragmentQueue, 'saveFragment');\n            spyOn(page, 'stopWatchingEntryUpdates');\n\n            entryView.beforeApplyUpdate();\n            expect(page.diffFragmentQueue.saveFragment.calls.count()).toBe(2);\n            expect(page.diffFragmentQueue.saveFragment.calls.argsFor(0))\n                .toEqual(['1']);\n            expect(page.diffFragmentQueue.saveFragment.calls.argsFor(1))\n                .toEqual(['2']);\n            expect(page.stopWatchingEntryUpdates).toHaveBeenCalled();\n        });\n    });\n\n    describe('render', function() {\n        it('Creates ReviewViews', function() {\n            entryView.render();\n\n            expect(entryView._reviewViews.length).toBe(2);\n        });\n    });\n\n    describe('Run status update', function() {\n        it('Runs and checks for updates when button is clicked', function() {\n            spyOn(entryView.model, 'stopWatchingUpdates');\n            spyOn(entryView.model, 'watchUpdates');\n            spyOn(RB, 'apiCall').and.callThrough();\n            spyOn($, 'ajax').and.callFake(request => {\n                expect(request.type).toBe('PUT');\n                expect(request.url).toBe('/api/review-requests/5/status-updates/1/');\n                request.success();\n            });\n\n            entryView.$el.find('.status-update-request-run').first().click();\n\n            expect(RB.apiCall).toHaveBeenCalled();\n            expect($.ajax).toHaveBeenCalled();\n            expect(entryView.model.stopWatchingUpdates).toHaveBeenCalled();\n            expect(entryView.model.watchUpdates).toHaveBeenCalled();\n        });\n    });\n});\n"]}