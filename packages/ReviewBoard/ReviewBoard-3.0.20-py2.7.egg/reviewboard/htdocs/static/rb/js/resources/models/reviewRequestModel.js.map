{"version":3,"sources":["reviewRequestModel.es6.js"],"names":[],"mappings":"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","file":"reviewRequestModel.js","sourcesContent":["/**\n * A review request.\n *\n * ReviewRequest is the starting point for much of the resource API. Through\n * it, the caller can create drafts, diffs, file attachments, and screenshots.\n *\n * Fields on a ReviewRequest are set by accessing the ReviewRequest.draft\n * object. Through there, fields can be set like any other model and then\n * saved.\n *\n * A review request can be closed by using the close() function, reopened\n * through reopen(), or even permanently destroyed by calling destroy().\n */\nRB.ReviewRequest = RB.BaseResource.extend({\n    defaults() {\n        return _.defaults({\n            approved: false,\n            approvalFailure: null,\n            branch: null,\n            bugTrackerURL: null,\n            bugsClosed: null,\n            commitID: null,\n            closeDescription: null,\n            closeDescriptionRichText: false,\n            dependsOn: [],\n            description: null,\n            descriptionRichText: false,\n            draftReview: null,\n            lastUpdated: null,\n            localSitePrefix: null,\n            'public': null,\n            repository: null,\n            reviewURL: null,\n            state: null,\n            summary: null,\n            targetGroups: [],\n            targetPeople: [],\n            testingDone: null,\n            testingDoneRichText: false\n        }, RB.BaseResource.prototype.defaults());\n    },\n\n    rspNamespace: 'review_request',\n\n    extraQueryArgs: {\n        'force-text-type': 'html',\n        'include-text-types': 'raw'\n    },\n\n    attrToJsonMap: {\n        approvalFailure: 'approval_failure',\n        bugsClosed: 'bugs_closed',\n        closeDescription: 'close_description',\n        closeDescriptionRichText: 'close_description_text_type',\n        dependsOn: 'depends_on',\n        descriptionRichText: 'description_text_type',\n        lastUpdated: 'last_updated',\n        reviewURL: 'url',\n        targetGroups: 'target_groups',\n        targetPeople: 'target_people',\n        testingDone: 'testing_done',\n        testingDoneRichText: 'testing_done_text_type'\n    },\n\n    deserializedAttrs: [\n        'approved',\n        'approvalFailure',\n        'branch',\n        'bugsClosed',\n        'closeDescription',\n        'dependsOn',\n        'description',\n        'lastUpdated',\n        'public',\n        'reviewURL',\n        'summary',\n        'targetGroups',\n        'targetPeople',\n        'testingDone'\n    ],\n\n    /**\n     * Initialize the model.\n     *\n     * Args:\n     *     attrs (object):\n     *         Initial values for the model attributes.\n     *\n     *     options (object):\n     *         Additional options for the object construction.\n     *\n     * Option Args:\n     *     extraDraftAttrs (object):\n     *         Additional attributes to include when creating a review request\n     *         draft.\n     */\n    initialize(attrs, options={}) {\n        RB.BaseResource.prototype.initialize.call(this, attrs, options);\n\n        this.reviews = new Backbone.Collection([], {\n            model: RB.Review\n        });\n\n        this.draft = new RB.DraftReviewRequest(_.defaults({\n            parentObject: this,\n            branch: this.get('branch'),\n            bugsClosed: this.get('bugsClosed'),\n            dependsOn: this.get('dependsOn'),\n            description: this.get('description'),\n            descriptionRichText: this.get('descriptionRichText'),\n            summary: this.get('summary'),\n            targetGroups: this.get('targetGroups'),\n            targetPeople: this.get('targetPeople'),\n            testingDone: this.get('testingDone'),\n            testingDoneRichText: this.get('testingDoneRichText')\n        }, options.extraDraftAttrs));\n    },\n\n    /**\n     * Return the URL for syncing this model.\n     *\n     * Returns:\n     *     string:\n     *     The URL for the API resource.\n     */\n    url() {\n        const url = SITE_ROOT + (this.get('localSitePrefix') || '') +\n                    'api/review-requests/';\n\n        return this.isNew() ? url : `${url}${this.id}/`;\n    },\n\n    /**\n     * Create the review request from an existing commit.\n     *\n     * This can only be used for new ReviewRequest instances, and requires\n     * a commitID option.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the save operation.\n     *\n     *     context (object):\n     *         Context to bind when calling callbacks.\n     *\n     * Option Args:\n     *     commitID (string):\n     *         The ID of the commit to create the review request from.\n     */\n    createFromCommit(options, context) {\n        console.assert(options.commitID);\n        console.assert(this.isNew());\n\n        this.set('commitID', options.commitID);\n        this.save(\n            _.extend({\n                createFromCommit: true\n            }, options),\n            context);\n    },\n\n    /**\n     * Create a Diff object for this review request.\n     *\n     * Returns:\n     *     RB.Diff:\n     *     The new diff model.\n     */\n    createDiff() {\n        return new RB.Diff({\n            parentObject: this\n        });\n    },\n\n    /**\n     * Create a Review object for this review request.\n     *\n     * If an ID is specified, the Review object will reference that ID.\n     * Otherwise, it is considered a draft review, and will either return\n     * the existing one (if the draftReview attribute is set), or create\n     * a new one (and set the attribute).\n     *\n     * Args:\n     *     reviewID (number):\n     *         The ID of the review, for existing reviews.\n     *\n     *     extraAttrs (object):\n     *         Additional attributes to set on new models.\n     *\n     * Returns:\n     *     RB.Review:\n     *     The new review object.\n     */\n    createReview(reviewID, extraAttrs={}) {\n        let review;\n\n        if (reviewID === undefined) {\n            review = this.get('draftReview');\n\n            if (review === null) {\n                review = new RB.DraftReview({\n                    parentObject: this\n                });\n\n                this.set('draftReview', review);\n            }\n        } else {\n            review = this.reviews.get(reviewID);\n\n            if (!review) {\n                review = new RB.Review(_.defaults({\n                    parentObject: this,\n                    id: reviewID\n                }, extraAttrs));\n                this.reviews.add(review);\n            }\n\n        }\n\n        return review;\n    },\n\n    /**\n     * Create a Screenshot object for this review request.\n     *\n     * Args:\n     *     screenshotID (number):\n     *         The ID of the screenshot, for existing screenshots.\n     *\n     * Returns:\n     *     RB.Screenshot:\n     *     The new screenshot object.\n     */\n    createScreenshot(screenshotID) {\n        return new RB.Screenshot({\n            parentObject: this,\n            id: screenshotID\n        });\n    },\n\n    /**\n     * Create a FileAttachment object for this review request.\n     *\n     * Args:\n     *     attributes (object):\n     *         Additional attributes to include on the new model.\n     *\n     * Returns:\n     *     RB.FileAttachment:\n     *     The new file attachment object.\n     */\n    createFileAttachment(attributes) {\n        return new RB.FileAttachment(_.defaults({\n            parentObject: this\n        }, attributes));\n    },\n\n    /**\n     * Mark a review request as starred or unstarred.\n     *\n     * Args:\n     *     starred (boolean):\n     *         Whether the review request is starred.\n     *\n     *     options (object):\n     *         Options for the save operation.\n     *\n     *     context (object):\n     *         Context to bind when calling callbacks.\n     */\n    setStarred(starred, options, context) {\n        const watched = RB.UserSession.instance.watchedReviewRequests;\n\n        if (starred) {\n            watched.addImmediately(this, options, context);\n        } else {\n            watched.removeImmediately(this, options, context);\n        }\n    },\n\n    /**\n     * Close the review request.\n     *\n     * A 'type' option must be provided, which must match one of the\n     * close types (ReviewRequest.CLOSE_DISCARDED or\n     * ReviewRequest.CLOSE_SUBMITTED).\n     *\n     * An optional description can be set by passing a 'description' option.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the save operation.\n     *\n     *     context (object):\n     *         Context to bind when calling callbacks.\n     */\n    close(options, context) {\n        const data = {};\n\n        console.assert(options);\n\n        if (options.type === RB.ReviewRequest.CLOSE_DISCARDED) {\n            data.status = 'discarded';\n        } else if (options.type === RB.ReviewRequest.CLOSE_SUBMITTED) {\n            data.status = 'submitted';\n        } else {\n            if (_.isFunction(options.error)) {\n                options.error.call(context, {\n                    errorText: 'Invalid close type'\n                });\n            }\n\n            return;\n        }\n\n        if (options.description !== undefined) {\n            data.close_description = options.description;\n        }\n\n        if (options.richText !== undefined) {\n            data.close_description_text_type =\n                (options.richText ? 'markdown' : 'plain');\n        }\n\n        if (options.postData !== undefined) {\n            _.extend(data, options.postData);\n        }\n\n        const changingState = (options.type !== this.get('state'));\n\n        const saveOptions = _.defaults({\n            data: data,\n            success: () => {\n                if (changingState) {\n                    this.trigger('closed');\n                }\n\n                this.markUpdated(this.get('lastUpdated'));\n\n                if (_.isFunction(options.success)) {\n                    options.success.call(context);\n                }\n            }\n        }, options);\n\n        delete saveOptions.type;\n        delete saveOptions.description;\n\n        this.save(saveOptions, context);\n    },\n\n    /**\n     * Reopen the review request.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the save operation.\n     *\n     *     context (object):\n     *         Context to bind when calling callbacks.\n     */\n    reopen(options={}, context=undefined) {\n        this.save(\n            _.defaults({\n                data: {\n                    status: 'pending'\n                },\n                success: () => {\n                    this.trigger('reopened');\n                    this.markUpdated(this.get('lastUpdated'));\n\n                    if (_.isFunction(options.success)) {\n                        options.success.call(context);\n                    }\n                }\n            }, options),\n            context);\n    },\n\n    /**\n     * Marks the review request as having been updated at the given timestamp.\n     *\n     * This should be used when an action will trigger an update to the\n     * review request's Last Updated timestamp, but where we don't want\n     * a notification later on. The local copy of the timestamp can be\n     * bumped to mark it as up-to-date.\n     *\n     * Args:\n     *     timestamp (string):\n     *         The timestamp to store.\n     */\n    markUpdated(timestamp) {\n        this._lastUpdateTimestamp = timestamp;\n    },\n\n    /**\n     * Begin checking for server-side updates to the review request.\n     *\n     * The 'updated' event will be triggered when there's a new update.\n     *\n     * Args:\n     *     type (string):\n     *         The type of updates to check for.\n     *\n     *     lastUpdateTimestamp (string):\n     *         The timestamp of the last known update.\n     */\n    beginCheckForUpdates(type, lastUpdateTimestamp) {\n        this._checkUpdatesType = type;\n        this._lastUpdateTimestamp = lastUpdateTimestamp;\n\n        this.ready({\n            ready: () => setTimeout(this._checkForUpdates.bind(this),\n                                    RB.ReviewRequest.CHECK_UPDATES_MSECS)\n        });\n    },\n\n    /**\n     * Check for updates.\n     *\n     * This is called periodically after an initial call to\n     * beginCheckForUpdates. It will see if there's a new update yet on the\n     * server, and if there is, trigger the 'updated' event.\n     */\n    _checkForUpdates() {\n        RB.apiCall({\n            type: 'GET',\n            prefix: this.get('sitePrefix'),\n            noActivityIndicator: true,\n            url: this.get('links').last_update.href,\n            success: rsp => {\n                const lastUpdate = rsp.last_update;\n\n                if ((!this._checkUpdatesType ||\n                     this._checkUpdatesType === lastUpdate.type) &&\n                    this._lastUpdateTimestamp !== lastUpdate.timestamp) {\n                    this.trigger('updated', lastUpdate);\n                }\n\n                this._lastUpdateTimestamp = lastUpdate.timestamp;\n\n                setTimeout(this._checkForUpdates.bind(this),\n                           RB.ReviewRequest.CHECK_UPDATES_MSECS);\n            }\n        });\n    },\n\n    /**\n     * Serialize for sending to the server.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the save operation.\n     *\n     * Option Args:\n     *     createFromCommit (boolean):\n     *         Whether this save is going to create a new review request from\n     *         an existing committed change.\n     *\n     * Returns:\n     *     object:\n     *     Data suitable for passing to JSON.stringify.\n     */\n    toJSON(options={}) {\n        if (this.isNew()) {\n            const commitID = this.get('commitID');\n            const repository = this.get('repository');\n            const result = {};\n\n            if (commitID) {\n                result.commit_id = commitID;\n\n                if (options.createFromCommit) {\n                    result.create_from_commit_id = true;\n                }\n            }\n\n            if (repository) {\n                result.repository = repository;\n            }\n\n            return result;\n        } else {\n            return _super(this).toJSON.apply(this, arguments);\n        }\n    },\n\n    /**\n     * Parse the response from the server.\n     *\n     * Args:\n     *     rsp (object):\n     *         The response from the server.\n     *\n     * Returns:\n     *     object:\n     *     Attribute values to set on the model.\n     */\n    parseResourceData(rsp) {\n        const state = {\n            pending: RB.ReviewRequest.PENDING,\n            discarded: RB.ReviewRequest.CLOSE_DISCARDED,\n            submitted: RB.ReviewRequest.CLOSE_SUBMITTED\n        }[rsp.status];\n        const rawTextFields = rsp.raw_text_fields || rsp;\n        const data = RB.BaseResource.prototype.parseResourceData.call(\n            this, rsp);\n\n        data.state = state;\n        data.closeDescriptionRichText =\n            (rawTextFields.close_description_text_type === 'markdown');\n        data.descriptionRichText =\n            (rawTextFields.description_text_type === 'markdown');\n        data.testingDoneRichText =\n            (rawTextFields.testing_done_text_type === 'markdown');\n\n        return data;\n    }\n}, {\n    CHECK_UPDATES_MSECS: 5 * 60 * 1000, // Every 5 minutes\n\n    CLOSE_DISCARDED: 1,\n    CLOSE_SUBMITTED: 2,\n    PENDING: 3,\n\n    VISIBILITY_VISIBLE: 1,\n    VISIBILITY_ARCHIVED: 2,\n    VISIBILITY_MUTED: 3\n});\n"]}