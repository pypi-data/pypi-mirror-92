{"version":3,"sources":["textBasedCommentBlockModel.es6.js"],"names":[],"mappings":";;AAAA;;;;;;AAMA,GAAG,gBAAH,GAAsB,GAAG,0BAAH,CAA8B,MAA9B,CAAqC;AACvD,cAAU,EAAE,QAAF,CAAW;AACjB,sBAAc,IADG;AAEjB,oBAAY,IAFK;AAGjB,kBAAU,KAHO;AAIjB,mBAAW,IAJM;AAKjB,iBAAS;AALQ,KAAX,EAMP,GAAG,0BAAH,CAA8B,SAA9B,CAAwC,QANjC,CAD6C;;AASvD,sBAAkB,CAAC,cAAD,EAAiB,YAAjB,EAA+B,UAA/B,CATqC;;AAWvD;;;;;;;;;;;;;;AAcA,SAzBuD,iBAyBjD,MAzBiD,EAyBzC;AACV,eAAO,YAAP,GAAsB,SAAS,OAAO,YAAhB,EAA8B,EAA9B,CAAtB;AACA,eAAO,UAAP,GAAoB,SAAS,OAAO,UAAhB,EAA4B,EAA5B,CAApB;;AAEA,eAAO,MAAP;AACH;AA9BsD,CAArC,CAAtB","file":"textBasedCommentBlockModel.js","sourcesContent":["/**\n * Represents the comments on an element in a text-based file attachment.\n *\n * TextCommentBlock deals with creating and representing comments\n * that exist on a specific element of some content.\n */\nRB.TextCommentBlock = RB.FileAttachmentCommentBlock.extend({\n    defaults: _.defaults({\n        beginLineNum: null,\n        endLineNum: null,\n        viewMode: false,\n        $beginRow: null,\n        $endRow: null,\n    }, RB.FileAttachmentCommentBlock.prototype.defaults),\n\n    serializedFields: ['beginLineNum', 'endLineNum', 'viewMode'],\n\n    /**\n     * Parse the incoming attributes for the comment block.\n     *\n     * The fields are stored server-side as strings, so we need to convert\n     * them back to integers where appropriate.\n     *\n     * Args:\n     *     fields (object):\n     *         The attributes for the comment, as returned by the server.\n     *\n     * Returns:\n     *     object:\n     *     The parsed data.\n     */\n    parse(fields) {\n        fields.beginLineNum = parseInt(fields.beginLineNum, 10);\n        fields.endLineNum = parseInt(fields.endLineNum, 10);\n\n        return fields;\n    },\n});\n"]}