{"version":3,"sources":["abstractReviewableModel.es6.js"],"names":[],"mappings":";;AAAA;;;;;;;;;AASA,GAAG,kBAAH,GAAwB,SAAS,KAAT,CAAe,MAAf,CAAsB;AAC1C,YAAU;AACN,aAAS,IADH;AAEN,oBAAgB,KAFV;AAGN,mBAAe,IAHT;AAIN,YAAQ,IAJF;AAKN,6BAAyB;AALnB,GADgC;;AAS1C;;;;AAIA,qBAAmB,IAbuB;;AAe1C;;;;;;AAMA,6BAA2B,EArBe;;AAuB1C;;;AAGA,YA1B0C,wBA0B7B;AACT,QAAM,gBAAgB,KAAK,GAAL,CAAS,eAAT,CAAtB;;AAEA,YAAQ,MAAR,CAAe,KAAK,iBAApB,EACe,gDACA,gCAFf;AAGA,YAAQ,MAAR,CAAe,aAAf,EACe,wDACA,gBAFf;;AAIA,QAAI,CAAC,KAAK,GAAL,CAAS,QAAT,CAAL,EAAyB;AACrB,WAAK,GAAL,CAAS,QAAT,EAAmB,cAAc,YAAd,EAAnB;AACH;;AAED,SAAK,aAAL,GAAqB,IAAI,SAAS,UAAb,EAArB;AACA,SAAK,aAAL,CAAmB,KAAnB,GAA2B,KAAK,iBAAhC;;AAEA;;;;;;;AAOA,MAAE,IAAF,CAAO,KAAK,GAAL,CAAS,yBAAT,CAAP,EACO,KAAK,0BADZ,EAEO,IAFP;AAGH,GArDyC;;;AAuD1C;;;;;;;;;AASA,oBAhE0C,8BAgEvB,KAhEuB,EAgEhB;AACtB,SAAK,aAAL,CAAmB,GAAnB,CAAuB,EAAE,QAAF,CAAW;AAC9B,qBAAe,KAAK,GAAL,CAAS,eAAT,CADe;AAE9B,cAAQ,KAAK,GAAL,CAAS,QAAT;AAFsB,KAAX,EAGpB,KAHoB,CAAvB;AAIH,GArEyC;;;AAuE1C;;;;;;;;;;;;AAYA,4BAnF0C,sCAmFf,sBAnFe,EAmFS;AAC/C,YAAQ,MAAR,CAAe,KAAf,EAAsB,wCACA,2BADtB;AAEH;AAtFyC,CAAtB,CAAxB","file":"abstractReviewableModel.js","sourcesContent":["/**\n * Abstract model for reviewable content.\n *\n * This is the basis for subclasses that handle review capabilities for\n * some form of content, such as a file attachment.\n *\n * All subclasses must provide a 'commentBlockModel' object type and an\n * loadSerializedCommentBlock() function.\n */\nRB.AbstractReviewable = Backbone.Model.extend({\n    defaults: {\n        caption: null,\n        renderedInline: false,\n        reviewRequest: null,\n        review: null,\n        serializedCommentBlocks: [],\n    },\n\n    /**\n     * The AbstractCommentBlock subclass for this content type's comment\n     * blocks.\n     */\n    commentBlockModel: null,\n\n    /**\n     * The list of fields from this model to populate in each new instance\n     * of a commentBlockModel.\n     *\n     * This can also be a function, if anything more custom is required.\n     */\n    defaultCommentBlockFields: [],\n\n    /**\n     * Initialize the reviewable.\n     */\n    initialize() {\n        const reviewRequest = this.get('reviewRequest');\n\n        console.assert(this.commentBlockModel,\n                       \"'commentBlockModel' must be defined in the \" +\n                       \"reviewable's object definition\");\n        console.assert(reviewRequest,\n                       \"'reviewRequest' must be provided when constructing \" +\n                       \"the reviewable\");\n\n        if (!this.get('review')) {\n            this.set('review', reviewRequest.createReview());\n        }\n\n        this.commentBlocks = new Backbone.Collection();\n        this.commentBlocks.model = this.commentBlockModel;\n\n        /*\n         * Add all existing comment regions to the page.\n         *\n         * This intentionally doesn't use forEach because some review UIs (such\n         * as the image review UI) return their serialized comments as an\n         * object instead of an array.\n         */\n        _.each(this.get('serializedCommentBlocks'),\n               this.loadSerializedCommentBlock,\n               this);\n    },\n\n    /**\n     * Create a CommentBlock for this reviewable.\n     *\n     * The CommentBlock will be stored in the list of comment blocks.\n     *\n     * Args:\n     *     attrs (object):\n     *         The attributes for the comment block;\n     */\n    createCommentBlock(attrs) {\n        this.commentBlocks.add(_.defaults({\n            reviewRequest: this.get('reviewRequest'),\n            review: this.get('review'),\n        }, attrs));\n    },\n\n    /**\n     * Load a serialized comment and add comment blocks for it.\n     *\n     * This should parse the serializedCommentBlock and add one or more\n     * comment blocks (using createCommentBlock).\n     *\n     * This must be implemented by subclasses.\n     *\n     * Args:\n     *     serializedCommentBlock (object):\n     *         The serialized data for the new comment block(s).\n     */\n    loadSerializedCommentBlock(serializedCommentBlock) {\n        console.assert(false, 'loadSerializedCommentBlock must be ' +\n                              'implemented by a subclass');\n    },\n});\n"]}