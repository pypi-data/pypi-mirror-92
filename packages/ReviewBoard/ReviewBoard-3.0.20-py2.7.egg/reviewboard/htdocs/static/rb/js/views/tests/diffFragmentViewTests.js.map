{"version":3,"sources":["diffFragmentViewTests.es6.js"],"names":[],"mappings":"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","file":"diffFragmentViewTests.js","sourcesContent":["suite('rb/views/DiffFragmentView', function() {\n    const fragmentTemplate = _.template(dedent`\n        <table>\n         <thead>\n         </thead>\n         <tbody class=\"diff-header diff-header-above\">\n          <tr>\n           <td>\n            <div>\n             <a href=\"#\" class=\"diff-expand-btn\"\n                data-lines-of-context=\"20,0\"></a>\n            </div>\n           </td>\n          </tr>\n         </tbody>\n         <tbody class=\"insert\"></tbody>\n         <tbody class=\"insert\">\n          <tr>\n           <td>\n            <div class=\"diff-collapse-btn\" data-lines-of-context=\"0,0\"></div>\n           </td>\n          </tr>\n         </tbody>\n         <tbody class=\"diff-header diff-header-below\">\n          <tr>\n           <td>\n            <div>\n             <a href=\"#\" class=\"diff-expand-btn\"\n                data-lines-of-context=\"0,20\"></a>\n            </div>\n           </td>\n          </tr>\n         </tbody>\n        </table>\n    `);\n\n    let view;\n    let loadDiff;\n\n    beforeEach(function() {\n        loadDiff = jasmine.createSpy('loadDiff');\n\n        view = new RB.DiffFragmentView({\n            loadDiff: loadDiff,\n            collapsible: true,\n        });\n        view.$el.html(fragmentTemplate());\n        $testsScratch.append(view.$el);\n\n        /* Make all the deferred/delayed functions run immediately. */\n        spyOn(_, 'defer').and.callFake(cb => cb());\n        spyOn(_, 'delay').and.callFake(cb => cb());\n    });\n\n    describe('render', function() {\n        it('With visible and collapsible === true', function() {\n            view.render();\n\n            expect(view.$el.hasClass('allow-transitions')).toBe(true);\n            expect(view._$table.hasClass('expanded')).toBe(false);\n            expect(view._$table.hasClass('collapsed')).toBe(true);\n\n            /*\n             * Ideally we'd check for the proper transform values we're setting\n             * (or part of them anyway), but browsers may turn those into\n             * \"matrix(...)\" values. So this is better than nothing.\n             */\n            expect(view._$thead.css('transform')).not.toBe('none');\n\n            _.each(view._$diffHeaders, headerEl => {\n                expect($(headerEl).css('transform')).not.toBe('none');\n            });\n        });\n\n        it('With hidden and collapsible === true', function() {\n            view.$el.hide();\n            view.render();\n\n            expect(view.$el.hasClass('allow-transitions')).toBe(true);\n            expect(view._$table.hasClass('expanded')).toBe(true);\n            expect(view._$table.hasClass('collapsed')).toBe(false);\n\n            /*\n             * Ideally we'd check for the proper transform values we're setting\n             * (or part of them anyway), but browsers may turn those into\n             * \"matrix(...)\" values. So this is better than nothing.\n             */\n            expect(view._$thead.css('transform')).toBe('none');\n\n            _.each(view._$diffHeaders, headerEl => {\n                expect($(headerEl).css('transform')).toBe('none');\n            });\n        });\n\n        it('With collapsible === false', function() {\n            view._collapsible = false;\n            view.render();\n\n            expect(view.$el.hasClass('allow-transitions')).toBe(false);\n            expect(view._$table.hasClass('expanded')).toBe(true);\n            expect(view._$table.hasClass('collapsed')).toBe(false);\n\n            /*\n             * Ideally we'd check for the proper transform values we're setting\n             * (or part of them anyway), but browsers may turn those into\n             * \"matrix(...)\" values. So this is better than nothing.\n             */\n            expect(view._$thead.css('transform')).toBe('none');\n\n            _.each(view._$diffHeaders, headerEl => {\n                expect($(headerEl).css('transform')).toBe('none');\n            });\n        });\n    });\n\n    describe('Events', function() {\n        it('click expansion button', function() {\n            view.render();\n            view.$('.diff-expand-btn').eq(0).click();\n\n            expect(loadDiff).toHaveBeenCalled();\n            expect(loadDiff.calls.mostRecent().args[0].linesOfContext)\n                .toBe('20,0');\n        });\n\n        it('click collapse button', function() {\n            view.render();\n            view.$('.diff-collapse-btn').eq(0).click();\n\n            expect(loadDiff).toHaveBeenCalled();\n            expect(loadDiff.calls.mostRecent().args[0].linesOfContext)\n                .toBe('0,0');\n        });\n\n        describe('mouseenter', function() {\n            it('With collapsible === true', function() {\n                view.render();\n\n                spyOn(view.$el, 'is').and.callFake(sel => {\n                    expect(sel).toBe(':hover');\n\n                    return true;\n                });\n                view.$el.trigger('mouseenter');\n\n                expect(view._$table.hasClass('collapsed')).toBe(false);\n                expect(view._$table.hasClass('expanded')).toBe(true);\n                expect(view._$thead.css('transform')).toBe('none');\n\n                _.each(view._$diffHeaders, headerEl => {\n                    expect($(headerEl).css('transform')).toBe('none');\n                });\n            });\n\n            it('With collapsible === false', function() {\n                view._collapsible = false;\n                view.render();\n\n                spyOn(view.$el, 'is').and.callFake(sel => {\n                    expect(sel).toBe(':hover');\n\n                    return true;\n                });\n                view.$el.trigger('mouseenter');\n\n                expect(view._$table.hasClass('collapsed')).toBe(false);\n                expect(view._$table.hasClass('expanded')).toBe(true);\n                expect(view._$thead.css('transform')).toBe('none');\n\n                _.each(view._$diffHeaders, headerEl => {\n                    expect($(headerEl).css('transform')).toBe('none');\n                });\n            });\n        });\n\n        describe('mouseleave', function() {\n            it('With collapsible === true', function() {\n                let isHovering = true;\n\n                view.render();\n\n                /* First, trigger a mouseenter. */\n                spyOn(view.$el, 'is').and.callFake(sel => {\n                    expect(sel).toBe(':hover');\n\n                    return isHovering;\n                });\n                view.$el.trigger('mouseenter');\n\n                /* Now the mouse leave. */\n                isHovering = false;\n                view.$el.trigger('mouseleave');\n\n                expect(view._$table.hasClass('collapsed')).toBe(true);\n                expect(view._$table.hasClass('expanded')).toBe(false);\n                expect(view._$thead.css('transform')).not.toBe('none');\n\n                _.each(view._$diffHeaders, headerEl => {\n                    expect($(headerEl).css('transform')).not.toBe('none');\n                });\n            });\n\n            it('With collapsible === false', function() {\n                let isHovering = true;\n\n                view._collapsible = false;\n                view.render();\n\n                /* First, trigger a mouseenter. */\n                spyOn(view.$el, 'is').and.callFake(sel => {\n                    expect(sel).toBe(':hover');\n\n                    return isHovering;\n                });\n                view.$el.trigger('mouseenter');\n\n                /* Now the mouse leave. */\n                isHovering = false;\n                view.$el.trigger('mouseleave');\n\n                expect(view._$table.hasClass('collapsed')).toBe(false);\n                expect(view._$table.hasClass('expanded')).toBe(true);\n                expect(view._$thead.css('transform')).toBe('none');\n\n                _.each(view._$diffHeaders, headerEl => {\n                    expect($(headerEl).css('transform')).toBe('none');\n                });\n            });\n        });\n    });\n});\n"]}