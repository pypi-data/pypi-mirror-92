{"version":3,"sources":["baseResourceModel.es6.js"],"names":[],"mappings":"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","file":"baseResourceModel.js","sourcesContent":["/**\n * The base model for all API-backed resource models.\n *\n * This provides a common set of attributes and functionality for working\n * with Review Board's REST API. That includes fetching data for a known\n * resource, creating resources, saving, deleting, and navigating children\n * resources by way of a payload's list of links.\n *\n * Other resource models are expected to extend this. In particular, they\n * should generally be extending toJSON() and parse().\n */\nRB.BaseResource = Backbone.Model.extend({\n    /**\n     * Return default values for the model attributes.\n     *\n     * Returns:\n     *     object:\n     *     The attribute defaults.\n     */\n    defaults() {\n        return {\n            extraData: {},\n            links: null,\n            loaded: false,\n            parentObject: null\n        };\n    },\n\n    /** The key for the namespace for the object's payload in a response. */\n    rspNamespace: '',\n\n    /** The attribute used for the ID in the URL. */\n    urlIDAttr: 'id',\n\n    listKey() {\n        return this.rspNamespace + 's';\n    },\n\n    /** The list of fields to expand in resource payloads. */\n    expandedFields: [],\n\n    /**\n     * Extra query arguments for GET requests.\n     *\n     * This may also be a function that returns the extra query arguments.\n     *\n     * These values can be overridden by the caller when making a request.\n     * They function as defaults for the queries.\n     */\n    extraQueryArgs: {},\n\n    /** Whether or not extra data can be associated on the resource. */\n    supportsExtraData: false,\n\n    /**\n     * A map of attribute names to resulting JSON field names.\n     *\n     * This is used to auto-generate a JSON payload from attribute names\n     * in toJSON().\n     *\n     * It's also needed if using attribute names in any save({attrs: [...]})\n     * calls.\n     */\n    attrToJsonMap: {},\n\n    /** A list of attributes to serialize in toJSON(). */\n    serializedAttrs: [],\n\n    /** A list of attributes to deserialize in parseResourceData(). */\n    deserializedAttrs: [],\n\n    /** Special serializer functions called in toJSON(). */\n    serializers: {},\n\n    /** Special deserializer functions called in parseResourceData(). */\n    deserializers: {},\n\n    /**\n     * Initialize the model.\n     */\n    initialize() {\n        if (this.supportsExtraData) {\n            this._setupExtraData();\n        }\n    },\n\n    /**\n     * Return the URL for this resource's instance.\n     *\n     * If this resource is loaded and has a URL to itself, that URL will\n     * be returned. If not yet loaded, it'll try to get it from its parent\n     * object, if any.\n     *\n     * Returns:\n     *     string:\n     *     The URL to use when fetching the resource. If the URL cannot be\n     *     determined, this will return null.\n     */\n    url() {\n        let links = this.get('links');\n\n        if (links) {\n            return links.self.href;\n        }\n\n        const parentObject = this.get('parentObject');\n\n        if (parentObject) {\n            links = parentObject.get('links');\n\n            if (links) {\n                const key = _.result(this, 'listKey');\n                const link = links[key];\n\n                if (link) {\n                    const baseURL = link.href;\n\n                    return this.isNew()\n                           ? baseURL\n                           : (baseURL + this.get(this.urlIDAttr) + '/');\n                }\n            }\n        }\n\n        return null;\n    },\n\n    /**\n     * Call a function when the object is ready to use.\n     *\n     * An object is ready it has an ID and is loaded, or is a new resource.\n     *\n     * When the object is ready, options.ready() will be called. This may\n     * be called immediately, or after one or more round trips to the server.\n     *\n     * If we fail to load the resource, objects.error() will be called instead.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the fetch operation.\n     *\n     *     context (object):\n     *         Context to bind when executing callbacks.\n     *\n     * Option Args:\n     *     ready (function):\n     *         Callback function for when the object is ready to use.\n     *\n     *     error (function):\n     *         Callback function for when an error occurs.\n     */\n    ready(options={}, context=undefined) {\n        const success = _.isFunction(options.ready)\n                        ? _.bind(options.ready, context)\n                        : undefined;\n        const error = _.isFunction(options.error)\n                      ? _.bind(options.error, context)\n                      : undefined;\n\n        const parentObject = this.get('parentObject');\n\n        if (this.get('loaded')) {\n            // We already have data--just call the callbacks\n            if (success) {\n                success();\n            }\n        } else if (!this.isNew()) {\n            // Fetch data from the server\n            this.fetch({\n                data: options.data,\n                success: success,\n                error: error\n            });\n        } else if (parentObject) {\n            /*\n             * This is a new object, which means there's nothing to fetch from\n             * the server, but we still need to ensure that the parent is loaded\n             * in order for it to have valid links.\n             */\n            parentObject.ready({\n                ready: success,\n                error: error\n            });\n        } else if (success) {\n            // Fallback for dummy objects.\n            success();\n        }\n    },\n\n    /**\n     * Call a function when we know an object exists server-side.\n     *\n     * This works like ready() in that it's used to delay operating on the\n     * resource until we have a server-side representation. Unlike ready(),\n     * it will attempt to create it if it doesn't exist first.\n     *\n     * When the object has been created, or we know it already is,\n     * options.success() will be called.\n     *\n     * If we fail to create the object, options.error() will be called\n     * instead.\n     *\n     * Args:\n     *     options (object):\n     *         Object with success and error callbacks.\n     *\n     *     context (object):\n     *         Context to bind when executing callbacks.\n     */\n    ensureCreated(options={}, context=undefined) {\n        this.ready({\n            ready: () => {\n                if (!this.get('loaded')) {\n                    this.save({\n                        success: _.isFunction(options.success)\n                                 ? _.bind(options.success, context)\n                                 : undefined,\n                        error: _.isFunction(options.error)\n                               ? _.bind(options.error, context)\n                               : undefined\n                    });\n                } else if (_.isFunction(options.success)) {\n                    options.success.call(context);\n                }\n            }\n        });\n    },\n\n    /**\n     * Fetch the object's data from the server.\n     *\n     * An object must have an ID before it can be fetched. Otherwise,\n     * options.error() will be called.\n     *\n     * If this has a parent resource object, we'll ensure that's ready before\n     * fetching this resource.\n     *\n     * The resource must override the parse() function to determine how\n     * the returned resource data is parsed and what data is stored in\n     * this object.\n     *\n     * If we successfully fetch the resource, options.success() will be\n     * called.\n     *\n     * If we fail to fetch the resource, options.error() will be called.\n     *\n     * Args:\n     *     options (object):\n     *         Object with success and error callbacks.\n     *\n     *     context (object):\n     *         Context to bind when executing callbacks.\n     */\n    fetch(options={}, context=undefined) {\n        options = _.bindCallbacks(options, context);\n\n        if (this.isNew()) {\n            if (_.isFunction(options.error)) {\n                options.error.call(context,\n                    'fetch cannot be used on a resource without an ID');\n            }\n\n            return;\n        }\n\n        const parentObject = this.get('parentObject');\n\n        if (parentObject) {\n            parentObject.ready({\n                ready: () => Backbone.Model.prototype.fetch.call(this, options),\n                error: options.error\n            }, this);\n        } else {\n            Backbone.Model.prototype.fetch.call(this, options);\n        }\n    },\n\n    /**\n     * Save the object's data to the server.\n     *\n     * If the object has an ID already, it will be saved to its known\n     * URL using HTTP PUT. If it doesn't have an ID, it will be saved\n     * to its parent list resource using HTTP POST\n     *\n     * If this has a parent resource object, we'll ensure that's created\n     * before saving this resource.\n     *\n     * An object must either be loaded or have a parent resource linking to\n     * this object's list resource URL for an object to be saved.\n     *\n     * The resource must override the toJSON() function to determine what\n     * data is saved to the server.\n     *\n     * If we successfully save the resource, options.success() will be\n     * called, and the \"saved\" event will be triggered.\n     *\n     * If we fail to save the resource, options.error() will be called.\n     *\n     * Args:\n     *     options (object):\n     *         Object with success and error callbacks.\n     *\n     *     context (object):\n     *         Context to bind when executing callbacks.\n     */\n    save(options={}, context=undefined) {\n        this.trigger('saving', options);\n\n        this.ready({\n            ready: () => {\n                const parentObject = this.get('parentObject');\n\n                if (parentObject) {\n                    parentObject.ensureCreated({\n                        success: this._saveObject.bind(this, options, context),\n                        error: options.error\n                    }, this);\n                } else {\n                    this._saveObject(options, context);\n                }\n            },\n            error: _.isFunction(options.error)\n                   ? _.bind(options.error, context)\n                   : undefined\n        }, this);\n    },\n\n    /**\n     * Handle the actual saving of the object's state.\n     *\n     * This is called internally by save() once we've handled all the\n     * readiness and creation checks of this object and its parent.\n     *\n     * Args:\n     *     options (object):\n     *         Object with success and error callbacks.\n     *\n     *     context (object):\n     *         Context to bind when executing callbacks.\n     */\n    _saveObject(options, context) {\n        const url = _.result(this, 'url');\n        if (!url) {\n            if (_.isFunction(options.error)) {\n                options.error.call(context,\n                    'The object must either be loaded from the server or ' +\n                    'have a parent object before it can be saved');\n            }\n\n            return;\n        }\n\n        const saveOptions = _.defaults({\n            success: (...args) => {\n                if (_.isFunction(options.success)) {\n                    options.success.apply(context, args);\n                }\n\n                this.trigger('saved', options);\n            },\n            error: (...args) => {\n                if (_.isFunction(options.error)) {\n                    options.error.apply(context, args);\n                }\n\n                this.trigger('saveFailed', options);\n            }\n        }, options);\n\n        saveOptions.attrs = options.attrs || this.toJSON(options);\n\n        const files = [];\n        const readers = [];\n\n        if (!options.form) {\n            if (this.payloadFileKeys && window.File) {\n                /* See if there are files in the attributes we're using. */\n                this.payloadFileKeys.forEach(key => {\n                    const file = saveOptions.attrs[key];\n\n                    if (file) {\n                        files.push(file);\n                    }\n                });\n            }\n        }\n\n        if (files.length > 0) {\n            files.forEach(file => {\n                const reader = new FileReader();\n\n                readers.push(reader);\n                reader.onloadend = () => {\n                    if (readers.every(r => r.readyState === FileReader.DONE)) {\n                        this._saveWithFiles(files, readers, saveOptions);\n                    }\n                };\n                reader.readAsArrayBuffer(file);\n            });\n        } else {\n            Backbone.Model.prototype.save.call(this, {}, saveOptions);\n        }\n    },\n\n    /**\n     * Save the model with a file upload.\n     *\n     * When doing file uploads, we need to hand-structure a form-data payload\n     * to the server. It will contain the file contents and the attributes\n     * we're saving. We can then call the standard save function with this\n     * payload as our data.\n     *\n     * Args:\n     *     files (Array of object):\n     *         A list of files, with ``name`` and ``type`` keys.\n     *\n     *     fileReaders (Array of FileReader):\n     *         Readers corresponding to each item in ``files``.\n     *\n     *     options (object):\n     *         Options for the save operation.\n     *\n     * Option Args:\n     *     boundary (string):\n     *         Optional MIME multipart boundary.\n     *\n     *     attrs (object):\n     *         Additional key/value pairs to include in the payload data.\n     */\n    _saveWithFiles(files, fileReaders, options) {\n        const boundary = options.boundary ||\n                         ('-----multipartformboundary' + new Date().getTime());\n        const blob = [];\n\n        for (let [key, file, reader] of\n             _.zip(this.payloadFileKeys, files, fileReaders)) {\n            if (!file || !reader) {\n                continue;\n            }\n\n            blob.push('--' + boundary + '\\r\\n');\n            blob.push('Content-Disposition: form-data; name=\"' +\n                      key + '\"; filename=\"' + file.name + '\"\\r\\n');\n            blob.push('Content-Type: ' + file.type + '\\r\\n');\n            blob.push('\\r\\n');\n\n            blob.push(reader.result);\n\n            blob.push('\\r\\n');\n        }\n\n        for (let [key, value] of Object.entries(options.attrs)) {\n            if (!this.payloadFileKeys.includes(key) &&\n                value !== undefined &&\n                value !== null) {\n                blob.push('--' + boundary + '\\r\\n');\n                blob.push('Content-Disposition: form-data; name=\"' + key +\n                          '\"\\r\\n');\n                blob.push('\\r\\n');\n                blob.push(value + '\\r\\n');\n            }\n        }\n\n        blob.push('--' + boundary + '--\\r\\n\\r\\n');\n\n        Backbone.Model.prototype.save.call(this, {}, _.extend({\n            data: new Blob(blob),\n            processData: false,\n            contentType: 'multipart/form-data; boundary=' + boundary,\n        }, options));\n    },\n\n    /**\n     * Delete the object's resource on the server.\n     *\n     * An object must either be loaded or have a parent resource linking to\n     * this object's list resource URL for an object to be deleted.\n     *\n     * Args:\n     *     options (object):\n     *         Object with success and error callbacks.\n     *\n     *     context (object):\n     *         Context to bind when executing callbacks.\n     */\n    destroy(options={}, context=undefined) {\n        options = _.bindCallbacks(options, context);\n\n        this.trigger('destroying', options);\n\n        const parentObject = this.get('parentObject');\n\n        if (!this.isNew() && parentObject) {\n            /*\n             * XXX This is temporary to support older-style resource\n             *     objects. We should just use ready() once we're moved\n             *     entirely onto BaseResource.\n             */\n            parentObject.ready(_.defaults({\n                ready: () => this._destroyObject(options, context)\n            }, options));\n        } else {\n            this._destroyObject(options, context);\n        }\n    },\n\n    /**\n     * Set up the deletion of the object.\n     *\n     * This is called internally by destroy() once we've handled all the\n     * readiness and creation checks of this object and its parent.\n     *\n     * Once we've done some work to ensure the URL is valid and the object\n     * is ready, we'll finish destruction by calling _finishDestroy.\n     *\n     * Args:\n     *     options (object):\n     *         Object with success and error callbacks.\n     *\n     *     context (object):\n     *         Context to bind when executing callbacks.\n     */\n    _destroyObject(options={}, context=null) {\n        const url = _.result(this, 'url');\n\n        if (!url) {\n            if (this.isNew()) {\n                /*\n                 * If both this resource and its parent are new, it's possible\n                 * that we'll get through here without a url. In this case, all\n                 * the data is still local to the client and there's not much to\n                 * clean up; just call Model.destroy and be done with it.\n                 */\n                this._finishDestroy(options, context);\n            } else if (_.isFunction(options.error)) {\n                options.error.call(context,\n                    'The object must either be loaded from the server or ' +\n                    'have a parent object before it can be deleted');\n            }\n\n            return;\n        }\n\n        this.ready({\n            ready: () => this._finishDestroy(options, context),\n            error: _.isFunction(options.error)\n                   ? _.bind(options.error, context)\n                   : undefined\n        }, this);\n    },\n\n    /**\n     * Finish destruction of the object.\n     *\n     * This will call the parent destroy method, then reset the state\n     * of the object on success.\n     *\n     * Args:\n     *     options (object):\n     *         Object with success and error callbacks.\n     *\n     *     context (object):\n     *         Context to bind when executing callbacks.\n     */\n    _finishDestroy(options, context) {\n        const parentObject = this.get('parentObject');\n\n        Backbone.Model.prototype.destroy.call(this, _.defaults({\n            wait: true,\n            success: (...args) => {\n                /*\n                 * Reset the object so it's new again, but with the same\n                 * parentObject.\n                 */\n                this.set(_.defaults(\n                    {\n                        id: null,\n                        parentObject: parentObject\n                    },\n                    _.result(this, 'defaults')));\n\n                this.trigger('destroyed', options);\n\n                if (_.isFunction(options.success)) {\n                    options.success.apply(context, args);\n                }\n            }\n        }, _.bindCallbacks(options, context)));\n    },\n\n    /**\n     * Parse and returns the payload from an API response.\n     *\n     * This will by default only return the object's ID and list of links.\n     * Subclasses should override this to return any additional data that's\n     * needed, but they must include the results of\n     * BaseResource.protoype.parse as well.\n     *\n     * Args:\n     *     rsp (object):\n     *         The payload received from the server.\n     *\n     * Returns:\n     *     object:\n     *     Attributes to set on the model.\n     */\n    parse(rsp) {\n        console.assert(this.rspNamespace,\n                       'rspNamespace must be defined on the resource model');\n\n        if (rsp.stat !== undefined) {\n            /*\n             * This resource payload is inside an envelope from an API\n             * call. It's not model construction data or from a list\n             * resource.\n             */\n            rsp = rsp[this.rspNamespace];\n        }\n\n        return _.defaults({\n            extraData: rsp.extra_data,\n            id: rsp.id,\n            links: rsp.links,\n            loaded: true\n        }, this.parseResourceData(rsp));\n    },\n\n    /*\n     * Parse the resource data from a payload.\n     *\n     * By default, this will make use of attrToJsonMap and any\n     * jsonDeserializers to construct a resulting set of attributes.\n     *\n     * This can be overridden by subclasses.\n     *\n     * Args:\n     *     rsp (object):\n     *         The payload received from the server.\n     *\n     * Returns:\n     *     object:\n     *     Attributes to set on the model.\n     */\n    parseResourceData(rsp) {\n        const attrs = {};\n\n        for (let attrName of this.deserializedAttrs) {\n            const deserializer = this.deserializers[attrName];\n            const jsonField = this.attrToJsonMap[attrName] || attrName;\n            let value = rsp[jsonField];\n\n            if (deserializer) {\n                value = deserializer.call(this, value);\n            }\n\n            if (value !== undefined) {\n                attrs[attrName] = value;\n            }\n        }\n\n        return attrs;\n    },\n\n    /**\n     * Serialize and return object data for the purpose of saving.\n     *\n     * When saving to the server, the only data that will be sent in the\n     * API PUT/POST call will be the data returned from toJSON().\n     *\n     * This will build the list based on the serializedAttrs, serializers,\n     * and attrToJsonMap properties.\n     *\n     * Subclasses can override this to create custom serialization behavior.\n     *\n     * Returns:\n     *     object:\n     *     The serialized data.\n     */\n    toJSON() {\n        const serializerState = {\n            isNew: this.isNew(),\n            loaded: this.get('loaded')\n        };\n        const data = {};\n\n        for (let attrName of this.serializedAttrs) {\n            const serializer = this.serializers[attrName];\n            let value = this.get(attrName);\n\n            if (serializer) {\n                value = serializer.call(this, value, serializerState);\n            }\n\n            const jsonField = this.attrToJsonMap[attrName] || attrName;\n            data[jsonField] = value;\n        }\n\n        if (this.supportsExtraData) {\n            _.extend(data, this.extraData.toJSON());\n        }\n\n        return data;\n    },\n\n    /**\n     * Handle all AJAX communication for the model and its subclasses.\n     *\n     * Backbone.js will internally call the model's sync function to\n     * communicate with the server, which usually uses Backbone.sync.\n     *\n     * We wrap this to convert the data to encoded form data (instead\n     * of Backbone's default JSON payload).\n     *\n     * We also parse the error response from Review Board so we can provide\n     * a more meaningful error callback.\n     *\n     * Args:\n     *     method (string):\n     *         The HTTP method to use.\n     *\n     *     model (Backbone.Model):\n     *         The model to sync.\n     *\n     *     options (object):\n     *         Options for the operation.\n     *\n     * Option Args:\n     *     data (object):\n     *         Optional payload data to include.\n     *\n     *     form (jQuery):\n     *         Optional form to be submitted.\n     *\n     *     attrs (Array or object):\n     *         Either a list of the model attributes to sync, or a set of\n     *         key/value pairs to use instead of the model attributes.\n     */\n    sync(method, model, options={}) {\n        let data;\n        let contentType;\n\n        if (method === 'read') {\n            data = options.data || {};\n\n            const extraQueryArgs = _.result(this, 'extraQueryArgs', {});\n\n            if (!_.isEmpty(extraQueryArgs)) {\n                data = _.extend({}, extraQueryArgs, data);\n            }\n        } else {\n            if (options.form) {\n                data = null;\n            } else if (options.attrs && !_.isArray(options.attrs)) {\n                data = options.attrs;\n            } else {\n                data = model.toJSON(options);\n\n                if (options.attrs) {\n                    data = _.pick(\n                        data,\n                        options.attrs.map(attr => this.attrToJsonMap[attr]\n                                                  || attr));\n                }\n            }\n\n            contentType = 'application/x-www-form-urlencoded';\n        }\n\n        const syncOptions = _.defaults({}, options, {\n            /* Use form data instead of a JSON payload. */\n            contentType: contentType,\n            data: data,\n            processData: true\n        });\n\n        if (!options.form && this.expandedFields.length > 0) {\n            syncOptions.data.expand = this.expandedFields.join(',');\n        }\n\n        syncOptions.error = xhr => {\n            RB.storeAPIError(xhr);\n\n            const rsp = xhr.errorPayload;\n\n            if (rsp && _.has(rsp, this.rspNamespace)) {\n                /*\n                 * The response contains the current version of the object,\n                 * which we want to preserve, in case it did any partial\n                 * updating of data.\n                 */\n                this.set(this.parse(rsp));\n            }\n\n            if (_.isFunction(options.error)) {\n                options.error(xhr);\n            }\n        };\n\n        return Backbone.sync.call(this, method, model, syncOptions);\n    },\n\n    /**\n     * Perform validation on the attributes of the resource.\n     *\n     * By default, this validates the extraData field, if provided.\n     *\n     * Args:\n     *     attrs (object):\n     *         The attributes to validate.\n     *\n     * Returns:\n     *     string:\n     *     An error string or ``undefined``.\n     */\n    validate(attrs) {\n        if (this.supportsExtraData && attrs.extraData !== undefined) {\n            const strings = RB.BaseResource.strings;\n\n            if (!_.isObject(attrs.extraData)) {\n                return strings.INVALID_EXTRADATA_TYPE;\n            }\n\n            for (let [key, value] of Object.entries(attrs.extraData)) {\n                if (!_.isNull(value) &&\n                    (!_.isNumber(value) || _.isNaN(value)) &&\n                    !_.isBoolean(value) &&\n                    !_.isString(value)) {\n                    return strings.INVALID_EXTRADATA_VALUE_TYPE\n                        .replace('{key}', key);\n                }\n            }\n        }\n    }\n}, {\n    strings: {\n        UNSET_PARENT_OBJECT: 'parentObject must be set',\n        INVALID_EXTRADATA_TYPE:\n            'extraData must be an object or undefined',\n        INVALID_EXTRADATA_VALUE_TYPE:\n            'extraData.{key} must be null, a number, boolean, or string'\n    }\n});\n\n\n_.extend(RB.BaseResource.prototype, RB.ExtraDataMixin);\n"]}