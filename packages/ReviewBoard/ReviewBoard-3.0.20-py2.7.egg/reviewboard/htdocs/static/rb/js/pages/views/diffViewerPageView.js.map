{"version":3,"sources":["diffViewerPageView.es6.js"],"names":[],"mappings":"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","file":"diffViewerPageView.js","sourcesContent":["/**\n * Manages the diff viewer page.\n *\n * This provides functionality for the diff viewer page for managing the\n * loading and display of diffs, and all navigation around the diffs.\n */\nRB.DiffViewerPageView = RB.ReviewablePageView.extend({\n    SCROLL_BACKWARD: -1,\n    SCROLL_FORWARD: 1,\n\n    ANCHOR_COMMENT: 1,\n    ANCHOR_FILE: 2,\n    ANCHOR_CHUNK: 4,\n\n    DIFF_SCROLLDOWN_AMOUNT: 15,\n\n    keyBindings: {\n        'aAKP<m': '_selectPreviousFile',\n        'fFJN>': '_selectNextFile',\n        'sSkp,': '_selectPreviousDiff',\n        'dDjn.': '_selectNextDiff',\n        '[x': '_selectPreviousComment',\n        ']c': '_selectNextComment',\n        '\\x0d': '_recenterSelected',\n        'rR': '_createComment',\n    },\n\n    events: _.extend({\n        'click .toggle-whitespace-only-chunks': '_toggleWhitespaceOnlyChunks',\n        'click .toggle-show-whitespace': '_toggleShowExtraWhitespace',\n    }, RB.ReviewablePageView.prototype.events),\n\n    _fileEntryTemplate: _.template(dedent`\n        <div class=\"diff-container\">\n         <div class=\"diff-box\">\n          <table class=\"sidebyside loading <% if (newFile) { %>newfile<% } %>\"\n                 id=\"file_container_<%- id %>\">\n           <thead>\n            <tr class=\"filename-row\">\n             <th>\n              <span class=\"fa fa-spinner fa-pulse\"></span>\n              <%- filename %>\n             </th>\n            </tr>\n           </thead>\n          </table>\n         </div>\n        </div>\n    `),\n\n    /* Template for code line link anchor */\n    anchorTemplate: _.template(\n        '<a name=\"<%- anchorName %>\" class=\"highlight-anchor\"></a>'),\n\n    /**\n     * Initialize the diff viewer page.\n     */\n    initialize() {\n        RB.ReviewablePageView.prototype.initialize.apply(this, arguments);\n\n        this._selectedAnchorIndex = -1;\n        this._$window = $(window);\n        this._$anchors = $();\n        this._$controls = null;\n        this._$diffs = null;\n        this._diffReviewableViews = [];\n        this._diffFileIndexView = null;\n        this._highlightedChunk = null;\n\n        /*\n         * Listen for the construction of added DiffReviewables.\n         *\n         * We'll queue up the loading and construction of a view when added.\n         * This will ultimately result in a RB.DiffReviewableView being\n         * constructed, once the data from the server is loaded.\n         */\n        this.listenTo(this.model.diffReviewables, 'add',\n                      this._onDiffReviewableAdded);\n\n        /*\n         * Listen for when we're started and finished populating the list\n         * of DiffReviewables. We'll use these events to clear and start the\n         * diff loading queue.\n         */\n        const diffQueue = $.funcQueue('diff_files');\n\n        this.listenTo(this.model.diffReviewables, 'populating', () => {\n            this._diffReviewableViews.forEach(view => view.remove());\n            this._diffReviewableViews = [];\n            this._$diffs.children('.diff-container').remove();\n            this._highlightedChunk = null;\n\n            diffQueue.clear();\n        });\n        this.listenTo(this.model.diffReviewables, 'populated',\n                      () => diffQueue.start());\n\n        this.router = new Backbone.Router();\n        this.router.route(/^(\\d+(?:-\\d+)?)\\/?(\\?[^#]*)?/,\n                          'revision',\n                          (revision, queryStr) => {\n            const queryArgs = Djblets.parseQueryString(queryStr || '');\n            const page = queryArgs.page;\n            const revisionRange = revision.split('-', 2);\n\n            this.model.loadDiffRevision({\n                page: page ? parseInt(page, 10) : 1,\n                filenamePatterns: queryArgs.filenames || null,\n                revision: parseInt(revisionRange[0], 10),\n                interdiffRevision: (revisionRange.length === 2\n                                    ? parseInt(revisionRange[1], 10)\n                                    : null),\n            });\n        });\n\n        /*\n         * Begin managing the URL history for the page, so that we can\n         * switch revisions and handle pagination while keeping the history\n         * clean and the URLs representative of the current state.\n         *\n         * Note that Backbone will attempt to convert the hash to part of\n         * the page URL, stripping away the \"#\". This will result in a\n         * URL pointing to an incorrect, possible non-existent diff revision.\n         *\n         * We work around that by saving the values for the hash and query\n         * string (up above), and by later replacing the current URL with a\n         * new one that, amongst other things, contains the hash present\n         * when the page was loaded.\n         */\n        Backbone.history.start({\n            pushState: true,\n            hashChange: false,\n            root: `${this.model.get('reviewRequest').get('reviewURL')}diff/`,\n            silent: true,\n        });\n\n        this._setInitialURL(document.location.search || '',\n                            RB.getLocationHash());\n    },\n\n    /**\n     * Remove the view from the page.\n     */\n    remove() {\n        RB.ReviewablePageView.prototype.remove.call(this);\n\n        this._$window.off(`resize.${this.cid}`);\n        this._diffFileIndexView.remove();\n    },\n\n    /**\n     * Render the page and begins loading all diffs.\n     *\n     * Returns:\n     *     RB.DiffViewerPageView:\n     *     This instance, for chaining.\n     */\n    render() {\n        RB.ReviewablePageView.prototype.render.call(this);\n\n        this._$controls = $('#view_controls');\n\n        this._diffFileIndexView = new RB.DiffFileIndexView({\n            el: $('#diff_index'),\n            collection: this.model.files,\n        });\n        this._diffFileIndexView.render();\n\n        this.listenTo(this._diffFileIndexView, 'anchorClicked',\n                      this.selectAnchorByName);\n\n        this._diffRevisionLabelView = new RB.DiffRevisionLabelView({\n            el: $('#diff_revision_label'),\n            model: this.model.revision,\n        });\n        this._diffRevisionLabelView.render();\n\n        this.listenTo(this._diffRevisionLabelView, 'revisionSelected',\n                      this._onRevisionSelected);\n\n        /*\n         * Determine whether we need to show the revision selector. If there's\n         * only one revision, we don't need to add it.\n         */\n        const numDiffs = this.model.get('numDiffs');\n\n        if (numDiffs > 1) {\n            this._diffRevisionSelectorView = new RB.DiffRevisionSelectorView({\n                el: $('#diff_revision_selector'),\n                model: this.model.revision,\n                numDiffs: numDiffs,\n            });\n            this._diffRevisionSelectorView.render();\n\n            this.listenTo(this._diffRevisionSelectorView, 'revisionSelected',\n                          this._onRevisionSelected);\n        }\n\n        this._commentsHintView = new RB.DiffCommentsHintView({\n            el: $('#diff_comments_hint'),\n            model: this.model.commentsHint,\n        });\n        this._commentsHintView.render();\n        this.listenTo(this._commentsHintView, 'revisionSelected',\n                      this._onRevisionSelected);\n\n        this._paginationView1 = new RB.PaginationView({\n            el: $('#pagination1'),\n            model: this.model.pagination,\n        });\n        this._paginationView1.render();\n        this.listenTo(this._paginationView1, 'pageSelected',\n                      _.partial(this._onPageSelected, false));\n\n        this._paginationView2 = new RB.PaginationView({\n            el: $('#pagination2'),\n            model: this.model.pagination,\n        });\n        this._paginationView2.render();\n        this.listenTo(this._paginationView2, 'pageSelected',\n                      _.partial(this._onPageSelected, true));\n\n        this._$diffs = $('#diffs')\n            .bindClass(RB.UserSession.instance,\n                       'diffsShowExtraWhitespace', 'ewhl');\n\n        this._chunkHighlighter = new RB.ChunkHighlighterView();\n        this._chunkHighlighter.render().$el.prependTo(this._$diffs);\n\n        $('#diff-details').removeClass('loading');\n        $('#download-diff-action').bindVisibility(this.model,\n                                                  'canDownloadDiff');\n\n        this._$window.on(`resize.${this.cid}`,\n                         _.throttleLayout(this._onWindowResize.bind(this)));\n\n        /*\n         * Begin creating any DiffReviewableViews needed for the page, and\n         * start loading their contents.\n         */\n        if (this.model.diffReviewables.length > 0) {\n            this.model.diffReviewables.each(\n                diffReviewable => this._onDiffReviewableAdded(diffReviewable));\n            $.funcQueue('diff_files').start();\n        }\n\n        return this;\n    },\n\n    /**\n     * Queue the loading of the corresponding diff.\n     *\n     * When the diff is loaded, it will be placed into the appropriate location\n     * in the diff viewer. The anchors on the page will be rebuilt. This will\n     * then trigger the loading of the next file.\n     *\n     * Args:\n     *     diffReviewable (RB.DiffReviewable):\n     *         The diff reviewable for loading and reviewing the diff.\n     *\n     *     options (object):\n     *         The option arguments that control the behavior of this function.\n     *\n     * Option Args:\n     *     showDeleted (boolean):\n     *         Determines whether or not we want to requeue the corresponding\n     *         diff in order to show its deleted content.\n     */\n    queueLoadDiff(diffReviewable, options={}) {\n        $.funcQueue('diff_files').add(() => {\n            const fileDiffID = diffReviewable.get('fileDiffID');\n\n            if (!options.showDeleted && $(`#file${fileDiffID}`).length === 1) {\n                /*\n                 * We already have this diff (probably pre-loaded), and we\n                 * don't want to requeue it to show its deleted content.\n                 */\n                this._renderFileDiff(diffReviewable);\n            } else {\n                /*\n                 * We either want to queue this diff for the first time, or we\n                 * want to requeue it to show its deleted content.\n                 */\n                const prefix = (options.showDeleted\n                                ? '#file'\n                                : '#file_container_');\n\n                diffReviewable.getRenderedDiff({\n                    complete: xhr => {\n                        const $container = $(prefix + fileDiffID)\n                            .parent();\n\n                        if ($container.length === 0) {\n                            /*\n                             * The revision or page may have changed. There's\n                             * no element to work with. Just ignore this and\n                             * move on to the next.\n                             */\n                            return;\n                        }\n\n                        $container.hide();\n\n                        /*\n                         * jQuery's html() and replaceWith() perform checks of\n                         * the HTML, looking for things like <script> tags to\n                         * determine how best to set the HTML, and possibly\n                         * manipulating the string to do some normalization of\n                         * for cases we don't need to worry about. While this\n                         * is all fine for most HTML fragments, this can be\n                         * slow for diffs, given their size, and is\n                         * unnecessary. It's much faster to just set innerHTML\n                         * directly.\n                         */\n                        $container[0].innerHTML = xhr.responseText;\n                        this._renderFileDiff(diffReviewable);\n                    }\n                }, this, options);\n            }\n        });\n    },\n\n    /**\n     * Set up a diff as DiffReviewableView and renders it.\n     *\n     * This will set up a :js:class:`RB.DiffReviewableView` for the given\n     * diffReviewable. The anchors from this diff render will be stored for\n     * navigation.\n     *\n     * Once rendered and set up, the next diff in the load queue will be\n     * pulled from the server.\n     *\n     * Args:\n     *     diffReviewable (RB.DiffReviewable):\n     *         The reviewable diff to render.\n     */\n    _renderFileDiff(diffReviewable) {\n        const elementName = 'file' + diffReviewable.get('fileDiffID');\n        const $el = $(`#${elementName}`);\n\n        if ($el.length === 0) {\n            /*\n             * The user changed revisions before the file finished loading, and\n             * the target element no longer exists. Just return.\n             */\n            $.funcQueue('diff_files').next();\n            return;\n        }\n\n        const diffReviewableView = new RB.DiffReviewableView({\n            el: $el,\n            model: diffReviewable,\n        });\n\n        this._diffFileIndexView.addDiff(this._diffReviewableViews.length,\n                                        diffReviewableView);\n\n        this._diffReviewableViews.push(diffReviewableView);\n        diffReviewableView.render();\n        diffReviewableView.$el.parent().show();\n\n        this.listenTo(diffReviewableView, 'fileClicked', () => {\n            this.selectAnchorByName(diffReviewable.get('file').get('index'));\n        });\n\n        this.listenTo(diffReviewableView, 'chunkClicked', name => {\n            this.selectAnchorByName(name, false);\n        });\n\n        this.listenTo(diffReviewableView, 'moveFlagClicked', line => {\n            this.selectAnchor(this.$(`a[target=${line}]`));\n        });\n\n        /* We must rebuild this every time. */\n        this._updateAnchors(diffReviewableView.$el);\n\n        this.listenTo(diffReviewableView, 'chunkExpansionChanged', () => {\n            /* The selection rectangle may not update -- bug #1353. */\n            this._highlightAnchor(\n                $(this._$anchors[this._selectedAnchorIndex]));\n        });\n\n        if (this._startAtAnchorName) {\n            /* See if we've loaded the anchor the user wants to start at. */\n            let $anchor =\n                $(document.getElementsByName(this._startAtAnchorName));\n\n            /*\n             * Some anchors are added by the template (such as those at\n             * comment locations), but not all are. If the anchor isn't found,\n             * but the URL hash is indicating that we want to start at a\n             * location within this file, add the anchor.\n             * */\n            const urlSplit = this._startAtAnchorName.split(',');\n\n            if ($anchor.length === 0 &&\n                urlSplit.length === 2 &&\n                elementName === urlSplit[0]) {\n                $anchor = $(this.anchorTemplate({\n                    anchorName: this._startAtAnchorName,\n                }));\n\n                diffReviewableView.$el\n                    .find(`tr[line='${urlSplit[1]}']`)\n                        .addClass('highlight-anchor')\n                        .append($anchor);\n            }\n\n            if ($anchor.length !== 0) {\n                this.selectAnchor($anchor);\n                this._startAtAnchorName = null;\n            }\n        }\n\n        this.listenTo(diffReviewableView, 'showDeletedClicked', () => {\n            this.queueLoadDiff(diffReviewable, {showDeleted: true});\n            $.funcQueue('diff_files').start();\n        });\n\n        $.funcQueue('diff_files').next();\n    },\n\n    /**\n     * Select the anchor at a specified location.\n     *\n     * By default, this will scroll the page to position the anchor near\n     * the top of the view.\n     *\n     * Args:\n     *     $anchor (jQuery):\n     *         The anchor to select.\n     *\n     *     scroll (boolean, optional):\n     *         Whether to scroll the page to the anchor. This defaults to\n     *         ``true``.\n     *\n     * Returns:\n     *     boolean:\n     *     ``true`` if the anchor was found and selected. ``false`` if not\n     *     found.\n     */\n    selectAnchor($anchor, scroll) {\n        if (!$anchor || $anchor.length === 0 ||\n            $anchor.parent().is(':hidden')) {\n            return false;\n        }\n\n        if (scroll !== false) {\n            this._navigate({\n                anchor: $anchor.attr('name'),\n                updateURLOnly: true,\n            });\n\n            let scrollAmount = this.DIFF_SCROLLDOWN_AMOUNT;\n\n            if (RB.DraftReviewBannerView.instance) {\n                scrollAmount += RB.DraftReviewBannerView.instance.getHeight();\n            }\n\n            this._$window.scrollTop($anchor.offset().top - scrollAmount);\n        }\n\n        this._highlightAnchor($anchor);\n\n        for (let i = 0; i < this._$anchors.length; i++) {\n            if (this._$anchors[i] === $anchor[0]) {\n                this._selectedAnchorIndex = i;\n                break;\n            }\n        }\n\n        return true;\n    },\n\n    /**\n     * Select an anchor by name.\n     *\n     * Args:\n     *     name (string):\n     *         The name of the anchor.\n     *\n     *     scroll (boolean, optional):\n     *         Whether to scroll the page to the anchor. This defaults to\n     *         ``true``.\n     *\n     * Returns:\n     *     boolean:\n     *     ``true`` if the anchor was found and selected. ``false`` if not\n     *     found.\n     */\n    selectAnchorByName(name, scroll) {\n        return this.selectAnchor($(document.getElementsByName(name)), scroll);\n    },\n\n    /**\n     * Highlight a chunk bound to an anchor element.\n     *\n     * Args:\n     *     $anchor (jQuery):\n     *         The anchor to highlight.\n     */\n    _highlightAnchor($anchor) {\n        this._highlightedChunk =\n            $anchor.closest('tbody')\n            .add($anchor.closest('thead'));\n        this._chunkHighlighter.highlight(this._highlightedChunk);\n    },\n\n    /**\n     * Update the list of known anchors.\n     *\n     * This will update the list of known anchors based on all named anchors\n     * in the specified table. This is called after every part of the diff\n     * that is loaded.\n     *\n     * If no anchor is selected, this will try to select the first one.\n     *\n     * Args:\n     *     $table (jQuery):\n     *         The table containing anchors.\n     */\n    _updateAnchors($table) {\n        this._$anchors = this._$anchors.add($table.find('th a[name]'));\n\n        /* Skip over the change index to the first item. */\n        if (this._selectedAnchorIndex === -1 && this._$anchors.length > 0) {\n            this._selectedAnchorIndex = 0;\n            this._highlightAnchor(\n                $(this._$anchors[this._selectedAnchorIndex]));\n        }\n    },\n\n    /**\n     * Return the next navigatable anchor.\n     *\n     * This will take a direction to search, starting at the currently\n     * selected anchor. The next anchor matching one of the types in the\n     * anchorTypes bitmask will be returned. If no anchor is found,\n     * null will be returned.\n     *\n     * Args:\n     *     dir (number):\n     *         The direction to navigate in. This should be\n     *         :js:data:`SCROLL_BACKWARD` or js:data:`SCROLL_FORWARD`.\n     *\n     *     anchorTypes (number):\n     *         A bitmask of types to consider when searching for the next\n     *         anchor.\n     *\n     * Returns:\n     *     jQuery:\n     *     The anchor, if found. If an anchor was not found, ``null`` is\n     *     returned.\n     */\n    _getNextAnchor(dir, anchorTypes) {\n        for (let i = this._selectedAnchorIndex + dir;\n             i >= 0 && i < this._$anchors.length;\n             i += dir) {\n            const $anchor = $(this._$anchors[i]);\n\n            if ($anchor.closest('tr').hasClass('dimmed')) {\n                continue;\n            }\n\n            if (((anchorTypes & this.ANCHOR_COMMENT) &&\n                 $anchor.hasClass('commentflag-anchor')) ||\n                ((anchorTypes & this.ANCHOR_FILE) &&\n                 $anchor.hasClass('file-anchor')) ||\n                ((anchorTypes & this.ANCHOR_CHUNK) &&\n                 $anchor.hasClass('chunk-anchor'))) {\n                return $anchor;\n            }\n        }\n\n        return null;\n    },\n\n    /**\n     * Select the previous file's header on the page.\n     */\n    _selectPreviousFile() {\n        this.selectAnchor(this._getNextAnchor(this.SCROLL_BACKWARD,\n                                              this.ANCHOR_FILE));\n    },\n\n    /**\n     * Select the next file's header on the page.\n     */\n    _selectNextFile() {\n        this.selectAnchor(this._getNextAnchor(this.SCROLL_FORWARD,\n                                              this.ANCHOR_FILE));\n    },\n\n    /**\n     * Select the previous diff chunk on the page.\n     */\n    _selectPreviousDiff() {\n        this.selectAnchor(\n            this._getNextAnchor(this.SCROLL_BACKWARD,\n                                this.ANCHOR_CHUNK | this.ANCHOR_FILE));\n    },\n\n    /**\n     * Select the next diff chunk on the page.\n     */\n    _selectNextDiff() {\n        this.selectAnchor(\n            this._getNextAnchor(this.SCROLL_FORWARD,\n                                this.ANCHOR_CHUNK | this.ANCHOR_FILE));\n    },\n\n    /**\n     * Select the previous comment on the page.\n     */\n    _selectPreviousComment() {\n        this.selectAnchor(\n            this._getNextAnchor(this.SCROLL_BACKWARD, this.ANCHOR_COMMENT));\n    },\n\n    /**\n     * Select the next comment on the page.\n     */\n    _selectNextComment() {\n        this.selectAnchor(\n            this._getNextAnchor(this.SCROLL_FORWARD, this.ANCHOR_COMMENT));\n    },\n\n    /**\n     * Re-center the currently selected area on the page.\n     */\n    _recenterSelected() {\n        this.selectAnchor($(this._$anchors[this._selectedAnchorIndex]));\n    },\n\n   /**\n    * Create a comment for a chunk of a diff\n    */\n    _createComment() {\n        const chunkID = this._highlightedChunk[0].id;\n        const chunkElement = document.getElementById(chunkID);\n\n        if (chunkElement) {\n            const lineElements = chunkElement.getElementsByTagName('tr');\n            const beginLineNum = lineElements[0].getAttribute('line');\n            const beginNode = lineElements[0].cells[2];\n            const endLineNum = lineElements[lineElements.length - 1]\n                .getAttribute('line');\n            const endNode = lineElements[lineElements.length - 1].cells[2];\n\n            this._diffReviewableViews.forEach(diffReviewableView => {\n                if ($.contains(diffReviewableView.el, beginNode)){\n                    diffReviewableView.createComment(beginLineNum, endLineNum,\n                                                     beginNode, endNode);\n                }\n            });\n        }\n    },\n\n    /**\n     * Toggle the display of diff chunks that only contain whitespace changes.\n     *\n     * Returns:\n     *     boolean:\n     *     ``false``, to prevent events from bubbling up.\n     */\n    _toggleWhitespaceOnlyChunks() {\n        this._diffReviewableViews.forEach(\n            view => view.toggleWhitespaceOnlyChunks());\n\n        this._$controls.find('.ws').toggle();\n\n        return false;\n    },\n\n    /**\n     * Toggle the display of extra whitespace highlights on diffs.\n     *\n     * A cookie will be set to the new whitespace display setting, so that\n     * the new option will be the default when viewing diffs.\n     *\n     * Returns:\n     *     boolean:\n     *     ``false``, to prevent events from bubbling up.\n     */\n    _toggleShowExtraWhitespace() {\n        this._$controls.find('.ew').toggle();\n        RB.UserSession.instance.toggleAttr('diffsShowExtraWhitespace');\n\n        return false;\n    },\n\n    /**\n     * Set the initial URL for the page.\n     *\n     * This accomplishes two things:\n     *\n     * 1. The user may have viewed ``diff/``, and not ``diff/<revision>/``,\n     *    but we want to always show the revision in the URL. This ensures\n     *    we have a URL equivalent to the one we get when clicking a revision\n     *    in the slider.\n     *\n     * 2. We want to add back any hash and query string that may have been\n     *    stripped away, so the URL doesn't appear to suddenly change from\n     *    what the user expected.\n     *\n     * This won't invoke any routes or store any new history. The back button\n     * will correctly bring the user to the previous page.\n     *\n     * Args:\n     *     queryString (string):\n     *         The query string provided in the URL.\n     *\n     *     anchor (string):\n     *         The anchor provided in the URL.\n     */\n    _setInitialURL(queryString, anchor) {\n        this._startAtAnchorName = anchor || null;\n\n        this._navigate({\n            queryString: queryString,\n            anchor: anchor,\n            updateURLOnly: true,\n        });\n    },\n\n    /**\n     * Navigate to a new page state by calculating and setting a URL.\n     *\n     * This builds a URL consisting of the revision range and any other\n     * state that impacts the view of the page (page number and filtered list\n     * of filename patterns), updating the current location in the browser and\n     * (by default) triggering a route change.\n     *\n     * Args:\n     *     options (object):\n     *         The options for the navigation.\n     *\n     * Option Args:\n     *     revision (number, optional):\n     *         The revision (or first part of an interdiff range) to view.\n     *         Defaults to the current revision.\n     *\n     *     interdiffRevision (number, optional):\n     *         The second revision of an interdiff range to view.\n     *         Defaults to the current revision for the interdiff, if any.\n     *\n     *     page (number, optional):\n     *         A page number to specify. If not provided, and if the revision\n     *         range has not changed, the existing value (or lack of one)\n     *         in the URL will be used. If the revision range has changed and\n     *         a value was not explicitly provided, a ``page=`` will not be\n     *         added to the URL.\n     *\n     *     anchor (string, optional):\n     *         An anchor name to navigate to. This cannot begin with ``#``.\n     *\n     *     queryString (string, optional):\n     *         An explicit query string to use for the URL. If specified,\n     *         a query string will not be computed. This must begin with ``?``.\n     *\n     *     updateURLOnly (boolean, optional):\n     *         If ``true``, the location in the browser will be updated, but\n     *         a route will not be triggered.\n     */\n    _navigate(options) {\n        const curRevision = this.model.revision.get('revision');\n        const curInterdiffRevision =\n            this.model.revision.get('interdiffRevision');\n\n        /* Start the URL off with the revision range. */\n        const revision = (options.revision !== undefined\n                          ? options.revision\n                          : curRevision);\n        const interdiffRevision = (options.interdiffRevision !== undefined\n                                   ? options.interdiffRevision\n                                   : curInterdiffRevision);\n\n        let baseURL = revision;\n\n        if (interdiffRevision) {\n            baseURL += `-${interdiffRevision}`;\n        }\n\n        baseURL += '/';\n\n        /*\n         * If an explicit query string is provided, we'll just use that.\n         * Otherwise, we'll generate one.\n         */\n        let queryData = options.queryString;\n\n        if (queryData === undefined) {\n            /*\n            * We'll build as an array to maintain a specific order, which\n            * helps with caching and testing.\n            */\n            queryData = [];\n\n            /*\n             * We want to be smart about when we include ?page=. We always\n             * include it if it's explicitly specified in options. If it's\n             * not, then we'll fall back to what's currently in the URL, but\n             * only if the revision range is staying the same, otherwise we're\n             * taking it out. This simulates the behavior we've always had.\n             */\n            let page = options.page;\n\n            if (page === undefined &&\n                revision === curRevision &&\n                interdiffRevision === curInterdiffRevision) {\n                /*\n                 * It's the same, so we can plug in the page from the\n                 * current URL.\n                 */\n                page = this.model.pagination.get('currentPage');\n            }\n\n            if (page && page !== 1) {\n                queryData.push({\n                    name: 'page',\n                    value: page,\n                });\n            }\n\n            const filenamePatterns = this.model.get('filenamePatterns');\n\n            if (filenamePatterns && filenamePatterns.length > 0) {\n                queryData.push({\n                    name: 'filenames',\n                    value: filenamePatterns,\n                });\n            }\n        }\n\n        const url = Djblets.buildURL({\n            baseURL: baseURL,\n            queryData: queryData,\n            anchor: options.anchor,\n        });\n\n        /*\n         * Determine if we're performing the navigation or just updating the\n         * displayed URL.\n         */\n        let navOptions;\n\n        if (options.updateURLOnly) {\n            navOptions = {\n                replace: true,\n                trigger: false,\n            };\n        } else {\n            navOptions = {\n                trigger: true,\n            };\n        }\n\n        this.router.navigate(url, navOptions);\n    },\n\n    /**\n     * Handler for when a RB.DiffReviewable is added.\n     *\n     * This will add a placeholder entry for the file and queue the diff\n     * for loading/rendering.\n     *\n     * Args:\n     *     diffReviewable (RB.DiffReviewable):\n     *         The DiffReviewable that was added.\n     */\n    _onDiffReviewableAdded(diffReviewable) {\n        const file = diffReviewable.get('file');\n\n        this._$diffs.append(this._fileEntryTemplate({\n            id: file.id,\n            newFile: file.get('isnew'),\n            filename: file.get('depotFilename'),\n        }));\n\n        this.queueLoadDiff(diffReviewable);\n    },\n\n    /**\n     * Handler for when the window resizes.\n     *\n     * Triggers a relayout of all the diffs and the chunk highlighter.\n     */\n    _onWindowResize() {\n        for (let i = 0; i < this._diffReviewableViews.length; i++) {\n            this._diffReviewableViews[i].updateLayout();\n        }\n\n        this._chunkHighlighter.updateLayout();\n    },\n\n    /**\n     * Callback for when a new revision is selected.\n     *\n     * This supports both single revisions and interdiffs. If `base` is 0, a\n     * single revision is selected. If not, the interdiff between `base` and\n     * `tip` will be shown.\n     *\n     * This will always implicitly navigate to page 1 of any paginated diffs.\n     */\n    _onRevisionSelected(revisions) {\n        let base = revisions[0];\n        let tip = revisions[1];\n\n        if (base === 0) {\n            /* This is a single revision, not an interdiff. */\n            base = tip;\n            tip = null;\n        }\n\n        this._navigate({\n            revision: base,\n            interdiffRevision: tip,\n        });\n    },\n\n    /**\n     * Callback for when a new page is selected.\n     *\n     * Navigates to the same revision with a different page number.\n     *\n     * Args:\n     *     scroll (boolean):\n     *         Whether to scroll to the file index.\n     *\n     *     page (number):\n     *         The page number to navigate to.\n     */\n    _onPageSelected(scroll, page) {\n        if (scroll) {\n            this.selectAnchorByName('index_header', true);\n        }\n\n        this._navigate({\n            page: page,\n        });\n    },\n});\n_.extend(RB.DiffViewerPageView.prototype, RB.KeyBindingsMixin);\n"]}