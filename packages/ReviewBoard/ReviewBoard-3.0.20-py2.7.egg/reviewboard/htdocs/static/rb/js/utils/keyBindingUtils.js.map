{"version":3,"sources":["keyBindingUtils.es6.js"],"names":[],"mappings":";;AAAA;;;;;;AAMA,GAAG,gBAAH,GAAsB;AAClB;;;;;;;;;AASA,uBAVkB,iCAUI;AAClB,aAAK,GAAL,CAAS,EAAT,2BAAoC,KAAK,GAAzC,EAAgD,EAAE,IAAF,CAAO,UAAS,GAAT,EAAc;AACjE,gBAAI,IAAI,MAAJ,IAAc,IAAI,OAAlB,IAA6B,IAAI,OAAjC,IACA,IAAI,MAAJ,CAAW,OAAX,KAAuB,OADvB,IAEA,IAAI,MAAJ,CAAW,OAAX,KAAuB,UAFvB,IAGA,IAAI,MAAJ,CAAW,iBAHf,EAGkC;AAC9B;AACA;AACH;;AAED,gBAAM,UAAU,OAAO,YAAP,CAAoB,IAAI,KAAxB,CAAhB;;AATiE;AAAA;AAAA;;AAAA;AAWjE,qCAAiB,OAAO,IAAP,CAAY,KAAK,WAAjB,CAAjB,8HAAgD;AAAA,wBAAvC,IAAuC;;AAC5C,wBAAI,KAAK,OAAL,CAAa,OAAb,MAA0B,CAAC,CAA/B,EAAkC;AAC9B,4BAAI,eAAJ;AACA,4BAAI,cAAJ;;AAEA,4BAAI,OAAO,KAAK,WAAL,CAAiB,IAAjB,CAAX;;AAEA,4BAAI,CAAC,EAAE,UAAF,CAAa,IAAb,CAAL,EAAyB;AACrB,mCAAO,KAAK,IAAL,CAAP;AACH;;AAED,6BAAK,IAAL,CAAU,IAAV,EAAgB,GAAhB;AACH;AACJ;AAxBgE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAyBpE,SAzB+C,EAyB7C,IAzB6C,CAAhD;AA0BH,KArCiB;;;AAuClB;;;;;AAKA,yBA5CkB,mCA4CM;AACpB,aAAK,GAAL,CAAS,GAAT,2BAAqC,KAAK,GAA1C;AACH,KA9CiB;;;AAgDlB;;;;;;AAMA,kBAtDkB,0BAsDH,MAtDG,EAsDK;AACnB,YAAM,SAAS,SAAS,IAAT,CAAc,SAAd,CAAwB,cAAxB,CAAuC,IAAvC,CAA4C,IAA5C,EAAkD,MAAlD,CAAf;;AAEA,aAAK,mBAAL;;AAEA,eAAO,MAAP;AACH,KA5DiB;;;AA8DlB;;;;;;AAMA,oBApEkB,8BAoEC;AACf,YAAM,SAAS,SAAS,IAAT,CAAc,SAAd,CAAwB,gBAAxB,CAAyC,IAAzC,CAA8C,IAA9C,CAAf;;AAEA,aAAK,qBAAL;;AAEA,eAAO,MAAP;AACH;AA1EiB,CAAtB","file":"keyBindingUtils.js","sourcesContent":["/**\n * A mixin for views that provides key binding functionality.\n *\n * Views using this mixin can provide a keyBindings map that maps a set of\n * key characters to a function.\n */\nRB.KeyBindingsMixin = {\n    /**\n     * Enable key bindings for the view.\n     *\n     * Begins listening for any key bindings registered in the view's\n     * keyBindings map, and calls the appropriate function.\n     *\n     * By default, this is called automatically when setting up the view,\n     * by way of delegateEvents.\n     */\n    delegateKeyBindings() {\n        this.$el.on(`keypress.keybindings.${this.cid}`, _.bind(function(evt) {\n            if (evt.altKey || evt.ctrlKey || evt.metaKey ||\n                evt.target.tagName === 'INPUT' ||\n                evt.target.tagName === 'TEXTAREA' ||\n                evt.target.isContentEditable) {\n                /* These are all unsupported, and things we want to ignore. */\n                return;\n            }\n\n            const keyChar = String.fromCharCode(evt.which);\n\n            for (let keys of Object.keys(this.keyBindings)) {\n                if (keys.indexOf(keyChar) !== -1) {\n                    evt.stopPropagation();\n                    evt.preventDefault();\n\n                    let func = this.keyBindings[keys];\n\n                    if (!_.isFunction(func)) {\n                        func = this[func];\n                    }\n\n                    func.call(this, evt);\n                }\n            }\n        }, this));\n    },\n\n    /**\n     * Disable key bindings for the view.\n     *\n     * By default, this is called automatically when calling undelegateEvents.\n     */\n    undelegateKeyBindings() {\n        this.$el.off(`keypress.keybindings.${this.cid}`);\n    },\n\n    /**\n     * Delegate both DOM events and key binding events.\n     *\n     * This overrides the default Backbone.View.delegateEvents to automatically\n     * call delegateKeyBindings.\n     */\n    delegateEvents(events) {\n        const result = Backbone.View.prototype.delegateEvents.call(this, events);\n\n        this.delegateKeyBindings();\n\n        return result;\n    },\n\n    /**\n     * Undelegate both DOM events and key binding events.\n     *\n     * This overrides the default Backbone.View.undelegateEvents to\n     * automatically call undelegateKeyBindings.\n     */\n    undelegateEvents() {\n        const result = Backbone.View.prototype.undelegateEvents.call(this);\n\n        this.undelegateKeyBindings();\n\n        return result;\n    }\n};\n"]}