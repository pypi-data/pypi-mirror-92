{"version":3,"sources":["reviewRequestFieldViews.es6.js"],"names":[],"mappings":"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","file":"reviewRequestFieldViews.js","sourcesContent":["(function() {\n\n\nconst Fields = {};\n\n\n/**\n * Base class for all field views.\n */\nFields.BaseFieldView = Backbone.View.extend({\n    /**\n     * The name of the property in the model for if this field is editable.\n     */\n    editableProp: 'editable',\n\n    /** Whether the contents of the field should be stored in extraData. */\n    useExtraData: true,\n\n    /**\n     * Initialize the view.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the view.\n     *\n     * Option Args:\n     *     fieldID (string):\n     *         The ID of the field.\n     */\n    initialize(options) {\n        Backbone.View.prototype.initialize.call(this, options);\n        this.options = options;\n        this.fieldID = options.fieldID;\n        this.jsonFieldName = options.jsonFieldName ||\n                             this.jsonFieldName ||\n                             this.fieldID;\n        this._fieldName = undefined;\n        this.$el.data('field-id', this.fieldID);\n    },\n\n    /**\n     * The name of the attribute within the model.\n     *\n     * Returns:\n     *     string:\n     *     The namee of the attribute that this field will reflect.\n     */\n    fieldName() {\n        /*\n         * This implementation will convert names with underscores to camel\n         * case. This covers the typical naming between Python and JavaScript.\n         * If subclasses need something different, they can override this with\n         * either a new function or a regular attribute.\n         */\n        if (this._fieldName === undefined) {\n            this._fieldName = this.fieldID.replace(\n                /_(.)/g, (m, c) => c.toUpperCase());\n        }\n\n        return this._fieldName;\n    },\n\n    /**\n     * Load the stored value for the field.\n     *\n     * This will load from the draft if representing a built-in field\n     * (``useExtraData === false``) or from extra_data if a custom field\n     * (``useExtraData === true``).\n     *\n     * Args:\n     *     options (object):\n     *         Options for :js:func:`RB.ReviewRequestEditor.getDraftField`.\n     *\n     * Returns:\n     *     *:\n     *     The stored value for the field.\n     */\n    _loadValue(options) {\n        const fieldName = (this.useExtraData\n                           ? this.jsonFieldName\n                           : _.result(this, 'fieldName'));\n\n        return this.model.getDraftField(\n            fieldName,\n            _.defaults({\n                useExtraData: this.useExtraData,\n            }, options));\n    },\n\n    /**\n     * Save a new value for the field.\n     *\n     * Args:\n     *     value (*):\n     *         The new value for the field.\n     *\n     *     options (object):\n     *         Options for the save operation.\n     */\n    _saveValue(value, options) {\n        this.model.setDraftField(\n            _.result(this, 'fieldName'),\n            value,\n            _.defaults({\n                jsonFieldName: this.jsonFieldName,\n                useExtraData: this.useExtraData,\n            }, options));\n    },\n\n    /**\n     * Return whether the field has an unsaved editor open.\n     *\n     * This should be overridden by subclasses, if necessary.\n     *\n     * Returns:\n     *     boolean:\n     *     Whether the field is unsaved.\n     */\n    needsSave() {\n        return false;\n    },\n\n    /**\n     * Finish the field's save operation.\n     *\n     * This should be overridden by subclasses, if necessary.\n     */\n    finishSave() {\n    },\n});\n\n\n/**\n * A field view for text-based fields.\n */\nFields.TextFieldView = Fields.BaseFieldView.extend({\n    /**\n     * Autocomplete definitions.\n     *\n     * This should be overridden by subclasses.\n     */\n    autocomplete: null,\n\n    /** Whether the view is multi-line or single line. */\n    multiline: false,\n\n    /** Whether the field allows Markdown-formatted text. */\n    allowRichText: false,\n\n    /**\n     * Whether edits should be triggered only by clicking on the icon.\n     *\n     * If this is true, edits can only be triggered by clicking on the icon.\n     * If this is false, clicks on the field itself will also trigger an edit.\n     */\n    useEditIconOnly: false,\n\n    /**\n     * The model attribute for if this field is rich text.\n     *\n     * This is the name of the attribute which indicates whether the field\n     * contains Markdown-formatted text or plain text.\n     *\n     * Returns:\n     *     string:\n     *     The name of the model atribute indicating whether the field contains\n     *     rich text.\n     */\n    richTextAttr() {\n        return this.allowRichText\n               ? `${_.result(this, 'fieldName')}RichText`\n               : null;\n    },\n\n    /**\n     * Initialize the view.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the view. See the parent class for details.\n     */\n    initialize(options) {\n        Fields.BaseFieldView.prototype.initialize.call(this, options);\n\n        this.jsonTextTypeFieldName = (this.jsonFieldName === 'text'\n                                      ? 'text_type'\n                                      : `${this.jsonFieldName}_text_type`);\n    },\n\n    /**\n     * Return the type to use for the inline editor view.\n     *\n     * Returns:\n     *     function:\n     *     The constructor for the inline editor class to instantiate.\n     */\n    _getInlineEditorClass() {\n        return (this.allowRichText\n                ? RB.RichTextInlineEditorView\n                : RB.InlineEditorView);\n    },\n\n    /**\n     * Render the view.\n     *\n     * Returns:\n     *     RB.ReviewRequestFields.TextFieldView:\n     *     This object, for chaining.\n     */\n    render() {\n        if (!this.$el.hasClass('editable')) {\n            return this;\n        }\n\n        const fieldName = _.result(this, 'fieldName');\n        const EditorClass = this._getInlineEditorClass();\n\n        const inlineEditorOptions = {\n            el: this.$el,\n            formClass: `${this.$el.prop('id')}-editor`,\n            editIconClass: 'rb-icon rb-icon-edit',\n            enabled: this.model.get(this.editableProp),\n            multiline: this.multiline,\n            useEditIconOnly: this.useEditIconOnly,\n            showRequiredFlag: this.$el.hasClass('required'),\n            deferEventSetup: this.autocomplete !== null,\n        };\n\n        if (this.allowRichText) {\n            _.extend(inlineEditorOptions, {\n                textEditorOptions: {\n                    minHeight: 0,\n                    richText: this._loadRichTextValue(),\n                },\n                matchHeight: false,\n                hasRawValue: true,\n                rawValue: this._loadValue({\n                    useRawTextValue: true,\n                }) || '',\n            });\n        }\n\n        this.inlineEditorView = new EditorClass(inlineEditorOptions);\n        this.inlineEditorView.render();\n\n        this.listenTo(this.inlineEditorView, 'beginEdit',\n                      () => this.model.incr('editCount'));\n\n        this.listenTo(this.inlineEditorView, 'resize',\n                      () => this.trigger('resize'));\n\n        this.listenTo(this.inlineEditorView, 'cancel', () => {\n            this.trigger('resize');\n            this.model.decr('editCount');\n        });\n\n        this.listenTo(this.inlineEditorView, 'complete', value => {\n            this.trigger('resize');\n            this.model.decr('editCount');\n\n            const saveOptions = {\n                allowMarkdown: this.allowRichText,\n                error: err => {\n                    this._formatField();\n                    this.trigger('fieldError', err);\n                },\n                success: () => {\n                    this._formatField();\n                    this.trigger('fieldSaved');\n                },\n            };\n\n            if (this.allowRichText) {\n                saveOptions.richText =\n                    this.inlineEditorView.textEditor.richText;\n                saveOptions.jsonTextTypeFieldName = this.jsonTextTypeFieldName;\n            }\n\n            this._saveValue(value, saveOptions);\n        });\n\n        if (this.autocomplete !== null) {\n            this._buildAutoComplete();\n            this.inlineEditorView.setupEvents();\n        }\n\n        this.listenTo(\n            this.model,\n            `change:${this.editableProp}`,\n            (model, editable) => {\n                if (editable) {\n                    this.inlineEditorView.enable();\n                } else {\n                    this.inlineEditorView.disable();\n                }\n            });\n\n        this.listenTo(this.model, `fieldChanged:${fieldName}`,\n                      this._formatField);\n\n        return this;\n    },\n\n    /**\n     * Convert an item to a hyperlink.\n     *\n     * Args:\n     *     item (object):\n     *         The item to link. The content is up to the caller.\n     *\n     *     options (object):\n     *         Options to control the linking behavior.\n     *\n     * Option Args:\n     *     cssClass (string, optional):\n     *         The optional CSS class to add to the link.\n     *\n     *     makeItemText (function, optional):\n     *         A function that takes the item and returns the text for the\n     *         link. If not specified, the item itself will be used as the\n     *         text.\n     *\n     *     makeItemURL (function, optional):\n     *         A function that takes the item and returns the URL for the link.\n     *         If not specified, the item itself will be used as the URL.\n     *\n     * Returns:\n     *     jQuery:\n     *     The resulting link element wrapped in jQuery.\n     */\n    _convertToLink(item, options={}) {\n        if (!item) {\n            return $();\n        }\n\n        const $link = $('<a/>')\n            .attr('href', (options.makeItemURL\n                           ? options.makeItemURL(item)\n                           : item))\n            .text(options.makeItemText ? options.makeItemText(item) : item);\n\n        if (options.cssClass) {\n            $link.addClass(options.cssClass);\n        }\n\n        return $link;\n    },\n\n    /**\n     * Add auto-complete functionality to the field.\n     */\n    _buildAutoComplete() {\n        const ac = this.autocomplete;\n        const reviewRequest = this.model.get('reviewRequest');\n\n        this.inlineEditorView.$field\n            .rbautocomplete({\n                formatItem: data => {\n                    let s = data[ac.nameKey];\n\n                    if (ac.descKey && data[ac.descKey]) {\n                        s += ` <span>(${_.escape(data[ac.descKey])})</span>`;\n                    }\n\n                    return s;\n                },\n                matchCase: false,\n                multiple: true,\n                parse: data => {\n                    const items = _.isFunction(ac.fieldName)\n                                  ? ac.fieldName(data)\n                                  : data[ac.fieldName];\n\n                    return items.map(item => {\n                        if (ac.parseItem) {\n                            item = ac.parseItem(item);\n                        }\n\n                        return {\n                            data: item,\n                            value: item[ac.nameKey],\n                            result: item[ac.nameKey],\n                        };\n                    });\n                },\n                url: SITE_ROOT + reviewRequest.get('localSitePrefix') +\n                     'api/' + (ac.resourceName || ac.fieldName) + '/',\n                extraParams: ac.extraParams,\n                cmp: ac.cmp,\n                width: 350,\n                error: xhr => {\n                    let text;\n\n                    try {\n                        text = JSON.parse(xhr.responseText).err.msg;\n                    } catch (e) {\n                        text = `HTTP ${xhr.status} ${xhr.statusText}`;\n                    }\n\n                    alert(text);\n                },\n            })\n            .on('autocompleteshow', () => {\n                /*\n                 * Add the footer to the bottom of the results pane the\n                 * first time it's created.\n                 *\n                 * Note that we may have multiple .ui-autocomplete-results\n                 * elements, and we don't necessarily know which is tied to\n                 * this. So, we'll look for all instances that don't contain\n                 * a footer.\n                 */\n                const resultsPane = $('.ui-autocomplete-results:not(' +\n                                      ':has(.ui-autocomplete-footer))');\n\n                if (resultsPane.length > 0) {\n                    $('<div/>')\n                        .addClass('ui-autocomplete-footer')\n                        .text(gettext('Press Tab to auto-complete.'))\n                        .appendTo(resultsPane);\n                }\n            });\n    },\n\n    /**\n     * Format the contents of the field.\n     *\n     * This will apply the contents of the model attribute to the field\n     * element. If the field defines a ``formatValue`` method, this will use\n     * that to do the formatting. Otherwise, the element will just be set to\n     * contain the text of the value.\n     */\n    _formatField() {\n        const value = this._loadValue();\n\n        if (_.isFunction(this.formatValue)) {\n            this.formatValue(value);\n        } else {\n            this.$el.text(value);\n        }\n    },\n\n    /**\n     * Return whether the field has an unsaved editor open.\n     *\n     * Returns:\n     *     boolean:\n     *     Whether the field is unsaved.\n     */\n    needsSave() {\n        return this.inlineEditorView && this.inlineEditorView.isDirty();\n    },\n\n    /**\n     * Finish the field's save operation.\n     */\n    finishSave() {\n        this.inlineEditorView.submit();\n    },\n\n    /**\n     * Load the rich text value for the field.\n     *\n     * This will look up the rich text boolean attribute for built-in\n     * fields or the text type information in extra_data, returning\n     * whether the field is set to use rich text.\n     *\n     * Returns:\n     *     boolean:\n     *     Whether the field is set for rich text. This will be\n     *     ``undefined`` if an explicit value isn't stored.\n     */\n    _loadRichTextValue() {\n        if (this.useExtraData) {\n            const textTypeFieldName = this.jsonTextTypeFieldName;\n            const textType = this.model.getDraftField(\n                textTypeFieldName,\n                {\n                    useExtraData: true,\n                    useRawTextValue: true,\n                });\n\n            if (textType === undefined) {\n                return undefined;\n            }\n\n            console.assert(\n                textType === 'plain' || textType === 'markdown',\n                `Text type \"${textType}\" in field \"${textTypeFieldName}\" ` +\n                `not supported.`);\n\n            return textType === 'markdown';\n        } else {\n            return this.model.getDraftField(_.result(this, 'richTextAttr'));\n        }\n    },\n});\n\n\n/**\n * A field view for multiline text-based fields.\n */\nFields.MultilineTextFieldView = Fields.TextFieldView.extend({\n    multiline: true,\n    allowRichText: null,\n\n    /**\n     * Initialize the view.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the view.\n     */\n    initialize(options) {\n        Fields.TextFieldView.prototype.initialize.call(this, options);\n\n        /*\n         * If this field is coming from an extension which doesn't specify any\n         * JS-side version, we need to pull some data out of the markup.\n         */\n        if (this.allowRichText === null) {\n            this.allowRichText = this.$el.data('allow-markdown');\n\n            const reviewRequest = this.model.get('reviewRequest');\n            const extraData = reviewRequest.draft.get('extraData');\n\n            const rawValue = this.$el.data('raw-value');\n            extraData[this.jsonFieldName] = (rawValue !== undefined\n                                             ? rawValue || ''\n                                             : this.$el.text());\n            this.$el.removeAttr('data-raw-value');\n\n            if (this.allowRichText) {\n                extraData[this.jsonTextTypeFieldName] =\n                    (this.$el.hasClass('rich-text') ? 'markdown' : 'plain');\n            }\n        }\n    },\n\n    /**\n     * Linkify a block of text.\n     *\n     * This turns URLs, /r/#/ paths, and bug numbers into clickable links. It's\n     * a wrapper around RB.formatText that handles passing in the bug tracker.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the text formatting.\n     *\n     * Option Args:\n     *     newText (string, optional):\n     *         The new text to format into the element. If not specified, the\n     *         existing contents of the element are used.\n     */\n    formatText(options) {\n        const reviewRequest = this.model.get('reviewRequest');\n\n        options = _.defaults({\n            bugTrackerURL: reviewRequest.get('bugTrackerURL'),\n            isHTMLEncoded: true,\n        }, options);\n\n        if (this.allowRichText) {\n            options.richText = this._loadRichTextValue();\n        }\n\n        RB.formatText(this.$el, options);\n\n        this.$('img').load(() => this.trigger('resize'));\n    },\n\n    /**\n     * Render the view.\n     *\n     * Returns:\n     *     RB.ReviewRequestFields.MultilineTextFieldView:\n     *     This object, for chaining.\n     */\n    render() {\n        Fields.TextFieldView.prototype.render.call(this);\n\n        this.formatText();\n\n        return this;\n    },\n\n    /**\n     * Format the value into the field.\n     *\n     * Args:\n     *     data (object):\n     *         The new value of the field.\n     */\n    formatValue(data) {\n        if (this.allowRichText) {\n            this.formatText({ newText: data });\n        }\n    },\n});\n\n\n/**\n * A field view for fields that include multiple comma-separated values.\n */\nFields.CommaSeparatedValuesTextFieldView = Fields.TextFieldView.extend({\n    useEditIconOnly: true,\n\n    /**\n     * Convert an array of items to a list of hyperlinks.\n     *\n     * Args:\n     *     list (Array);\n     *         An array of items. The contents of the item is up to the caller.\n     *\n     *     options (object):\n     *         Options to control the linking behavior.\n     *\n     * Option Args:\n     *     cssClass (string, optional):\n     *         The optional CSS class to add for each link.\n     *\n     *     makeItemText (function, optional):\n     *         A function that takes an item and returns the text for the link.\n     *         If not specified, the item itself will be used as the text.\n     *\n     *     makeItemURL (function, optional):\n     *         A function that takes an item and returns the URL for the link.\n     *         If not specified, the item itself will be used as the URL.\n     *\n     * Returns:\n     *     jQuery:\n     *     The resulting link elements in a jQuery list.\n     */\n    _urlizeList(list, options={}) {\n        let $links = $();\n\n        if (list) {\n            for (let i = 0; i < list.length; i++) {\n                $links = $links.add(this._convertToLink(list[i], options));\n\n                if (i < list.length - 1) {\n                    $links = $links.add(document.createTextNode(', '));\n                }\n            }\n        }\n\n        return $links;\n    },\n\n    /**\n     * Format the value into the field.\n     *\n     * Args:\n     *     data (Array):\n     *         The new value of the field.\n     */\n    formatValue(data) {\n        data = data || [];\n        this.$el.html(data.join(', '));\n    },\n});\n\n\n/**\n * A field view for checkbox fields.\n */\nFields.CheckboxFieldView = Fields.BaseFieldView.extend({\n    /**\n     * Render the field.\n     *\n     * Returns:\n     *     RB.ReviewRequestFields.CheckboxFieldView:\n     *     This object, for chaining.\n     */\n    render() {\n        Fields.BaseFieldView.prototype.render.call(this);\n\n        this.$el.change(() => {\n            this._saveValue(this.$el.is(':checked'), {\n                error: err => this.trigger('fieldError', err),\n                success: () => this.trigger('fieldSaved'),\n            });\n        });\n\n        return this;\n    },\n});\n\n\n/**\n * A field view for dropdown fields.\n */\nFields.DropdownFieldView = Fields.BaseFieldView.extend({\n    /**\n     * Render the field.\n     *\n     * Returns:\n     *     RB.ReviewRequestFields.DropdownFieldView:\n     *     This object, for chaining.\n     */\n    render() {\n        Fields.BaseFieldView.prototype.render.call(this);\n\n        this.$el.change(() => {\n            this._saveValue(this.$el.val(), {\n                error: err => this.trigger('fieldError', err),\n                success: () => this.trigger('fieldSaved'),\n            });\n        });\n\n        return this;\n    },\n});\n\n\n/**\n * A field view for date fields.\n */\nFields.DateFieldView = Fields.TextFieldView.extend({\n    /**\n     * Render the field.\n     *\n     * Returns:\n     *     RB.ReviewRequestFields.DateFieldView:\n     *     This object, for chaining.\n     */\n    render() {\n        Fields.TextFieldView.prototype.render.call(this);\n\n        this.inlineEditorView.$field\n            .datepicker({\n                changeMonth: true,\n                changeYear: true,\n                dateFormat: $.datepicker.ISO_8601,\n                showButtonPanel: true,\n                onSelect: (dateText, instance) => {\n                    if (dateText !== instance.lastVal) {\n                        this.inlineEditorView._dirty = true;\n                    }\n                },\n            });\n\n        return this;\n    },\n\n    /**\n     * Save a new value for the field.\n     *\n     * Args:\n     *     value (*):\n     *         The new value for the field.\n     *\n     *     options (object):\n     *         Options for the save operation.\n     */\n    _saveValue(value, options) {\n        const m = moment(value, 'YYYY-MM-DD', true);\n\n        if (!m.isValid()) {\n            value = '';\n            this.$el.text('');\n        }\n\n        Fields.TextFieldView.prototype._saveValue.call(this, value, options);\n    },\n});\n\n\n/**\n * The \"Branch\" field.\n */\nFields.BranchFieldView = Fields.TextFieldView.extend({\n    useExtraData: false,\n});\n\n\n/**\n * The \"Bugs\" field.\n */\nFields.BugsFieldView = Fields.CommaSeparatedValuesTextFieldView.extend({\n    useExtraData: false,\n\n    /**\n     * Format the value into the field.\n     *\n     * Args:\n     *     data (Array):\n     *         The new value of the field.\n     */\n    formatValue(data) {\n        data = data || [];\n\n        const reviewRequest = this.model.get('reviewRequest');\n        const bugTrackerURL = reviewRequest.get('bugTrackerURL');\n\n        if (bugTrackerURL) {\n            this.$el\n                .empty()\n                .append(this._urlizeList(data, {\n                    makeItemURL: item => bugTrackerURL.replace(\n                        '--bug_id--', item),\n                    cssClass: 'bug',\n                }))\n                .find('.bug').bug_infobox();\n        } else {\n            this.$el.text(data.join(', '));\n        }\n    },\n});\n\n\n/**\n * The change description field.\n */\nFields.ChangeDescriptionFieldView = Fields.MultilineTextFieldView.extend({\n    allowRichText: true,\n    jsonFieldName: 'changedescription',\n    useExtraData: false,\n});\n\n\n/**\n * The close description field.\n */\nFields.CloseDescriptionFieldView = Fields.MultilineTextFieldView.extend({\n    allowRichText: true,\n    useExtraData: false,\n    editableProp: 'statusEditable',\n\n    /**\n     * Save a new value for the field.\n     *\n     * Args:\n     *     value (*):\n     *         The new value for the field.\n     *\n     *     options (object):\n     *         Options for the save operation.\n     */\n    _saveValue(value, options) {\n        this.model.get('reviewRequest').close(_.defaults({\n            type: this.closeType,\n            description: value,\n            postData: {\n                force_text_type: 'html',\n                include_text_types: 'raw',\n            },\n        }, options));\n    },\n});\n\n\n/**\n * The \"Depends On\" field.\n */\nFields.DependsOnFieldView = Fields.CommaSeparatedValuesTextFieldView.extend({\n    autocomplete: {\n        fieldName: data => data.search.review_requests,\n        nameKey: 'id',\n        descKey: 'id',\n        display_name: 'summary',\n        resourceName: 'search',\n        parseItem: item => {\n            item.id = item.id.toString();\n            item.display_name = item.summary;\n\n            return item;\n        },\n        extraParams: {\n            summary: 1,\n        },\n        cmp: (term, a, b) => b.data.id - a.data.id,\n    },\n\n    useEditIconOnly: true,\n    useExtraData: false,\n\n    /**\n     * Format the value into the field.\n     *\n     * Args:\n     *     data (Array):\n     *         The new value of the field.\n     */\n    formatValue(data) {\n        data = data || [];\n\n        this.$el\n            .empty()\n            .append(this._urlizeList(data, {\n                makeItemURL: item => item.url,\n                makeItemText: item => item.id,\n                cssClass: 'review-request-link',\n            }))\n            .find('.review-request-link').review_request_infobox();\n    },\n});\n\n\n/**\n * The \"Description\" field.\n */\nFields.DescriptionFieldView = Fields.MultilineTextFieldView.extend({\n    allowRichText: true,\n    useExtraData: false,\n});\n\n\n/**\n * The \"Owner\" field.\n */\nFields.OwnerFieldView = Fields.TextFieldView.extend({\n    autocomplete: {\n        fieldName: 'users',\n        nameKey: 'username',\n        descKey: 'fullname',\n        extraParams: {\n            fullname: 1,\n        },\n        cmp: (term, a, b) => {\n            /*\n             * Sort the results with username matches first (in alphabetical\n             * order), followed by real name matches (in alphabetical order).\n             */\n            const aUsername = a.data.username;\n            const bUsername = b.data.username;\n            const aFullname = a.data.fullname;\n            const bFullname = a.data.fullname;\n\n            if (aUsername.indexOf(term) === 0) {\n                if (bUsername.indexOf(term) === 0) {\n                    return aUsername.localeCompare(bUsername);\n                }\n\n                return -1;\n            } else if (bUsername.indexOf(term) === 0) {\n                return 1;\n            } else {\n                return aFullname.localeCompare(bFullname);\n            }\n        },\n    },\n\n    useEditIconOnly: true,\n    useExtraData: false,\n\n    /**\n     * Format the value into the field.\n     *\n     * Args:\n     *     data (string):\n     *         The new value of the field.\n     */\n    formatValue(data) {\n        const $link = this._convertToLink(\n            data,\n            {\n                makeItemURL: item => {\n                    const href = item.href;\n                    return href.substr(href.indexOf('/users'));\n                },\n                makeItemText: item => item.title,\n                cssClass: 'user',\n            });\n\n        this.$el\n            .empty()\n            .append($link.user_infobox());\n    }\n});\n\n\n/**\n * The \"Summary\" field.\n */\nFields.SummaryFieldView = Fields.TextFieldView.extend({\n    useExtraData: false,\n});\n\n\n/**\n * The \"Groups\" field.\n */\nFields.TargetGroupsFieldView = Fields.CommaSeparatedValuesTextFieldView.extend({\n    autocomplete: {\n        fieldName: 'groups',\n        nameKey: 'name',\n        descKey: 'display_name',\n        extraParams: {\n            displayname: 1,\n        },\n    },\n\n    useEditIconOnly: true,\n    useExtraData: false,\n\n    /**\n     * Format the value into the field.\n     *\n     * Args:\n     *     data (Array):\n     *         The new value of the field.\n     */\n    formatValue(data) {\n        data = data || [];\n\n        this.$el\n            .empty()\n            .append(this._urlizeList(data, {\n                makeItemURL: item => item.url,\n                makeItemText: item => item.name,\n            }));\n    },\n});\n\n\n/**\n * The \"People\" field.\n */\nFields.TargetPeopleFieldView = Fields.CommaSeparatedValuesTextFieldView.extend({\n    autocomplete: {\n        fieldName: 'users',\n        nameKey: 'username',\n        descKey: 'fullname',\n        extraParams: {\n            fullname: 1,\n        },\n        cmp: (term, a, b) => {\n            /*\n             * Sort the results with username matches first (in alphabetical\n             * order), followed by real name matches (in alphabetical order).\n             */\n            const aUsername = a.data.username;\n            const bUsername = b.data.username;\n            const aFullname = a.data.fullname;\n            const bFullname = a.data.fullname;\n\n            if (aUsername.indexOf(term) === 0) {\n                if (bUsername.indexOf(term) === 0) {\n                    return aUsername.localeCompare(bUsername);\n                }\n                return -1;\n            } else if (bUsername.indexOf(term) === 0) {\n                return 1;\n            } else {\n                return aFullname.localeCompare(bFullname);\n            }\n        },\n    },\n\n    useEditIconOnly: true,\n    useExtraData: false,\n\n    /**\n     * Format the value into the field.\n     *\n     * Args:\n     *     data (Array):\n     *         The new value of the field.\n     */\n    formatValue(data) {\n        data = data || [];\n        this.$el\n            .empty()\n            .append(this._urlizeList(data, {\n                makeItemURL: item => item.url,\n                makeItemText: item => item.username,\n                cssClass: 'user',\n            }))\n            .find('.user').user_infobox();\n    }\n});\n\n\n/**\n * The \"Testing Done\" field.\n */\nFields.TestingDoneFieldView = Fields.MultilineTextFieldView.extend({\n    allowRichText: true,\n    useExtraData: false,\n});\n\n\nRB.ReviewRequestFields = Fields;\n\n\n})();\n"]}