{"version":3,"sources":["diffReviewableView.es6.js"],"names":[],"mappings":"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","file":"diffReviewableView.js","sourcesContent":["(function() {\n\n\n/*\n * Handles reviews of the diff for a file.\n *\n * This provides commenting abilities for ranges of lines on a diff, as well\n * as showing existing comments, and handling other interaction around\n * per-file diffs.\n */\nRB.DiffReviewableView = RB.AbstractReviewableView.extend({\n    tagName: 'table',\n\n    commentBlockView: RB.DiffCommentBlockView,\n    commentsListName: 'diff_comments',\n\n    events: {\n        'click .download-link': '_onDownloadLinkClicked',\n        'click thead tr': '_onFileHeaderClicked',\n        'click .moved-to, .moved-from': '_onMovedLineClicked',\n        'click .diff-collapse-btn': '_onCollapseChunkClicked',\n        'click .diff-expand-btn': '_onExpandChunkClicked',\n        'click .show-deleted-content-action': '_onShowDeletedClicked',\n        'mouseup': '_onMouseUp'\n    },\n\n    /*\n     * Initializes the reviewable for a file's diff.\n     */\n    initialize: function() {\n        _super(this).initialize.call(this);\n\n        this._selector = new RB.TextCommentRowSelector({\n            el: this.el,\n            reviewableView: this\n        });\n\n        this._hiddenCommentBlockViews = [];\n        this._visibleCommentBlockViews = [];\n\n        /* State for keeping consistent column widths for diff content. */\n        this._$filenameRow = null;\n        this._$revisionRow = null;\n        this._filenameReservedWidths = 0;\n        this._colReservedWidths = 0;\n        this._numColumns = 0;\n        this._numFilenameColumns = 0;\n        this._prevContentWidth = null;\n        this._prevFilenameWidth = null;\n        this._prevFullWidth = null;\n\n        /*\n         * Wrap this only once so we don't have to re-wrap every time\n         * the page scrolls.\n         */\n        this._$window = $(window);\n        this._$parent = this.$el.parent();\n\n        this.on('commentBlockViewAdded', this._placeCommentBlockView, this);\n    },\n\n    /*\n     * Removes the reviewable from the DOM.\n     */\n    remove: function() {\n        RB.AbstractReviewableView.prototype.remove.call(this);\n\n        this._selector.remove();\n    },\n\n    /*\n     * Renders the reviewable.\n     */\n    render: function() {\n        var $thead;\n\n        _super(this).render.call(this);\n\n        this._centered = new RB.CenteredElementManager();\n\n        $thead = $(this.el.tHead);\n\n        this._$revisionRow = $thead.children('.revision-row');\n        this._$filenameRow = $thead.children('.filename-row');\n\n        this._selector.render();\n\n        _.each(this.$el.children('tbody.binary'), function(thumbnailEl) {\n            var $thumbnail = $(thumbnailEl),\n                id = $thumbnail.data('file-id'),\n                $caption = $thumbnail.find('.file-caption .edit'),\n                reviewRequest = this.model.get('reviewRequest'),\n                fileAttachment = reviewRequest.createFileAttachment({\n                    id: id\n                });\n\n            if (!$caption.hasClass('empty-caption')) {\n                fileAttachment.set('caption', $caption.text());\n            }\n        }, this);\n\n        this._precalculateContentWidths();\n        this._updateColumnSizes();\n\n        return this;\n    },\n\n    /*\n     * Toggles the display of whitespace-only chunks.\n     */\n    toggleWhitespaceOnlyChunks: function() {\n        this.$('tbody tr.whitespace-line').toggleClass('dimmed');\n\n        _.each(this.$el.children('tbody.whitespace-chunk'), function(chunk) {\n            var $chunk = $(chunk),\n                dimming = $chunk.hasClass('replace'),\n                chunkID = chunk.id.split('chunk')[1],\n                $children = $chunk.children();\n\n            $chunk.toggleClass('replace');\n\n            $($children[0]).toggleClass('first');\n            $($children[$children.length - 1]).toggleClass('last');\n\n            if (dimming) {\n                this.trigger('chunkDimmed', chunkID);\n            } else {\n                this.trigger('chunkUndimmed', chunkID);\n            }\n        }, this);\n\n        /*\n         * Swaps the visibility of the \"This file has whitespace changes\"\n         * tbody and the chunk siblings.\n         */\n        this.$el.children('tbody.whitespace-file')\n            .siblings('tbody')\n            .addBack()\n                .toggle();\n    },\n\n   /*\n    * Creates a comment for a chunk of a diff.\n    */\n    createComment: function(beginLineNum, endLineNum, beginNode, endNode) {\n        this._selector.createComment(beginLineNum, endLineNum, beginNode,\n                                     endNode);\n    },\n\n    /*\n     * Places a CommentBlockView on the page.\n     *\n     * This will compute the row range for the CommentBlockView and then\n     * render it to the screen, if the row range exists.\n     *\n     * If it doesn't exist yet, the CommentBlockView will be stored in the\n     * list of hidden comment blocks for later rendering.\n     */\n    _placeCommentBlockView: function(commentBlockView, prevBeginRowIndex) {\n        var commentBlock = commentBlockView.model,\n            rowEls = this._selector.getRowsForRange(\n                commentBlock.get('beginLineNum'),\n                commentBlock.get('endLineNum'),\n                prevBeginRowIndex),\n            beginRowEl,\n            endRowEl;\n\n        if (rowEls) {\n            beginRowEl = rowEls[0];\n            endRowEl = rowEls[1];\n\n            /*\n             * Note that endRow might be null if it exists in a collapsed\n             * region, so we can get away with just using beginRow if we\n             * need to.\n             */\n            commentBlockView.setRows($(beginRowEl), $(endRowEl || beginRowEl));\n            commentBlockView.$el.appendTo(\n                commentBlockView.$beginRow[0].cells[0]);\n            this._visibleCommentBlockViews.push(commentBlockView);\n\n            prevBeginRowIndex = beginRowEl.rowIndex;\n        } else {\n            this._hiddenCommentBlockViews.push(commentBlockView);\n        }\n\n        return prevBeginRowIndex;\n    },\n\n    /*\n     * Places any hidden comment blocks onto the diff viewer.\n     */\n    _placeHiddenCommentBlockViews: function() {\n        var hiddenCommentBlockViews = this._hiddenCommentBlockViews,\n            prevBeginRowIndex;\n\n        this._hiddenCommentBlockViews = [];\n\n        _.each(hiddenCommentBlockViews, function(commentBlockView) {\n            prevBeginRowIndex = this._placeCommentBlockView(commentBlockView,\n                                                            prevBeginRowIndex);\n        }, this);\n    },\n\n    _hideRemovedCommentBlockViews: function() {\n        var visibleCommentBlockViews = this._visibleCommentBlockViews;\n\n        this._visibleCommentBlockViews = [];\n\n        _.each(visibleCommentBlockViews, function(commentBlockView) {\n            if (commentBlockView.$el.is(':visible')) {\n                this._visibleCommentBlockViews.push(commentBlockView);\n            } else {\n                this._hiddenCommentBlockViews.push(commentBlockView);\n            }\n        }, this);\n\n        /*\n         * Sort these by line number so we can efficiently place them later.\n         */\n        _.sortBy(this._hiddenCommentBlockViews, function(commentBlockView) {\n            return commentBlockView.model.get('beginLineNum');\n        });\n    },\n\n    /*\n     * Update the positions of the collapse buttons.\n     *\n     * This will attempt to position the collapse buttons such that they're\n     * in the center of the exposed part of the expanded chunk in the current\n     * viewport.\n     *\n     * As the user scrolls, they'll be able to see the button scroll along\n     * with them. It will not, however, leave the confines of the expanded\n     * chunk.\n     */\n    _updateCollapseButtonPos: function() {\n        this._centered.updatePosition();\n    },\n\n    /*\n     * Expands or collapses a chunk in a diff.\n     *\n     * This is called internally when an expand or collapse button is pressed\n     * for a chunk. It will fetch the diff and render it, displaying any\n     * contained comments, and setting up the resulting expand or collapse\n     * buttons.\n     */\n    _expandOrCollapse: function($btn, expanding) {\n        var chunkIndex = $btn.data('chunk-index'),\n            linesOfContext = $btn.data('lines-of-context');\n\n        this.model.getRenderedDiffFragment({\n            chunkIndex: chunkIndex,\n            linesOfContext: linesOfContext\n        }, {\n            success: function(html) {\n                var $tbody = $btn.closest('tbody'),\n                    $scrollAnchor,\n                    tbodyID,\n                    scrollAnchorID,\n                    scrollOffsetTop,\n                    newEl;\n\n                /*\n                 * We want to position the new chunk or collapse button at\n                 * roughly the same position as the chunk or collapse button\n                 * that the user pressed. Figure out what it is exactly and what\n                 * the scroll offsets are so we can later reposition the scroll\n                 * offset.\n                 */\n                if (expanding) {\n                    $scrollAnchor = this.$el;\n                    scrollAnchorID = $scrollAnchor[0].id;\n\n                    if (linesOfContext === 0) {\n                        /*\n                         * We've expanded the entire chunk, so we'll be looking\n                         * for the collapse button.\n                         */\n                        tbodyID = /collapsed-(.*)/.exec(scrollAnchorID)[1];\n                    } else {\n                        tbodyID = scrollAnchorID;\n                    }\n                } else {\n                    $scrollAnchor = $btn;\n                }\n\n                scrollOffsetTop = $scrollAnchor.offset().top -\n                                  this._$window.scrollTop();\n\n                /*\n                 * If we already expanded, we may have one or two loaded chunks\n                 * adjacent to the header. We want to remove those, since we'll\n                 * be generating new ones that include that data.\n                 */\n                $tbody.prev('.diff-header, .loaded').remove();\n                $tbody.next('.diff-header, .loaded').remove();\n\n                /*\n                 * Replace the header with the new HTML. This may also include a\n                 * new header.\n                 */\n                $tbody.replaceWith(html);\n\n                if (expanding) {\n                    this._placeHiddenCommentBlockViews();\n                } else {\n                    this._hideRemovedCommentBlockViews();\n                }\n\n                /*\n                 * Get the new tbody for the header, if any, and try to center.\n                 */\n                if (tbodyID) {\n                    newEl = document.getElementById(tbodyID);\n\n                    if (newEl) {\n                        $scrollAnchor = $(newEl);\n\n                        if ($scrollAnchor.length > 0) {\n                            this._$window.scrollTop(\n                                $scrollAnchor.offset().top -\n                                scrollOffsetTop);\n                        }\n                    }\n                }\n\n                /* Recompute the set of buttons for later use. */\n                this._centered.setElements(new Map(\n                    Array.prototype.map.call(\n                        this.$('.diff-collapse-btn'),\n                        el => [el, {\n                            $top: $(el).closest('tbody'),\n                        }])\n                ));\n                this._updateCollapseButtonPos();\n\n                /*\n                 * We'll need to update the column sizes, but first, we need\n                 * to re-calculate things like the line widths, since they\n                 * may be longer after expanding.\n                 */\n                this._precalculateContentWidths();\n                this._updateColumnSizes();\n\n                this.trigger('chunkExpansionChanged');\n            }\n        }, this);\n    },\n\n    /*\n     * Pre-calculate the widths and other state needed for column widths.\n     *\n     * This will store the number of columns and the reserved space that\n     * needs to be subtracted from the container width, to be used in later\n     * calculating the desired widths of the content areas.\n     */\n    _precalculateContentWidths: function() {\n        var cellPadding = 0,\n            containerExtents,\n            $cells;\n\n        if (!this.$el.hasClass('diff-error') && this._$revisionRow.length > 0) {\n            containerExtents = this.$el.getExtents('p', 'lr');\n\n            /* Calculate the widths and state of the diff columns. */\n            $cells = $(this._$revisionRow[0].cells);\n            cellPadding = $(this.el.querySelector('pre'))\n                .parent().andSelf()\n                .getExtents('p', 'lr');\n\n            this._colReservedWidths = $cells.eq(0).outerWidth() + cellPadding +\n                                      containerExtents;\n            this._numColumns = $cells.length;\n\n            if (this._numColumns === 4) {\n                /* There's a left-hand side and a right-hand side. */\n                this._colReservedWidths += $cells.eq(2).outerWidth() +\n                                           cellPadding;\n            }\n\n            /* Calculate the widths and state of the filename columns. */\n            $cells = $(this._$filenameRow[0].cells);\n            this._numFilenameColumns = $cells.length;\n            this._filenameReservedWidths = containerExtents +\n                                           2 * this._numFilenameColumns;\n        } else {\n            this._colReservedWidths = 0;\n            this._filenameReservedWidths = 0;\n            this._numColumns = 0;\n            this._numFilenameColumns = 0;\n        }\n    },\n\n    /*\n     * Update the sizes of the diff content columns.\n     *\n     * This will figure out the minimum and maximum widths of the columns\n     * and set them in a stylesheet, ensuring that lines will constrain to\n     * those sizes (force-wrapping if necessary) without overflowing or\n     * causing the other column to shrink too small.\n     */\n    _updateColumnSizes: function() {\n        var $parent = this._$parent,\n            fullWidth,\n            contentWidth,\n            filenameWidth;\n\n        if (this.$el.hasClass('diff-error')) {\n            return;\n        }\n\n        if (!$parent.is(':visible')) {\n            /*\n             * We're still in diff loading mode, and the parent is hidden. We\n             * can get the width we need from the parent. It should be the same,\n             * or at least close enough for the first stab at column sizes.\n             */\n            $parent = $parent.parent();\n        }\n\n        fullWidth = $parent.width();\n\n        if (fullWidth === this._prevFullWidth) {\n            return;\n        }\n\n        this._prevFullWidth = fullWidth;\n\n        /* Calculate the desired widths of the diff columns. */\n        contentWidth = fullWidth - this._colReservedWidths;\n\n        if (this._numColumns === 4) {\n            contentWidth /= 2;\n        }\n\n        /* Calculate the desired widths of the filename columns. */\n        filenameWidth = fullWidth - this._filenameReservedWidths;\n\n        if (this._numFilenameColumns === 2) {\n            filenameWidth /= 2;\n        }\n\n        this.$el.width(fullWidth);\n\n        /* Update the minimum and maximum widths, if they've changed. */\n        if (filenameWidth !== this._prevFilenameWidth) {\n            this._$filenameRow.children('th').css({\n                'min-width': Math.ceil(filenameWidth * 0.66),\n                'max-width': Math.ceil(filenameWidth)\n            });\n            this._prevFilenameWidth = filenameWidth;\n        }\n\n        if (contentWidth !== this._prevContentWidth) {\n            this._$revisionRow.children('.revision-col').css({\n                'min-width': Math.ceil(contentWidth * 0.66),\n                'max-width': Math.ceil(contentWidth)\n            });\n            this._prevContentWidth = contentWidth;\n        }\n    },\n\n    /*\n     * Handler for when the window resizes.\n     *\n     * Updates the sizes of the diff columns, and the location of the\n     * collapse buttons (if one or more are visible).\n     */\n    updateLayout() {\n        this._updateColumnSizes();\n        this._updateCollapseButtonPos();\n    },\n\n    /*\n     * Handler for when a file download link is clicked.\n     *\n     * Prevents the event from bubbling up and being caught by\n     * _onFileHeaderClicked.\n     */\n    _onDownloadLinkClicked: function(e) {\n        e.stopPropagation();\n    },\n\n    /*\n     * Handler for when the file header is clicked.\n     *\n     * Highlights the file header.\n     */\n    _onFileHeaderClicked: function() {\n        this.trigger('fileClicked');\n\n        return false;\n    },\n\n    /*\n     * Handler for clicks on a \"Moved to/from\" flag.\n     *\n     * This will scroll to the location on the other end of the move,\n     * and briefly highlight the line.\n     */\n    _onMovedLineClicked: function(e) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        this.trigger('moveFlagClicked', $(e.target).data('line'));\n    },\n\n    /*\n     * Handles the mouse up event.\n     *\n     * This will select any chunk that was clicked, highlight the chunk,\n     * and ensure it's cleanly scrolled into view.\n     */\n    _onMouseUp: function(e) {\n        var node = e.target,\n            anchor,\n            $tbody;\n\n        /*\n         * The user clicked somewhere else. Move the anchor point here\n         * if it's part of the diff.\n         */\n        $tbody = $(node).closest('tbody');\n\n        if ($tbody.length > 0 &&\n            ($tbody.hasClass('delete') ||\n             $tbody.hasClass('insert') ||\n             $tbody.hasClass('replace'))) {\n            anchor = $tbody[0].querySelector('a');\n\n            if (anchor) {\n                this.trigger('chunkClicked', anchor.name);\n            }\n        }\n    },\n\n    /*\n     * Handler for Expand buttons.\n     *\n     * The Expand buttons will expand a collapsed chunk, either entirely\n     * or by certain amounts. It will fetch the new chunk contents and\n     * inject it into the diff viewer.\n     */\n    _onExpandChunkClicked: function(e) {\n        var $target = $(e.target);\n\n        if (!$target.hasClass('diff-expand-btn')) {\n            /* We clicked an image inside the link. Find the parent. */\n            $target = $target.closest('.diff-expand-btn');\n        }\n\n        e.preventDefault();\n        this._expandOrCollapse($target, true);\n    },\n\n    /*\n     * Handler for the Collapse button.\n     *\n     * The fully collapsed representation of that chunk will be fetched\n     * and put into the diff viewer in place of the expanded chunk.\n     */\n    _onCollapseChunkClicked: function(e) {\n        var $target = $(e.target);\n\n        if (!$target.hasClass('diff-collapse-btn')) {\n            /* We clicked an image inside the link. Find the parent. */\n            $target = $target.closest('.diff-collapse-btn');\n        }\n\n        e.preventDefault();\n        this._expandOrCollapse($target, false);\n    },\n\n    /**\n     * Handler for when show content is clicked.\n     *\n     * This requeues the corresponding diff to show its deleted content.\n     *\n     * Args:\n     *     e (Event):\n     *         The event that is triggered when show content is clicked.\n     */\n    _onShowDeletedClicked: function(e) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        /*\n         * Replace the current contents (\"This file was deleted ... \") with a\n         * spinner. This will be automatically replaced with the file contents\n         * once loaded from the server.\n         */\n        $(e.target).parent()\n            .html('<span class=\"fa fa-spinner fa-pulse\"></span>');\n\n        this.trigger('showDeletedClicked');\n    }\n});\n\n\n})();\n"]}