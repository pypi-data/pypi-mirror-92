{"version":3,"sources":["repositoryModel.es6.js"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA,GAAG,UAAH,GAAgB,GAAG,YAAH,CAAgB,MAAhB,CAAuB;AACnC,YADmC,sBACxB;AACP,eAAO,EAAE,QAAF,CAAW;AACd,uBAAW,KADG;AAEd,6BAAiB,IAFH;AAGd,kBAAM,IAHQ;AAId,6BAAiB,KAJH;AAKd,kCAAsB,KALR;AAMd,yBAAa,IANC;AAOd,gCAAoB;AAPN,SAAX,EAQJ,GAAG,YAAH,CAAgB,SAAhB,CAA0B,QAA1B,EARI,CAAP;AASH,KAXkC;;;AAanC,kBAAc,YAbqB;;AAenC;;;AAGA,cAlBmC,wBAkBtB;AACT,WAAG,YAAH,CAAgB,SAAhB,CAA0B,UAA1B,CAAqC,KAArC,CAA2C,IAA3C,EAAiD,SAAjD;;AAEA,aAAK,QAAL,GAAgB,IAAI,GAAG,kBAAP,EAAhB;AACA,aAAK,QAAL,CAAc,GAAd,GAAoB,EAAE,MAAF,CAAS,IAAT,EAAe,KAAf,IAAwB,WAA5C;AACH,KAvBkC;;;AAyBnC;;;;;;;;;;;;;;;;;;;AAmBA,cA5CmC,sBA4CxB,OA5CwB,EA4Cf;AAChB,eAAO,IAAI,GAAG,iBAAP,CAAyB,EAAzB,EAA6B;AAChC,qBAAS,EAAE,MAAF,CAAS,IAAT,EAAe,KAAf,IAAwB,UADD;AAEhC,mBAAO,QAAQ,KAFiB;AAGhC,oBAAQ,QAAQ;AAHgB,SAA7B,CAAP;AAKH,KAlDkC;;;AAoDnC;;;;;;;AAOA,OA3DmC,iBA2D7B;AACF,YAAM,MAAM,aAAa,KAAK,GAAL,CAAS,iBAAT,KAA+B,EAA5C,IACA,mBADZ;;AAGA,eAAO,KAAK,KAAL,KAAe,GAAf,QAAwB,GAAxB,GAA8B,KAAK,EAAnC,MAAP;AACH;AAhEkC,CAAvB,CAAhB","file":"repositoryModel.js","sourcesContent":["/**\n * A client-side representation of a repository on the server.\n *\n * Model Attributes:\n *     filesOnly (boolean):\n *         Whether this repository is the fake \"file attachments only\" entry.\n *\n *     localSitePrefix (string):\n *         The URL prefix for the local site, if any.\n *\n *     name (string):\n *         The name of the repository.\n *\n *     requiresBasedir (boolean):\n *         Whether posting diffs against this repository requires the\n *         specification of a \"base directory\" (the relative path between the\n *         repository root and the filenames in the diff file).\n *\n *     requiresChangeNumber (boolean):\n *         Whether posting diffs against this repository requires the\n *         specification of the associated change number.\n *\n *     scmtoolName (string):\n *         The name of the SCM that this repository uses.\n *\n *     supportsPostCommit (boolean):\n *         Whether this repository supports the APIs necessary to enable the\n *         post-commit UI.\n */\nRB.Repository = RB.BaseResource.extend({\n    defaults() {\n        return _.defaults({\n            filesOnly: false,\n            localSitePrefix: null,\n            name: null,\n            requiresBasedir: false,\n            requiresChangeNumber: false,\n            scmtoolName: null,\n            supportsPostCommit: false\n        }, RB.BaseResource.prototype.defaults());\n    },\n\n    rspNamespace: 'repository',\n\n    /**\n     * Initialize the model.\n     */\n    initialize() {\n        RB.BaseResource.prototype.initialize.apply(this, arguments);\n\n        this.branches = new RB.RepositoryBranches();\n        this.branches.url = _.result(this, 'url') + 'branches/';\n    },\n\n    /**\n     * Get a collection of commits from a given starting point.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the commits collection.\n     *\n     * Option Args:\n     *     start (string):\n     *         The starting commit (which will be the most recent commit\n     *         listed).\n     *\n     *     branch (string):\n     *         The branch to fetch commits from.\n     *\n     * Returns:\n     *     RB.RepositoryCommits:\n     *     The commits collection.\n     */\n    getCommits(options) {\n        return new RB.RepositoryCommits([], {\n            urlBase: _.result(this, 'url') + 'commits/',\n            start: options.start,\n            branch: options.branch\n        });\n    },\n\n    /**\n     * Return the URL for syncing the model.\n     *\n     * Returns:\n     *     string:\n     *     The URL to use when syncing the model.\n     */\n    url() {\n        const url = SITE_ROOT + (this.get('localSitePrefix') || '') +\n                    'api/repositories/';\n\n        return this.isNew() ? url : `${url}${this.id}/`;\n    }\n});\n"]}