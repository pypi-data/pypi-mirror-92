{"version":3,"sources":["splitButtonView.es6.js"],"names":[],"mappings":"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","file":"splitButtonView.js","sourcesContent":["/**\n * A SplitButtonView is a split button with a drop down which, when hovered\n * over, will drop down (or up) a list of alternative options.\n *\n *  If the view is to be removed, the remove() method must be called as this\n *  view adds elements to the DOM that are not under its root element.\n *\n */\nRB.SplitButtonView = Backbone.View.extend({\n    tag: 'div',\n    className: 'split-btn',\n\n    events: {\n        'click .primary-btn': '_onClick',\n        'mouseenter .drop-down-btn': '_showDropDown',\n        'mouseleave': '_delayCheckHover',\n    },\n\n    /*\n     * Note that whitespace really matters here. We don't want any spaces or\n     * newlines between tags. This is why the indentation is missing and why\n     * we're not using dedent``.\n     */\n    template: _.template([\n        '<div class=\"btn btn-segmented\">',\n        '<div class=\"btn-segment primary-btn\"><%- buttonText %></div>',\n        '<div class=\"btn-segment drop-down-btn\">',\n        '<span class=\"rb-icon rb-icon-dropdown-arrow\"></span>',\n        '</div>',\n        '</div>',\n    ].join('')),\n\n    /**\n     * The delay time for animations in milliseconds.\n     *\n     * This must be the same value as ``@split-btn-hover-transition-time``\n     * in css/defs.less.\n     */\n    _delayTime: 250,\n\n    /**\n     * Set up all initial state and event listeners.\n     *\n     * Args:\n     *     options (object):\n     *         Options for view construction.\n     *\n     * Option Args:\n     *     text (string):\n     *         The primary button text.\n     *\n     *     click (function or string):\n     *         The handler for click events on the primary button.\n     *\n     *     id (string):\n     *         The DOM ID to use for the primary button.\n     *\n     *     direction (string):\n     *         The direction the drop-down will show; either ``up`` or\n     *         ``down``.\n     *\n     *     alternatives (Array of object):\n     *         A list of alternative buttons. Each item includes ``text``,\n     *         ``click``, and ``id`` keys which are equivalent to the options\n     *         for the primary button.\n     */\n    initialize(options={}) {\n        this._dropDownShown = false;\n        this._animating = false;\n\n        this.options = options;\n        this.options.alternatives = this.options.alternatives || [];\n\n        if (this.options.direction === 'up') {\n            this._dropDownShownClass = 'drop-up-shown';\n        } else {\n            this.options.direction = 'down';\n            this._dropDownShownClass = 'drop-down-shown';\n        }\n\n        $(window).on('resize', this._onResize.bind(this));\n    },\n\n    /**\n     * Remove the SplitButtonView from the DOM.\n     */\n    remove() {\n        $(window).off('resize', this._onResize);\n        this.stopListening();\n\n        if (this._$alternatives) {\n            this._$alternatives.remove();\n        }\n\n        if (this.$el) {\n            this.$el.remove();\n        }\n    },\n\n    /**\n     * Render the split button.\n     *\n     * Returns:\n     *     RB.SplitButtonView:\n     *     This object, for chaining.\n     */\n    render() {\n        this.$el\n            .empty()\n            .addClass(this.className)\n            .html(this.template({\n                buttonText: this.options.text\n            }));\n\n        const $segments = this.$el.children('.btn-segmented');\n        this._$primaryBtn = $segments.children('.primary-btn');\n\n        if (this.options.id) {\n            this._$primaryBtn.attr('id', this.options.id);\n        }\n\n        this._$dropDownBtn = $segments.children('.drop-down-btn');\n        this._$alternatives = $('<div class=\"split-btn-alternatives\" />')\n            .appendTo(this.$el)\n            .hide();\n\n        this.options.alternatives.forEach(alt => {\n            const $btn = $('<div class=\"btn\" />')\n                .text(alt.text)\n                .on('click', alt.click)\n                .appendTo(this._$alternatives);\n\n            if (alt.id) {\n                $btn.attr('id', alt.id);\n            }\n        });\n\n        return this;\n    },\n\n    /**\n     * Handle the primary button being clicked.\n     */\n    _onClick() {\n        this.options.click();\n    },\n\n    /**\n     * Show the alternatives in a drop down (or up) menu.\n     */\n    _showDropDown() {\n        if (this._dropDownShown || this._animating) {\n            return;\n        }\n\n        this._animating = true;\n        this._reposition();\n\n        this._$alternatives.show();\n\n        /*\n         * Wait for the menu to be shown so we can start applying the\n         * opacity transition.\n         */\n        _.defer(() => {\n            this.$el.addClass(this._dropDownShownClass);\n            this._$dropDownBtn.addClass('hover');\n\n            setTimeout(() => {\n                this._dropDownShown = true;\n                this._animating = false;\n            }, this._delayTime);\n        });\n    },\n\n    /**\n     * Try to hide the drop down menu.\n     *\n     * The menu will only be hidden if it's shown and not currently animating.\n     */\n    _tryHideDropDown() {\n        if (!this._dropDownShown || this._animating || this.$el.is(':hover')) {\n            return;\n        }\n\n        this._animating = true;\n\n        this._$dropDownBtn.removeClass('hover');\n        this.$el.removeClass(this._dropDownShownClass);\n\n        setTimeout(() => {\n            this._dropDownShown = false;\n            this._animating = false;\n            this._$alternatives\n                .hide()\n                .css({\n                    top: null,\n                    bottom: null,\n                });\n        }, this._delayTime);\n    },\n\n    /**\n     * Schedule a hover check to try to hide the drop down when the mouse\n     * leaves.\n     */\n    _delayCheckHover() {\n        _.delay(this._tryHideDropDown.bind(this), this._delayTime);\n    },\n\n    /**\n     * Position the drop-down menu above or below the button.\n     */\n    _reposition() {\n       this._$alternatives.css(\n           this.options.direction === 'down' ? 'top' : 'bottom',\n           this._$primaryBtn.outerHeight());\n    },\n\n    /**\n     * Handle a screen resize event to reposition the drop-down.\n     */\n    _onResize: _.debounce(function() {\n        if (this._dropDownShown) {\n            this._reposition();\n        }\n    }, 300)\n});\n"]}