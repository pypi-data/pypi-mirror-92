{"version":3,"sources":["regionCommentBlockView.es6.js"],"names":[],"mappings":"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","file":"regionCommentBlockView.js","sourcesContent":["/**\n * Provides a visual region over an image or other document showing comments.\n *\n * This will show a selection rectangle over part of an image or other\n * content indicating there are comments there. It will also show the\n * number of comments, along with a tooltip showing comment summaries.\n *\n * This is meant to be used with a RegionCommentBlock model.\n */\nRB.RegionCommentBlockView = RB.AbstractCommentBlockView.extend({\n    className: 'selection',\n\n    events: _.defaults({\n        'click': '_onClicked',\n        'mousedown': '_onMouseDown'\n    }, RB.AbstractCommentBlockView.prototype.events),\n\n    /**\n     * Initialize RegionCommentBlockView.\n     */\n    initialize() {\n        this._scale = 1.0;\n        this._moveState = {\n            hasMoved: false,\n            initialCursor: {},\n            initialBounds: {},\n            dragCallback: _.noop\n        };\n\n        _.bindAll(this, '_onDrag', '_onWindowMouseUp');\n    },\n\n    /**\n     * Listen to events.\n     */\n    delegateEvents() {\n        RB.AbstractCommentBlockView.prototype.delegateEvents.call(this);\n\n        this.listenTo(\n            this.model,\n            'change:x change:y change:width change:height',\n            this._updateBounds\n        );\n        this.listenTo(this.model, 'change:count', this._updateCount);\n    },\n\n    /**\n     * Un-listen to events.\n     */\n    undelegateEvents() {\n        RB.AbstractCommentBlockView.prototype.undelegateEvents.call(this);\n\n        $(window).off('mousemove', this._onDrag);\n\n        this.stopListening(this.model);\n    },\n\n    /**\n     * Set the selection region size function.\n     *\n     * This function is meant to return the maximum size of the selection\n     * region for the given comment.\n     *\n     * Args:\n     *     func (function):\n     *         A function which will return a size object.\n     */\n    setSelectionRegionSizeFunc(func) {\n        this.selectionRegionSizeFunc = func;\n    },\n\n    /**\n     * Return the selection region size.\n     *\n     * Returns:\n     *     object:\n     *     An object with ``x``, ``y``, ``width``, and ``height`` fields, in\n     *     pixels.\n     */\n    getSelectionRegionSize() {\n        return _.result(this, 'selectionRegionSizeFunc');\n    },\n\n    /**\n     * Initiate a drag operation.\n     *\n     * Args:\n     *     left (number):\n     *         The initial left position of the cursor.\n     *\n     *     top (number):\n     *         The initial top position of the cursor.\n     *\n     *     callback (function):\n     *         A callback function to call once the drag is finished.\n     */\n    _startDragging(left, top, callback) {\n        /*\n         * ``hasMoved`` is used to distinguish dragging from clicking.\n         * ``initialCursor`` and ``initialBounds`` are used to calculate the\n         * new position and size while dragging.\n         */\n        this._moveState.hasMoved = false;\n        this._moveState.initialCursor.left = left;\n        this._moveState.initialCursor.top = top;\n        this._moveState.initialBounds.left = this.$el.position().left;\n        this._moveState.initialBounds.top = this.$el.position().top;\n        this._moveState.initialBounds.width = this.$el.width();\n        this._moveState.initialBounds.height = this.$el.height();\n        this._moveState.dragCallback = callback;\n\n        $(window).on('mousemove', this._onDrag);\n    },\n\n    /**\n     * End a drag operation.\n     */\n    _endDragging() {\n        /*\n         * Unset the dragging flag after the stack unwinds, so that the\n         * click event can handle it properly.\n         */\n        _.defer(() => { this._moveState.hasMoved = false; });\n\n        $(window).off('mousemove', this._onDrag);\n    },\n\n    /**\n     * Move the comment region to a new position.\n     *\n     * Args:\n     *     left (number):\n     *         The new X-coordinate of the mouse at the end of the drag\n     *         operation, relative to the page.\n     *\n     *     top (number):\n     *         The new Y-coordinate of the mouse at the end of the drag\n     *         operation, relative to the page.\n     */\n    _moveTo(left, top) {\n        const region = this.getSelectionRegionSize();\n        const maxLeft = region.width - (this.model.get('width') * this._scale);\n        const maxTop = region.height - (this.model.get('height') * this._scale);\n        const newLeft = (this._moveState.initialBounds.left +\n                         left - this._moveState.initialCursor.left);\n        const newTop = (this._moveState.initialBounds.top +\n                        top - this._moveState.initialCursor.top);\n\n        this.model.set({\n            x: RB.MathUtils.clip(newLeft, 0, maxLeft) / this._scale,\n            y: RB.MathUtils.clip(newTop, 0, maxTop) / this._scale\n        });\n    },\n\n    /*\n     * Resize (change with and height of) the comment block.\n     *\n     * Args:\n     *     left (number):\n     *         The new X-coordinate of the mouse at the end of the drag\n     *         operation, relative to the page.\n     *\n     *     top (number):\n     *         The new Y-coordinate of the mouse at the end of the drag\n     *         operation, relative to the page.\n     */\n    _resizeTo(left, top) {\n        const region = this.getSelectionRegionSize();\n        const maxWidth = region.width - (this.model.get('x') * this._scale);\n        const maxHeight = region.height - (this.model.get('y') * this._scale);\n        const newWidth = (this._moveState.initialBounds.width +\n                          left - this._moveState.initialCursor.left);\n        const newHeight = (this._moveState.initialBounds.height +\n                           top - this._moveState.initialCursor.top);\n\n        this.model.set({\n            width: RB.MathUtils.clip(newWidth, 0, maxWidth) / this._scale,\n            height: RB.MathUtils.clip(newHeight, 0, maxHeight) / this._scale\n        });\n    },\n\n    /**\n     * Handle a mousedown event.\n     *\n     * Mouse-down means one of these in this view:\n     * 1. click\n     * 2. start of dragging to move the comment\n     * 3. start of dragging to resize the comment\n     *\n     * This method looks at ``e.target`` and does the appropriate action.\n     *\n     * Args:\n     *     e (Event):\n     *         The event which triggered the callback.\n     */\n    _onMouseDown(e) {\n        if (this.model.canUpdateBounds()) {\n            e.preventDefault();\n            e.stopPropagation();\n\n            let draggingCallback = null;\n            if (e.target === this._$flag.get(0)) {\n                draggingCallback = this._moveTo;\n            } else if (e.target === this._$resizeIcon.get(0)) {\n                draggingCallback = this._resizeTo;\n            }\n\n            if (draggingCallback) {\n                this._startDragging(e.pageX, e.pageY, draggingCallback);\n\n                $(window).one('mouseup', this._onWindowMouseUp);\n            }\n        }\n    },\n\n    /**\n     * Handle a mouseup event.\n     *\n     * If something has been dragged, end dragging and update the comment's\n     * bounds.\n     *\n     * If not, the event was actually a ``click`` event and we call the\n     * superclass' click handler.\n     */\n    _onWindowMouseUp() {\n        if (this._moveState.hasMoved) {\n            this.model.saveDraftCommentBounds();\n        }\n\n        this._endDragging();\n    },\n\n    /**\n     * Handle a drag event.\n     *\n     * Set moveState.hasMoved to ``true`` to prevent triggering a ``click``\n     * event, and move to view to dragged location.\n     *\n     * Args:\n     *     e (Event):\n     *         The event which triggered the callback.\n     */\n    _onDrag(e) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        this.hideTooltip();\n\n        this._moveState.hasMoved = true;\n        this._moveState.dragCallback.call(this, e.pageX, e.pageY);\n    },\n\n    /**\n     * Render the comment block.\n     *\n     * Along with the block's rectangle, a floating tooltip will also be\n     * created that displays summaries of the comments.\n     */\n    renderContent() {\n        this._updateBounds();\n\n        if (this.model.canUpdateBounds()) {\n            this.$el.addClass('can-update-bound');\n\n            this._$resizeIcon = $('<div class=\"resize-icon\" />')\n                .appendTo(this.$el);\n        }\n\n        this._$flag = $('<div class=\"selection-flag\" />')\n            .appendTo(this.$el);\n\n        this._updateCount();\n    },\n\n    /**\n     * Position the comment dialog to the side of the flag.\n     *\n     * Args:\n     *     commentDlg (RB.CommentDialogView):\n     *         The comment dialog.\n     */\n    positionCommentDlg(commentDlg) {\n        commentDlg.positionBeside(this._$flag, {\n            side: 'b',\n            fitOnScreen: true\n        });\n    },\n\n    /**\n     * Update the position and size of the comment block element.\n     *\n     * The new position and size will reflect the x, y, width, and height\n     * properties in the model.\n     */\n    _updateBounds() {\n        this.$el\n            .move(this.model.get('x') * this._scale,\n                  this.model.get('y') * this._scale,\n                  'absolute')\n            .width(this.model.get('width') * this._scale)\n            .height(this.model.get('height') * this._scale);\n    },\n\n    /**\n     * Update the displayed count of comments.\n     */\n    _updateCount() {\n        if (this._$flag) {\n            this._$flag.text(this.model.get('count'));\n        }\n    },\n\n    /**\n     * Handle a click event.\n     *\n     * If the click event is not the end result of a drag operation, this\n     * will emit the \"clicked\" event on the view.\n     */\n    _onClicked() {\n        if (!this._moveState.hasMoved) {\n            this.trigger('clicked');\n        }\n    },\n\n    /**\n     * Set the zoom scale.\n     *\n     * Args:\n     *     scale (number):\n     *         A scaling factor. 1.0 is a 1:1 pixel ratio, 0.5 is displayed\n     *         at half size, etc.\n     */\n    setScale(scale) {\n        this._scale = scale;\n        this._updateBounds();\n    }\n});\n"]}