{"version":3,"sources":["dataUtilsTests.es6.js"],"names":[],"mappings":";;;;AAAA,MAAM,oBAAN,EAA4B,YAAW;AACnC,OAAG,uBAAH,EAA4B,UAAS,IAAT,EAAe;AACvC,YAAM,MAAM,QAAZ;AACA,YAAM,OAAO,IAAI,IAAJ,CAAS,CAAC,GAAD,CAAT,CAAb;;AAEA,WAAG,SAAH,CAAa,qBAAb,CAAmC,IAAnC,EAAyC,kBAAU;AAC/C,mBAAO,OAAO,UAAd,EAA0B,IAA1B,CAA+B,CAA/B;;AAEA,gBAAM,WAAW,IAAI,QAAJ,CAAa,MAAb,CAAjB;;AAEA,iBAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,OAAO,UAA3B,EAAuC,GAAvC,EAA4C;AACxC,uBAAO,SAAS,QAAT,CAAkB,CAAlB,CAAP,EAA6B,IAA7B,CAAkC,IAAI,UAAJ,CAAe,CAAf,CAAlC;AACH;;AAED;AACH,SAVD;AAWH,KAfD;;AAiBA,OAAG,kBAAH,EAAuB,UAAS,IAAT,EAAe;AAClC,YAAM,OAAO,IAAI,IAAJ,CAAS,CAAC,iBAAD,CAAT,CAAb;;AAEA,WAAG,SAAH,CAAa,gBAAb,CAA8B,IAA9B,EAAoC,kBAAU;AAC1C,0BAAc,MAAd,yCAAc,MAAd,GAAsB,IAAtB,CAA2B,QAA3B;AACA,mBAAO,MAAP,EAAe,IAAf,CAAoB,iBAApB;;AAEA;AACH,SALD;AAMH,KATD;;AAWA,OAAG,6BAAH,EAAkC,UAAS,IAAT,EAAe;AAC7C,YAAM,OAAO,QAAb;AACA,YAAM,OAAO,KAAb;;AAEA,YAAM,QAAQ,IAAI,IAAJ,CAAS,CAAC,IAAD,CAAT,CAAd;AACA,YAAM,QAAQ,IAAI,IAAJ,CAAS,CAAC,IAAD,CAAT,CAAd;;AAEA,WAAG,SAAH,CAAa,2BAAb,CAAyC,CAAC,KAAD,EAAQ,KAAR,CAAzC,EACyC,UAAC,OAAD,EAAU,OAAV,EAAsB;AAC3D,mBAAO,QAAQ,UAAf,EAA2B,IAA3B,CAAgC,CAAhC;AACA,mBAAO,QAAQ,UAAf,EAA2B,IAA3B,CAAgC,CAAhC;;AAEA,gBAAM,YAAY,IAAI,QAAJ,CAAa,OAAb,CAAlB;;AAEA,iBAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,QAAQ,UAA5B,EAAwC,GAAxC,EAA6C;AACzC,uBAAO,UAAU,QAAV,CAAmB,CAAnB,CAAP,EAA8B,IAA9B,CAAmC,KAAK,UAAL,CAAgB,CAAhB,CAAnC;AACH;;AAED,gBAAM,YAAY,IAAI,QAAJ,CAAa,OAAb,CAAlB;;AAEA,iBAAK,IAAI,KAAI,CAAb,EAAgB,KAAI,QAAQ,UAA5B,EAAwC,IAAxC,EAA6C;AACzC,uBAAO,UAAU,QAAV,CAAmB,EAAnB,CAAP,EAA8B,IAA9B,CAAmC,KAAK,UAAL,CAAgB,EAAhB,CAAnC;AACH;;AAED;AACH,SAlBD;AAmBH,KA1BD;;AA4BA,OAAG,wBAAH,EAA6B,UAAS,IAAT,EAAe;AACxC,YAAM,QAAQ,IAAI,IAAJ,CAAS,CAAC,iBAAD,CAAT,CAAd;AACA,YAAM,QAAQ,IAAI,IAAJ,CAAS,CAAC,aAAD,CAAT,CAAd;;AAEA,WAAG,SAAH,CAAa,sBAAb,CAAoC,CAAC,KAAD,EAAQ,KAAR,CAApC,EACoC,UAAC,OAAD,EAAU,OAAV,EAAsB;AACtD,0BAAc,OAAd,yCAAc,OAAd,GAAuB,IAAvB,CAA4B,QAA5B;AACA,0BAAc,OAAd,yCAAc,OAAd,GAAuB,IAAvB,CAA4B,QAA5B;AACA,mBAAO,OAAP,EAAgB,IAAhB,CAAqB,iBAArB;AACA,mBAAO,OAAP,EAAgB,IAAhB,CAAqB,aAArB;;AAEA;AACH,SARD;AASH,KAbD;;AAeA,aAAS,kBAAT,EAA6B,YAAW;AACpC,WAAG,WAAH,EAAgB,YAAW;AACvB,gBAAM,SAAS,CAAC,CAAC,CAAF,EAAK,CAAL,EAAQ,CAAR,CAAf;AACA,gBAAM,cAAc,GAAG,SAAH,CAAa,gBAAb,CAA8B,CAC9C;AACI,sBAAM,MADV;AAEI,wBAAQ;AAFZ,aAD8C,CAA9B,CAApB;AAMA,mBAAO,YAAY,UAAnB,EAA+B,IAA/B,CAAoC,CAApC;;AAEA,gBAAM,WAAW,IAAI,QAAJ,CAAa,WAAb,CAAjB;;AAEA,iBAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,OAAO,MAA3B,EAAmC,GAAnC,EAAwC;AACpC,uBAAO,SAAS,OAAT,CAAiB,CAAjB,CAAP,EAA4B,IAA5B,CAAiC,OAAO,CAAP,CAAjC;AACH;AACJ,SAfD;;AAiBA,WAAG,YAAH,EAAiB,YAAW;AACxB,gBAAM,SAAS,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAf;AACA,gBAAM,cAAc,GAAG,SAAH,CAAa,gBAAb,CAA8B,CAC9C;AACI,sBAAM,OADV;AAEI,wBAAQ;AAFZ,aAD8C,CAA9B,CAApB;AAMA,mBAAO,YAAY,UAAnB,EAA+B,IAA/B,CAAoC,CAApC;;AAEA,gBAAM,WAAW,IAAI,QAAJ,CAAa,WAAb,CAAjB;;AAEA,iBAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,OAAO,MAA3B,EAAmC,GAAnC,EAAwC;AACpC,uBAAO,SAAS,QAAT,CAAkB,CAAlB,CAAP,EAA6B,IAA7B,CAAkC,OAAO,CAAP,CAAlC;AACH;AACJ,SAfD;;AAiBA,iBAAS,YAAT,EAAuB,YAAW;AAC9B,gBAAM,SAAS,CAAC,CAAC,CAAF,EAAK,CAAL,EAAQ,CAAR,CAAf;;AAEA,eAAG,eAAH,EAAoB,YAAW;AAC3B,oBAAM,cAAc,GAAG,SAAH,CAAa,gBAAb,CAA8B,CAC9C;AACI,0BAAM,OADV;AAEI,4BAAQ;AAFZ,iBAD8C,CAA9B,CAApB;AAMA,uBAAO,YAAY,UAAnB,EAA+B,IAA/B,CAAoC,CAApC;;AAEA,oBAAM,WAAW,IAAI,QAAJ,CAAa,WAAb,CAAjB;;AAEA,qBAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,OAAO,MAA3B,EAAmC,GAAnC,EAAwC;AACpC,2BAAO,SAAS,QAAT,CAAkB,IAAI,CAAtB,EAAyB,IAAzB,CAAP,EAAuC,IAAvC,CAA4C,OAAO,CAAP,CAA5C;AACH;AACJ,aAdD;;AAgBA,eAAG,YAAH,EAAiB,YAAW;AACxB,oBAAM,cAAc,GAAG,SAAH,CAAa,gBAAb,CAA8B,CAC9C;AACI,0BAAM,OADV;AAEI,4BAAQ,MAFZ;AAGI,+BAAW;AAHf,iBAD8C,CAA9B,CAApB;AAOA,uBAAO,YAAY,UAAnB,EAA+B,IAA/B,CAAoC,CAApC;;AAEA,oBAAM,WAAW,IAAI,QAAJ,CAAa,WAAb,CAAjB;;AAEA,qBAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,OAAO,MAA3B,EAAmC,GAAnC,EAAwC;AACpC,2BAAO,SAAS,QAAT,CAAkB,IAAI,CAAtB,CAAP,EAAiC,IAAjC,CAAsC,OAAO,CAAP,CAAtC;AACH;AACJ,aAfD;AAgBH,SAnCD;;AAqCA,iBAAS,aAAT,EAAwB,YAAW;AAC/B,gBAAM,SAAS,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAf;;AAEA,eAAG,eAAH,EAAoB,YAAW;AAC3B,oBAAM,cAAc,GAAG,SAAH,CAAa,gBAAb,CAA8B,CAC9C;AACI,0BAAM,QADV;AAEI,4BAAQ;AAFZ,iBAD8C,CAA9B,CAApB;AAMA,uBAAO,YAAY,UAAnB,EAA+B,IAA/B,CAAoC,CAApC;;AAEA,oBAAM,WAAW,IAAI,QAAJ,CAAa,WAAb,CAAjB;;AAEA,qBAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,OAAO,MAA3B,EAAmC,GAAnC,EAAwC;AACpC,2BAAO,SAAS,SAAT,CAAmB,IAAI,CAAvB,EAA0B,IAA1B,CAAP,EAAwC,IAAxC,CAA6C,OAAO,CAAP,CAA7C;AACH;AACJ,aAdD;;AAgBA,eAAG,YAAH,EAAiB,YAAW;AACxB,oBAAM,cAAc,GAAG,SAAH,CAAa,gBAAb,CAA8B,CAC9C;AACI,0BAAM,QADV;AAEI,4BAAQ,MAFZ;AAGI,+BAAW;AAHf,iBAD8C,CAA9B,CAApB;AAOA,uBAAO,YAAY,UAAnB,EAA+B,IAA/B,CAAoC,CAApC;;AAEA,oBAAM,WAAW,IAAI,QAAJ,CAAa,WAAb,CAAjB;;AAEA,qBAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,OAAO,MAA3B,EAAmC,GAAnC,EAAwC;AACpC,2BAAO,SAAS,SAAT,CAAmB,IAAI,CAAvB,CAAP,EAAkC,IAAlC,CAAuC,OAAO,CAAP,CAAvC;AACH;AACJ,aAfD;AAgBH,SAnCD;;AAqCA,iBAAS,YAAT,EAAuB,YAAW;AAC9B,gBAAM,SAAS,CAAC,CAAC,CAAF,EAAK,CAAL,EAAQ,CAAR,CAAf;;AAEA,eAAG,eAAH,EAAoB,YAAW;AAC3B,oBAAM,cAAc,GAAG,SAAH,CAAa,gBAAb,CAA8B,CAC9C;AACI,0BAAM,OADV;AAEI,4BAAQ;AAFZ,iBAD8C,CAA9B,CAApB;AAMA,uBAAO,YAAY,UAAnB,EAA+B,IAA/B,CAAoC,EAApC;;AAEA,oBAAM,WAAW,IAAI,QAAJ,CAAa,WAAb,CAAjB;;AAEA,qBAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,OAAO,MAA3B,EAAmC,GAAnC,EAAwC;AACpC,2BAAO,SAAS,QAAT,CAAkB,IAAI,CAAtB,EAAyB,IAAzB,CAAP,EAAuC,IAAvC,CAA4C,OAAO,CAAP,CAA5C;AACH;AACJ,aAdD;;AAgBA,eAAG,YAAH,EAAiB,YAAW;AACxB,oBAAM,cAAc,GAAG,SAAH,CAAa,gBAAb,CAA8B,CAC9C;AACI,0BAAM,OADV;AAEI,4BAAQ,MAFZ;AAGI,+BAAW;AAHf,iBAD8C,CAA9B,CAApB;AAOA,uBAAO,YAAY,UAAnB,EAA+B,IAA/B,CAAoC,EAApC;;AAEA,oBAAM,WAAW,IAAI,QAAJ,CAAa,WAAb,CAAjB;;AAEA,qBAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,OAAO,MAA3B,EAAmC,GAAnC,EAAwC;AACpC,2BAAO,SAAS,QAAT,CAAkB,IAAI,CAAtB,CAAP,EAAiC,IAAjC,CAAsC,OAAO,CAAP,CAAtC;AACH;AACJ,aAfD;AAgBH,SAnCD;;AAqCA,iBAAS,aAAT,EAAwB,YAAW;AAC/B,gBAAM,SAAS,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAf;;AAEA,eAAG,eAAH,EAAoB,YAAW;AAC3B,oBAAM,cAAc,GAAG,SAAH,CAAa,gBAAb,CAA8B,CAC9C;AACI,0BAAM,QADV;AAEI,4BAAQ;AAFZ,iBAD8C,CAA9B,CAApB;AAMA,uBAAO,YAAY,UAAnB,EAA+B,IAA/B,CAAoC,EAApC;;AAEA,oBAAM,WAAW,IAAI,QAAJ,CAAa,WAAb,CAAjB;;AAEA,qBAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,OAAO,MAA3B,EAAmC,GAAnC,EAAwC;AACpC,2BAAO,SAAS,SAAT,CAAmB,IAAI,CAAvB,EAA0B,IAA1B,CAAP,EAAwC,IAAxC,CAA6C,OAAO,CAAP,CAA7C;AACH;AACJ,aAdD;;AAgBA,eAAG,YAAH,EAAiB,YAAW;AACxB,oBAAM,cAAc,GAAG,SAAH,CAAa,gBAAb,CAA8B,CAC9C;AACI,0BAAM,QADV;AAEI,4BAAQ,MAFZ;AAGI,+BAAW;AAHf,iBAD8C,CAA9B,CAApB;AAOA,uBAAO,YAAY,UAAnB,EAA+B,IAA/B,CAAoC,EAApC;;AAEA,oBAAM,WAAW,IAAI,QAAJ,CAAa,WAAb,CAAjB;;AAEA,qBAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,OAAO,MAA3B,EAAmC,GAAnC,EAAwC;AACpC,2BAAO,SAAS,SAAT,CAAmB,IAAI,CAAvB,CAAP,EAAkC,IAAlC,CAAuC,OAAO,CAAP,CAAvC;AACH;AACJ,aAfD;AAgBH,SAnCD;;AAqCA,iBAAS,cAAT,EAAyB,YAAW;AAChC,gBAAM,SAAS,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAf;;AAEA,eAAG,eAAH,EAAoB,YAAW;AAC3B,oBAAM,cAAc,GAAG,SAAH,CAAa,gBAAb,CAA8B,CAC9C;AACI,0BAAM,SADV;AAEI,4BAAQ;AAFZ,iBAD8C,CAA9B,CAApB;AAMA,uBAAO,YAAY,UAAnB,EAA+B,IAA/B,CAAoC,EAApC;;AAEA,oBAAM,WAAW,IAAI,QAAJ,CAAa,WAAb,CAAjB;;AAEA,qBAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,OAAO,MAA3B,EAAmC,GAAnC,EAAwC;AACpC,2BAAO,SAAS,UAAT,CAAoB,IAAI,CAAxB,EAA2B,IAA3B,CAAP,EAAyC,IAAzC,CAA8C,OAAO,CAAP,CAA9C;AACH;AACJ,aAdD;;AAgBA,eAAG,YAAH,EAAiB,YAAW;AACxB,oBAAM,cAAc,GAAG,SAAH,CAAa,gBAAb,CAA8B,CAC9C;AACI,0BAAM,SADV;AAEI,4BAAQ,MAFZ;AAGI,+BAAW;AAHf,iBAD8C,CAA9B,CAApB;AAOA,uBAAO,YAAY,UAAnB,EAA+B,IAA/B,CAAoC,EAApC;;AAEA,oBAAM,WAAW,IAAI,QAAJ,CAAa,WAAb,CAAjB;;AAEA,qBAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,OAAO,MAA3B,EAAmC,GAAnC,EAAwC;AACpC,2BAAO,SAAS,UAAT,CAAoB,IAAI,CAAxB,CAAP,EAAmC,IAAnC,CAAwC,OAAO,CAAP,CAAxC;AACH;AACJ,aAfD;AAgBH,SAnCD;;AAqCA,iBAAS,cAAT,EAAyB,YAAW;AAChC,gBAAM,SAAS,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAf;;AAEA,eAAG,eAAH,EAAoB,YAAW;AAC3B,oBAAM,cAAc,GAAG,SAAH,CAAa,gBAAb,CAA8B,CAC9C;AACI,0BAAM,SADV;AAEI,4BAAQ;AAFZ,iBAD8C,CAA9B,CAApB;AAMA,uBAAO,YAAY,UAAnB,EAA+B,IAA/B,CAAoC,EAApC;;AAEA,oBAAM,WAAW,IAAI,QAAJ,CAAa,WAAb,CAAjB;;AAEA,qBAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,OAAO,MAA3B,EAAmC,GAAnC,EAAwC;AACpC,2BAAO,SAAS,UAAT,CAAoB,IAAI,CAAxB,EAA2B,IAA3B,CAAP,EAAyC,IAAzC,CAA8C,OAAO,CAAP,CAA9C;AACH;AACJ,aAdD;;AAgBA,eAAG,YAAH,EAAiB,YAAW;AACxB,oBAAM,cAAc,GAAG,SAAH,CAAa,gBAAb,CAA8B,CAC9C;AACI,0BAAM,SADV;AAEI,4BAAQ,MAFZ;AAGI,+BAAW;AAHf,iBAD8C,CAA9B,CAApB;AAOA,uBAAO,YAAY,UAAnB,EAA+B,IAA/B,CAAoC,EAApC;;AAEA,oBAAM,WAAW,IAAI,QAAJ,CAAa,WAAb,CAAjB;;AAEA,qBAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,OAAO,MAA3B,EAAmC,GAAnC,EAAwC;AACpC,2BAAO,SAAS,UAAT,CAAoB,IAAI,CAAxB,CAAP,EAAmC,IAAnC,CAAwC,OAAO,CAAP,CAAxC;AACH;AACJ,aAfD;AAgBH,SAnCD;;AAqCA,WAAG,qBAAH,EAA0B,YAAW;AACjC,gBAAM,cAAc,GAAG,SAAH,CAAa,gBAAb,CAA8B,CAC9C;AACI,sBAAM,OADV;AAEI,wBAAQ,CAAC,EAAD,EAAK,EAAL,CAFZ;AAGI,2BAAW;AAHf,aAD8C,EAM9C;AACI,sBAAM,OADV;AAEI,wBAAQ,CAAC,GAAD;AAFZ,aAN8C,EAU9C;AACI,sBAAM,QADV;AAEI,wBAAQ,CAAC,EAAD;AAFZ,aAV8C,EAc9C;AACI,sBAAM,SADV;AAEI,wBAAQ,CAAC,KAAD;AAFZ,aAd8C,CAA9B,CAApB;AAmBA,mBAAO,YAAY,UAAnB,EAA+B,IAA/B,CAAoC,EAApC;;AAEA,gBAAM,WAAW,IAAI,QAAJ,CAAa,WAAb,CAAjB;AACA,mBAAO,SAAS,QAAT,CAAkB,CAAlB,CAAP,EAA6B,IAA7B,CAAkC,EAAlC;AACA,mBAAO,SAAS,QAAT,CAAkB,CAAlB,CAAP,EAA6B,IAA7B,CAAkC,EAAlC;AACA,mBAAO,SAAS,QAAT,CAAkB,CAAlB,CAAP,EAA6B,IAA7B,CAAkC,GAAlC;AACA,mBAAO,SAAS,SAAT,CAAmB,CAAnB,EAAsB,IAAtB,CAAP,EAAoC,IAApC,CAAyC,EAAzC;AACA,mBAAO,SAAS,UAAT,CAAoB,EAApB,EAAwB,IAAxB,CAAP,EAAsC,OAAtC,CAA8C,KAA9C;AACH,SA5BD;AA6BH,KA9RD;;AAgSA,OAAG,WAAH,EAAgB,UAAS,IAAT,EAAe;AAC3B,YAAM,OAAO,GAAG,SAAH,CAAa,SAAb,CAAuB,CAChC,KADgC,EAEhC,CACI;AACI,kBAAM,OADV;AAEI,oBAAQ,CAAC,CAAD,EAAI,CAAJ;AAFZ,SADJ,EAKI;AACI,kBAAM,QADV;AAEI,oBAAQ,CAAC,GAAD;AAFZ,SALJ,CAFgC,EAYhC,IAAI,IAAJ,CAAS,CAAC,KAAD,CAAT,CAZgC,CAAvB,CAAb;;AAeA,WAAG,SAAH,CAAa,qBAAb,CAAmC,IAAnC,EAAyC,uBAAe;AACpD,mBAAO,YAAY,UAAnB,EAA+B,IAA/B,CAAoC,EAApC;;AAEA,gBAAM,WAAW,IAAI,QAAJ,CAAa,WAAb,CAAjB;AACA,mBAAO,SAAS,QAAT,CAAkB,CAAlB,CAAP,EAA6B,IAA7B,CAAkC,IAAI,UAAJ,CAAe,CAAf,CAAlC;AACA,mBAAO,SAAS,QAAT,CAAkB,CAAlB,CAAP,EAA6B,IAA7B,CAAkC,IAAI,UAAJ,CAAe,CAAf,CAAlC;AACA,mBAAO,SAAS,QAAT,CAAkB,CAAlB,CAAP,EAA6B,IAA7B,CAAkC,IAAI,UAAJ,CAAe,CAAf,CAAlC;AACA,mBAAO,SAAS,QAAT,CAAkB,CAAlB,CAAP,EAA6B,IAA7B,CAAkC,CAAlC;AACA,mBAAO,SAAS,QAAT,CAAkB,CAAlB,CAAP,EAA6B,IAA7B,CAAkC,CAAlC;AACA,mBAAO,SAAS,SAAT,CAAmB,CAAnB,EAAsB,IAAtB,CAAP,EAAoC,IAApC,CAAyC,GAAzC;AACA,mBAAO,SAAS,QAAT,CAAkB,CAAlB,CAAP,EAA6B,IAA7B,CAAkC,IAAI,UAAJ,CAAe,CAAf,CAAlC;AACA,mBAAO,SAAS,QAAT,CAAkB,EAAlB,CAAP,EAA8B,IAA9B,CAAmC,IAAI,UAAJ,CAAe,CAAf,CAAnC;AACA,mBAAO,SAAS,QAAT,CAAkB,EAAlB,CAAP,EAA8B,IAA9B,CAAmC,IAAI,UAAJ,CAAe,CAAf,CAAnC;;AAEA;AACH,SAfD;AAgBH,KAhCD;AAiCH,CAzYD","file":"dataUtilsTests.js","sourcesContent":["suite('rb/utils/dataUtils', function() {\n    it('readBlobAsArrayBuffer', function(done) {\n        const str = 'abc123';\n        const blob = new Blob([str]);\n\n        RB.DataUtils.readBlobAsArrayBuffer(blob, result => {\n            expect(result.byteLength).toBe(6);\n\n            const dataView = new DataView(result);\n\n            for (let i = 0; i < result.byteLength; i++) {\n                expect(dataView.getUint8(i)).toBe(str.charCodeAt(i));\n            }\n\n            done();\n        });\n    });\n\n    it('readBlobAsString', function(done) {\n        const blob = new Blob(['This is a test.']);\n\n        RB.DataUtils.readBlobAsString(blob, result => {\n            expect(typeof result).toBe('string');\n            expect(result).toBe('This is a test.');\n\n            done();\n        });\n    });\n\n    it('readManyBlobsAsArrayBuffers', function(done) {\n        const str1 = 'abc123';\n        const str2 = 'foo';\n\n        const blob1 = new Blob([str1]);\n        const blob2 = new Blob([str2]);\n\n        RB.DataUtils.readManyBlobsAsArrayBuffers([blob1, blob2],\n                                                 (result1, result2) => {\n            expect(result1.byteLength).toBe(6);\n            expect(result2.byteLength).toBe(3);\n\n            const dataView1 = new DataView(result1);\n\n            for (let i = 0; i < result1.byteLength; i++) {\n                expect(dataView1.getUint8(i)).toBe(str1.charCodeAt(i));\n            }\n\n            const dataView2 = new DataView(result2);\n\n            for (let i = 0; i < result2.byteLength; i++) {\n                expect(dataView2.getUint8(i)).toBe(str2.charCodeAt(i));\n            }\n\n            done();\n        });\n    });\n\n    it('readManyBlobsAsStrings', function(done) {\n        const blob1 = new Blob(['This is a test.']);\n        const blob2 = new Blob(['hello world']);\n\n        RB.DataUtils.readManyBlobsAsStrings([blob1, blob2],\n                                            (result1, result2) => {\n            expect(typeof result1).toBe('string');\n            expect(typeof result2).toBe('string');\n            expect(result1).toBe('This is a test.');\n            expect(result2).toBe('hello world');\n\n            done();\n        });\n    });\n\n    describe('buildArrayBuffer', function() {\n        it('With int8', function() {\n            const values = [-1, 0, 1];\n            const arrayBuffer = RB.DataUtils.buildArrayBuffer([\n                {\n                    type: 'int8',\n                    values: values,\n                },\n            ]);\n            expect(arrayBuffer.byteLength).toBe(3);\n\n            const dataView = new DataView(arrayBuffer);\n\n            for (let i = 0; i < values.length; i++) {\n                expect(dataView.getInt8(i)).toBe(values[i]);\n            }\n        });\n\n        it('With uint8', function() {\n            const values = [1, 2, 3];\n            const arrayBuffer = RB.DataUtils.buildArrayBuffer([\n                {\n                    type: 'uint8',\n                    values: values,\n                },\n            ]);\n            expect(arrayBuffer.byteLength).toBe(3);\n\n            const dataView = new DataView(arrayBuffer);\n\n            for (let i = 0; i < values.length; i++) {\n                expect(dataView.getUint8(i)).toBe(values[i]);\n            }\n        });\n\n        describe('With int16', function() {\n            const values = [-1, 0, 1];\n\n            it('Little endian', function() {\n                const arrayBuffer = RB.DataUtils.buildArrayBuffer([\n                    {\n                        type: 'int16',\n                        values: values,\n                    },\n                ]);\n                expect(arrayBuffer.byteLength).toBe(6);\n\n                const dataView = new DataView(arrayBuffer);\n\n                for (let i = 0; i < values.length; i++) {\n                    expect(dataView.getInt16(i * 2, true)).toBe(values[i]);\n                }\n            });\n\n            it('Big endian', function() {\n                const arrayBuffer = RB.DataUtils.buildArrayBuffer([\n                    {\n                        type: 'int16',\n                        values: values,\n                        bigEndian: true,\n                    },\n                ]);\n                expect(arrayBuffer.byteLength).toBe(6);\n\n                const dataView = new DataView(arrayBuffer);\n\n                for (let i = 0; i < values.length; i++) {\n                    expect(dataView.getInt16(i * 2)).toBe(values[i]);\n                }\n            });\n        });\n\n        describe('With uint16', function() {\n            const values = [1, 2, 3];\n\n            it('Little endian', function() {\n                const arrayBuffer = RB.DataUtils.buildArrayBuffer([\n                    {\n                        type: 'uint16',\n                        values: values,\n                    },\n                ]);\n                expect(arrayBuffer.byteLength).toBe(6);\n\n                const dataView = new DataView(arrayBuffer);\n\n                for (let i = 0; i < values.length; i++) {\n                    expect(dataView.getUint16(i * 2, true)).toBe(values[i]);\n                }\n            });\n\n            it('Big endian', function() {\n                const arrayBuffer = RB.DataUtils.buildArrayBuffer([\n                    {\n                        type: 'uint16',\n                        values: values,\n                        bigEndian: true,\n                    },\n                ]);\n                expect(arrayBuffer.byteLength).toBe(6);\n\n                const dataView = new DataView(arrayBuffer);\n\n                for (let i = 0; i < values.length; i++) {\n                    expect(dataView.getUint16(i * 2)).toBe(values[i]);\n                }\n            });\n        });\n\n        describe('With int32', function() {\n            const values = [-1, 0, 1];\n\n            it('Little endian', function() {\n                const arrayBuffer = RB.DataUtils.buildArrayBuffer([\n                    {\n                        type: 'int32',\n                        values: values,\n                    },\n                ]);\n                expect(arrayBuffer.byteLength).toBe(12);\n\n                const dataView = new DataView(arrayBuffer);\n\n                for (let i = 0; i < values.length; i++) {\n                    expect(dataView.getInt32(i * 4, true)).toBe(values[i]);\n                }\n            });\n\n            it('Big endian', function() {\n                const arrayBuffer = RB.DataUtils.buildArrayBuffer([\n                    {\n                        type: 'int32',\n                        values: values,\n                        bigEndian: true,\n                    },\n                ]);\n                expect(arrayBuffer.byteLength).toBe(12);\n\n                const dataView = new DataView(arrayBuffer);\n\n                for (let i = 0; i < values.length; i++) {\n                    expect(dataView.getInt32(i * 4)).toBe(values[i]);\n                }\n            });\n        });\n\n        describe('With uint32', function() {\n            const values = [1, 2, 3];\n\n            it('Little endian', function() {\n                const arrayBuffer = RB.DataUtils.buildArrayBuffer([\n                    {\n                        type: 'uint32',\n                        values: values,\n                    },\n                ]);\n                expect(arrayBuffer.byteLength).toBe(12);\n\n                const dataView = new DataView(arrayBuffer);\n\n                for (let i = 0; i < values.length; i++) {\n                    expect(dataView.getUint32(i * 4, true)).toBe(values[i]);\n                }\n            });\n\n            it('Big endian', function() {\n                const arrayBuffer = RB.DataUtils.buildArrayBuffer([\n                    {\n                        type: 'uint32',\n                        values: values,\n                        bigEndian: true,\n                    },\n                ]);\n                expect(arrayBuffer.byteLength).toBe(12);\n\n                const dataView = new DataView(arrayBuffer);\n\n                for (let i = 0; i < values.length; i++) {\n                    expect(dataView.getUint32(i * 4)).toBe(values[i]);\n                }\n            });\n        });\n\n        describe('With float32', function() {\n            const values = [1, 2, 3];\n\n            it('Little endian', function() {\n                const arrayBuffer = RB.DataUtils.buildArrayBuffer([\n                    {\n                        type: 'float32',\n                        values: values,\n                    },\n                ]);\n                expect(arrayBuffer.byteLength).toBe(12);\n\n                const dataView = new DataView(arrayBuffer);\n\n                for (let i = 0; i < values.length; i++) {\n                    expect(dataView.getFloat32(i * 4, true)).toBe(values[i]);\n                }\n            });\n\n            it('Big endian', function() {\n                const arrayBuffer = RB.DataUtils.buildArrayBuffer([\n                    {\n                        type: 'float32',\n                        values: values,\n                        bigEndian: true,\n                    },\n                ]);\n                expect(arrayBuffer.byteLength).toBe(12);\n\n                const dataView = new DataView(arrayBuffer);\n\n                for (let i = 0; i < values.length; i++) {\n                    expect(dataView.getFloat32(i * 4)).toBe(values[i]);\n                }\n            });\n        });\n\n        describe('With float64', function() {\n            const values = [1, 2, 3];\n\n            it('Little endian', function() {\n                const arrayBuffer = RB.DataUtils.buildArrayBuffer([\n                    {\n                        type: 'float64',\n                        values: values,\n                    },\n                ]);\n                expect(arrayBuffer.byteLength).toBe(24);\n\n                const dataView = new DataView(arrayBuffer);\n\n                for (let i = 0; i < values.length; i++) {\n                    expect(dataView.getFloat64(i * 8, true)).toBe(values[i]);\n                }\n            });\n\n            it('Big endian', function() {\n                const arrayBuffer = RB.DataUtils.buildArrayBuffer([\n                    {\n                        type: 'float64',\n                        values: values,\n                        bigEndian: true,\n                    },\n                ]);\n                expect(arrayBuffer.byteLength).toBe(24);\n\n                const dataView = new DataView(arrayBuffer);\n\n                for (let i = 0; i < values.length; i++) {\n                    expect(dataView.getFloat64(i * 8)).toBe(values[i]);\n                }\n            });\n        });\n\n        it('With complex schema', function() {\n            const arrayBuffer = RB.DataUtils.buildArrayBuffer([\n                {\n                    type: 'int32',\n                    values: [10, 20],\n                    bigEndian: true,\n                },\n                {\n                    type: 'uint8',\n                    values: [100],\n                },\n                {\n                    type: 'uint16',\n                    values: [64],\n                },\n                {\n                    type: 'float64',\n                    values: [1.234],\n                },\n            ]);\n            expect(arrayBuffer.byteLength).toBe(19);\n\n            const dataView = new DataView(arrayBuffer);\n            expect(dataView.getInt32(0)).toBe(10);\n            expect(dataView.getInt32(4)).toBe(20);\n            expect(dataView.getUint8(8)).toBe(100);\n            expect(dataView.getUint16(9, true)).toBe(64);\n            expect(dataView.getFloat64(11, true)).toEqual(1.234);\n        });\n    });\n\n    it('buildBlob', function(done) {\n        const blob = RB.DataUtils.buildBlob([\n            'abc',\n            [\n                {\n                    type: 'uint8',\n                    values: [1, 2],\n                },\n                {\n                    type: 'uint32',\n                    values: [100],\n                },\n            ],\n            new Blob(['def']),\n        ]);\n\n        RB.DataUtils.readBlobAsArrayBuffer(blob, arrayBuffer => {\n            expect(arrayBuffer.byteLength).toBe(12);\n\n            const dataView = new DataView(arrayBuffer);\n            expect(dataView.getUint8(0)).toBe('a'.charCodeAt(0));\n            expect(dataView.getUint8(1)).toBe('b'.charCodeAt(0));\n            expect(dataView.getUint8(2)).toBe('c'.charCodeAt(0));\n            expect(dataView.getUint8(3)).toBe(1);\n            expect(dataView.getUint8(4)).toBe(2);\n            expect(dataView.getUint32(5, true)).toBe(100);\n            expect(dataView.getUint8(9)).toBe('d'.charCodeAt(0));\n            expect(dataView.getUint8(10)).toBe('e'.charCodeAt(0));\n            expect(dataView.getUint8(11)).toBe('f'.charCodeAt(0));\n\n            done();\n        });\n    });\n});\n"]}