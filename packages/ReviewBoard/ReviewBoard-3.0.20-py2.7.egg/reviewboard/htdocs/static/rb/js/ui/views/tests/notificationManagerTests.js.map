{"version":3,"sources":["notificationManagerTests.es6.js"],"names":[],"mappings":";;AAAA,MAAM,yCAAN,EAAiD,YAAW;AACxD,QAAM,WAAW,GAAG,mBAAH,CAAuB,QAAxC;AACA,QAAI,yBAAJ;;AAEA,QAAM,eAAe,SAAf,YAAe,CAAS,KAAT,EAAgB,OAAhB,EAAyB;AAC1C,aAAK,KAAL,GAAa,KAAb;AACA,aAAK,OAAL,GAAe,OAAf;AACA,aAAK,KAAL,GAAa,YAAW,CAAE,CAA1B;AACH,KAJD;AAKA,iBAAa,iBAAb,GAAiC,YAAW;AACxC,qBAAa,UAAb,GAA0B,SAA1B;AACH,KAFD;;AAIA,eAAW,YAAW;AAClB,2BAAmB,GAAG,mBAAH,CAAuB,YAA1C;AACA,WAAG,mBAAH,CAAuB,YAAvB,GAAsC,YAAtC;;AAEA,WAAG,WAAH,CAAe,QAAf,CAAwB,GAAxB,CAA4B,4BAA5B,EAA0D,IAA1D;;AAEA,iBAAS,KAAT;;AAEA,eAAO,aAAa,UAApB,EAAgC,IAAhC,CAAqC,SAArC;AACH,KATD;;AAWA,cAAU,YAAW;AACjB,WAAG,mBAAH,CAAuB,YAAvB,GAAsC,gBAAtC;AACH,KAFD;;AAIA,aAAS,sBAAT,EAAiC,YAAW;AACxC,WAAG,oBAAH,EAAyB,YAAW;AAChC,qBAAS,MAAT,CAAgB;AACZ,uBAAO,MADK;AAEZ,sBAAM;AAFM,aAAhB;;AAKA,gBAAM,eAAe,SAAS,aAA9B;AACA,mBAAO,YAAP,EAAqB,GAArB,CAAyB,IAAzB,CAA8B,IAA9B;AACA,mBAAO,aAAa,KAApB,EAA2B,IAA3B,CAAgC,MAAhC;AACA,mBAAO,aAAa,OAAb,CAAqB,IAA5B,EAAkC,IAAlC,CAAuC,gBAAvC;AACH,SAVD;;AAYA,WAAG,eAAH,EAAoB,YAAW;AAC3B,qBAAS,UAAT,GAAsB,IAAtB;AACA,kBAAM,QAAN,EAAgB,8BAAhB,EACK,GADL,CACS,WADT,CACqB,IADrB;;AAGA,mBAAO,SAAS,YAAT,EAAP,EAAgC,IAAhC,CAAqC,IAArC;AACH,SAND;;AASA,WAAG,2CAAH,EAAgD,YAAW;AACvD,qBAAS,UAAT,GAAsB,KAAtB;AACA,kBAAM,QAAN,EAAgB,8BAAhB,EACK,GADL,CACS,WADT,CACqB,IADrB;;AAGA,mBAAO,SAAS,YAAT,EAAP,EAAgC,IAAhC,CAAqC,KAArC;AACH,SAND;;AAQC,WAAG,8CAAH,EAAmD,YAAW;AAC3D,qBAAS,UAAT,GAAsB,IAAtB;AACA,kBAAM,QAAN,EAAgB,8BAAhB,EACK,GADL,CACS,WADT,CACqB,KADrB;;AAGA,mBAAO,SAAS,YAAT,EAAP,EAAgC,IAAhC,CAAqC,KAArC;AACH,SANA;AAOJ,KArCD;AAsCH,CAlED","file":"notificationManagerTests.js","sourcesContent":["suite('rb/ui/managers/NotificationManagerModel', function() {\n    const instance = RB.NotificationManager.instance;\n    let origNotification;\n\n    const Notification = function(title, options) {\n        this.title = title;\n        this.options = options;\n        this.close = function() {};\n    };\n    Notification.requestPermission = function() {\n        Notification.permission = 'granted';\n    };\n\n    beforeEach(function() {\n        origNotification = RB.NotificationManager.Notification;\n        RB.NotificationManager.Notification = Notification;\n\n        RB.UserSession.instance.set('enableDesktopNotifications', true);\n\n        instance.setup();\n\n        expect(Notification.permission).toBe('granted');\n    });\n\n    afterEach(function() {\n        RB.NotificationManager.Notification = origNotification;\n    });\n\n    describe('Notification Manager', function() {\n        it('Calls external API', function() {\n            instance.notify({\n                title: 'Test',\n                body: 'This is a test',\n            });\n\n            const notification = instance._notification;\n            expect(notification).not.toBe(null);\n            expect(notification.title).toBe('Test');\n            expect(notification.options.body).toBe('This is a test');\n        });\n\n        it('Should notify', function() {\n            instance._canNotify = true;\n            spyOn(instance, '_haveNotificationPermissions')\n                .and.returnValue(true);\n\n            expect(instance.shouldNotify()).toBe(true);\n        });\n\n\n        it('Should not notify due to user permissions', function() {\n            instance._canNotify = false;\n            spyOn(instance, '_haveNotificationPermissions')\n                .and.returnValue(true);\n\n            expect(instance.shouldNotify()).toBe(false);\n        });\n\n         it('Should not notify due to browser permissions', function() {\n            instance._canNotify = true;\n            spyOn(instance, '_haveNotificationPermissions')\n                .and.returnValue(false);\n\n            expect(instance.shouldNotify()).toBe(false);\n        });\n    });\n});\n"]}