{"version":3,"sources":["dndUploaderView.es6.js"],"names":[],"mappings":";;AAAA,CAAC,YAAW;;AAGZ;;;;;;;;;;;;;;;;;;AAkBA,QAAM,gBAAgB,SAAS,KAAT,CAAe,MAAf,CAAsB;AACxC,gBADwC,sBAC7B;AACP,mBAAO;AACH,yBAAS,EAAE,MAAF,CADN;AAEH,0BAAU,oBAAW,CAAE,CAFpB;AAGH;AAHG,aAAP;AAKH;AAPuC,KAAtB,CAAtB;;AAWA;;;;;;;;;AASA,QAAM,qBAAqB,SAAS,IAAT,CAAc,MAAd,CAAqB;AAC5C,mBAAW,aADiC;;AAG5C,gBAAQ;AACJ,yBAAa,cADT;AAEJ,wBAAY,aAFR;AAGJ,yBAAa,cAHT;AAIJ,oBAAQ;AAJJ,SAHoC;;AAU5C;;;;;;;AAOA,cAjB4C,oBAiBnC;AACL,iBAAK,GAAL,CAAS,IAAT,CAAc,KAAK,KAAL,CAAW,GAAX,CAAe,UAAf,CAAd;;AAEA,mBAAO,IAAP;AACH,SArB2C;;;AAuB5C;;;AAGA,YA1B4C,kBA0BrC;AAAA;;AACH,gBAAM,UAAU,KAAK,KAAL,CAAW,GAAX,CAAe,SAAf,CAAhB;AACA,oBAAQ,QAAR,CAAiB,qBAAjB;;AAEA;;;;AAIA,cAAE,KAAF,CAAQ,YAAM;AACV,oBAAM,SAAS,QAAQ,MAAR,EAAf;AACA,oBAAM,QAAQ,QAAQ,UAAR,KAAuB,IAArC;AACA,oBAAM,SAAS,QAAQ,WAAR,KAAwB,IAAvC;;AAEA,sBAAK,GAAL,CACK,GADL,CACS;AACD,2BAAO,KADN;AAED,4BAAQ,MAFP;AAGD,mCAAe,MAHd;AAID,0BAAM,OAAO,IAAP,GAAc,IAJnB;AAKD,yBAAK,OAAO,GAAP,GAAa;AALjB,iBADT,EAQK,IARL;AASH,aAdD;AAeH,SAjD2C;;;AAmD5C;;;AAGA,YAtD4C,kBAsDrC;AACH,iBAAK,KAAL,CAAW,GAAX,CAAe,SAAf,EAA0B,WAA1B,CAAsC,qBAAtC;AACA,iBAAK,GAAL,CAAS,IAAT;AACH,SAzD2C;;;AA2D5C;;;;;;AAMA,aAjE4C,mBAiEpC;AAAA;;AACJ,iBAAK,GAAL,CAAS,OAAT,CAAiB,YAAM;AACnB,uBAAK,OAAL,CAAa,QAAb;AACA,uBAAK,MAAL;AACH,aAHD;AAIH,SAtE2C;;;AAwE5C;;;;;;;;;AASA,eAjF4C,mBAiFpC,CAjFoC,EAiFjC;AACP,cAAE,eAAF;AACA,cAAE,cAAF;;AAEA,gBAAM,KAAK,EAAE,aAAF,CAAgB,YAA3B;AACA,gBAAM,QAAQ,MAAM,GAAG,KAAvB;;AAEA,gBAAI,KAAJ,EAAW;AACP,oBAAM,WAAW,KAAK,KAAL,CAAW,GAAX,CAAe,UAAf,CAAjB;;AADO;AAAA;AAAA;;AAAA;AAGP,yCAAiB,MAAM,IAAN,CAAW,KAAX,CAAjB,8HAAoC;AAAA,4BAA3B,IAA2B;;AAChC,iCAAS,IAAT;AACH;AALM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMV;;AAED,iBAAK,OAAL,CAAa,SAAb;AACH,SAjG2C;;;AAmG5C;;;;;;;;;;AAUA,oBA7G4C,wBA6G/B,CA7G+B,EA6G5B;AACZ,cAAE,cAAF;;AAEA,gBAAM,KAAK,EAAE,aAAF,CAAgB,YAA3B;;AAEA,gBAAI,EAAJ,EAAQ;AACJ,mBAAG,UAAH,GAAgB,MAAhB;AACA,qBAAK,GAAL,CAAS,QAAT,CAAkB,uBAAlB;AACH;AACJ,SAtH2C;;;AAwH5C;;;;;;;;;;AAUA,mBAlI4C,uBAkIhC,CAlIgC,EAkI7B;AACX,cAAE,cAAF;AACH,SApI2C;;;AAsI5C;;;;;;;;;;;;AAYA,oBAlJ4C,wBAkJ/B,CAlJ+B,EAkJ5B;AACZ,cAAE,cAAF;;AAEA,gBAAM,KAAK,EAAE,aAAF,CAAgB,YAA3B;;AAEA,gBAAI,EAAJ,EAAQ;AACJ,mBAAG,UAAH,GAAgB,MAAhB;AACA,qBAAK,GAAL,CAAS,WAAT,CAAqB,uBAArB;AACH;AACJ;AA3J2C,KAArB,CAA3B;;AA+JA;;;;;;;;;;AAUA,OAAG,WAAH,GAAiB,SAAS,IAAT,CAAc,MAAd,CAAqB;AAClC;;;AAGA,kBAJkC,wBAIrB;AACT,iBAAK,YAAL,GAAoB,IAAI,SAAS,UAAb,CAAwB;AACxC,uBAAO;AADiC,aAAxB,CAApB;AAGA,iBAAK,aAAL,GAAqB,EAArB;AACA,iBAAK,mBAAL,GAA2B,IAA3B;AACA,iBAAK,gBAAL,GAAwB,KAAxB;AACA,iBAAK,eAAL,GAAuB,KAAvB;;AAEA,cAAE,OAAF,CAAU,IAAV,EAAgB,eAAhB,EAAiC,eAAjC;;AAEA,cAAE,MAAF,EACK,EADL,CACQ,8BADR,EACwC,KAAK,aAD7C,EAEK,EAFL,CAEQ,mBAFR,EAE6B,KAAK,aAFlC;AAGH,SAlBiC;;;AAoBlC;;;;;;;;;;;;;;;AAeA,0BAnCkC,8BAmCf,OAnCe,EAmCN,QAnCM,EAmCI,QAnCJ,EAmCc;AAC5C,gBAAI,KAAK,YAAL,CAAkB,SAAlB,CAA4B,EAAE,gBAAF,EAA5B,MAA6C,SAAjD,EAA4D;AACxD,oBAAM,SAAS,IAAI,aAAJ,CAAkB;AAC7B,oCAD6B;AAE7B,sCAF6B;AAG7B;AAH6B,iBAAlB,CAAf;AAKA,qBAAK,YAAL,CAAkB,GAAlB,CAAsB,MAAtB;;AAEA,oBAAM,UAAU,IAAI,kBAAJ,CAAuB;AACnC,2BAAO;AAD4B,iBAAvB,CAAhB;;AAIA,wBAAQ,MAAR,GAAiB,GAAjB,CACK,IADL,GAEK,QAFL,CAEc,SAAS,IAFvB;AAGA,qBAAK,QAAL,CAAc,OAAd,EAAuB,SAAvB,EAAkC,KAAK,aAAvC;;AAEA,qBAAK,aAAL,CAAmB,IAAnB,CAAwB,OAAxB;AACH,aAlBD,MAkBO;AACH,wBAAQ,KAAR,CAAc,qCAAd,EAAqD,OAArD;AACH;AACJ,SAzDiC;;;AA2DlC;;;;;;;AAOA,4BAlEkC,gCAkEb,OAlEa,EAkEJ;AAC1B,gBAAM,SAAS,KAAK,YAAL,CAAkB,SAAlB,CAA4B,EAAE,SAAS,OAAX,EAA5B,CAAf;AACA,gBAAM,YAAY,KAAK,aAAL,CAAmB,SAAnB,CACd;AAAA,uBAAY,QAAQ,KAAR,KAAkB,MAA9B;AAAA,aADc,CAAlB;;AAGA,gBAAI,cAAc,CAAC,CAAnB,EAAsB;AAClB,qBAAK,aAAL,CAAmB,SAAnB,EAA8B,MAA9B;AACA,qBAAK,aAAL,CAAmB,MAAnB,CAA0B,SAA1B,EAAqC,CAArC;AACH;;AAED,gBAAI,WAAW,SAAf,EAA0B;AACtB,qBAAK,YAAL,CAAkB,MAAlB,CAAyB,MAAzB;AACH;AACJ,SA/EiC;;;AAiFlC;;;;;;;;;;;AAWA,qBA5FkC,yBA4FpB,CA5FoB,EA4FjB;AACb,gBAAI,EAAE,aAAF,CAAgB,YAAhB,KAAiC,SAAjC,IACA,MAAM,IAAN,CAAW,EAAE,aAAF,CAAgB,YAAhB,CAA6B,KAAxC,EAA+C,QAA/C,CAAwD,OAAxD,CADJ,EACsE;AAClE,qBAAK,eAAL,GAAuB,KAAvB;;AAEA,oBAAI,CAAC,KAAK,gBAAV,EAA4B;AACxB,yBAAK,gBAAL,GAAwB,IAAxB;AACA,yBAAK,aAAL,CAAmB,OAAnB,CAA2B;AAAA,+BAAW,QAAQ,IAAR,EAAX;AAAA,qBAA3B;AACH;AACJ;AACJ,SAtGiC;;;AAwGlC;;;AAGA,qBA3GkC,2BA2GlB;AAAA;;AACZ;;;;;;;;;AASA,gBAAI,KAAK,mBAAT,EAA8B;AAC1B,6BAAa,KAAK,mBAAlB;AACH;;AAED,iBAAK,eAAL,GAAuB,IAAvB;AACA,iBAAK,mBAAL,GAA2B,WAAW,YAAM;AACxC,oBAAI,OAAK,eAAT,EAA0B;AACtB,2BAAK,gBAAL,GAAwB,KAAxB;AACA,2BAAK,aAAL,CAAmB,OAAnB,CAA2B;AAAA,+BAAW,QAAQ,IAAR,EAAX;AAAA,qBAA3B;AACH;AACJ,aAL0B,EAKxB,GALwB,CAA3B;AAMH;AAhIiC,KAArB,EAiId;AACC,kBAAU,IADX;;AAGC;;;;;;;AAOA,cAVD,oBAUU;AACL,oBAAQ,MAAR,CAAe,GAAG,WAAH,CAAe,QAAf,KAA4B,IAA3C,EACe,4CADf;;AAGA,eAAG,WAAH,CAAe,QAAf,GAA0B,IAAI,GAAG,WAAP,EAA1B;AACA,mBAAO,GAAG,WAAH,CAAe,QAAtB;AACH;AAhBF,KAjIc,CAAjB;AAqJC,CAvWD","file":"dndUploaderView.js","sourcesContent":["(function() {\n\n\n/**\n * A model for creating drag and drop targets.\n *\n * Registering a RB.DnDDropTarget with the RB.DnDUploader will create an\n * overlay on top of the target when files are dragged over the page. This\n * overlay will accept dropped files and run the dropAction for each file\n * dropped on it.\n *\n * Model Attributes:\n *     $target (jQuery):\n *         The target element to allow file drops on.\n *\n *     callback (function):\n *         The function to call when a file is dropped.\n *\n *     dropText (string):\n *         The string to show in the overlay.\n */\nconst DnDDropTarget = Backbone.Model.extend({\n    defaults() {\n        return {\n            $target: $(window),\n            callback: function() {},\n            dropText: gettext('Drop to upload')\n        };\n    }\n});\n\n\n/**\n * Displays an overlay over an element that accepts file drops.\n *\n * The overlay appears as semi-transparent black with the dropText message in\n * the center.\n *\n * If the user cancels the drop or moves the mouse out of the page, the\n * overlay will fade away.\n */\nconst DnDDropOverlayView = Backbone.View.extend({\n    className: 'dnd-overlay',\n\n    events: {\n        'dragenter': '_onDragEnter',\n        'dragover': '_onDragOver',\n        'dragleave': '_onDragLeave',\n        'drop': '_onDrop'\n    },\n\n    /**\n     * Render the view.\n     *\n     * Returns:\n     *     DnDDropOverlayView:\n     *     This object, for chaining.\n     */\n    render() {\n        this.$el.text(this.model.get('dropText'));\n\n        return this;\n    },\n\n    /**\n     * Show the overlay.\n     */\n    show() {\n        const $target = this.model.get('$target');\n        $target.addClass('dnd-overlay-visible');\n\n        /*\n         * Adding the class to the target may change its visibility or size.\n         * Let that clear before trying to position/size the overlay.\n         */\n        _.defer(() => {\n            const offset = $target.offset();\n            const width = $target.outerWidth() + 'px';\n            const height = $target.outerHeight() + 'px';\n\n            this.$el\n                .css({\n                    width: width,\n                    height: height,\n                    'line-height': height,\n                    left: offset.left + 'px',\n                    top: offset.top + 'px'\n                })\n                .show();\n        });\n    },\n\n    /**\n     * Hide the overlay.\n     */\n    hide() {\n        this.model.get('$target').removeClass('dnd-overlay-visible');\n        this.$el.hide();\n    },\n\n    /**\n     * Close the overlay.\n     *\n     * The overlay will fade out, and once it's gone, it will emit the \"closed\"\n     * event and remove itself from the page.\n     */\n    close() {\n        this.$el.fadeOut(() => {\n            this.trigger('closed');\n            this.remove();\n        });\n    },\n\n    /**\n     * Handle drop events on the overlay.\n     *\n     * This will call the appropriate callback for all dropped files.\n     *\n     * Args:\n     *     e (DragEvent):\n     *         The event that triggered the callback.\n     */\n    _onDrop(e) {\n        e.stopPropagation();\n        e.preventDefault();\n\n        const dt = e.originalEvent.dataTransfer;\n        const files = dt && dt.files;\n\n        if (files) {\n            const callback = this.model.get('callback');\n\n            for (let file of Array.from(files)) {\n                callback(file);\n            }\n        }\n\n        this.trigger('closing');\n    },\n\n    /**\n     * Handle dragenter events on the overlay.\n     *\n     * If there's files being dragged, the drop effect (usually represented\n     * by a mouse cursor) will be set to indicate a copy of the files.\n     *\n     * Args:\n     *     e (DragEvent):\n     *         The event that triggered the callback.\n     */\n    _onDragEnter(e) {\n        e.preventDefault();\n\n        const dt = e.originalEvent.dataTransfer;\n\n        if (dt) {\n            dt.dropEffect = 'copy';\n            this.$el.addClass('dnd-overlay-highlight');\n        }\n    },\n\n    /**\n     * Handle dragover events on the overlay.\n     *\n     * This merely prevents the default action, which indicates to the\n     * underlying API that this element can be dropped on.\n     *\n     * Args:\n     *     e (DragEvent):\n     *         The event which triggered the callback.\n     */\n    _onDragOver(e) {\n        e.preventDefault();\n    },\n\n    /**\n     * Handle dragleave events on the overlay.\n     *\n     * If there were files previously being dragged over the overlay,\n     * the drop effect will be reset.\n     *\n     * The overlay is always closed on a dragleave.\n     *\n     * Args:\n     *     e (DragEvent):\n     *         The event that triggered the callback.\n     */\n    _onDragLeave(e) {\n        e.preventDefault();\n\n        const dt = e.originalEvent.dataTransfer;\n\n        if (dt) {\n            dt.dropEffect = 'none';\n            this.$el.removeClass('dnd-overlay-highlight');\n        }\n    }\n});\n\n\n/*\n * Handles drag-and-drop file uploads for a review request.\n *\n * This makes it possible to drag files from a file manager and drop them\n * into Review Board. This requires browser support for HTML 5 file\n * drag-and-drop, which is available in most modern browsers.\n *\n * The moment the DnDUploader is created, it will begin listening for\n * DnD-related events on the window.\n */\nRB.DnDUploader = Backbone.View.extend({\n    /**\n     * Initialize the view.\n     */\n    initialize() {\n        this._dropTargets = new Backbone.Collection({\n            model: DnDDropTarget\n        });\n        this._dropOverlays = [];\n        this._hideOverlayTimeout = null;\n        this._overlaysVisible = false;\n        this._overlaysHiding = false;\n\n        _.bindAll(this, '_showOverlays', '_hideOverlays');\n\n        $(window)\n            .on('dragstart dragenter dragover', this._showOverlays)\n            .on('dragend dragleave', this._hideOverlays);\n    },\n\n    /**\n     * Register a new drop target.\n     *\n     * Args:\n     *     $target (jQuery):\n     *         The target element for drops.\n     *\n     *     dropText (string):\n     *         The text to show on the overlay.\n     *\n     *     callback (function):\n     *         The function to call when a file is dropped. This takes a single\n     *         file argument, and will be called for each file that is dropped\n     *         on the target.\n     */\n    registerDropTarget($target, dropText, callback) {\n        if (this._dropTargets.findWhere({ $target }) === undefined) {\n            const target = new DnDDropTarget({\n                $target,\n                dropText,\n                callback\n            });\n            this._dropTargets.add(target);\n\n            const overlay = new DnDDropOverlayView({\n                model: target\n            });\n\n            overlay.render().$el\n                .hide()\n                .appendTo(document.body);\n            this.listenTo(overlay, 'closing', this._hideOverlays);\n\n            this._dropOverlays.push(overlay);\n        } else {\n            console.error('Drop target was already registered!', $target);\n        }\n    },\n\n    /**\n     * Unregister an existing drop target.\n     *\n     * Args:\n     *     $target (jQuery):\n     *         The target element for drops.\n     */\n    unregisterDropTarget($target) {\n        const target = this._dropTargets.findWhere({ $target: $target });\n        const overlayIx = this._dropOverlays.findIndex(\n            overlay => (overlay.model === target));\n\n        if (overlayIx !== -1) {\n            this._dropOverlays[overlayIx].remove();\n            this._dropOverlays.splice(overlayIx, 1);\n        }\n\n        if (target !== undefined) {\n            this._dropTargets.remove(target);\n        }\n    },\n\n    /**\n     * Show the drop overlays.\n     *\n     * An overlay will be displayed over all the registered drop targets to\n     * give the user a place to drop the files onto. The overlay will report\n     * any files dropped.\n     *\n     * Args:\n     *     e (DragEvent):\n     *         The event that triggered the callback.\n     */\n    _showOverlays(e) {\n        if (e.originalEvent.dataTransfer !== undefined &&\n            Array.from(e.originalEvent.dataTransfer.types).includes('Files')) {\n            this._overlaysHiding = false;\n\n            if (!this._overlaysVisible) {\n                this._overlaysVisible = true;\n                this._dropOverlays.forEach(overlay => overlay.show());\n            }\n        }\n    },\n\n    /**\n     * Hide the drop overlays.\n     */\n    _hideOverlays() {\n        /*\n         * This will get called many times because the event bubbles up from\n         * all the children of the document. We only want to hide the overlays\n         * when the drag exits the window.\n         *\n         * In order to make this work reliably, we only hide the overlays after\n         * a timeout (to make sure there's not a dragenter event coming\n         * immediately after this).\n         */\n        if (this._hideOverlayTimeout) {\n            clearTimeout(this._hideOverlayTimeout);\n        }\n\n        this._overlaysHiding = true;\n        this._hideOverlayTimeout = setTimeout(() => {\n            if (this._overlaysHiding) {\n                this._overlaysVisible = false;\n                this._dropOverlays.forEach(overlay => overlay.hide());\n            }\n        }, 200);\n    }\n}, {\n    instance: null,\n\n    /**\n     * Create the DnDUploader instance.\n     *\n     * Returns:\n     *     RB.DnDUploader:\n     *     The new instance.\n     */\n    create() {\n        console.assert(RB.DnDUploader.instance === null,\n                       'DnDUploader.create may only be called once');\n\n        RB.DnDUploader.instance = new RB.DnDUploader();\n        return RB.DnDUploader.instance;\n    }\n});\n\n\n})();\n"]}