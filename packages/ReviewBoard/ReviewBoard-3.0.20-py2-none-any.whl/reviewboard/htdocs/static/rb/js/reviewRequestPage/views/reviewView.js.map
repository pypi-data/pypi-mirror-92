{"version":3,"sources":["reviewView.es6.js"],"names":[],"mappings":"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","file":"reviewView.js","sourcesContent":["/**\n * Handles interaction for a review on the review request page. These can be\n * contained within the main review entries, but also for status updates in\n * change description entries or the initial status updates entry.\n */\nRB.ReviewRequestPage.ReviewView = Backbone.View.extend({\n    /**\n     * Initialize the view.\n     */\n    initialize(options) {\n        this.options = options;\n        this.entryModel = options.entryModel;\n\n        this._bannerView = null;\n        this._draftBannerShown = false;\n        this._openIssueCount = 0;\n        this._reviewReply = null;\n        this._replyEditors = [];\n        this._replyEditorViews = [];\n        this._replyDraftsCount = 0;\n        this._diffFragmentViews = [];\n\n        this._$reviewComments = null;\n        this._$bodyTop = null;\n        this._$bodyBottom = null;\n\n        this.model.set('includeTextTypes', 'html,raw,markdown');\n\n        this._setupNewReply();\n\n        this.listenTo(this.entryModel, 'change:collapsed', () => {\n            if (!this.entryModel.get('collapsed')) {\n                this._diffFragmentViews.forEach(\n                    view => view.hideControls(false));\n            }\n        });\n    },\n\n    /**\n     * Render the view.\n     *\n     * Returns:\n     *     RB.ReviewRequestPage.ReviewView:\n     *     This object, for chaining.\n     */\n    render() {\n        const reviewRequestEditor = this.entryModel.get('reviewRequestEditor');\n\n        this._$reviewComments = this.$('.review-comments');\n\n        const $comment = this._$reviewComments.find(\n            '.review-comment-details .review-comment');\n        this._$bodyTop = $comment.find('.body_top');\n        this._$bodyBottom = $comment.find('.body_bottom');\n\n        this._replyDraftsCount = 0;\n\n        this.on('hasDraftChanged', hasDraft => {\n            if (hasDraft) {\n                this._showReplyDraftBanner();\n            } else {\n                this._hideReplyDraftBanner();\n            }\n        });\n\n        _.each(this._$reviewComments.find('.issue-indicator'), el => {\n            const $issueState = $('.issue-state', el);\n\n            /*\n             * Not all issue-indicator divs have an issue-state div for the\n             * issue bar.\n             */\n            if ($issueState.length > 0) {\n                const issueStatus = $issueState.data('issue-status');\n\n                if (RB.BaseComment.isStateOpen(issueStatus)) {\n                    this._openIssueCount++;\n                }\n\n                const issueBar = new RB.CommentIssueBarView({\n                    el: el,\n                    reviewID: this.model.id,\n                    canVerify: $issueState.data('can-verify'),\n                    commentID: $issueState.data('comment-id'),\n                    commentType: $issueState.data('comment-type'),\n                    interactive: $issueState.data('interactive'),\n                    issueStatus: issueStatus,\n                });\n\n                issueBar.render();\n\n                this.listenTo(issueBar, 'statusChanged',\n                              (oldStatus, newStatus) => {\n                    const oldOpen = RB.BaseComment.isStateOpen(oldStatus);\n                    const newOpen = RB.BaseComment.isStateOpen(newStatus);\n\n                    if (oldOpen !== newOpen) {\n                        if (newOpen) {\n                            this._openIssueCount++;\n                        } else {\n                            this._openIssueCount--;\n                        }\n                    }\n\n                    this.trigger('openIssuesChanged');\n                });\n            }\n        });\n\n        _.each(this.$('.comment-section'), el => {\n            const $el = $(el);\n            const editor = new RB.ReviewRequestPage.ReviewReplyEditor({\n                anchorPrefix: $el.data('reply-anchor-prefix'),\n                contextID: $el.data('context-id'),\n                contextType: $el.data('context-type'),\n                review: this.model,\n                reviewReply: this._reviewReply,\n            });\n\n            const view = new RB.ReviewRequestPage.ReviewReplyEditorView({\n                el: el,\n                model: editor,\n                reviewRequestEditor: reviewRequestEditor,\n            });\n            view.render();\n\n            this.listenTo(editor, 'change:hasDraft', (model, hasDraft) => {\n                if (hasDraft) {\n                    this._replyDraftsCount++;\n                    this.trigger('hasDraftChanged', true);\n                } else {\n                    this._replyDraftsCount--;\n\n                    if (this._replyDraftsCount === 0) {\n                        this.trigger('hasDraftChanged', false);\n                    }\n                }\n            });\n\n            this._replyEditors.push(editor);\n            this._replyEditorViews.push(view);\n\n            if (editor.get('hasDraft')) {\n                this._replyDraftsCount++;\n            }\n        });\n\n        if (this._replyDraftsCount > 0) {\n            this.trigger('hasDraftChanged', true);\n        }\n\n        /*\n         * Load any diff fragments for comments made on this review. Each\n         * will be queued up and loaded when the page is rendered.\n         */\n        this._diffFragmentViews = [];\n\n        const page = RB.PageManager.getPage();\n        const diffCommentsData = this.entryModel.get('diffCommentsData');\n\n        for (let i = 0; i < diffCommentsData.length; i++) {\n            const diffCommentData = diffCommentsData[i];\n\n            page.queueLoadDiff(diffCommentData[0], diffCommentData[1],\n                               view => this._diffFragmentViews.push(view));\n        }\n\n        /*\n         * Do this last, after ReviewReplyEditorView has already set up the\n         * inline editors.\n         */\n        const reviewRequest = this.model.get('parentObject');\n        const bugTrackerURL = reviewRequest.get('bugTrackerURL');\n        _.each(this.$('pre.reviewtext'), el => {\n            RB.formatText($(el), { bugTrackerURL: bugTrackerURL });\n        });\n\n        this.listenTo(this.model, 'change:bodyTop',\n                      this._onBodyTopChanged);\n        this.listenTo(this.model, 'change:bodyBottom',\n                      this._onBodyBottomChanged);\n        this.listenTo(this.model, 'change:bodyTopRichText',\n                      this._onBodyTopRichTextChanged);\n        this.listenTo(this.model, 'change:bodyBottomRichText',\n                      this._onBodyBottomRichTextChanged);\n\n        return this;\n    },\n\n    /**\n     * Handler for when the Body Top field of a review changes.\n     *\n     * Updates the HTML for the field to show the new content.\n     */\n    _onBodyTopChanged() {\n        this._$bodyTop.html(this.model.get('htmlTextFields').bodyTop);\n    },\n\n    /**\n     * Handler for when the Body Top's Rich Text field of a review changes.\n     *\n     * Updates the class on the field to reflect the Rich Text state.\n     */\n    _onBodyTopRichTextChanged() {\n        if (this.model.get('bodyTopRichText')) {\n            this._$bodyTop.addClass('rich-text');\n        } else {\n            this._$bodyTop.removeClass('rich-text');\n        }\n    },\n\n    /**\n     * Handler for when the Body Bottom field of a review changes.\n     *\n     * Updates the HTML for the field to show the new content. The visibility\n     * of the body section will also be dependent on whether there is any\n     * content (mimicking the logic used when rendering the page).\n     */\n    _onBodyBottomChanged() {\n        const html = this.model.get('htmlTextFields').bodyBottom;\n\n        this._$bodyBottom\n            .html(html)\n            .closest('li').setVisible(html && html.length > 0);\n    },\n\n    /**\n     * Handler for when the Body Bottom's Rich Text field of a review changes.\n     *\n     * Updates the class on the field to reflect the Rich Text state.\n     */\n    _onBodyBottomRichTextChanged() {\n        if (this.model.get('bodyBottomRichText')) {\n            this._$bodyBottom.addClass('rich-text');\n        } else {\n            this._$bodyBottom.removeClass('rich-text');\n        }\n    },\n\n    /**\n     * Return whether there are any open issues in the review.\n     *\n     * Returns:\n     *     boolean:\n     *     true if there are any open issues.\n     */\n    hasOpenIssues() {\n        return this._openIssueCount > 0;\n    },\n\n    /**\n     * Return the number of open issues in the review.\n     *\n     * Returns:\n     *     number:\n     *     The number of open issues.\n     */\n    getOpenIssueCount() {\n        return this._openIssueCount;\n    },\n\n    /**\n     * Return the ReviewReplyEditorView with the given context type and ID.\n     *\n     * Args:\n     *     contextType (string):\n     *         The type of object being replied to (such as ``body_top`` or\n     *         ``diff_comments``)\n     *\n     *     contextID (number, optional):\n     *         The ID of the comment being replied to, if appropriate.\n     *\n     * Returns:\n     *     RB.ReviewRequestPage.ReviewReplyEditorView:\n     *     The matching editor view.\n     */\n    getReviewReplyEditorView(contextType, contextID) {\n        if (contextID === undefined) {\n            contextID = null;\n        }\n\n        return _.find(this._replyEditorViews, view => {\n            const editor = view.model;\n            return editor.get('contextID') === contextID &&\n                   editor.get('contextType') === contextType;\n        });\n    },\n\n    /**\n     * Return the active reply.\n     *\n     * Returns:\n     *     RB.ReviewReply:\n     *     The active draft reply, or null if none exists.\n     */\n    getReviewReply() {\n        return this._reviewReply;\n    },\n\n    /**\n     * Set up a new ReviewReply for the editors.\n     *\n     * The new ReviewReply will be used for any new comments made on this\n     * review.\n     *\n     * A ReviewReply is set until it's either destroyed or published, at\n     * which point a new one is set.\n     *\n     * Args:\n     *     reviewReply (RB.ReviewReply, optional):\n     *         The reply object. If this is ``null``, a new ``RB.ReviewReply``\n     *         will be created. Note that this argument is only expected to be\n     *         used for unit testing.\n     */\n    _setupNewReply(reviewReply) {\n        if (!reviewReply) {\n            reviewReply = this.model.createReply();\n        }\n\n        if (this._reviewReply !== null) {\n            this.stopListening(this._reviewReply);\n\n            // Update all the existing editors to point to the new object.\n            this._replyEditors.forEach(\n                editor => editor.set('reviewReply', reviewReply));\n\n            this.trigger('hasDraftChanged', false);\n        }\n\n        this.listenTo(reviewReply, 'destroyed published',\n                      () => this._setupNewReply());\n\n        this._reviewReply = reviewReply;\n    },\n\n    /**\n     * Show the reply draft banner.\n     *\n     * This will be called in response to any new replies made on a review,\n     * or if there are pending replies that already exist on the review.\n     */\n    _showReplyDraftBanner() {\n        if (!this._draftBannerShown) {\n            this._bannerView =\n                new RB.ReviewRequestPage.ReviewReplyDraftBannerView({\n                    model: this._reviewReply,\n                    $floatContainer: this.options.$bannerFloatContainer,\n                    noFloatContainerClass:\n                        this.options.bannerNoFloatContainerClass,\n                    reviewRequestEditor: this.entryModel.get(\n                        'reviewRequestEditor'),\n                });\n\n            this._bannerView.render();\n            this._bannerView.$el.appendTo(this.options.$bannerParent);\n            this._draftBannerShown = true;\n        }\n    },\n\n    /**\n     * Hide the reply draft banner.\n     */\n    _hideReplyDraftBanner() {\n        if (this._draftBannerShown) {\n            this._bannerView.remove();\n            this._bannerView = null;\n            this._draftBannerShown = false;\n        }\n    },\n});\n"]}