{"version":3,"sources":["reviewRequestPageModelTests.es6.js"],"names":[],"mappings":"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","file":"reviewRequestPageModelTests.js","sourcesContent":["suite('rb/reviewRequestPage/models/ReviewRequestPage', function() {\n    let page;\n\n    beforeEach(function() {\n        page = new RB.ReviewRequestPage.ReviewRequestPage({\n            updatesURL: '/r/123/_updates/',\n            checkForUpdates: false,\n            reviewRequestData: {},\n            editorData: {\n                fileAttachments: [],\n                mutableByUser: true,\n                showSendEmail: false,\n            },\n        }, {\n            parse: true,\n        });\n    });\n\n    describe('Methods', function() {\n        it('addEntry', function() {\n            const entry = new RB.ReviewRequestPage.Entry();\n\n            page.addEntry(entry);\n\n            expect(entry.get('page')).toBe(page);\n            expect(page.entries.at(0)).toBe(entry);\n        });\n\n        describe('parse', function() {\n            it('Parent called', function() {\n                const attrs = page.parse({\n                    reviewRequestData: {\n                        summary: 'Test summary',\n                    },\n                });\n\n                expect(attrs.reviewRequest).toBeTruthy();\n                expect(attrs.reviewRequest.get('summary')).toBe('Test summary');\n            });\n\n            it('updatesURL', function() {\n                const attrs = page.parse({\n                    updatesURL: 'https://example.com/',\n                });\n\n                expect(attrs.updatesURL).toBe('https://example.com/');\n            });\n        });\n\n        describe('watchEntryUpdates', function() {\n            let entry;\n\n            beforeEach(function() {\n                spyOn(page, '_scheduleCheckUpdates');\n\n                entry = new RB.ReviewRequestPage.Entry({\n                    id: 'my-entry',\n                });\n            });\n\n            it('First call', function() {\n                page.watchEntryUpdates(entry, 1000);\n\n                expect(page._watchedUpdatesPeriodMS).toBe(1000);\n                expect(page._watchedEntries[entry.id]).toEqual({\n                    entry: entry,\n                    periodMS: 1000,\n                });\n                expect(page._scheduleCheckUpdates).toHaveBeenCalled();\n            });\n\n            it('Shorter watch periods take precedent', function() {\n                page._watchedUpdatesPeriodMS = 5000;\n                page.watchEntryUpdates(entry, 1000);\n\n                expect(page._watchedUpdatesPeriodMS).toBe(1000);\n                expect(page._watchedEntries[entry.id]).toEqual({\n                    entry: entry,\n                    periodMS: 1000,\n                });\n                expect(page._scheduleCheckUpdates).toHaveBeenCalled();\n            });\n\n            it('Subsequent call with longer watch period', function() {\n                page._watchedUpdatesPeriodMS = 1000;\n                page.watchEntryUpdates(entry, 5000);\n\n                expect(page._watchedUpdatesPeriodMS).toBe(1000);\n                expect(page._watchedEntries[entry.id]).toEqual({\n                    entry: entry,\n                    periodMS: 5000,\n                });\n                expect(page._scheduleCheckUpdates).toHaveBeenCalled();\n            });\n        });\n\n        describe('stopWatchingEntryUpdates', function() {\n            beforeEach(function() {\n                spyOn(page, '_scheduleCheckUpdates');\n            });\n\n            it('Switches to next-shortest update period', function() {\n                const entry1 = new RB.ReviewRequestPage.Entry({\n                    id: '1',\n                });\n\n                const entry2 = new RB.ReviewRequestPage.Entry({\n                    id: '2',\n                });\n\n                page.watchEntryUpdates(entry1, 2000);\n                page.watchEntryUpdates(entry2, 1000);\n                expect(page._watchedUpdatesPeriodMS).toBe(1000);\n\n                page.stopWatchingEntryUpdates(entry2);\n                expect(page._watchedUpdatesPeriodMS).toBe(2000);\n            });\n\n            it('Last entry being watched', function() {\n                const entry = new RB.ReviewRequestPage.Entry({\n                    id: '1',\n                });\n\n                page.watchEntryUpdates(entry, 1000);\n                page.stopWatchingEntryUpdates(entry);\n\n                expect(_.isEmpty(page._watchedEntries)).toBe(true);\n                expect(page._watchedUpdatesTimeout).toBe(null);\n                expect(page._watchedUpdatesPeriodMS).toBe(null);\n                expect(page._watchedUpdatesLastScheduleTime).toBe(null);\n            });\n        });\n    });\n\n    describe('Dynamic updating', function() {\n        it('Scheduled check for update', function() {\n            let scheduledCallback = null;\n\n            spyOn(page, '_scheduleCheckUpdates').and.callThrough();\n            spyOn(window, 'setTimeout').and.callFake((cb, ms) => {\n                scheduledCallback = cb;\n\n                return 'dummy value';\n            });\n            spyOn(page, '_loadUpdates').and.callThrough();\n            spyOn(Backbone, 'sync');\n\n            const entry1 = new RB.ReviewRequestPage.Entry({\n                typeID: 'my-entry',\n                id: '100',\n            });\n\n            const entry2 = new RB.ReviewRequestPage.Entry({\n                typeID: 'my-entry',\n                id: '200',\n            });\n\n            const entry3 = new RB.ReviewRequestPage.Entry({\n                typeID: 'another-entry',\n                id: 'foo',\n            });\n\n            page.watchEntryUpdates(entry1, 2000);\n            page.watchEntryUpdates(entry2, 1000);\n            page.watchEntryUpdates(entry3, 2000);\n\n            expect(scheduledCallback).not.toBe(null);\n\n            expect(page._scheduleCheckUpdates).toHaveBeenCalled();\n            expect(page._watchedUpdatesLastScheduleTime).not.toBe(null);\n            expect(page._watchedUpdatesTimeout).not.toBe(null);\n\n            scheduledCallback();\n\n            expect(page._watchedUpdatesLastScheduleTime).not.toBe(null);\n            expect(page._watchedUpdatesTimeout).toBe(null);\n            expect(page._loadUpdates.calls.count()).toBe(1);\n            expect(page._loadUpdates.calls.mostRecent().args[0].entries)\n                .toEqual([entry1, entry2, entry3]);\n\n            expect(Backbone.sync.calls.count()).toBe(1);\n\n            const callOptions = Backbone.sync.calls.mostRecent().args[2];\n            expect(callOptions.url)\n                .toBe('/r/123/_updates/?entries=my-entry:100,200' +\n                      ';another-entry:foo');\n            expect(callOptions.noActivityIndicator).toBe(true);\n            expect(callOptions.dataType).toBe('arraybuffer');\n        });\n\n        describe('Response parsing', function() {\n            const TestEntry = RB.ReviewRequestPage.Entry.extend({\n                parse(rsp) {\n                    return _.extend({\n                        myAttr: rsp.myAttr,\n                    }, RB.ReviewRequestPage.Entry.prototype.parse.call(this,\n                                                                       rsp));\n                },\n            });\n\n            let entry1;\n            let entry2;\n\n            beforeEach(function() {\n                spyOn(page, 'trigger').and.callThrough();\n\n                entry1 = new TestEntry({\n                    typeID: 'my-entry',\n                    id: '1',\n                    addedTimestamp: new Date(2017, 7, 1, 0, 0, 0),\n                    updatedTimestamp: new Date(2017, 7, 1, 12, 0, 0),\n                });\n\n                entry2 = new TestEntry({\n                    typeID: 'my-entry',\n                    id: '2',\n                    addedTimestamp: new Date(2017, 7, 1, 0, 0, 0),\n                    updatedTimestamp: new Date(2017, 7, 1, 12, 0, 0),\n                });\n\n                page.addEntry(entry1);\n                page.addEntry(entry2);\n            });\n\n            it('Updates to outdated entries', function(done) {\n                spyOn(entry1, 'beforeApplyUpdate');\n                spyOn(entry1, 'afterApplyUpdate');\n                spyOn(entry2, 'beforeApplyUpdate');\n                spyOn(entry2, 'afterApplyUpdate');\n\n                spyOn($, 'ajax').and.callFake(function(options) {\n                    expect(options.dataType).toBe('arraybuffer');\n                    expect(options.url).toBe('/r/123/_updates/');\n\n                    const metadata1 = new Blob([\n                        '{\"type\": \"entry\", ',\n                        '\"entryType\": \"my-entry\", ',\n                        '\"entryID\": \"1\", ',\n                        '\"addedTimestamp\": \"2017-07-01T00:00:00\", ',\n                        '\"updatedTimestamp\": \"2017-09-04T14:30:20\", ',\n                        '\"modelData\": {\"myAttr\": \"value1\"}}',\n                    ]);\n                    const metadata2 = new Blob([\n                        '{\"type\": \"entry\", ',\n                        '\"entryType\": \"my-entry\", ',\n                        '\"entryID\": \"2\", ',\n                        '\"addedTimestamp\": \"2017-07-01T00:00:00\", ',\n                        '\"updatedTimestamp\": \"2017-09-03T14:30:20\", ',\n                        '\"modelData\": {\"myAttr\": \"value2\"}}',\n                    ]);\n\n                    const html1 = new Blob(['<p>My HTML!</p>']);\n                    const html2 = new Blob(['<p>Oh hi!</p>']);\n\n                    const blob = RB.DataUtils.buildBlob([\n                        [{\n                            type: 'uint32',\n                            values: [177],\n                        }],\n                        metadata1,\n                        [{\n                            type: 'uint32',\n                            values: [15],\n                        }],\n                        html1,\n                        [{\n                            type: 'uint32',\n                            values: [177],\n                        }],\n                        metadata2,\n                        [{\n                            type: 'uint32',\n                            values: [13],\n                        }],\n                        html2,\n                    ]);\n\n                    RB.DataUtils.readBlobAsArrayBuffer(blob, options.success);\n                });\n\n                page._loadUpdates({\n                    onDone: () => {\n                        /* Check the first entry's updates and events. */\n                        const metadata1 = {\n                            type: 'entry',\n                            entryType: 'my-entry',\n                            entryID: '1',\n                            addedTimestamp: '2017-07-01T00:00:00',\n                            updatedTimestamp: '2017-09-04T14:30:20',\n                            modelData: {\n                                myAttr: 'value1',\n                            },\n                        };\n                        const html1 = '<p>My HTML!</p>';\n\n                        expect(entry1.get('myAttr')).toBe('value1');\n                        expect(entry1.beforeApplyUpdate)\n                            .toHaveBeenCalledWith(metadata1);\n                        expect(entry1.afterApplyUpdate)\n                            .toHaveBeenCalledWith(metadata1);\n                        expect(page.trigger).toHaveBeenCalledWith(\n                            'applyingUpdate:entry', metadata1, html1);\n                        expect(page.trigger).toHaveBeenCalledWith(\n                            'applyingUpdate:entry:1', metadata1, html1);\n                        expect(page.trigger).toHaveBeenCalledWith(\n                            'appliedModelUpdate:entry:1', metadata1, html1);\n                        expect(page.trigger).toHaveBeenCalledWith(\n                            'appliedUpdate:entry:1', metadata1, html1);\n                        expect(page.trigger).toHaveBeenCalledWith(\n                            'appliedUpdate:entry', metadata1, html1);\n\n                        /* Check the second entry's updates and events. */\n                        const metadata2 = {\n                            type: 'entry',\n                            entryType: 'my-entry',\n                            entryID: '2',\n                            addedTimestamp: '2017-07-01T00:00:00',\n                            updatedTimestamp: '2017-09-03T14:30:20',\n                            modelData: {\n                                myAttr: 'value2',\n                            },\n                        };\n                        const html2 = '<p>Oh hi!</p>';\n\n                        expect(entry2.get('myAttr')).toBe('value2');\n                        expect(entry2.beforeApplyUpdate)\n                            .toHaveBeenCalledWith(metadata2);\n                        expect(entry2.afterApplyUpdate)\n                            .toHaveBeenCalledWith(metadata2);\n                        expect(page.trigger).toHaveBeenCalledWith(\n                            'applyingUpdate:entry', metadata2, html2);\n                        expect(page.trigger).toHaveBeenCalledWith(\n                            'applyingUpdate:entry:2', metadata2, html2);\n                        expect(page.trigger).toHaveBeenCalledWith(\n                            'appliedModelUpdate:entry:2', metadata2, html2);\n                        expect(page.trigger).toHaveBeenCalledWith(\n                            'appliedUpdate:entry:2', metadata2, html2);\n                        expect(page.trigger).toHaveBeenCalledWith(\n                            'appliedUpdate:entry', metadata2, html2);\n\n                        expect(page.trigger).toHaveBeenCalledWith(\n                            'updatesProcessed');\n\n                        done();\n                    },\n                });\n            });\n\n            it('Updates to up-to-date entries', function(done) {\n                entry1.set('myAttr', 'existing-value');\n\n                spyOn(entry1, 'beforeApplyUpdate');\n                spyOn(entry1, 'afterApplyUpdate');\n\n                spyOn($, 'ajax').and.callFake(function(options) {\n                    expect(options.dataType).toBe('arraybuffer');\n                    expect(options.url).toBe('/r/123/_updates/');\n\n                    const metadata = new Blob([\n                        '{\"type\": \"entry\", ',\n                        '\"entryType\": \"my-entry\", ',\n                        '\"entryID\": \"1\", ',\n                        '\"addedTimestamp\": \"2016-09-04T14:30:20\", ',\n                        '\"updatedTimestamp\": \"2016-12-10T12:24:14\", ',\n                        '\"modelData\": {\"myAttr\": \"value1\"}}',\n                    ]);\n                    const html = new Blob(['<p>My HTML!</p>']);\n\n                    let blob = RB.DataUtils.buildBlob([\n                        [{\n                            type: 'uint32',\n                            values: [metadata.size],\n                        }],\n                        metadata,\n                        [{\n                            type: 'uint32',\n                            values: [html.size],\n                        }],\n                        html,\n                    ]);\n\n                    RB.DataUtils.readBlobAsArrayBuffer(blob, options.success);\n                });\n\n                page._loadUpdates({\n                    onDone: () => {\n                        /* Check the first entry's updates and events. */\n                        const metadata1 = {\n                            type: 'entry',\n                            entryType: 'my-entry',\n                            entryID: '1',\n                            addedTimestamp: '2016-09-04T14:30:20',\n                            updatedTimestamp: '2016-09-04T14:30:20',\n                            modelData: {\n                                myAttr: 'value1',\n                            },\n                        };\n                        const html1 = '<p>My HTML!</p>';\n\n                        expect(entry1.get('myAttr')).toBe('existing-value');\n                        expect(entry1.beforeApplyUpdate)\n                            .not.toHaveBeenCalled();\n                        expect(entry1.afterApplyUpdate).not.toHaveBeenCalled();\n                        expect(page.trigger).not.toHaveBeenCalledWith(\n                            'applyingUpdate:entry', metadata1, html1);\n                        expect(page.trigger).not.toHaveBeenCalledWith(\n                            'applyingUpdate:entry:1', metadata1, html1);\n                        expect(page.trigger).not.toHaveBeenCalledWith(\n                            'appliedModelUpdate:entry:1', metadata1, html1);\n                        expect(page.trigger).not.toHaveBeenCalledWith(\n                            'appliedUpdate:entry:1', metadata1, html1);\n                        expect(page.trigger).not.toHaveBeenCalledWith(\n                            'appliedUpdate:entry', metadata1, html1);\n\n                        expect(page.trigger)\n                            .toHaveBeenCalledWith('updatesProcessed');\n\n                        done();\n                    },\n                });\n            });\n\n            it('Updates to non-entries', function(done) {\n                spyOn($, 'ajax').and.callFake(function(options) {\n                    expect(options.dataType).toBe('arraybuffer');\n                    expect(options.url).toBe('/r/123/_updates/');\n\n                    const metadata = new Blob([\n                        '{\"type\": \"something\", \"foo\": \"bar\"}',\n                    ]);\n                    const html = new Blob(['<div>Something</div>']);\n\n                    let blob = RB.DataUtils.buildBlob([\n                        [{\n                            type: 'uint32',\n                            values: [metadata.size],\n                        }],\n                        metadata,\n                        [{\n                            type: 'uint32',\n                            values: [html.size],\n                        }],\n                        html,\n                    ]);\n\n                    RB.DataUtils.readBlobAsArrayBuffer(blob, options.success);\n                });\n\n                page._loadUpdates({\n                    onDone: () => {\n                        const metadata = {\n                            type: 'something',\n                            foo: 'bar',\n                        };\n                        const html = '<div>Something</div>';\n\n                        expect(page.trigger).toHaveBeenCalledWith(\n                            'applyingUpdate:something', metadata, html);\n                        expect(page.trigger).toHaveBeenCalledWith(\n                            'appliedUpdate:something', metadata, html);\n\n                        expect(page.trigger)\n                            .toHaveBeenCalledWith('updatesProcessed');\n\n                        done();\n                    },\n                });\n            });\n\n            it('Updates containing Unicode in HTML', function(done) {\n                spyOn(entry1, 'beforeApplyUpdate');\n                spyOn(entry1, 'afterApplyUpdate');\n                spyOn(entry2, 'beforeApplyUpdate');\n                spyOn(entry2, 'afterApplyUpdate');\n\n                spyOn($, 'ajax').and.callFake(function(options) {\n                    expect(options.dataType).toBe('arraybuffer');\n                    expect(options.url).toBe('/r/123/_updates/');\n\n                    const metadata1 = new Blob([\n                        '{\"type\": \"entry\", ',\n                        '\"entryType\": \"my-entry\", ',\n                        '\"entryID\": \"1\", ',\n                        '\"addedTimestamp\": \"2017-07-01T00:00:00\", ',\n                        '\"updatedTimestamp\": \"2017-09-04T14:30:20\", ',\n                        '\"modelData\": {\"myAttr\": \"value1\"}}',\n                    ]);\n                    const metadata2 = new Blob([\n                        '{\"type\": \"entry\", ',\n                        '\"entryType\": \"my-entry\", ',\n                        '\"entryID\": \"2\", ',\n                        '\"addedTimestamp\": \"2017-07-01T00:00:00\", ',\n                        '\"updatedTimestamp\": \"2017-09-03T14:30:20\", ',\n                        '\"modelData\": {\"myAttr\": \"value2\"}}',\n                    ]);\n\n                    /* UTF-8 bytes for \"<span>áéíóú 🔥</span>\" */\n                    const html1 = [\n                        60, 115, 112, 97, 110, 62, 195, 161, 195, 169,\n                        195, 173, 195, 179, 195, 186, 32, 240, 159, 148,\n                        165, 60, 47, 115, 112, 97, 110, 62,\n                    ];\n\n                    /* UTF-8 bytes for \"<span>ÄËÏÖÜŸ 😱</span>\" */\n                    const html2 = [\n                        60, 115, 112, 97, 110, 62, 195, 132, 195, 139,\n                        195, 143, 195, 150, 195, 156, 197, 184, 32, 240,\n                        159, 152, 177, 60, 47, 115, 112, 97, 110, 62,\n                    ];\n\n                    expect(html1.length).toBe(28);\n                    expect(html2.length).toBe(30);\n\n                    let blob = RB.DataUtils.buildBlob([\n                        [{\n                            type: 'uint32',\n                            values: [metadata1.size],\n                        }],\n                        metadata1,\n                        [\n                            {\n                                type: 'uint32',\n                                values: [html1.length],\n                            },\n                            {\n                                type: 'uint8',\n                                values: html1,\n                            },\n                            {\n                                type: 'uint32',\n                                values: [metadata2.size],\n                            },\n                        ],\n                        metadata2,\n                        [\n                            {\n                                type: 'uint32',\n                                values: [html2.length],\n                            },\n                            {\n                                type: 'uint8',\n                                values: html2,\n                            },\n                        ],\n                    ]);\n\n                    RB.DataUtils.readBlobAsArrayBuffer(blob, options.success);\n                });\n\n                page._loadUpdates({\n                    onDone: () => {\n                        /* Check the first entry's updates and events. */\n                        const metadata1 = {\n                            type: 'entry',\n                            entryType: 'my-entry',\n                            entryID: '1',\n                            addedTimestamp: '2017-07-01T00:00:00',\n                            updatedTimestamp: '2017-09-04T14:30:20',\n                            modelData: {\n                                myAttr: 'value1',\n                            },\n                        };\n                        const html1 = '<span>áéíóú 🔥</span>';\n\n                        expect(entry1.get('myAttr')).toBe('value1');\n                        expect(entry1.beforeApplyUpdate)\n                            .toHaveBeenCalledWith(metadata1);\n                        expect(entry1.afterApplyUpdate)\n                            .toHaveBeenCalledWith(metadata1);\n                        expect(page.trigger).toHaveBeenCalledWith(\n                            'applyingUpdate:entry', metadata1, html1);\n                        expect(page.trigger).toHaveBeenCalledWith(\n                            'applyingUpdate:entry:1', metadata1, html1);\n                        expect(page.trigger).toHaveBeenCalledWith(\n                            'appliedModelUpdate:entry:1', metadata1, html1);\n                        expect(page.trigger).toHaveBeenCalledWith(\n                            'appliedUpdate:entry:1', metadata1, html1);\n                        expect(page.trigger).toHaveBeenCalledWith(\n                            'appliedUpdate:entry', metadata1, html1);\n\n                        /* Check the second entry's updates and events. */\n                        const metadata2 = {\n                            type: 'entry',\n                            entryType: 'my-entry',\n                            entryID: '2',\n                            addedTimestamp: '2017-07-01T00:00:00',\n                            updatedTimestamp: '2017-09-03T14:30:20',\n                            modelData: {\n                                myAttr: 'value2',\n                            },\n                        };\n                        const html2 = '<span>ÄËÏÖÜŸ 😱</span>';\n\n                        expect(entry2.get('myAttr')).toBe('value2');\n                        expect(entry2.beforeApplyUpdate)\n                            .toHaveBeenCalledWith(metadata2);\n                        expect(entry2.afterApplyUpdate)\n                            .toHaveBeenCalledWith(metadata2);\n                        expect(page.trigger).toHaveBeenCalledWith(\n                            'applyingUpdate:entry', metadata2, html2);\n                        expect(page.trigger).toHaveBeenCalledWith(\n                            'applyingUpdate:entry:2', metadata2, html2);\n                        expect(page.trigger).toHaveBeenCalledWith(\n                            'appliedModelUpdate:entry:2', metadata2, html2);\n                        expect(page.trigger).toHaveBeenCalledWith(\n                            'appliedUpdate:entry:2', metadata2, html2);\n                        expect(page.trigger).toHaveBeenCalledWith(\n                            'appliedUpdate:entry', metadata2, html2);\n\n                        expect(page.trigger)\n                            .toHaveBeenCalledWith('updatesProcessed');\n\n                        done();\n                    },\n                });\n            });\n        });\n    });\n});\n"]}