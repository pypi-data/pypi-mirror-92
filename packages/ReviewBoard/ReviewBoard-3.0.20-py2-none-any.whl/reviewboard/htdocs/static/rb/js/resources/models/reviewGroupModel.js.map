{"version":3,"sources":["reviewGroupModel.es6.js"],"names":[],"mappings":"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","file":"reviewGroupModel.js","sourcesContent":["(function() {\n\n\n/**\n * A member of a review group.\n *\n * This is used to handle adding a user to a group or removing from a group.\n */\nconst GroupMember = RB.BaseResource.extend({\n    defaults() {\n        return _.defaults({\n            username: null,\n            added: false,\n            loaded: true\n        }, RB.BaseResource.prototype.defaults());\n    },\n\n    serializedAttrs: ['username'],\n\n    /**\n     * Return a URL for this resource.\n     *\n     * If this represents an added user, the URL will point to\n     * <groupname>/<username>/. Otherwise, it just points to <groupname>/.\n     *\n     * Returns:\n     *     string:\n     *     The URL to use when syncing the model.\n     */\n    url() {\n        let url = this.get('baseURL');\n\n        if (this.get('added')) {\n            url += this.get('username') + '/';\n        }\n\n        return url;\n    },\n\n    /**\n     * Return whether the group membership is \"new\".\n     *\n     * A non-added user is new, meaning the save operation will trigger\n     * a POST to add the user.\n     *\n     * Returns:\n     *     boolean:\n     *     Whether this member is newly-added to the group.\n     */\n    isNew() {\n        return !this.get('added');\n    },\n\n    /**\n     * Parse the result payload.\n     *\n     * We don't really care about the result, so we don't bother doing any\n     * work to parse.\n     */\n    parse() {}\n});\n\n\n/**\n * A review group.\n *\n * This provides some utility functions for working with an existing\n * review group.\n *\n * At the moment, this consists of marking a review group as\n * starred/unstarred.\n */\nRB.ReviewGroup = RB.BaseResource.extend({\n    defaults() {\n        return _.defaults({\n            name: null\n        }, RB.BaseResource.prototype.defaults());\n    },\n\n    rspNamespace: 'group',\n\n    /**\n     * Return the URL to the review group.\n     *\n     * If this is a new group, the URL will point to the base groups/ URL.\n     * Otherwise, it points to the URL for the group itself.\n     *\n     * Returns:\n     *     string:\n     *     The URL to use when syncing the model.\n     */\n    url() {\n        let url = SITE_ROOT + (this.get('localSitePrefix') || '') +\n                  'api/groups/';\n\n        if (!this.isNew()) {\n            url += this.get('name') + '/';\n        }\n\n        return url;\n    },\n\n    /**\n     * Mark a review group as starred or unstarred.\n     *\n     * Args:\n     *     starred (boolean):\n     *         Whether or not the group is starred.\n     *\n     *     options (object):\n     *         Additional options for the save operation, including callbacks.\n     *\n     *     context (object):\n     *         Context to bind when calling callbacks.\n     */\n    setStarred(starred, options, context) {\n        const watched = RB.UserSession.instance.watchedGroups;\n\n        if (starred) {\n            watched.addImmediately(this, options, context);\n        } else {\n            watched.removeImmediately(this, options, context);\n        }\n    },\n\n    /**\n     * Add a user to this group.\n     *\n     * Sends the request to the server to add the user, and notifies on\n     * succes or failure.\n     *\n     * Args:\n     *     username (string):\n     *         The username of the new user.\n     *\n     *     options (object):\n     *         Additional options for the save operation, including callbacks.\n     *\n     *     context (object):\n     *         Context to bind when calling callbacks.\n     */\n    addUser(username, options, context) {\n        const url = this.url() + 'users/';\n\n        if (url && !this.isNew()) {\n            const member = new GroupMember({\n                username: username,\n                baseURL: url\n            });\n\n            member.save(options, context);\n        } else if (options && _.isFunction(options.error)) {\n            options.error.call({\n                errorText: 'Unable to add to the group.'\n            });\n        }\n    },\n\n    /*\n     * Remove a user from this group.\n     *\n     * Sends the request to the server to remove the user, and notifies on\n     * succes or failure.\n     *\n     * Args:\n     *     username (string):\n     *         The username of the new user.\n     *\n     *     options (object):\n     *         Additional options for the save operation, including callbacks.\n     *\n     *     context (object):\n     *         Context to bind when calling callbacks.\n     */\n    removeUser(username, options, context) {\n        const url = this.url() + 'users/';\n\n        if (url && !this.isNew()) {\n            const member = new GroupMember({\n                username: username,\n                baseURL: url,\n                added: true\n            });\n\n            member.destroy(options, context);\n        } else if (options && _.isFunction(options.error)) {\n            options.error.call({\n                errorText: 'Unable to remove from the group.'\n            });\n        }\n    }\n});\n\n\n})();\n"]}