{"version":3,"sources":["dummyReviewableView.es6.js"],"names":[],"mappings":";;;;AAAA;;;;;;;;;;AAUA,GAAG,mBAAH,GAAyB,GAAG,4BAAH,CAAgC,MAAhC,CAAuC;AAC5D,sBAAkB,GAAG,wBADuC;;AAG5D,0BAAsB,EAAE,QAAF,CAClB,sCADkB,CAHsC;;AAO5D,yBAAqB,EAAE,QAAF,yDAPuC;;AAa5D;;;AAGA,iBAhB4D,2BAgB5C;AACZ,YAAM,UAAU,EAAE,QAAF,EACX,QADW,CACF,kBADE,EAEX,SAFW,CAED,KAAK,GAFJ,CAAhB;;AAIA,YAAI,KAAK,KAAL,CAAW,GAAX,CAAe,cAAf,IAAiC,CAArC,EAAwC;AACpC,gBAAM,iBAAiB,EAAE,4BAAF,EAClB,QADkB,CACT,OADS,CAAvB;;AAGA,iBAAK,kBAAL,GAA0B,IAAI,GAAG,+BAAP,CAAuC;AAC7D,oBAAI,cADyD;AAE7D,uBAAO,KAAK;AAFiD,aAAvC,CAA1B;AAIA,iBAAK,kBAAL,CAAwB,MAAxB;AACA,iBAAK,QAAL,CAAc,KAAK,kBAAnB,EAAuC,kBAAvC,EACc,KAAK,mBADnB;;AAGA,gBAAM,oBAAoB,EAAE,2CAAF,EACrB,QADqB,CACZ,OADY,CAA1B;AAEA,iBAAK,qBAAL,GAA6B,IAAI,GAAG,kCAAP,CAA0C;AACnE,oBAAI,iBAD+D;AAEnE,uBAAO,KAAK;AAFuD,aAA1C,CAA7B;AAIA,iBAAK,qBAAL,CAA2B,MAA3B;AACA,iBAAK,QAAL,CAAc,KAAK,qBAAnB,EAA0C,kBAA1C,EACc,KAAK,mBADnB;;AAGA,gBAAM,eAAe,EAArB;;AAEA,yBAAa,IAAb,CAAkB,KAAK,mBAAL,CAAyB;AACvC,yBAAS,4DAEL;AACI,6BAAS,KAAK,KAAL,CAAW,GAAX,CAAe,SAAf,CADb;AAEI,8BAAU,KAAK,KAAL,CAAW,GAAX,CAAe,cAAf;AAFd,iBAFK,EAML,IANK;AAD8B,aAAzB,CAAlB;;AAUA,gBAAI,KAAK,KAAL,CAAW,GAAX,CAAe,6BAAf,MAAkD,IAAtD,EAA4D;AACxD,6BAAa,IAAb,CAAkB,KAAK,mBAAL,CAAyB;AACvC,6BAAS,4DAEL;AACI,iCAAS,KAAK,KAAL,CAAW,GAAX,CAAe,aAAf,CADb;AAEI,kCAAU,KAAK,KAAL,CAAW,GAAX,CAAe,cAAf;AAFd,qBAFK,EAML,IANK;AAD8B,iBAAzB,CAAlB;AASH;;AAED,oBAAQ,MAAR,CAAe,KAAK,oBAAL,CAA0B;AACrC,uBAAO,aAAa,IAAb,CAAkB,EAAlB;AAD8B,aAA1B,CAAf;AAGH,SAjDD,MAiDO;AACH,cAAE,sDAAF,EACK,IADL,CACU,KAAK,KAAL,CAAW,GAAX,CAAe,SAAf,CADV,EAEK,QAFL,CAEc,OAFd;AAGH;AACJ,KA3E2D;;;AA6E5D;;;;;;;;;;;;AAYA,uBAzF4D,+BAyFxC,SAzFwC,EAyF7B;AAAA,wCACP,SADO;AAAA,YACpB,IADoB;AAAA,YACd,GADc;;AAG3B;;;AACA,YAAI,QAAQ,CAAZ,EAAe;AACX;AACH;;AAED,YAAM,cAAc,KAAK,KAAL,CAAW,GAAX,CAAe,uBAAf,CAApB;AACA,YAAM,cAAc,YAAY,MAAM,CAAlB,CAApB;;AAEA;;;;;AAKA,YAAI,oBAAJ;;AAEA,YAAI,SAAS,CAAb,EAAgB;AACZ,kCAAoB,WAApB;AACH,SAFD,MAEO;AACH,gBAAM,eAAe,YAAY,OAAO,CAAnB,CAArB;AACA,kCAAoB,YAApB,SAAoC,WAApC;AACH;;AAED,eAAO,QAAP,CAAgB,OAAhB,CAAwB,WAAxB;AACH;AAnH2D,CAAvC,CAAzB","file":"dummyReviewableView.js","sourcesContent":["/**\n * A Review UI for file types which otherwise do not have one.\n *\n * Normally, file types that do not have a Review UI are not linked to one.\n * However, in the case of a file attachment with multiple revisions, if one of\n * those revisions is a non-reviewable type, the user can still navigate to\n * that page. This Review UI is used as a placeholder in that case--it shows\n * the header (with revision selector) and a message saying that this file type\n * cannot be shown.\n */\nRB.DummyReviewableView = RB.FileAttachmentReviewableView.extend({\n    commentBlockView: RB.AbstractCommentBlockView,\n\n    captionTableTemplate: _.template(\n        '<table><tr><%= items %></tr></table>'\n    ),\n\n    captionItemTemplate: _.template(dedent`\n        <td>\n         <h1 class=\"caption\"><%- caption %></h1>\n        </td>\n    `),\n\n    /**\n     * Render the view.\n     */\n    renderContent() {\n        const $header = $('<div/>')\n            .addClass('review-ui-header')\n            .prependTo(this.$el);\n\n        if (this.model.get('numRevisions') > 1) {\n            const $revisionLabel = $('<div id=\"revision_label\"/>')\n                .appendTo($header);\n\n            this._revisionLabelView = new RB.FileAttachmentRevisionLabelView({\n                el: $revisionLabel,\n                model: this.model,\n            });\n            this._revisionLabelView.render();\n            this.listenTo(this._revisionLabelView, 'revisionSelected',\n                          this._onRevisionSelected);\n\n            const $revisionSelector = $('<div id=\"attachment_revision_selector\" />')\n                .appendTo($header);\n            this._revisionSelectorView = new RB.FileAttachmentRevisionSelectorView({\n                el: $revisionSelector,\n                model: this.model,\n            });\n            this._revisionSelectorView.render();\n            this.listenTo(this._revisionSelectorView, 'revisionSelected',\n                          this._onRevisionSelected);\n\n            const captionItems = [];\n\n            captionItems.push(this.captionItemTemplate({\n                caption: interpolate(\n                    gettext('%(caption)s (revision %(revision)s)'),\n                    {\n                        caption: this.model.get('caption'),\n                        revision: this.model.get('fileRevision'),\n                    },\n                    true)\n            }));\n\n            if (this.model.get('diffAgainstFileAttachmentID') !== null) {\n                captionItems.push(this.captionItemTemplate({\n                    caption: interpolate(\n                        gettext('%(caption)s (revision %(revision)s)'),\n                        {\n                            caption: this.model.get('diffCaption'),\n                            revision: this.model.get('diffRevision'),\n                        },\n                        true)\n                }));\n            }\n\n            $header.append(this.captionTableTemplate({\n                items: captionItems.join('')\n            }));\n        } else {\n            $('<h1 class=\"caption file-attachment-single-revision\">')\n                .text(this.model.get('caption'))\n                .appendTo($header);\n        }\n    },\n\n    /**\n     * Callback for when a new file revision is selected.\n     *\n     * This supports single revisions and diffs. If 'base' is 0, a\n     * single revision is selected, If not, the diff between `base` and\n     * `tip` will be shown.\n     *\n     * Args:\n     *     revisions (array of number):\n     *         An array with two elements, representing the range of revisions\n     *         to display.\n     */\n    _onRevisionSelected(revisions) {\n        const [base, tip] = revisions;\n\n        // Ignore clicks on No Diff Label.\n        if (tip === 0) {\n            return;\n        }\n\n        const revisionIDs = this.model.get('attachmentRevisionIDs');\n        const revisionTip = revisionIDs[tip - 1];\n\n        /*\n         * Eventually these hard redirects will use a router\n         * (see diffViewerPageView.js for example)\n         * this.router.navigate(base + '-' + tip + '/', {trigger: true});\n         */\n        let redirectURL;\n\n        if (base === 0) {\n            redirectURL = `../${revisionTip}/`;\n        } else {\n            const revisionBase = revisionIDs[base - 1];\n            redirectURL = `../${revisionBase}-${revisionTip}/`;\n        }\n\n        window.location.replace(redirectURL);\n    },\n});\n"]}