{"version":3,"sources":["relatedUserSelectorView.es6.js"],"names":[],"mappings":";;AAAA,CAAC,YAAW;;AAEZ,QAAM,iBAAiB,EAAE,QAAF,oRAAvB;;AAeA;;;AAGA,OAAG,uBAAH,GAA6B,GAAG,yBAAH,CAA6B,MAA7B,CAAoC;AAC7D,6DAD6D;;AAG7D;;;;;;;;;;;;;;;;;;AAkBA,kBArB6D,sBAqBlD,OArBkD,EAqBzC;AAChB,eAAG,yBAAH,CAA6B,SAA7B,CAAuC,UAAvC,CAAkD,IAAlD,CACI,IADJ,EAEI,EAAE,QAAF,CAAW;AACP,kCAAkB;AACd,iCAAa,CAAC,UAAD,EAAa,UAAb,CADC;AAEd,+BAAW,CACP,EAAC,OAAO,UAAR,EADO,EAEP,EAAC,OAAO,UAAR,EAFO,CAFG;AAMd,gCAAY;AANE;AADX,aAAX,EASG,OATH,CAFJ;;AAaA,iBAAK,gBAAL,GAAwB,QAAQ,eAAR,IAA2B,EAAnD;AACA,iBAAK,WAAL,GAAmB,CAAC,CAAC,QAAQ,UAA7B;AACH,SArC4D;;;AAuC7D;;;;;;;;;;;AAWA,oBAlD6D,wBAkDhD,IAlDgD,EAkD1C;AACf,mBAAO,eAAe,EAAE,MAAF,CAClB,EAAE,YAAY,KAAK,WAAnB,EADkB,EAElB,IAFkB,CAAf,CAAP;AAIH,SAvD4D;;;AAyD7D;;;;;;;;;;;;AAYA,mBArE6D,uBAqEjD,KArEiD,EAqE1C,QArE0C,EAqEhC;AACzB,gBAAM,SAAS;AACX,0BAAU,CADC;AAEX,+BAAe,kCAFJ;AAGX,8BAAc,EAHH;AAIX,qCAAqB;AAJV,aAAf;;AAOA,gBAAI,MAAM,MAAN,KAAiB,CAArB,EAAwB;AACpB,uBAAO,CAAP,GAAW,KAAX;AACH;;AAED,cAAE,IAAF,CAAO;AACH,sBAAM,KADH;AAEH,0BAAQ,SAAR,GAAoB,KAAK,gBAAzB,eAFG;AAGH,sBAAM,MAHH;AAIH,uBAJG,mBAIK,OAJL,EAIc;AACb,6BAAS,QAAQ,KAAR,CAAc,GAAd,CAAkB;AAAA,+BAAM;AAC7B,wCAAY,EAAE,WAAF,CAAc,EAAd,CADiB;AAE7B,sCAAU,EAAE,QAFiB;AAG7B,gCAAI,EAAE,EAHuB;AAI7B,sCAAU,EAAE;AAJiB,yBAAN;AAAA,qBAAlB,CAAT;AAMH,iBAXE;AAYH,qBAZG,mBAYY;AAAA,sDAAN,IAAM;AAAN,4BAAM;AAAA;;AACX,4BAAQ,GAAR,CAAY,mBAAZ,EAAiC,IAAjC;AACA;AACH;AAfE,aAAP;AAiBH;AAlG4D,KAApC,CAA7B;AAsGC,CA1HD","file":"relatedUserSelectorView.js","sourcesContent":["(function() {\n\nconst optionTemplate = _.template(dedent`\n    <div>\n    <% if (useAvatars && avatarHTML) { %>\n     <%= avatarHTML %>\n    <% } %>\n    <% if (fullname) { %>\n     <span class=\"title\"><%- fullname %></span>\n     <span class=\"description\">(<%- username %>)</span>\n    <% } else { %>\n     <span class=\"title\"><%- username %></span>\n    <% } %>\n    </div>\n`);\n\n\n/**\n * A widget to select related users using search and autocomplete.\n */\nRB.RelatedUserSelectorView = RB.RelatedObjectSelectorView.extend({\n    searchPlaceholderText: gettext('Search for users...'),\n\n    /**\n     * Initialize the view.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the view.\n     *\n     * Option Args:\n     *     localSitePrefix (string):\n     *         The URL prefix for the local site, if any.\n     *\n     *     multivalued (boolean):\n     *         Whether or not the widget should allow selecting multuple\n     *         values.\n     *\n     *     useAvatars (boolean):\n     *         Whether to show avatars. Off by default.\n     */\n    initialize(options) {\n        RB.RelatedObjectSelectorView.prototype.initialize.call(\n            this,\n            _.defaults({\n                selectizeOptions: {\n                    searchField: ['fullname', 'username'],\n                    sortField: [\n                        {field: 'fullname'},\n                        {field: 'username'},\n                    ],\n                    valueField: 'username',\n                }\n            }, options));\n\n        this._localSitePrefix = options.localSitePrefix || '';\n        this._useAvatars = !!options.useAvatars;\n    },\n\n    /**\n     * Render an option in the drop-down menu.\n     *\n     * Args:\n     *     item (object):\n     *         The item to render.\n     *\n     * Returns:\n     *     string:\n     *     HTML to insert into the drop-down menu.\n     */\n    renderOption(item) {\n        return optionTemplate(_.extend(\n            { useAvatars: this._useAvatars },\n            item\n        ));\n    },\n\n    /**\n     * Load options from the server.\n     *\n     * Args:\n     *     query (string):\n     *         The string typed in by the user.\n     *\n     *     callback (function):\n     *         A callback to be called once data has been loaded. This should\n     *         be passed an array of objects, each representing an option in\n     *         the drop-down.\n     */\n    loadOptions(query, callback) {\n        const params = {\n            fullname: 1,\n            'only-fields': 'avatar_html,fullname,id,username',\n            'only-links': '',\n            'render-avatars-at': '20',\n        };\n\n        if (query.length !== 0) {\n            params.q = query;\n        }\n\n        $.ajax({\n            type: 'GET',\n            url: `${SITE_ROOT}${this._localSitePrefix}api/users/`,\n            data: params,\n            success(results) {\n                callback(results.users.map(u => ({\n                    avatarHTML: u.avatar_html[20],\n                    fullname: u.fullname,\n                    id: u.id,\n                    username: u.username,\n                })));\n            },\n            error(...args) {\n                console.log('User query failed', args);\n                callback();\n            },\n        });\n    },\n});\n\n\n})();\n"]}