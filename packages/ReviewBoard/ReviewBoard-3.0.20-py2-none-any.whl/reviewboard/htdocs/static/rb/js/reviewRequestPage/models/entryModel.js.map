{"version":3,"sources":["entryModel.es6.js"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA,GAAG,iBAAH,CAAqB,KAArB,GAA6B,SAAS,KAAT,CAAe,MAAf,CAAsB;AAC/C,YAAU;AACN,oBAAgB,IADV;AAEN,eAAW,KAFL;AAGN,UAAM,IAHA;AAIN,yBAAqB,IAJf;AAKN,YAAQ,IALF;AAMN,sBAAkB;AANZ,GADqC;;AAU/C;;;;;;;;;;;AAWA,OArB+C,iBAqBzC,KArByC,EAqBlC;AACT,WAAO;AACH,UAAI,MAAM,EADP;AAEH,iBAAW,MAAM,SAFd;AAGH,sBAAgB,OAAO,GAAP,CAAW,MAAM,cAAjB,EAAiC,MAAjC,EAHb;AAIH,wBAAkB,OAAO,GAAP,CAAW,MAAM,gBAAjB,EAAmC,MAAnC,EAJf;AAKH,cAAQ,MAAM,MALX;AAMH,2BAAqB,MAAM;AANxB,KAAP;AAQH,GA9B8C;;;AAgC/C;;;;;;;;;;;;AAYA,mBA5C+C,6BA4C7B,SA5C6B,EA4ClB,CAC5B,CA7C8C;;;AA+C/C;;;;;;;;;;;;;AAaA,kBA5D+C,4BA4D9B,SA5D8B,EA4DnB,CAC3B,CA7D8C;;;AA+D/C;;;;;;;;;;;AAWA,cA1E+C,wBA0ElC,QA1EkC,EA0ExB;AACnB,SAAK,GAAL,CAAS,MAAT,EAAiB,iBAAjB,CAAmC,IAAnC,EAAyC,QAAzC;AACH,GA5E8C;;;AA8E/C;;;AAGA,qBAjF+C,iCAiFzB;AAClB,SAAK,GAAL,CAAS,MAAT,EAAiB,wBAAjB,CAA0C,IAA1C;AACH;AAnF8C,CAAtB,CAA7B","file":"entryModel.js","sourcesContent":["/**\n * An entry on the review request page.\n *\n * This represents entries on the review request page, such as reviews and\n * review request changes. It stores common state used by all entries.\n *\n * This is meant to be subclassed to handle parsing of custom content or\n * storing custom state, but can be used as-is for simple entries.\n *\n * Model Attributes:\n *     addedTimestamp (Date):\n *         The date/time the entry was added.\n *\n *     collapsed (boolean):\n *         Whether this entry is in a collapsed state.\n *\n *     page (RB.ReviewRequestPage):\n *         The page that owns this entry.\n *\n *     reviewRequestEditor (RB.ReviewRequestEditor):\n *         The review request editor managing state on the page.\n *\n *     typeID (string):\n *         The type of this entry, corresponding to a entry type ID that's\n *         been registered server-side.\n *\n *     updatedTimestamp (Date):\n *         The date/time the entry was last updated.\n */\nRB.ReviewRequestPage.Entry = Backbone.Model.extend({\n    defaults: {\n        addedTimestamp: null,\n        collapsed: false,\n        page: null,\n        reviewRequestEditor: null,\n        typeID: null,\n        updatedTimestamp: null,\n    },\n\n    /**\n     * Parse attributes for the model.\n     *\n     * Args:\n     *     attrs (object):\n     *         The attributes provided when constructing the model instance.\n     *\n     * Returns:\n     *     object:\n     *     The resulting attributes used for the model instance.\n     */\n    parse(attrs) {\n        return {\n            id: attrs.id,\n            collapsed: attrs.collapsed,\n            addedTimestamp: moment.utc(attrs.addedTimestamp).toDate(),\n            updatedTimestamp: moment.utc(attrs.updatedTimestamp).toDate(),\n            typeID: attrs.typeID,\n            reviewRequestEditor: attrs.reviewRequestEditor,\n        };\n    },\n\n    /**\n     * Handle operations before applying an update from the server.\n     *\n     * This can be overridden by entries to store state or before cleanup\n     * before reloading and re-rendering the HTML from the server.\n     *\n     * Subclasses do not need to call the parent method.\n     *\n     * Args:\n     *     entryData (object):\n     *         The metadata provided by the server in the update.\n     */\n    beforeApplyUpdate(entryData) {\n    },\n\n    /**\n     * Handle operations after applying an update from the server.\n     *\n     * This can be overridden by entries to restore state or perform other\n     * post-update tasks after reloading and re-rendering the HTML from the\n     * server.\n     *\n     * Subclasses do not need to call the parent method.\n     *\n     * Args:\n     *     entryData (object):\n     *         The metadata provided by the server in the update.\n     */\n    afterApplyUpdate(entryData) {\n    },\n\n    /**\n     * Watch for updates to this entry.\n     *\n     * The entry will be checked for updates at least once every ``periodMS``\n     * milliseconds.\n     *\n     * Args:\n     *     periodMS (number):\n     *         The frequency at which the updates should be polled. Updates\n     *         will be checked at least this often.\n     */\n    watchUpdates(periodMS) {\n        this.get('page').watchEntryUpdates(this, periodMS);\n    },\n\n    /**\n     * Stop watching for updates to this entry.\n     */\n    stopWatchingUpdates() {\n        this.get('page').stopWatchingEntryUpdates(this);\n    },\n});\n"]}