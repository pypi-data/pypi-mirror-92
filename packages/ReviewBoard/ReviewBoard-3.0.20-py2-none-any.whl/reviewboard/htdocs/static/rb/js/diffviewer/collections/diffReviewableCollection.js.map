{"version":3,"sources":["diffReviewableCollection.es6.js"],"names":[],"mappings":";;AAAA;;;;;;;;;AASA,GAAG,wBAAH,GAA8B,SAAS,UAAT,CAAoB,MAApB,CAA2B;AACrD,WAAO,GAAG,cAD2C;;AAGrD;;;;;;;;;;;;;;AAcA,cAjBqD,sBAiB1C,MAjB0C,EAiBlC,OAjBkC,EAiBzB;AACxB,aAAK,aAAL,GAAqB,QAAQ,aAA7B;AACH,KAnBoD;;;AAqBrD;;;;;;;;;;AAUA,cA/BqD,sBA+B1C,KA/B0C,EA+BnC;AAAA;;AACd,aAAK,QAAL,CAAc,KAAd,EAAqB,OAArB,EAA8B;AAAA,mBAAM,MAAK,kBAAL,CAAwB,KAAxB,CAAN;AAAA,SAA9B;AACA,aAAK,kBAAL,CAAwB,KAAxB;AACH,KAlCoD;;;AAoCrD;;;;;;;;;;;;;;AAcA,sBAlDqD,8BAkDlC,KAlDkC,EAkD3B;AAAA;;AACtB,YAAM,gBAAgB,KAAK,aAA3B;;AAEA,gBAAQ,MAAR,CAAe,aAAf,EACe,uDADf;;AAGA,aAAK,KAAL;AACA,aAAK,OAAL,CAAa,YAAb;;AAEA,cAAM,IAAN,CAAW,gBAAQ;AACf,gBAAM,WAAW,KAAK,GAAL,CAAS,UAAT,CAAjB;AACA,gBAAM,gBAAgB,KAAK,GAAL,CAAS,eAAT,CAAtB;AACA,gBAAI,oBAAoB,IAAxB;;AAEA,gBAAI,aAAJ,EAAmB;AACf,oCAAoB,cAAc,QAAlC;AACH,aAFD,MAEO,IAAI,KAAK,GAAL,CAAS,gBAAT,CAAJ,EAAgC;AACnC,oCAAoB,KAAK,GAAL,CAAS,wBAAT,CAApB;AACH;;AAED,mBAAK,GAAL,CAAS;AACL,+BAAe,aADV;AAEL,sBAAM,IAFD;AAGL,4BAAY,SAAS,EAHhB;AAIL,iCAAiB,gBAAgB,cAAc,EAA9B,GAAmC,IAJ/C;AAKL,0BAAU,SAAS,QALd;AAML,mCAAmB,iBANd;AAOL,yCAAyB,KAAK,GAAL,CAAS,eAAT;AAPpB,aAAT;AASH,SApBD;;AAsBA,aAAK,OAAL,CAAa,WAAb;AACH;AAlFoD,CAA3B,CAA9B","file":"diffReviewableCollection.js","sourcesContent":["/**\n * A collection of RB.DiffReviewable instances.\n *\n * This manages a collection of :js:class:`RB.DiffReviewable`s and can\n * populate itself based on changes to a collection of files.\n *\n * When repopulating, this will emit a ``populating`` event. After populating,\n * it will emit a ``populated`` event.\n */\nRB.DiffReviewableCollection = Backbone.Collection.extend({\n    model: RB.DiffReviewable,\n\n    /**\n     * Initialize the collection.\n     *\n     * Args:\n     *     models (Array):\n     *         Optional array of models.\n     *\n     *     options (object):\n     *         Options for the collection.\n     *\n     * Option Args:\n     *     reviewRequest (RB.ReviewRequest):\n     *         The review request for the collection. This must be provided.\n     */\n    initialize(models, options) {\n        this.reviewRequest = options.reviewRequest;\n    },\n\n    /**\n     * Watch for changes to a collection of files.\n     *\n     * When the files change (and when invoking this method), this collection\n     * will be rebuilt based on those files.\n     *\n     * Args:\n     *     files (RB.DiffFileCollection):\n     *         The collection of files to watch.\n     */\n    watchFiles(files) {\n        this.listenTo(files, 'reset', () => this._populateFromFiles(files));\n        this._populateFromFiles(files);\n    },\n\n    /**\n     * Populate this collection from a collection of files.\n     *\n     * This will clear this collection and then loop through each file,\n     * adding a corresponding :js:class:`RB.DiffReviewable`.\n     *\n     * After clearing, but prior to adding any entries, this will emit a\n     * ``populating`` event. After all reviewables have been added, this\n     * will emit a ``populated`` event.\n     *\n     * Args:\n     *     files (RB.DiffFileCollection):\n     *         The collection of files to populate from.\n     */\n    _populateFromFiles(files) {\n        const reviewRequest = this.reviewRequest;\n\n        console.assert(reviewRequest,\n                       'RB.DiffReviewableCollection.reviewRequest must be set');\n\n        this.reset();\n        this.trigger('populating');\n\n        files.each(file => {\n            const filediff = file.get('filediff');\n            const interfilediff = file.get('interfilediff');\n            let interdiffRevision = null;\n\n            if (interfilediff) {\n                interdiffRevision = interfilediff.revision;\n            } else if (file.get('forceInterdiff')) {\n                interdiffRevision = file.get('forceInterdiffRevision');\n            }\n\n            this.add({\n                reviewRequest: reviewRequest,\n                file: file,\n                fileDiffID: filediff.id,\n                interFileDiffID: interfilediff ? interfilediff.id : null,\n                revision: filediff.revision,\n                interdiffRevision: interdiffRevision,\n                serializedCommentBlocks: file.get('commentCounts'),\n            });\n        });\n\n        this.trigger('populated');\n    },\n});\n"]}