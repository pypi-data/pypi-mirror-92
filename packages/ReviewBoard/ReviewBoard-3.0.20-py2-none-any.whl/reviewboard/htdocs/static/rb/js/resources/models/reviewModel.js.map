{"version":3,"sources":["reviewModel.es6.js"],"names":[],"mappings":"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","file":"reviewModel.js","sourcesContent":["/**\n * A review.\n *\n * This corresponds to a top-level review. Replies are encapsulated in\n * RB.ReviewReply.\n *\n * Model Attributes:\n *     forceTextType (string):\n *         The text format type to request for text in all responses.\n *\n *     shipIt (boolean):\n *         Whether this review has the \"Ship It!\" state.\n *\n *     public (boolean):\n *         Whether this review has been published.\n *\n *     bodyTop (string):\n *         The contents of the header that shows up above all comments in the\n *         review.\n *\n *     bodyTopRichText (boolean):\n *         Whether the ``bodyTop`` field should be rendered as Markdown.\n *\n *     bodyBottom (string):\n *         The contents of the footer that shows up below all comments in the\n *         review.\n *\n *     bodyBottomRichText (boolean):\n *         Whether the ``bodyBottom`` field should be rendered as Markdown.\n *\n *     draftReply (RB.ReviewReply):\n *         The draft reply to this review, if any.\n *\n *     htmlTextFields (object):\n *         The contents of any HTML-rendered text fields, if the caller fetches\n *         or posts with ``includeTextTypes=html``. The keys in this object are\n *         the field names, and the values are the HTML versions of those\n *         attributes.\n *\n *     includeTextTypes (string):\n *         A comma-separated list of text types to include in the payload when\n *         syncing the model.\n *\n *     markdownTextFields (object):\n *         The source contents of any Markdown text fields, if the caller\n *         fetches or posts with ``includeTextTypes=markdown``. The keys in\n *         this object are the field names, and the values are the Markdown\n *         source of those fields.\n *\n *     rawTextFields (object):\n *         The contents of the raw text fields, if the caller fetches or posts\n *         with includeTextTypes=raw. The keys in this object are the field\n *         names, and the values are the raw versions of those attributes.\n *\n *     timestamp (string):\n *         The timestamp of this review.\n */\nRB.Review = RB.BaseResource.extend({\n    defaults() {\n        return _.defaults({\n            forceTextType: null,\n            shipIt: false,\n            'public': false,\n            bodyTop: null,\n            bodyTopRichText: false,\n            bodyBottom: null,\n            bodyBottomRichText: false,\n            draftReply: null,\n            htmlTextFields: {},\n            includeTextTypes: null,\n            markdownTextFields: {},\n            rawTextFields: {},\n            timestamp: null\n        }, RB.BaseResource.prototype.defaults());\n    },\n\n    rspNamespace: 'review',\n\n    attrToJsonMap: {\n        bodyBottom: 'body_bottom',\n        bodyBottomRichText: 'body_bottom_text_type',\n        bodyTop: 'body_top',\n        bodyTopRichText: 'body_top_text_type',\n        forceTextType: 'force_text_type',\n        includeTextTypes: 'include_text_types',\n        shipIt: 'ship_it'\n    },\n\n    serializedAttrs: [\n        'forceTextType',\n        'includeTextTypes',\n        'shipIt',\n        'bodyTop',\n        'bodyTopRichText',\n        'bodyBottom',\n        'bodyBottomRichText',\n        'public'\n    ],\n\n    deserializedAttrs: [\n        'shipIt',\n        'bodyTop',\n        'bodyBottom',\n        'public',\n        'timestamp'\n    ],\n\n    serializers: {\n        forceTextType: RB.JSONSerializers.onlyIfValue,\n        includeTextTypes: RB.JSONSerializers.onlyIfValue,\n        bodyTopRichText: RB.JSONSerializers.textType,\n        bodyBottomRichText: RB.JSONSerializers.textType,\n        'public': value => value ? 1 : undefined\n    },\n\n    supportsExtraData: true,\n\n    /**\n     * Parse the response from the server.\n     *\n     * Args:\n     *    rsp (object):\n     *        The response from the server.\n     *\n     * Returns:\n     *     object:\n     *     Attribute values to set on the model.\n     */\n    parseResourceData(rsp) {\n        const rawTextFields = rsp.raw_text_fields || rsp;\n        const data = RB.BaseResource.prototype.parseResourceData.call(\n            this, rsp);\n\n        data.bodyTopRichText =\n            (rawTextFields.body_top_text_type === 'markdown');\n        data.bodyBottomRichText =\n            (rawTextFields.body_bottom_text_type === 'markdown');\n\n        if (rsp.raw_text_fields) {\n            data.rawTextFields = {\n                bodyBottom: rsp.raw_text_fields.body_bottom,\n                bodyTop: rsp.raw_text_fields.body_top\n            };\n        }\n\n        if (rsp.markdown_text_fields) {\n            data.markdownTextFields = {\n                bodyBottom: rsp.markdown_text_fields.body_bottom,\n                bodyTop: rsp.markdown_text_fields.body_top\n            };\n        }\n\n        if (rsp.html_text_fields) {\n            data.htmlTextFields = {\n                bodyBottom: rsp.html_text_fields.body_bottom,\n                bodyTop: rsp.html_text_fields.body_top,\n            };\n        }\n\n        return data;\n    },\n\n    /**\n     * Create a new diff comment for this review.\n     *\n     * Args:\n     *     id (number):\n     *         The ID for the new model (in the case of existing comments).\n     *\n     *     fileDiffID (number):\n     *         The ID of the FileDiff that this comment is for.\n     *\n     *     interFileDiffID (number):\n     *         The ID of the FileDiff that represents the \"new\" side of an\n     *         interdiff. If this is specified, the ``fileDiffID`` argument\n     *         represents the \"old\" side.\n     *\n     *     beginLineNum (number):\n     *         The line number of the start of the comment.\n     *\n     *     endLineNum (number):\n     *         The line number of the end of the comment.\n     *\n     * Returns:\n     *     RB.DiffComment:\n     *     The new comment object.\n     */\n    createDiffComment(id, fileDiffID, interFileDiffID, beginLineNum,\n                      endLineNum) {\n        return new RB.DiffComment({\n            parentObject: this,\n            id: id,\n            fileDiffID: fileDiffID,\n            interFileDiffID: interFileDiffID,\n            beginLineNum: beginLineNum,\n            endLineNum: endLineNum\n        });\n    },\n\n    /**\n     * Create a new screenshot comment for this review.\n     *\n     * Args:\n     *     id (number):\n     *         The ID for the new model (in the case of existing comments).\n     *\n     *     screenshotID (number):\n     *         The ID of the Screenshot that this comment is for.\n     *\n     *     x (number):\n     *         The X coordinate of the pixel for the upper left of the comment\n     *         region.\n     *\n     *     y (number):\n     *         The Y coordinate of the pixel for the upper left of the comment\n     *         region.\n     *\n     *     width (number):\n     *         The width of the comment region, in pixels.\n     *\n     *     height (number):\n     *         The height of the comment region, in pixels.\n     *\n     * Returns:\n     *     RB.ScreenshotComment:\n     *     The new comment object.\n     */\n    createScreenshotComment(id, screenshotID, x, y, width, height) {\n        return new RB.ScreenshotComment({\n            parentObject: this,\n            id: id,\n            screenshotID: screenshotID,\n            x: x,\n            y: y,\n            width: width,\n            height: height\n        });\n    },\n\n    /**\n     * Create a new file attachment comment for this review.\n     *\n     * Args:\n     *     id (number):\n     *         The ID for the new model (in the case of existing comments).\n     *\n     *     fileAttachmentID (number):\n     *         The ID of the FileAttachment that this comment is for.\n     *\n     *     diffAgainstFileAttachmentID (number):\n     *         The ID of the FileAttachment that the ``fileAttachmentID`` is\n     *         diffed against, if the comment is for a file diff.\n     *\n     * Returns:\n     *     RB.FileAttachmentComment:\n     *     The new comment object.\n     */\n    createFileAttachmentComment(id, fileAttachmentID,\n                                diffAgainstFileAttachmentID) {\n        return new RB.FileAttachmentComment({\n            parentObject: this,\n            id: id,\n            fileAttachmentID: fileAttachmentID,\n            diffAgainstFileAttachmentID: diffAgainstFileAttachmentID\n        });\n    },\n\n    /**\n     * Create a new general comment for this review.\n     *\n     * Args:\n     *     id (number):\n     *         The ID for the new model (in the case of existing comments).\n     *\n     *     issueOpened (boolean):\n     *         Whether this comment should have an open issue.\n     *\n     * Returns:\n     *     RB.GeneralComment:\n     *     The new comment object.\n     */\n    createGeneralComment(id, issueOpened) {\n        return new RB.GeneralComment({\n            parentObject: this,\n            id: id,\n            issueOpened: issueOpened\n        });\n    },\n\n    /**\n     * Create a new reply.\n     *\n     * If an existing draft reply exists, return that. Otherwise create a draft\n     * reply.\n     *\n     * Returns:\n     *     RB.ReviewReply:\n     *     The new reply object.\n     */\n    createReply() {\n        let draftReply = this.get('draftReply');\n\n        if (draftReply === null) {\n            draftReply = new RB.ReviewReply({\n                parentObject: this\n            });\n            this.set('draftReply', draftReply);\n\n            draftReply.once('published', () => {\n                const reviewRequest = this.get('parentObject');\n                reviewRequest.markUpdated(draftReply.get('timestamp'));\n                this.set('draftReply', null);\n            });\n        }\n\n        return draftReply;\n    }\n});\n"]}