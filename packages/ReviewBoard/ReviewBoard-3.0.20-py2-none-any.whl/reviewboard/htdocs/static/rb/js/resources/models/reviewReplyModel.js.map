{"version":3,"sources":["reviewReplyModel.es6.js"],"names":[],"mappings":"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","file":"reviewReplyModel.js","sourcesContent":["/**\n * A review reply.\n *\n * Encapsulates replies to a top-level review.\n *\n * Model Attributes:\n *     forceTextType (string):\n *         The text type to request for text in all responses.\n *\n *     includeTextTypes (string):\n *         A comma-separated list of text types to include in responses.\n *\n *     rawTextFields (object):\n *         The contents of the raw text fields, if forceTextType is used and\n *         the caller fetches or posts with includeTextTypes=raw. The keys in\n *         this object are the field names, and the values are the raw versions\n *         of those attributes.\n *\n *     review (RB.Review):\n *         The review that this reply is replying to.\n *\n *     public (boolean):\n *         Whether this reply has been published.\n *\n *     bodyTop (string):\n *         The reply to the original review's ``bodyTop``.\n *\n *     bodyTopRichText (boolean):\n *         Whether the ``bodyTop`` field should be rendered as Markdown.\n *\n *     bodyBottom (string):\n *         The reply to the original review's ``bodyBottom``.\n *\n *     bodyBottomRichText (boolean):\n *         Whether the ``bodyBottom`` field should be rendered as Markdown.\n *\n *     timestamp (string):\n *         The timestamp of this reply.\n */\nRB.ReviewReply = RB.BaseResource.extend({\n    defaults() {\n        return _.defaults({\n            forceTextType: null,\n            includeTextTypes: null,\n            rawTextFields: {},\n            review: null,\n            'public': false,\n            bodyTop: null,\n            bodyTopRichText: false,\n            bodyBottom: null,\n            bodyBottomRichText: false,\n            timestamp: null\n        }, RB.BaseResource.prototype.defaults());\n    },\n\n    rspNamespace: 'reply',\n    listKey: 'replies',\n\n    extraQueryArgs: {\n        'force-text-type': 'html',\n        'include-text-types': 'raw'\n    },\n\n    attrToJsonMap: {\n        bodyBottom: 'body_bottom',\n        bodyBottomRichText: 'body_bottom_text_type',\n        bodyTop: 'body_top',\n        bodyTopRichText: 'body_top_text_type',\n        forceTextType: 'force_text_type',\n        includeTextTypes: 'include_text_types'\n    },\n\n    serializedAttrs: [\n        'forceTextType',\n        'includeTextTypes',\n        'bodyTop',\n        'bodyTopRichText',\n        'bodyBottom',\n        'bodyBottomRichText',\n        'public'\n    ],\n\n    deserializedAttrs: [\n        'bodyTop',\n        'bodyBottom',\n        'public',\n        'timestamp'\n    ],\n\n    serializers: {\n        forceTextType: RB.JSONSerializers.onlyIfValue,\n        includeTextTypes: RB.JSONSerializers.onlyIfValue,\n        bodyTopRichText: RB.JSONSerializers.textType,\n        bodyBottomRichText: RB.JSONSerializers.textType,\n        'public': value => value ? true : undefined\n    },\n\n    COMMENT_LINK_NAMES: [\n        'diff_comments',\n        'file_attachment_comments',\n        'general_comments',\n        'screenshot_comments'\n    ],\n\n    /**\n     * Parse the response from the server.\n     *\n     * Args:\n     *     rsp (object):\n     *         The response from the server.\n     *\n     * Returns:\n     *     object:\n     *     The attribute values to set on the model.\n     */\n    parseResourceData(rsp) {\n        const rawTextFields = rsp.raw_text_fields || rsp;\n        const data = RB.BaseResource.prototype.parseResourceData.call(\n            this, rsp);\n\n        data.bodyTopRichText =\n            (rawTextFields.body_top_text_type === 'markdown');\n        data.bodyBottomRichText =\n            (rawTextFields.body_bottom_text_type === 'markdown');\n        data.rawTextFields = rsp.raw_text_fields || {};\n\n        return data;\n    },\n\n    /**\n     * Publish the reply.\n     *\n     * Before publishing, the \"publishing\" event will be triggered.\n     * After successfully publishing, \"published\" will be triggered.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the save operation.\n     *\n     *     context (object):\n     *         Context to bind when calling callbacks.\n     */\n    publish(options={}, context=undefined) {\n        this.trigger('publishing');\n\n        this.ready({\n            ready: () => {\n                this.set('public', true);\n                this.save({\n                    data: {\n                        'public': 1,\n                        trivial: options.trivial ? 1 : 0\n                    },\n                    success: () => {\n                        this.trigger('published');\n\n                        if (_.isFunction(options.success)) {\n                            options.success.call(context);\n                        }\n                    },\n                    error: (model, xhr) => {\n                        model.trigger('publishError', xhr.errorText);\n\n                        if (_.isFunction(options.error)) {\n                            options.error.call(context, model, xhr);\n                        }\n                    }\n                });\n            }\n        });\n    },\n\n    /**\n     * Discard the reply if it's empty.\n     *\n     * If the reply doesn't have any remaining comments on the server, then\n     * this will discard the reply.\n     *\n     * When we've finished checking, options.success will be called. It\n     * will be passed true if discarded, or false otherwise.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the save operation.\n     *\n     *     context (object):\n     *         Context to bind when calling callbacks.\n     */\n    discardIfEmpty(options={}, context=undefined) {\n        options = _.bindCallbacks(options, context);\n\n        this.ready({\n            ready: () => {\n                if (this.isNew() ||\n                    this.get('bodyTop') ||\n                    this.get('bodyBottom')) {\n                    if (_.isFunction(options.success)) {\n                        options.success(false);\n                    }\n\n                    return;\n                }\n\n                this._checkCommentsLink(0, options, context);\n            },\n\n            error: options.error\n        });\n    },\n\n    /**\n     * Check if there are comments, given the comment type.\n     *\n     * This is part of the discardIfEmpty logic.\n     *\n     * If there are comments, we'll give up and call options.success(false).\n     *\n     * If there are no comments, we'll move on to the next comment type. If\n     * we're done, the reply is discarded, and options.success(true) is called.\n     *\n     * Args:\n     *     linkNamesIndex (number):\n     *         An index into the ``COMMENT_LINK_NAMES`` Array.\n     *\n     *     options (object):\n     *         Options for the save operation.\n     *\n     *     context (object):\n     *         Context to bind when calling callbacks.\n     */\n    _checkCommentsLink(linkNameIndex, options, context) {\n        const linkName = this.COMMENT_LINK_NAMES[linkNameIndex];\n        const url = this.get('links')[linkName].href;\n\n        RB.apiCall({\n            type: 'GET',\n            url: url,\n            success: rsp => {\n                if (rsp[linkName].length > 0) {\n                    if (_.isFunction(options.success)) {\n                        options.success(false);\n                    }\n                } else if (linkNameIndex < this.COMMENT_LINK_NAMES.length - 1) {\n                    this._checkCommentsLink(linkNameIndex + 1, options,\n                                            context);\n                } else {\n                    this.destroy(\n                    _.defaults({\n                        success: () => {\n                            if (_.isFunction(options.success)) {\n                                options.success(true);\n                            }\n                        }\n                    }, options),\n                    context);\n                }\n            },\n            error: options.error\n        });\n    }\n});\n_.extend(RB.ReviewReply.prototype, RB.DraftResourceModelMixin);\n"]}