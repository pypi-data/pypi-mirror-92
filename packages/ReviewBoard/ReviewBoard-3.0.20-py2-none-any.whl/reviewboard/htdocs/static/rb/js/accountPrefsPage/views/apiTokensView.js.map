{"version":3,"sources":["apiTokensView.es6.js"],"names":[],"mappings":"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","file":"apiTokensView.js","sourcesContent":["(function() {\n\n\nconst POLICY_READ_WRITE = 'rw';\nconst POLICY_READ_ONLY = 'ro';\nconst POLICY_CUSTOM = 'custom';\nconst POLICY_LABELS = {\n    [POLICY_READ_WRITE]: gettext('Full access'),\n    [POLICY_READ_ONLY]: gettext('Read-only'),\n    [POLICY_CUSTOM]: gettext('Custom')\n};\n\n\n/**\n * Represents an API token in the list.\n *\n * This provides actions for editing the policy type for the token and\n * removing the token.\n */\nconst APITokenItem = RB.Config.ResourceListItem.extend({\n    defaults: _.defaults({\n        policyType: POLICY_READ_WRITE,\n        localSiteName: null,\n        showRemove: true\n    }, RB.Config.ResourceListItem.prototype.defaults),\n\n    syncAttrs: ['id', 'note', 'policy', 'tokenValue'],\n\n    /**\n     * Initialize the item.\n     *\n     * This computes the type of policy used, for display, and builds the\n     * policy actions menu.\n     */\n    initialize() {\n        _super(this).initialize.apply(this, arguments);\n\n        this.on('change:policyType', this._onPolicyTypeChanged, this);\n\n        const policy = this.get('policy') || {};\n        const policyType = this._guessPolicyType(policy);\n\n        this._policyMenuAction = {\n            id: 'policy',\n            label: POLICY_LABELS[policyType],\n            children: [\n                this._makePolicyAction(POLICY_READ_WRITE),\n                this._makePolicyAction(POLICY_READ_ONLY),\n                this._makePolicyAction(POLICY_CUSTOM, {\n                    id: 'policy-custom',\n                    dispatchOnClick: true\n                })\n            ]\n        };\n        this.actions.unshift(this._policyMenuAction);\n\n        this.set('policyType', policyType);\n    },\n\n    /**\n     * Create an APIToken resource for the given attributes.\n     *\n     * Args:\n     *     attrs (object):\n     *         Additional attributes for the APIToken.\n     */\n    createResource(attrs) {\n        return new RB.APIToken(_.defaults({\n            userName: RB.UserSession.instance.get('username'),\n            localSitePrefix: this.collection.localSitePrefix\n        }, attrs));\n    },\n\n    /**\n     * Set the provided note on the token and save it.\n     *\n     * Args:\n     *     note (string):\n     *         The new note for the token.\n     */\n    saveNote(note) {\n        this._saveAttribute('note', note);\n    },\n\n    /**\n     * Set the provided policy on the token and save it.\n     *\n     * Args:\n     *     policy (object):\n     *         The new policy for the token.\n     *\n     *     options (object):\n     *         Additional options for the save operation.\n     */\n    savePolicy(policy, options) {\n        this._saveAttribute('policy', policy, options);\n    },\n\n    /**\n     * Set an attribute on the token and save it.\n     *\n     * This is a helper function that will set an attribute on the token\n     * and save it, but only after the token is ready.\n     *\n     * Args:\n     *     attr (string):\n     *         The name of the attribute to set.\n     *\n     *     value (object or string):\n     *         The new value for the attribute.\n     *\n     *     options (object):\n     *         Additional options for the save operation.\n     */\n    _saveAttribute(attr, value, options) {\n        this.resource.ready({\n            ready: () => {\n                this.resource.set(attr, value);\n                this.resource.save(options);\n            }\n        });\n    },\n\n    /**\n     * Guess the policy type for a given policy definition.\n     *\n     * This compares the policy against the built-in versions that\n     * RB.APIToken provides. If one of them matches, the appropriate\n     * policy type will be returned. Otherwise, this assumes it's a\n     * custom policy.\n     *\n     * Args:\n     *     policy (object):\n     *         A policy object.\n     *\n     * Returns:\n     *     string:\n     *     The policy type enumeration corresponding to the policy.\n     */\n    _guessPolicyType(policy) {\n        if (_.isEqual(policy, RB.APIToken.defaultPolicies.readOnly)) {\n            return POLICY_READ_ONLY;\n        } else if (_.isEqual(policy, RB.APIToken.defaultPolicies.readWrite)) {\n            return POLICY_READ_WRITE;\n        } else {\n            return POLICY_CUSTOM;\n        }\n    },\n\n    /**\n     * Create and return an action for the policy menu.\n     *\n     * This takes a policy type and any options to include with the\n     * action definition. It will then return a suitable action,\n     * for display in the policy menu.\n     *\n     * Args:\n     *     policyType (string):\n     *         The policy type to create.\n     *\n     *     options (object):\n     *         Additional options to include in the new action definition.\n     */\n    _makePolicyAction(policyType, options) {\n        return _.defaults({\n            label: POLICY_LABELS[policyType],\n            type: 'radio',\n            name: 'policy-type',\n            propName: 'policyType',\n            radioValue: policyType\n        }, options);\n    },\n\n    /**\n     * Handler for when the policy type changes.\n     *\n     * This will set the policy menu's label to that of the selected\n     * policy and rebuild the menu.\n     *\n     * Then, if not using a custom policy, the built-in policy definition\n     * matching the selected policy will be saved to the server.\n     */\n    _onPolicyTypeChanged() {\n        const policyType = this.get('policyType');\n\n        this._policyMenuAction.label = POLICY_LABELS[policyType];\n        this.trigger('actionsChanged');\n\n        let newPolicy = null;\n\n        if (policyType === POLICY_READ_ONLY) {\n            newPolicy = RB.APIToken.defaultPolicies.readOnly;\n        } else if (policyType === POLICY_READ_WRITE) {\n            newPolicy = RB.APIToken.defaultPolicies.readWrite;\n        } else {\n            return;\n        }\n\n        console.assert(newPolicy !== null);\n\n        if (!_.isEqual(newPolicy, this.get('policy'))) {\n            this.savePolicy(newPolicy);\n        }\n    }\n});\n\n\n/**\n * A collection of APITokenItems.\n *\n * This works like a standard Backbone.Collection, but can also have\n * a LocalSite URL prefix attached to it, for use in API calls in\n * APITokenItem.\n */\nconst APITokenItemCollection = Backbone.Collection.extend({\n    model: APITokenItem,\n\n    /**\n     * Initialize the collection.\n     *\n     * Args:\n     *     models (Array of object):\n     *         Initial models for the collection.\n     *\n     *     options (object):\n     *         Additional options for the collection.\n     *\n     * Option Args:\n     *     localSitePrefix (string):\n     *         The URL prefix for the current local site, if any.\n     */\n    initialize(models, options) {\n        this.localSitePrefix = options.localSitePrefix;\n    }\n});\n\n\n/**\n * Provides an editor for constructing or modifying a custom policy definition.\n *\n * This renders as a modalBox with a CodeMirror editor inside of it. The\n * editor is set to allow easy editing of a JSON payload, complete with\n * lintian checking. Only valid policy payloads can be saved to the server.\n */\nconst PolicyEditorView = Backbone.View.extend({\n    id: 'custom_policy_editor',\n\n    template: _.template([\n        '<p><%= instructions %></p>',\n        '<textarea/>'\n    ].join('')),\n\n    /**\n     * Initialize the editor.\n     *\n     * Args:\n     *     options (object):\n     *         Additional options for view construction.\n     *\n     * Option Args:\n     *     prevPolicyType (string):\n     *         The previous policy type, to use when restoring the value after\n     *         the edit has been cancelled.\n     */\n    initialize(options) {\n        this.prevPolicyType = options.prevPolicyType;\n\n        this._codeMirror = null;\n        this._$policy = null;\n        this._$saveButtons = null;\n    },\n\n    /**\n     * Render the editor.\n     *\n     * The CodeMirror editor will be set up and configured, and then the\n     * view will be placed inside a modalBox.\n     *\n     * Returns:\n     *     PolicyEditorView:\n     *     This object, for chaining.\n     */\n    render() {\n        let policy = this.model.get('policy');\n\n        if (_.isEmpty(policy)) {\n            policy = RB.APIToken.defaultPolicies.custom;\n        }\n\n        this.$el.html(this.template({\n            instructions: interpolate(\n                gettext('You can limit access to the API through a custom policy. See the <a href=\"%s\" target=\"_blank\">documentation</a> on how to write policies.'),\n                [MANUAL_URL + 'webapi/2.0/api-token-policy/'])\n        }));\n\n\n        this._$policy = this.$('textarea')\n            .val(JSON.stringify(policy, null, '  '));\n\n        this.$el.modalBox({\n            title: gettext('Custom Token Access Policy'),\n            buttons: [\n                $('<input type=\"button\"/>')\n                    .val(gettext('Cancel'))\n                    .click(_.bind(this.cancel, this)),\n                $('<input type=\"button\" class=\"save-button\"/>')\n                    .val(gettext('Save and continue editing'))\n                    .click(() => {\n                        this.save();\n                        return false;\n                    }),\n                $('<input type=\"button\" class=\"btn primary save-button\"/>')\n                    .val(gettext('Save'))\n                    .click(() => {\n                        this.save(true);\n                        return false;\n                    })\n            ]\n        });\n\n        this._$saveButtons = this.$el.modalBox('buttons').find('.save-button');\n\n        this._codeMirror = CodeMirror.fromTextArea(this._$policy[0], {\n            mode: 'application/json',\n            lineNumbers: true,\n            lineWrapping: true,\n            matchBrackets: true,\n            lint: {\n                onUpdateLinting: _.bind(this._onUpdateLinting, this)\n            },\n            gutters: ['CodeMirror-lint-markers']\n        });\n        this._codeMirror.focus();\n    },\n\n    /**\n     * Remove the policy editor from the page.\n     */\n    remove() {\n        this.$el.modalBox('destroy');\n    },\n\n    /**\n     * Cancel the editor.\n     *\n     * The previously-selected policy type will be set on the model.\n     */\n    cancel() {\n        this.model.set('policyType', this.prevPolicyType);\n    },\n\n    /**\n     * Save the editor.\n     *\n     * The policy will be saved to the server for immediate use.\n     *\n     * Args:\n     *     closeOnSave (boolean):\n     *         Whether the editor should close after saving.\n     *\n     * Returns:\n     *     boolean:\n     *     false, for use as a jQuery event handler.\n     */\n    save(closeOnSave) {\n        const policyStr = this._codeMirror.getValue().strip();\n\n        try {\n            const policy = JSON.parse(policyStr);\n\n            this.model.savePolicy(policy, {\n                success: () => {\n                    this.model.set('policyType', POLICY_CUSTOM);\n\n                    if (closeOnSave) {\n                        this.remove();\n                    }\n                },\n                error: (model, xhr) => {\n                    if (xhr.errorPayload.err.code === 105 &&\n                        xhr.errorPayload.fields.policy) {\n                        alert(xhr.errorPayload.fields.policy);\n                    } else {\n                        alert(xhr.errorPayload.err.msg);\n                    }\n                }\n            });\n        } catch (e) {\n            if (e instanceof SyntaxError) {\n                alert(interpolate(\n                    gettext('There is a syntax error in your policy: %s'),\n                    [e]));\n            } else {\n                throw e;\n            }\n        }\n\n        return false;\n    },\n\n    /**\n     * Handler for when lintian checking has run.\n     *\n     * This will disable the save buttons if there are any lintian errors.\n     *\n     * Args:\n     *     annotationsNotSorted (Array):\n     *         An array of the linter annotations.\n     */\n    _onUpdateLinting(annotationsNotSorted) {\n        this._$saveButtons.prop('disabled', annotationsNotSorted.length > 0);\n    }\n});\n\n\n/**\n * Renders an APITokenItem to the page, and handles actions.\n *\n * This will display the information on the given token. Specifically,\n * the token value, the note, and the actions.\n *\n * This also handles deleting the token when the Remove action is clicked,\n * and displaying the policy editor when choosing a custom policy.\n */\nconst APITokenItemView = Djblets.Config.ListItemView.extend({\n    EMPTY_NOTE_PLACEHOLDER: gettext('Click to describe this token'),\n\n    template: _.template([\n        '<div class=\"config-api-token-value\"><%- tokenValue %></div>',\n        '<span class=\"config-api-token-note\"></span>'\n    ].join('')),\n\n    actionHandlers: {\n        'delete': '_onRemoveClicked',\n        'policy-custom': '_onCustomPolicyClicked'\n    },\n\n    /**\n     * Initialize the view.\n     */\n    initialize() {\n        _super(this).initialize.apply(this, arguments);\n\n        this._$note = null;\n\n        this.listenTo(this.model.resource, 'change:note', this._updateNote);\n    },\n\n    /**\n     * Render the view.\n     *\n     * Returns:\n     *     APITokenItemView:\n     *     This object, for chaining.\n     */\n    render() {\n        _super(this).render.call(this);\n\n        this._$note = this.$('.config-api-token-note')\n            .inlineEditor({\n                editIconClass: 'rb-icon rb-icon-edit'\n            })\n            .on({\n                beginEdit: () => this._$note.inlineEditor(\n                    'setValue', this.model.get('note')),\n                complete: (e, value) => this.model.saveNote(value)\n            });\n\n        this._updateNote();\n\n        return this;\n    },\n\n    /**\n     * Update the displayed note.\n     *\n     * If no note is set, then a placeholder will be shown, informing the\n     * user that they can edit the note. Otherwise, their note contents\n     * will be shown.\n     */\n    _updateNote() {\n        const note = this.model.resource.get('note');\n        this._$note\n            .toggleClass('empty', !note)\n            .text(note ? note : this.EMPTY_NOTE_PLACEHOLDER);\n    },\n\n    /**\n     * Handler for when the \"Custom\" policy action is clicked.\n     *\n     * This displays the policy editor, allowing the user to edit a\n     * custom policy for the token.\n     *\n     * The previously selected policy type is passed along to the editor,\n     * so that the editor can revert to it if the user cancels.\n     *\n     * Returns:\n     *     boolean:\n     *     false, for use as a jQuery event handler.\n     */\n    _onCustomPolicyClicked() {\n        const view = new PolicyEditorView({\n            model: this.model,\n            prevPolicyType: this.model.previous('policyType')\n        });\n        view.render();\n\n        return false;\n    },\n\n    /**\n     * Handler for when the Remove action is clicked.\n     *\n     * This will prompt for confirmation before removing the token from\n     * the server.\n     */\n    _onRemoveClicked() {\n        $('<p/>')\n            .html(gettext('This will prevent clients using this token when authenticating.'))\n            .modalBox({\n                title: gettext('Are you sure you want to remove this token?'),\n                buttons: [\n                    $('<input type=\"button\"/>')\n                        .val(gettext('Cancel')),\n                    $('<input type=\"button\" class=\"danger\" />')\n                        .val(gettext('Remove'))\n                        .click(() => this.model.resource.destroy())\n                ]\n            });\n    }\n});\n\n\n/**\n * Renders and manages a list of global or per-LocalSite API tokens.\n *\n * This will display all provided API tokens in a list, optionally labeled\n * by Local Site name. These can be removed or edited, or new tokens generated\n * through a \"Generate a new API token\" link.\n */\nconst SiteAPITokensView = Backbone.View.extend({\n    className: 'config-site-api-tokens',\n\n    template: _.template([\n        '<% if (name) { %>',\n        ' <h3><%- name %></h3>',\n        '<% } %>',\n        '<div class=\"api-tokens box-recessed\">',\n        ' <div class=\"generate-api-token config-forms-list-item\">',\n        '  <a href=\"#\"><%- generateText %></a>',\n        ' </div>',\n        '</div>'\n    ].join('')),\n\n    events: {\n        'click .generate-api-token': '_onGenerateClicked'\n    },\n\n    /**\n     * Initialize the view.\n     *\n     * This will construct the collection of tokens and construct\n     * a list for the ListView.\n     *\n     * Args:\n     *     options (object):\n     *         Options for view construction.\n     *\n     * Option Args:\n     *     localSiteName (string):\n     *         The name of the local site, if any.\n     *\n     *     localSitePrefix (string):\n     *         The URL prefix of the local site, if any.\n     */\n    initialize(options) {\n        this.localSiteName = options.localSiteName;\n        this.localSitePrefix = options.localSitePrefix;\n\n        this.collection = new APITokenItemCollection(options.apiTokens, {\n            localSitePrefix: this.localSitePrefix\n        });\n\n        this.apiTokensList = new Djblets.Config.List({}, {\n            collection: this.collection\n        });\n\n        this._listView = null;\n    },\n\n    /**\n     * Render the view.\n     *\n     * This will render the list of API token items, along with a link\n     * for generating new tokens.\n     *\n     * Returns:\n     *     SiteAPITokensView:\n     *     This object, for chaining.\n     */\n    render() {\n        this._listView = new Djblets.Config.ListView({\n            ItemView: APITokenItemView,\n            animateItems: true,\n            model: this.apiTokensList\n        });\n\n        this.$el.html(this.template({\n            name: this.localSiteName,\n            generateText: gettext('Generate a new API token')\n        }));\n\n        this._listView.render().$el.prependTo(this.$('.api-tokens'));\n\n        return this;\n    },\n\n    /**\n     * Handler for when the \"Generate a new API token\" link is clicked.\n     *\n     * This creates a new API token on the server and displays it in the list.\n     *\n     * Returns:\n     *     boolean:\n     *     false, for use as a jQuery event handler.\n     */\n    _onGenerateClicked() {\n        const apiToken = new RB.APIToken({\n            localSitePrefix: this.localSitePrefix,\n            userName: RB.UserSession.instance.get('username')\n        });\n\n        apiToken.save({\n            success: () => {\n                this.collection.add({\n                    resource: apiToken\n                });\n            }\n        });\n\n        return false;\n    }\n});\n\n\n/**\n * Renders and manages a page of API tokens.\n *\n * This will take the provided tokens and group them into SiteAPITokensView\n * instances, one per Local Site and one for the global tokens.\n */\nRB.APITokensView = Backbone.View.extend({\n    template: _.template([\n        '<div class=\"api-tokens-list\" />'\n    ].join('')),\n\n    /**\n     * Initialize the view.\n     *\n     * Args:\n     *     options (object):\n     *         Options for view construction.\n     *\n     * Option Args:\n     *     apiTokens (Array of object):\n     *         Initial contents of the tokens list.\n     */\n    initialize(options) {\n        this.apiTokens = options.apiTokens;\n\n        this._$listsContainer = null;\n        this._apiTokenViews = [];\n    },\n\n    /**\n     * Render the view.\n     *\n     * This will set up the elements and the list of SiteAPITokensViews.\n     *\n     * Returns:\n     *     RB.APITokensView:\n     *     This object, for chaining.\n     */\n    render() {\n        this.$el.html(this.template());\n\n        this._$listsContainer = this.$('.api-tokens-list');\n\n        for (let [localSiteName, info] of Object.entries(this.apiTokens)) {\n            const view = new SiteAPITokensView({\n                localSiteName: localSiteName,\n                localSitePrefix: info.localSitePrefix,\n                apiTokens: info.tokens\n            });\n\n            view.$el.appendTo(this._$listsContainer);\n            view.render();\n\n            this._apiTokenViews.push(view);\n        }\n\n        return this;\n    }\n});\n\n\n})();\n"]}