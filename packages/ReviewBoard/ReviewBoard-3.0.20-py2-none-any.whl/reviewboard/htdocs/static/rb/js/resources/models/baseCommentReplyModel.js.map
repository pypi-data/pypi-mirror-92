{"version":3,"sources":["baseCommentReplyModel.es6.js"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA,GAAG,gBAAH,GAAsB,GAAG,YAAH,CAAgB,MAAhB,CAAuB;AACzC,YADyC,sBAC9B;AACP,eAAO,EAAE,QAAF,CAAW;AACd,2BAAe,IADD;AAEd,8BAAkB,IAFJ;AAGd,2BAAe,EAHD;AAId,uBAAW,IAJG;AAKd,sBAAU,KALI;AAMd,kBAAM;AANQ,SAAX,EAOJ,GAAG,YAAH,CAAgB,SAAhB,CAA0B,QAA1B,EAPI,CAAP;AAQH,KAVwC;;;AAYzC,mBAAe;AACX,uBAAe,iBADJ;AAEX,0BAAkB,oBAFP;AAGX,mBAAW,aAHA;AAIX,kBAAU;AAJC,KAZ0B;;AAmBzC,qBAAiB,CACb,eADa,EAEb,kBAFa,EAGb,WAHa,EAIb,UAJa,EAKb,MALa,CAnBwB;;AA2BzC,uBAAmB,CACf,MADe,CA3BsB;;AA+BzC,iBAAa;AACT,uBAAe,GAAG,eAAH,CAAmB,WADzB;AAET,0BAAkB,GAAG,eAAH,CAAmB,WAF5B;AAGT,mBAAW,GAAG,eAAH,CAAmB,cAHrB;AAIT,kBAAU,GAAG,eAAH,CAAmB;AAJpB,KA/B4B;;AAsCzC;;;;;;;AAOA,kBA7CyC,4BA6CxB;AACb,YAAI,CAAC,KAAK,GAAL,CAAS,MAAT,CAAL,EAAuB;AACnB,iBAAK,OAAL,CAAa,KAAb,CAAmB,IAAnB,EAAyB,SAAzB;AACH;AACJ,KAjDwC;;;AAmDzC;;;;;;;;;;;;;AAaA,qBAhEyC,6BAgEvB,GAhEuB,EAgElB;AACnB,YAAM,gBAAgB,IAAI,eAAJ,IAAuB,GAA7C;AACA,YAAM,OAAO,GAAG,YAAH,CAAgB,SAAhB,CAA0B,iBAA1B,CAA4C,IAA5C,CACT,IADS,EACH,GADG,CAAb;;AAGA,aAAK,aAAL,GAAqB,IAAI,eAAJ,IAAuB,EAA5C;AACA,aAAK,QAAL,GAAiB,cAAc,SAAd,KAA4B,UAA7C;;AAEA,eAAO,IAAP;AACH,KAzEwC;;;AA2EzC;;;;;;;;;;;;;;;AAeA,YA1FyC,oBA0FhC,KA1FgC,EA0FzB;AACZ,YAAI,EAAE,GAAF,CAAM,KAAN,EAAa,cAAb,KAAgC,CAAC,MAAM,YAA3C,EAAyD;AACrD,mBAAO,GAAG,YAAH,CAAgB,OAAhB,CAAwB,mBAA/B;AACH;AACJ;AA9FwC,CAAvB,CAAtB","file":"baseCommentReplyModel.js","sourcesContent":["/**\n * The base class for a reply to a type of comment.\n *\n * This handles all the serialization/deserialization for comment replies.\n * Subclasses are expected to provide the rspNamespace, but don't need to\n * provide any additional functionality.\n *\n * Model Attributes:\n *     forceTextType (string):\n *         The text format type to request for text in all responses.\n *\n *     includeTextTypes (string):\n *         A comma-separated list of text types to include in the payload when\n *         syncing the model.\n *\n *     rawTextFields (object):\n *         The contents of the raw text fields, if forceTextType is used and\n *         the caller fetches or posts with includeTextTypes=raw. The keys in this\n *         object are the field names, and the values are the raw versions of\n *         those attributes.\n *\n *     replyToID (number):\n *         The ID of the comment that this reply is replying to.\n *\n *     richText (boolean):\n *         Whether the reply text is saved in rich text (Markdown) format.\n *\n *     text (string):\n *         The text of the reply.\n */\nRB.BaseCommentReply = RB.BaseResource.extend({\n    defaults() {\n        return _.defaults({\n            forceTextType: null,\n            includeTextTypes: null,\n            rawTextFields: {},\n            replyToID: null,\n            richText: false,\n            text: ''\n        }, RB.BaseResource.prototype.defaults());\n    },\n\n    attrToJsonMap: {\n        forceTextType: 'force_text_type',\n        includeTextTypes: 'include_text_types',\n        replyToID: 'reply_to_id',\n        richText: 'text_type'\n    },\n\n    serializedAttrs: [\n        'forceTextType',\n        'includeTextTypes',\n        'replyToID',\n        'richText',\n        'text'\n    ],\n\n    deserializedAttrs: [\n        'text'\n    ],\n\n    serializers: {\n        forceTextType: RB.JSONSerializers.onlyIfValue,\n        includeTextTypes: RB.JSONSerializers.onlyIfValue,\n        replyToID: RB.JSONSerializers.onlyIfUnloaded,\n        richText: RB.JSONSerializers.textType\n    },\n\n    /**\n     * Destroy the comment reply if and only if the text is empty.\n     *\n     * This works just like destroy(), and will in fact call destroy()\n     * with all provided arguments, but only if there's some actual\n     * text in the reply.\n     */\n    destroyIfEmpty() {\n        if (!this.get('text')) {\n            this.destroy.apply(this, arguments);\n        }\n    },\n\n    /**\n     * Deserialize comment reply data from an API payload.\n     *\n     * This must be overloaded by subclasses, and the parent version called.\n     *\n     * Args:\n     *     rsp (object):\n     *         The response from the server.\n     *\n     * Returns:\n     *     object:\n     *     Attribute values to set on the model.\n     */\n    parseResourceData(rsp) {\n        const rawTextFields = rsp.raw_text_fields || rsp;\n        const data = RB.BaseResource.prototype.parseResourceData.call(\n            this, rsp);\n\n        data.rawTextFields = rsp.raw_text_fields || {};\n        data.richText = (rawTextFields.text_type === 'markdown');\n\n        return data;\n    },\n\n    /**\n     * Validate the attributes of the model.\n     *\n     * By default, this validates that there's a parentObject set. It\n     * can be overridden to provide additional validation, but the parent\n     * function must be called.\n     *\n     * Args:\n     *     attrs (object):\n     *         Model attributes to validate.\n     *\n     * Returns:\n     *     string:\n     *     An error string, if appropriate.\n     */\n    validate(attrs) {\n        if (_.has(attrs, 'parentObject') && !attrs.parentObject) {\n            return RB.BaseResource.strings.UNSET_PARENT_OBJECT;\n        }\n    }\n});\n"]}