{"version":3,"sources":["diffFragmentQueueViewTests.es6.js"],"names":[],"mappings":"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","file":"diffFragmentQueueViewTests.js","sourcesContent":["suite('rb/views/DiffFragmentQueueView', function() {\n    const URL_PREFIX = '/r/123/_fragments/diff-comments/';\n\n    let fragmentQueue;\n\n    beforeEach(function() {\n        fragmentQueue = new RB.DiffFragmentQueueView({\n            containerPrefix: 'container1',\n            reviewRequestPath: '/r/123/',\n            queueName: 'diff_fragments'\n        });\n    });\n\n    describe('Diff fragment loading', function() {\n        let $container1;\n        let $container2;\n        let $container3;\n        let $container4;\n\n        beforeEach(function() {\n            $container1 = $('<div id=\"container1_123\"/>')\n                .appendTo(window.$testsScratch);\n            $container2 = $('<div id=\"container1_124\"/>')\n                .appendTo(window.$testsScratch);\n            $container3 = $('<div id=\"container1_125\"/>')\n                .appendTo(window.$testsScratch);\n            $container4 = $('<div id=\"container1_126\"/>')\n                .appendTo(window.$testsScratch);\n\n            fragmentQueue.queueLoad('123', 'key1');\n            fragmentQueue.queueLoad('124', 'key1');\n            fragmentQueue.queueLoad('125', 'key1');\n            fragmentQueue.queueLoad('126', 'key2');\n        });\n\n        it('Fragment queueing', function() {\n            const queue = fragmentQueue._queue;\n\n            expect(queue.length).not.toBe(0);\n\n            expect(queue.key1.length).toBe(3);\n            expect(queue.key1).toContain({\n                commentID: '123',\n                onFragmentRendered: null,\n            });\n            expect(queue.key1).toContain({\n                commentID: '124',\n                onFragmentRendered: null,\n            });\n            expect(queue.key1).toContain({\n                commentID: '125',\n                onFragmentRendered: null,\n            });\n            expect(queue.key2.length).toBe(1);\n            expect(queue.key2).toContain({\n                commentID: '126',\n                onFragmentRendered: null,\n            });\n        });\n\n        it('Batch loading', function(done) {\n            spyOn($, 'ajax').and.callFake(function(options) {\n                expect(options.dataType).toBe('arraybuffer');\n\n                const url = options.url;\n                let blob;\n\n                if (url === `${URL_PREFIX}123,124,125/`) {\n                    const html1 = new Blob(['<span>Comment one</span>']);\n                    const html2 = new Blob(['<span>Comment two</span>']);\n                    const html3 = new Blob(['<span>Comment three</span>']);\n\n                    blob = RB.DataUtils.buildBlob([\n                        [{\n                            type: 'uint32',\n                            values: [123, html1.size],\n                        }],\n                        html1,\n                        [{\n                            type: 'uint32',\n                            values: [124, html2.size],\n                        }],\n                        html2,\n                        [{\n                            type: 'uint32',\n                            values: [125, html3.size],\n                        }],\n                        html3,\n                    ]);\n                } else if (url === `${URL_PREFIX}126/`) {\n                    const html = new Blob(['<span>Comment 4</span>']);\n\n                    blob = RB.DataUtils.buildBlob([\n                        [{\n                            type: 'uint32',\n                            values: [126, html.size],\n                        }],\n                        html,\n                    ]);\n                } else {\n                    fail(`Unexpected URL ${url}`);\n                    return;\n                }\n\n                RB.DataUtils.readBlobAsArrayBuffer(blob, options.success);\n            });\n\n            fragmentQueue.loadFragments(() => {\n                expect($.ajax.calls.count()).toBe(2);\n\n                expect($container1.data('diff-fragment-view')).toBeTruthy();\n                expect($container1.html()).toBe('<span>Comment one</span>');\n\n                expect($container2.data('diff-fragment-view')).toBeTruthy();\n                expect($container2.html()).toBe('<span>Comment two</span>');\n\n                expect($container3.data('diff-fragment-view')).toBeTruthy();\n                expect($container3.html()).toBe('<span>Comment three</span>');\n\n                expect($container4.data('diff-fragment-view')).toBeTruthy();\n                expect($container4.html()).toBe('<span>Comment 4</span>');\n\n                done();\n            });\n        });\n\n        it('With Unicode content', function(done) {\n            spyOn($, 'ajax').and.callFake(function(options) {\n                expect(options.dataType).toBe('arraybuffer');\n\n                const url = options.url;\n                let arrayBuffer;\n\n                if (url === `${URL_PREFIX}123,124,125/`) {\n                    /* UTF-8 bytes for \"<span>áéíóú 🔥</span>\" */\n                    const html1 = [\n                        60, 115, 112, 97, 110, 62, 195, 161, 195, 169,\n                        195, 173, 195, 179, 195, 186, 32, 240, 159, 148,\n                        165, 60, 47, 115, 112, 97, 110, 62,\n                    ];\n\n                    /* UTF-8 bytes for \"<span>ÄËÏÖÜŸ 😱</span>\" */\n                    const html2 = [\n                        60, 115, 112, 97, 110, 62, 195, 132, 195, 139,\n                        195, 143, 195, 150, 195, 156, 197, 184, 32, 240,\n                        159, 152, 177, 60, 47, 115, 112, 97, 110, 62,\n                    ];\n\n                    /* UTF-8 bytes for \"<span>🔥😱</span>\" */\n                    const html3 = [\n                        60, 115, 112, 97, 110, 62, 240, 159, 148, 165, 240,\n                        159, 152, 177, 60, 47, 115, 112, 97, 110, 62,\n                    ];\n\n                    expect(html1.length).toBe(28);\n                    expect(html2.length).toBe(30);\n                    expect(html3.length).toBe(21);\n\n                    arrayBuffer = RB.DataUtils.buildArrayBuffer([\n                        {\n                            type: 'uint32',\n                            values: [123, html1.length],\n                        },\n                        {\n                            type: 'uint8',\n                            values: html1,\n                        },\n                        {\n                            type: 'uint32',\n                            values: [124, html2.length],\n                        },\n                        {\n                            type: 'uint8',\n                            values: html2,\n                        },\n                        {\n                            type: 'uint32',\n                            values: [125, html3.length],\n                        },\n                        {\n                            type: 'uint8',\n                            values: html3,\n                        },\n                    ]);\n                } else if (url === `${URL_PREFIX}126/`) {\n                    /* UTF-8 bytes for \"<span>ĀĒĪŌ 👿</span>\" */\n                    const html = [\n                        60, 115, 112, 97, 110, 62, 196, 128, 196, 146,\n                        196, 170, 197, 140, 32, 240, 159, 145, 191, 60,\n                        47, 115, 112, 97, 110, 62,\n                    ];\n\n                    expect(html.length).toBe(26);\n\n                    arrayBuffer = RB.DataUtils.buildArrayBuffer([\n                        {\n                            type: 'uint32',\n                            values: [126, html.length],\n                        },\n                        {\n                            type: 'uint8',\n                            values: html,\n                        },\n                    ]);\n                } else {\n                    fail(`Unexpected URL ${url}`);\n                    return;\n                }\n\n                options.success(arrayBuffer);\n            });\n\n            fragmentQueue.loadFragments(() => {\n                expect($.ajax.calls.count()).toBe(2);\n\n                expect($container1.data('diff-fragment-view')).toBeTruthy();\n                expect($container1.html()).toBe('<span>áéíóú 🔥</span>');\n\n                expect($container2.data('diff-fragment-view')).toBeTruthy();\n                expect($container2.html()).toBe('<span>ÄËÏÖÜŸ 😱</span>');\n\n                expect($container3.data('diff-fragment-view')).toBeTruthy();\n                expect($container3.html()).toBe('<span>🔥😱</span>');\n\n                expect($container4.data('diff-fragment-view')).toBeTruthy();\n                expect($container4.html()).toBe('<span>ĀĒĪŌ 👿</span>');\n\n                done();\n            });\n        });\n\n        it('With saved fragments', function(done) {\n            spyOn($, 'ajax').and.callFake(function(options) {\n                expect(options.dataType).toBe('arraybuffer');\n\n                const url = options.url;\n                let blob;\n\n                if (url === `${URL_PREFIX}124/`) {\n                    const html = new Blob(['<span>New comment 2</span>']);\n\n                    blob = RB.DataUtils.buildBlob([\n                        [{\n                            type: 'uint32',\n                            values: [124, html.size],\n                        }],\n                        html,\n                    ]);\n                } else if (url === `${URL_PREFIX}126/`) {\n                    const html = new Blob(['<span>New comment 4</span>']);\n\n                    blob = RB.DataUtils.buildBlob([\n                        [{\n                            type: 'uint32',\n                            values: [126, html.size],\n                        }],\n                        html,\n                    ]);\n                } else {\n                    fail(`Unexpected URL ${url}`);\n                    return;\n                }\n\n                RB.DataUtils.readBlobAsArrayBuffer(blob, options.success);\n            });\n\n            /*\n             * We'll set up three containers, with the third being having its\n             * view disassociated and the fourth as a completely new container.\n             * The unsaved pre-loaded containers (2) and the new container (4)\n             * will be loaded. The disassociated container (3) will have a\n             * new view set up.\n             */\n            const view1 = new RB.DiffFragmentView();\n            $container1\n                .html('<span>Comment 1</span>')\n                .data('diff-fragment-view', view1);\n\n            const view2 = new RB.DiffFragmentView();\n            $container2\n                .html('<span>Comment 2</span>')\n                .data('diff-fragment-view', view2);\n\n            const view3 = new RB.DiffFragmentView();\n            $container3\n                .html('<span>Comment 3</span>')\n                .data('diff-fragment-view', view3);\n\n            /*\n             * We're going to save 123, 125, and 126 (which is not loaded).\n             * Only 123 and 125 will actually be saved.\n             */\n            fragmentQueue.saveFragment('123');\n            fragmentQueue.saveFragment('125');\n            fragmentQueue.saveFragment('126');\n\n            /* Disassociate container 3's view. */\n            $container3.removeData('diff-fragment-view');\n\n            fragmentQueue.loadFragments(() => {\n                expect($.ajax.calls.count()).toBe(2);\n\n                expect($container1.data('diff-fragment-view')).toBe(view1);\n                expect($container1.html()).toBe('<span>Comment 1</span>');\n\n                expect($container2.data('diff-fragment-view')).toBe(view2);\n                expect($container2.html()).toBe('<span>New comment 2</span>');\n\n                expect($container3.data('diff-fragment-view')).toBeTruthy();\n                expect($container3.data('diff-fragment-view')).not.toBe(view3);\n                expect($container3.html()).toBe('<span>Comment 3</span>');\n\n                expect($container4.data('diff-fragment-view')).toBeTruthy();\n                expect($container4.html()).toBe('<span>New comment 4</span>');\n\n                expect(fragmentQueue._saved).toEqual({});\n\n                done();\n            });\n        });\n    });\n});\n"]}