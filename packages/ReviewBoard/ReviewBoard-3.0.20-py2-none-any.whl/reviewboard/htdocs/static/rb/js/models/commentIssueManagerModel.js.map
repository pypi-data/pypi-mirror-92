{"version":3,"sources":["commentIssueManagerModel.es6.js"],"names":[],"mappings":";;AAAA;;;;;AAKA,GAAG,mBAAH,GAAyB,SAAS,KAAT,CAAe,MAAf,CAAsB;AAC3C,cAAU;AACN,uBAAe;AADT,KADiC;;AAK3C;;;AAGA,cAR2C,wBAQ9B;AACT,aAAK,SAAL,GAAiB,EAAjB;AACH,KAV0C;;;AAY3C;;;;;;;;;;;;;;;;;AAiBA,mBA7B2C,2BA6B3B,QA7B2B,EA6BjB,SA7BiB,EA6BN,WA7BM,EA6BO,KA7BP,EA6Bc;AACrD,YAAM,UAAU,KAAK,UAAL,CAAgB,QAAhB,EAA0B,SAA1B,EAAqC,WAArC,CAAhB;AACA,aAAK,aAAL,CAAmB,OAAnB,EAA4B,KAA5B;AACH,KAhC0C;;;AAkC3C;;;;;;;;;;;;;;;;;;;;;AAqBA,cAvD2C,sBAuDhC,QAvDgC,EAuDtB,SAvDsB,EAuDX,WAvDW,EAuDE;AACzC,YAAI,CAAC,KAAK,SAAL,CAAe,SAAf,CAAL,EAAgC;AAC5B,gBAAM,gBAAgB,KAAK,GAAL,CAAS,eAAT,CAAtB;AACA,gBAAI,UAAU,IAAd;;AAEA,oBAAQ,WAAR;AACI,qBAAK,eAAL;AACI,8BAAU,cACL,YADK,CACQ,QADR,EAEL,iBAFK,CAEa,SAFb,CAAV;AAGA;;AAEJ,qBAAK,qBAAL;AACI,8BAAU,cACL,YADK,CACQ,QADR,EAEL,uBAFK,CAEmB,SAFnB,CAAV;AAGA;;AAEJ,qBAAK,0BAAL;AACI,8BAAU,cACL,YADK,CACQ,QADR,EAEL,2BAFK,CAEuB,SAFvB,CAAV;AAGA;;AAEJ,qBAAK,kBAAL;AACI,8BAAU,cACL,YADK,CACQ,QADR,EAEL,oBAFK,CAEgB,SAFhB,CAAV;AAGA;;AAEJ;AACI,4BAAQ,KAAR,CACI,kDADJ,EAEI,WAFJ;AA1BR;;AA+BA,iBAAK,SAAL,CAAe,SAAf,IAA4B,OAA5B;AACH;;AAED,eAAO,KAAK,SAAL,CAAe,SAAf,CAAP;AACH,KA/F0C;;;AAiG3C;;;;;;;;;;AAUA,iBA3G2C,yBA2G7B,OA3G6B,EA2GpB,KA3GoB,EA2Gb;AAAA;;AAC1B,gBAAQ,KAAR,CAAc;AACV,mBAAO,iBAAM;AACT,oBAAM,iBAAiB,QAAQ,GAAR,CAAY,aAAZ,CAAvB;;AAEA,wBAAQ,GAAR,CAAY,aAAZ,EAA2B,KAA3B;AACA,wBAAQ,IAAR,CAAa;AACT,2BAAO,CAAC,aAAD,CADE;AAET,6BAAS,iBAAC,OAAD,EAAU,GAAV,EAAkB;AACvB,4BAAM,aAAc,IAAI,YAAJ,IACA,IAAI,uBADJ,IAEA,IAAI,kBAFJ,IAGA,IAAI,eAHxB;AAIA,8BAAK,OAAL,CAAa,oBAAb,EAAmC,OAAnC,EACa,cADb,EAC6B,WAAW,SADxC;AAEH;AATQ,iBAAb;AAWH;AAhBS,SAAd;AAkBH;AA9H0C,CAAtB,CAAzB","file":"commentIssueManagerModel.js","sourcesContent":["/**\n * CommentIssueManager takes care of setting the state of a particular\n * comment issue, and also takes care of notifying callbacks whenever\n * the state is successfully changed.\n */\nRB.CommentIssueManager = Backbone.Model.extend({\n    defaults: {\n        reviewRequest: null,\n    },\n\n    /**\n     * Initialize the model.\n     */\n    initialize() {\n        this._comments = {};\n    },\n\n    /**\n     * Set the state for a comment.\n     *\n     * Args:\n     *     reviewID (number):\n     *         The ID of the review the comment belongs to.\n     *\n     *     commentID (number):\n     *         The ID of the comment.\n     *\n     *     commentType (string):\n     *         The type of the comment.\n     *\n     *     state (string):\n     *          The new state for the comment's issue. This will be one of\n     *          ``open``, ``resolved``, ``dropped``, or ``verify``.\n     */\n    setCommentState(reviewID, commentID, commentType, state) {\n        const comment = this.getComment(reviewID, commentID, commentType);\n        this._requestState(comment, state);\n    },\n\n    /**\n     * Retrieve the model for a given comment.\n     *\n     * This will either generate the appropriate comment object based on\n     * ``commentType``, or grab the comment from a cache if it's been generated\n     * before.\n     *\n     * Args:\n     *     reviewID (number):\n     *         The ID of the review the comment belongs to.\n     *\n     *     commentID (number):\n     *         The ID of the comment.\n     *\n     *     commentType (string):\n     *         The type of the comment.\n     *\n     * Returns:\n     *     RB.BaseComment:\n     *     The comment model.\n     */\n    getComment(reviewID, commentID, commentType) {\n        if (!this._comments[commentID]) {\n            const reviewRequest = this.get('reviewRequest');\n            let comment = null;\n\n            switch (commentType) {\n                case 'diff_comments':\n                    comment = reviewRequest\n                        .createReview(reviewID)\n                        .createDiffComment(commentID);\n                    break;\n\n                case 'screenshot_comments':\n                    comment = reviewRequest\n                        .createReview(reviewID)\n                        .createScreenshotComment(commentID);\n                    break;\n\n                case 'file_attachment_comments':\n                    comment = reviewRequest\n                        .createReview(reviewID)\n                        .createFileAttachmentComment(commentID);\n                    break;\n\n                case 'general_comments':\n                    comment = reviewRequest\n                        .createReview(reviewID)\n                        .createGeneralComment(commentID);\n                    break;\n\n                default:\n                    console.error(\n                        'getComment received unexpected comment type \"%s\"',\n                        commentType);\n            }\n\n            this._comments[commentID] = comment;\n        }\n\n        return this._comments[commentID];\n    },\n\n    /**\n     * Set the state of a comment.\n     *\n     * Args:\n     *     comment (RB.BaseComment):\n     *         The comment to set the state of.\n     *\n     *     state (string):\n     *         The new issue state for the comment.\n     */\n    _requestState(comment, state) {\n        comment.ready({\n            ready: () => {\n                const oldIssueStatus = comment.get('issueStatus');\n\n                comment.set('issueStatus', state);\n                comment.save({\n                    attrs: ['issueStatus'],\n                    success: (comment, rsp) => {\n                        const rspComment = (rsp.diff_comment ||\n                                            rsp.file_attachment_comment ||\n                                            rsp.screenshot_comment ||\n                                            rsp.general_comment);\n                        this.trigger('issueStatusUpdated', comment,\n                                     oldIssueStatus, rspComment.timestamp);\n                    },\n                });\n            },\n        });\n    },\n});\n"]}