{"version":3,"sources":["statusUpdatesEntryModel.es6.js"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA,GAAG,iBAAH,CAAqB,kBAArB,GAA0C,GAAG,iBAAH,CAAqB,KAArB,CAA2B,MAA3B,CAAkC;AACxE,cAAU,EAAE,QAAF,CAAW;AACjB,0BAAkB,EADD;AAEjB,yBAAiB,IAFA;AAGjB,8BAAsB,KAHL;AAIjB,yBAAiB,IAJA;AAKjB,iBAAS;AALQ,KAAX,EAMP,GAAG,iBAAH,CAAqB,KAArB,CAA2B,SAA3B,CAAqC,QAN9B,CAD8D;;AASxE;;;;;;;;;;;AAWA,SApBwE,iBAoBlE,KApBkE,EAoB3D;AACT,YAAM,gBAAgB,MAAM,mBAAN,CAA0B,GAA1B,CAA8B,eAA9B,CAAtB;AACA,YAAM,cAAc,MAAM,WAAN,IAAqB,EAAzC;AACA,YAAM,UAAU,YAAY,GAAZ,CACZ;AAAA,mBAAc,cAAc,YAAd,CAA2B,WAAW,EAAtC,EAA0C;AACpD,4BAAY,WAAW,UAD6B;AAEpD,yBAAS,WAAW,OAFgC;AAGpD,0BAAU,WAAW,MAH+B;AAIpD,wBAAQ,WAAW;AAJiC,aAA1C,CAAd;AAAA,SADY,CAAhB;;AAQA,eAAO,EAAE,MAAF,CACH,GAAG,iBAAH,CAAqB,KAArB,CAA2B,SAA3B,CAAqC,KAArC,CAA2C,IAA3C,CAAgD,IAAhD,EAAsD,KAAtD,CADG,EAEH;AACI,8BAAkB,MAAM,gBAD5B;AAEI,6BAAiB,cAAc,GAAd,CAAkB,iBAAlB,CAFrB;AAGI,kCAAsB,MAAM,oBAHhC;AAII,6BAAiB,cAAc,EAJnC;AAKI,qBAAS;AALb,SAFG,CAAP;AASH;AAxCuE,CAAlC,CAA1C","file":"statusUpdatesEntryModel.js","sourcesContent":["/**\n * An entry on the review request page for status updates.\n *\n * This stores common state needed for an entry containing status updates\n * made on a review request.\n *\n * See :js:class:`RB.ReviewRequestPage.Entry` for additional model attributes.\n *\n * Model Attributes:\n *     diffCommentsData (Array):\n *         An array of data for comments made on diffs. Each entry is an\n *         array in the format of ``[comment_id, key]``, where the key is\n *         a value for internal use that indicates the filediff or\n *         interfilediff range to use for loading diff fragments.\n *\n *     localSitePrefix (string):\n *         The local site prefix to use, if any.\n *\n *     pendingStatusUpdates (boolean):\n *         Whether this entry is still pending completed status updates.\n *\n *     reviewRequestId (number):\n *         The ID of the review request that this status update belongs to.\n *\n *     reviews (Array):\n *         An array of objects representing attributes for reviews for the\n *         status updates.\n */\nRB.ReviewRequestPage.StatusUpdatesEntry = RB.ReviewRequestPage.Entry.extend({\n    defaults: _.defaults({\n        diffCommentsData: [],\n        localSitePrefix: null,\n        pendingStatusUpdates: false,\n        reviewRequestId: null,\n        reviews: [],\n    }, RB.ReviewRequestPage.Entry.prototype.defaults),\n\n    /**\n     * Parse attributes for the model.\n     *\n     * Args:\n     *     attrs (object):\n     *         The attributes provided when constructing the model instance.\n     *\n     * Returns:\n     *     object:\n     *     The resulting attributes used for the model instance.\n     */\n    parse(attrs) {\n        const reviewRequest = attrs.reviewRequestEditor.get('reviewRequest');\n        const reviewsData = attrs.reviewsData || [];\n        const reviews = reviewsData.map(\n            reviewData => reviewRequest.createReview(reviewData.id, {\n                bodyBottom: reviewData.bodyBottom,\n                bodyTop: reviewData.bodyTop,\n                'public': reviewData.public,\n                shipIt: reviewData.shipIt,\n            }));\n\n        return _.extend(\n            RB.ReviewRequestPage.Entry.prototype.parse.call(this, attrs),\n            {\n                diffCommentsData: attrs.diffCommentsData,\n                localSitePrefix: reviewRequest.get('localSitePrefix'),\n                pendingStatusUpdates: attrs.pendingStatusUpdates,\n                reviewRequestId: reviewRequest.id,\n                reviews: reviews,\n            });\n    },\n});\n"]}