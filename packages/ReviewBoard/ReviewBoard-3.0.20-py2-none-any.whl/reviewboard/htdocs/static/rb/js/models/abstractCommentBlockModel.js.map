{"version":3,"sources":["abstractCommentBlockModel.es6.js"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;AAYA,GAAG,oBAAH,GAA0B,SAAS,KAAT,CAAe,MAAf,CAAsB;AAC5C,cAAU;AACN,kBAAU,KADJ;AAEN,mBAAW,KAFL;AAGN,sBAAc,IAHR;AAIN,uBAAe,IAJT;AAKN,gBAAQ,IALF;AAMN,4BAAoB,EANd;AAON,eAAO;AAPD,KADkC;;AAW5C;;;AAGA,cAd4C,wBAc/B;AAAA;;AACT,gBAAQ,MAAR,CAAe,KAAK,GAAL,CAAS,eAAT,CAAf,EACe,gCADf;AAEA,gBAAQ,MAAR,CAAe,KAAK,GAAL,CAAS,QAAT,CAAf,EACe,yBADf;;AAGA;;;;AAIA,YAAM,WAAW,KAAK,GAAL,CAAS,oBAAT,CAAjB;AACA,YAAM,wBAAwB,EAA9B;;AAEA,YAAI,SAAS,MAAT,GAAkB,CAAtB,EAAyB;AACrB,qBAAS,OAAT,CAAiB,mBAAW;AACxB;AACA,wBAAQ,IAAR,GAAe,EAAE,OAAF,EAAW,IAAX,CAAgB,QAAQ,IAAxB,EAA8B,IAA9B,EAAf;;AAEA,oBAAI,QAAQ,UAAZ,EAAwB;AACpB,0BAAK,kBAAL,CAAwB,QAAQ,UAAhC,EAA4C;AACxC,8BAAM,QAAQ,IAD0B;AAExC,kCAAU,QAAQ,SAFsB;AAGxC,qCAAa,QAAQ,YAHmB;AAIxC,qCAAa,QAAQ,YAJmB;AAKxC,8BAAM,QAAQ;AAL0B,qBAA5C;AAOH,iBARD,MAQO;AACH,0CAAsB,IAAtB,CAA2B,OAA3B;AACH;AACJ,aAfD,EAeG,IAfH;;AAiBA,iBAAK,GAAL,CAAS,oBAAT,EAA+B,qBAA/B;AACH,SAnBD,MAmBO;AACH,iBAAK,kBAAL;AACH;;AAED,aAAK,EAAL,CAAQ,qBAAR,EAA+B,KAAK,YAApC,EAAkD,IAAlD;AACA,aAAK,YAAL;AACH,KApD2C;;;AAsD5C;;;;;;;;;;AAUA,WAhE4C,qBAgElC;AACN,eAAQ,KAAK,GAAL,CAAS,oBAAT,EAA+B,MAA/B,KAA0C,CAA1C,IACA,CAAC,KAAK,GAAL,CAAS,cAAT,CADT;AAEH,KAnE2C;;;AAqE5C;;;;;;;;;;;;;;AAcA,iBAnF4C,yBAmF9B,EAnF8B,EAmF1B;AACd,gBAAQ,MAAR,CAAe,KAAf,EAAsB,wCAAtB;AACH,KArF2C;;;AAuF5C;;;;;;;;;;;;;;;AAeA,sBAtG4C,8BAsGzB,EAtGyB,EAsGrB,YAtGqB,EAsGP;AAAA;;AACjC,YAAI,KAAK,GAAL,CAAS,cAAT,CAAJ,EAA8B;AAC1B;AACH;;AAED,YAAM,UAAU,KAAK,aAAL,CAAmB,EAAnB,CAAhB;AACA,gBAAQ,GAAR,CAAY,YAAZ;AACA,gBAAQ,EAAR,CAAW,OAAX,EAAoB,KAAK,YAAzB,EAAuC,IAAvC;AACA,gBAAQ,EAAR,CAAW,SAAX,EAAsB,YAAM;AACxB,mBAAK,GAAL,CAAS,cAAT,EAAyB,IAAzB;AACA,mBAAK,YAAL;AACH,SAHD;;AAKA,aAAK,GAAL,CAAS,cAAT,EAAyB,OAAzB;AACH,KApH2C;;;AAsH5C;;;;;;AAMA,gBA5H4C,0BA4H7B;AACX,YAAI,QAAQ,KAAK,GAAL,CAAS,oBAAT,EAA+B,MAA3C;;AAEA,YAAI,KAAK,GAAL,CAAS,cAAT,CAAJ,EAA8B;AAC1B;AACH;;AAED,aAAK,GAAL,CAAS,OAAT,EAAkB,KAAlB;AACH;AApI2C,CAAtB,CAA1B","file":"abstractCommentBlockModel.js","sourcesContent":["/**\n * Represents a region of reviewable content that contains comments.\n *\n * This stores all comments that match a given region, as defined by a\n * subclass of AbstractCommentBlock.\n *\n * New draft comments can be created, which will later be stored on the\n * server.\n *\n * The total number of comments in the block (including any draft comment)\n * will be stored, which may be useful for display.\n */\nRB.AbstractCommentBlock = Backbone.Model.extend({\n    defaults: {\n        hasDraft: false,\n        canDelete: false,\n        draftComment: null,\n        reviewRequest: null,\n        review: null,\n        serializedComments: [],\n        count: 0\n    },\n\n    /**\n     * Initialize the AbstractCommentBlock.\n     */\n    initialize() {\n        console.assert(this.get('reviewRequest'),\n                       'reviewRequest must be provided');\n        console.assert(this.get('review'),\n                       'review must be provided');\n\n        /*\n         * Find out if there are any draft comments and filter them out of the\n         * stored list of comments.\n         */\n        const comments = this.get('serializedComments');\n        const newSerializedComments = [];\n\n        if (comments.length > 0) {\n            comments.forEach(comment => {\n                // We load in encoded text, so decode it.\n                comment.text = $('<div>').html(comment.text).text();\n\n                if (comment.localdraft) {\n                    this.ensureDraftComment(comment.comment_id, {\n                        text: comment.text,\n                        richText: comment.rich_text,\n                        issueOpened: comment.issue_opened,\n                        issueStatus: comment.issue_status,\n                        html: comment.html,\n                    });\n                } else {\n                    newSerializedComments.push(comment);\n                }\n            }, this);\n\n            this.set('serializedComments', newSerializedComments);\n        } else {\n            this.ensureDraftComment();\n        }\n\n        this.on('change:draftComment', this._updateCount, this);\n        this._updateCount();\n    },\n\n    /**\n     * Return whether or not the comment block is empty.\n     *\n     * A comment block is empty if there are no stored comments and no\n     * draft comment.\n     *\n     * Returns:\n     *     boolean:\n     *     Whether the comment block is empty.\n     */\n    isEmpty() {\n        return (this.get('serializedComments').length === 0 &&\n                !this.has('draftComment'));\n    },\n\n    /**\n     * Create a draft comment, optionally with a given ID and text.\n     *\n     * This must be implemented by a subclass to return a Comment class\n     * specific to the subclass.\n     *\n     * Args:\n     *     id (number):\n     *         The ID of the comment to instantiate the model for.\n     *\n     * Returns:\n     *     RB.BaseComment:\n     *     The new comment model.\n     */\n    createComment(id) {\n        console.assert(false, 'This must be implemented by a subclass');\n    },\n\n    /**\n     * Create a draft comment in this comment block.\n     *\n     * Only one draft comment can exist per block, so if one already exists,\n     * this will do nothing.\n     *\n     * The actual comment object is up to the subclass to create.\n     *\n     * Args:\n     *     id (number):\n     *         The ID of the comment.\n     *\n     *     comment_attr (object):\n     *         Attributes to set on the comment model.\n     */\n    ensureDraftComment(id, comment_attr) {\n        if (this.has('draftComment')) {\n            return;\n        }\n\n        const comment = this.createComment(id);\n        comment.set(comment_attr);\n        comment.on('saved', this._updateCount, this);\n        comment.on('destroy', () => {\n            this.set('draftComment', null);\n            this._updateCount();\n        });\n\n        this.set('draftComment', comment);\n    },\n\n    /**\n     * Update the displayed number of comments in the comment block.\n     *\n     * If there's a draft comment, it will be added to the count. Otherwise,\n     * this depends solely on the number of published comments.\n     */\n    _updateCount() {\n        let count = this.get('serializedComments').length;\n\n        if (this.has('draftComment')) {\n            count++;\n        }\n\n        this.set('count', count);\n    },\n});\n"]}