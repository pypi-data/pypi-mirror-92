{"version":3,"sources":["dataUtils.es6.js"],"names":[],"mappings":";;AAAA,GAAG,SAAH,GAAe;AACX,sBAAkB;AACd,cAAM;AACF,kBAAM,CADJ;AAEF,sBAAU;AAFR,SADQ;AAKd,eAAO;AACH,kBAAM,CADH;AAEH,sBAAU;AAFP,SALO;AASd,eAAO;AACH,kBAAM,CADH;AAEH,sBAAU;AAFP,SATO;AAad,gBAAQ;AACJ,kBAAM,CADF;AAEJ,sBAAU;AAFN,SAbM;AAiBd,eAAO;AACH,kBAAM,CADH;AAEH,sBAAU;AAFP,SAjBO;AAqBd,gBAAQ;AACJ,kBAAM,CADF;AAEJ,sBAAU;AAFN,SArBM;AAyBd,iBAAS;AACL,kBAAM,CADD;AAEL,sBAAU;AAFL,SAzBK;AA6Bd,iBAAS;AACL,kBAAM,CADD;AAEL,sBAAU;AAFL;AA7BK,KADP;;AAoCX;;;;;;;;;;;;;AAaA,yBAjDW,iCAiDW,IAjDX,EAiDiB,QAjDjB,EAiD2B;AAClC,WAAG,SAAH,CAAa,WAAb,CAAyB,mBAAzB,EAA8C,IAA9C,EAAoD,QAApD;AACH,KAnDU;;;AAqDX;;;;;;;;;;;;;AAaA,oBAlEW,4BAkEM,IAlEN,EAkEY,QAlEZ,EAkEsB;AAC7B,WAAG,SAAH,CAAa,WAAb,CAAyB,YAAzB,EAAuC,IAAvC,EAA6C,QAA7C;AACH,KApEU;;;AAsEX;;;;;;;;;;;;;;;AAeA,+BArFW,uCAqFiB,KArFjB,EAqFwB,QArFxB,EAqFkC;AACzC,WAAG,SAAH,CAAa,gBAAb,CAA8B,uBAA9B,EAAuD,KAAvD,EAC8B,QAD9B;AAEH,KAxFU;;;AA0FX;;;;;;;;;;;;;;AAcA,0BAxGW,kCAwGY,KAxGZ,EAwGmB,QAxGnB,EAwG6B;AACpC,WAAG,SAAH,CAAa,gBAAb,CAA8B,kBAA9B,EAAkD,KAAlD,EAAyD,QAAzD;AACH,KA1GU;;;AA4GX;;;;;;;;;;;;;;;;;;;;;;;AAuBA,oBAnIW,4BAmIM,MAnIN,EAmIc;AACrB,YAAM,mBAAmB,GAAG,SAAH,CAAa,gBAAtC;AACA,YAAI,WAAW,CAAf;;AAEA,aAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,OAAO,MAA3B,EAAmC,GAAnC,EAAwC;AACpC,gBAAM,OAAO,OAAO,CAAP,CAAb;;AAEA,wBAAY,iBAAiB,KAAK,IAAtB,EAA4B,IAA5B,GAAmC,KAAK,MAAL,CAAY,MAA3D;AACH;;AAED,YAAM,cAAc,IAAI,WAAJ,CAAgB,QAAhB,CAApB;AACA,YAAM,WAAW,IAAI,QAAJ,CAAa,WAAb,CAAjB;AACA,YAAI,MAAM,CAAV;;AAEA,aAAK,IAAI,KAAI,CAAb,EAAgB,KAAI,OAAO,MAA3B,EAAmC,IAAnC,EAAwC;AACpC,gBAAM,QAAO,OAAO,EAAP,CAAb;AACA,gBAAM,SAAS,MAAK,MAApB;AACA,gBAAM,eAAe,CAAC,MAAK,SAA3B;AACA,gBAAM,WAAW,iBAAiB,MAAK,IAAtB,CAAjB;AACA,gBAAM,OAAO,SAAS,SAAS,QAAlB,CAAb;AACA,gBAAM,OAAO,SAAS,IAAtB;;AAEA,iBAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,OAAO,MAA3B,EAAmC,GAAnC,EAAwC;AACpC,qBAAK,IAAL,CAAU,QAAV,EAAoB,GAApB,EAAyB,OAAO,CAAP,CAAzB,EAAoC,YAApC;AACA,uBAAO,IAAP;AACH;AACJ;;AAED,eAAO,WAAP;AACH,KAhKU;;;AAkKX;;;;;;;;;;;;;;;;;;;AAmBA,aArLW,qBAqLD,MArLC,EAqLO;AACd,YAAM,QAAQ,EAAd;;AAEA,aAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,OAAO,MAA3B,EAAmC,GAAnC,EAAwC;AACpC,gBAAM,aAAa,OAAO,CAAP,CAAnB;;AAEA,gBAAI,EAAE,OAAF,CAAU,UAAV,CAAJ,EAA2B;AACvB,sBAAM,IAAN,CAAW,GAAG,SAAH,CAAa,gBAAb,CAA8B,UAA9B,CAAX;AACH,aAFD,MAEO;AACH,sBAAM,IAAN,CAAW,UAAX;AACH;AACJ;;AAED,eAAO,IAAI,IAAJ,CAAS,KAAT,CAAP;AACH,KAnMU;;;AAqMX;;;;;;;;;;;;;;;;;AAiBA,eAtNW,uBAsNC,YAtND,EAsNe,IAtNf,EAsNqB,QAtNrB,EAsN+B;AACtC,YAAM,SAAS,IAAI,UAAJ,EAAf;;AAEA,eAAO,gBAAP,CAAwB,SAAxB,EAAmC;AAAA,mBAAM,SAAS,OAAO,MAAhB,CAAN;AAAA,SAAnC;AACA,eAAO,YAAP,EAAqB,IAArB;AACH,KA3NU;;;AA6NX;;;;;;;;;;;;;;;;;;AAkBA,oBA/OW,4BA+OM,YA/ON,EA+OoB,KA/OpB,EA+O2B,QA/O3B,EA+OqC;AAC5C,YAAM,WAAW,GAAG,SAAH,CAAa,YAAb,CAAjB;AACA,YAAI,SAAS,IAAI,KAAJ,CAAU,MAAM,MAAhB,CAAb;AACA,YAAI,YAAY,CAAhB;;AAEA,iBAAS,YAAT,CAAsB,CAAtB,EAAyB,IAAzB,EAA+B;AAC3B,mBAAO,CAAP,IAAY,IAAZ;AACA;;AAEA,gBAAI,cAAc,MAAM,MAAxB,EAAgC;AAC5B,yBAAS,KAAT,CAAe,IAAf,EAAqB,MAArB;AACH;AACJ;;AAED,cAAM,OAAN,CAAc,UAAC,IAAD,EAAO,CAAP,EAAa;AACvB,qBAAS,IAAT,EAAe;AAAA,uBAAQ,aAAa,CAAb,EAAgB,IAAhB,CAAR;AAAA,aAAf;AACH,SAFD;AAGH;AAhQU,CAAf","file":"dataUtils.js","sourcesContent":["RB.DataUtils = {\n    ArrayBufferTypes: {\n        int8: {\n            size: 1,\n            funcName: 'setInt8',\n        },\n        uint8: {\n            size: 1,\n            funcName: 'setUint8',\n        },\n        int16: {\n            size: 2,\n            funcName: 'setInt16',\n        },\n        uint16: {\n            size: 2,\n            funcName: 'setUint16',\n        },\n        int32: {\n            size: 4,\n            funcName: 'setInt32',\n        },\n        uint32: {\n            size: 4,\n            funcName: 'setUint32',\n        },\n        float32: {\n            size: 4,\n            funcName: 'setFloat32',\n        },\n        float64: {\n            size: 8,\n            funcName: 'setFloat64',\n        },\n    },\n\n    /**\n     * Read a Blob as an ArrayBuffer.\n     *\n     * This is an asynchronous operation.\n     *\n     * Args:\n     *     blob (Blob):\n     *         The blob to read as an :js:class:`ArrayBuffer`.\n     *\n     *     onLoaded (function):\n     *         The function to call when the blob has loaded. This will take\n     *         the resulting :js:class:`ArrayBuffer` as an argument.\n     */\n    readBlobAsArrayBuffer(blob, onLoaded) {\n        RB.DataUtils._readBlobAs('readAsArrayBuffer', blob, onLoaded);\n    },\n\n    /**\n     * Read a Blob as a text string.\n     *\n     * This is an asynchronous operation.\n     *\n     * Args:\n     *     blob (Blob):\n     *         The blob to read as text.\n     *\n     *     onLoaded (function):\n     *         The function to call when the blob has loaded. This will take\n     *         the resulting string as an argument.\n     */\n    readBlobAsString(blob, onLoaded) {\n        RB.DataUtils._readBlobAs('readAsText', blob, onLoaded);\n    },\n\n    /**\n     * Read several Blobs as individual ArrayBuffers.\n     *\n     * This is an asynchronous operation.\n     *\n     * Args:\n     *     blobs (Array):\n     *         The array of :js:class:`Blob`s instances to read as\n     *         :js:class:`ArrayBuffer`s\n     *\n     *     onLoaded (function):\n     *         The function to call when the blobs have loaded. This will take\n     *         one parameter per loaded :js:class:`ArrayBuffer`, in the order\n     *         provided for the blobs.\n     */\n    readManyBlobsAsArrayBuffers(blobs, onLoaded) {\n        RB.DataUtils._readManyBlobsAs('readBlobAsArrayBuffer', blobs,\n                                      onLoaded);\n    },\n\n    /**\n     * Read several Blobs as individual text strings.\n     *\n     * This is an asynchronous operation.\n     *\n     * Args:\n     *     blobs (Array):\n     *         The array of :js:class:`Blob`s to read as text.\n     *\n     *     onLoaded (function):\n     *         The function to call when the blobs have loaded. This will take\n     *         one parameter per loaded string, in the order provided for the\n     *         blobs.\n     */\n    readManyBlobsAsStrings(blobs, onLoaded) {\n        RB.DataUtils._readManyBlobsAs('readBlobAsString', blobs, onLoaded);\n    },\n\n    /**\n     * Build an ArrayBuffer based on a schema.\n     *\n     * This takes a schema that specifies the data that should go into the\n     * :js:class:`ArrayBuffer`. Each item in the schema is an object specifying\n     * the type and the list of values of that type to add.\n     *\n     * Args:\n     *     schema (Array):\n     *         The schema containing the data to load. Each item in the array\n     *         is an object that looks like::\n     *\n     *             {\n     *                 type: 'uint8', // Or another type\n     *                 values: [1, 2, 3, ...],\n     *             }\n     *\n     *         See :js:data:`RB.DataUtils.ArrayBufferTypes`.\n     *\n     * Returns:\n     *     ArrayBuffer:\n     *     The resulting buffer built from the schema.\n     */\n    buildArrayBuffer(schema) {\n        const ArrayBufferTypes = RB.DataUtils.ArrayBufferTypes;\n        let arrayLen = 0;\n\n        for (let i = 0; i < schema.length; i++) {\n            const item = schema[i];\n\n            arrayLen += ArrayBufferTypes[item.type].size * item.values.length;\n        }\n\n        const arrayBuffer = new ArrayBuffer(arrayLen);\n        const dataView = new DataView(arrayBuffer);\n        let pos = 0;\n\n        for (let i = 0; i < schema.length; i++) {\n            const item = schema[i];\n            const values = item.values;\n            const littleEndian = !item.bigEndian;\n            const typeInfo = ArrayBufferTypes[item.type];\n            const func = dataView[typeInfo.funcName];\n            const size = typeInfo.size;\n\n            for (let j = 0; j < values.length; j++) {\n                func.call(dataView, pos, values[j], littleEndian);\n                pos += size;\n            }\n        }\n\n        return arrayBuffer;\n    },\n\n    /**\n     * Build a Blob based on a schema.\n     *\n     * This takes a schema that specifies the data that should go into the\n     * :js:class:`Blob`. Each item in the schema is either an array of objects\n     * specifying the type and the list of values of that type to add (see\n     * :js:func:`RB.DataUtils.buildArrayBuffer` for details), a\n     * :js:class:`Blob`, or string to add.\n     *\n     * Args:\n     *     schema (Array):\n     *         The schema containing the data to load. Each item in the array\n     *         must be a :js:class:`Blob`, string, or an array of objects\n     *         supported by :js:func:`RB.DataUtils.buildArrayBuffer`.\n     *\n     * Returns:\n     *     Blob:\n     *     The resulting blob built from the schema.\n     */\n    buildBlob(schema) {\n        const parts = [];\n\n        for (let i = 0; i < schema.length; i++) {\n            const schemaItem = schema[i];\n\n            if (_.isArray(schemaItem)) {\n                parts.push(RB.DataUtils.buildArrayBuffer(schemaItem));\n            } else {\n                parts.push(schemaItem);\n            }\n        }\n\n        return new Blob(parts);\n    },\n\n    /**\n     * Read a Blob using a specific FileReader function.\n     *\n     * This is a convenience function that wraps a :js:class:`FileReader`\n     * function designed to load a blob as a certain type.\n     *\n     * Args:\n     *     readFuncName (string):\n     *         The function name on :js:class:`FileReader` to call.\n     *\n     *     blob (Blob):\n     *         The blob to load.\n     *\n     *     onLoaded (function):\n     *         The function to call when the blob has loaded. This will take\n     *         the resulting value as an argument.\n     */\n    _readBlobAs(readFuncName, blob, onLoaded) {\n        const reader = new FileReader();\n\n        reader.addEventListener('loadend', () => onLoaded(reader.result));\n        reader[readFuncName](blob);\n    },\n\n    /**\n     * Read several Blobs using a specific FileReader function.\n     *\n     * This is a convenience function that wraps a :js:class:`FileReader`\n     * function, chaining multiple results in order to asynchronously load\n     * each of the blobs as a certain type.\n     *\n     * Args:\n     *     readFuncName (string):\n     *         The function name on :js:class:`FileReader` to call.\n     *\n     *     blobs (Array):\n     *         The array of Blobs to load.\n     *\n     *     onLoaded (function):\n     *         The function to call when the blobs have loaded. This will take\n     *         an argument per value loaded.\n     */\n    _readManyBlobsAs(readFuncName, blobs, onLoaded) {\n        const loadFunc = RB.DataUtils[readFuncName];\n        let result = new Array(blobs.length);\n        let numLoaded = 0;\n\n        function onBlobLoaded(i, text) {\n            result[i] = text;\n            numLoaded++;\n\n            if (numLoaded === blobs.length) {\n                onLoaded.apply(null, result);\n            }\n        }\n\n        blobs.forEach((blob, i) => {\n            loadFunc(blob, text => onBlobLoaded(i, text));\n        });\n    },\n};\n"]}