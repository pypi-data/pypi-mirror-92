# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.0.6365, generator: {generator})
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from enum import Enum, EnumMeta
from six import with_metaclass

class _CaseInsensitiveEnumMeta(EnumMeta):
    def __getitem__(self, name):
        return super().__getitem__(name.upper())

    def __getattr__(cls, name):
        """Return the enum member matching `name`
        We use __getattr__ instead of descriptors or inserting into the enum
        class' __dict__ in order to support `name` and `value` being both
        properties for enum members (which live in the class' __dict__) and
        enum members themselves.
        """
        try:
            return cls._member_map_[name.upper()]
        except KeyError:
            raise AttributeError(name)


class AnalyticsModelCreateRequestGroupType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASSET = "Asset"
    MONITORING_POINT = "MonitoringPoint"
    INDICATOR_GROUP = "IndicatorGroup"
    GROUP = "Group"
    ANALYTIC_MODEL = "AnalyticModel"

class AnalyticsModelCreateRequestType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    SMART_INDICATOR = "SMARTIndicator"
    CLASSIFIER = "Classifier"

class AnalyticsModelRelatedModelChildRelatedModelType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    SMART_INDICATOR = "SMARTIndicator"
    CLASSIFIER = "Classifier"

class AnalyticsModelResponseGroupType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASSET = "Asset"
    MONITORING_POINT = "MonitoringPoint"
    INDICATOR_GROUP = "IndicatorGroup"
    GROUP = "Group"
    ANALYTIC_MODEL = "AnalyticModel"

class AnalyticsModelResponseType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    SMART_INDICATOR = "SMARTIndicator"
    CLASSIFIER = "Classifier"

class AssetRunningSpeedChildRunningSpeedSensorRoleType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    INVALID = "Invalid"
    CURRENT_PHASE_A = "CurrentPhaseA"
    PEAK_CURRENT_PHASE_A = "PeakCurrentPhaseA"
    CURRENT_PHASE_B = "CurrentPhaseB"
    PEAK_CURRENT_PHASE_B = "PeakCurrentPhaseB"
    CURRENT_PHASE_C = "CurrentPhaseC"
    PEAK_CURRENT_PHASE_C = "PeakCurrentPhaseC"
    DIFFERENTIAL_PRESSURE = "DifferentialPressure"
    FLOW = "Flow"
    HUMIDITY = "Humidity"
    NODE_TEMPERATURE = "NodeTemperature"
    NODE_VOLTAGE = "NodeVoltage"
    PEAK_VIBRATION = "PeakVibration"
    PRESSURE = "Pressure"
    RMS_VIBRATION = "RmsVibration"
    SIGNAL_STRENGTH = "SignalStrength"
    STANDARD_AIR_VELOCITY = "StandardAirVelocity"
    SUPPLY_VOLTAGE = "SupplyVoltage"
    TEMPERATURE = "Temperature"
    TOTAL_CURRENT = "TotalCurrent"
    VIBRATION_X_AXIS = "VibrationXAxis"
    VIBRATION_Y_AXIS = "VibrationYAxis"
    VOLTAGE = "Voltage"
    CURRENT = "Current"
    ATO_D_CHANNEL1 = "AtoDChannel1"
    ATO_D_CHANNEL2 = "AtoDChannel2"
    ATO_D_CHANNEL3 = "AtoDChannel3"
    ATO_D_CHANNEL4 = "AtoDChannel4"
    ATO_D_CHANNEL5 = "AtoDChannel5"
    ATO_D_CHANNEL6 = "AtoDChannel6"
    OIL_TEMPERATURE = "OilTemperature"
    OIL_HUMIDITY = "OilHumidity"
    X = "X"
    Y = "Y"
    Z = "Z"
    CUSTOM = "Custom"
    WIRELESS_EFFICIENCY = "WirelessEfficiency"
    PACKET_SUCCESS_RATE = "PacketSuccessRate"
    NODE_HUMIDITY = "NodeHumidity"
    BURST_SUCCESS_RATE = "BurstSuccessRate"

class AssetUpdateRequestRunningSpeedSensorRoleType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    INVALID = "Invalid"
    CURRENT_PHASE_A = "CurrentPhaseA"
    PEAK_CURRENT_PHASE_A = "PeakCurrentPhaseA"
    CURRENT_PHASE_B = "CurrentPhaseB"
    PEAK_CURRENT_PHASE_B = "PeakCurrentPhaseB"
    CURRENT_PHASE_C = "CurrentPhaseC"
    PEAK_CURRENT_PHASE_C = "PeakCurrentPhaseC"
    DIFFERENTIAL_PRESSURE = "DifferentialPressure"
    FLOW = "Flow"
    HUMIDITY = "Humidity"
    NODE_TEMPERATURE = "NodeTemperature"
    NODE_VOLTAGE = "NodeVoltage"
    PEAK_VIBRATION = "PeakVibration"
    PRESSURE = "Pressure"
    RMS_VIBRATION = "RmsVibration"
    SIGNAL_STRENGTH = "SignalStrength"
    STANDARD_AIR_VELOCITY = "StandardAirVelocity"
    SUPPLY_VOLTAGE = "SupplyVoltage"
    TEMPERATURE = "Temperature"
    TOTAL_CURRENT = "TotalCurrent"
    VIBRATION_X_AXIS = "VibrationXAxis"
    VIBRATION_Y_AXIS = "VibrationYAxis"
    VOLTAGE = "Voltage"
    CURRENT = "Current"
    ATO_D_CHANNEL1 = "AtoDChannel1"
    ATO_D_CHANNEL2 = "AtoDChannel2"
    ATO_D_CHANNEL3 = "AtoDChannel3"
    ATO_D_CHANNEL4 = "AtoDChannel4"
    ATO_D_CHANNEL5 = "AtoDChannel5"
    ATO_D_CHANNEL6 = "AtoDChannel6"
    OIL_TEMPERATURE = "OilTemperature"
    OIL_HUMIDITY = "OilHumidity"
    X = "X"
    Y = "Y"
    Z = "Z"
    CUSTOM = "Custom"
    WIRELESS_EFFICIENCY = "WirelessEfficiency"
    PACKET_SUCCESS_RATE = "PacketSuccessRate"
    NODE_HUMIDITY = "NodeHumidity"
    BURST_SUCCESS_RATE = "BurstSuccessRate"

class AssetUpdateRequestRunningSpeedType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    INVALID = "Invalid"
    FIXED = "Fixed"
    RANGED = "Ranged"
    AUTO_TRACK = "AutoTrack"

class AttachmentModelV3Type(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    CORPORATION = "Corporation"
    ACCOUNT = "Account"
    GROUP = "Group"
    OTHER = "Other"
    INDICATOR = "Indicator"

class CurrentUserResponseApplicationRole(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    INVALID = "Invalid"
    SAAS_ADMIN = "SaasAdmin"
    ACCOUNT_ADMIN = "AccountAdmin"
    APPLICATION_USER = "ApplicationUser"
    TECHNICIAN = "Technician"
    USER = "User"
    SYSTEM_PROCESS = "SystemProcess"
    SENTRY = "Sentry"
    SALES = "Sales"
    CORPORATION_ADMIN = "CorporationAdmin"
    CORPORATION_USER = "CorporationUser"
    CORPORATION_NONE = "CorporationNone"

class DashboardCreateRequestTimeRange(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    EIGHT_HOURS = "EightHours"
    ONE_DAY = "OneDay"
    ONE_WEEK = "OneWeek"
    ONE_MONTH = "OneMonth"
    ONE_YEAR = "OneYear"

class DashboardUpdateRequestTimeRange(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    EIGHT_HOURS = "EightHours"
    ONE_DAY = "OneDay"
    ONE_WEEK = "OneWeek"
    ONE_MONTH = "OneMonth"
    ONE_YEAR = "OneYear"

class DescendantChildType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASSET = "Asset"
    MONITORING_POINT = "MonitoringPoint"
    INDICATOR_GROUP = "IndicatorGroup"
    GROUP = "Group"
    ANALYTIC_MODEL = "AnalyticModel"

class EventModelV3ContentType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    INVALID = "Invalid"
    OPERATIONAL_CONDITION = "OperationalCondition"
    FAULT = "Fault"
    ROOT_CAUSE = "RootCause"
    EVIDENCE = "Evidence"
    INSPECTION = "Inspection"
    PREVENTATIVE_MAINTENANCE = "PreventativeMaintenance"
    CORRECTIVE_MAINTENANCE = "CorrectiveMaintenance"
    OBSERVATION = "Observation"
    DOCUMENT = "Document"
    DESCRIPTION = "Description"
    SAMPLING_FREQUENCY_CHANGE = "SamplingFrequencyChange"
    PENDING_SAMPLING_FREQUENCY_CHANGE = "PendingSamplingFrequencyChange"
    AUTO_INVALID_BURST_DATA = "AutoInvalidBurstData"
    USER_INVALID_BURST_DATA = "UserInvalidBurstData"

class EventModelV3GroupType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    INVALID = "Invalid"
    GROUP = "Group"
    ASSET = "Asset"
    MONITORING_POINT = "MonitoringPoint"
    INDICATOR_GROUP = "IndicatorGroup"
    ANALYTIC_MODEL = "AnalyticModel"

class FileResponseType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    INVALID = "Invalid"
    PICTURE = "Picture"
    FOLDER = "Folder"

class HeatmapReportRequestAggregateLevel(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The level at which to aggregate the results
    """

    INDICATOR = "Indicator"
    MONITORING_POINT = "MonitoringPoint"
    ASSET = "Asset"

class HostOptions(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """choices for server host
    """

    #: host: https://sd.kcftech.com/.
    HTTPS_SD_KCFTECH_COM_ = "https://sd.kcftech.com/"
    #: host: http://sd.kcftech.com/.
    HTTP_SD_KCFTECH_COM_ = "http://sd.kcftech.com/"

class HubResponseHubTypeId(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "Unknown"
    VERSION1_SEVEN_PORT_ = "Version 1 (SevenPort)"

class HubResponsePowerTypeId(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNSPECIFIED = "Unspecified"
    DC24_V_ = "DC (24V)"
    BATTERY = "Battery"
    AC120_V_ = "AC (120V)"

class IndicatorFilterCreateRequestIndicatorTypesItem(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """If creating a new MetricTypeCode be sure to add a Validator attribute and update the following
    classes
    if necessary: DataValidator, DataValidatorFunctions, ValidatorAttributes files
    """

    TEMPERATURE = "Temperature"
    PRESSURE = "Pressure"
    FLOW = "Flow"
    HUMIDITY = "Humidity"
    POWER = "Power"
    DIFFERENTIAL_PRESSURE = "DifferentialPressure"
    MULTI_SENSOR_DIFFERENTIAL_PRESSURE = "MultiSensorDifferentialPressure"
    VOLTAGE = "Voltage"
    GENERALIZED_ATO_D = "GeneralizedAtoD"
    VIBRATION_BAND_RMS = "VibrationBandRms"
    VIBRATION_BAND_MAX = "VibrationBandMax"
    VIBRATION_OVERALL_PEAK = "VibrationOverallPeak"
    VIBRATION_OVERALL_RMS = "VibrationOverallRms"
    VIBRATION_OVERALL_SKEWNESS = "VibrationOverallSkewness"
    VIBRATION_OVERALL_KURTOSIS = "VibrationOverallKurtosis"
    VIBRATION_OVERALL_CREST_FACTOR = "VibrationOverallCrestFactor"
    DAMAGE_ACCUMULATION = "DamageAccumulation"
    VIBRATION_BAND_RMS_ACCEL = "VibrationBandRmsAccel"
    VIBRATION_BAND_MAX_ACCEL = "VibrationBandMaxAccel"
    VIBRATION_OVERALL_PEAK_ACCEL = "VibrationOverallPeakAccel"
    VIBRATION_OVERALL_RMS_ACCEL = "VibrationOverallRmsAccel"
    VIBRATION_OVERALL_SKEWNESS_ACCEL = "VibrationOverallSkewnessAccel"
    VIBRATION_OVERALL_KURTOSIS_ACCEL = "VibrationOverallKurtosisAccel"
    VIBRATION_OVERALL_CREST_FACTOR_ACCEL = "VibrationOverallCrestFactorAccel"
    DAMAGE_ACCUMULATION_ACCEL = "DamageAccumulationAccel"
    GROUP = "Group"
    VIBRATION_OVERALL = "VibrationOverall"
    VIBRATION_OVERALL_ACCEL = "VibrationOverallAccel"
    GENERAL_TIME_SERIES = "GeneralTimeSeries"
    MATH = "Math"
    ON_STATISTICS = "OnStatistics"
    OFF_STATISTICS = "OffStatistics"
    ALARM_STATISTICS = "AlarmStatistics"
    WARNING_STATISTICS = "WarningStatistics"
    POSITIVE_PEAK_PRESSURE = "PositivePeakPressure"
    NEGATIVE_PEAK_PRESSURE = "NegativePeakPressure"
    RMS_PRESSURE = "RmsPressure"
    BAND_PRESSURE = "BandPressure"
    ON_PERCENT_STATISTICS = "OnPercentStatistics"
    OFF_PERCENT_STATISTICS = "OffPercentStatistics"
    ALARM_PERCENT_STATISTICS = "AlarmPercentStatistics"
    WARNING_PERCENT_STATISTICS = "WarningPercentStatistics"
    SIGNAL_STRENGTH = "SignalStrength"
    RUNNING_SPEED = "RunningSpeed"
    DAMAGE_ACCUMULATION_PRESSURE = "DamageAccumulationPressure"
    OIL_HUMIDITY = "OilHumidity"
    OIL_TEMPERATURE = "OilTemperature"
    DAMAGE_ACCUMULATION_ACCEL_RAW = "DamageAccumulationAccelRaw"
    THERMAL_REGION_OF_INTEREST = "ThermalRegionOfInterest"
    SMART_METRIC = "SmartMetric"

class IndicatorFilterResponseIndicatorTypesItem(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """If creating a new MetricTypeCode be sure to add a Validator attribute and update the following
    classes
    if necessary: DataValidator, DataValidatorFunctions, ValidatorAttributes files
    """

    TEMPERATURE = "Temperature"
    PRESSURE = "Pressure"
    FLOW = "Flow"
    HUMIDITY = "Humidity"
    POWER = "Power"
    DIFFERENTIAL_PRESSURE = "DifferentialPressure"
    MULTI_SENSOR_DIFFERENTIAL_PRESSURE = "MultiSensorDifferentialPressure"
    VOLTAGE = "Voltage"
    GENERALIZED_ATO_D = "GeneralizedAtoD"
    VIBRATION_BAND_RMS = "VibrationBandRms"
    VIBRATION_BAND_MAX = "VibrationBandMax"
    VIBRATION_OVERALL_PEAK = "VibrationOverallPeak"
    VIBRATION_OVERALL_RMS = "VibrationOverallRms"
    VIBRATION_OVERALL_SKEWNESS = "VibrationOverallSkewness"
    VIBRATION_OVERALL_KURTOSIS = "VibrationOverallKurtosis"
    VIBRATION_OVERALL_CREST_FACTOR = "VibrationOverallCrestFactor"
    DAMAGE_ACCUMULATION = "DamageAccumulation"
    VIBRATION_BAND_RMS_ACCEL = "VibrationBandRmsAccel"
    VIBRATION_BAND_MAX_ACCEL = "VibrationBandMaxAccel"
    VIBRATION_OVERALL_PEAK_ACCEL = "VibrationOverallPeakAccel"
    VIBRATION_OVERALL_RMS_ACCEL = "VibrationOverallRmsAccel"
    VIBRATION_OVERALL_SKEWNESS_ACCEL = "VibrationOverallSkewnessAccel"
    VIBRATION_OVERALL_KURTOSIS_ACCEL = "VibrationOverallKurtosisAccel"
    VIBRATION_OVERALL_CREST_FACTOR_ACCEL = "VibrationOverallCrestFactorAccel"
    DAMAGE_ACCUMULATION_ACCEL = "DamageAccumulationAccel"
    GROUP = "Group"
    VIBRATION_OVERALL = "VibrationOverall"
    VIBRATION_OVERALL_ACCEL = "VibrationOverallAccel"
    GENERAL_TIME_SERIES = "GeneralTimeSeries"
    MATH = "Math"
    ON_STATISTICS = "OnStatistics"
    OFF_STATISTICS = "OffStatistics"
    ALARM_STATISTICS = "AlarmStatistics"
    WARNING_STATISTICS = "WarningStatistics"
    POSITIVE_PEAK_PRESSURE = "PositivePeakPressure"
    NEGATIVE_PEAK_PRESSURE = "NegativePeakPressure"
    RMS_PRESSURE = "RmsPressure"
    BAND_PRESSURE = "BandPressure"
    ON_PERCENT_STATISTICS = "OnPercentStatistics"
    OFF_PERCENT_STATISTICS = "OffPercentStatistics"
    ALARM_PERCENT_STATISTICS = "AlarmPercentStatistics"
    WARNING_PERCENT_STATISTICS = "WarningPercentStatistics"
    SIGNAL_STRENGTH = "SignalStrength"
    RUNNING_SPEED = "RunningSpeed"
    DAMAGE_ACCUMULATION_PRESSURE = "DamageAccumulationPressure"
    OIL_HUMIDITY = "OilHumidity"
    OIL_TEMPERATURE = "OilTemperature"
    DAMAGE_ACCUMULATION_ACCEL_RAW = "DamageAccumulationAccelRaw"
    THERMAL_REGION_OF_INTEREST = "ThermalRegionOfInterest"
    SMART_METRIC = "SmartMetric"

class IndicatorFilterUpdateRequestIndicatorTypesItem(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """If creating a new MetricTypeCode be sure to add a Validator attribute and update the following
    classes
    if necessary: DataValidator, DataValidatorFunctions, ValidatorAttributes files
    """

    TEMPERATURE = "Temperature"
    PRESSURE = "Pressure"
    FLOW = "Flow"
    HUMIDITY = "Humidity"
    POWER = "Power"
    DIFFERENTIAL_PRESSURE = "DifferentialPressure"
    MULTI_SENSOR_DIFFERENTIAL_PRESSURE = "MultiSensorDifferentialPressure"
    VOLTAGE = "Voltage"
    GENERALIZED_ATO_D = "GeneralizedAtoD"
    VIBRATION_BAND_RMS = "VibrationBandRms"
    VIBRATION_BAND_MAX = "VibrationBandMax"
    VIBRATION_OVERALL_PEAK = "VibrationOverallPeak"
    VIBRATION_OVERALL_RMS = "VibrationOverallRms"
    VIBRATION_OVERALL_SKEWNESS = "VibrationOverallSkewness"
    VIBRATION_OVERALL_KURTOSIS = "VibrationOverallKurtosis"
    VIBRATION_OVERALL_CREST_FACTOR = "VibrationOverallCrestFactor"
    DAMAGE_ACCUMULATION = "DamageAccumulation"
    VIBRATION_BAND_RMS_ACCEL = "VibrationBandRmsAccel"
    VIBRATION_BAND_MAX_ACCEL = "VibrationBandMaxAccel"
    VIBRATION_OVERALL_PEAK_ACCEL = "VibrationOverallPeakAccel"
    VIBRATION_OVERALL_RMS_ACCEL = "VibrationOverallRmsAccel"
    VIBRATION_OVERALL_SKEWNESS_ACCEL = "VibrationOverallSkewnessAccel"
    VIBRATION_OVERALL_KURTOSIS_ACCEL = "VibrationOverallKurtosisAccel"
    VIBRATION_OVERALL_CREST_FACTOR_ACCEL = "VibrationOverallCrestFactorAccel"
    DAMAGE_ACCUMULATION_ACCEL = "DamageAccumulationAccel"
    GROUP = "Group"
    VIBRATION_OVERALL = "VibrationOverall"
    VIBRATION_OVERALL_ACCEL = "VibrationOverallAccel"
    GENERAL_TIME_SERIES = "GeneralTimeSeries"
    MATH = "Math"
    ON_STATISTICS = "OnStatistics"
    OFF_STATISTICS = "OffStatistics"
    ALARM_STATISTICS = "AlarmStatistics"
    WARNING_STATISTICS = "WarningStatistics"
    POSITIVE_PEAK_PRESSURE = "PositivePeakPressure"
    NEGATIVE_PEAK_PRESSURE = "NegativePeakPressure"
    RMS_PRESSURE = "RmsPressure"
    BAND_PRESSURE = "BandPressure"
    ON_PERCENT_STATISTICS = "OnPercentStatistics"
    OFF_PERCENT_STATISTICS = "OffPercentStatistics"
    ALARM_PERCENT_STATISTICS = "AlarmPercentStatistics"
    WARNING_PERCENT_STATISTICS = "WarningPercentStatistics"
    SIGNAL_STRENGTH = "SignalStrength"
    RUNNING_SPEED = "RunningSpeed"
    DAMAGE_ACCUMULATION_PRESSURE = "DamageAccumulationPressure"
    OIL_HUMIDITY = "OilHumidity"
    OIL_TEMPERATURE = "OilTemperature"
    DAMAGE_ACCUMULATION_ACCEL_RAW = "DamageAccumulationAccelRaw"
    THERMAL_REGION_OF_INTEREST = "ThermalRegionOfInterest"
    SMART_METRIC = "SmartMetric"

class IndicatorResponseIndicatorType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """If creating a new MetricTypeCode be sure to add a Validator attribute and update the following
    classes
    if necessary: DataValidator, DataValidatorFunctions, ValidatorAttributes files
    """

    TEMPERATURE = "Temperature"
    PRESSURE = "Pressure"
    FLOW = "Flow"
    HUMIDITY = "Humidity"
    POWER = "Power"
    DIFFERENTIAL_PRESSURE = "DifferentialPressure"
    MULTI_SENSOR_DIFFERENTIAL_PRESSURE = "MultiSensorDifferentialPressure"
    VOLTAGE = "Voltage"
    GENERALIZED_ATO_D = "GeneralizedAtoD"
    VIBRATION_BAND_RMS = "VibrationBandRms"
    VIBRATION_BAND_MAX = "VibrationBandMax"
    VIBRATION_OVERALL_PEAK = "VibrationOverallPeak"
    VIBRATION_OVERALL_RMS = "VibrationOverallRms"
    VIBRATION_OVERALL_SKEWNESS = "VibrationOverallSkewness"
    VIBRATION_OVERALL_KURTOSIS = "VibrationOverallKurtosis"
    VIBRATION_OVERALL_CREST_FACTOR = "VibrationOverallCrestFactor"
    DAMAGE_ACCUMULATION = "DamageAccumulation"
    VIBRATION_BAND_RMS_ACCEL = "VibrationBandRmsAccel"
    VIBRATION_BAND_MAX_ACCEL = "VibrationBandMaxAccel"
    VIBRATION_OVERALL_PEAK_ACCEL = "VibrationOverallPeakAccel"
    VIBRATION_OVERALL_RMS_ACCEL = "VibrationOverallRmsAccel"
    VIBRATION_OVERALL_SKEWNESS_ACCEL = "VibrationOverallSkewnessAccel"
    VIBRATION_OVERALL_KURTOSIS_ACCEL = "VibrationOverallKurtosisAccel"
    VIBRATION_OVERALL_CREST_FACTOR_ACCEL = "VibrationOverallCrestFactorAccel"
    DAMAGE_ACCUMULATION_ACCEL = "DamageAccumulationAccel"
    GROUP = "Group"
    VIBRATION_OVERALL = "VibrationOverall"
    VIBRATION_OVERALL_ACCEL = "VibrationOverallAccel"
    GENERAL_TIME_SERIES = "GeneralTimeSeries"
    MATH = "Math"
    ON_STATISTICS = "OnStatistics"
    OFF_STATISTICS = "OffStatistics"
    ALARM_STATISTICS = "AlarmStatistics"
    WARNING_STATISTICS = "WarningStatistics"
    POSITIVE_PEAK_PRESSURE = "PositivePeakPressure"
    NEGATIVE_PEAK_PRESSURE = "NegativePeakPressure"
    RMS_PRESSURE = "RmsPressure"
    BAND_PRESSURE = "BandPressure"
    ON_PERCENT_STATISTICS = "OnPercentStatistics"
    OFF_PERCENT_STATISTICS = "OffPercentStatistics"
    ALARM_PERCENT_STATISTICS = "AlarmPercentStatistics"
    WARNING_PERCENT_STATISTICS = "WarningPercentStatistics"
    SIGNAL_STRENGTH = "SignalStrength"
    RUNNING_SPEED = "RunningSpeed"
    DAMAGE_ACCUMULATION_PRESSURE = "DamageAccumulationPressure"
    OIL_HUMIDITY = "OilHumidity"
    OIL_TEMPERATURE = "OilTemperature"
    DAMAGE_ACCUMULATION_ACCEL_RAW = "DamageAccumulationAccelRaw"
    THERMAL_REGION_OF_INTEREST = "ThermalRegionOfInterest"
    SMART_METRIC = "SmartMetric"

class JobModelV3Status(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    QUEUED = "Queued"
    RUNNING = "Running"
    FINISHED = "Finished"
    FINISHED_WITH_ERRORS = "FinishedWithErrors"
    ERRORED = "Errored"
    DEFERRED = "Deferred"

class LocationSettingsChildExternalNotificationType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    DISABLED = "Disabled"
    AUTOMATIC = "Automatic"
    MANUAL = "Manual"

class LongBurstRequestChildLongBurstRequestStatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "Unknown"
    FAILED = "Failed"
    CANCELED = "Canceled"
    TIMED_OUT = "TimedOut"
    INITIATED = "Initiated"
    ENQUEUED = "Enqueued"
    CAPTURING = "Capturing"
    PROCESSING = "Processing"
    COMPLETED = "Completed"

class MarkerResponseMarkerType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    FIXED = "Fixed"
    MULTIPLIER = "Multiplier"

class MarkerUpdateRequestMarkerType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    FIXED = "Fixed"
    MULTIPLIER = "Multiplier"

class MonitoringPointResponseMonitoringPointType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    INVALID = "Invalid"
    CUSTOM = "Custom"
    VIBRATION = "Vibration"
    PRESSURE = "Pressure"
    OIL_QUALITY = "OilQuality"
    GENERAL_INPUT = "GeneralInput"
    INDICATOR_BASED = "IndicatorBased"
    GENERAL_ATO_D = "GeneralAtoD"

class NodeChildNodeTypeCode(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    INVALID = "Invalid"
    KCF_FLOW = "KcfFlow"
    KCF_PRESSURE_VOLTAGE = "KcfPressureVoltage"
    KCF_PRESSURE_CURRENT = "KcfPressureCurrent"
    KCF_POWER = "KcfPower"
    KCF_VIBRATION = "KcfVibration"
    KCF_VIBRATION_V1 = "KcfVibrationV1"
    KCF_VOLTAGE = "KcfVoltage"
    KCF_CURRENT = "KcfCurrent"
    KCF_ATO_D_VOLTAGE = "KcfAtoDVoltage"
    KCF_ATO_D_CURRENT = "KcfAtoDCurrent"
    KCF_OIL_QUALITY = "KcfOilQuality"
    GENERIC = "Generic"
    KCF_AGNOSTIC = "KcfAgnostic"
    KCF_HUMIDITY = "KcfHumidity"
    KCF_EXTENDED_TEMPERATURE_VIBRATION = "KcfExtendedTemperatureVibration"
    KCF_HUB_VIBRATION_V1 = "KcfHubVibrationV1"

class NodeResponseNodeTypeCode(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    INVALID = "Invalid"
    KCF_FLOW = "KcfFlow"
    KCF_PRESSURE_VOLTAGE = "KcfPressureVoltage"
    KCF_PRESSURE_CURRENT = "KcfPressureCurrent"
    KCF_POWER = "KcfPower"
    KCF_VIBRATION = "KcfVibration"
    KCF_VIBRATION_V1 = "KcfVibrationV1"
    KCF_VOLTAGE = "KcfVoltage"
    KCF_CURRENT = "KcfCurrent"
    KCF_ATO_D_VOLTAGE = "KcfAtoDVoltage"
    KCF_ATO_D_CURRENT = "KcfAtoDCurrent"
    KCF_OIL_QUALITY = "KcfOilQuality"
    GENERIC = "Generic"
    KCF_AGNOSTIC = "KcfAgnostic"
    KCF_HUMIDITY = "KcfHumidity"
    KCF_EXTENDED_TEMPERATURE_VIBRATION = "KcfExtendedTemperatureVibration"
    KCF_HUB_VIBRATION_V1 = "KcfHubVibrationV1"

class PostContentSchemaType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Type of file
    """

    INVALID = "Invalid"
    PICTURE = "Picture"
    FOLDER = "Folder"

class PowerBiReportChildError(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "None"
    REPORT_NOT_FOUND = "ReportNotFound"
    OTHER = "Other"

class PropertyChildPropertyValueType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    BOOLEAN = "Boolean"
    DATE_TIME = "DateTime"
    DOUBLE = "Double"
    FLOAT = "Float"
    INTEGER = "Integer"
    STRING = "String"

class ReceiverResponseReceiverType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    BASE_STATION = "BaseStation"
    REPEATER = "Repeater"

class RepeaterModelV3Type(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "Unknown"
    BASE_STATION = "BaseStation"
    REPEATER = "Repeater"

class TagChildTagCategory(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    GENERAL = "General"
    COMPONENTS = "Components"
    MAKE = "Make"
    MODEL = "Model"
    LOCATION = "Location"
    ORIENTATION = "Orientation"
    ASSET = "Asset"
    ASSET_CODE = "AssetCode"
    PICTURE = "Picture"

class TagCreateRequestType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    GENERAL = "General"
    COMPONENTS = "Components"
    MAKE = "Make"
    MODEL = "Model"
    LOCATION = "Location"
    ORIENTATION = "Orientation"
    ASSET = "Asset"
    ASSET_CODE = "AssetCode"
    PICTURE = "Picture"

class TagResponseType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    GENERAL = "General"
    COMPONENTS = "Components"
    MAKE = "Make"
    MODEL = "Model"
    LOCATION = "Location"
    ORIENTATION = "Orientation"
    ASSET = "Asset"
    ASSET_CODE = "AssetCode"
    PICTURE = "Picture"

class TreeItemResponseTreeItemType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASSET = "Asset"
    MONITORING_POINT = "MonitoringPoint"
    INDICATOR_GROUP = "IndicatorGroup"
    GROUP = "Group"
    ANALYTIC_MODEL = "AnalyticModel"

class UserCorporationChildCorporationUserRole(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    INVALID = "Invalid"
    SAAS_ADMIN = "SaasAdmin"
    ACCOUNT_ADMIN = "AccountAdmin"
    APPLICATION_USER = "ApplicationUser"
    TECHNICIAN = "Technician"
    USER = "User"
    SYSTEM_PROCESS = "SystemProcess"
    SENTRY = "Sentry"
    SALES = "Sales"
    CORPORATION_ADMIN = "CorporationAdmin"
    CORPORATION_USER = "CorporationUser"
    CORPORATION_NONE = "CorporationNone"

class UserLocationChildLocationUserRole(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    INVALID = "Invalid"
    SAAS_ADMIN = "SaasAdmin"
    ACCOUNT_ADMIN = "AccountAdmin"
    APPLICATION_USER = "ApplicationUser"
    TECHNICIAN = "Technician"
    USER = "User"
    SYSTEM_PROCESS = "SystemProcess"
    SENTRY = "Sentry"
    SALES = "Sales"
    CORPORATION_ADMIN = "CorporationAdmin"
    CORPORATION_USER = "CorporationUser"
    CORPORATION_NONE = "CorporationNone"

class WidgetChildWidgetCode(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASSET_MONITORING = "AssetMonitoring"
    ALERTS = "Alerts"
    TIME_WARNING_ALARM = "TimeWarningAlarm"
    PERFORMANCE_OVERALL = "PerformanceOverall"
    PERFORMANCE_COMPARISON = "PerformanceComparison"
    PERFORMANCE_KPI = "PerformanceKpi"
    PERFORMANCE_SCORE = "PerformanceScore"
    PERFORMANCE_TREND = "PerformanceTrend"

class WidgetTypeChildWidgetTypeName(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    VALUE = "Value"
    TABLE = "Table"
    KPI = "Kpi"
    SERIES = "Series"
