# yaml merge-expand .travis.ymls _expandyml && cat _expandyml
# 
env:
    global:
        - secure: "P+9EGVR9Z0PSdkuo/xYtGxJRjfjhHLqhCz04bVkbOo/Tpcaqa2sHBYAlWE8jm+m0PODnQ2Mao/xaNqkbmt+bTwmBQ4wPE+OW4+Po8qdZoOz7mv53KN8AUeSUOmifiZsaJSDAQwrnP8KbCRor1zB+0rn6eok3gc2ZWnFs0+t1jfATjlnZfpqfQxxWWSdVO6j24d1+CUiZaCU16q4OiwSePmipKvBySyLEwxTgNuPyESMyGG6UwbBpzSWH2/4iMNUiaEcoR1LaHglhHOa98ZMnwpbU5O3Jj7WSI4UlJqLsK0GnZpNEsXC70mvu4Sq8vqFpvY0zln+8yl9qbdeTU2eLd0PRzpcLhhBdhIBwG2dX8BkP2U6I0wWW8xoME9krtgFmV5f6y3WMsv/WvqEUbP0LD31KLil49IMqh2XcMWjLwgQF9kJ0ANcTN4rIoXvPMWKjfWABb2B7Tf+UxPaN1mAxhr2cv2x2egwAzrQsr9qT0lPEyOz3j4AnN8RDweEcPVT0GpZRjVd6fJ4J/ey89ntF1wYsTGG4kl9861iA+eZyvZM5cIBo69xEJoq9YW7sW5vW3xbxVFViDRM8chM1UXeIvBwl3a3xUYIjJyIwNBKbXZpjeEQnpalvmsZZfQKIAqgkSN1+ylvycDizQm1yAjo9c12S5sj9pS+PZQBVJkBEzC8="
        - secure: "Art3JeQQ/T5gKT6m4S8xylwweLsXYX3qaVG5ZumsQkWzWrvJwXCeq4o+koa19Z1t9Gszo+WTYifVn95utX9+AUhgcbwUbwvpCACgiBTVlMDdVa9km8egPZ1TvFuOgeIR6xj/hz+p+RtCTlZ1sMgeXV9yTgnlLnFiKecY36ZN2hvWD+cz7idocFfhq+jCfQiaxReRrxO7UwCYxbldduZ1b90DfST+JnJTOW8cf27ChlfguNi6l/k2/guivABH6euBuDojmoKxCzQOJxjrhHw07yaRDLxi0ZTe0LAjOuehLvMmoP+iVKpg2OepMfm+pIPzR4CJeChF0xD6O93uc7zgltQx8QBmwg4Z30y21xzIhtYf6Yw1PTSsWMGTCk9nI7MkdB8Ao4Y2t4MPkN9IlNvQ6fsa5d8fCMf8j2fYPJYv2AgqXE+yyMHhhOUXmQhYW+lDAaNn6NQ7Xnk064UR+Vqdrmg1pUac2tx+wSDvNk96TU1Gdvia8gbKP5UpTFNR90Txxxmdt4pES/jB82zpR0OIC+kpP6p7BiqY/7P/6HJYYQE6TkAubFXOUFyUv5H21JIYGgRTU+i2bSOZYKFrNmjhV143gn/0J1zBnNpOzaPL2Es48w2aY6EJ4pFx3QOpWoUA4e03UcZzbVUv7w7c/isw7aCypGRVi+WdgxKUkKsLFKo="
        - secure: "SSYizS83MBaq+apUQ8yylitSU6qu5dFrDk96wMeE7gEm6tjhh+JlyFnCqMNNyEpcgvK3s0NlGyt4yP0nMpF0ix3fGEXhLO2A82UDLYbTPFI+c2YHn8DAymg6dEzdIJ44LGzfkU/DFbIqQkvXmxvNP/3l2yXcGehRsHtuN4MEx4FBqT71c7rFKcBroEJl6t8FkV21VvhKUwJRJX5NsxI5+DGEHgvA41ZkTr+rxt+mx/8Y7cql27s0+ef7nKgvb13clFJy1WTa3t+eHuwdfS+6VlpHKk+v8eMddBFeOtAV9qSojGOiWutg3grLabvmJGWOUghUs0/gEYXpV2/MYR2aLdQC9DBB8bcxhsgebuqq8tMBISKzlqtsEAuA67CXMeMTwwhWQfIddim3192HFP0hfaNlqOYVnuYqo5HW8cyX4ek48aujaa2NTbPRqZ+xcVw0C5L8bs13NaaJeyGmVrIHfdvtKgj/PDhyosaH1fopaFjclJyryUV03AwznbcFFdD2bRZnKIq5xDcsVRN2tquAKHGd3n1NXf/vGIQP8KoxZgkF5Fa+FQaB4dlncba/l3x28N28CFSV4eG+0EYTxjRSW4ETJ66GqqgP5eH/NjdvDz7WKjHj7lXem4kewQ4Jq1Inrb8MsEpFhjQZCBHUgvGsLZP9PsZICukIzWsc4kVWXs4="
          
language: python
sudo: false

cache:
  apt: true
  directories:
  - $HOME/.cache/pip
  - $HOME/download
  - $HOME/.pip-cache
  - $HOME/gpg_install_prefix

python:
  - "3.8"
  - "3.7"
  - "2.7"
  - "3.4"
  - "3.5"
  - "3.6"
  #- "nightly"  # remove nightly for now

before_install:
  - pip install pip -U
  - pip install -r requirements.txt -U

install:
  - travis_retry pip install -e .


# Broken on pytest-cov-2.10.0
# Broken on pytest==5.4.3
# Broken on pytest==5.3.5
# Broken on pytest==5.2.4
#pip install pytest-cov==2.8.1
#pip install pytest-cov==2.8.1
#pip install pytest-cov==2.10.0
    
script: 
  - pip uninstall pytest-cov -y
  - pip install pytest-cov==2.8.1
  - travis_wait pytest --cov=xdoctest

after_success: 
    - codecov 
    - | 
        __heredoc__='''
        # HOW TO SETUP A GPG KEY
        #
        # References:
        # .. [1] https://github.com/travis-ci/travis.rb
        # .. [2] https://docs.travis-ci.com/user/encrypting-files/
        #
        # Note:
        # You can set secret variables here in travis here:
        #  https://travis-ci.org/Erotemic/xdoctest/settings

        cd $HOME/code/xdoctest

        # After you have setup your GPG key (plenty of resources on google about how to do this)
        IDENTIFIER="travis-ci-Erotemic"
        KEYID=$(gpg --list-keys --keyid-format LONG "$IDENTIFIER" | head -n 2 | tail -n 1 | awk '{print $1}' | tail -c 9)
        echo "KEYID = $KEYID"

        # Load or generate secrets
        source $(secret_loader.sh)
        echo $TWINE_USERNAME
        echo $TWINE_PASSWORD
        echo $CI_GITHUB_SECRET
        
        # encrypt relevant travis variables
        # The following commands will output lines that will need to be
        # manually added to this file. You could run with --add, but it messes
        travis encrypt TWINE_USERNAME=$TWINE_USERNAME 
        travis encrypt TWINE_PASSWORD=$TWINE_PASSWORD  
        travis encrypt CI_GITHUB_SECRET=$CI_GITHUB_SECRET
        
        # Export plaintext gpg public keys, private keys, and trust info
        mkdir -p dev
        gpg --armor --export-secret-keys $KEYID > dev/travis_secret_gpg_key.pgp
        gpg --armor --export $KEYID > dev/travis_public_gpg_key.pgp
        gpg --export-ownertrust > dev/gpg_owner_trust

        # Manually encrypt the secret files (TODO: need to vet this procedure)
        echo $TRAVIS_SECRET
        openssl aes-256-cbc -k $TRAVIS_SECRET -in dev/travis_public_gpg_key.pgp -e > dev/travis_public_gpg_key.pgp.enc
        openssl aes-256-cbc -k $TRAVIS_SECRET -in dev/travis_secret_gpg_key.pgp -e > dev/travis_secret_gpg_key.pgp.enc
        openssl aes-256-cbc -k $TRAVIS_SECRET -in dev/gpg_owner_trust -e > dev/gpg_owner_trust.enc


        TSP=$TRAVIS_SECRET openssl enc -aes-256-cbc -md MD5 -pass env:TSP -e -a -in dev/travis_public_gpg_key.pgp > dev/travis_public_gpg_key.pgp.enc
        TSP=$TRAVIS_SECRET openssl enc -aes-256-cbc -md MD5 -pass env:TSP -e -a -in dev/travis_secret_gpg_key.pgp > dev/travis_secret_gpg_key.pgp.enc
        TSP=$TRAVIS_SECRET openssl enc -aes-256-cbc -md MD5 -pass env:TSP -e -a -in dev/gpg_owner_trust > dev/gpg_owner_trust.enc
        echo $KEYID > dev/public_gpg_key

        cat dev/travis_public_gpg_key.pgp.enc
        cat dev/travis_secret_gpg_key.pgp.enc
        cat dev/gpg_owner_trust.enc
        cat dev/public_gpg_key

        TSP=$TRAVIS_SECRET openssl enc -aes-256-cbc -md MD5 -pass env:TSP -d -a -in dev/travis_public_gpg_key.pgp.enc
        TSP=$TRAVIS_SECRET openssl enc -aes-256-cbc -md MD5 -pass env:TSP -d -a -in dev/travis_secret_gpg_key.pgp.enc
        TSP=$TRAVIS_SECRET openssl enc -aes-256-cbc -md MD5 -pass env:TSP -d -a -in dev/gpg_owner_trust.enc

        # Export and encrpyt trust
        #GPG_OWNERTRUST=$(gpg --export-ownertrust | base64)
        #echo $GPG_OWNERTRUST
        #echo "$GPG_OWNERTRUST" | base64 --decode
        #travis encrypt GPG_OWNERTRUST="$GPG_OWNERTRUST"

        # Note: cant do this. travis gives a data too large error
        #GPG_SECRET_KEYS=$(gpg -a --export-secret-keys $IDENTIFIER | base64)
        
        # Look at what we did, clean up, and add it to git
        ls dev/*.enc
        rm dev/gpg_owner_trust dev/*.pgp
        git status
        git add dev/*.enc
        git add dev/public_gpg_key
        #travis encrypt GPG_SECRET_KEYS="$GPG_SECRET_KEYS"
        #

        AUTO-TAG NOTES:
            To auto-tag a github hosted project we need to generate a personal
            access token with write access.

            First go to: 
            https://github.com/settings/tokens/new

            And create a token with "write:packages" checked. Name the token something like
            github-push-token
            copy that token and store it somewhere secure. 

            PERSONAL_GITHUB_PUSH_TOKEN=<token-name>:<secret-value>

            **If you did not add this encrypted variable as a secret**,
            then also go to your github project settings page and add a
            new secret variable named PERSONAL_GITHUB_PUSH_TOKEN with the
            secret value.

            <token-name>:<secret-value>

            for example: github-push-token:ffjdksajklfdsjak

            https://github.com/Erotemic/xdoctest/settings/secrets
            
            # Also here
            https://travis-ci.org/github/Erotemic/xdoctest/settings

            # Test that this works in a docker image
            URL_HOST=$(git remote get-url origin | sed -e 's|https\?://.*@||g' | sed -e 's|https\?://||g')
            echo "URL_HOST = $URL_HOST"
            git config user.email "travis-ci@github.com"
            git config user.name "Travis-CI"
            git tag "test-tag-v5"
            git push --tags "https://${PERSONAL_GITHUB_PUSH_TOKEN}@${URL_HOST}"
        #
        '''  # <hack vim "regex" parser> '
    - gpg --version
    - gpg2 --version
    - export GPG_EXECUTABLE=gpg2
    - openssl version
    - |
        # Install a more recent version of GPG
        # https://gnupg.org/download/
        export GPG_INSTALL_PREFIX=$HOME/gpg_install_prefix
        export LD_LIBRARY_PATH=$GPG_INSTALL_PREFIX/lib:$LD_LIBRARY_PATH
        export PATH=$GPG_INSTALL_PREFIX/bin:$PATH
        export CPATH=$GPG_INSTALL_PREFIX/include:$CPATH
        export GPG_EXECUTABLE=$GPG_INSTALL_PREFIX/bin/gpg
        ls $GPG_INSTALL_PREFIX
        ls $GPG_INSTALL_PREFIX/bin || echo "no bin"
        if [[ ! -f "$GPG_INSTALL_PREFIX/bin/gpg" ]]; then
            # try and have travis cache this
            mkdir -p $GPG_INSTALL_PREFIX
            echo $GPG_INSTALL_PREFIX
            OLD=$(pwd)
            cd $GPG_INSTALL_PREFIX
            pip install ubelt

            ERROR_FPATH=$(python -c "import ubelt as ub; print(ub.grabdata(
                'https://gnupg.org/ftp/gcrypt/libgpg-error/libgpg-error-1.36.tar.bz2',
                hash_prefix='6e5f853f77dc04f0091d94b224cab8e669042450f271b78d0ea0219',
                dpath=ub.ensuredir('$HOME/.pip-cache'), verbose=0))")
            GCRYPT_FPATH=$(python -c "import ubelt as ub; print(ub.grabdata(
                'https://gnupg.org/ftp/gcrypt/libgcrypt/libgcrypt-1.8.5.tar.bz2',
                hash_prefix='b55e16e838d1b1208e7673366971ae7c0f9c1c79e042f41c03d1',
                dpath=ub.ensuredir('$HOME/.pip-cache'), verbose=0))")
            KSBA_CRYPT_FPATH=$(python -c "import ubelt as ub; print(ub.grabdata(
                'https://gnupg.org/ftp/gcrypt/libksba/libksba-1.3.5.tar.bz2',
                hash_prefix='60179bfd109b7b4fd8d2b30a3216540f03f5a13620d9a5b63f1f95',
                dpath=ub.ensuredir('$HOME/.pip-cache'), verbose=0))")
            ASSUAN_FPATH=$(python -c "import ubelt as ub; print(ub.grabdata(
                'https://gnupg.org/ftp/gcrypt/libassuan/libassuan-2.5.3.tar.bz2',
                hash_prefix='e7ccb651ea75b07b2e687d48d86d0ab83cba8e2af7f30da2aec',
                dpath=ub.ensuredir('$HOME/.pip-cache'), verbose=0))")
            NTBLTLS_FPATH=$(python -c "import ubelt as ub; print(ub.grabdata(
                'https://gnupg.org/ftp/gcrypt/ntbtls/ntbtls-0.1.2.tar.bz2',
                hash_prefix='54468208359dc88155b14cba37773984d7d6f0f37c7a4ce13868d',
                dpath=ub.ensuredir('$HOME/.pip-cache'), verbose=0))")
            NPTH_FPATH=$(python -c "import ubelt as ub; print(ub.grabdata(
                'https://gnupg.org/ftp/gcrypt/npth/npth-1.6.tar.bz2',
                hash_prefix='2ed1012e14a9d10665420b9a23628be7e206fd9348111ec751349b',
                dpath=ub.ensuredir('$HOME/.pip-cache'), verbose=0))")
            GPG_FPATH=$(python -c "import ubelt as ub; print(ub.grabdata(
                'https://gnupg.org/ftp/gcrypt/gnupg/gnupg-2.2.17.tar.bz2',
                hash_prefix='a3cd094addac62b4b4ec1683005a2bec761ea2aacf6daf904316b',
                dpath=ub.ensuredir('$HOME/.pip-cache'), verbose=0))")

            tar xjf $ERROR_FPATH
            tar xjf $GCRYPT_FPATH
            tar xjf $KSBA_CRYPT_FPATH
            tar xjf $ASSUAN_FPATH
            tar xjf $NTBLTLS_FPATH
            tar xjf $NPTH_FPATH
            tar xjf $GPG_FPATH
            (cd libgpg-error-1.36 && ./configure --prefix=$GPG_INSTALL_PREFIX && make install)
            (cd libgcrypt-1.8.5 && ./configure --prefix=$GPG_INSTALL_PREFIX && make install)
            (cd libksba-1.3.5 && ./configure --prefix=$GPG_INSTALL_PREFIX && make install)
            (cd libassuan-2.5.3 && ./configure --prefix=$GPG_INSTALL_PREFIX && make install)
            (cd ntbtls-0.1.2 && ./configure --prefix=$GPG_INSTALL_PREFIX && make install)
            (cd npth-1.6 && ./configure --prefix=$GPG_INSTALL_PREFIX && make install)
            (cd gnupg-2.2.17 && ./configure --prefix=$GPG_INSTALL_PREFIX && make install)
            echo "GPG_EXECUTABLE = '$GPG_EXECUTABLE'"
            cd $OLD
        fi
    # Decrypt and import GPG Keys / trust
    - $GPG_EXECUTABLE --version
    - openssl version
    - $GPG_EXECUTABLE --list-keys
    - TSP=$TRAVIS_SECRET openssl enc -aes-256-cbc -md MD5 -pass env:TSP -d -a -in dev/travis_public_gpg_key.pgp.enc | $GPG_EXECUTABLE --import 
    - TSP=$TRAVIS_SECRET openssl enc -aes-256-cbc -md MD5 -pass env:TSP -d -a -in dev/travis_secret_gpg_key.pgp.enc | $GPG_EXECUTABLE --import 
    - TSP=$TRAVIS_SECRET openssl enc -aes-256-cbc -md MD5 -pass env:TSP -d -a -in dev/gpg_owner_trust.enc | $GPG_EXECUTABLE --import-ownertrust
    - $GPG_EXECUTABLE --list-keys
    - |
        pip install twine
        if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
          pip install six pyopenssl ndg-httpsclient pyasn1 -U --user
          pip install requests[security] twine --user
        elfi
        if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
          pip install six twine
          pip install --upgrade pyOpenSSL
        fi
    # Package and publish to pypi (if on release)
    - |
        echo "TRAVIS_BRANCH = $TRAVIS_BRANCH"
        if [[ "$TRAVIS_BRANCH" == "release" ]]; then
            TAG_AND_UPLOAD=yes
        else
            TAG_AND_UPLOAD=no
        fi
        KEYID=$(cat dev/public_gpg_key)
        echo "KEYID = '$KEYID'"
        MB_PYTHON_TAG=$MB_PYTHON_TAG \
            USE_GPG=True \
            GPG_KEYID=$KEYID \
            CURRENT_BRANCH=$TRAVIS_BRANCH \
            TWINE_PASSWORD=$TWINE_PASSWORD \
            TWINE_USERNAME=$TWINE_USERNAME \
            GPG_EXECUTABLE=$GPG_EXECUTABLE \
            DEPLOY_BRANCH=release \
            TAG_AND_UPLOAD=$TAG_AND_UPLOAD \
            ./publish.sh

        # TODO: incorporate git tagging into release script 
        if [[ "$TRAVIS_BRANCH" == "release" ]]; then
            URL_HOST=$(git remote get-url origin | sed -e 's|https\?://.*@||g' | sed -e 's|https\?://||g')
            echo "URL_HOST = $URL_HOST"
            git config user.email "travis-ci@github.com"
            git config user.name "Travis-CI"
            VERSION=$(python -c "import setup; print(setup.VERSION)")
            git tag $VERSION -m "tarball tag $VERSION"
            git push --tags "https://${PERSONAL_GITHUB_PUSH_TOKEN}@${URL_HOST}"
        fi
