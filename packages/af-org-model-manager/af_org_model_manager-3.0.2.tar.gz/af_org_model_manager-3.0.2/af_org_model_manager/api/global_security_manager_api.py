# coding: utf-8

"""
    AristaFlowREST/OrgModelManager

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from af_org_model_manager.api_client import ApiClient


class GlobalSecurityManagerApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def authenticate_all(self, **kwargs):  # noqa: E501
        """authenticate_all  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.authenticate_all(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_name:
        :param int org_pos_id:
        :param str caller_uri:
        :param str password:
        :return: list[ClientSessionDetails]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.authenticate_all_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.authenticate_all_with_http_info(**kwargs)  # noqa: E501
            return data

    def authenticate_all_with_http_info(self, **kwargs):  # noqa: E501
        """authenticate_all  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.authenticate_all_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_name:
        :param int org_pos_id:
        :param str caller_uri:
        :param str password:
        :return: list[ClientSessionDetails]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_name', 'org_pos_id', 'caller_uri', 'password']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method authenticate_all" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'user_name' in params:
            form_params.append(('userName', params['user_name']))  # noqa: E501
        if 'org_pos_id' in params:
            form_params.append(('orgPosId', params['org_pos_id']))  # noqa: E501
        if 'caller_uri' in params:
            form_params.append(('callerUri', params['caller_uri']))  # noqa: E501
        if 'password' in params:
            form_params.append(('password', params['password']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/GlobalSecurityManager/authentication', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ClientSessionDetails]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def authenticate_all_method(self, method, caller_uri, **kwargs):  # noqa: E501
        """authenticate_all_method  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.authenticate_all_method(method, caller_uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str method: (required)
        :param str caller_uri: (required)
        :param list[AuthenticationData] body:
        :return: list[ClientSessionDetails]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.authenticate_all_method_with_http_info(method, caller_uri, **kwargs)  # noqa: E501
        else:
            (data) = self.authenticate_all_method_with_http_info(method, caller_uri, **kwargs)  # noqa: E501
            return data

    def authenticate_all_method_with_http_info(self, method, caller_uri, **kwargs):  # noqa: E501
        """authenticate_all_method  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.authenticate_all_method_with_http_info(method, caller_uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str method: (required)
        :param str caller_uri: (required)
        :param list[AuthenticationData] body:
        :return: list[ClientSessionDetails]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['method', 'caller_uri', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method authenticate_all_method" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'method' is set
        if ('method' not in params or
                params['method'] is None):
            raise ValueError("Missing the required parameter `method` when calling `authenticate_all_method`")  # noqa: E501
        # verify the required parameter 'caller_uri' is set
        if ('caller_uri' not in params or
                params['caller_uri'] is None):
            raise ValueError("Missing the required parameter `caller_uri` when calling `authenticate_all_method`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'method' in params:
            query_params.append(('method', params['method']))  # noqa: E501
        if 'caller_uri' in params:
            query_params.append(('callerUri', params['caller_uri']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/GlobalSecurityManager/generic-authentication', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ClientSessionDetails]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def authenticate_cookie(self, **kwargs):  # noqa: E501
        """authenticate_cookie  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.authenticate_cookie(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_name:
        :param int org_pos_id:
        :param str caller_uri:
        :param str password:
        :return: ClientSessionDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.authenticate_cookie_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.authenticate_cookie_with_http_info(**kwargs)  # noqa: E501
            return data

    def authenticate_cookie_with_http_info(self, **kwargs):  # noqa: E501
        """authenticate_cookie  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.authenticate_cookie_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_name:
        :param int org_pos_id:
        :param str caller_uri:
        :param str password:
        :return: ClientSessionDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_name', 'org_pos_id', 'caller_uri', 'password']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method authenticate_cookie" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'user_name' in params:
            form_params.append(('userName', params['user_name']))  # noqa: E501
        if 'org_pos_id' in params:
            form_params.append(('orgPosId', params['org_pos_id']))  # noqa: E501
        if 'caller_uri' in params:
            form_params.append(('callerUri', params['caller_uri']))  # noqa: E501
        if 'password' in params:
            form_params.append(('password', params['password']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/GlobalSecurityManager/authentication-cookie', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ClientSessionDetails',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def authenticate_method_cookie(self, body, method, caller_uri, **kwargs):  # noqa: E501
        """authenticate_method_cookie  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.authenticate_method_cookie(body, method, caller_uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[AuthenticationData] body: (required)
        :param str method: (required)
        :param str caller_uri: (required)
        :return: ClientSessionDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.authenticate_method_cookie_with_http_info(body, method, caller_uri, **kwargs)  # noqa: E501
        else:
            (data) = self.authenticate_method_cookie_with_http_info(body, method, caller_uri, **kwargs)  # noqa: E501
            return data

    def authenticate_method_cookie_with_http_info(self, body, method, caller_uri, **kwargs):  # noqa: E501
        """authenticate_method_cookie  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.authenticate_method_cookie_with_http_info(body, method, caller_uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[AuthenticationData] body: (required)
        :param str method: (required)
        :param str caller_uri: (required)
        :return: ClientSessionDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'method', 'caller_uri']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method authenticate_method_cookie" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `authenticate_method_cookie`")  # noqa: E501
        # verify the required parameter 'method' is set
        if ('method' not in params or
                params['method'] is None):
            raise ValueError("Missing the required parameter `method` when calling `authenticate_method_cookie`")  # noqa: E501
        # verify the required parameter 'caller_uri' is set
        if ('caller_uri' not in params or
                params['caller_uri'] is None):
            raise ValueError("Missing the required parameter `caller_uri` when calling `authenticate_method_cookie`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'method' in params:
            query_params.append(('method', params['method']))  # noqa: E501
        if 'caller_uri' in params:
            query_params.append(('callerUri', params['caller_uri']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/GlobalSecurityManager/generic-authentication-cookie', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ClientSessionDetails',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def logoff(self, **kwargs):  # noqa: E501
        """logoff  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.logoff(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.logoff_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.logoff_with_http_info(**kwargs)  # noqa: E501
            return data

    def logoff_with_http_info(self, **kwargs):  # noqa: E501
        """logoff  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.logoff_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method logoff" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/GlobalSecurityManager/logoff', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def pre_authenticate(self, **kwargs):  # noqa: E501
        """pre_authenticate  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pre_authenticate(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_name:
        :param str password:
        :return: list[QualifiedAgent]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.pre_authenticate_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.pre_authenticate_with_http_info(**kwargs)  # noqa: E501
            return data

    def pre_authenticate_with_http_info(self, **kwargs):  # noqa: E501
        """pre_authenticate  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pre_authenticate_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_name:
        :param str password:
        :return: list[QualifiedAgent]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_name', 'password']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pre_authenticate" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'user_name' in params:
            form_params.append(('userName', params['user_name']))  # noqa: E501
        if 'password' in params:
            form_params.append(('password', params['password']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/GlobalSecurityManager/pre-authentication', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[QualifiedAgent]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def pre_authenticate_method(self, method, **kwargs):  # noqa: E501
        """pre_authenticate_method  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pre_authenticate_method(method, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str method: (required)
        :param list[AuthenticationData] body:
        :return: list[QualifiedAgent]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.pre_authenticate_method_with_http_info(method, **kwargs)  # noqa: E501
        else:
            (data) = self.pre_authenticate_method_with_http_info(method, **kwargs)  # noqa: E501
            return data

    def pre_authenticate_method_with_http_info(self, method, **kwargs):  # noqa: E501
        """pre_authenticate_method  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pre_authenticate_method_with_http_info(method, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str method: (required)
        :param list[AuthenticationData] body:
        :return: list[QualifiedAgent]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['method', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pre_authenticate_method" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'method' is set
        if ('method' not in params or
                params['method'] is None):
            raise ValueError("Missing the required parameter `method` when calling `pre_authenticate_method`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'method' in params:
            query_params.append(('method', params['method']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/GlobalSecurityManager/pre-generic-authentication', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[QualifiedAgent]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
