# coding: utf-8

"""
    AristaFlowREST/OrgModelManager

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Body6(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'org_policy': 'str',
        'create_full_report': 'bool',
        'reject_parameter_references': 'bool'
    }

    attribute_map = {
        'org_policy': 'orgPolicy',
        'create_full_report': 'createFullReport',
        'reject_parameter_references': 'rejectParameterReferences'
    }

    def __init__(self, org_policy=None, create_full_report=False, reject_parameter_references=False):  # noqa: E501
        """Body6 - a model defined in Swagger"""  # noqa: E501
        self._org_policy = None
        self._create_full_report = None
        self._reject_parameter_references = None
        if not(hasattr(self, "discriminator")) or not(self.discriminator):
            self.discriminator = None
        self.org_policy = org_policy
        if create_full_report is not None:
            self.create_full_report = create_full_report
        if reject_parameter_references is not None:
            self.reject_parameter_references = reject_parameter_references

    @property
    def org_policy(self):
        """Gets the org_policy of this Body6.  # noqa: E501


        :return: The org_policy of this Body6.  # noqa: E501
        :rtype: str
        """
        return self._org_policy

    @org_policy.setter
    def org_policy(self, org_policy):
        """Sets the org_policy of this Body6.


        :param org_policy: The org_policy of this Body6.  # noqa: E501
        :type: str
        """
        if org_policy is None:
            raise ValueError("Invalid value for `org_policy`, must not be `None`")  # noqa: E501

        self._org_policy = org_policy

    @property
    def create_full_report(self):
        """Gets the create_full_report of this Body6.  # noqa: E501


        :return: The create_full_report of this Body6.  # noqa: E501
        :rtype: bool
        """
        return self._create_full_report

    @create_full_report.setter
    def create_full_report(self, create_full_report):
        """Sets the create_full_report of this Body6.


        :param create_full_report: The create_full_report of this Body6.  # noqa: E501
        :type: bool
        """

        self._create_full_report = create_full_report

    @property
    def reject_parameter_references(self):
        """Gets the reject_parameter_references of this Body6.  # noqa: E501


        :return: The reject_parameter_references of this Body6.  # noqa: E501
        :rtype: bool
        """
        return self._reject_parameter_references

    @reject_parameter_references.setter
    def reject_parameter_references(self, reject_parameter_references):
        """Sets the reject_parameter_references of this Body6.


        :param reject_parameter_references: The reject_parameter_references of this Body6.  # noqa: E501
        :type: bool
        """

        self._reject_parameter_references = reject_parameter_references

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Body6, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Body6):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
