# coding: utf-8

"""
    AristaFlowREST/OrgModelManager

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ScriptWithToken(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'name': 'str',
        'input_values': 'dict(str, str)',
        'extensions': 'str',
        'body': 'str',
        'token': 'str'
    }

    attribute_map = {
        'type': 'type',
        'name': 'name',
        'input_values': 'inputValues',
        'extensions': 'extensions',
        'body': 'body',
        'token': 'token'
    }

    def __init__(self, type=None, name=None, input_values=None, extensions=None, body=None, token=None):  # noqa: E501
        """ScriptWithToken - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._name = None
        self._input_values = None
        self._extensions = None
        self._body = None
        self._token = None
        if not(hasattr(self, "discriminator")) or not(self.discriminator):
            self.discriminator = None
        self.type = type
        if name is not None:
            self.name = name
        if input_values is not None:
            self.input_values = input_values
        if extensions is not None:
            self.extensions = extensions
        if body is not None:
            self.body = body
        self.token = token

    @property
    def type(self):
        """Gets the type of this ScriptWithToken.  # noqa: E501


        :return: The type of this ScriptWithToken.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ScriptWithToken.


        :param type: The type of this ScriptWithToken.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def name(self):
        """Gets the name of this ScriptWithToken.  # noqa: E501


        :return: The name of this ScriptWithToken.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ScriptWithToken.


        :param name: The name of this ScriptWithToken.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def input_values(self):
        """Gets the input_values of this ScriptWithToken.  # noqa: E501


        :return: The input_values of this ScriptWithToken.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._input_values

    @input_values.setter
    def input_values(self, input_values):
        """Sets the input_values of this ScriptWithToken.


        :param input_values: The input_values of this ScriptWithToken.  # noqa: E501
        :type: dict(str, str)
        """

        self._input_values = input_values

    @property
    def extensions(self):
        """Gets the extensions of this ScriptWithToken.  # noqa: E501


        :return: The extensions of this ScriptWithToken.  # noqa: E501
        :rtype: str
        """
        return self._extensions

    @extensions.setter
    def extensions(self, extensions):
        """Sets the extensions of this ScriptWithToken.


        :param extensions: The extensions of this ScriptWithToken.  # noqa: E501
        :type: str
        """

        self._extensions = extensions

    @property
    def body(self):
        """Gets the body of this ScriptWithToken.  # noqa: E501


        :return: The body of this ScriptWithToken.  # noqa: E501
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this ScriptWithToken.


        :param body: The body of this ScriptWithToken.  # noqa: E501
        :type: str
        """

        self._body = body

    @property
    def token(self):
        """Gets the token of this ScriptWithToken.  # noqa: E501


        :return: The token of this ScriptWithToken.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this ScriptWithToken.


        :param token: The token of this ScriptWithToken.  # noqa: E501
        :type: str
        """
        if token is None:
            raise ValueError("Invalid value for `token`, must not be `None`")  # noqa: E501

        self._token = token

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ScriptWithToken, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScriptWithToken):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
