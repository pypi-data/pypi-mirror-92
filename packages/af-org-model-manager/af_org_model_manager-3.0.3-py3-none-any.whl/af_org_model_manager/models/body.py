# coding: utf-8

"""
    AristaFlowREST/OrgModelManager

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Body(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user_name': 'str',
        'org_pos_id': 'int',
        'caller_uri': 'str',
        'password': 'str'
    }

    attribute_map = {
        'user_name': 'userName',
        'org_pos_id': 'orgPosId',
        'caller_uri': 'callerUri',
        'password': 'password'
    }

    def __init__(self, user_name=None, org_pos_id=None, caller_uri=None, password=None):  # noqa: E501
        """Body - a model defined in Swagger"""  # noqa: E501
        self._user_name = None
        self._org_pos_id = None
        self._caller_uri = None
        self._password = None
        if not(hasattr(self, "discriminator")) or not(self.discriminator):
            self.discriminator = None
        self.user_name = user_name
        if org_pos_id is not None:
            self.org_pos_id = org_pos_id
        self.caller_uri = caller_uri
        if password is not None:
            self.password = password

    @property
    def user_name(self):
        """Gets the user_name of this Body.  # noqa: E501


        :return: The user_name of this Body.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this Body.


        :param user_name: The user_name of this Body.  # noqa: E501
        :type: str
        """
        if user_name is None:
            raise ValueError("Invalid value for `user_name`, must not be `None`")  # noqa: E501

        self._user_name = user_name

    @property
    def org_pos_id(self):
        """Gets the org_pos_id of this Body.  # noqa: E501


        :return: The org_pos_id of this Body.  # noqa: E501
        :rtype: int
        """
        return self._org_pos_id

    @org_pos_id.setter
    def org_pos_id(self, org_pos_id):
        """Sets the org_pos_id of this Body.


        :param org_pos_id: The org_pos_id of this Body.  # noqa: E501
        :type: int
        """

        self._org_pos_id = org_pos_id

    @property
    def caller_uri(self):
        """Gets the caller_uri of this Body.  # noqa: E501


        :return: The caller_uri of this Body.  # noqa: E501
        :rtype: str
        """
        return self._caller_uri

    @caller_uri.setter
    def caller_uri(self, caller_uri):
        """Sets the caller_uri of this Body.


        :param caller_uri: The caller_uri of this Body.  # noqa: E501
        :type: str
        """
        if caller_uri is None:
            raise ValueError("Invalid value for `caller_uri`, must not be `None`")  # noqa: E501

        self._caller_uri = caller_uri

    @property
    def password(self):
        """Gets the password of this Body.  # noqa: E501


        :return: The password of this Body.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this Body.


        :param password: The password of this Body.  # noqa: E501
        :type: str
        """

        self._password = password

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Body, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Body):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
