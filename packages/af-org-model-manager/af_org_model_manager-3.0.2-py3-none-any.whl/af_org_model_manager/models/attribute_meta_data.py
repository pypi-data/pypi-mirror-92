# coding: utf-8

"""
    AristaFlowREST/OrgModelManager

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AttributeMetaData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'name': 'str',
        'data_type': 'str',
        'size_hint': 'int',
        'mapping': 'OmMapping',
        'is_imported': 'bool',
        'is_mandatory': 'bool',
        'is_read_only': 'bool'
    }

    attribute_map = {
        'type': 'type',
        'name': 'name',
        'data_type': 'dataType',
        'size_hint': 'sizeHint',
        'mapping': 'mapping',
        'is_imported': 'isImported',
        'is_mandatory': 'isMandatory',
        'is_read_only': 'isReadOnly'
    }

    def __init__(self, type=None, name=None, data_type=None, size_hint=None, mapping=None, is_imported=None, is_mandatory=None, is_read_only=None):  # noqa: E501
        """AttributeMetaData - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._name = None
        self._data_type = None
        self._size_hint = None
        self._mapping = None
        self._is_imported = None
        self._is_mandatory = None
        self._is_read_only = None
        if not(hasattr(self, "discriminator")) or not(self.discriminator):
            self.discriminator = None
        self.type = type
        self.name = name
        self.data_type = data_type
        self.size_hint = size_hint
        if mapping is not None:
            self.mapping = mapping
        self.is_imported = is_imported
        self.is_mandatory = is_mandatory
        self.is_read_only = is_read_only

    @property
    def type(self):
        """Gets the type of this AttributeMetaData.  # noqa: E501


        :return: The type of this AttributeMetaData.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AttributeMetaData.


        :param type: The type of this AttributeMetaData.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["AGENT", "ORG_POSITION", "ORG_UNIT", "ORG_GROUP", "PROJECT_GROUP", "ABILITY", "ROLE", "SUBSTITUTION_RULE"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def name(self):
        """Gets the name of this AttributeMetaData.  # noqa: E501


        :return: The name of this AttributeMetaData.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AttributeMetaData.


        :param name: The name of this AttributeMetaData.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def data_type(self):
        """Gets the data_type of this AttributeMetaData.  # noqa: E501


        :return: The data_type of this AttributeMetaData.  # noqa: E501
        :rtype: str
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """Sets the data_type of this AttributeMetaData.


        :param data_type: The data_type of this AttributeMetaData.  # noqa: E501
        :type: str
        """
        if data_type is None:
            raise ValueError("Invalid value for `data_type`, must not be `None`")  # noqa: E501
        allowed_values = ["NULL", "INTEGER", "FLOAT", "STRING", "TIMESTAMP"]  # noqa: E501
        if data_type not in allowed_values:
            raise ValueError(
                "Invalid value for `data_type` ({0}), must be one of {1}"  # noqa: E501
                .format(data_type, allowed_values)
            )

        self._data_type = data_type

    @property
    def size_hint(self):
        """Gets the size_hint of this AttributeMetaData.  # noqa: E501


        :return: The size_hint of this AttributeMetaData.  # noqa: E501
        :rtype: int
        """
        return self._size_hint

    @size_hint.setter
    def size_hint(self, size_hint):
        """Sets the size_hint of this AttributeMetaData.


        :param size_hint: The size_hint of this AttributeMetaData.  # noqa: E501
        :type: int
        """
        if size_hint is None:
            raise ValueError("Invalid value for `size_hint`, must not be `None`")  # noqa: E501

        self._size_hint = size_hint

    @property
    def mapping(self):
        """Gets the mapping of this AttributeMetaData.  # noqa: E501


        :return: The mapping of this AttributeMetaData.  # noqa: E501
        :rtype: OmMapping
        """
        return self._mapping

    @mapping.setter
    def mapping(self, mapping):
        """Sets the mapping of this AttributeMetaData.


        :param mapping: The mapping of this AttributeMetaData.  # noqa: E501
        :type: OmMapping
        """

        self._mapping = mapping

    @property
    def is_imported(self):
        """Gets the is_imported of this AttributeMetaData.  # noqa: E501


        :return: The is_imported of this AttributeMetaData.  # noqa: E501
        :rtype: bool
        """
        return self._is_imported

    @is_imported.setter
    def is_imported(self, is_imported):
        """Sets the is_imported of this AttributeMetaData.


        :param is_imported: The is_imported of this AttributeMetaData.  # noqa: E501
        :type: bool
        """
        if is_imported is None:
            raise ValueError("Invalid value for `is_imported`, must not be `None`")  # noqa: E501

        self._is_imported = is_imported

    @property
    def is_mandatory(self):
        """Gets the is_mandatory of this AttributeMetaData.  # noqa: E501


        :return: The is_mandatory of this AttributeMetaData.  # noqa: E501
        :rtype: bool
        """
        return self._is_mandatory

    @is_mandatory.setter
    def is_mandatory(self, is_mandatory):
        """Sets the is_mandatory of this AttributeMetaData.


        :param is_mandatory: The is_mandatory of this AttributeMetaData.  # noqa: E501
        :type: bool
        """
        if is_mandatory is None:
            raise ValueError("Invalid value for `is_mandatory`, must not be `None`")  # noqa: E501

        self._is_mandatory = is_mandatory

    @property
    def is_read_only(self):
        """Gets the is_read_only of this AttributeMetaData.  # noqa: E501


        :return: The is_read_only of this AttributeMetaData.  # noqa: E501
        :rtype: bool
        """
        return self._is_read_only

    @is_read_only.setter
    def is_read_only(self, is_read_only):
        """Sets the is_read_only of this AttributeMetaData.


        :param is_read_only: The is_read_only of this AttributeMetaData.  # noqa: E501
        :type: bool
        """
        if is_read_only is None:
            raise ValueError("Invalid value for `is_read_only`, must not be `None`")  # noqa: E501

        self._is_read_only = is_read_only

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AttributeMetaData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AttributeMetaData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
