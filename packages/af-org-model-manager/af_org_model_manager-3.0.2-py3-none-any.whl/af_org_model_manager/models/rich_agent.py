# coding: utf-8

"""
    AristaFlowREST/OrgModelManager

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RichAgent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'agent': 'QualifiedAgent',
        'user_readable_name': 'str',
        'mail_address': 'str',
        'lang_tag': 'str',
        'additional_attributes': 'dict(str, str)'
    }

    attribute_map = {
        'agent': 'agent',
        'user_readable_name': 'userReadableName',
        'mail_address': 'mailAddress',
        'lang_tag': 'langTag',
        'additional_attributes': 'additionalAttributes'
    }

    def __init__(self, agent=None, user_readable_name=None, mail_address=None, lang_tag=None, additional_attributes=None):  # noqa: E501
        """RichAgent - a model defined in Swagger"""  # noqa: E501
        self._agent = None
        self._user_readable_name = None
        self._mail_address = None
        self._lang_tag = None
        self._additional_attributes = None
        if not(hasattr(self, "discriminator")) or not(self.discriminator):
            self.discriminator = None
        self.agent = agent
        self.user_readable_name = user_readable_name
        self.mail_address = mail_address
        self.lang_tag = lang_tag
        if additional_attributes is not None:
            self.additional_attributes = additional_attributes

    @property
    def agent(self):
        """Gets the agent of this RichAgent.  # noqa: E501


        :return: The agent of this RichAgent.  # noqa: E501
        :rtype: QualifiedAgent
        """
        return self._agent

    @agent.setter
    def agent(self, agent):
        """Sets the agent of this RichAgent.


        :param agent: The agent of this RichAgent.  # noqa: E501
        :type: QualifiedAgent
        """
        if agent is None:
            raise ValueError("Invalid value for `agent`, must not be `None`")  # noqa: E501

        self._agent = agent

    @property
    def user_readable_name(self):
        """Gets the user_readable_name of this RichAgent.  # noqa: E501


        :return: The user_readable_name of this RichAgent.  # noqa: E501
        :rtype: str
        """
        return self._user_readable_name

    @user_readable_name.setter
    def user_readable_name(self, user_readable_name):
        """Sets the user_readable_name of this RichAgent.


        :param user_readable_name: The user_readable_name of this RichAgent.  # noqa: E501
        :type: str
        """
        if user_readable_name is None:
            raise ValueError("Invalid value for `user_readable_name`, must not be `None`")  # noqa: E501

        self._user_readable_name = user_readable_name

    @property
    def mail_address(self):
        """Gets the mail_address of this RichAgent.  # noqa: E501


        :return: The mail_address of this RichAgent.  # noqa: E501
        :rtype: str
        """
        return self._mail_address

    @mail_address.setter
    def mail_address(self, mail_address):
        """Sets the mail_address of this RichAgent.


        :param mail_address: The mail_address of this RichAgent.  # noqa: E501
        :type: str
        """
        if mail_address is None:
            raise ValueError("Invalid value for `mail_address`, must not be `None`")  # noqa: E501

        self._mail_address = mail_address

    @property
    def lang_tag(self):
        """Gets the lang_tag of this RichAgent.  # noqa: E501


        :return: The lang_tag of this RichAgent.  # noqa: E501
        :rtype: str
        """
        return self._lang_tag

    @lang_tag.setter
    def lang_tag(self, lang_tag):
        """Sets the lang_tag of this RichAgent.


        :param lang_tag: The lang_tag of this RichAgent.  # noqa: E501
        :type: str
        """
        if lang_tag is None:
            raise ValueError("Invalid value for `lang_tag`, must not be `None`")  # noqa: E501

        self._lang_tag = lang_tag

    @property
    def additional_attributes(self):
        """Gets the additional_attributes of this RichAgent.  # noqa: E501


        :return: The additional_attributes of this RichAgent.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._additional_attributes

    @additional_attributes.setter
    def additional_attributes(self, additional_attributes):
        """Sets the additional_attributes of this RichAgent.


        :param additional_attributes: The additional_attributes of this RichAgent.  # noqa: E501
        :type: dict(str, str)
        """

        self._additional_attributes = additional_attributes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RichAgent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RichAgent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
