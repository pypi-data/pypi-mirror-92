# coding: utf-8

"""
    AristaFlowREST/OrgModelManager

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Entity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'attributes': 'dict(str, str)',
        'attribute_types': 'dict(str, str)'
    }

    attribute_map = {
        'type': 'type',
        'attributes': 'attributes',
        'attribute_types': 'attributeTypes'
    }

    def __init__(self, type=None, attributes=None, attribute_types=None):  # noqa: E501
        """Entity - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._attributes = None
        self._attribute_types = None
        if not(hasattr(self, "discriminator")) or not(self.discriminator):
            self.discriminator = None
        self.type = type
        self.attributes = attributes
        self.attribute_types = attribute_types

    @property
    def type(self):
        """Gets the type of this Entity.  # noqa: E501


        :return: The type of this Entity.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Entity.


        :param type: The type of this Entity.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["AGENT", "ORG_POSITION", "ORG_UNIT", "ORG_GROUP", "PROJECT_GROUP", "ABILITY", "ROLE", "SUBSTITUTION_RULE"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def attributes(self):
        """Gets the attributes of this Entity.  # noqa: E501


        :return: The attributes of this Entity.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this Entity.


        :param attributes: The attributes of this Entity.  # noqa: E501
        :type: dict(str, str)
        """
        if attributes is None:
            raise ValueError("Invalid value for `attributes`, must not be `None`")  # noqa: E501

        self._attributes = attributes

    @property
    def attribute_types(self):
        """Gets the attribute_types of this Entity.  # noqa: E501


        :return: The attribute_types of this Entity.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._attribute_types

    @attribute_types.setter
    def attribute_types(self, attribute_types):
        """Sets the attribute_types of this Entity.


        :param attribute_types: The attribute_types of this Entity.  # noqa: E501
        :type: dict(str, str)
        """
        if attribute_types is None:
            raise ValueError("Invalid value for `attribute_types`, must not be `None`")  # noqa: E501
        allowed_values = ["NULL", "INTEGER", "FLOAT", "STRING", "TIMESTAMP"]  # noqa: E501
        if not set(attribute_types.values()).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid keys in `attribute_types` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(attribute_types.values()) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._attribute_types = attribute_types

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Entity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Entity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
