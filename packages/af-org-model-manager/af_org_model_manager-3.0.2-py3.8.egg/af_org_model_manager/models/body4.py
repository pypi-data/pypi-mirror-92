# coding: utf-8

"""
    AristaFlowREST/OrgModelManager

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Body4(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'agent_name': 'str',
        'org_pos_id': 'int',
        'org_policy': 'str'
    }

    attribute_map = {
        'agent_name': 'agentName',
        'org_pos_id': 'orgPosId',
        'org_policy': 'orgPolicy'
    }

    def __init__(self, agent_name=None, org_pos_id=None, org_policy=None):  # noqa: E501
        """Body4 - a model defined in Swagger"""  # noqa: E501
        self._agent_name = None
        self._org_pos_id = None
        self._org_policy = None
        if not(hasattr(self, "discriminator")) or not(self.discriminator):
            self.discriminator = None
        self.agent_name = agent_name
        self.org_pos_id = org_pos_id
        self.org_policy = org_policy

    @property
    def agent_name(self):
        """Gets the agent_name of this Body4.  # noqa: E501


        :return: The agent_name of this Body4.  # noqa: E501
        :rtype: str
        """
        return self._agent_name

    @agent_name.setter
    def agent_name(self, agent_name):
        """Sets the agent_name of this Body4.


        :param agent_name: The agent_name of this Body4.  # noqa: E501
        :type: str
        """
        if agent_name is None:
            raise ValueError("Invalid value for `agent_name`, must not be `None`")  # noqa: E501

        self._agent_name = agent_name

    @property
    def org_pos_id(self):
        """Gets the org_pos_id of this Body4.  # noqa: E501


        :return: The org_pos_id of this Body4.  # noqa: E501
        :rtype: int
        """
        return self._org_pos_id

    @org_pos_id.setter
    def org_pos_id(self, org_pos_id):
        """Sets the org_pos_id of this Body4.


        :param org_pos_id: The org_pos_id of this Body4.  # noqa: E501
        :type: int
        """
        if org_pos_id is None:
            raise ValueError("Invalid value for `org_pos_id`, must not be `None`")  # noqa: E501

        self._org_pos_id = org_pos_id

    @property
    def org_policy(self):
        """Gets the org_policy of this Body4.  # noqa: E501


        :return: The org_policy of this Body4.  # noqa: E501
        :rtype: str
        """
        return self._org_policy

    @org_policy.setter
    def org_policy(self, org_policy):
        """Sets the org_policy of this Body4.


        :param org_policy: The org_policy of this Body4.  # noqa: E501
        :type: str
        """
        if org_policy is None:
            raise ValueError("Invalid value for `org_policy`, must not be `None`")  # noqa: E501

        self._org_policy = org_policy

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Body4, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Body4):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
