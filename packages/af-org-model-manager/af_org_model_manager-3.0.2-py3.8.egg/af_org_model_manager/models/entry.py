# coding: utf-8

"""
    AristaFlowREST/OrgModelManager

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Entry(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'result_type': 'str',
        'desc': 'str',
        'ranges': 'list[Range]'
    }

    attribute_map = {
        'result_type': 'resultType',
        'desc': 'desc',
        'ranges': 'ranges'
    }

    def __init__(self, result_type=None, desc=None, ranges=None):  # noqa: E501
        """Entry - a model defined in Swagger"""  # noqa: E501
        self._result_type = None
        self._desc = None
        self._ranges = None
        if not(hasattr(self, "discriminator")) or not(self.discriminator):
            self.discriminator = None
        self.result_type = result_type
        self.desc = desc
        self.ranges = ranges

    @property
    def result_type(self):
        """Gets the result_type of this Entry.  # noqa: E501


        :return: The result_type of this Entry.  # noqa: E501
        :rtype: str
        """
        return self._result_type

    @result_type.setter
    def result_type(self, result_type):
        """Sets the result_type of this Entry.


        :param result_type: The result_type of this Entry.  # noqa: E501
        :type: str
        """
        if result_type is None:
            raise ValueError("Invalid value for `result_type`, must not be `None`")  # noqa: E501
        allowed_values = ["OK", "INFO", "WARNING", "ERROR"]  # noqa: E501
        if result_type not in allowed_values:
            raise ValueError(
                "Invalid value for `result_type` ({0}), must be one of {1}"  # noqa: E501
                .format(result_type, allowed_values)
            )

        self._result_type = result_type

    @property
    def desc(self):
        """Gets the desc of this Entry.  # noqa: E501


        :return: The desc of this Entry.  # noqa: E501
        :rtype: str
        """
        return self._desc

    @desc.setter
    def desc(self, desc):
        """Sets the desc of this Entry.


        :param desc: The desc of this Entry.  # noqa: E501
        :type: str
        """
        if desc is None:
            raise ValueError("Invalid value for `desc`, must not be `None`")  # noqa: E501

        self._desc = desc

    @property
    def ranges(self):
        """Gets the ranges of this Entry.  # noqa: E501


        :return: The ranges of this Entry.  # noqa: E501
        :rtype: list[Range]
        """
        return self._ranges

    @ranges.setter
    def ranges(self, ranges):
        """Sets the ranges of this Entry.


        :param ranges: The ranges of this Entry.  # noqa: E501
        :type: list[Range]
        """
        if ranges is None:
            raise ValueError("Invalid value for `ranges`, must not be `None`")  # noqa: E501

        self._ranges = ranges

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Entry, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Entry):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
