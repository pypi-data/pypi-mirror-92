]0;~/Notebooks/Examples/03 - Chapter 10 Vapor Power Cycles[01;34m~/Notebooks/Examples/03 - Chapter 10 Vapor Power Cycles[00m$ [K]0;~/Notebooks/Examples/03 - Chapter 10 Vapor Power Cycles[01;34m~/Notebooks/Examples/03 - Chapter 10 Vapor Power Cycles[00m$ nv[Kbconvert
bash: nbconvert: command not found
]0;~/Notebooks/Examples/03 - Chapter 10 Vapor Power Cycles[01;34m~/Notebooks/Examples/03 - Chapter 10 Vapor Power Cycles[00m$ jy[Kupyte
jupyter                            jupyter-labextension               jupyter-serverextension
jupyter-bundlerextension           jupyter-labhub                     jupyter-sparqlkernel
jupyter-console                    jupyter-migrate                    jupyter-troubleshoot
jupyter-contrib                    jupyter-nbconvert                  jupyter-trust
jupyter-contrib-nbextension        jupyter-nbextension                jupyterhub
jupyter-kernel                     jupyter-nbextensions_configurator  jupyterhub-singleuser
jupyter-kernel-gap                 jupyter-notebook                   jupytext
jupyter-kernelspec                 jupyter-qtconsole                  
jupyter-lab                        jupyter-run                        
]0;~/Notebooks/Examples/03 - Chapter 10 Vapor Power Cycles[01;34m~/Notebooks/Examples/03 - Chapter 10 Vapor Power Cycles[00m$ jupyter-nv[Kb
jupyter-nbconvert                  jupyter-nbextension                jupyter-nbextensions_configurator
]0;~/Notebooks/Examples/03 - Chapter 10 Vapor Power Cycles[01;34m~/Notebooks/Examples/03 - Chapter 10 Vapor Power Cycles[00m$ jupyter-nb
jupyter-nbconvert                  jupyter-nbextension                jupyter-nbextensions_configurator
]0;~/Notebooks/Examples/03 - Chapter 10 Vapor Power Cycles[01;34m~/Notebooks/Examples/03 - Chapter 10 Vapor Power Cycles[00m$ jupyter-nbconvert 
.Ex10.1 Ideal Rankine Cycle.ipynb-0.term               Ex10.3 Rankine with Superheat.ipynb
.Ex10.1 Ideal Rankine Cycle.ipynb.sage-jupyter2        Ex10.4 Rankine with Reheat.ipynb
Ex10.1 Ideal Rankine Cycle.ipynb                       Ex10.5 Rankine with Reheat and OFH Regeneration.ipynb
Ex10.2 Non-Ideal Rankine Cycle.ipynb                   Ex10.6 Rankine with Reheat and CFH Regeneration.ipynb
]0;~/Notebooks/Examples/03 - Chapter 10 Vapor Power Cycles[01;34m~/Notebooks/Examples/03 - Chapter 10 Vapor Power Cycles[00m$ jupyter-nbconvert 
This application is used to convert notebook files (*.ipynb) to various other
formats.

WARNING: THE COMMANDLINE INTERFACE MAY CHANGE IN FUTURE RELEASES.

Options
-------

Arguments that take values are actually convenience aliases to full
Configurables, whose aliases are listed on the help line. For more information
on full configurables, see '--help-all'.

--debug
    set log level to logging.DEBUG (maximize logging output)
--generate-config
    generate default config file
-y
    Answer yes to any questions instead of prompting.
--execute
    Execute the notebook prior to export.
--allow-errors
    Continue notebook execution even if one of the cells throws an error and include the error message in the cell output (the default behaviour is to abort conversion). This flag is only relevant if '--execute' was specified, too.
--stdin
    read a single notebook file from stdin. Write the resulting notebook with default basename 'notebook.*'
--stdout
    Write notebook output to stdout instead of files.
--inplace
    Run nbconvert in place, overwriting the existing notebook (only 
    relevant when converting to notebook format)
--clear-output
    Clear output of current file and save in place, 
    overwriting the existing notebook.
--no-prompt
    Exclude input and output prompts from converted document.
--no-input
    Exclude input cells and output prompts from converted document. 
    This mode is ideal for generating code-free reports.
--allow-chromium-download
    Whether to allow downloading chromium if no suitable version is found on the system.
--log-level=<Enum> (Application.log_level)
    Default: 30
    Choices: (0, 10, 20, 30, 40, 50, 'DEBUG', 'INFO', 'WARN', 'ERROR', 'CRITICAL')
    Set the log level by value or name.
--config=<Unicode> (JupyterApp.config_file)
    Default: ''
    Full path of a config file.
--to=<Unicode> (NbConvertApp.export_format)
    Default: ''
    The export format to be used, either one of the built-in formats
    ['asciidoc', 'custom', 'hide_code_html', 'hide_code_latex',
    'hide_code_latexpdf', 'hide_code_pdf', 'hide_code_slides', 'html',
    'html_ch', 'html_embed', 'html_toc', 'html_with_lenvs',
    'html_with_toclenvs', 'latex', 'latex_with_lenvs', 'markdown', 'notebook',
    'pdf', 'python', 'rst', 'script', 'selectLanguage', 'slides',
    'slides_with_lenvs', 'webpdf'] or a dotted object name that represents the
    import path for an `Exporter` class
--template=<Unicode> (TemplateExporter.template_name)
    Default: ''
    Name of the template to use
--template-file=<Unicode> (TemplateExporter.template_file)
    Default: None
    Name of the template file to use
--writer=<DottedObjectName> (NbConvertApp.writer_class)
    Default: 'FilesWriter'
    Writer class used to write the  results of the conversion
--post=<DottedOrNone> (NbConvertApp.postprocessor_class)
    Default: ''
    PostProcessor class used to write the results of the conversion
--output=<Unicode> (NbConvertApp.output_base)
    Default: ''
    overwrite base name use for output files. can only be used when converting
    one notebook at a time.
--output-dir=<Unicode> (FilesWriter.build_directory)
    Default: ''
    Directory to write output(s) to. Defaults to output to the directory of each
    notebook. To recover previous default behaviour (outputting to the current
    working directory) use . as the flag value.
--reveal-prefix=<Unicode> (SlidesExporter.reveal_url_prefix)
    Default: ''
    The URL prefix for reveal.js (version 3.x). This defaults to the reveal CDN,
    but can be any url pointing to a copy  of reveal.js.
    For speaker notes to work, this must be a relative path to a local  copy of
    reveal.js: e.g., "reveal.js".
    If a relative path is given, it must be a subdirectory of the current
    directory (from which the server is run).
    See the usage documentation
    (https://nbconvert.readthedocs.io/en/latest/usage.html#reveal-js-html-
    slideshow) for more details.
--nbformat=<Enum> (NotebookExporter.nbformat_version)
    Default: 4
    Choices: [1, 2, 3, 4]
    The nbformat version to write. Use this to downgrade notebooks.

To see all available configurables, use `--help-all`

Examples
--------

    The simplest way to use nbconvert is
    
    > jupyter nbconvert mynotebook.ipynb --to html
    
    Options include ['asciidoc', 'custom', 'hide_code_html', 'hide_code_latex', 'hide_code_latexpdf', 'hide_code_pdf', 'hide_code_slides', 'html', 'html_ch', 'html_embed', 'html_toc', 'html_with_lenvs', 'html_with_toclenvs', 'latex', 'latex_with_lenvs', 'markdown', 'notebook', 'pdf', 'python', 'rst', 'script', 'selectLanguage', 'slides', 'slides_with_lenvs', 'webpdf'].
    
    > jupyter nbconvert --to latex mynotebook.ipynb
    
    Both HTML and LaTeX support multiple output templates. LaTeX includes
    'base', 'article' and 'report'.  HTML includes 'basic' and 'full'. You
    can specify the flavor of the format used.
    
    > jupyter nbconvert --to html --template lab mynotebook.ipynb
    
    You can also pipe the output to stdout, rather than a file
    
    > jupyter nbconvert mynotebook.ipynb --stdout
    
    PDF is generated via latex
    
    > jupyter nbconvert mynotebook.ipynb --to pdf
    
    You can get (and serve) a Reveal.js-powered slideshow
    
    > jupyter nbconvert myslides.ipynb --to slides --post serve
    
    Multiple notebooks can be given at the command line in a couple of 
    different ways:
    
    > jupyter nbconvert notebook*.ipynb
    > jupyter nbconvert notebook1.ipynb notebook2.ipynb
    
    or you can specify the notebooks list in a config file, containing::
    
        c.NbConvertApp.notebooks = ["my_notebook.ipynb"]
    
    > jupyter nbconvert --config mycfg.py

]0;~/Notebooks/Examples/03 - Chapter 10 Vapor Power Cycles[01;34m~/Notebooks/Examples/03 - Chapter 10 Vapor Power Cycles[00m$ [H[2J]0;~/Notebooks/Examples/03 - Chapter 10 Vapor Power Cycles[01;34m~/Notebooks/Examples/03 - Chapter 10 Vapor Power Cycles[00m$ ls ~/bin
[0m[01;32mhomework_submission.sh[0m
]0;~/Notebooks/Examples/03 - Chapter 10 Vapor Power Cycles[01;34m~/Notebooks/Examples/03 - Chapter 10 Vapor Power Cycles[00m$ ~/home[K[K[K[Kbin/hoe[Kmework_submission.sh 
[NbConvertApp] WARNING | pattern '' matched no files
This application is used to convert notebook files (*.ipynb) to various other
formats.

WARNING: THE COMMANDLINE INTERFACE MAY CHANGE IN FUTURE RELEASES.

Options
-------

Arguments that take values are actually convenience aliases to full
Configurables, whose aliases are listed on the help line. For more information
on full configurables, see '--help-all'.

--debug
    set log level to logging.DEBUG (maximize logging output)
--generate-config
    generate default config file
-y
    Answer yes to any questions instead of prompting.
--execute
    Execute the notebook prior to export.
--allow-errors
    Continue notebook execution even if one of the cells throws an error and include the error message in the cell output (the default behaviour is to abort conversion). This flag is only relevant if '--execute' was specified, too.
--stdin
    read a single notebook file from stdin. Write the resulting notebook with default basename 'notebook.*'
--stdout
    Write notebook output to stdout instead of files.
--inplace
    Run nbconvert in place, overwriting the existing notebook (only 
    relevant when converting to notebook format)
--clear-output
    Clear output of current file and save in place, 
    overwriting the existing notebook.
--no-prompt
    Exclude input and output prompts from converted document.
--no-input
    Exclude input cells and output prompts from converted document. 
    This mode is ideal for generating code-free reports.
--allow-chromium-download
    Whether to allow downloading chromium if no suitable version is found on the system.
--log-level=<Enum> (Application.log_level)
    Default: 30
    Choices: (0, 10, 20, 30, 40, 50, 'DEBUG', 'INFO', 'WARN', 'ERROR', 'CRITICAL')
    Set the log level by value or name.
--config=<Unicode> (JupyterApp.config_file)
    Default: ''
    Full path of a config file.
--to=<Unicode> (NbConvertApp.export_format)
    Default: ''
    The export format to be used, either one of the built-in formats
    ['asciidoc', 'custom', 'hide_code_html', 'hide_code_latex',
    'hide_code_latexpdf', 'hide_code_pdf', 'hide_code_slides', 'html',
    'html_ch', 'html_embed', 'html_toc', 'html_with_lenvs',
    'html_with_toclenvs', 'latex', 'latex_with_lenvs', 'markdown', 'notebook',
    'pdf', 'python', 'rst', 'script', 'selectLanguage', 'slides',
    'slides_with_lenvs', 'webpdf'] or a dotted object name that represents the
    import path for an `Exporter` class
--template=<Unicode> (TemplateExporter.template_name)
    Default: ''
    Name of the template to use
--template-file=<Unicode> (TemplateExporter.template_file)
    Default: None
    Name of the template file to use
--writer=<DottedObjectName> (NbConvertApp.writer_class)
    Default: 'FilesWriter'
    Writer class used to write the  results of the conversion
--post=<DottedOrNone> (NbConvertApp.postprocessor_class)
    Default: ''
    PostProcessor class used to write the results of the conversion
--output=<Unicode> (NbConvertApp.output_base)
    Default: ''
    overwrite base name use for output files. can only be used when converting
    one notebook at a time.
--output-dir=<Unicode> (FilesWriter.build_directory)
    Default: ''
    Directory to write output(s) to. Defaults to output to the directory of each
    notebook. To recover previous default behaviour (outputting to the current
    working directory) use . as the flag value.
--reveal-prefix=<Unicode> (SlidesExporter.reveal_url_prefix)
    Default: ''
    The URL prefix for reveal.js (version 3.x). This defaults to the reveal CDN,
    but can be any url pointing to a copy  of reveal.js.
    For speaker notes to work, this must be a relative path to a local  copy of
    reveal.js: e.g., "reveal.js".
    If a relative path is given, it must be a subdirectory of the current
    directory (from which the server is run).
    See the usage documentation
    (https://nbconvert.readthedocs.io/en/latest/usage.html#reveal-js-html-
    slideshow) for more details.
--nbformat=<Enum> (NotebookExporter.nbformat_version)
    Default: 4
    Choices: [1, 2, 3, 4]
    The nbformat version to write. Use this to downgrade notebooks.

To see all available configurables, use `--help-all`

Examples
--------

    The simplest way to use nbconvert is
    
    > jupyter nbconvert mynotebook.ipynb --to html
    
    Options include ['asciidoc', 'custom', 'hide_code_html', 'hide_code_latex', 'hide_code_latexpdf', 'hide_code_pdf', 'hide_code_slides', 'html', 'html_ch', 'html_embed', 'html_toc', 'html_with_lenvs', 'html_with_toclenvs', 'latex', 'latex_with_lenvs', 'markdown', 'notebook', 'pdf', 'python', 'rst', 'script', 'selectLanguage', 'slides', 'slides_with_lenvs', 'webpdf'].
    
    > jupyter nbconvert --to latex mynotebook.ipynb
    
    Both HTML and LaTeX support multiple output templates. LaTeX includes
    'base', 'article' and 'report'.  HTML includes 'basic' and 'full'. You
    can specify the flavor of the format used.
    
    > jupyter nbconvert --to html --template lab mynotebook.ipynb
    
    You can also pipe the output to stdout, rather than a file
    
    > jupyter nbconvert mynotebook.ipynb --stdout
    
    PDF is generated via latex
    
    > jupyter nbconvert mynotebook.ipynb --to pdf
    
    You can get (and serve) a Reveal.js-powered slideshow
    
    > jupyter nbconvert myslides.ipynb --to slides --post serve
    
    Multiple notebooks can be given at the command line in a couple of 
    different ways:
    
    > jupyter nbconvert notebook*.ipynb
    > jupyter nbconvert notebook1.ipynb notebook2.ipynb
    
    or you can specify the notebooks list in a config file, containing::
    
        c.NbConvertApp.notebooks = ["my_notebook.ipynb"]
    
    > jupyter nbconvert --config mycfg.py

]0;~/Notebooks/Examples/03 - Chapter 10 Vapor Power Cycles[01;34m~/Notebooks/Examples/03 - Chapter 10 Vapor Power Cycles[00m$ 
]0;~/Notebooks/Examples/03 - Chapter 10 Vapor Power Cycles[01;34m~/Notebooks/Examples/03 - Chapter 10 Vapor Power Cycles[00m$ 
]0;~/Notebooks/Examples/03 - Chapter 10 Vapor Power Cycles[01;34m~/Notebooks/Examples/03 - Chapter 10 Vapor Power Cycles[00m$ 
]0;~/Notebooks/Examples/03 - Chapter 10 Vapor Power Cycles[01;34m~/Notebooks/Examples/03 - Chapter 10 Vapor Power Cycles[00m$ 
]0;~/Notebooks/Examples/03 - Chapter 10 Vapor Power Cycles[01;34m~/Notebooks/Examples/03 - Chapter 10 Vapor Power Cycles[00m$ 
]0;~/Notebooks/Examples/03 - Chapter 10 Vapor Power Cycles[01;34m~/Notebooks/Examples/03 - Chapter 10 Vapor Power Cycles[00m$ 
]0;~/Notebooks/Examples/03 - Chapter 10 Vapor Power Cycles[01;34m~/Notebooks/Examples/03 - Chapter 10 Vapor Power Cycles[00m$ 
]0;~/Notebooks/Examples/03 - Chapter 10 Vapor Power Cycles[01;34m~/Notebooks/Examples/03 - Chapter 10 Vapor Power Cycles[00m$ 
]0;~/Notebooks/Examples/03 - Chapter 10 Vapor Power Cycles[01;34m~/Notebooks/Examples/03 - Chapter 10 Vapor Power Cycles[00m$ 
]0;~/Notebooks/Examples/03 - Chapter 10 Vapor Power Cycles[01;34m~/Notebooks/Examples/03 - Chapter 10 Vapor Power Cycles[00m$ 
]0;~/Notebooks/Examples/03 - Chapter 10 Vapor Power Cycles[01;34m~/Notebooks/Examples/03 - Chapter 10 Vapor Power Cycles[00m$ 
]0;~/Notebooks/Examples/03 - Chapter 10 Vapor Power Cycles[01;34m~/Notebooks/Examples/03 - Chapter 10 Vapor Power Cycles[00m$ 
]0;~/Notebooks/Examples/03 - Chapter 10 Vapor Power Cycles[01;34m~/Notebooks/Examples/03 - Chapter 10 Vapor Power Cycles[00m$ 
]0;~/Notebooks/Examples/03 - Chapter 10 Vapor Power Cycles[01;34m~/Notebooks/Examples/03 - Chapter 10 Vapor Power Cycles[00m$ 
]0;~/Notebooks/Examples/03 - Chapter 10 Vapor Power Cycles[01;34m~/Notebooks/Examples/03 - Chapter 10 Vapor Power Cycles[00m$ 
]0;~/Notebooks/Examples/03 - Chapter 10 Vapor Power Cycles[01;34m~/Notebooks/Examples/03 - Chapter 10 Vapor Power Cycles[00m$ 
]0;~/Notebooks/Examples/03 - Chapter 10 Vapor Power Cycles[01;34m~/Notebooks/Examples/03 - Chapter 10 Vapor Power Cycles[00m$ 
]0;~/Notebooks/Examples/03 - Chapter 10 Vapor Power Cycles[01;34m~/Notebooks/Examples/03 - Chapter 10 Vapor Power Cycles[00m$ 
]0;~/Notebooks/Examples/03 - Chapter 10 Vapor Power Cycles[01;34m~/Notebooks/Examples/03 - Chapter 10 Vapor Power Cycles[00m$ 
]0;~/Notebooks/Examples/03 - Chapter 10 Vapor Power Cycles[01;34m~/Notebooks/Examples/03 - Chapter 10 Vapor Power Cycles[00m$ cat ~/bin/homework_submission.sh 
#/bin/bash

jupyter nbconvert --to html_embed --no-input "$1"]0;~/Notebooks/Examples/03 - Chapter 10 Vapor Power Cycles[01;34m~/Notebooks/Examples/03 - Chapter 10 Vapor Power Cycles[00m$ [K]0;~/Notebooks/Examples/03 - Chapter 10 Vapor Power Cycles[01;34m~/Notebooks/Examples/03 - Chapter 10 Vapor Power Cycles[00m$ [K]0;~/Notebooks/Examples/03 - Chapter 10 Vapor Power Cycles[01;34m~/Notebooks/Examples/03 - Chapter 10 Vapor Power Cycles[00m$ ls
'Ex10.1 Ideal Rankine Cycle.ipynb'      'Ex10.4 Rankine with Reheat.ipynb'
'Ex10.2 Non-Ideal Rankine Cycle.ipynb'  'Ex10.5 Rankine with Reheat and OFH Regeneration.ipynb'
'Ex10.3 Rankine with Superheat.ipynb'   'Ex10.6 Rankine with Reheat and CFH Regeneration.ipynb'
]0;~/Notebooks/Examples/03 - Chapter 10 Vapor Power Cycles[01;34m~/Notebooks/Examples/03 - Chapter 10 Vapor Power Cycles[00m$ [K]0;~/Notebooks/Examples/03 - Chapter 10 Vapor Power Cycles[01;34m~/Notebooks/Examples/03 - Chapter 10 Vapor Power Cycles[00m$ [K]0;~/Notebooks/Examples/03 - Chapter 10 Vapor Power Cycles[01;34m~/Notebooks/Examples/03 - Chapter 10 Vapor Power Cycles[00m$ [K]0;~/Notebooks/Examples/03 - Chapter 10 Vapor Power Cycles[01;34m~/Notebooks/Examples/03 - Chapter 10 Vapor Power Cycles[00m$ 