{"attachments":{"90020869-2a7e-4630-a16e-bfdb4c7d56fe.png":{"type":"sha1","value":"daddaa8a413be62232cb5997b9c84f1c58a63bb0"}},"cell_type":"markdown","id":"7f69c4","input":"## Problem Statement\nA Rankine cycle operates with water as the working fluid with a turbine inlet pressure of 3 MPa, a condenser pressure of 15 kPa, and no superheat in the boiler.  For reversible work devices and $\\dot{W}_\\text{Net}=1\\ \\mathrm{MW}$ Find:\n* (a) Mass flow rate of steam (kg/s)\n* (b) Boiler heat transfer (MW)\n* (c) Thermal efficiency of the cycle\n* (d) Sketch a $T$-$s$ diagram of the cycle\n\n![image.png](attachment:90020869-2a7e-4630-a16e-bfdb4c7d56fe.png)","pos":1,"type":"cell"}
{"backend_state":"running","kernel":"python3","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":80556032},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.2"}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"4710fe","input":"","pos":2,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"ec37c6","input":"","pos":20,"type":"cell"}
{"cell_type":"code","exec_count":1,"id":"0b3194","input":"from thermoJFM.templates.default import *\n   \nwater = realfluid.Properties('Water')","metadata":{"jupyter":{}},"pos":5,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"a97f43","input":"p[3] = Quantity(3,'MPa')         # Turbine inlet pressure\np[1] = p[4] = Quantity(15,'kPa') # condenser pressure\nWdot_net = Quantity(1,'MW')      # Net power \n\ndisplay.Summary(locals());","metadata":{"jupyter":{}},"output":{"0":{"data":{"text/latex":"\\[\\begin{aligned}{ \\dot{W}_{net} }&={  1\\ \\mathrm{MW}  }&{  }\\end{aligned}\\]","text/plain":"<IPython.core.display.Latex object>"},"exec_count":2,"output_type":"execute_result"},"1":{"data":{"text/html":"<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>p [kPa]</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>15.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3000.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>15.0</td>\n    </tr>\n  </tbody>\n</table>","text/plain":"<IPython.core.display.HTML object>"},"exec_count":2,"output_type":"execute_result"}},"pos":7,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"14e66f","input":"x[3] = 1      # No superheat\nx[1] = 0      # Single phase into pump\np[2] = p[3]   # isobaric heat exchanger\n\ndisplay.Summary(locals());","metadata":{"jupyter":{}},"output":{"0":{"data":{"text/latex":"\\[\\begin{aligned}{ \\dot{W}_{net} }&={  1\\ \\mathrm{MW}  }&{  }\\end{aligned}\\]","text/plain":"<IPython.core.display.Latex object>"},"exec_count":3,"output_type":"execute_result"},"1":{"data":{"text/html":"<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>p [kPa]</th>\n      <th>x []</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>15.0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3000.0</td>\n      <td>-</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3000.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>15.0</td>\n      <td>-</td>\n    </tr>\n  </tbody>\n</table>","text/plain":"<IPython.core.display.HTML object>"},"exec_count":3,"output_type":"execute_result"}},"pos":9,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"254034","input":"states.fix(1,water)\ndisplay.Summary(locals());","output":{"0":{"data":{"text/latex":"\\[\\begin{aligned}{ \\dot{W}_{net} }&={  1\\ \\mathrm{MW}  }&{  }\\end{aligned}\\]","text/plain":"<IPython.core.display.Latex object>"},"exec_count":5,"output_type":"execute_result"},"1":{"data":{"text/html":"<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>T [°C]</th>\n      <th>p [kPa]</th>\n      <th>v [m³/kg]</th>\n      <th>u [kJ/kg]</th>\n      <th>h [kJ/kg]</th>\n      <th>s [kJ/K/kg]</th>\n      <th>x []</th>\n      <th>phase []</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>53.9693</td>\n      <td>15.0</td>\n      <td>0.00101404</td>\n      <td>225.929</td>\n      <td>225.944</td>\n      <td>0.754865</td>\n      <td>0</td>\n      <td>twophase</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>-</td>\n      <td>3000.0</td>\n      <td>-</td>\n      <td>-</td>\n      <td>-</td>\n      <td>-</td>\n      <td>-</td>\n      <td>-</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>-</td>\n      <td>3000.0</td>\n      <td>-</td>\n      <td>-</td>\n      <td>-</td>\n      <td>-</td>\n      <td>1</td>\n      <td>-</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>-</td>\n      <td>15.0</td>\n      <td>-</td>\n      <td>-</td>\n      <td>-</td>\n      <td>-</td>\n      <td>-</td>\n      <td>-</td>\n    </tr>\n  </tbody>\n</table>","text/plain":"<IPython.core.display.HTML object>"},"exec_count":5,"output_type":"execute_result"}},"pos":10,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"74c771","input":"#### Boiler First Law\nq_2_to_3 = h[3]-h[2]\nQdot_in = mdot*q_2_to_3\n\ndisplay.Calculations(locals());","output":{"0":{"data":{"text/latex":"\\[\n  \\begin{aligned}{ q_{2\\to3} }&={ h_{3} - h_{2} }\\\\\n    &={ \\left( 2803.2\\ \\frac{\\mathrm{kJ}}{\\mathrm{kg}} \\right) - \\left( 228.97\\ \\frac{\\mathrm{kJ}}{\\mathrm{kg}} \\right) }\\\\\n    &={  2574.2\\ \\frac{\\mathrm{kJ}}{\\mathrm{kg}}  }\n  \\end{aligned}\n\\]\n","text/plain":"<IPython.core.display.Latex object>"},"exec_count":5,"output_type":"execute_result"},"1":{"data":{"text/latex":"\\[\n  \\begin{aligned}{ \\dot{Q}_{in} }&={ \\dot{m} q_{2\\to3} }\\\\\n    &={ \\left( 1.2536\\ \\frac{\\mathrm{kg}}{\\mathrm{s}} \\right) \\left( 2574.2\\ \\frac{\\mathrm{kJ}}{\\mathrm{kg}} \\right) }\\\\\n    &={  3227.0\\ \\frac{\\mathrm{kJ}}{\\mathrm{s}}  }\n  \\end{aligned}\n\\]\n","text/plain":"<IPython.core.display.Latex object>"},"exec_count":5,"output_type":"execute_result"}},"pos":14,"type":"cell"}
{"cell_type":"code","exec_count":6,"id":"66df69","input":"eta_th = Wdot_net/Qdot_in\neta_th = eta_th.to('') # hide\n\ndisplay.Calculations(locals());","output":{"0":{"data":{"text/latex":"\\[\n  \\begin{aligned}{ \\eta_{th} }&={ \\frac{\\dot{W}_{net}}{\\dot{Q}_{in}} }\\\\\n    &={ \\frac{\\left( 1\\ \\mathrm{MW} \\right)}{\\left( 3227.0\\ \\frac{\\mathrm{kJ}}{\\mathrm{s}} \\right)} }\\\\\n    &={  0.30988\\  }\n  \\end{aligned}\n\\]\n","text/plain":"<IPython.core.display.Latex object>"},"exec_count":6,"output_type":"execute_result"}},"pos":16,"type":"cell"}
{"cell_type":"code","exec_count":6,"id":"ecbf87","input":"#### State 1)\nstates.fix(1,water)\n\n#### 1-2) Isentropic compression\ns[2] = s[1]\n# T[2] = water.T(p[2],s[2])\n# h[2] = water.h(p[2],s[2])\nstates.fix(2,water)\nw_1_to_2 = h[1]-h[2]\n\n#### 2-3) Isobaric heat addition\n# T[3] = water.T(p[3],x[3])\n# h[3] = water.h(p[3],x[3])\n# s[3] = water.s(p[3],x[3])\nstates.fix(3,water)\n\n#### 3-4) Isentropic expansion\ns[4] = s[3]\n# T[4]= water.T(p[4],s[4])\n# h[4] = water.h(p[4],s[4])\n# x[4] = water.x(p[4],s[4])\nstates.fix(4,water)\nw_3_to_4 = h[3]-h[4]\n\n#### Mass flow rate\nw_net = w_1_to_2 + w_3_to_4\nmdot = Wdot_net/w_net\nmdot = mdot.to('kg/s') # hide\n\ndisplay.Summary(locals());","output":{"0":{"data":{"text/latex":"\\[\\begin{aligned}{ \\dot{W}_{net} }&={  1\\ \\mathrm{MW}  }&{ \\dot{m} }&={  1.2536\\ \\frac{\\mathrm{kg}}{\\mathrm{s}}  }&{ w_{1 to 2} }&={  -3.025\\ \\frac{\\mathrm{kJ}}{\\mathrm{kg}}  }\\\\{ w_{3 to 4} }&={  800.72\\ \\frac{\\mathrm{kJ}}{\\mathrm{kg}}  }&{ w_{net} }&={  797.69\\ \\frac{\\mathrm{kJ}}{\\mathrm{kg}}  }&{  }\\end{aligned}\\]","text/plain":"<IPython.core.display.Latex object>"},"exec_count":6,"output_type":"execute_result"},"1":{"data":{"text/html":"<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>T [°C]</th>\n      <th>p [kPa]</th>\n      <th>v [m³/kg]</th>\n      <th>u [kJ/kg]</th>\n      <th>h [kJ/kg]</th>\n      <th>s [kJ/K/kg]</th>\n      <th>x []</th>\n      <th>phase []</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>53.969313</td>\n      <td>15.0</td>\n      <td>0.001014</td>\n      <td>225.929071</td>\n      <td>225.944282</td>\n      <td>0.754865</td>\n      <td>0.000000</td>\n      <td>twophase</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>54.084027</td>\n      <td>3000.0</td>\n      <td>0.001013</td>\n      <td>225.930994</td>\n      <td>228.969291</td>\n      <td>0.754865</td>\n      <td>-1.000000</td>\n      <td>liquid</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>233.853107</td>\n      <td>3000.0</td>\n      <td>0.066664</td>\n      <td>2603.160012</td>\n      <td>2803.153097</td>\n      <td>6.185583</td>\n      <td>1.000000</td>\n      <td>twophase</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>53.969313</td>\n      <td>15.0</td>\n      <td>7.503663</td>\n      <td>1889.882282</td>\n      <td>2002.437223</td>\n      <td>6.185583</td>\n      <td>0.748836</td>\n      <td>twophase</td>\n    </tr>\n  </tbody>\n</table>","text/plain":"<IPython.core.display.HTML object>"},"exec_count":6,"output_type":"execute_result"}},"pos":12,"type":"cell"}
{"cell_type":"code","exec_count":7,"id":"9d8d76","input":"pv = water.pv_diagram()\n\nfor state in [1,2,3,4]:\n    v[state] = water.v(p[state],h=h[state])\n    pv.plot_state(states[state])\n    \npv.plot_process(states[1],states[2],path='isentropic')\npv.plot_process(states[2],states[3],path='isobaric')\npv.plot_process(states[3],states[4],path='isentropic')\npv.plot_process(states[4],states[1],path='isobaric');","output":{"0":{"name":"stdout","output_type":"stream","text":"None\n"},"1":{"data":{"image/png":"2209eb32ecfa408eee49a48d31e3bb4c749dd351","text/plain":"<Figure size 720x480 with 1 Axes>"},"exec_count":7,"metadata":{"image/png":{"height":428,"width":633},"needs_background":"light"},"output_type":"execute_result"}},"pos":18,"type":"cell"}
{"cell_type":"code","exec_count":8,"id":"389627","input":"Ts = water.Ts_diagram()\n\nTs.plot_state(states[1],label_loc='south east')\nTs.plot_state(states[2],label_loc='north west')\nTs.plot_state(states[3],label_loc='north east')\nTs.plot_state(states[4],label_loc='east')\n    \nTs.plot_process(states[1],states[2],path='isentropic')\nTs.plot_process(states[2],states[3],path='isobaric')\nTs.plot_process(states[3],states[4],path='isentropic')\nTs.plot_process(states[4],states[1],path='isobaric');","output":{"0":{"name":"stdout","output_type":"stream","text":"None\n"},"1":{"data":{"image/png":"ed3447b7f34cdc5a86179efbdb106c9ea42ab6b0","text/plain":"<Figure size 720x480 with 1 Axes>"},"exec_count":8,"metadata":{"image/png":{"height":427,"width":634},"needs_background":"light"},"output_type":"execute_result"}},"pos":19,"type":"cell"}
{"cell_type":"markdown","id":"039d0c","input":"### Python Initialization\nWe'll start by importing the libraries we will use for our analysis and initializing dictionaries to hold the properties we will be usings.","pos":4,"type":"cell"}
{"cell_type":"markdown","id":"0fb9b2","input":"### Assumptions\n- Ideal work devices\n- No superheat: saturated vapor at boiler exit\n- Single phase into pump: saturated liquid at condenser exit\n- Isobaric heat exchagners\n- Negligible changes in kinetic energy\n- Negligible changes in potential energy","pos":8,"type":"cell"}
{"cell_type":"markdown","id":"394874","input":"## Solution\n","pos":3,"type":"cell"}
{"cell_type":"markdown","id":"3cec47","input":"# Example 10.1: Ideal Rankine Cycle\n\n*John F. Maddox, Ph.D., P.E.<br>\nUniversity of Kentucky - Paducah Campus<br>\nME 321: Engineering Thermodynamics II<br>*","pos":0,"type":"cell"}
{"cell_type":"markdown","id":"82d9ff","input":"#### (c) Thermal efficiency","pos":15,"type":"cell"}
{"cell_type":"markdown","id":"9783be","input":"#### (d) Diagrams","pos":17,"type":"cell"}
{"cell_type":"markdown","id":"af90fe","input":"### Given Parameters\nWe now define variables to hold our known values.","pos":6,"type":"cell"}
{"cell_type":"markdown","id":"b3d8c2","input":"#### (b) Boiler heat transfer (MW)","pos":13,"type":"cell"}
{"cell_type":"markdown","id":"ebb6c3","input":"#### (a) Mass flow rate","pos":11,"type":"cell"}
{"id":0,"time":1601908444114,"type":"user"}
{"last_load":1601908445296,"type":"file"}