{"attachments":{"90020869-2a7e-4630-a16e-bfdb4c7d56fe.png":{"type":"sha1","value":"daddaa8a413be62232cb5997b9c84f1c58a63bb0"}},"cell_type":"markdown","id":"12da48","input":"## Problem Statement\nA Rankine cycle operates with water as the working fluid with a turbine inlet pressure of 3 MPa, a condenser pressure of 15 kPa, and no superheat in the boiler.  For For isentropic efficiencies of $\\eta_t=0.8$ and $\\eta_p=0.6$  and $\\dot{W}_\\text{Net}=1\\ \\mathrm{MW}$ Find:\n* (a) Mass flow rate of steam (kg/s)\n* (b) Boiler heat transfer (MW)\n* (c) Thermal efficiency of the cycle\n* (d) Sketch a $T$-$s$ diagram of the cycle\n\n![image.png](attachment:90020869-2a7e-4630-a16e-bfdb4c7d56fe.png)","pos":1,"state":"done","type":"cell"}
{"backend_state":"running","kernel":"python3","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":80683008},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.9"}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1601475427516,"exec_count":1,"id":"f5cf90","input":"from thermoJFM.templates.default import *\n   \nwater = realfluid.Properties('Water')","kernel":"python3","metadata":{"jupyter":{}},"no_halt":true,"pos":4,"start":1601475422131,"state":"done","type":"cell"}
{"cell_type":"code","end":1601475427670,"exec_count":2,"id":"ed7c65","input":"p[3] = Quantity(3,'MPa')         # Turbine inlet pressure\np[1] = p[4] = Quantity(15,'kPa') # Condenser pressure\nWdot_net = Quantity(1,'MW')      # Net power \neta_t = 0.8                      # Turbine isentropic efficiency\neta_p = 0.6                      # Pump isentropic efficiency\n\ndisplay.Summary(locals());","kernel":"python3","metadata":{"jupyter":{}},"no_halt":true,"output":{"0":{"data":{"text/latex":"\\[\\begin{aligned}{ \\dot{W}_{net} }&={  1\\ \\mathrm{MW}  }&{  }\\end{aligned}\\]","text/plain":"<IPython.core.display.Latex object>"}},"1":{"data":{"text/html":"<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>p [kPa]</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>15.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3000.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>15.0</td>\n    </tr>\n  </tbody>\n</table>","text/plain":"<IPython.core.display.HTML object>"}}},"pos":6,"start":1601475427531,"state":"done","type":"cell"}
{"cell_type":"code","end":1601475427843,"exec_count":3,"id":"e34336","input":"x[3] = 1      # No superheat\nx[1] = 0      # Single phase into pump\np[2] = p[3]   # isobaric heat exchanger\n\ndisplay.Summary(locals());","kernel":"python3","metadata":{"jupyter":{}},"no_halt":true,"output":{"0":{"data":{"text/latex":"\\[\\begin{aligned}{ \\dot{W}_{net} }&={  1\\ \\mathrm{MW}  }&{  }\\end{aligned}\\]","text/plain":"<IPython.core.display.Latex object>"}},"1":{"data":{"text/html":"<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>p [kPa]</th>\n      <th>x []</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>15.0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3000.0</td>\n      <td>-</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3000.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>15.0</td>\n      <td>-</td>\n    </tr>\n  </tbody>\n</table>","text/plain":"<IPython.core.display.HTML object>"}}},"pos":8,"start":1601475427692,"state":"done","type":"cell"}
{"cell_type":"code","end":1601475427964,"exec_count":4,"id":"20e722","input":"#### State 1)\nT[1] = water.T(p[1],x[1])\nv[1] = water.v(p[1],x[1])\nh[1] = water.h(p[1],x[1])\ns[1] = water.s(p[1],x[1])\n\n#### 1-2) Non-ideal compression\n# Isentropic compression\np['2s'] = p[2]\ns['2s'] = s[1]\nT['2s'] = water.T(p['2s'],s['2s'])\nh['2s'] = water.h(p['2s'],s['2s'])\nv['2s'] = water.v(p['2s'],s['2s'])\n# Actual compression\nh[2] = h[1] + (h['2s']-h[1])/eta_p\nT[2] = water.T(p[2],h=h[2])\nv[2] = water.v(p[2],h=h[2])\ns[2] = water.s(p[2],h=h[2])\nw_1_to_2 = h[1]-h[2]\n\n#### 2-3) Isobaric heat addition\nT[3] = water.T(p[3],x[3])\nv[3] = water.v(p[3],x[3])\nh[3] = water.h(p[3],x[3])\ns[3] = water.s(p[3],x[3])\n\n#### 3-4) Non-ideal expansion\n# Isentropic Expansion\np['4s'] = p[4]\ns['4s'] = s[3]\nT['4s']= water.T(p['4s'],s['4s'])\nv['4s']= water.v(p['4s'],s['4s'])\nh['4s'] = water.h(p['4s'],s['4s'])\nx['4s'] = water.x(p['4s'],s['4s'])\n# Actual expansion\nh[4] = h[3] - eta_t*(h[3]-h['4s'])\nT[4] = water.T(p[4],h=h[4])\nv[4] = water.v(p[4],h=h[4])\ns[4] = water.s(p[4],h=h[4])\nx[4] = water.x(p[4],h=h[4])\nw_3_to_4 = h[3]-h[4]\n\n#### Mass flow rate\nw_net = w_1_to_2 + w_3_to_4\nmdot = Wdot_net/w_net\nmdot = mdot.to('kg/s') # hide\n\ndisplay.Summary(locals());","kernel":"python3","no_halt":true,"output":{"0":{"data":{"text/latex":"\\[\\begin{aligned}{ \\dot{W}_{net} }&={  1\\ \\mathrm{MW}  }&{ \\dot{m} }&={  1.5735\\ \\frac{\\mathrm{kg}}{\\mathrm{s}}  }&{ w_{1 to 2} }&={  -5.0417\\ \\frac{\\mathrm{kJ}}{\\mathrm{kg}}  }\\\\{ w_{3 to 4} }&={  640.57\\ \\frac{\\mathrm{kJ}}{\\mathrm{kg}}  }&{ w_{net} }&={  635.53\\ \\frac{\\mathrm{kJ}}{\\mathrm{kg}}  }&{  }\\end{aligned}\\]","text/plain":"<IPython.core.display.Latex object>"}},"1":{"data":{"text/html":"<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>T [°C]</th>\n      <th>p [kPa]</th>\n      <th>v [m³/kg]</th>\n      <th>h [kJ/kg]</th>\n      <th>s [kJ/K/kg]</th>\n      <th>x []</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>53.969313</td>\n      <td>15.0</td>\n      <td>0.001014</td>\n      <td>225.944282</td>\n      <td>0.754865</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>54.566922</td>\n      <td>3000.0</td>\n      <td>0.001013</td>\n      <td>230.985965</td>\n      <td>0.761023</td>\n      <td>-</td>\n    </tr>\n    <tr>\n      <th>2s</th>\n      <td>54.084027</td>\n      <td>3000.0</td>\n      <td>0.001013</td>\n      <td>228.969291</td>\n      <td>0.754865</td>\n      <td>-</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>233.853107</td>\n      <td>3000.0</td>\n      <td>0.066664</td>\n      <td>2803.153097</td>\n      <td>6.185583</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>53.969313</td>\n      <td>15.0</td>\n      <td>8.179994</td>\n      <td>2162.580397</td>\n      <td>6.675139</td>\n      <td>0.81634</td>\n    </tr>\n    <tr>\n      <th>4s</th>\n      <td>53.969313</td>\n      <td>15.0</td>\n      <td>7.503663</td>\n      <td>2002.437223</td>\n      <td>6.185583</td>\n      <td>0.748836</td>\n    </tr>\n  </tbody>\n</table>","text/plain":"<IPython.core.display.HTML object>"}}},"pos":10,"start":1601475427869,"state":"done","type":"cell"}
{"cell_type":"code","end":1601475428458,"exec_count":5,"id":"3dc298","input":"#### Boiler First Law\nq_2_to_3 = h[3]-h[2]\nQdot_in = mdot*q_2_to_3\n\ndisplay.Calculations(locals());","kernel":"python3","no_halt":true,"output":{"0":{"data":{"text/latex":"\\[\n  \\begin{aligned}{ q_{2\\to3} }&={ h_{3} - h_{2} }\\\\\n    &={ \\left( 2803.2\\ \\frac{\\mathrm{kJ}}{\\mathrm{kg}} \\right) - \\left( 230.99\\ \\frac{\\mathrm{kJ}}{\\mathrm{kg}} \\right) }\\\\\n    &={  2572.2\\ \\frac{\\mathrm{kJ}}{\\mathrm{kg}}  }\n  \\end{aligned}\n\\]\n","text/plain":"<IPython.core.display.Latex object>"}},"1":{"data":{"text/latex":"\\[\n  \\begin{aligned}{ \\dot{Q}_{in} }&={ \\dot{m} q_{2\\to3} }\\\\\n    &={ \\left( 1.5735\\ \\frac{\\mathrm{kg}}{\\mathrm{s}} \\right) \\left( 2572.2\\ \\frac{\\mathrm{kJ}}{\\mathrm{kg}} \\right) }\\\\\n    &={  4047.3\\ \\frac{\\mathrm{kJ}}{\\mathrm{s}}  }\n  \\end{aligned}\n\\]\n","text/plain":"<IPython.core.display.Latex object>"}}},"pos":12,"start":1601475427983,"state":"done","type":"cell"}
{"cell_type":"code","end":1601475428479,"exec_count":6,"id":"13e784","input":"eta_th = Wdot_net/Qdot_in\neta_th = eta_th.to('') # hide\n\ndisplay.Calculations(locals());","kernel":"python3","no_halt":true,"output":{"0":{"data":{"text/latex":"\\[\n  \\begin{aligned}{ \\eta_{th} }&={ \\frac{\\dot{W}_{net}}{\\dot{Q}_{in}} }\\\\\n    &={ \\frac{\\left( 1\\ \\mathrm{MW} \\right)}{\\left( 4047.3\\ \\frac{\\mathrm{kJ}}{\\mathrm{s}} \\right)} }\\\\\n    &={  0.24708\\  }\n  \\end{aligned}\n\\]\n","text/plain":"<IPython.core.display.Latex object>"}}},"pos":14,"start":1601475428473,"state":"done","type":"cell"}
{"cell_type":"code","end":1601475432211,"exec_count":7,"id":"5c16d2","input":"pv = water.pv_diagram()\n\nfor state in [1,2,3,4]:\n    v[state] = water.v(p[state],h=h[state])\n    pv.plot_state(states[state])\n    \npv.plot_process(states[1],states[2],path='nonideal')\npv.plot_process(states[2],states[3],path='isobaric')\npv.plot_process(states[3],states[4],path='nonideal')\npv.plot_process(states[4],states[1],path='isobaric');","kernel":"python3","no_halt":true,"output":{"0":{"name":"stdout","text":"None\n"},"1":{"data":{"image/png":"c3f7e148844e6b26c69d5cecf7625e774852f5bf","text/plain":"<Figure size 720x480 with 1 Axes>"},"metadata":{"image/png":{"height":428,"width":633},"needs_background":"light"}}},"pos":16,"start":1601475428485,"state":"done","type":"cell"}
{"cell_type":"code","end":1601475434842,"exec_count":8,"id":"ac441c","input":"Ts = water.Ts_diagram()\n\nTs.plot_state(states[1],label_loc='south east')\nTs.plot_state(states[2],label_loc='north west')\nTs.plot_state(states[3],label_loc='north east')\nTs.plot_state(states[4],label_loc='east')\n    \nTs.plot_process(states[1],states[2],path='nonideal')\nTs.plot_process(states[2],states[3],path='isobaric')\nTs.plot_process(states[3],states[4],path='nonideal')\nTs.plot_process(states[3],states['4s'],path='isentropic',linestyle='dashed')\nTs.plot_process(states[4],states[1],path='isobaric');","kernel":"python3","no_halt":true,"output":{"0":{"name":"stdout","text":"None\n"},"1":{"data":{"image/png":"5063b6ca73a7860b6e961b0f7e6f348dc123c7ec","text/plain":"<Figure size 720x480 with 1 Axes>"},"metadata":{"image/png":{"height":427,"width":634},"needs_background":"light"}}},"pos":17,"start":1601475432225,"state":"done","type":"cell"}
{"cell_type":"code","id":"7dd7f6","input":"","pos":18,"type":"cell"}
{"cell_type":"markdown","id":"046d78","input":"## Solution\n","pos":2,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"04f6ad","input":"### Assumptions\n- Non-ideal work devices\n- No superheat: saturated vapor at boiler exit\n- Single phase into pump: saturated liquid at condenser exit\n- Isobaric heat exchagners\n- Negligible changes in kinetic energy\n- Negligible changes in potential energy","pos":7,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"378c2d","input":"#### (c) Thermal efficiency","pos":13,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"6758a7","input":"# Example 10.2: Non-Ideal Rankine Cycle\n\n*John F. Maddox, Ph.D., P.E.<br>\nUniversity of Kentucky - Paducah Campus<br>\nME 321: Engineering Thermodynamics II<br>*","pos":0,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"966931","input":"### Given Parameters\nWe now define variables to hold our known values.","pos":5,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"9f7184","input":"#### (a) Mass flow rate","pos":9,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"a86871","input":"#### (d) Diagrams","pos":15,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"bec503","input":"#### (b) Boiler heat transfer (MW)","pos":11,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"e23d63","input":"### Python Initialization\nWe'll start by importing the libraries we will use for our analysis and initializing dictionaries to hold the properties we will be usings.","pos":3,"state":"done","type":"cell"}
{"id":0,"time":1601908401922,"type":"user"}
{"last_load":1601475407735,"type":"file"}