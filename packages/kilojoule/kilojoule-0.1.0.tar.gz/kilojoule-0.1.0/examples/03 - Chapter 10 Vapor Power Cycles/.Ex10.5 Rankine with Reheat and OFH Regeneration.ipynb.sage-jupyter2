{"backend_state":"running","kernel":"python3","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":80609280},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.9"}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1601475584342,"exec_count":1,"id":"afd0f3","input":"from thermoJFM.templates.default import *\n   \nwater = realfluid.Properties('Water')","kernel":"python3","metadata":{"jupyter":{}},"pos":4,"start":1601475579012,"state":"done","type":"cell"}
{"cell_type":"code","end":1601475584399,"exec_count":2,"id":"7d5b82","input":"T[5] = Quantity(550,'degC') # Turbine inlet temperature\np[5] = Quantity(3,'MPa')    # Turbine inlet pressure\np[6] = Quantity(400,'kPa')  # Pressure after first expansion\nT[7] = Quantity(550,'degC') # Reheat temperature\np[8] = Quantity(15,'kPa')   # Pressure after second expansion\neta_t = 0.8                 # Turbine isentropic efficiency\neta_p = 0.6                 # Pump isentropic efficiency\n\ndisplay.Summary(locals());","kernel":"python3","metadata":{"jupyter":{}},"output":{"0":{"data":{"text/latex":"\\[\\begin{aligned}{  }\\end{aligned}\\]","text/plain":"<IPython.core.display.Latex object>"}},"1":{"data":{"text/html":"<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>T [°C]</th>\n      <th>p [kPa]</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>5</th>\n      <td>550</td>\n      <td>3000</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>-</td>\n      <td>400</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>550</td>\n      <td>-</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>-</td>\n      <td>15</td>\n    </tr>\n  </tbody>\n</table>","text/plain":"<IPython.core.display.HTML object>"}}},"pos":6,"start":1601475584357,"state":"done","type":"cell"}
{"cell_type":"code","end":1601475584537,"exec_count":3,"id":"827aaf","input":"x[1] = 0            # Single phase into pump\nx[3] = 0            # Single phase into pump\np[1] = p[8]         # isobaric heat exchanger\np[2] = p[3] = p[6]  # isobaric heat exchanger\np[7] = p[6]         # isobaric heat exchanger\np[4] = p[5]         # isobaric heat exchanger\n\ndisplay.Summary(locals());","kernel":"python3","metadata":{"jupyter":{}},"output":{"0":{"data":{"text/latex":"\\[\\begin{aligned}{  }\\end{aligned}\\]","text/plain":"<IPython.core.display.Latex object>"}},"1":{"data":{"text/html":"<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>T [°C]</th>\n      <th>p [kPa]</th>\n      <th>x []</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>-</td>\n      <td>15.0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>-</td>\n      <td>400.0</td>\n      <td>-</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>-</td>\n      <td>400.0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>-</td>\n      <td>3000.0</td>\n      <td>-</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>550</td>\n      <td>3000.0</td>\n      <td>-</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>-</td>\n      <td>400.0</td>\n      <td>-</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>550</td>\n      <td>400.0</td>\n      <td>-</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>-</td>\n      <td>15.0</td>\n      <td>-</td>\n    </tr>\n  </tbody>\n</table>","text/plain":"<IPython.core.display.HTML object>"}}},"pos":8,"start":1601475584409,"state":"done","type":"cell"}
{"cell_type":"code","end":1601475584873,"exec_count":4,"id":"98cd92","input":"#### State 1)\nT[1] = water.T(p[1],x[1])\nv[1] = water.v(p[1],x[1])\nh[1] = water.h(p[1],x[1])\ns[1] = water.s(p[1],x[1])\n\n#### 1-2) Non-ideal compression\n# Isentropic compression\np['2s'] = p[2]\ns['2s'] = s[1]\nT['2s'] = water.T(p['2s'],s['2s'])\nh['2s'] = water.h(p['2s'],s['2s'])\nv['2s'] = water.v(p['2s'],s['2s'])\n# Actual compression\nh[2] = h[1] + (h['2s']-h[1])/eta_p\nT[2] = water.T(p[2],h=h[2])\nv[2] = water.v(p[2],h=h[2])\ns[2] = water.s(p[2],h=h[2])\n\n#### State 3) \nT[3] = water.T(p[3],x[3])\nv[3] = water.v(p[3],x[3])\nh[3] = water.h(p[3],x[3])\ns[3] = water.s(p[3],x[3])\n\n#### 3-4) Non-ideal compression\n# Isentropic compression\np['4s'] = p[4]\ns['4s'] = s[3]\nT['4s'] = water.T(p['4s'],s['4s'])\nh['4s'] = water.h(p['4s'],s['4s'])\nv['4s'] = water.v(p['4s'],s['4s'])\n# Actual compression\nh[4] = h[3] + (h['4s']-h[3])/eta_p\nT[4] = water.T(p[4],h=h[4])\nv[4] = water.v(p[4],h=h[4])\ns[4] = water.s(p[4],h=h[4])\n\n#### 4-5) Isobaric heat addition\nv[5] = water.v(T[5],p[5])\nh[5] = water.h(T[5],p[5])\ns[5] = water.s(T[5],p[5])\n\n#### 5-6) Non-ideal expansion\n# Isentropic Expansion\np['6s'] = p[6]\ns['6s'] = s[5]\nT['6s']= water.T(p['6s'],s['6s'])\nv['6s']= water.v(p['6s'],s['6s'])\nh['6s'] = water.h(p['6s'],s['6s'])\nx['6s'] = water.x(p['6s'],s['6s'])\n# Actual expansion\nh[6] = h[5] - eta_t*(h[5]-h['6s'])\nT[6] = water.T(p[6],h=h[6])\nv[6] = water.v(p[6],h=h[6])\ns[6] = water.s(p[6],h=h[6])\nx[6] = water.x(p[6],h=h[6])\n\n#### 6-7) Isobaric heat addition\nv[7] = water.v(T[7],p[7])\nh[7] = water.h(T[7],p[7])\ns[7] = water.s(T[7],p[7])\n\n#### 7-8) Non-ideal expansion\n# Isentropic Expansion\np['8s'] = p[8]\ns['8s'] = s[7]\nT['8s']= water.T(p['8s'],s['8s'])\nv['8s']= water.v(p['8s'],s['8s'])\nh['8s'] = water.h(p['8s'],s['8s'])\nx['8s'] = water.x(p['8s'],s['8s'])\n# Actual expansion\nh[8] = h[7] - eta_t*(h[7]-h['8s'])\nT[8] = water.T(p[8],h=h[8])\nv[8] = water.v(p[8],h=h[8])\ns[8] = water.s(p[8],h=h[8])\nx[8] = water.x(p[8],h=h[8])\n\n#### Mass bleed-off fraction\ny = (h[3]-h[2])/(h[6]-h[2])\n\n#### Work \nw_1_to_2 = (1-y)*(h[1]-h[2])\nw_3_to_4 = h[3]-h[4]\nw_5_to_6 = h[5]-h[6]\nw_7_to_8 = (1-y)*(h[7]-h[8])\nw_net = w_1_to_2 + w_3_to_4 + w_5_to_6 + w_7_to_8\n\n\ndisplay.Summary(locals());","kernel":"python3","output":{"0":{"data":{"text/latex":"\\[\\begin{aligned}{ w_{1 to 2} }&={  -0.56454\\ \\frac{\\mathrm{kJ}}{\\mathrm{kg}}  }&{ w_{3 to 4} }&={  -4.6924\\ \\frac{\\mathrm{kJ}}{\\mathrm{kg}}  }&{ w_{5 to 6} }&={  485.66\\ \\frac{\\mathrm{kJ}}{\\mathrm{kg}}  }\\\\{ w_{7 to 8} }&={  611.42\\ \\frac{\\mathrm{kJ}}{\\mathrm{kg}}  }&{ w_{net} }&={  1091.8\\ \\frac{\\mathrm{kJ}}{\\mathrm{kg}}  }&{ y }&={  0.13231\\  }\\\\{  }\\end{aligned}\\]","text/plain":"<IPython.core.display.Latex object>"}},"1":{"data":{"text/html":"<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>T [°C]</th>\n      <th>p [kPa]</th>\n      <th>v [m³/kg]</th>\n      <th>h [kJ/kg]</th>\n      <th>s [kJ/K/kg]</th>\n      <th>x []</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>53.969313</td>\n      <td>15.0</td>\n      <td>0.001014</td>\n      <td>225.944282</td>\n      <td>0.754865</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>54.046337</td>\n      <td>400.0</td>\n      <td>0.001014</td>\n      <td>226.594906</td>\n      <td>0.755660</td>\n      <td>-</td>\n    </tr>\n    <tr>\n      <th>2s</th>\n      <td>53.984105</td>\n      <td>400.0</td>\n      <td>0.001014</td>\n      <td>226.334657</td>\n      <td>0.754865</td>\n      <td>-</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>143.608359</td>\n      <td>400.0</td>\n      <td>0.001084</td>\n      <td>604.654555</td>\n      <td>1.776455</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>144.316269</td>\n      <td>3000.0</td>\n      <td>0.001083</td>\n      <td>609.346935</td>\n      <td>1.780954</td>\n      <td>-</td>\n    </tr>\n    <tr>\n      <th>4s</th>\n      <td>143.878166</td>\n      <td>3000.0</td>\n      <td>0.001082</td>\n      <td>607.469983</td>\n      <td>1.776455</td>\n      <td>-</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>550.000000</td>\n      <td>3000.0</td>\n      <td>0.124368</td>\n      <td>3569.702948</td>\n      <td>7.376848</td>\n      <td>-</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>308.262535</td>\n      <td>400.0</td>\n      <td>0.664687</td>\n      <td>3084.046040</td>\n      <td>7.597079</td>\n      <td>-1</td>\n    </tr>\n    <tr>\n      <th>6s</th>\n      <td>249.104089</td>\n      <td>400.0</td>\n      <td>0.594118</td>\n      <td>2962.631813</td>\n      <td>7.376848</td>\n      <td>-1</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>550.000000</td>\n      <td>400.0</td>\n      <td>0.947510</td>\n      <td>3593.587361</td>\n      <td>8.328669</td>\n      <td>-</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>204.912614</td>\n      <td>15.0</td>\n      <td>14.698171</td>\n      <td>2888.933076</td>\n      <td>8.737496</td>\n      <td>-1</td>\n    </tr>\n    <tr>\n      <th>8s</th>\n      <td>113.547646</td>\n      <td>15.0</td>\n      <td>11.875855</td>\n      <td>2712.769504</td>\n      <td>8.328669</td>\n      <td>-1</td>\n    </tr>\n  </tbody>\n</table>","text/plain":"<IPython.core.display.HTML object>"}}},"pos":10,"start":1601475584549,"state":"done","type":"cell"}
{"cell_type":"code","end":1601475585300,"exec_count":5,"id":"0e8af3","input":"#### Boiler First Law\nq_in = h[5]-h[4] + (1-y)*(h[7]-h[6])\n\n#### Thermal efficiency\neta_th = w_net/q_in\neta_th = eta_th.to('') # hide\n\ndisplay.Calculations(locals());","kernel":"python3","output":{"0":{"data":{"text/latex":"\\[\n  \\begin{aligned}{ q_{in} }&={ \\left(1 - y\\right) \\left(h_{7} - h_{6}\\right) + h_{5} - h_{4} }\\\\\n    &={ \\left( 1  - \\left( 0.13231\\ \\right)\\right) \\left(\\left( 3593.6\\ \\frac{\\mathrm{kJ}}{\\mathrm{kg}} \\right) - \\left( 3084.0\\ \\frac{\\mathrm{kJ}}{\\mathrm{kg}} \\right)\\right) + \\left( 3569.7\\ \\frac{\\mathrm{kJ}}{\\mathrm{kg}} \\right) - \\left( 609.35\\ \\frac{\\mathrm{kJ}}{\\mathrm{kg}} \\right) }\\\\\n    &={  3402.5\\ \\frac{\\mathrm{kJ}}{\\mathrm{kg}}  }\n  \\end{aligned}\n\\]\n","text/plain":"<IPython.core.display.Latex object>"}},"1":{"data":{"text/latex":"\\[\n  \\begin{aligned}{ \\eta_{th} }&={ \\frac{w_{net}}{q_{in}} }\\\\\n    &={ \\frac{\\left( 1091.8\\ \\frac{\\mathrm{kJ}}{\\mathrm{kg}} \\right)}{\\left( 3402.5\\ \\frac{\\mathrm{kJ}}{\\mathrm{kg}} \\right)} }\\\\\n    &={  0.32089\\  }\n  \\end{aligned}\n\\]\n","text/plain":"<IPython.core.display.Latex object>"}}},"pos":12,"start":1601475584903,"state":"done","type":"cell"}
{"cell_type":"code","end":1601475589535,"exec_count":6,"id":"061369","input":"pv = water.pv_diagram()\npv.ax.set_yscale(\"log\")\n\npv.plot_state(states[1],label_loc='south east')\npv.plot_state(states[2],label_loc='north west')\npv.plot_state(states[3],label_loc='south east')\npv.plot_state(states[4],label_loc='north west')\npv.plot_state(states[5],label_loc='north east')\npv.plot_state(states[6],label_loc='north')\npv.plot_state(states[7],label_loc='north east')\npv.plot_state(states[8],label_loc='east')\n    \npv.plot_process(states[1],states[2],path='nonideal')\npv.plot_process(states[2],states[3],path='isobaric')\npv.plot_process(states[3],states[4],path='nonideal')\npv.plot_process(states[3],states['4s'],path='isentropic',linestyle='dashed')\npv.plot_process(states[4],states[5],path='isobaric')\npv.plot_process(states[5],states[6],path='nonideal')\npv.plot_process(states[5],states['6s'],path='isentropic',linestyle='dashed')\npv.plot_process(states[6],states[7],path='isobaric')\npv.plot_process(states[7],states[8],path='nonideal')\npv.plot_process(states[7],states['8s'],path='isentropic',linestyle='dashed')\npv.plot_process(states[6],states[3],path='isobaric')\npv.plot_process(states[8],states[1],path='isobaric');","kernel":"python3","output":{"0":{"name":"stdout","text":"None\n"},"1":{"data":{"image/png":"97c82ac63372513068a28fa18f4f25ab79032533","text/plain":"<Figure size 720x480 with 1 Axes>"},"metadata":{"image/png":{"height":428,"width":633},"needs_background":"light"}}},"pos":14,"start":1601475585313,"state":"done","type":"cell"}
{"cell_type":"code","end":1601475593650,"exec_count":7,"id":"c60107","input":"Ts = water.Ts_diagram()\n\nTs.plot_state(states[1],label_loc='south east')\nTs.plot_state(states[2],label_loc='north west')\nTs.plot_state(states[3],label_loc='south east')\nTs.plot_state(states[4],label_loc='north west')\nTs.plot_state(states[5],label_loc='north east')\nTs.plot_state(states[6],label_loc='south east')\nTs.plot_state(states[7],label_loc='north east')\nTs.plot_state(states[8],label_loc='east')\n    \nTs.plot_process(states[1],states[2],path='nonideal')\nTs.plot_process(states[2],states[3],path='isobaric')\nTs.plot_process(states[3],states[4],path='nonideal')\nTs.plot_process(states[3],states['4s'],path='isentropic',linestyle='dashed')\nTs.plot_process(states[4],states[5],path='isobaric')\nTs.plot_process(states[5],states[6],path='nonideal')\nTs.plot_process(states[5],states['6s'],path='isentropic',linestyle='dashed')\nTs.plot_process(states[6],states[7],path='isobaric')\nTs.plot_process(states[7],states[8],path='nonideal')\nTs.plot_process(states[7],states['8s'],path='isentropic',linestyle='dashed')\nTs.plot_process(states[6],states[3],path='isobaric')\nTs.plot_process(states[8],states[1],path='isobaric');","kernel":"python3","output":{"0":{"name":"stdout","text":"None\n"},"1":{"data":{"image/png":"10a337cea46019fe4325b9fac4c977f027e10dfe","text/plain":"<Figure size 720x480 with 1 Axes>"},"metadata":{"image/png":{"height":436,"width":634},"needs_background":"light"}}},"pos":15,"start":1601475589568,"state":"done","type":"cell"}
{"cell_type":"code","id":"565c64","input":"","pos":16,"type":"cell"}
{"cell_type":"markdown","id":"483fea","input":"#### (d) Diagrams","pos":13,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"6e0396","input":"### Python Initialization\nWe'll start by importing the libraries we will use for our analysis and initializing dictionaries to hold the properties we will be usings.","pos":3,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"aebd83","input":"#### (b) Thermal efficiency","pos":11,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"b99d47","input":"### Given Parameters\nWe now define variables to hold our known values.","pos":5,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"c3d88f","input":"# Example 10.5: Rankine with Reheat and OFH Regeneration\n\n*John F. Maddox, Ph.D., P.E.<br>\nUniversity of Kentucky - Paducah Campus<br>\nME 321: Engineering Thermodynamics II<br>*","pos":0,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"c6b808","input":"## Problem Statement\nA superheat steam power plant with reheat has a turbine inlet at $3\\ \\mathrm{MPa}$ and $550^\\circ\\mathrm{C}$.  After expansion to $400\\ \\mathrm{kPa}$, a fraction of the steam is extracted and used in a regeneration process with an Open Feedwater Heater (OFH) where the exit of the OFH is saturated liquid at $400\\ \\mathrm{kPa}$.  The remaining steam is reheated to $550^\\circ\\mathrm{C}$ and then expanded to $15\\ \\mathrm{kPa}$.  For isentropic efficiencies of $\\eta_t=0.8$ and $\\eta_p=0.6$ find:\n* (a) Specific net work (kJ/kg)\n* (c) Thermal efficiency of the cycle\n* (d) Sketch a $T$-$s$ diagram of the cycle","pos":1,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"d013ec","input":"## Solution\n","pos":2,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"d3bce3","input":"### Assumptions\n- Non-ideal work devices\n- Superheat in boiler: superheated vapor at boiler exit\n- Single phase into pump: saturated liquid at condenser exit\n- Isobaric heat exchagners\n- Negligible changes in kinetic energy\n- Negligible changes in potential energy","pos":7,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"e9cccb","input":"#### (a) Specific net work","pos":9,"state":"done","type":"cell"}
{"id":0,"time":1601909624884,"type":"user"}
{"last_load":1601475567493,"type":"file"}