{"attachments":{"fe7725fe-b9c0-482e-b96e-88abb01630b0.png":{"type":"sha1","value":"f3bde77230a44a8d9a527e5e516af0e741bddacf"}},"cell_type":"markdown","id":"c84cfc","input":"## Problem Statement\nA Rankine cycle operates with water as the working fluid with a turbine inlet condition of 3 MPa and $550^\\circ\\mathrm{C}$.  After expansion to 400 kPa, the steam is reheated to $550^\\circ\\mathrm{C}$ and then expanded to 15 kPa.  For isentropic efficiencies of $\\eta_t=0.8$ and $\\eta_p=0.6$ find:\n* (a) Specific net work (kJ/kg)\n* (c) Thermal efficiency of the cycle\n* (d) Sketch a $T$-$s$ diagram of the cycle\n\n![image.png](attachment:fe7725fe-b9c0-482e-b96e-88abb01630b0.png)","pos":1,"type":"cell"}
{"backend_state":"running","kernel":"python3","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":81309696},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.5"}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"3b6abb","input":"","metadata":{"jupyter":{"outputs_hidden":false}},"pos":16,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"800b99","input":"","metadata":{"jupyter":{"outputs_hidden":false}},"pos":17,"type":"cell"}
{"cell_type":"code","exec_count":1,"id":"d9d315","input":"from thermoJFM.templates.default import *\n   \nwater = realfluid.Properties('Water')","metadata":{"jupyter":{}},"pos":4,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"59998d","input":"T[3] = Quantity(550.0,'degC') # Turbine inlet temperature\np[3] = Quantity(3.0,'MPa')    # Turbine inlet pressure\np[4] = Quantity(400.0,'kPa')  # Pressure after first expansion\nT[5] = Quantity(550.0,'degC') # Reheat temperature\np[6] = Quantity(15.0,'kPa')   # Pressure after second expansion\neta_t = 0.8                 # Turbine isentropic efficiency\neta_p = 0.6                 # Pump isentropic efficiency\n\ndisplay.Summary(locals());","metadata":{"jupyter":{}},"output":{"0":{"data":{"text/latex":"\\[\\begin{aligned}{  }\\end{aligned}\\]","text/plain":"<IPython.core.display.Latex object>"},"exec_count":2,"output_type":"execute_result"},"1":{"data":{"text/html":"<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>T [°C]</th>\n      <th>p [kPa]</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>3</th>\n      <td>550</td>\n      <td>3000</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>-</td>\n      <td>400</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>550</td>\n      <td>-</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>-</td>\n      <td>15</td>\n    </tr>\n  </tbody>\n</table>","text/plain":"<IPython.core.display.HTML object>"},"exec_count":2,"output_type":"execute_result"}},"pos":6,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"e9d78c","input":"x[1] = 0      # Single phase into pump\np[2] = p[3]   # isobaric heat exchanger\np[5] = p[4]   # isobaric heat exchanger\np[1] = p[6]   # isobaric heat exchanger\n\ndisplay.Summary(locals());","metadata":{"jupyter":{}},"output":{"0":{"data":{"text/latex":"\\[\\begin{aligned}{  }\\end{aligned}\\]","text/plain":"<IPython.core.display.Latex object>"},"exec_count":3,"output_type":"execute_result"},"1":{"data":{"text/html":"<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>T [°C]</th>\n      <th>p [kPa]</th>\n      <th>x []</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>-</td>\n      <td>15.0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>-</td>\n      <td>3000.0</td>\n      <td>-</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>550</td>\n      <td>3000.0</td>\n      <td>-</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>-</td>\n      <td>400.0</td>\n      <td>-</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>550</td>\n      <td>400.0</td>\n      <td>-</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>-</td>\n      <td>15.0</td>\n      <td>-</td>\n    </tr>\n  </tbody>\n</table>","text/plain":"<IPython.core.display.HTML object>"},"exec_count":3,"output_type":"execute_result"}},"pos":8,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"9da2b4","input":"#### State 1)\nT[1] = water.T(p[1],x[1])\nv[1] = water.v(p[1],x[1])\nh[1] = water.h(p[1],x[1])\ns[1] = water.s(p[1],x[1])\n\n#### 1-2) Non-ideal compression\n# Isentropic compression\np['2s'] = p[2]\ns['2s'] = s[1]\nT['2s'] = water.T(p['2s'],s['2s'])\nh['2s'] = water.h(p['2s'],s['2s'])\nv['2s'] = water.v(p['2s'],s['2s'])\n# Actual compression\nh[2] = h[1] + (h['2s']-h[1])/eta_p\nT[2] = water.T(p[2],h=h[2])\nv[2] = water.v(p[2],h=h[2])\ns[2] = water.s(p[2],h=h[2])\nw_1_to_2 = h[1]-h[2]\n\n#### 2-3) Isobaric heat addition\nv[3] = water.v(T[3],p[3])\nh[3] = water.h(T[3],p[3])\ns[3] = water.s(T[3],p[3])\n\n#### 3-4) Non-ideal expansion\n# Isentropic Expansion\np['4s'] = p[4]\ns['4s'] = s[3]\nT['4s']= water.T(p['4s'],s['4s'])\nv['4s']= water.v(p['4s'],s['4s'])\nh['4s'] = water.h(p['4s'],s['4s'])\nx['4s'] = water.x(p['4s'],s['4s'])\n# Actual expansion\nh[4] = h[3] - eta_t*(h[3]-h['4s'])\nT[4] = water.T(p[4],h=h[4])\nv[4] = water.v(p[4],h=h[4])\ns[4] = water.s(p[4],h=h[4])\nx[4] = water.x(p[4],h=h[4])\nw_3_to_4 = h[3]-h[4]\n\n#### 4-5) Isobaric heat addition\nv[5] = water.v(T[5],p[5])\nh[5] = water.h(T[5],p[5])\ns[5] = water.s(T[5],p[5])\n\n#### 5-6) Non-ideal expansion\n# Isentropic Expansion\np['6s'] = p[6]\ns['6s'] = s[5]\nT['6s']= water.T(p['6s'],s['6s'])\nv['6s']= water.v(p['6s'],s['6s'])\nh['6s'] = water.h(p['6s'],s['6s'])\nx['6s'] = water.x(p['6s'],s['6s'])\n# Actual expansion\nh[6] = h[5] - eta_t*(h[5]-h['6s'])\nT[6] = water.T(p[6],h=h[6])\nv[6] = water.v(p[6],h=h[6])\ns[6] = water.s(p[6],h=h[6])\nx[6] = water.x(p[6],h=h[6])\nw_5_to_6 = h[5]-h[6]\n\n#### Mass flow rate\nw_net = w_1_to_2 + w_3_to_4 + w_5_to_6\n\n\ndisplay.Summary(locals());","metadata":{"jupyter":{}},"output":{"0":{"data":{"text/latex":"\\[\\begin{aligned}{ w_{1 to 2} }&={  -5.0417\\ \\frac{\\mathrm{kJ}}{\\mathrm{kg}}  }&{ w_{3 to 4} }&={  485.66\\ \\frac{\\mathrm{kJ}}{\\mathrm{kg}}  }&{ w_{5 to 6} }&={  704.65\\ \\frac{\\mathrm{kJ}}{\\mathrm{kg}}  }\\\\{ w_{net} }&={  1185.3\\ \\frac{\\mathrm{kJ}}{\\mathrm{kg}}  }&{  }\\end{aligned}\\]","text/plain":"<IPython.core.display.Latex object>"},"exec_count":4,"output_type":"execute_result"},"1":{"data":{"text/html":"<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>T [°C]</th>\n      <th>p [kPa]</th>\n      <th>v [m³/kg]</th>\n      <th>h [kJ/kg]</th>\n      <th>s [kJ/K/kg]</th>\n      <th>x []</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>53.969313</td>\n      <td>15.0</td>\n      <td>0.001014</td>\n      <td>225.944282</td>\n      <td>0.754865</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>54.566922</td>\n      <td>3000.0</td>\n      <td>0.001013</td>\n      <td>230.985965</td>\n      <td>0.761023</td>\n      <td>-</td>\n    </tr>\n    <tr>\n      <th>2s</th>\n      <td>54.084027</td>\n      <td>3000.0</td>\n      <td>0.001013</td>\n      <td>228.969291</td>\n      <td>0.754865</td>\n      <td>-</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>550.000000</td>\n      <td>3000.0</td>\n      <td>0.124368</td>\n      <td>3569.702948</td>\n      <td>7.376848</td>\n      <td>-</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>308.262535</td>\n      <td>400.0</td>\n      <td>0.664687</td>\n      <td>3084.046040</td>\n      <td>7.597079</td>\n      <td>-1</td>\n    </tr>\n    <tr>\n      <th>4s</th>\n      <td>249.104089</td>\n      <td>400.0</td>\n      <td>0.594118</td>\n      <td>2962.631813</td>\n      <td>7.376848</td>\n      <td>-1</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>550.000000</td>\n      <td>400.0</td>\n      <td>0.947510</td>\n      <td>3593.587361</td>\n      <td>8.328669</td>\n      <td>-</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>204.912614</td>\n      <td>15.0</td>\n      <td>14.698171</td>\n      <td>2888.933076</td>\n      <td>8.737496</td>\n      <td>-1</td>\n    </tr>\n    <tr>\n      <th>6s</th>\n      <td>113.547646</td>\n      <td>15.0</td>\n      <td>11.875855</td>\n      <td>2712.769504</td>\n      <td>8.328669</td>\n      <td>-1</td>\n    </tr>\n  </tbody>\n</table>","text/plain":"<IPython.core.display.HTML object>"},"exec_count":4,"output_type":"execute_result"}},"pos":10,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"43ff58","input":"#### Boiler First Law\nq_in = h[3]-h[2] + h[5]-h[4]\n\n#### Thermal efficiency\neta_th = w_net/q_in\neta_th = eta_th.to('') # hide\n\ndisplay.Calculations(locals());","metadata":{"jupyter":{}},"output":{"0":{"data":{"text/latex":"\\[\n  \\begin{aligned}{ q_{in} }&={ h_{3} - h_{2} + h_{5} - h_{4} }\\\\\n    &={ \\left( 3569.7\\ \\frac{\\mathrm{kJ}}{\\mathrm{kg}} \\right) - \\left( 230.99\\ \\frac{\\mathrm{kJ}}{\\mathrm{kg}} \\right) + \\left( 3593.6\\ \\frac{\\mathrm{kJ}}{\\mathrm{kg}} \\right) - \\left( 3084.0\\ \\frac{\\mathrm{kJ}}{\\mathrm{kg}} \\right) }\\\\\n    &={  3848.3\\ \\frac{\\mathrm{kJ}}{\\mathrm{kg}}  }\n  \\end{aligned}\n\\]\n","text/plain":"<IPython.core.display.Latex object>"},"exec_count":5,"output_type":"execute_result"},"1":{"data":{"text/latex":"\\[\n  \\begin{aligned}{ \\eta_{th} }&={ \\frac{w_{net}}{q_{in}} }\\\\\n    &={ \\frac{\\left( 1185.3\\ \\frac{\\mathrm{kJ}}{\\mathrm{kg}} \\right)}{\\left( 3848.3\\ \\frac{\\mathrm{kJ}}{\\mathrm{kg}} \\right)} }\\\\\n    &={  0.308\\  }\n  \\end{aligned}\n\\]\n","text/plain":"<IPython.core.display.Latex object>"},"exec_count":5,"output_type":"execute_result"}},"pos":12,"type":"cell"}
{"cell_type":"code","exec_count":6,"id":"5f1002","input":"pv = water.pv_diagram()\npv.plot_isobar(p[3])\npv.plot_isobar(p[4])\npv.plot_isobar(p[6])\n\nfor state in [1,2,3,4,5,6]:\n    pv.plot_state(states[state])\n    \npv.plot_process(states[1],states[2],path='nonideal',label='pump')\npv.plot_process(states[2],states[3],path='isobaric',label='boiler')\npv.plot_process(states[3],states[4],path='nonideal',label='turbine')\npv.plot_process(states[4],states[5],path='isobaric',label='reheat',labelprops=dict(ha='right',va='top'))\npv.plot_process(states[5],states[6],path='nonideal',label='turbine')\npv.plot_process(states[6],states[1],path='isobaric',label='condenser');","metadata":{"jupyter":{}},"output":{"0":{"data":{"image/png":"fac8df7da494bc108942bb79644b1462829c9e1b","text/plain":"<Figure size 1200x800 with 1 Axes>"},"exec_count":6,"metadata":{"image/png":{"height":670,"width":1005},"needs_background":"light"},"output_type":"execute_result"}},"pos":14,"type":"cell"}
{"cell_type":"code","exec_count":7,"id":"dc5e03","input":"Ts = water.Ts_diagram()\n\nTs.plot_state(states[1],label_loc='south east')\nTs.plot_state(states[2],label_loc='north west')\nTs.plot_state(states[3],label_loc='east')\nTs.plot_state(states[4],label_loc='east')\nTs.plot_state(states[5],label_loc='east')\nTs.plot_state(states[6],label_loc='east')\n    \nTs.plot_process(states[1],states[2],path='nonideal',arrow=False)\nTs.plot_process(states[2],states[3],path='isobaric',label='boiler')\nTs.plot_process(states[3],states[4],path='nonideal',label='turbine')\nTs.plot_process(states[3],states['4s'],path='isentropic',linestyle='dashed',arrow=False)\nTs.plot_process(states[4],states[5],path='isobaric',label='reheat',labelprops=dict(va='top',pos=.25))\nTs.plot_process(states[5],states[6],path='nonideal',label='turbine')\nTs.plot_process(states[5],states['6s'],path='isentropic',linestyle='dashed',arrow=False)\nTs.plot_process(states['4s'],states[4],path='isobaric',linestyle='dashed',arrow=False)\nTs.plot_process(states[6],states[1],path='isobaric',label='condenser');\n\nTs.plot_isobar(p[3],pos=.99)\nTs.plot_isobar(p[4],pos=.99)\nTs.plot_isobar(p[6],pos=.99);","metadata":{"jupyter":{}},"output":{"0":{"data":{"image/png":"44c90f88c03ec67b30f87b09df13b936ccf7ccc7","text/plain":"<Figure size 1200x800 with 1 Axes>"},"exec_count":7,"metadata":{"image/png":{"height":698,"width":1006},"needs_background":"light"},"output_type":"execute_result"}},"pos":15,"type":"cell"}
{"cell_type":"markdown","id":"22e9dc","input":"#### (d) Diagrams","pos":13,"type":"cell"}
{"cell_type":"markdown","id":"2d9d80","input":"#### (b) Thermal efficiency","pos":11,"type":"cell"}
{"cell_type":"markdown","id":"730395","input":"## Solution\n","pos":2,"type":"cell"}
{"cell_type":"markdown","id":"7e7da9","input":"# Example 10.4: Rankine with Reheat\n\n*John F. Maddox, Ph.D., P.E.<br>\nUniversity of Kentucky - Paducah Campus<br>\nME 321: Engineering Thermodynamics II<br>*","pos":0,"type":"cell"}
{"cell_type":"markdown","id":"9e5c23","input":"### Given Parameters\nWe now define variables to hold our known values.","pos":5,"type":"cell"}
{"cell_type":"markdown","id":"a137ed","input":"#### (a) Mass flow rate","pos":9,"type":"cell"}
{"cell_type":"markdown","id":"c08bf5","input":"### Python Initialization\nWe'll start by importing the libraries we will use for our analysis and initializing dictionaries to hold the properties we will be usings.","pos":3,"type":"cell"}
{"cell_type":"markdown","id":"fe448c","input":"### Assumptions\n- Non-ideal work devices\n- Superheat in boiler: superheated vapor at boiler exit\n- Single phase into pump: saturated liquid at condenser exit\n- Isobaric heat exchagners\n- Negligible changes in kinetic energy\n- Negligible changes in potential energy","pos":7,"type":"cell"}
{"id":0,"time":1604443474747,"type":"user"}
{"last_load":1604452710910,"type":"file"}