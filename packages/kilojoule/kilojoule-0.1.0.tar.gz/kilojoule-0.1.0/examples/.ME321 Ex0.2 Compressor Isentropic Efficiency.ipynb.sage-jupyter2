{"backend_state":"running","kernel":"python3","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":85184512},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.9"}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"4ea9ff","input":"","pos":20,"type":"cell"}
{"cell_type":"code","exec_count":1,"id":"f30022","input":"from thermoJFM import Q_, units, StatesTable\nunits.default_format='.3~P'\nimport math","pos":4,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"01c3ab","input":"states = StatesTable(properties=['T','p','Vdot','s'], unit_system=\"English_R\") # define a table to store property values as various states\n\n# The following lines will define (overwrite) convenience variables in the global name space for each of the properties in the states container\nfor property in states.properties:\n    globals()[property]=states.dict[property]","pos":6,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"6a9f5a","input":"# the next three lines show different ways of achieving the result of creating a dimensional quantity, but the Q_ syntax is preferred when defining temperatures.\nT[1] = Q_(70.,'degF') \np[1] = 14.7*units.psi \nVdot[1] = 3000.*units('ft^3/min')\np[2] = 10*p[1]\neta_c = 0.8\n\nprint(states)\nprint(f'eta_c = {eta_c}')","output":{"0":{"name":"stdout","output_type":"stream","text":"  T [rankine]  p [psi] Vdot [m³/s]\n1      529.67     14.7     1.41584\n2           -    147.0           -\neta_c = 0.8\n"}},"pos":8,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"3d4122","input":"R = Q_(0.06855,'Btu/lb/degR')\nc_p = Q_(0.24,'Btu/lb/degR')\nk = 1.4 # Note: the specific heat ratio, k, is a dimensionless number\n\nprint(R)\nprint(c_p)\nprint(k)","output":{"0":{"name":"stdout","output_type":"stream","text":"0.0685 Btu/lb/rankine\n0.24 Btu/lb/rankine\n1.4\n"}},"pos":10,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"0c38be","input":"T['2s'] = T[1].to('degR')*(p[2]/p[1])**((k-1)/k)\nT[2] = T[1] + (T['2s'].to('degF')-T[1])/eta_c\n\nprint(f\"T_2s = {T['2s']:.5~P}\")\nprint(f\"T_2 = {T[2].to('degF'):.4~P} = {T[2].to('degR'):.5~P}\")","output":{"0":{"name":"stdout","output_type":"stream","text":"T_2s = 1022.6 rankine\nT_2 = 686.2 fahrenheit = 1145.9 rankine\n"}},"pos":12,"type":"cell"}
{"cell_type":"code","exec_count":6,"id":"874e08","input":"mdot = (p[1]*Vdot[1])/(R*T[1].to('degR'))\n\nprint(mdot) # Note that the units don't get converted to the simplest form by default\nprint(mdot.to('lb/min')) # but you can easily convert them to your desired form as needed\nprint(f\"mdot = {mdot.to('lb/min'):.5~P}\")\n\nWdot_c = mdot*c_p*(T[2]-T[1])\n\nprint(f\"Wdot_c = {Wdot_c:.4~P} = {Wdot_c.to('hp'):.4~P}\")","output":{"0":{"name":"stdout","output_type":"stream","text":"0.573 lb·m³·psi/Btu/s\n2.25e+02 lb/min\nmdot = 224.76 lb/min\nWdot_c = 84.77 m³·psi/s = 783.8 hp\n"}},"pos":14,"type":"cell"}
{"cell_type":"code","exec_count":7,"id":"e13234","input":"Sdot_gen = mdot*( c_p*math.log(T[2].to('degR')/T[1].to('degR')) - R*math.log(p[2]/p[1])) # we use the log function from the math library for ln\n\nprint(f\"Sdot_gen = {Sdot_gen:.5~P} = {Sdot_gen.to('Btu/min/degR'):.5~P}\")\n\nprint(states)\nstates.display()","output":{"0":{"name":"stdout","output_type":"stream","text":"Sdot_gen = 0.015682 m³·psi/rankine/s = 6.149 Btu/min/rankine\n    T [rankine] p [psi] Vdot [m³/s]\n1    529.670000    14.7     1.41584\n2s  1022.632665       -           -\n2   1145.873332     147           -\n"},"1":{"data":{"text/html":"<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>T [rankine]</th>\n      <th>p [psi]</th>\n      <th>Vdot [m³/s]</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>529.670000</td>\n      <td>14.7</td>\n      <td>1.41584</td>\n    </tr>\n    <tr>\n      <th>2s</th>\n      <td>1022.632665</td>\n      <td>-</td>\n      <td>-</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1145.873332</td>\n      <td>147</td>\n      <td>-</td>\n    </tr>\n  </tbody>\n</table>","text/plain":"<IPython.core.display.HTML object>"},"exec_count":7,"output_type":"execute_result"}},"pos":16,"type":"cell"}
{"cell_type":"code","exec_count":8,"id":"0ac6b7","input":"math.log(math.e)","output":{"0":{"data":{"text/plain":"1.0"},"exec_count":8,"output_type":"execute_result"}},"pos":18,"type":"cell"}
{"cell_type":"code","exec_count":9,"id":"c64f1d","input":"math.log10(10)","output":{"0":{"data":{"text/plain":"1.0"},"exec_count":9,"output_type":"execute_result"}},"pos":19,"type":"cell"}
{"cell_type":"markdown","id":"10aca9","input":"### Second Law Analysis\nTo determine the entropy generation, we need to do a 2nd Law analysis\n\n$$\\require{cancel}\n\\cancelto{0}{\\frac{dS_{CV}}{dt}}= \\sum_j\\frac{\\cancelto{0}{\\dot{Q}_j}}{T_j}+\\sum_i\\dot{m}_is_i-\\sum_e\\dot{m}_es_e+\\dot{S}_{gen}$$\n$$\\dot{S}_{gen} = \\dot{m}(s_e-s_i)$$\nwhich can be rewritten using the constant specific heat assumption as\n$$\\dot{S}_{gen} = \\dot{m}\\left[ c_p\\ln\\left(\\frac{T_2}{T_1}\\right)-R\\ln\\left(\\frac{p_2}{p_1}\\right)\\right]$$\nwhere the temperatures and pressure must be in absolute units for this equation to be valid.\n","pos":15,"type":"cell"}
{"cell_type":"markdown","id":"23e24f","input":"## Solution\nIn the previous example (Ex 0.1), we wrote two separate python scripts to illustrate the difference between using only the standard python library and using third-party modules.  Those two scripts were placed in two self-contained code blocks to help show the separation between the two.  In this example we will jump straight to using the third-party libraries to make things easier, and we will spread the python code out across multiple cells with explanatory text (markdown) cells to describe the code rather than using python comments.  To execute this code you will need to execute each code block in order, or select the `Run All` option for the `Cell` menu above.","pos":2,"type":"cell"}
{"cell_type":"markdown","id":"692aad","input":"## Problem Statement\nAn air compressor has an isentropic efficiency of 80% and operates in a steady-state, steady-flow (SSSF) configuration with negligible changes in kinetic and potential energy.  It receives a volumetric flow rate of 3000 CFM with an inlet pressure of $p_1=14.7\\,\\text{psia}$ and inlet temperature of $T_1=70^\\circ\\text{F}$.  It compresses the air by a factor of 10. Determine<br>\n(a) Rate of compressor work, HP<br>\n(b) Rate of entropy generation, Btu/min$^\\circ$R","pos":1,"type":"cell"}
{"cell_type":"markdown","id":"755d13","input":"Note that we used `math.log` to evaluate the natural log in the above equation.  It is common in many programming languages and higher level textbook to treat the natural log, $\\ln()$, as the default $\\log()$ and the base 10 log is only applied if it is explicity stated, i.e. $\\log_{10}()$.","pos":17,"type":"cell"}
{"cell_type":"markdown","id":"89c533","input":"*John F. Maddox, Ph.D., P.E.<br>\nUniversity of Kentucky - Paducah Campus<br>\nME 321: Engineering Thermodynamics II<br>*\n\n\n# Example 0.2: Compressor Isentropic Efficiency","pos":0,"type":"cell"}
{"cell_type":"markdown","id":"900f5e","input":"### Python Initialization\nWe'll start by importing the libraries we will use for our analysis.  ","pos":3,"type":"cell"}
{"cell_type":"markdown","id":"92b3f0","input":"Now that we know the actual exit temperature, we can find the actual rate of work using the 1st Law.\n$$\\dot{W}_c = \\dot{m}c_p(T_2-T_1)$$\nHowever, we will also need to use the ideal gas law to find the mass flow rate before applying this equation.\n$$\\dot{m}_1 = \\frac{p_1\\dot{V}_1}{RT_1}$$","pos":13,"type":"cell"}
{"cell_type":"markdown","id":"a4c6dd","input":"In the previous example we defined a new variable for each property at each state, but in this example (and future examples) we will instead store the values in a custom python data structure from thermoJFM.  This a different approach to variable naming and organization that will allow us to do some interesting things later on.","pos":5,"type":"cell"}
{"cell_type":"markdown","id":"b9bd6f","input":"\n### Assumptions\n  - Negligible changes in kinetic energy \n  - Negligible changes in potential energy \n  - Adiabatic (no heat transfer)\n  - Constant specific heat (cold-air-standard)\n  - Ideal gas (cold-air-standard)\n\nWe will pull some properties for air from the tables in the back of the book since we are assuming constant specific heat, ideal gas behavior.\n","pos":9,"type":"cell"}
{"cell_type":"markdown","id":"d54246","input":"### Given Parameters\nWe now define variables to hold our known values.","pos":7,"type":"cell"}
{"cell_type":"markdown","id":"f2342d","input":"### Isentropic Efficiency\nThe isentropic efficiency of a compressor is defined as the ratio of the work that would be required if the compressor were ideal (isentropic) and operating between the same inlet state and exit pressure as the real device to the actual work.\n$$\\eta_c=\\frac{\\dot{W}_s}{\\dot{W}_c}$$\nwhere $\\dot{W}_s$ is the rate of isentropic work and $\\dot{W}_c$ is the rate of actual compressor work.  From a first law analysis, we can rewrite the work terms as changes in enthalpy between the inlet and exit states.\n$$\\require{cancel}\n\\eta_c = \\frac{\\cancel{\\dot{m}}(h_{2s}-h_1)}{\\cancel{\\dot{m}}(h_2-h_1)}$$\nApplying the constant specific heat assumption allows us to rewrite the changes in enthalpy as $\\Delta h=c_p\\Delta T$\n$$\\require{cancel}\n\\eta_c = \\frac{\\cancel{c_p}(T_{2s}-T_1)}{\\cancel{c_p}(T_2-T_1)}$$\nOur first goal is to find the exit temperature, so we solve for $T_2$\n$$T_2 = T_1 + \\frac{T_{2s}-T_1}{\\eta_c}$$\nHowever, in order to use this equation, we first need to find the temperature of the isentropic exit state, $T_{2s}$.  We can find this using ideal gas polytropic relations with $n=k$\n$$T_{2s}=T_1\\left(\\frac{p_2}{p_1}\\right)^{\\frac{k-1}{k}}$$\nNote that in order to apply the polytropic relation above, we must convert the temperatures to absolute units, i.e. $^\\circ\\text{R}$","pos":11,"type":"cell"}
{"id":0,"time":1595869077889,"type":"user"}
{"last_load":1596214191796,"type":"file"}