{"attachments":{"tanksandturbine.png":{"type":"sha1","value":"988405d1c9140a021bece302baa29f5a5bad5c44"}},"cell_type":"markdown","id":"2897b9","input":"## Problem Statement\nA non-mixing heat exchanger is used to cool 20 kg/s of hot air from 500 K to 300 K using a supply of liquid water at $10^\\circ\\text{C}$.  The exit temperature of the water is $5^\\circ\\text{C}$ hotter than its inlet temperature.  The ambient temperature and pressure are $T_0=20^\\circ\\text{C}$ and $p_0=1\\,\\text{bar}$.\n\nDetermine:\n* (a) The mass flow rate of the water, $\\text{kg/s}$\n* (b) The rate of heat transfer, $\\text{kW}$\n* (c) The entropy generation, $\\text{kW/K}$\n* (d) The exergy destruction, $\\text{kW}$\n* (e) The second law efficiency\n* (f) The second law efficiency if the cooling water entered at $20^\\circ\\text{C}$ instead of $10^\\circ\\text{C}$\n","pos":1,"state":"done","type":"cell"}
{"backend_state":"running","kernel":"python3","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":80392192},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.9"}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1598065988682,"exec_count":14,"id":"a6aab2","input":"from thermoJFM import *\n\nproperties_dict = {\n    'T':'K',\n    'p':'kPa',\n    'h':'kJ/kg',\n    's':'kJ/kg/K',\n    'mdot':'kg/s'\n}\nstates = StatesTable(properties_dict, unit_system='SI_C')\nfor property in states.properties:\n    globals()[property] = states.dict[property]\n\nair = FluidProperties('Air', unit_system='SI_C')\nwater = FluidProperties('Water', unit_system='SI_C')\n\ndef show_calc():\n    ShowCalculations(locals(),comments=True)","kernel":"python3","pos":4,"start":1598065988599,"state":"done","type":"cell"}
{"cell_type":"code","end":1598065990133,"exec_count":15,"id":"2f302c","input":"T[0] = Q_(20,'degC')\np[0] = Q_(1,'bar')\nT[1] = Q_(500,'K')\nT[2] = Q_(300,'K')\nT[3] = Q_(10,'degC')\nT[4] = Q_(15,'degC')\nmdot[1] = Q_(20,'kg/s')\nmdot[2] = mdot[1]\np[1] = p[0]\np[2] = p[1]\np[3] = p[0]\np[4] = p[3]\n\nsc=ShowCalculations(locals(),comments=True)","kernel":"python3","output":{"0":{"data":{"text/latex":"\\begin{align}{ T_{0} }&={ \\left( 20\\ \\mathrm{°C} \\right) } = { 293.15\\ \\mathrm{K}  }\\end{align}","text/plain":"<IPython.core.display.Latex object>"}},"1":{"data":{"text/latex":"\\begin{align}{ p_{0} }&={ \\left( 1\\ \\mathrm{bar} \\right) } = { 100.0\\ \\mathrm{kPa}  }\\end{align}","text/plain":"<IPython.core.display.Latex object>"}},"10":{"data":{"text/latex":"\\begin{align}{ p_{3} }&={ p_{0} } = { 100.0\\ \\mathrm{kPa}  }\\end{align}","text/plain":"<IPython.core.display.Latex object>"}},"11":{"data":{"text/latex":"\\begin{align}{ p_{4} }&={ p_{3} } = { 100.0\\ \\mathrm{kPa}  }\\end{align}","text/plain":"<IPython.core.display.Latex object>"}},"2":{"data":{"text/latex":"\\begin{align}{ T_{1} }&={  500\\ \\mathrm{K}  }\\end{align}","text/plain":"<IPython.core.display.Latex object>"}},"3":{"data":{"text/latex":"\\begin{align}{ T_{2} }&={  300\\ \\mathrm{K}  }\\end{align}","text/plain":"<IPython.core.display.Latex object>"}},"4":{"data":{"text/latex":"\\begin{align}{ T_{3} }&={ \\left( 10\\ \\mathrm{°C} \\right) } = { 283.15\\ \\mathrm{K}  }\\end{align}","text/plain":"<IPython.core.display.Latex object>"}},"5":{"data":{"text/latex":"\\begin{align}{ T_{4} }&={ \\left( 15\\ \\mathrm{°C} \\right) } = { 288.15\\ \\mathrm{K}  }\\end{align}","text/plain":"<IPython.core.display.Latex object>"}},"6":{"data":{"text/latex":"\\begin{align}{ \\dot{m}_{1} }&={  20\\ \\frac{\\mathrm{kg}}{\\mathrm{s}}  }\\end{align}","text/plain":"<IPython.core.display.Latex object>"}},"7":{"data":{"text/latex":"\\begin{align}{ \\dot{m}_{2} }&={ \\dot{m}_{1} } = { 20\\ \\frac{\\mathrm{kg}}{\\mathrm{s}}  }\\end{align}","text/plain":"<IPython.core.display.Latex object>"}},"8":{"data":{"text/latex":"\\begin{align}{ p_{1} }&={ p_{0} } = { 100.0\\ \\mathrm{kPa}  }\\end{align}","text/plain":"<IPython.core.display.Latex object>"}},"9":{"data":{"text/latex":"\\begin{align}{ p_{2} }&={ p_{1} } = { 100.0\\ \\mathrm{kPa}  }\\end{align}","text/plain":"<IPython.core.display.Latex object>"}}},"pos":6,"start":1598065989975,"state":"done","type":"cell"}
{"cell_type":"code","end":1598065991924,"exec_count":16,"id":"bfb4e9","input":"# The properties can be can be evaluated at each state based on the temperatuer and pressure\nh[1] = air.h(T=T[1],p=p[1])\nh[2] = air.h(T=T[2],p=p[2])\nh[3] = water.h(T=T[3],p=p[3])\nh[4] = water.h(T=T[4],p=p[4])\n\n# The First Law can be used can be used to determine the mass flow rate\nmdot[3] = mdot[1]*(h[2]-h[1])/(h[3]-h[4])\nmdot[4] = mdot[1]\nmdot_water = mdot[3]\n\nsc=ShowCalculations(locals(),comments=True)","kernel":"python3","output":{"0":{"data":{"text/markdown":" The properties can be can be evaluated at each state based on the temperatuer and pressure","text/plain":"<IPython.core.display.Markdown object>"}},"1":{"data":{"text/latex":"\\begin{align}{ h_{1} }&={ \\mathrm{air.h}\\left(\\mathrm{T}=T_{1} , \\mathrm{p}=p_{1}\\right) } = { 629.4\\ \\frac{\\mathrm{kJ}}{\\mathrm{kg}}  }\\end{align}","text/plain":"<IPython.core.display.Latex object>"}},"2":{"data":{"text/latex":"\\begin{align}{ h_{2} }&={ \\mathrm{air.h}\\left(\\mathrm{T}=T_{2} , \\mathrm{p}=p_{2}\\right) } = { 426.3\\ \\frac{\\mathrm{kJ}}{\\mathrm{kg}}  }\\end{align}","text/plain":"<IPython.core.display.Latex object>"}},"3":{"data":{"text/latex":"\\begin{align}{ h_{3} }&={ \\mathrm{water.h}\\left(\\mathrm{T}=T_{3} , \\mathrm{p}=p_{3}\\right) } = { 42.118\\ \\frac{\\mathrm{kJ}}{\\mathrm{kg}}  }\\end{align}","text/plain":"<IPython.core.display.Latex object>"}},"4":{"data":{"text/latex":"\\begin{align}{ h_{4} }&={ \\mathrm{water.h}\\left(\\mathrm{T}=T_{4} , \\mathrm{p}=p_{4}\\right) } = { 63.076\\ \\frac{\\mathrm{kJ}}{\\mathrm{kg}}  }\\end{align}","text/plain":"<IPython.core.display.Latex object>"}},"5":{"data":{"text/markdown":" The First Law can be used can be used to determine the mass flow rate","text/plain":"<IPython.core.display.Markdown object>"}},"6":{"data":{"text/latex":"\\begin{align}{ \\dot{m}_{3} }&={ \\frac{\\dot{m}_{1} \\left(- h_{1} + h_{2}\\right)}{- h_{4} + h_{3}} }\\\\&={ \\frac{\\left( 20\\ \\frac{\\mathrm{kg}}{\\mathrm{s}} \\right) \\left(- \\left( 629.4\\ \\frac{\\mathrm{kJ}}{\\mathrm{kg}} \\right) + \\left( 426.3\\ \\frac{\\mathrm{kJ}}{\\mathrm{kg}} \\right)\\right)}{- \\left( 63.076\\ \\frac{\\mathrm{kJ}}{\\mathrm{kg}} \\right) + \\left( 42.118\\ \\frac{\\mathrm{kJ}}{\\mathrm{kg}} \\right)} }\\\\&={  193.81\\ \\frac{\\mathrm{kg}}{\\mathrm{s}}  }\\end{align}","text/plain":"<IPython.core.display.Latex object>"}},"7":{"data":{"text/latex":"\\begin{align}{ \\dot{m}_{4} }&={ \\dot{m}_{1} } = { 20\\ \\frac{\\mathrm{kg}}{\\mathrm{s}}  }\\end{align}","text/plain":"<IPython.core.display.Latex object>"}},"8":{"data":{"text/latex":"\\begin{align}{ \\dot{m}_{water} }&={ \\dot{m}_{3} } = { 193.81\\ \\frac{\\mathrm{kg}}{\\mathrm{s}}  }\\end{align}","text/plain":"<IPython.core.display.Latex object>"}}},"pos":9,"start":1598065991777,"state":"done","type":"cell"}
{"cell_type":"code","end":1598065993005,"exec_count":17,"id":"919e31","input":"# In order to determine the amount of heat transfered between the streams, we can do a first law analysis for a control volume containing just one of the streams.  Here we do this for the air stream\nQdot_1_2 = mdot[2]*h[2]- mdot[1]*h[1]\nQdot = abs(Qdot_1_2)\nQdot = Qdot.to('kW') # hide\n\nsc=ShowCalculations(locals(),comments=True)","kernel":"python3","output":{"0":{"data":{"text/markdown":" In order to determine the amount of heat transfered between the streams, we can do a first law analysis for a control volume containing just one of the streams.  Here we do this for the air stream","text/plain":"<IPython.core.display.Markdown object>"}},"1":{"data":{"text/latex":"\\begin{align}{ \\dot{Q}_{1,2} }&={ - h_{1} \\dot{m}_{1} + h_{2} \\dot{m}_{2} }\\\\&={ - \\left( 629.4\\ \\frac{\\mathrm{kJ}}{\\mathrm{kg}} \\right) \\left( 20\\ \\frac{\\mathrm{kg}}{\\mathrm{s}} \\right) + \\left( 426.3\\ \\frac{\\mathrm{kJ}}{\\mathrm{kg}} \\right) \\left( 20\\ \\frac{\\mathrm{kg}}{\\mathrm{s}} \\right) }\\\\&={  -4061.9\\ \\frac{\\mathrm{kJ}}{\\mathrm{s}}  }\\end{align}","text/plain":"<IPython.core.display.Latex object>"}},"2":{"data":{"text/latex":"\\begin{align}{ \\dot{Q} }&={ \\mathrm{abs}\\left(\\dot{Q}_{1,2}\\right) } = { 4061.9\\ \\mathrm{kW}  }\\end{align}","text/plain":"<IPython.core.display.Latex object>"}}},"pos":11,"start":1598065992974,"state":"done","type":"cell"}
{"cell_type":"code","end":1598065994372,"exec_count":18,"id":"e5410f","input":"# The specific entropies can also be evaluate using the known temperatures and pressures\ns[1] = air.s(T=T[1],p=p[1])\ns[2] = air.s(T=T[2],p=p[2])\ns[3] = water.s(T=T[3],p=p[3])\ns[4] = water.s(T=T[4],p=p[4])\n\n# The Second Law can be used to solve for the entropy generation\nSdot_gen = mdot[1]*(s[2]-s[1]) + mdot[3]*(s[4]-s[3])\nSdot_gen = Sdot_gen.to('kW/K') # hide\n\nsc=ShowCalculations(locals(),comments=True)","kernel":"python3","output":{"0":{"data":{"text/markdown":" The specific entropies can also be evaluate using the known temperatures and pressures","text/plain":"<IPython.core.display.Markdown object>"}},"1":{"data":{"text/latex":"\\begin{align}{ s_{1} }&={ \\mathrm{air.s}\\left(\\mathrm{T}=T_{1} , \\mathrm{p}=p_{1}\\right) } = { 4.4087\\ \\frac{\\mathrm{kJ}}{\\left(\\mathrm{K} \\cdot \\mathrm{kg}\\right)}  }\\end{align}","text/plain":"<IPython.core.display.Latex object>"}},"2":{"data":{"text/latex":"\\begin{align}{ s_{2} }&={ \\mathrm{air.s}\\left(\\mathrm{T}=T_{2} , \\mathrm{p}=p_{2}\\right) } = { 3.8905\\ \\frac{\\mathrm{kJ}}{\\left(\\mathrm{K} \\cdot \\mathrm{kg}\\right)}  }\\end{align}","text/plain":"<IPython.core.display.Latex object>"}},"3":{"data":{"text/latex":"\\begin{align}{ s_{3} }&={ \\mathrm{water.s}\\left(\\mathrm{T}=T_{3} , \\mathrm{p}=p_{3}\\right) } = { 0.15108\\ \\frac{\\mathrm{kJ}}{\\left(\\mathrm{K} \\cdot \\mathrm{kg}\\right)}  }\\end{align}","text/plain":"<IPython.core.display.Latex object>"}},"4":{"data":{"text/latex":"\\begin{align}{ s_{4} }&={ \\mathrm{water.s}\\left(\\mathrm{T}=T_{4} , \\mathrm{p}=p_{4}\\right) } = { 0.22445\\ \\frac{\\mathrm{kJ}}{\\left(\\mathrm{K} \\cdot \\mathrm{kg}\\right)}  }\\end{align}","text/plain":"<IPython.core.display.Latex object>"}},"5":{"data":{"text/markdown":" The Second Law can be used to solve for the entropy generation","text/plain":"<IPython.core.display.Markdown object>"}},"6":{"data":{"text/latex":"\\begin{align}{ \\dot{S}_{gen} }&={ \\dot{m}_{3} \\left(s_{4} - s_{3}\\right) + \\dot{m}_{1} \\left(- s_{1} + s_{2}\\right) }\\\\&={ \\left( 193.81\\ \\frac{\\mathrm{kg}}{\\mathrm{s}} \\right) \\left(\\left( 0.22445\\ \\frac{\\mathrm{kJ}}{\\left(\\mathrm{K} \\cdot \\mathrm{kg}\\right)} \\right) - \\left( 0.15108\\ \\frac{\\mathrm{kJ}}{\\left(\\mathrm{K} \\cdot \\mathrm{kg}\\right)} \\right)\\right) + \\left( 20\\ \\frac{\\mathrm{kg}}{\\mathrm{s}} \\right) \\left(- \\left( 4.4087\\ \\frac{\\mathrm{kJ}}{\\left(\\mathrm{K} \\cdot \\mathrm{kg}\\right)} \\right) + \\left( 3.8905\\ \\frac{\\mathrm{kJ}}{\\left(\\mathrm{K} \\cdot \\mathrm{kg}\\right)} \\right)\\right) }\\\\&={  3.8556\\ \\frac{\\mathrm{kW}}{\\mathrm{K}}  }\\end{align}","text/plain":"<IPython.core.display.Latex object>"}}},"pos":13,"start":1598065994284,"state":"done","type":"cell"}
{"cell_type":"code","end":1598066083865,"exec_count":22,"id":"ab68d0","input":"# The exergy destruction is always $T_0\\dot{S}_gen$\nXdot_dest = T[0]*Sdot_gen\n\nsc=ShowCalculations(locals(),comments=True)","kernel":"python3","output":{"0":{"data":{"text/markdown":" The exergy destruction is always $T_0\\dot{S}_gen$","text/plain":"<IPython.core.display.Markdown object>"}},"1":{"data":{"text/latex":"\\begin{align}{ \\dot{X}_{dest} }&={ \\dot{S}_{gen} T_{0} }\\\\&={ \\left( 3.8556\\ \\frac{\\mathrm{kW}}{\\mathrm{K}} \\right) \\left( 293.15\\ \\mathrm{K} \\right) }\\\\&={  1130.3\\ \\mathrm{kW}  }\\end{align}","text/plain":"<IPython.core.display.Latex object>"}}},"pos":15,"start":1598066083851,"state":"done","type":"cell"}
{"cell_type":"code","end":1598066158805,"exec_count":24,"id":"93b2e7","input":"# In this case, both streams are approaching the ambient temperature, so both streams are decreasing in exergy.  Therefore, there is no recovered exergy for this system\nXdot_Rec = Q_(0,'kW')\neta_II = Q_(0,'')\n\nsc=ShowCalculations(locals(),comments=True)","kernel":"python3","output":{"0":{"data":{"text/markdown":" In this case, both streams are approaching the ambient temperature, so both streams are decreasing in exergy.  Therefore, there is no recovered exergy for this system","text/plain":"<IPython.core.display.Markdown object>"}},"1":{"data":{"text/latex":"\\begin{align}{ \\dot{X}_{Rec} }&={  0\\ \\mathrm{kW}  }\\end{align}","text/plain":"<IPython.core.display.Latex object>"}},"2":{"data":{"text/latex":"\\begin{align}{ \\eta_{II} }&={  0\\  }\\end{align}","text/plain":"<IPython.core.display.Latex object>"}}},"pos":17,"start":1598066158779,"state":"done","type":"cell"}
{"cell_type":"code","end":1598066519482,"exec_count":27,"id":"4ccb29","input":"# We need to recalculate properties to account for the alternate inlet temperature\nT[5] = Q_(20,'degC')\np[5] = p[4]\nT[6] = T[5] + Q_(5,'delta_degC')\np[6] = p[5]\nh[5] = water.h(T=T[5],p=p[5])\nh[6] = water.h(T=T[6],p=p[6])\ns[5] = water.s(T=T[5],p=p[5])\ns[6] = water.s(T=T[6],p=p[6])\n\n# For this case, the water stream in increaseing in exergy while the air stream is decreasing in exergy.  So we will need the changes in flow exergy for each stream\nDelta_psi_5_6 = h[6]-h[5] - T[0]*(s[6]-s[5])\nDelta_psi_1_2 = h[2]-h[1] - T[0]*(s[2]-s[1])\n\n# A first law analysis can be used to update the water mass flow rate for the new inlet temperature\nmdot[5] = mdot[1]*(h[2]-h[1])/(h[5]-h[6])\nmdot[6] = mdot[5]\n\n# The second law gives the new entropy generation\nSdot_gen_Alt = mdot[1]*(s[2]-s[1]) + mdot[5]*(s[6]-s[5])\n\n# We also have a new exergy destruction\nXdot_dest_Alt = T[0]*Sdot_gen_Alt\n\n# The recovered exergy for this case in the increase in exergy of the water stream because it is moving away from the surrounding temperature\nXdot_Rec = mdot[5]*Delta_psi_5_6\n\n# The expended exergy for this case is the decrease in exergy of the air stream becuase it is moving toward the surrounding temperature\nXdot_Exp = -mdot[1]*Delta_psi_1_2\n\n# Second law efficiency\neta_II_Alt = Xdot_Rec/Xdot_Exp\n\nsc=ShowCalculations(locals(),comments=True)","kernel":"python3","output":{"0":{"data":{"text/markdown":" We need to recalculate properties to account for the alternate inlet temperature","text/plain":"<IPython.core.display.Markdown object>"}},"1":{"data":{"text/latex":"\\begin{align}{ T_{5} }&={ \\left( 20\\ \\mathrm{°C} \\right) } = { 293.15\\ \\mathrm{K}  }\\end{align}","text/plain":"<IPython.core.display.Latex object>"}},"10":{"data":{"text/latex":"\\begin{align}{ \\Delta{}\\psi_{5,6} }&={ - T_{0} \\left(- s_{5} + s_{6}\\right) - h_{5} + h_{6} }\\\\&={ - \\left( 293.15\\ \\mathrm{K} \\right) \\left(- \\left( 0.29646\\ \\frac{\\mathrm{kJ}}{\\left(\\mathrm{K} \\cdot \\mathrm{kg}\\right)} \\right) + \\left( 0.3672\\ \\frac{\\mathrm{kJ}}{\\left(\\mathrm{K} \\cdot \\mathrm{kg}\\right)} \\right)\\right) - \\left( 84.006\\ \\frac{\\mathrm{kJ}}{\\mathrm{kg}} \\right) + \\left( 104.92\\ \\frac{\\mathrm{kJ}}{\\mathrm{kg}} \\right) }\\\\&={  0.17632\\ \\frac{\\mathrm{kJ}}{\\mathrm{kg}}  }\\end{align}","text/plain":"<IPython.core.display.Latex object>"}},"11":{"data":{"text/latex":"\\begin{align}{ \\Delta{}\\psi_{1,2} }&={ - T_{0} \\left(- s_{1} + s_{2}\\right) - h_{1} + h_{2} }\\\\&={ - \\left( 293.15\\ \\mathrm{K} \\right) \\left(- \\left( 4.4087\\ \\frac{\\mathrm{kJ}}{\\left(\\mathrm{K} \\cdot \\mathrm{kg}\\right)} \\right) + \\left( 3.8905\\ \\frac{\\mathrm{kJ}}{\\left(\\mathrm{K} \\cdot \\mathrm{kg}\\right)} \\right)\\right) - \\left( 629.4\\ \\frac{\\mathrm{kJ}}{\\mathrm{kg}} \\right) + \\left( 426.3\\ \\frac{\\mathrm{kJ}}{\\mathrm{kg}} \\right) }\\\\&={  -51.176\\ \\frac{\\mathrm{kJ}}{\\mathrm{kg}}  }\\end{align}","text/plain":"<IPython.core.display.Latex object>"}},"12":{"data":{"text/markdown":" A first law analysis can be used to update the water mass flow rate for the new inlet temperature","text/plain":"<IPython.core.display.Markdown object>"}},"13":{"data":{"text/latex":"\\begin{align}{ \\dot{m}_{5} }&={ \\frac{\\dot{m}_{1} \\left(- h_{1} + h_{2}\\right)}{h_{5} - h_{6}} }\\\\&={ \\frac{\\left( 20\\ \\frac{\\mathrm{kg}}{\\mathrm{s}} \\right) \\left(- \\left( 629.4\\ \\frac{\\mathrm{kJ}}{\\mathrm{kg}} \\right) + \\left( 426.3\\ \\frac{\\mathrm{kJ}}{\\mathrm{kg}} \\right)\\right)}{\\left( 84.006\\ \\frac{\\mathrm{kJ}}{\\mathrm{kg}} \\right) - \\left( 104.92\\ \\frac{\\mathrm{kJ}}{\\mathrm{kg}} \\right)} }\\\\&={  194.23\\ \\frac{\\mathrm{kg}}{\\mathrm{s}}  }\\end{align}","text/plain":"<IPython.core.display.Latex object>"}},"14":{"data":{"text/latex":"\\begin{align}{ \\dot{m}_{6} }&={ \\dot{m}_{5} } = { 194.23\\ \\frac{\\mathrm{kg}}{\\mathrm{s}}  }\\end{align}","text/plain":"<IPython.core.display.Latex object>"}},"15":{"data":{"text/markdown":" The second law gives the new entropy generation","text/plain":"<IPython.core.display.Markdown object>"}},"16":{"data":{"text/latex":"\\begin{align}{ \\dot{S}_{gen,Alt} }&={ \\dot{m}_{5} \\left(- s_{5} + s_{6}\\right) + \\dot{m}_{1} \\left(- s_{1} + s_{2}\\right) }\\\\&={ \\left( 194.23\\ \\frac{\\mathrm{kg}}{\\mathrm{s}} \\right) \\left(- \\left( 0.29646\\ \\frac{\\mathrm{kJ}}{\\left(\\mathrm{K} \\cdot \\mathrm{kg}\\right)} \\right) + \\left( 0.3672\\ \\frac{\\mathrm{kJ}}{\\left(\\mathrm{K} \\cdot \\mathrm{kg}\\right)} \\right)\\right) + \\left( 20\\ \\frac{\\mathrm{kg}}{\\mathrm{s}} \\right) \\left(- \\left( 4.4087\\ \\frac{\\mathrm{kJ}}{\\left(\\mathrm{K} \\cdot \\mathrm{kg}\\right)} \\right) + \\left( 3.8905\\ \\frac{\\mathrm{kJ}}{\\left(\\mathrm{K} \\cdot \\mathrm{kg}\\right)} \\right)\\right) }\\\\&={  3.3746\\ \\frac{\\mathrm{kJ}}{\\left(\\mathrm{K} \\cdot \\mathrm{s}\\right)}  }\\end{align}","text/plain":"<IPython.core.display.Latex object>"}},"17":{"data":{"text/markdown":" We also have a new exergy destruction","text/plain":"<IPython.core.display.Markdown object>"}},"18":{"data":{"text/latex":"\\begin{align}{ \\dot{X}_{dest,Alt} }&={ \\dot{S}_{gen,Alt} T_{0} }\\\\&={ \\left( 3.3746\\ \\frac{\\mathrm{kJ}}{\\left(\\mathrm{K} \\cdot \\mathrm{s}\\right)} \\right) \\left( 293.15\\ \\mathrm{K} \\right) }\\\\&={  989.27\\ \\frac{\\mathrm{kJ}}{\\mathrm{s}}  }\\end{align}","text/plain":"<IPython.core.display.Latex object>"}},"19":{"data":{"text/markdown":" The recovered exergy for this case in the increase in exergy of the water stream because it is moving away from the surrounding temperature","text/plain":"<IPython.core.display.Markdown object>"}},"2":{"data":{"text/latex":"\\begin{align}{ p_{5} }&={ p_{4} } = { 100.0\\ \\mathrm{kPa}  }\\end{align}","text/plain":"<IPython.core.display.Latex object>"}},"20":{"data":{"text/latex":"\\begin{align}{ \\dot{X}_{Rec} }&={ \\Delta{}\\psi_{5,6} \\dot{m}_{5} }\\\\&={ \\left( 0.17632\\ \\frac{\\mathrm{kJ}}{\\mathrm{kg}} \\right) \\left( 194.23\\ \\frac{\\mathrm{kg}}{\\mathrm{s}} \\right) }\\\\&={  34.247\\ \\frac{\\mathrm{kJ}}{\\mathrm{s}}  }\\end{align}","text/plain":"<IPython.core.display.Latex object>"}},"21":{"data":{"text/markdown":" The expended exergy for this case is the decrease in exergy of the air stream becuase it is moving toward the surrounding temperature","text/plain":"<IPython.core.display.Markdown object>"}},"22":{"data":{"text/latex":"\\begin{align}{ \\dot{X}_{Exp} }&={ - \\Delta{}\\psi_{1,2} \\dot{m}_{1} }\\\\&={ - \\left( -51.176\\ \\frac{\\mathrm{kJ}}{\\mathrm{kg}} \\right) \\left( 20\\ \\frac{\\mathrm{kg}}{\\mathrm{s}} \\right) }\\\\&={  1023.5\\ \\frac{\\mathrm{kJ}}{\\mathrm{s}}  }\\end{align}","text/plain":"<IPython.core.display.Latex object>"}},"23":{"data":{"text/markdown":" Second law efficiency","text/plain":"<IPython.core.display.Markdown object>"}},"24":{"data":{"text/latex":"\\begin{align}{ \\eta_{II,Alt} }&={ \\frac{\\dot{X}_{Rec}}{\\dot{X}_{Exp}} }\\\\&={ \\frac{\\left( 34.247\\ \\frac{\\mathrm{kJ}}{\\mathrm{s}} \\right)}{\\left( 1023.5\\ \\frac{\\mathrm{kJ}}{\\mathrm{s}} \\right)} }\\\\&={  0.033461\\  }\\end{align}","text/plain":"<IPython.core.display.Latex object>"}},"3":{"data":{"text/latex":"\\begin{align}{ T_{6} }&={ \\left( 5\\ \\mathrm{Δ°C} \\right) + T_{5} }\\\\&={ \\left( 5\\ \\mathrm{Δ°C} \\right) + \\left( 293.15\\ \\mathrm{K} \\right) }\\\\&={  298.15\\ \\mathrm{K}  }\\end{align}","text/plain":"<IPython.core.display.Latex object>"}},"4":{"data":{"text/latex":"\\begin{align}{ p_{6} }&={ p_{5} } = { 100.0\\ \\mathrm{kPa}  }\\end{align}","text/plain":"<IPython.core.display.Latex object>"}},"5":{"data":{"text/latex":"\\begin{align}{ h_{5} }&={ \\mathrm{water.h}\\left(\\mathrm{T}=T_{5} , \\mathrm{p}=p_{5}\\right) } = { 84.006\\ \\frac{\\mathrm{kJ}}{\\mathrm{kg}}  }\\end{align}","text/plain":"<IPython.core.display.Latex object>"}},"6":{"data":{"text/latex":"\\begin{align}{ h_{6} }&={ \\mathrm{water.h}\\left(\\mathrm{T}=T_{6} , \\mathrm{p}=p_{6}\\right) } = { 104.92\\ \\frac{\\mathrm{kJ}}{\\mathrm{kg}}  }\\end{align}","text/plain":"<IPython.core.display.Latex object>"}},"7":{"data":{"text/latex":"\\begin{align}{ s_{5} }&={ \\mathrm{water.s}\\left(\\mathrm{T}=T_{5} , \\mathrm{p}=p_{5}\\right) } = { 0.29646\\ \\frac{\\mathrm{kJ}}{\\left(\\mathrm{K} \\cdot \\mathrm{kg}\\right)}  }\\end{align}","text/plain":"<IPython.core.display.Latex object>"}},"8":{"data":{"text/latex":"\\begin{align}{ s_{6} }&={ \\mathrm{water.s}\\left(\\mathrm{T}=T_{6} , \\mathrm{p}=p_{6}\\right) } = { 0.3672\\ \\frac{\\mathrm{kJ}}{\\left(\\mathrm{K} \\cdot \\mathrm{kg}\\right)}  }\\end{align}","text/plain":"<IPython.core.display.Latex object>"}},"9":{"data":{"text/markdown":" For this case, the water stream in increaseing in exergy while the air stream is decreasing in exergy.  So we will need the changes in flow exergy for each stream","text/plain":"<IPython.core.display.Markdown object>"}}},"pos":19,"start":1598066519177,"state":"done","type":"cell"}
{"cell_type":"code","end":1598066536721,"exec_count":28,"id":"2bb1a7","input":"ss=ShowSummary(locals())","kernel":"python3","output":{"0":{"data":{"text/latex":"\\begin{align}{ \\Delta{}\\psi_{1,2} }&={  -51.176\\ \\frac{\\mathrm{kJ}}{\\mathrm{kg}}  }&{ \\Delta{}\\psi_{5,6} }&={  0.17632\\ \\frac{\\mathrm{kJ}}{\\mathrm{kg}}  }&{ \\dot{Q} }&={  4061.9\\ \\mathrm{kW}  }&{ \\dot{Q}_{1,2} }&={  -4061.9\\ \\frac{\\mathrm{kJ}}{\\mathrm{s}}  }\\\\{ \\dot{S}_{gen} }&={  3.8556\\ \\frac{\\mathrm{kW}}{\\mathrm{K}}  }&{ \\dot{S}_{gen,Alt} }&={  3.3746\\ \\frac{\\mathrm{kJ}}{\\left(\\mathrm{K} \\cdot \\mathrm{s}\\right)}  }&{ \\dot{X}_{Exp} }&={  1023.5\\ \\frac{\\mathrm{kJ}}{\\mathrm{s}}  }&{ \\dot{X}_{Rec} }&={  34.247\\ \\frac{\\mathrm{kJ}}{\\mathrm{s}}  }\\\\{ \\dot{X}_{dest} }&={  1130.3\\ \\mathrm{kW}  }&{ \\dot{X}_{dest,Alt} }&={  989.27\\ \\frac{\\mathrm{kJ}}{\\mathrm{s}}  }&{ \\eta_{II} }&={  0\\  }&{ \\eta_{II,Alt} }&={  0.033461\\  }\\\\{ \\dot{m}_{water} }&={  193.81\\ \\frac{\\mathrm{kg}}{\\mathrm{s}}  }&{  }\\end{align}","text/plain":"<IPython.core.display.Latex object>"}},"1":{"data":{"text/html":"<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>T [K]</th>\n      <th>p [kPa]</th>\n      <th>h [kJ/kg]</th>\n      <th>s [kJ/K/kg]</th>\n      <th>mdot [kg/s]</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>293.15</td>\n      <td>100.0</td>\n      <td>-</td>\n      <td>-</td>\n      <td>-</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>500.00</td>\n      <td>100.0</td>\n      <td>629.396</td>\n      <td>4.40873</td>\n      <td>20</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>300.00</td>\n      <td>100.0</td>\n      <td>426.301</td>\n      <td>3.8905</td>\n      <td>20</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>283.15</td>\n      <td>100.0</td>\n      <td>42.1176</td>\n      <td>0.151077</td>\n      <td>193.812</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>288.15</td>\n      <td>100.0</td>\n      <td>63.0756</td>\n      <td>0.224449</td>\n      <td>20</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>293.15</td>\n      <td>100.0</td>\n      <td>84.0061</td>\n      <td>0.296463</td>\n      <td>194.23</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>298.15</td>\n      <td>100.0</td>\n      <td>104.919</td>\n      <td>0.3672</td>\n      <td>194.23</td>\n    </tr>\n  </tbody>\n</table>","text/plain":"<IPython.core.display.HTML object>"}}},"pos":20,"start":1598066536683,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"052beb","input":"## Solution\n","pos":2,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"0c9d0a","input":"### Python Initialization\nWe'll start by importing the libraries we will use for our analysis and initializing dictionaries to hold the properties we will be usings.","pos":3,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"221abd","input":"#### (e) Second Law Efficiency","pos":16,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"3ca46a","input":"#### (b) rate of heat transfer","pos":10,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"5df9f1","input":"### Given Parameters\nWe now define variables to hold our known values.","pos":5,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"7007d2","input":"#### (d) exergy destruction","pos":14,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"7e6650","input":"#### (c) entropy generation","pos":12,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"ad4aa2","input":"#### (f) Second Law Efficiency: Alternate Inlet Temperature","pos":18,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"ae5ea4","input":"### Assumptions\n  - Negligible changes in kinetic energy\n  - Negligible changes in potential energy","pos":7,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"b40d42","input":"# Example 8.3: Heat Exchanger Exergy Analysis\n\n*John F. Maddox, Ph.D., P.E.<br>\nUniversity of Kentucky - Paducah Campus<br>\nME 321: Engineering Thermodynamics II<br>*\n\n\n","pos":0,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"ec505d","input":"#### (a) mass flow rate of water","pos":8,"state":"done","type":"cell"}
{"id":"e19433","input":"","pos":21,"type":"cell"}
{"id":0,"time":1598162154559,"type":"user"}
{"last_load":1598062203668,"type":"file"}