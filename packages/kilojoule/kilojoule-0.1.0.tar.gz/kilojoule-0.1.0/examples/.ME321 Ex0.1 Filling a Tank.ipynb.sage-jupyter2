{"backend_state":"ready","kernel":"python3","kernel_state":"idle","kernel_usage":{"cpu":13.171577123049264,"memory":39116800},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.9"}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"0653d4","input":"","pos":9,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":1,"id":"d2cc6d","input":"# Given Parameters\nT_i = 300 # inlet temperature (C)\np_i = 14*100 # inlet pressure (kPa) Note: 1 bar = 100 kPa\nVol = 0.25 # tank volume\n\n# Assumptions\np_2 = p_i # mechanical equilibrium -> final pressure is same as inlet pressure\n\n# Look up enthalpy in property tables h(T_i,p_i) \n# Superheated steam, 1.4 MPa\nh_i = 3040.9 # (kJ/kg) \nprint('h_i = {:.1f} kJ/kg'.format(h_i))\n\n# 1st Law\nu_2 = h_i\nprint('u_2 = {:.2f} kJ/kg'.format(u_2))\n\n# Look up temperature in property tables T(p_2,u_2) \n# Superheated steam, doesn't line up with temperature so we will need to interpolate\n# (y-y_below)/(y_above-y_below) = (x-x_below)/(x_above-x_below) -> Solve for desired quantity (y)\n# y = (x-x_below)/(x_above-x_below)*(y_above-y_below)+y_below\nT_2 = (u_2-2953.1)/(3121.8-2953.1)*(500-400)+400 # (C) T(p=1400 kPa, u=u_2)\nprint('The final temperature is T_2 = {:.2f} C'.format(T_2))\n\n# Look up specific volume in tables v(p_2,u_2)\n# Will need to interpolate again\nv_2 = (u_2-2953.1)/(3121.8-2953.1)*(0.25216-0.21782)+0.21782 # (m^3/kg) v(p=1400 kPa, u=u_2)\nprint('v_2 = {:.3f} m^3/kg'.format(v_2))\n\n# Calculate mass from volume and specific volume\nm_2 = Vol/v_2\nprint('m_2 = {:.5f} kg'.format(m_2))\n\n# 2nd Law\n# Look up specific entropies for inlet and final state\ns_i = 6.9553 # (kJ/kg/K) s(p=1400 kPa, T=T_i)\nprint('s_i = {:.4f} kJ/kg/K'.format(s_i))\ns_2 = (u_2-2953.1)/(3121.8-2953.1)*(7.6047-7.3046)+7.3046 # (m^3/kg) s(p=1400 kPa, u=u_2)\nprint('s_2 = {:.4f} kJ/kg/K'.format(s_2))\nS_gen = m_2*(s_2-s_i)\nprint('The entropy generation is: S_gen = {:.4f} kJ/(kg K)'.format(S_gen))","output":{"0":{"name":"stdout","output_type":"stream","text":"h_i = 3040.9 kJ/kg\nu_2 = 3040.90 kJ/kg\nThe final temperature is T_2 = 452.05 C\nv_2 = 0.236 m^3/kg\nm_2 = 1.06071 kg\ns_i = 6.9553 kJ/kg/K\ns_2 = 7.4608 kJ/kg/K\nThe entropy generation is: S_gen = 0.5362 kJ/(kg K)\n"}},"pos":4,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":5,"id":"d388e2","input":"# import libraries (thermoJFM depends on CoolProps and Pint)\nfrom thermoJFM import PropertyLookup as Prop\nfrom thermoJFM import units, Q_\nunits.default_format = '!P'\n\n# Given Parameters; Note: use Q_(value,'units') syntax to define dimensional quantities\ndefault_fluid = 'Water'\nT_i = Q_(300,'degC') # inlet temperature\np_i = Q_(14,'bar') # inlet pressure\nVol = Q_(0.25,'m^3') # tank volume\n\n# Assumptions\np_2=p_i # mechanical equilibrium -> final pressure is same as inlet pressure\n\n# Use the Prop() function to look up property values, i.e instead of interpolating from tables\n# For water: We need two independent intensive properties (ind1, ind2), i.e. T and P, to get a dependent intensive property (dep), i.e. h\n# Usage: Prop('dep', ind1=value1, ind2=value2, fluid='fluidname')\nh_i = Prop('h',T=T_i,p=p_i,fluid=default_fluid) # h_i=h(T_i,p_i) for water\nprint(f'h_i = {h_i}')\n\n# 1st Law\nu_2 = h_i # from 1st Law analysis\nprint(f'u_2 = {u_2}')\n\n# Use Prop() function to look up Temperature for p_2 and u_2\nT_2 = Prop('T',p=p_2,u=u_2,fluid=default_fluid) # T_2=T(p_2,u_2) for water\nprint(f'The final temperature is: T_2 = {T_2}')\n\n# Mass Balance\nv_2 = Prop('v',T=T_2,p=p_2,fluid=default_fluid) # v_2=v(T_2,p_2) for water\nprint(f'v_2 = {v_2}')\nm_2 = Vol/v_2\nprint(f'm_2 = {m_2}')\n\n# 2nd Law\ns_i = Prop('s',T=T_i,p=p_i,fluid=default_fluid)\nprint(f's_i = {s_i}')\ns_2 = Prop('s',T=T_2,p=p_2,fluid=default_fluid)\nprint(f's_2 = {s_2}')\nS_gen = m_2*(s_2-s_i)\nprint(f'The entropy generation is: S_gen = {S_gen}')\n\n","output":{"0":{"name":"stdout","output_type":"stream","text":"h_i = 3040.9193001906892 kilojoule/kilogram\nu_2 = 3040.9193001906892 kilojoule/kilogram\nThe final temperature is: T_2 = 452.3307030337829 degC\nv_2 = 0.23587769019286522 meterÂ³/kilogram\nm_2 = 1.0598713248191793 kilogram\ns_i = 6.955232137524448 kilojoule/delta_degC/kilogram\ns_2 = 7.466332995821452 kilojoule/delta_degC/kilogram\nThe entropy generation is: S_gen = 0.5417011437994653 kilojoule/delta_degC\n"}},"pos":7,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"24c77c","input":"## Solution\n\n- Assumptions\n  - Negligible changes in kinetic energy (the tank isn't moving)\n  - Negligible changes in potential energy (the change in potential energy of the steam is small compared to the other terms)\n  - Adiabatic (no heat transfer)\n  - No work (rigid container, no moving shafts, etc.)\n  - No mass exiting the tank\n  - Mechanical equilibrium, $p_2=p_i$ (process continues of the tank pressure equals the inlet pressure)\n  \n- 1st Law\n\n$$\n\\require{cancel}\n\\Delta U+\\cancel{\\Delta KE} + \\cancel{\\Delta PE} = \\cancel{Q_{1-2}} - \\cancel{W_{1-2}} + \\sum_im_i\\left( h_i + \\cancel{\\frac{V_i^2}{2}} + \\cancel{gz_i} \\right) - \\sum_e \\cancel{m_e} \\left( h_e + \\frac{V_e^2}{2} + gz_e \\right)$$\n\nNo mass in tank at beginning of process\n$$m_2u_2-\\cancelto{0}{m_1}u_1=m_ih_i$$\n\nThe final mass in the tank at the end of the process is the same as the mass that entered the tank, $m_2=m_i$\n\n$$\\cancel{m_2}u_2=\\cancel{m_i}{h_i}$$\n\nThe internal energy at the end of the process will be equal to the enthalpy of the entering fluid, which can be found in the tables using two independent, intensive properties ($T_i$ and $p_i$).\n$$h_i=h(T=T_i,p=p_i)$$\nThe temperature at the end of the process can then be found in the tables using two independent, intensive properties ($p_2$ and $u_2$)\n$$T_2=T(p=p_2, u=u_2)$$\n\n- Mass\n  The final mass in the tank can be calculated using the volume of the tank and specific volume of the fluid (inverse of density).\n  $$m_2=\\frac{V}{v_2}$$\n  where the specific volume at the end of the process, $v_2$, can be found in the tables using two independent, intensive properties in the same way we found the final temperature.\n  $$v_2=v(p=p_2,u=u_2)$$\n- 2nd Law\n\n\n$$m_2s_2-\\cancelto{0}{m_1}s_1 = \\sum_j\\frac{\\cancelto{0}{Q_j}}{T_j}+\\sum_im_is_i-\\sum_e\\cancelto{0}{m_e}s_e+S_{gen}$$\n\n\n$$S_{gen}=m_2(s_2-s_i)$$\nSo entropy generation is the amount of entropy stored in the tank at the end of the process minus the amount that flowed into the tank through the inlet. That is, the entropy of the supply line decreased as fluid left it to flow into the tank, but the entropy of the tank increased by more than the amount that the supply line decreased. Thus there is a net increase in entropy of the universe.","pos":1,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"70b787","input":"*John F. Maddox, Ph.D., P.E.<br>\nUniversity of Kentucky - Paducah Campus<br>\nME 321: Engineering Thermodynamics II<br>*\n\n\n# Example 0.1: Filling a Tank\n\n## Problem Statement\nSteam at a pressure of $14\\,\\mathrm{bar}$ and a temperature of $300^\\circ\\mathrm{C}$ is flowing in a pipe.  Connected to the pipe through a valve is an initially evacuated tank with a volume of $0.25\\,\\mathrm{m^3}$.  The tank fills with steam until mechanical equilibrium is achieved.  Assume the system is adiabatic and that changes in kinetic and potential energy are negligible.  What is the final temperature in the tank, and how much entropy was generated during the process?","pos":0,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"8959b7","input":"#### Using Property Tables from the Textbook\nIn the example code below, we define variables to hold our given values, then we perform calculations with them.  In this mode the Python interpreter is providing little more benefit than using a calculator.  However, we at least have a record of our calculations, and we could easily repeat them for different inital conditions if needed.","pos":3,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"8b382e","input":"The example code above used just the standard python library to complete our calculations.  This is nice because we could re-run that code on any computer with Python interpretter without need to install additional software or packages.  However, there are a few weakness in this approach.  \n\nThe most obvious weakness in the example above is that we have \"hard-coded\" many of the numbers required for the calculations.  Specifically, each time we pulled properties for the tables (directly or through interpolation) we typed the numbers from the tables into our code.  If the operating conditions changed, we would need to go through and update each of those numbers by hand *(23 place in this relatively simple example)*.  It would be much better if we could automate that process by using a function to look up the properties for us.  \n\nA second weakness is that we didn't include units in our calculations.  Most of the numbers we will be using in our calculation for this course represent physical quantities, which have no real significance without their units.  In the example above, we have made comments beside many of the operations to reminds us of the units and we printed the units in the output for our answers.  However, the method requires us to do the unit tracking and unit conversion outside of the calculations, which can lead to unit errors and inconsistency.  It would be better if the unit tracking and conversion were an integral part of our calculations.\n\n","pos":5,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"8ec4cd","input":"### Solving Using Python \nWe will look at two methods for solving this problem using Python.  One will use only the Python standard library to perform the calculations using values pulled from you textbook (the same way you would use your calculator).  The other method will use some third-party and custom libraries to automate the property evaluation.\n\n","pos":2,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"9e1536","input":"#### Using Third-Party and Custom Libraries\nPython is a general purpose programming language that is not optimized for math/science computations in it's base configuration.  However, there are many third-party libraries that can be easily loaded at runtime to enable additional capabilities ([`numpy`](http://numpy.org), [`scipy`](scipy.org), [`sympy`](http://sympy.org), [`pandas`](http://pandas.pydata.org), and [`matplotlib`](http://matplotlib.org) are commonly used in scientific computing).  In the example code below, we will load a custom library `thermoJFM` (written specifically for this course), which will enable us to automate the property evaluation (no need to look up properties in the tabels or interpolate) and to include units in our calculations (no need to worry about unit conversion mistakes).  This custom library (`thermoJFM`) will load two third-party, publicly available libraries ([`CoolProp`](http://coolprop.org) for property evaluation and [`pint`](https://pint.readthedocs.io/en/stable/) for unit tracking and conversion).","pos":6,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"fbe46b","input":"In the second version of the example, you can see that there are only *three* hard coded numbers: the inlet temperature, the inlet pressure, and the tank volume.  You will also notice that the unit conversions are handled automatically; we did not need to convert 14 bar to 140 kPa manually, and we did not need to specify the output units for each of the calculated parameters.  This is a major improvement over the first iteration of the code because we can simply change the four lines in the `# Given Parameters` section to re-run our caculations for different operating conditions, a different unit system (i.e. English units), or even a different fluid (assuming we select one of the fluids supported by the `CoolProp` library).","pos":8,"state":"done","type":"cell"}
{"id":0,"time":1595895666039,"type":"user"}
{"last_load":1596214191856,"type":"file"}