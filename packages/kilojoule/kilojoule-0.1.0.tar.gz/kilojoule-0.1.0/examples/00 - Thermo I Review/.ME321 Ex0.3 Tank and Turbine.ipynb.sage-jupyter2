{"attachments":{"tanksandturbine.png":{"type":"sha1","value":"988405d1c9140a021bece302baa29f5a5bad5c44"}},"cell_type":"markdown","id":"dc488c","input":"## Problem Statement\nA steam engine consists of a boiler tank connected to a turbine, as shown below. The boiler tank has a volume of 100 L and initially contains saturated liquid with a very small amount of vapor at 100 kPa. Heat is added by a burner, and the pressure regulator does not open before the boiler pressure reaches 700 kPa, which it keeps constant. The vapor leaving the boiler tank passes through a turbine and is discharged to the atmosphere as saturated vapor at 100 kPa. The burner is turned off when no more liquid is present in the boiler. Assume the turbine is adiabatic and the changes in kinetic and potential energy across the turbine are negligible.\n<img src=\"attachment:tanksandturbine.png\" style=\"max-width:100%\">","pos":1,"state":"done","type":"cell"}
{"backend_state":"ready","kernel":"python3","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":213540864},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.2"}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"f61e2d","input":"water.","pos":31,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":10,"id":"ec9249","input":"# First Law \nQ_1_to_2 = m[2]*u[2] - m[1]*u[1] + m['tank_exit']*h['tank_exit']\n\nShowCalculations(locals(),comments=True);","output":{"0":{"data":{"text/markdown":" First Law ","text/plain":"<IPython.core.display.Markdown object>"},"exec_count":10,"output_type":"execute_result"},"1":{"data":{"text/latex":"\\begin{align}{ Q_{1\\to2} }&={ h_{tank,exit} m_{tank,exit} - m_{1} u_{1} + m_{2} u_{2} }\\\\&={ \\left( 2762.8\\ \\frac{\\mathrm{kJ}}{\\mathrm{kg}} \\right) \\left( 95.497\\ \\mathrm{kg} \\right) - \\left( 95.863\\ \\mathrm{kg} \\right) \\left( 417.4\\ \\frac{\\mathrm{kJ}}{\\mathrm{kg}} \\right) + \\left( 0.3666\\ \\mathrm{kg} \\right) \\left( 2571.8\\ \\frac{\\mathrm{kJ}}{\\mathrm{kg}} \\right) }\\\\&={  2.2476\\times 10^{5}\\ \\mathrm{kJ}  }\\end{align}","text/plain":"<IPython.core.display.Latex object>"},"exec_count":10,"output_type":"execute_result"}},"pos":23,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":11,"id":"fe5383","input":"h['turbine_exit'] = water.h(p=p['turbine_exit'],x=x['turbine_exit'])\n\nShowCalculations(locals());","output":{"0":{"data":{"text/latex":"\\begin{align}{ h_{turbine,exit} }&={ \\mathrm{water.h}\\left(\\mathrm{p}=p_{turbine,exit} , \\mathrm{x}=x_{turbine,exit}\\right) } = { 2674.9\\ \\frac{\\mathrm{kJ}}{\\mathrm{kg}}  }\\end{align}","text/plain":"<IPython.core.display.Latex object>"},"exec_count":11,"output_type":"execute_result"}},"pos":26,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":12,"id":"3c0b69","input":"W_1_to_2 = m['tank_exit']*(h['tank_exit']-h['turbine_exit'])\n\nShowCalculations(locals());","output":{"0":{"data":{"text/latex":"\\begin{align}{ W_{1\\to2} }&={ m_{tank,exit} \\left(h_{tank,exit} - h_{turbine,exit}\\right) }\\\\&={ \\left( 95.497\\ \\mathrm{kg} \\right) \\left(\\left( 2762.8\\ \\frac{\\mathrm{kJ}}{\\mathrm{kg}} \\right) - \\left( 2674.9\\ \\frac{\\mathrm{kJ}}{\\mathrm{kg}} \\right)\\right) }\\\\&={  8385.1\\ \\mathrm{kJ}  }\\end{align}","text/plain":"<IPython.core.display.Latex object>"},"exec_count":12,"output_type":"execute_result"}},"pos":28,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":13,"id":"10761d","input":"ShowSummary(locals());","output":{"0":{"data":{"text/latex":"\\begin{align}{ Q_{1\\to2} }&={  2.2476\\times 10^{5}\\ \\mathrm{kJ}  }&{ V_{tank} }&={  0.1\\ \\mathrm{m}^{3}  }&{ W_{1\\to2} }&={  8385.1\\ \\mathrm{kJ}  }\\\\{  }\\end{align}","text/plain":"<IPython.core.display.Latex object>"},"exec_count":13,"output_type":"execute_result"},"1":{"data":{"text/html":"<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>T [°C]</th>\n      <th>p [kPa]</th>\n      <th>v [m³/kg]</th>\n      <th>u [kJ/kg]</th>\n      <th>h [kJ/kg]</th>\n      <th>s [kJ/K/kg]</th>\n      <th>x []</th>\n      <th>m [kg]</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>-</td>\n      <td>100</td>\n      <td>0.00104315</td>\n      <td>417.4</td>\n      <td>-</td>\n      <td>-</td>\n      <td>0</td>\n      <td>95.8632</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>-</td>\n      <td>700</td>\n      <td>0.272775</td>\n      <td>2571.81</td>\n      <td>-</td>\n      <td>-</td>\n      <td>1</td>\n      <td>0.366603</td>\n    </tr>\n    <tr>\n      <th>tank_exit</th>\n      <td>-</td>\n      <td>700</td>\n      <td>-</td>\n      <td>-</td>\n      <td>2762.75</td>\n      <td>-</td>\n      <td>1</td>\n      <td>95.4965</td>\n    </tr>\n    <tr>\n      <th>turbine_exit</th>\n      <td>-</td>\n      <td>100</td>\n      <td>-</td>\n      <td>-</td>\n      <td>2674.95</td>\n      <td>-</td>\n      <td>1</td>\n      <td>-</td>\n    </tr>\n  </tbody>\n</table>","text/plain":"<IPython.core.display.HTML object>"},"exec_count":13,"output_type":"execute_result"}},"pos":30,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":2,"id":"f95b1c","input":"from thermoJFM import *","pos":4,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":3,"id":"3ea465","input":"properties_dict = {\n    'T':'degC',     # Temperature\n    'p':'kPa',      # pressure\n    'v':'m^3/kg',   # volumetric flow rate\n    'u':'kJ/kg',    # specific internal energy\n    'h':'kJ/kg',    # specific enthalpy\n    's':'kJ/kg/K',  # specific entropy\n    'x':'',         # quality\n    'm':'kg',       # mass\n}\nstates=StatesTable(properties=properties_dict, unit_system='English_R')\nfor property in states.properties:\n    globals()[property] = states.dict[property]\n    \nstates.display()","output":{"0":{"data":{"text/html":"<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>T [°C]</th>\n      <th>p [kPa]</th>\n      <th>v [m³/kg]</th>\n      <th>u [kJ/kg]</th>\n      <th>h [kJ/kg]</th>\n      <th>s [kJ/K/kg]</th>\n      <th>x []</th>\n      <th>m [kg]</th>\n    </tr>\n  </thead>\n  <tbody>\n  </tbody>\n</table>","text/plain":"<IPython.core.display.HTML object>"},"exec_count":3,"output_type":"execute_result"}},"pos":6,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":4,"id":"0adf27","input":"water = FluidProperties('Water',unit_system='SI_C')","pos":8,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":4,"id":"1f8370","input":"p[1] = Q_(100,'kPa')            # initial pressure in tank\nV_tank = Q_(100,'L').to('m^3')  # tank volume\np[2] = Q_(700,'kPa')            # final pressure in tank\np['turbine_exit'] = Q_(100,'kPa')  # pressure of fluid exiting turbine\nx['turbine_exit'] = Q_(1,'')       # quality of fluid exiting turbine\n\nShowCalculations(locals());","output":{"0":{"data":{"text/latex":"\\begin{align}{ p_{1} }&={  100\\ \\mathrm{kPa}  }\\end{align}","text/plain":"<IPython.core.display.Latex object>"},"exec_count":4,"output_type":"execute_result"},"1":{"data":{"text/latex":"\\begin{align}{ V_{tank} }&={  0.1\\ \\mathrm{m}^{3}  }\\end{align}","text/plain":"<IPython.core.display.Latex object>"},"exec_count":4,"output_type":"execute_result"},"2":{"data":{"text/latex":"\\begin{align}{ p_{2} }&={  700\\ \\mathrm{kPa}  }\\end{align}","text/plain":"<IPython.core.display.Latex object>"},"exec_count":4,"output_type":"execute_result"},"3":{"data":{"text/latex":"\\begin{align}{ p_{turbine,exit} }&={  100\\ \\mathrm{kPa}  }\\end{align}","text/plain":"<IPython.core.display.Latex object>"},"exec_count":4,"output_type":"execute_result"},"4":{"data":{"text/latex":"\\begin{align}{ x_{turbine,exit} }&={  1\\  }\\end{align}","text/plain":"<IPython.core.display.Latex object>"},"exec_count":4,"output_type":"execute_result"}},"pos":10,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":5,"id":"4eac20","input":"x[1] = Q_(0,'')                 # initial quality in tank\nx[2] = Q_(1,'')                 # final quality in tank\nx['tank_exit'] = Q_(1,'')       # quality of fluid exiting tank\np['tank_exit'] = p[2]           # pressure of fluid exiting tank\n\nShowCalculations(locals());","output":{"0":{"data":{"text/latex":"\\begin{align}{ x_{1} }&={  0\\  }\\end{align}","text/plain":"<IPython.core.display.Latex object>"},"exec_count":5,"output_type":"execute_result"},"1":{"data":{"text/latex":"\\begin{align}{ x_{2} }&={  1\\  }\\end{align}","text/plain":"<IPython.core.display.Latex object>"},"exec_count":5,"output_type":"execute_result"},"2":{"data":{"text/latex":"\\begin{align}{ x_{tank,exit} }&={  1\\  }\\end{align}","text/plain":"<IPython.core.display.Latex object>"},"exec_count":5,"output_type":"execute_result"},"3":{"data":{"text/latex":"\\begin{align}{ p_{tank,exit} }&={ p_{2} } = { 700\\ \\mathrm{kPa}  }\\end{align}","text/plain":"<IPython.core.display.Latex object>"},"exec_count":5,"output_type":"execute_result"}},"pos":12,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":6,"id":"d163b0","input":"# initial specific volume \nv[1] = water.v(p=p[1],x=x[1])\n\n# initial mass in tank\nm[1] = V_tank/v[1]\n\nShowCalculations(locals(),comments=True);","output":{"0":{"data":{"text/markdown":" initial specific volume ","text/plain":"<IPython.core.display.Markdown object>"},"exec_count":6,"output_type":"execute_result"},"1":{"data":{"text/latex":"\\begin{align}{ v_{1} }&={ \\mathrm{water.v}\\left(\\mathrm{p}=p_{1} , \\mathrm{x}=x_{1}\\right) } = { 0.0010432\\ \\frac{\\mathrm{m}^{3}}{\\mathrm{kg}}  }\\end{align}","text/plain":"<IPython.core.display.Latex object>"},"exec_count":6,"output_type":"execute_result"},"2":{"data":{"text/markdown":" initial mass in tank","text/plain":"<IPython.core.display.Markdown object>"},"exec_count":6,"output_type":"execute_result"},"3":{"data":{"text/latex":"\\begin{align}{ m_{1} }&={ \\frac{V_{tank}}{v_{1}} }\\\\&={ \\frac{\\left( 0.1\\ \\mathrm{m}^{3} \\right)}{\\left( 0.0010432\\ \\frac{\\mathrm{m}^{3}}{\\mathrm{kg}} \\right)} }\\\\&={  95.863\\ \\mathrm{kg}  }\\end{align}","text/plain":"<IPython.core.display.Latex object>"},"exec_count":6,"output_type":"execute_result"}},"pos":15,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":7,"id":"d0680c","input":"# final specific volume \nv[2] = water.v(p=p[2],x=x[2])\n\n# final mass in tank\nm[2] = V_tank/v[2]\n\nShowCalculations(locals(),comments=True);","output":{"0":{"data":{"text/markdown":" final specific volume ","text/plain":"<IPython.core.display.Markdown object>"},"exec_count":7,"output_type":"execute_result"},"1":{"data":{"text/latex":"\\begin{align}{ v_{2} }&={ \\mathrm{water.v}\\left(\\mathrm{p}=p_{2} , \\mathrm{x}=x_{2}\\right) } = { 0.27277\\ \\frac{\\mathrm{m}^{3}}{\\mathrm{kg}}  }\\end{align}","text/plain":"<IPython.core.display.Latex object>"},"exec_count":7,"output_type":"execute_result"},"2":{"data":{"text/markdown":" final mass in tank","text/plain":"<IPython.core.display.Markdown object>"},"exec_count":7,"output_type":"execute_result"},"3":{"data":{"text/latex":"\\begin{align}{ m_{2} }&={ \\frac{V_{tank}}{v_{2}} }\\\\&={ \\frac{\\left( 0.1\\ \\mathrm{m}^{3} \\right)}{\\left( 0.27277\\ \\frac{\\mathrm{m}^{3}}{\\mathrm{kg}} \\right)} }\\\\&={  0.3666\\ \\mathrm{kg}  }\\end{align}","text/plain":"<IPython.core.display.Latex object>"},"exec_count":7,"output_type":"execute_result"}},"pos":17,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":8,"id":"9aef4c","input":"# mass conservation\nm['tank_exit'] = m[1]-m[2]\n\nShowCalculations(locals(),comments=True);","output":{"0":{"data":{"text/markdown":" mass conservation","text/plain":"<IPython.core.display.Markdown object>"},"exec_count":8,"output_type":"execute_result"},"1":{"data":{"text/latex":"\\begin{align}{ m_{tank,exit} }&={ m_{1} - m_{2} }\\\\&={ \\left( 95.863\\ \\mathrm{kg} \\right) - \\left( 0.3666\\ \\mathrm{kg} \\right) }\\\\&={  95.497\\ \\mathrm{kg}  }\\end{align}","text/plain":"<IPython.core.display.Latex object>"},"exec_count":8,"output_type":"execute_result"}},"pos":19,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":9,"id":"8d62c6","input":"# initial internal energy\nu[1] = water.u(p=p[1],x=x[1])\n\n# final internal energy\nu[2] = water.u(p=p[2],x=x[2])\n\n# exit enthalpy\nh['tank_exit'] = water.h(p=p['tank_exit'],x=x['tank_exit'])\n\nShowCalculations(locals(),comments=True);","output":{"0":{"data":{"text/markdown":" initial internal energy","text/plain":"<IPython.core.display.Markdown object>"},"exec_count":9,"output_type":"execute_result"},"1":{"data":{"text/latex":"\\begin{align}{ u_{1} }&={ \\mathrm{water.u}\\left(\\mathrm{p}=p_{1} , \\mathrm{x}=x_{1}\\right) } = { 417.4\\ \\frac{\\mathrm{kJ}}{\\mathrm{kg}}  }\\end{align}","text/plain":"<IPython.core.display.Latex object>"},"exec_count":9,"output_type":"execute_result"},"2":{"data":{"text/markdown":" final internal energy","text/plain":"<IPython.core.display.Markdown object>"},"exec_count":9,"output_type":"execute_result"},"3":{"data":{"text/latex":"\\begin{align}{ u_{2} }&={ \\mathrm{water.u}\\left(\\mathrm{p}=p_{2} , \\mathrm{x}=x_{2}\\right) } = { 2571.8\\ \\frac{\\mathrm{kJ}}{\\mathrm{kg}}  }\\end{align}","text/plain":"<IPython.core.display.Latex object>"},"exec_count":9,"output_type":"execute_result"},"4":{"data":{"text/markdown":" exit enthalpy","text/plain":"<IPython.core.display.Markdown object>"},"exec_count":9,"output_type":"execute_result"},"5":{"data":{"text/latex":"\\begin{align}{ h_{tank,exit} }&={ \\mathrm{water.h}\\left(\\mathrm{p}=p_{tank,exit} , \\mathrm{x}=x_{tank,exit}\\right) } = { 2762.8\\ \\frac{\\mathrm{kJ}}{\\mathrm{kg}}  }\\end{align}","text/plain":"<IPython.core.display.Latex object>"},"exec_count":9,"output_type":"execute_result"}},"pos":21,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"100b27","input":"We then initialize a `StatesTable` to hold and organize the property values of interests at each state/location","pos":5,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"108e6f","input":"Based on mass conservation, we can say the change in mass of the tank is equal to the amount of mass exiting the tank (and also the amount flowing through the turbine in our later analysis).","pos":18,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"160939","input":"### Assumptions\n  - Negligible changes in kinetic energy\n  - Negligible changes in potential energy\n  - Turbine is adiabatic\n  - Tank has quality of approximately 1 at the beginning\n  - Tank has quality of approximately 0 at the end\n  - Only saturated vapor leaves the tank\n  - Constant specific heat (cold-air-standard)","pos":11,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"1a7ad9","input":"### Summa","pos":29,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"1aab1d","input":"### Python Initialization\nWe'll start by importing the libraries we will use for our analysis.","pos":3,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"407bce","input":"To evaluate the first law, we will also need the internal energies states 1 and 2 and the enthalpy at the exit.  Each of these can also be looked up using two independent, intensive properties","pos":20,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"4e49e7","input":"\n# Example 0.3: Tank and Turbine\n*John F. Maddox, Ph.D., P.E.<br>\nUniversity of Kentucky - Paducah Campus<br>\nME 321: Engineering Thermodynamics II<br>*","pos":0,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"590a88","input":"### Total Heat Transfer\nTo determine the required heat transfer, we can focus on a control volume that includes only the tank. We state with the first law for a transient system and cancel out the negligible terms\n$$\\require{cancel}\n\\Delta U + \\cancel{\\Delta KE} + \\cancel{\\Delta PE} = Q_{1\\to2} - \\cancel{W_{1\\to2}} + \\sum_i \\cancelto{0}{m_i}\\left(h_i + \\frac{V_i^2}{2} + gz_i\\right) - \\sum_e m_e\\left( h_e + \\cancel{\\frac{V_e^2}{2}} + \\cancel{gz_e}\\right)$$\n$$ m_2u_2 - m_1u_1 = Q_{1\\to2} - m_eh_e$$\nand solve for our variable of interest\n$$ Q_{1\\to2} = m_2u_2 - m_1u_1  + m_eh_e$$","pos":13,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"5fa1e6","input":"### Turbine Work\nTo determine the work produced by the turbine, we can conduct a first law analysis on a control volume that contains only the turbine. We state with the first law for a transient system and cancel out the negligible terms and solving for the variable of interest\n$$\\require{cancel}\n\\cancel{\\Delta U} + \\cancel{\\Delta KE} + \\cancel{\\Delta PE} = \\cancel{Q_{1\\to2}} - W_{1\\to2} + \\sum_i m_i\\left(h_i + \\cancel{\\frac{V_i^2}{2}} + \\cancel{gz_i}\\right) - \\sum_e m_e\\left( h_e + \\cancel{\\frac{V_e^2}{2}} + \\cancel{gz_e}\\right)$$\n$$W_{1\\to2} = m_ih_i - m_eh_e$$\nIn this case we are assuming that all the fluid passes completely through the turbine, i.e.\\ not fluid remains in the turbine at the end.  Therefore, the entering and exiting mass flows are the same, $m_e=m_i$\n$$ W_{1\\to2} = m_i(h_i-h_e)$$","pos":24,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"6f8b0d","input":"## Solution\n","pos":2,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"7bd0be","input":"The initial mass can be found using the volume of the tank and the specific volume at state 1.  To find the specific volume, we need two independent, intensive properties to fix the state.  In this case, we are approximated the initial condition to be a saturated liquid at 100 kPa","pos":14,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"828d1d","input":"The final mass in the tank can be found using the same method by apply the known properties at state 2","pos":16,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"928c35","input":"We now know all the values required to find the heat transfer to the tank.","pos":22,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"bcd2ee","input":"We assume the mass exiting the tank is the same as the mass entering the turbine and there are not changes in properties between the tank exit and the turbine inlet.  Therefore, the only missing piece of information to complete our analysis is the enthalpy at the exit of the turbine, which can be found using two independent, intensive properties","pos":25,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"c48e45","input":"### Given Parameters\nWe now define variables to hold our known values.","pos":9,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"c9e065","input":"We now know all the values required to find the work output of the turbine.","pos":27,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"ce72e6","input":"We will use the `FluidProperties()` class from the `thermoJFM` library for this solution","pos":7,"state":"done","type":"cell"}
{"id":0,"time":1598995787630,"type":"user"}
{"last_load":1599051703558,"type":"file"}