{"backend_state":"ready","kernel":"python3","kernel_state":"idle","kernel_usage":{"cpu":17.972350231031818,"memory":43704320},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.2"}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":12,"id":"c64f1d","input":"from math import log10\nlog10(10)","output":{"0":{"data":{"text/plain":"1.0"},"exec_count":12,"output_type":"execute_result"}},"pos":21,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":13,"id":"e13234","input":"# Note: we use the `log` function from the math library for $\\ln()$\nSdot_gen = mdot*( c_p*log(T[2]/T[1]) - R*log(p[2]/p[1])) \n\nShowCalculations(locals(),comments=True);","output":{"0":{"data":{"text/markdown":" Note: we use the `log` function from the math library for $\\ln()$","text/plain":"<IPython.core.display.Markdown object>"},"exec_count":13,"output_type":"execute_result"},"1":{"data":{"text/latex":"\\begin{align}{ \\dot{S}_{gen} }&={ \\dot{m} \\left(- \\mathrm{log}\\left(\\frac{p_{2}}{p_{1}}\\right) R + \\mathrm{log}\\left(\\frac{T_{2}}{T_{1}}\\right) c_{p}\\right) }\\\\&={ \\left( 224.72\\ \\frac{\\mathrm{lb}}{\\mathrm{min}} \\right) \\left(- 2.3026 \\left( 0.068561\\ \\frac{\\mathrm{Btu}}{\\left(\\mathrm{lb} \\cdot \\mathrm{°R}\\right)} \\right) + 0.77163 \\left( 0.23998\\ \\frac{\\mathrm{Btu}}{\\left(\\mathrm{lb} \\cdot \\mathrm{°R}\\right)} \\right)\\right) }\\\\&={  6.136\\ \\frac{\\mathrm{Btu}}{\\left(\\mathrm{min} \\cdot \\mathrm{°R}\\right)}  }\\end{align}","text/plain":"<IPython.core.display.Latex object>"},"exec_count":13,"output_type":"execute_result"}},"pos":18,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":2,"id":"01c3ab","input":"properties_dict = {\n    'T':'degR',       # Temperature\n    'p':'psi',        # pressure\n    'Vdot':'ft^3/min' # volumetric flow rate\n}\nstates=StatesTable(properties=properties_dict, unit_system='English_R')\nfor property in states.properties:\n    globals()[property] = states.dict[property]\n    \nstates.display()","output":{"0":{"data":{"text/html":"<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>T [°R]</th>\n      <th>p [psi]</th>\n      <th>Vdot [ft³/min]</th>\n    </tr>\n  </thead>\n  <tbody>\n  </tbody>\n</table>","text/plain":"<IPython.core.display.HTML object>"},"exec_count":2,"output_type":"execute_result"}},"pos":6,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":3,"id":"557aa3","input":"air = IdealGasProperties('Air',unit_system='English_R')","pos":8,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":4,"id":"6a9f5a","input":"# the next three lines show different ways of achieving the result of creating a dimensional quantity, but the Q_() syntax is the preferred method.\nT[1] = Q_(70.,'degF')              # inlet temperature\np[1] = 14.7*units.psi              # inlet pressure\nVdot[1] = 3000.0*units('ft^3/min') # volumetric flow rate at inlet\np[2] = 10*p[1]                     # exit pressure\neta_c = Q_(0.8,'')                 # isentropic efficiency\n\nShowSummary(locals());","output":{"0":{"data":{"text/latex":"\\begin{align}{ \\eta_{c} }&={  0.8\\  }&{  }\\end{align}","text/plain":"<IPython.core.display.Latex object>"},"exec_count":4,"output_type":"execute_result"},"1":{"data":{"text/html":"<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>T [°R]</th>\n      <th>p [psi]</th>\n      <th>Vdot [ft³/min]</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>529.67</td>\n      <td>14.7</td>\n      <td>3000</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>-</td>\n      <td>147.0</td>\n      <td>-</td>\n    </tr>\n  </tbody>\n</table>","text/plain":"<IPython.core.display.HTML object>"},"exec_count":4,"output_type":"execute_result"}},"pos":10,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":5,"id":"3d4122","input":"# Ideal Gas\nR = air.R()   # specific gas constant\n\n# Constant thermal properties at room temperature\nT_room = Q_(25,'degC') # room temperature\nc_p = air.Cp(T_room)   # constant pressure specific heat at room temperature\nk = air.k(T_room)      # specific heat ratio at room temperature\n\nShowCalculations(locals(),comments=True);","output":{"0":{"data":{"text/markdown":" Ideal Gas","text/plain":"<IPython.core.display.Markdown object>"},"exec_count":5,"output_type":"execute_result"},"1":{"data":{"text/latex":"\\begin{align}{ R }&={ \\mathrm{air.R}\\left(\\right) } = { 0.068561\\ \\frac{\\mathrm{Btu}}{\\left(\\mathrm{lb} \\cdot \\mathrm{°R}\\right)}  }\\end{align}","text/plain":"<IPython.core.display.Latex object>"},"exec_count":5,"output_type":"execute_result"},"2":{"data":{"text/markdown":" Constant thermal properties at room temperature","text/plain":"<IPython.core.display.Markdown object>"},"exec_count":5,"output_type":"execute_result"},"3":{"data":{"text/latex":"\\begin{align}{ T_{room} }&={  25\\ \\mathrm{°C}  }\\end{align}","text/plain":"<IPython.core.display.Latex object>"},"exec_count":5,"output_type":"execute_result"},"4":{"data":{"text/latex":"\\begin{align}{ c_{p} }&={ \\mathrm{air.Cp}\\left(T_{room}\\right) } = { 0.23998\\ \\frac{\\mathrm{Btu}}{\\left(\\mathrm{lb} \\cdot \\mathrm{°R}\\right)}  }\\end{align}","text/plain":"<IPython.core.display.Latex object>"},"exec_count":5,"output_type":"execute_result"},"5":{"data":{"text/latex":"\\begin{align}{ k }&={ \\mathrm{air.k}\\left(T_{room}\\right) } = { 1.4\\  }\\end{align}","text/plain":"<IPython.core.display.Latex object>"},"exec_count":5,"output_type":"execute_result"}},"pos":12,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":6,"id":"0c38be","input":"T['2s'] = T[1].to('degR')*(p[2]/p[1])**((k-1)/k)\nT[2] = T[1] + (T['2s'].to('degF')-T[1])/eta_c\n\nShowCalculations(locals(),comments=True);","output":{"0":{"data":{"text/latex":"\\begin{align}{ T_{2s} }&={ T_{1} \\left(\\frac{p_{2}}{p_{1}}\\right)^{\\frac{k - 1}{k}} }\\\\&={ \\left( 529.67\\ \\mathrm{°R} \\right) \\left(\\frac{\\left(  1 47.0\\ \\mathrm{psi} \\right)}{\\left(  1 4.7\\ \\mathrm{psi} \\right)}\\right)^{\\frac{\\left(  1 .4\\ \\right) -  1 }{\\left(  1 .4\\ \\right)}} }\\\\&={   1 022.6\\ \\mathrm{°R}  }\\end{align}","text/plain":"<IPython.core.display.Latex object>"},"exec_count":6,"output_type":"execute_result"},"1":{"data":{"text/latex":"\\begin{align}{ T_{2} }&={ T_{1} + \\frac{- T_{1} + T_{2s}}{\\eta_{c}} }\\\\&={ \\left( 529.67\\ \\mathrm{°R} \\right) + \\frac{- \\left( 529.67\\ \\mathrm{°R} \\right) + \\left( 562.93\\ \\mathrm{°F} \\right)}{\\left( 0.8\\ \\right)} }\\\\&={  1145.8\\ \\mathrm{°R}  }\\end{align}","text/plain":"<IPython.core.display.Latex object>"},"exec_count":6,"output_type":"execute_result"}},"pos":14,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":7,"id":"874e08","input":"mdot = (p[1]*Vdot[1])/(R*T[1].to('degR'))\nmdot = mdot.to('lb/min') # hide\n\nWdot_c = mdot*c_p*(T[2]-T[1])\nWdot_c = Wdot_c.to('hp')\n\nShowCalculations(locals(),comments=True);","output":{"0":{"data":{"text/latex":"\\begin{align}{ \\dot{m} }&={ \\frac{\\dot{V}_{1} p_{1}}{R T_{1}} }\\\\&={ \\frac{\\left( 3000.0\\ \\frac{\\mathrm{ft}^{3}}{\\mathrm{min}} \\right) \\left( 14.7\\ \\mathrm{psi} \\right)}{\\left( 0.068561\\ \\frac{\\mathrm{Btu}}{\\left(\\mathrm{lb} \\cdot \\mathrm{°R}\\right)} \\right) \\left( 529.67\\ \\mathrm{°R} \\right)} }\\\\&={  224.72\\ \\frac{\\mathrm{lb}}{\\mathrm{min}}  }\\end{align}","text/plain":"<IPython.core.display.Latex object>"},"exec_count":7,"output_type":"execute_result"},"1":{"data":{"text/latex":"\\begin{align}{ \\dot{W}_{c} }&={ c_{p} \\dot{m} \\left(- T_{1} + T_{2}\\right) }\\\\&={ \\left( 0.23998\\ \\frac{\\mathrm{Btu}}{\\left(\\mathrm{lb} \\cdot \\mathrm{°R}\\right)} \\right) \\left( 224.72\\ \\frac{\\mathrm{lb}}{\\mathrm{min}} \\right) \\left(- \\left( 529.67\\ \\mathrm{°R} \\right) + \\left( 1145.8\\ \\mathrm{°R} \\right)\\right) }\\\\&={  783.55\\ \\mathrm{hp}  }\\end{align}","text/plain":"<IPython.core.display.Latex object>"},"exec_count":7,"output_type":"execute_result"},"2":{"data":{"text/latex":"\\begin{align}{ \\dot{W}_{c} }&={ \\dot{W}_{c} } = { 783.55\\ \\mathrm{hp}  }\\end{align}","text/plain":"<IPython.core.display.Latex object>"},"exec_count":7,"output_type":"execute_result"}},"pos":16,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":8,"id":"0ac6b7","input":"log(math.e)","output":{"0":{"data":{"text/plain":"1.0"},"exec_count":8,"output_type":"execute_result"}},"pos":20,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":9,"id":"f30022","input":"from math import log\nfrom thermoJFM import *\nunits.default_format='.3~P'","pos":4,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"10aca9","input":"### Second Law Analysis\nTo determine the entropy generation, we need to do a 2nd Law analysis\n\n$$\\require{cancel}\n\\cancelto{0}{\\frac{dS_{CV}}{dt}}= \\sum_j\\frac{\\cancelto{0}{\\dot{Q}_j}}{T_j}+\\sum_i\\dot{m}_is_i-\\sum_e\\dot{m}_es_e+\\dot{S}_{gen}$$\n$$\\dot{S}_{gen} = \\dot{m}(s_e-s_i)$$\nwhich can be rewritten using the constant specific heat assumption as\n$$\\dot{S}_{gen} = \\dot{m}\\left[ c_p\\ln\\left(\\frac{T_2}{T_1}\\right)-R\\ln\\left(\\frac{p_2}{p_1}\\right)\\right]$$\nwhere the temperatures and pressure must be in absolute units for this equation to be valid.\n","pos":17,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"23e24f","input":"## Solution\nIn the previous example (Ex 0.1), we wrote two separate python scripts to illustrate the difference between using only the standard python library and using third-party modules.  Those two scripts were placed in two self-contained code blocks to help show the separation between the two.  In this example we will jump straight to using the third-party libraries to make things easier, and we will spread the python code out across multiple cells with explanatory text (markdown) cells to describe the code rather than using python comments.  To execute this code you will need to execute each code block in order, or select the `Run All` option from the `Cell` menu above.","pos":2,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"692aad","input":"## Problem Statement\nAn air compressor has an isentropic efficiency of 80% and operates in a steady-state, steady-flow (SSSF) configuration with negligible changes in kinetic and potential energy.  It receives a volumetric flow rate of 3000 CFM with an inlet pressure of $p_1=14.7\\,\\text{psia}$ and inlet temperature of $T_1=70^\\circ\\text{F}$.  It compresses the air by a factor of 10. Determine<br>\n(a) Rate of compressor work, $\\mathrm{HP}$<br>\n(b) Rate of entropy generation, $\\mathrm{Btu/min^\\circ R}$","pos":1,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"755d13","input":"Note that we used `log` for the `math` library (imported in the first cell of this notebook) to evaluate the natural log in the above equation.  It is common in many programming languages and higher level textbooks to treat the natural log, $\\ln()$, as the default $\\log()$ and the base 10 log is only applied if it is explicitly stated, i.e. $\\log_{10}()$.","pos":19,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"89c533","input":"# Example 0.2: Compressor Isentropic Efficiency\n*John F. Maddox, Ph.D., P.E.<br>\nUniversity of Kentucky - Paducah Campus<br>\nME 321: Engineering Thermodynamics II<br>*","pos":0,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"900f5e","input":"### Python Initialization\nWe'll start by importing the libraries we will use for our analysis.  ","pos":3,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"92b3f0","input":"Now that we know the actual exit temperature, we can find the actual rate of work using the 1st Law.\n$$\\dot{W}_c = \\dot{m}c_p(T_2-T_1)$$\nHowever, we will also need to use the ideal gas law to find the mass flow rate before applying this equation.\n$$\\dot{m}_1 = \\frac{p_1\\dot{V}_1}{RT_1}$$","pos":15,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"a4c6dd","input":"In the first version of the previous example we defined a new variable for each property at each state, but in this example (and future examples) we will instead store the values in a custom python data structure from `thermoJFM`.  This is a different approach to variable naming and organization that will allow us to do some interesting things later on.","pos":5,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"b9bd6f","input":"\n### Assumptions\n  - Negligible changes in kinetic energy \n  - Negligible changes in potential energy \n  - Adiabatic (no heat transfer)\n  - Constant specific heat (cold-air-standard)\n  - Ideal gas (cold-air-standard)\n\nWe could pull properties for air from the tables in the back of the book since we are assuming constant specific heat and ideal gas behavior, or we can look them using `air` reference we created earlier\n","pos":11,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"d54246","input":"### Given Parameters\nWe now define variables to hold our known values.","pos":9,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"f14f4d","input":"We can also use the `thermoJFM` library to look up property values for real fluid using the `FluidProperties()` class or for ideal gasses using the `IdealGasProperties()`.  For each of these functions you initialize (instantiate) the class by passing it the name of the fluid and the an optional preferred unit system to use when returning values (default: SI in $\\mathrm{^\\circ C}$.  For this case, we will treat the air as an ideal gas, so we will use the `IdealGasProperties()` class.","pos":7,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"f2342d","input":"### Isentropic Efficiency\nThe isentropic efficiency of a compressor is defined as the ratio of the work that would be required if the compressor were ideal (isentropic) and operating between the same inlet state and exit pressure as the real device to the actual work.\n$$\\eta_c=\\frac{\\dot{W}_s}{\\dot{W}_c}$$\nwhere $\\dot{W}_s$ is the rate of isentropic work and $\\dot{W}_c$ is the rate of actual compressor work.  From a first law analysis, we can rewrite the work terms as changes in enthalpy between the inlet and exit states.\n$$\\require{cancel}\n\\eta_c = \\frac{\\cancel{\\dot{m}}(h_{2s}-h_1)}{\\cancel{\\dot{m}}(h_2-h_1)}$$\nApplying the constant specific heat assumption allows us to rewrite the changes in enthalpy as $\\Delta h=c_p\\Delta T$\n$$\\require{cancel}\n\\eta_c = \\frac{\\cancel{c_p}(T_{2s}-T_1)}{\\cancel{c_p}(T_2-T_1)}$$\nOur first goal is to find the exit temperature, so we solve for $T_2$\n$$T_2 = T_1 + \\frac{T_{2s}-T_1}{\\eta_c}$$\nHowever, in order to use this equation, we first need to find the temperature of the isentropic exit state, $T_{2s}$.  We can find this using ideal gas polytropic relations with $n=k$\n$$T_{2s}=T_1\\left(\\frac{p_2}{p_1}\\right)^{\\frac{k-1}{k}}$$\nNote that in order to apply the polytropic relation above, we must convert the temperatures to absolute units, i.e. $^\\circ\\text{R}$","pos":13,"state":"done","type":"cell"}
{"id":0,"time":1598642113380,"type":"user"}
{"last_load":1598800913254,"type":"file"}