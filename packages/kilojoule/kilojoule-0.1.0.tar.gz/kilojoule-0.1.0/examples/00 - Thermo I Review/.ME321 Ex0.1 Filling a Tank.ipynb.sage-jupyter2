{"backend_state":"ready","kernel":"python3","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":80769024},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.2"}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":1,"id":"8959b7","input":"# Given Parameters\nT_i = 300 # inlet temperature (C)\np_i = 14*100 # inlet pressure (kPa) Note: 1 bar = 100 kPa\nV = 0.25 # tank volume\n\n# Assumptions\np_2 = p_i # mechanical equilibrium -> final pressure is same as inlet pressure\n\n# Look up enthalpy in property tables h(T_i,p_i) \n# Superheated steam, 1.4 MPa\nh_i = 3040.9 # (kJ/kg) \nprint('h_i = {:.1f} kJ/kg'.format(h_i))\n\n# 1st Law\nu_2 = h_i\nprint('u_2 = {:.2f} kJ/kg'.format(u_2))\n\n# Look up temperature in property tables T(p_2,u_2) \n# Superheated steam, doesn't line up with temperature so we will need to interpolate\n# (y-y_below)/(y_above-y_below) = (x-x_below)/(x_above-x_below) -> Solve for desired quantity (y)\n# y = (x-x_below)/(x_above-x_below)*(y_above-y_below)+y_below\nT_2 = (u_2-2953.1)/(3121.8-2953.1)*(500-400)+400 # (C) T(p=1400 kPa, u=u_2)\nprint('The final temperature is T_2 = {:.2f} C'.format(T_2))\n\n# Look up specific volume in tables v(p_2,u_2)\n# Will need to interpolate again\nv_2 = (u_2-2953.1)/(3121.8-2953.1)*(0.25216-0.21782)+0.21782 # (m^3/kg) v(p=1400 kPa, u=u_2)\nprint('v_2 = {:.3f} m^3/kg'.format(v_2))\n\n# Calculate mass from volume and specific volume\nm_2 = V/v_2\nprint('m_2 = {:.5f} kg'.format(m_2))\n\n# 2nd Law\n# Look up specific entropies for inlet and final state\ns_i = 6.9553 # (kJ/kg/K) s(p=1400 kPa, T=T_i)\nprint('s_i = {:.4f} kJ/kg/K'.format(s_i))\ns_2 = (u_2-2953.1)/(3121.8-2953.1)*(7.6047-7.3046)+7.3046 # (m^3/kg) s(p=1400 kPa, u=u_2)\nprint('s_2 = {:.4f} kJ/kg/K'.format(s_2))\nS_gen = m_2*(s_2-s_i)\nprint('The entropy generation is: S_gen = {:.4f} kJ/(kg K)'.format(S_gen))","output":{"0":{"name":"stdout","output_type":"stream","text":"h_i = 3040.9 kJ/kg\nu_2 = 3040.90 kJ/kg\nThe final temperature is T_2 = 452.05 C\nv_2 = 0.236 m^3/kg\nm_2 = 1.06071 kg\ns_i = 6.9553 kJ/kg/K\ns_2 = 7.4608 kJ/kg/K\nThe entropy generation is: S_gen = 0.5362 kJ/(kg K)\n"}},"pos":7,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":7,"id":"9e1536","input":"# import libraries (thermoJFM depends on CoolProps, PYroMat, pint, sympy, pandas, numpy, and matplotlib)\nfrom thermoJFM import *\nunits.default_format = '.5~P'\n\n###### Initialize variables ###################\nproperties_dict = {\n    'T':'degC',     # Temperature\n    'p':'kPa',      # pressure\n    'v':'m^3/kg',   # specific volume\n    'u':'kJ/kg',    # internal energy\n    'h':'kJ/kg',    # enthalpy\n    's':'kJ/kg/K',  # entropy\n    'm':'kg',       # mass\n}\nstates=StatesTable(properties=properties_dict)\nfor property in states.properties:\n    globals()[property] = states.dict[property]\n\n###### Property Evaluation ###################\n# Use the `FluidProperties()` class to look up property values, i.e instead of interpolating from tables\nwater = FluidProperties('Water', unit_system='SI_C') # instantiate the FluidProperties class with the fluid type set to Water\n    \n###### Given values from Problem Statement #####\n# Note: use `Q_(value,'units')` syntax to define dimensional quantities\nT['i'] = Q_(300,'degC') # inlet temperature\np['i'] = Q_(14,'bar') # inlet pressure\nV = Q_(0.25,'m^3') # tank volume\n\n###### Assumptions #############################\n# mechanical equilibrium: final pressure is same as inlet pressure\np[2]=p['i'] \n\n###### Solution ################################\n# For water: We need two independent intensive properties ($ind_1$, $ind_2$), i.e. $T$ and $P$, to get a dependent intensive property ($dep$), i.e. $h$\nh['i'] = water.h(T=T['i'],p=p['i']) # h_i=h(T_i,p_i) for water\n\n# First Law Analysis\nu[2] = h['i'] \n\n# Look up temperature for $p_2$ and $u_2$\nT[2] = water.T(p=p[2], u=u[2],) # T_2=T(p_2,u_2) for water\n\n# Mass Balance\nv[2] = water.v(T=T[2], p=p[2]) # v_2=v(T_2,p_2) for water\nm[2] = V/v[2]\nm['i'] = m[2]\n\n# Look up entropy values\ns['i'] = water.s(T=T['i'],p=p['i'])\ns[2] = water.s(T=T[2],p=p[2])\n\n# Second Law\nS_gen = m[2]*(s[2]-s['i'])\n\n###### Summary of Results ######################\nShowCalculations(locals(), comments=True)\nShowSummary(locals())\nShowSummary(locals(),['T[2]','S_gen']);","output":{"0":{"data":{"text/markdown":" import libraries (thermoJFM depends on CoolProps, PYroMat, pint, sympy, pandas, numpy, and matplotlib)","text/plain":"<IPython.core.display.Markdown object>"},"exec_count":7,"output_type":"execute_result"},"1":{"data":{"text/markdown":"##### Initialize variables ###################","text/plain":"<IPython.core.display.Markdown object>"},"exec_count":7,"output_type":"execute_result"},"10":{"data":{"text/markdown":" mechanical equilibrium: final pressure is same as inlet pressure","text/plain":"<IPython.core.display.Markdown object>"},"exec_count":7,"output_type":"execute_result"},"11":{"data":{"text/latex":"\\begin{align}{ p_{2} }&={ p_{i} } = { 1400.0\\ \\mathrm{kPa}  }\\end{align}","text/plain":"<IPython.core.display.Latex object>"},"exec_count":7,"output_type":"execute_result"},"12":{"data":{"text/markdown":"##### Solution ################################","text/plain":"<IPython.core.display.Markdown object>"},"exec_count":7,"output_type":"execute_result"},"13":{"data":{"text/markdown":" For water: We need two independent intensive properties ($ind_1$, $ind_2$), i.e. $T$ and $P$, to get a dependent intensive property ($dep$), i.e. $h$","text/plain":"<IPython.core.display.Markdown object>"},"exec_count":7,"output_type":"execute_result"},"14":{"data":{"text/latex":"\\begin{align}{ h_{i} }&={ \\mathrm{water.h}\\left(\\mathrm{T}=T_{i} , \\mathrm{p}=p_{i}\\right) } = { 3040.9\\ \\frac{\\mathrm{kJ}}{\\mathrm{kg}}  }\\end{align}","text/plain":"<IPython.core.display.Latex object>"},"exec_count":7,"output_type":"execute_result"},"15":{"data":{"text/markdown":" First Law Analysis","text/plain":"<IPython.core.display.Markdown object>"},"exec_count":7,"output_type":"execute_result"},"16":{"data":{"text/latex":"\\begin{align}{ u_{2} }&={ h_{i} } = { 3040.9\\ \\frac{\\mathrm{kJ}}{\\mathrm{kg}}  }\\end{align}","text/plain":"<IPython.core.display.Latex object>"},"exec_count":7,"output_type":"execute_result"},"17":{"data":{"text/markdown":" Look up temperature for $p_2$ and $u_2$","text/plain":"<IPython.core.display.Markdown object>"},"exec_count":7,"output_type":"execute_result"},"18":{"data":{"text/latex":"\\begin{align}{ T_{2} }&={ \\mathrm{water.T}\\left(\\mathrm{p}=p_{2} , \\mathrm{u}=u_{2}\\right) } = { 452.33\\ \\mathrm{Â°C}  }\\end{align}","text/plain":"<IPython.core.display.Latex object>"},"exec_count":7,"output_type":"execute_result"},"19":{"data":{"text/markdown":" Mass Balance","text/plain":"<IPython.core.display.Markdown object>"},"exec_count":7,"output_type":"execute_result"},"2":{"data":{"text/markdown":"##### Property Evaluation ###################","text/plain":"<IPython.core.display.Markdown object>"},"exec_count":7,"output_type":"execute_result"},"20":{"data":{"text/latex":"\\begin{align}{ v_{2} }&={ \\mathrm{water.v}\\left(\\mathrm{T}=T_{2} , \\mathrm{p}=p_{2}\\right) } = { 0.23588\\ \\frac{\\mathrm{m}^{3}}{\\mathrm{kg}}  }\\end{align}","text/plain":"<IPython.core.display.Latex object>"},"exec_count":7,"output_type":"execute_result"},"21":{"data":{"text/latex":"\\begin{align}{ m_{2} }&={ \\frac{V}{v_{2}} }\\\\&={ \\frac{\\left( 0.25\\ \\mathrm{m}^{3} \\right)}{\\left( 0.23588\\ \\frac{\\mathrm{m}^{3}}{\\mathrm{kg}} \\right)} }\\\\&={  1.0599\\ \\mathrm{kg}  }\\end{align}","text/plain":"<IPython.core.display.Latex object>"},"exec_count":7,"output_type":"execute_result"},"22":{"data":{"text/latex":"\\begin{align}{ m_{i} }&={ m_{2} } = { 1.0599\\ \\mathrm{kg}  }\\end{align}","text/plain":"<IPython.core.display.Latex object>"},"exec_count":7,"output_type":"execute_result"},"23":{"data":{"text/markdown":" Look up entropy values","text/plain":"<IPython.core.display.Markdown object>"},"exec_count":7,"output_type":"execute_result"},"24":{"data":{"text/latex":"\\begin{align}{ s_{i} }&={ \\mathrm{water.s}\\left(\\mathrm{T}=T_{i} , \\mathrm{p}=p_{i}\\right) } = { 6.9552\\ \\frac{\\mathrm{kJ}}{\\left(\\mathrm{K} \\cdot \\mathrm{kg}\\right)}  }\\end{align}","text/plain":"<IPython.core.display.Latex object>"},"exec_count":7,"output_type":"execute_result"},"25":{"data":{"text/latex":"\\begin{align}{ s_{2} }&={ \\mathrm{water.s}\\left(\\mathrm{T}=T_{2} , \\mathrm{p}=p_{2}\\right) } = { 7.4663\\ \\frac{\\mathrm{kJ}}{\\left(\\mathrm{K} \\cdot \\mathrm{kg}\\right)}  }\\end{align}","text/plain":"<IPython.core.display.Latex object>"},"exec_count":7,"output_type":"execute_result"},"26":{"data":{"text/markdown":" Second Law","text/plain":"<IPython.core.display.Markdown object>"},"exec_count":7,"output_type":"execute_result"},"27":{"data":{"text/latex":"\\begin{align}{ S_{gen} }&={ m_{2} \\left(s_{2} - s_{i}\\right) }\\\\&={ \\left( 1.0599\\ \\mathrm{kg} \\right) \\left(\\left( 7.4663\\ \\frac{\\mathrm{kJ}}{\\left(\\mathrm{K} \\cdot \\mathrm{kg}\\right)} \\right) - \\left( 6.9552\\ \\frac{\\mathrm{kJ}}{\\left(\\mathrm{K} \\cdot \\mathrm{kg}\\right)} \\right)\\right) }\\\\&={  0.5417\\ \\frac{\\mathrm{kJ}}{\\mathrm{K}}  }\\end{align}","text/plain":"<IPython.core.display.Latex object>"},"exec_count":7,"output_type":"execute_result"},"28":{"data":{"text/markdown":"##### Summary of Results ######################","text/plain":"<IPython.core.display.Markdown object>"},"exec_count":7,"output_type":"execute_result"},"29":{"data":{"text/latex":"\\begin{align}{ S_{gen} }&={  0.5417\\ \\frac{\\mathrm{kJ}}{\\mathrm{K}}  }&{ V }&={  0.25\\ \\mathrm{m}^{3}  }&{  }\\end{align}","text/plain":"<IPython.core.display.Latex object>"},"exec_count":7,"output_type":"execute_result"},"3":{"data":{"text/markdown":" Use the `FluidProperties()` class to look up property values, i.e instead of interpolating from tables","text/plain":"<IPython.core.display.Markdown object>"},"exec_count":7,"output_type":"execute_result"},"30":{"data":{"text/html":"<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>T [Â°C]</th>\n      <th>p [kPa]</th>\n      <th>v [mÂ³/kg]</th>\n      <th>u [kJ/kg]</th>\n      <th>h [kJ/kg]</th>\n      <th>s [kJ/K/kg]</th>\n      <th>m [kg]</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2</th>\n      <td>452.330703</td>\n      <td>1400.0</td>\n      <td>0.235878</td>\n      <td>3040.92</td>\n      <td>-</td>\n      <td>7.466333</td>\n      <td>1.059871</td>\n    </tr>\n    <tr>\n      <th>i</th>\n      <td>300.000000</td>\n      <td>1400.0</td>\n      <td>-</td>\n      <td>-</td>\n      <td>3040.92</td>\n      <td>6.955232</td>\n      <td>1.059871</td>\n    </tr>\n  </tbody>\n</table>","text/plain":"<IPython.core.display.HTML object>"},"exec_count":7,"output_type":"execute_result"},"31":{"data":{"text/latex":"\\begin{align}{ T_{2} }&={  452.33\\ \\mathrm{Â°C}  }\\\\{ S_{gen} }&={  0.5417\\ \\frac{\\mathrm{kJ}}{\\mathrm{K}}  }\\\\{  }\\end{align}","text/plain":"<IPython.core.display.Latex object>"},"exec_count":7,"output_type":"execute_result"},"4":{"data":{"text/markdown":"##### Given values from Problem Statement #####","text/plain":"<IPython.core.display.Markdown object>"},"exec_count":7,"output_type":"execute_result"},"5":{"data":{"text/markdown":" Note: use `Q_(value,'units')` syntax to define dimensional quantities","text/plain":"<IPython.core.display.Markdown object>"},"exec_count":7,"output_type":"execute_result"},"6":{"data":{"text/latex":"\\begin{align}{ T_{i} }&={  300\\ \\mathrm{Â°C}  }\\end{align}","text/plain":"<IPython.core.display.Latex object>"},"exec_count":7,"output_type":"execute_result"},"7":{"data":{"text/latex":"\\begin{align}{ p_{i} }&={ \\left( 14\\ \\mathrm{bar} \\right) } = { 1400.0\\ \\mathrm{kPa}  }\\end{align}","text/plain":"<IPython.core.display.Latex object>"},"exec_count":7,"output_type":"execute_result"},"8":{"data":{"text/latex":"\\begin{align}{ V }&={  0.25\\ \\mathrm{m}^{3}  }\\end{align}","text/plain":"<IPython.core.display.Latex object>"},"exec_count":7,"output_type":"execute_result"},"9":{"data":{"text/markdown":"##### Assumptions #############################","text/plain":"<IPython.core.display.Markdown object>"},"exec_count":7,"output_type":"execute_result"}},"pos":10,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"24c77c","input":"### Solving Using Python \nWe will look at two methods for solving this problem using Python.  One will use only the Python standard library to perform the calculations using values pulled from your textbook (the same way you would use your calculator).  The other method will use some third-party and custom libraries to automate the property evaluation.\n\n","pos":5,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"411fc2","input":"## Solution\n\n- Assumptions\n  - Negligible changes in kinetic energy (the tank isn't moving)\n  - Negligible changes in potential energy (the change in potential energy of the steam is small compared to the other terms)\n  - Adiabatic (no heat transfer)\n  - No work (rigid container, no moving shafts, etc.)\n  - No mass exiting the tank\n  - Mechanical equilibrium, $p_2=p_i$ (process continues until the tank pressure equals the inlet pressure)\n  ","pos":1,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"5a8ce1","input":"- 1st Law\n\n$$\n\\require{cancel}\n\\Delta U+\\cancel{\\Delta KE} + \\cancel{\\Delta PE} = \\cancel{Q_{1-2}} - \\cancel{W_{1-2}} + \\sum_im_i\\left( h_i + \\cancel{\\frac{V_i^2}{2}} + \\cancel{gz_i} \\right) - \\sum_e \\cancel{m_e} \\left( h_e + \\frac{V_e^2}{2} + gz_e \\right)$$\n\nNo mass in tank at beginning of process\n$$m_2u_2-\\cancelto{0}{m_1}u_1=m_ih_i$$\n\nThe final mass in the tank at the end of the process is the same as the mass that entered the tank, $m_2=m_i$\n\n$$\\cancel{m_2}u_2=\\cancel{m_i}{h_i}$$\n$$u_2 = h_i$$\n\nThe internal energy at the end of the process will be equal to the enthalpy of the entering fluid, which can be found in the tables using two independent, intensive properties ($T_i$ and $p_i$).\n$$h_i=h(T=T_i,p=p_i)$$\nThe temperature at the end of the process can then be found in the tables using two independent, intensive properties ($p_2$ and $u_2$)\n$$T_2=T(p=p_2, u=u_2)$$","pos":2,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"70b787","input":"- 2nd Law\n\n\n$$m_2s_2-\\cancelto{0}{m_1}s_1 = \\sum_j\\frac{\\cancelto{0}{Q_j}}{T_j}+\\sum_im_is_i-\\sum_e\\cancelto{0}{m_e}s_e+S_{gen}$$\n\n\n$$S_{gen}=m_2(s_2-s_i)$$\nSo the entropy generation is the amount of entropy stored in the tank at the end of the process minus the amount that flowed into the tank through the inlet. That is, the entropy of the supply line decreased as fluid left it to flow into the tank, but the entropy of the tank increased by more than the amount that the supply line decreased. Thus there is a net increase in entropy of the universe.","pos":4,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"8b382e","input":"#### Method 2) Using the Custom Library: `thermoJFM` \nPython is a general purpose programming language that is not optimized for math/science computations in it's base configuration.  However, there are many third-party libraries that can be easily loaded at runtime to enable additional capabilities ([`numpy`](http://numpy.org), [`scipy`](scipy.org), [`sympy`](http://sympy.org), [`pandas`](http://pandas.pydata.org), and [`matplotlib`](http://matplotlib.org) are commonly used in scientific computing).  In the example code below, we will load a custom library `thermoJFM` (written specifically for this course), which will enable us to automate the property evaluation (no need to look up properties in the tabels or interpolate) and to include units in our calculations (no need to worry about unit conversion mistakes).  This custom library (`thermoJFM`) will load a few third-party, publicly available libraries ([`CoolProp`](http://coolprop.org) for property evaluation real fluids, [`PYroMat`](http://pyromat.org) for property evaluation of ideal gases, and [`pint`](https://pint.readthedocs.io/en/stable/) for unit tracking and conversion).","pos":9,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"8ec4cd","input":"#### Method 1) Using Property Tables from the Textbook with Standard Python Library\nIn the example code below, we define variables to hold our given values, then we perform calculations with them.  In this mode the Python interpreter is providing little more benefit than using a calculator.  However, we at least have a record of our calculations, and we could easily repeat them for different inital conditions if needed.","pos":6,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"bf97a5","input":"- Mass\n  The final mass in the tank can be calculated using the volume of the tank and specific volume of the fluid (inverse of density).\n  $$m_2=\\frac{V}{v_2}$$\n  where the specific volume at the end of the process, $v_2$, can be found in the tables using two independent, intensive properties in the same way we found the final temperature.\n  $$v_2=v(p=p_2,u=u_2)$$","pos":3,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"d2cc6d","input":"The example code above used just the standard python library to complete our calculations.  This is nice because we could re-run that code on any computer with a Python interpreter without the need to install additional software or packages.  However, there are a few weakness in this approach.  \n\nThe most obvious weakness in the example above is that we have \"hard-coded\" many of the numbers required for the calculations.  Specifically, each time we pulled properties from the tables (directly or through interpolation) we typed the numbers from the tables into our code.  If the operating conditions changed, we would need to go through and update each of those numbers by hand **(23 place in this relatively simple example)**.  It would be much better if we could automate that process by using a function to look up the properties for us.  \n\nA second weakness is that we didn't include units in our calculations.  Most (if not all) of the numbers we will be using in our calculations for this course represent physical quantities, which have no real significance without their units.  In the example above, we have made comments beside many of the operations to reminds us of the units and we printed the units in the output for our answers.  However, this method requires us to do the unit tracking and unit conversion outside of the calculations, which can lead to unit errors and inconsistency.  It would be better if the unit tracking and conversion were an integral part of our calculations.\n\n","pos":8,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"d388e2","input":"In the second version of the example, you can see that there are **only three hard coded numbers**: the inlet temperature (`T['i']`), the inlet pressure (`p[i]`), and the tank volume (`V`).  This is a major improvement over the first iteration of the code because we can simply change the three lines in the `# Given Parameters` section to re-run our calculations for different operating conditions, a different unit system (i.e. English units), or even a different fluid (assuming we select one of the fluids supported by the `CoolProp` library).\n\nYou will also notice that the units were an integral part of the calculation.  All the functions in the `thermoJFM` library support (and require) dimensional units for all physical quantities.  Besides being a good practice to use for all engineering calculations, this has the added benefit that the unit conversions are handled automatically; we did not need to convert 14 bar to 1400 kPa manually, and we did not need to specify the output units for each of the calculated parameters.  \n\nFinally, the `thermoJFM` package provides the `ShowCalculations()` and `ShowSummary()` classes that take advantage of the $\\LaTeX$ capability built into to the Jupyter notebook to display the results of the calculations in nicely formatted equations that appear the way you would write them by hand.  The progression for each calculation from symbolic form to expanded numeric form to final solution allows the reader to see the details of your work quickly, and this is also the form you should use to show your work whenever you are submitting handwritten solutions for homework or on exams to be eligible for partial credit. ","pos":11,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"f28c7d","input":"# Example 0.1: Filling a Tank\n*John F. Maddox, Ph.D., P.E.<br>\nUniversity of Kentucky - Paducah Campus<br>\nME 321: Engineering Thermodynamics II<br>*\n\n## Problem Statement\nSteam at a pressure of $14\\,\\mathrm{bar}$ and a temperature of $300^\\circ\\mathrm{C}$ is flowing in a pipe.  Connected to the pipe through a valve is an initially evacuated tank with a volume of $0.25\\,\\mathrm{m^3}$.  The tank fills with steam until mechanical equilibrium is achieved.  Assume the system is adiabatic and that changes in kinetic and potential energy are negligible.  What is the final temperature in the tank, and how much entropy was generated during the process?","pos":0,"state":"done","type":"cell"}
{"id":0,"time":1598577423801,"type":"user"}
{"last_load":1598636836691,"type":"file"}