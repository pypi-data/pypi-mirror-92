"""
    kika

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.5.3
    Contact: info@kikapay.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from openapi_client.api_client import ApiClient, Endpoint
from openapi_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from openapi_client.model.exact_recurring_payment import ExactRecurringPayment
from openapi_client.model.exact_recurring_payment201_response import ExactRecurringPayment201Response
from openapi_client.model.exact_recurring_payment400_response import ExactRecurringPayment400Response
from openapi_client.model.exact_recurring_payment500_response import ExactRecurringPayment500Response
from openapi_client.model.payment403_response import Payment403Response
from openapi_client.model.single_immediate_payment import SingleImmediatePayment
from openapi_client.model.single_immediate_payment_multi import SingleImmediatePaymentMulti
from openapi_client.model.single_payment201_response import SinglePayment201Response
from openapi_client.model.single_payment400_response import SinglePayment400Response
from openapi_client.model.single_payment500_response import SinglePayment500Response


class PaymentsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __create_exact_recurring_payment(
            self,
            exact_recurring_payment,
            **kwargs
        ):
            """Create a link for an exact recurring payment  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.create_exact_recurring_payment(exact_recurring_payment, async_req=True)
            >>> result = thread.get()

            Args:
                exact_recurring_payment (ExactRecurringPayment):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ExactRecurringPayment201Response
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['exact_recurring_payment'] = \
                exact_recurring_payment
            return self.call_with_http_info(**kwargs)

        self.create_exact_recurring_payment = Endpoint(
            settings={
                'response_type': (ExactRecurringPayment201Response,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/v1/payments/recurring/exact',
                'operation_id': 'create_exact_recurring_payment',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'exact_recurring_payment',
                ],
                'required': [
                    'exact_recurring_payment',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'exact_recurring_payment':
                        (ExactRecurringPayment,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'exact_recurring_payment': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__create_exact_recurring_payment
        )

        def __create_exact_single_payment(
            self,
            single_immediate_payment,
            **kwargs
        ):
            """Create a link for an exact single payment  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.create_exact_single_payment(single_immediate_payment, async_req=True)
            >>> result = thread.get()

            Args:
                single_immediate_payment (SingleImmediatePayment):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                SinglePayment201Response
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['single_immediate_payment'] = \
                single_immediate_payment
            return self.call_with_http_info(**kwargs)

        self.create_exact_single_payment = Endpoint(
            settings={
                'response_type': (SinglePayment201Response,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/v1/payments/single/immediate/exact',
                'operation_id': 'create_exact_single_payment',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'single_immediate_payment',
                ],
                'required': [
                    'single_immediate_payment',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'single_immediate_payment':
                        (SingleImmediatePayment,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'single_immediate_payment': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__create_exact_single_payment
        )

        def __create_single_payment_multi_use(
            self,
            single_immediate_payment_multi,
            **kwargs
        ):
            """Create a link for a multi-use exact single payment  # noqa: E501

            Payment links that are created with this method can be used to make payments to merchants multiple times, by multiple customers.  The amount of times that the link can be used may be pre-defined in the request body, otherwise the link can be reused continuously.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.create_single_payment_multi_use(single_immediate_payment_multi, async_req=True)
            >>> result = thread.get()

            Args:
                single_immediate_payment_multi (SingleImmediatePaymentMulti):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                SinglePayment201Response
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['single_immediate_payment_multi'] = \
                single_immediate_payment_multi
            return self.call_with_http_info(**kwargs)

        self.create_single_payment_multi_use = Endpoint(
            settings={
                'response_type': (SinglePayment201Response,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/v1/payments/single/immediate/exact/multi-use-link',
                'operation_id': 'create_single_payment_multi_use',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'single_immediate_payment_multi',
                ],
                'required': [
                    'single_immediate_payment_multi',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'single_immediate_payment_multi':
                        (SingleImmediatePaymentMulti,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'single_immediate_payment_multi': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__create_single_payment_multi_use
        )
