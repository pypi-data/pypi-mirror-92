"""
    kika

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.5.3
    Contact: info@kikapay.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from openapi_client.api_client import ApiClient, Endpoint
from openapi_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from openapi_client.model.reconciliation_multi_use_link_payment200_response import ReconciliationMultiUseLinkPayment200Response
from openapi_client.model.reconciliation_multi_use_link_payment403_response import ReconciliationMultiUseLinkPayment403Response
from openapi_client.model.reconciliation_multi_use_link_payment404_response import ReconciliationMultiUseLinkPayment404Response
from openapi_client.model.reconciliation_multi_use_link_payment500_response import ReconciliationMultiUseLinkPayment500Response
from openapi_client.model.reconciliation_payment200_response import ReconciliationPayment200Response
from openapi_client.model.reconciliation_payment400_response import ReconciliationPayment400Response
from openapi_client.model.reconciliation_payment403_response import ReconciliationPayment403Response
from openapi_client.model.reconciliation_payment404_response import ReconciliationPayment404Response
from openapi_client.model.reconciliation_payment500_response import ReconciliationPayment500Response
from openapi_client.model.reconciliation_payments import ReconciliationPayments
from openapi_client.model.reconciliation_payments200_response import ReconciliationPayments200Response
from openapi_client.model.reconciliation_payments400_response import ReconciliationPayments400Response
from openapi_client.model.reconciliation_payments403_response import ReconciliationPayments403Response
from openapi_client.model.reconciliation_payments404_response import ReconciliationPayments404Response
from openapi_client.model.reconciliation_payments500_response import ReconciliationPayments500Response
from openapi_client.model.reconciliation_single_payments import ReconciliationSinglePayments


class ReconciliationApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __reconciliation_multi_use_link_payments(
            self,
            kika_reference,
            **kwargs
        ):
            """Get multi-use single immediate payments  # noqa: E501

            Requests to this endpoint allow a merchant to view a summary of all single immediate payments that were created from a multi-use payment link.   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.reconciliation_multi_use_link_payments(kika_reference, async_req=True)
            >>> result = thread.get()

            Args:
                kika_reference (str): Unique KiKa reference ID.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ReconciliationMultiUseLinkPayment200Response
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['kika_reference'] = \
                kika_reference
            return self.call_with_http_info(**kwargs)

        self.reconciliation_multi_use_link_payments = Endpoint(
            settings={
                'response_type': (ReconciliationMultiUseLinkPayment200Response,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/v1/payments/reconciliation/{kikaReference}/multi-use-link',
                'operation_id': 'reconciliation_multi_use_link_payments',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'kika_reference',
                ],
                'required': [
                    'kika_reference',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'kika_reference':
                        (str,),
                },
                'attribute_map': {
                    'kika_reference': 'kikaReference',
                },
                'location_map': {
                    'kika_reference': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__reconciliation_multi_use_link_payments
        )

        def __reconciliation_payment(
            self,
            kika_reference,
            **kwargs
        ):
            """Get information about a payment  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.reconciliation_payment(kika_reference, async_req=True)
            >>> result = thread.get()

            Args:
                kika_reference (str): Unique KiKa reference ID.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ReconciliationPayment200Response
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['kika_reference'] = \
                kika_reference
            return self.call_with_http_info(**kwargs)

        self.reconciliation_payment = Endpoint(
            settings={
                'response_type': (ReconciliationPayment200Response,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/v1/payments/reconciliation/{kikaReference}',
                'operation_id': 'reconciliation_payment',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'kika_reference',
                ],
                'required': [
                    'kika_reference',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'kika_reference':
                        (str,),
                },
                'attribute_map': {
                    'kika_reference': 'kikaReference',
                },
                'location_map': {
                    'kika_reference': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__reconciliation_payment
        )

        def __reconciliation_recurring_payments(
            self,
            reconciliation_payments,
            **kwargs
        ):
            """Get a list of recurring payments  # noqa: E501

            Requests to this endpoint will allow merchants to get information about recurring payments that they have created.   The response will include information about the group of payments that satisfy the request parameters, as well as an array containing an object with information about each payment.   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.reconciliation_recurring_payments(reconciliation_payments, async_req=True)
            >>> result = thread.get()

            Args:
                reconciliation_payments (ReconciliationPayments):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ReconciliationPayments200Response
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['reconciliation_payments'] = \
                reconciliation_payments
            return self.call_with_http_info(**kwargs)

        self.reconciliation_recurring_payments = Endpoint(
            settings={
                'response_type': (ReconciliationPayments200Response,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/v1/payments/recurring/exact/reconciliation',
                'operation_id': 'reconciliation_recurring_payments',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'reconciliation_payments',
                ],
                'required': [
                    'reconciliation_payments',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'reconciliation_payments':
                        (ReconciliationPayments,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'reconciliation_payments': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__reconciliation_recurring_payments
        )

        def __reconciliation_single_payments(
            self,
            reconciliation_single_payments,
            **kwargs
        ):
            """Get a list of single payments  # noqa: E501

            Requests to this endpoint will allow merchants to get information about the single payments that they have created.   The response will include information about the group of payments that satisfy the request parameters, as well as an array containing an object with information about each payment.   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.reconciliation_single_payments(reconciliation_single_payments, async_req=True)
            >>> result = thread.get()

            Args:
                reconciliation_single_payments (ReconciliationSinglePayments):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ReconciliationPayments200Response
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['reconciliation_single_payments'] = \
                reconciliation_single_payments
            return self.call_with_http_info(**kwargs)

        self.reconciliation_single_payments = Endpoint(
            settings={
                'response_type': (ReconciliationPayments200Response,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/v1/payments/single/immediate/exact/reconciliation',
                'operation_id': 'reconciliation_single_payments',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'reconciliation_single_payments',
                ],
                'required': [
                    'reconciliation_single_payments',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'reconciliation_single_payments':
                        (ReconciliationSinglePayments,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'reconciliation_single_payments': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__reconciliation_single_payments
        )
