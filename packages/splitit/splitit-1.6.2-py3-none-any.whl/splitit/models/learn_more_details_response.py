# coding: utf-8

"""
    splitit-web-api-public-sdk

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class LearnMoreDetailsResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'response_header': 'ResponseHeader',
        'supports_credit_card': 'bool',
        'supports_debit_card': 'bool',
        'show_secure_strategy_info': 'bool',
        'show_non_secure_strategy_info': 'bool',
        'total': 'MoneyWithCurrencyCode',
        'installments': 'list[Installment]',
        'number_of_installments': 'int'
    }

    attribute_map = {
        'response_header': 'ResponseHeader',
        'supports_credit_card': 'SupportsCreditCard',
        'supports_debit_card': 'SupportsDebitCard',
        'show_secure_strategy_info': 'ShowSecureStrategyInfo',
        'show_non_secure_strategy_info': 'ShowNonSecureStrategyInfo',
        'total': 'Total',
        'installments': 'Installments',
        'number_of_installments': 'NumberOfInstallments'
    }

    def __init__(self, response_header=None, supports_credit_card=None, supports_debit_card=None, show_secure_strategy_info=None, show_non_secure_strategy_info=None, total=None, installments=None, number_of_installments=None):  # noqa: E501
        """LearnMoreDetailsResponse - a model defined in Swagger"""  # noqa: E501

        self._response_header = None
        self._supports_credit_card = None
        self._supports_debit_card = None
        self._show_secure_strategy_info = None
        self._show_non_secure_strategy_info = None
        self._total = None
        self._installments = None
        self._number_of_installments = None
        self.discriminator = None

        if response_header is not None:
            self.response_header = response_header
        self.supports_credit_card = supports_credit_card
        self.supports_debit_card = supports_debit_card
        self.show_secure_strategy_info = show_secure_strategy_info
        self.show_non_secure_strategy_info = show_non_secure_strategy_info
        if total is not None:
            self.total = total
        if installments is not None:
            self.installments = installments
        self.number_of_installments = number_of_installments

    @property
    def response_header(self):
        """Gets the response_header of this LearnMoreDetailsResponse.  # noqa: E501


        :return: The response_header of this LearnMoreDetailsResponse.  # noqa: E501
        :rtype: ResponseHeader
        """
        return self._response_header

    @response_header.setter
    def response_header(self, response_header):
        """Sets the response_header of this LearnMoreDetailsResponse.


        :param response_header: The response_header of this LearnMoreDetailsResponse.  # noqa: E501
        :type: ResponseHeader
        """

        self._response_header = response_header

    @property
    def supports_credit_card(self):
        """Gets the supports_credit_card of this LearnMoreDetailsResponse.  # noqa: E501


        :return: The supports_credit_card of this LearnMoreDetailsResponse.  # noqa: E501
        :rtype: bool
        """
        return self._supports_credit_card

    @supports_credit_card.setter
    def supports_credit_card(self, supports_credit_card):
        """Sets the supports_credit_card of this LearnMoreDetailsResponse.


        :param supports_credit_card: The supports_credit_card of this LearnMoreDetailsResponse.  # noqa: E501
        :type: bool
        """
        supports_credit_card = bool(supports_credit_card)
        if supports_credit_card is None:
            raise ValueError("Invalid value for `supports_credit_card`, must not be `None`")  # noqa: E501

        self._supports_credit_card = supports_credit_card

    @property
    def supports_debit_card(self):
        """Gets the supports_debit_card of this LearnMoreDetailsResponse.  # noqa: E501


        :return: The supports_debit_card of this LearnMoreDetailsResponse.  # noqa: E501
        :rtype: bool
        """
        return self._supports_debit_card

    @supports_debit_card.setter
    def supports_debit_card(self, supports_debit_card):
        """Sets the supports_debit_card of this LearnMoreDetailsResponse.


        :param supports_debit_card: The supports_debit_card of this LearnMoreDetailsResponse.  # noqa: E501
        :type: bool
        """
        supports_debit_card = bool(supports_debit_card)
        if supports_debit_card is None:
            raise ValueError("Invalid value for `supports_debit_card`, must not be `None`")  # noqa: E501

        self._supports_debit_card = supports_debit_card

    @property
    def show_secure_strategy_info(self):
        """Gets the show_secure_strategy_info of this LearnMoreDetailsResponse.  # noqa: E501


        :return: The show_secure_strategy_info of this LearnMoreDetailsResponse.  # noqa: E501
        :rtype: bool
        """
        return self._show_secure_strategy_info

    @show_secure_strategy_info.setter
    def show_secure_strategy_info(self, show_secure_strategy_info):
        """Sets the show_secure_strategy_info of this LearnMoreDetailsResponse.


        :param show_secure_strategy_info: The show_secure_strategy_info of this LearnMoreDetailsResponse.  # noqa: E501
        :type: bool
        """
        show_secure_strategy_info = bool(show_secure_strategy_info)
        if show_secure_strategy_info is None:
            raise ValueError("Invalid value for `show_secure_strategy_info`, must not be `None`")  # noqa: E501

        self._show_secure_strategy_info = show_secure_strategy_info

    @property
    def show_non_secure_strategy_info(self):
        """Gets the show_non_secure_strategy_info of this LearnMoreDetailsResponse.  # noqa: E501


        :return: The show_non_secure_strategy_info of this LearnMoreDetailsResponse.  # noqa: E501
        :rtype: bool
        """
        return self._show_non_secure_strategy_info

    @show_non_secure_strategy_info.setter
    def show_non_secure_strategy_info(self, show_non_secure_strategy_info):
        """Sets the show_non_secure_strategy_info of this LearnMoreDetailsResponse.


        :param show_non_secure_strategy_info: The show_non_secure_strategy_info of this LearnMoreDetailsResponse.  # noqa: E501
        :type: bool
        """
        show_non_secure_strategy_info = bool(show_non_secure_strategy_info)
        if show_non_secure_strategy_info is None:
            raise ValueError("Invalid value for `show_non_secure_strategy_info`, must not be `None`")  # noqa: E501

        self._show_non_secure_strategy_info = show_non_secure_strategy_info

    @property
    def total(self):
        """Gets the total of this LearnMoreDetailsResponse.  # noqa: E501


        :return: The total of this LearnMoreDetailsResponse.  # noqa: E501
        :rtype: MoneyWithCurrencyCode
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this LearnMoreDetailsResponse.


        :param total: The total of this LearnMoreDetailsResponse.  # noqa: E501
        :type: MoneyWithCurrencyCode
        """

        self._total = total

    @property
    def installments(self):
        """Gets the installments of this LearnMoreDetailsResponse.  # noqa: E501


        :return: The installments of this LearnMoreDetailsResponse.  # noqa: E501
        :rtype: list[Installment]
        """
        return self._installments

    @installments.setter
    def installments(self, installments):
        """Sets the installments of this LearnMoreDetailsResponse.


        :param installments: The installments of this LearnMoreDetailsResponse.  # noqa: E501
        :type: list[Installment]
        """

        self._installments = installments

    @property
    def number_of_installments(self):
        """Gets the number_of_installments of this LearnMoreDetailsResponse.  # noqa: E501


        :return: The number_of_installments of this LearnMoreDetailsResponse.  # noqa: E501
        :rtype: int
        """
        return self._number_of_installments

    @number_of_installments.setter
    def number_of_installments(self, number_of_installments):
        """Sets the number_of_installments of this LearnMoreDetailsResponse.


        :param number_of_installments: The number_of_installments of this LearnMoreDetailsResponse.  # noqa: E501
        :type: int
        """
        
        if number_of_installments is None:
            raise ValueError("Invalid value for `number_of_installments`, must not be `None`")  # noqa: E501

        self._number_of_installments = number_of_installments

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LearnMoreDetailsResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LearnMoreDetailsResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
