# coding: utf-8

"""
    splitit-web-api-public-sdk

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class InstallmentPlanQueryCriteria(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'merchant_id': 'int',
        'currency_id': 'int',
        'installment_plan_id': 'int',
        'installment_plan_number': 'str',
        'ref_order_number': 'str',
        'installment_plan_amount': 'float',
        'card_number': 'str',
        'consumer_name': 'str',
        'consumer_email': 'str',
        'card_holder': 'str',
        'pis_member_id': 'int',
        'any_filter': 'str',
        'eula': 'bool',
        'show_chargeback_plans': 'bool',
        'initiated_statuses': 'InstallmentPlanInitiatedStatuses',
        'fraud_check_result': 'FraudCheckResult',
        'installments_plan_statuses': 'list[InstallmentPlanStatus]',
        'test_modes': 'list[TestModes]',
        'delay_resolutions': 'list[DelayResolution]',
        'transaction_information': 'TransactionInfo',
        'date_info': 'InstallmentPlanDateInfo'
    }

    attribute_map = {
        'merchant_id': 'MerchantId',
        'currency_id': 'CurrencyId',
        'installment_plan_id': 'InstallmentPlanId',
        'installment_plan_number': 'InstallmentPlanNumber',
        'ref_order_number': 'RefOrderNumber',
        'installment_plan_amount': 'InstallmentPlanAmount',
        'card_number': 'CardNumber',
        'consumer_name': 'ConsumerName',
        'consumer_email': 'ConsumerEmail',
        'card_holder': 'CardHolder',
        'pis_member_id': 'PisMemberId',
        'any_filter': 'AnyFilter',
        'eula': 'Eula',
        'show_chargeback_plans': 'ShowChargebackPlans',
        'initiated_statuses': 'InitiatedStatuses',
        'fraud_check_result': 'FraudCheckResult',
        'installments_plan_statuses': 'InstallmentsPlanStatuses',
        'test_modes': 'TestModes',
        'delay_resolutions': 'DelayResolutions',
        'transaction_information': 'TransactionInformation',
        'date_info': 'DateInfo'
    }

    def __init__(self, merchant_id=0, currency_id=0, installment_plan_id=0, installment_plan_number=None, ref_order_number=None, installment_plan_amount=0, card_number=None, consumer_name=None, consumer_email=None, card_holder=None, pis_member_id=0, any_filter=None, eula=False, show_chargeback_plans=False, initiated_statuses=None, fraud_check_result=None, installments_plan_statuses=None, test_modes=None, delay_resolutions=None, transaction_information=None, date_info=None):  # noqa: E501
        """InstallmentPlanQueryCriteria - a model defined in Swagger"""  # noqa: E501

        self._merchant_id = None
        self._currency_id = None
        self._installment_plan_id = None
        self._installment_plan_number = None
        self._ref_order_number = None
        self._installment_plan_amount = None
        self._card_number = None
        self._consumer_name = None
        self._consumer_email = None
        self._card_holder = None
        self._pis_member_id = None
        self._any_filter = None
        self._eula = None
        self._show_chargeback_plans = None
        self._initiated_statuses = None
        self._fraud_check_result = None
        self._installments_plan_statuses = None
        self._test_modes = None
        self._delay_resolutions = None
        self._transaction_information = None
        self._date_info = None
        self.discriminator = None

        self.merchant_id = merchant_id
        self.currency_id = currency_id
        self.installment_plan_id = installment_plan_id
        if installment_plan_number is not None:
            self.installment_plan_number = installment_plan_number
        if ref_order_number is not None:
            self.ref_order_number = ref_order_number
        self.installment_plan_amount = installment_plan_amount
        if card_number is not None:
            self.card_number = card_number
        if consumer_name is not None:
            self.consumer_name = consumer_name
        if consumer_email is not None:
            self.consumer_email = consumer_email
        if card_holder is not None:
            self.card_holder = card_holder
        self.pis_member_id = pis_member_id
        if any_filter is not None:
            self.any_filter = any_filter
        self.eula = eula
        self.show_chargeback_plans = show_chargeback_plans
        if initiated_statuses is not None:
            self.initiated_statuses = initiated_statuses
        if fraud_check_result is not None:
            self.fraud_check_result = fraud_check_result
        if installments_plan_statuses is not None:
            self.installments_plan_statuses = installments_plan_statuses
        if test_modes is not None:
            self.test_modes = test_modes
        if delay_resolutions is not None:
            self.delay_resolutions = delay_resolutions
        if transaction_information is not None:
            self.transaction_information = transaction_information
        if date_info is not None:
            self.date_info = date_info

    @property
    def merchant_id(self):
        """Gets the merchant_id of this InstallmentPlanQueryCriteria.  # noqa: E501


        :return: The merchant_id of this InstallmentPlanQueryCriteria.  # noqa: E501
        :rtype: int
        """
        return self._merchant_id

    @merchant_id.setter
    def merchant_id(self, merchant_id):
        """Sets the merchant_id of this InstallmentPlanQueryCriteria.


        :param merchant_id: The merchant_id of this InstallmentPlanQueryCriteria.  # noqa: E501
        :type: int
        """
        
        if merchant_id is None:
            raise ValueError("Invalid value for `merchant_id`, must not be `None`")  # noqa: E501

        self._merchant_id = merchant_id

    @property
    def currency_id(self):
        """Gets the currency_id of this InstallmentPlanQueryCriteria.  # noqa: E501


        :return: The currency_id of this InstallmentPlanQueryCriteria.  # noqa: E501
        :rtype: int
        """
        return self._currency_id

    @currency_id.setter
    def currency_id(self, currency_id):
        """Sets the currency_id of this InstallmentPlanQueryCriteria.


        :param currency_id: The currency_id of this InstallmentPlanQueryCriteria.  # noqa: E501
        :type: int
        """
        
        if currency_id is None:
            raise ValueError("Invalid value for `currency_id`, must not be `None`")  # noqa: E501

        self._currency_id = currency_id

    @property
    def installment_plan_id(self):
        """Gets the installment_plan_id of this InstallmentPlanQueryCriteria.  # noqa: E501


        :return: The installment_plan_id of this InstallmentPlanQueryCriteria.  # noqa: E501
        :rtype: int
        """
        return self._installment_plan_id

    @installment_plan_id.setter
    def installment_plan_id(self, installment_plan_id):
        """Sets the installment_plan_id of this InstallmentPlanQueryCriteria.


        :param installment_plan_id: The installment_plan_id of this InstallmentPlanQueryCriteria.  # noqa: E501
        :type: int
        """
        
        if installment_plan_id is None:
            raise ValueError("Invalid value for `installment_plan_id`, must not be `None`")  # noqa: E501

        self._installment_plan_id = installment_plan_id

    @property
    def installment_plan_number(self):
        """Gets the installment_plan_number of this InstallmentPlanQueryCriteria.  # noqa: E501


        :return: The installment_plan_number of this InstallmentPlanQueryCriteria.  # noqa: E501
        :rtype: str
        """
        return self._installment_plan_number

    @installment_plan_number.setter
    def installment_plan_number(self, installment_plan_number):
        """Sets the installment_plan_number of this InstallmentPlanQueryCriteria.


        :param installment_plan_number: The installment_plan_number of this InstallmentPlanQueryCriteria.  # noqa: E501
        :type: str
        """

        self._installment_plan_number = installment_plan_number

    @property
    def ref_order_number(self):
        """Gets the ref_order_number of this InstallmentPlanQueryCriteria.  # noqa: E501


        :return: The ref_order_number of this InstallmentPlanQueryCriteria.  # noqa: E501
        :rtype: str
        """
        return self._ref_order_number

    @ref_order_number.setter
    def ref_order_number(self, ref_order_number):
        """Sets the ref_order_number of this InstallmentPlanQueryCriteria.


        :param ref_order_number: The ref_order_number of this InstallmentPlanQueryCriteria.  # noqa: E501
        :type: str
        """

        self._ref_order_number = ref_order_number

    @property
    def installment_plan_amount(self):
        """Gets the installment_plan_amount of this InstallmentPlanQueryCriteria.  # noqa: E501


        :return: The installment_plan_amount of this InstallmentPlanQueryCriteria.  # noqa: E501
        :rtype: float
        """
        return self._installment_plan_amount

    @installment_plan_amount.setter
    def installment_plan_amount(self, installment_plan_amount):
        """Sets the installment_plan_amount of this InstallmentPlanQueryCriteria.


        :param installment_plan_amount: The installment_plan_amount of this InstallmentPlanQueryCriteria.  # noqa: E501
        :type: float
        """
        
        if installment_plan_amount is None:
            raise ValueError("Invalid value for `installment_plan_amount`, must not be `None`")  # noqa: E501

        self._installment_plan_amount = installment_plan_amount

    @property
    def card_number(self):
        """Gets the card_number of this InstallmentPlanQueryCriteria.  # noqa: E501


        :return: The card_number of this InstallmentPlanQueryCriteria.  # noqa: E501
        :rtype: str
        """
        return self._card_number

    @card_number.setter
    def card_number(self, card_number):
        """Sets the card_number of this InstallmentPlanQueryCriteria.


        :param card_number: The card_number of this InstallmentPlanQueryCriteria.  # noqa: E501
        :type: str
        """

        self._card_number = card_number

    @property
    def consumer_name(self):
        """Gets the consumer_name of this InstallmentPlanQueryCriteria.  # noqa: E501


        :return: The consumer_name of this InstallmentPlanQueryCriteria.  # noqa: E501
        :rtype: str
        """
        return self._consumer_name

    @consumer_name.setter
    def consumer_name(self, consumer_name):
        """Sets the consumer_name of this InstallmentPlanQueryCriteria.


        :param consumer_name: The consumer_name of this InstallmentPlanQueryCriteria.  # noqa: E501
        :type: str
        """

        self._consumer_name = consumer_name

    @property
    def consumer_email(self):
        """Gets the consumer_email of this InstallmentPlanQueryCriteria.  # noqa: E501


        :return: The consumer_email of this InstallmentPlanQueryCriteria.  # noqa: E501
        :rtype: str
        """
        return self._consumer_email

    @consumer_email.setter
    def consumer_email(self, consumer_email):
        """Sets the consumer_email of this InstallmentPlanQueryCriteria.


        :param consumer_email: The consumer_email of this InstallmentPlanQueryCriteria.  # noqa: E501
        :type: str
        """

        self._consumer_email = consumer_email

    @property
    def card_holder(self):
        """Gets the card_holder of this InstallmentPlanQueryCriteria.  # noqa: E501


        :return: The card_holder of this InstallmentPlanQueryCriteria.  # noqa: E501
        :rtype: str
        """
        return self._card_holder

    @card_holder.setter
    def card_holder(self, card_holder):
        """Sets the card_holder of this InstallmentPlanQueryCriteria.


        :param card_holder: The card_holder of this InstallmentPlanQueryCriteria.  # noqa: E501
        :type: str
        """

        self._card_holder = card_holder

    @property
    def pis_member_id(self):
        """Gets the pis_member_id of this InstallmentPlanQueryCriteria.  # noqa: E501


        :return: The pis_member_id of this InstallmentPlanQueryCriteria.  # noqa: E501
        :rtype: int
        """
        return self._pis_member_id

    @pis_member_id.setter
    def pis_member_id(self, pis_member_id):
        """Sets the pis_member_id of this InstallmentPlanQueryCriteria.


        :param pis_member_id: The pis_member_id of this InstallmentPlanQueryCriteria.  # noqa: E501
        :type: int
        """
        
        if pis_member_id is None:
            raise ValueError("Invalid value for `pis_member_id`, must not be `None`")  # noqa: E501

        self._pis_member_id = pis_member_id

    @property
    def any_filter(self):
        """Gets the any_filter of this InstallmentPlanQueryCriteria.  # noqa: E501


        :return: The any_filter of this InstallmentPlanQueryCriteria.  # noqa: E501
        :rtype: str
        """
        return self._any_filter

    @any_filter.setter
    def any_filter(self, any_filter):
        """Sets the any_filter of this InstallmentPlanQueryCriteria.


        :param any_filter: The any_filter of this InstallmentPlanQueryCriteria.  # noqa: E501
        :type: str
        """

        self._any_filter = any_filter

    @property
    def eula(self):
        """Gets the eula of this InstallmentPlanQueryCriteria.  # noqa: E501


        :return: The eula of this InstallmentPlanQueryCriteria.  # noqa: E501
        :rtype: bool
        """
        return self._eula

    @eula.setter
    def eula(self, eula):
        """Sets the eula of this InstallmentPlanQueryCriteria.


        :param eula: The eula of this InstallmentPlanQueryCriteria.  # noqa: E501
        :type: bool
        """
        eula = bool(eula)
        if eula is None:
            raise ValueError("Invalid value for `eula`, must not be `None`")  # noqa: E501

        self._eula = eula

    @property
    def show_chargeback_plans(self):
        """Gets the show_chargeback_plans of this InstallmentPlanQueryCriteria.  # noqa: E501


        :return: The show_chargeback_plans of this InstallmentPlanQueryCriteria.  # noqa: E501
        :rtype: bool
        """
        return self._show_chargeback_plans

    @show_chargeback_plans.setter
    def show_chargeback_plans(self, show_chargeback_plans):
        """Sets the show_chargeback_plans of this InstallmentPlanQueryCriteria.


        :param show_chargeback_plans: The show_chargeback_plans of this InstallmentPlanQueryCriteria.  # noqa: E501
        :type: bool
        """
        show_chargeback_plans = bool(show_chargeback_plans)
        if show_chargeback_plans is None:
            raise ValueError("Invalid value for `show_chargeback_plans`, must not be `None`")  # noqa: E501

        self._show_chargeback_plans = show_chargeback_plans

    @property
    def initiated_statuses(self):
        """Gets the initiated_statuses of this InstallmentPlanQueryCriteria.  # noqa: E501


        :return: The initiated_statuses of this InstallmentPlanQueryCriteria.  # noqa: E501
        :rtype: InstallmentPlanInitiatedStatuses
        """
        return self._initiated_statuses

    @initiated_statuses.setter
    def initiated_statuses(self, initiated_statuses):
        """Sets the initiated_statuses of this InstallmentPlanQueryCriteria.


        :param initiated_statuses: The initiated_statuses of this InstallmentPlanQueryCriteria.  # noqa: E501
        :type: InstallmentPlanInitiatedStatuses
        """

        self._initiated_statuses = initiated_statuses

    @property
    def fraud_check_result(self):
        """Gets the fraud_check_result of this InstallmentPlanQueryCriteria.  # noqa: E501


        :return: The fraud_check_result of this InstallmentPlanQueryCriteria.  # noqa: E501
        :rtype: FraudCheckResult
        """
        return self._fraud_check_result

    @fraud_check_result.setter
    def fraud_check_result(self, fraud_check_result):
        """Sets the fraud_check_result of this InstallmentPlanQueryCriteria.


        :param fraud_check_result: The fraud_check_result of this InstallmentPlanQueryCriteria.  # noqa: E501
        :type: FraudCheckResult
        """

        self._fraud_check_result = fraud_check_result

    @property
    def installments_plan_statuses(self):
        """Gets the installments_plan_statuses of this InstallmentPlanQueryCriteria.  # noqa: E501


        :return: The installments_plan_statuses of this InstallmentPlanQueryCriteria.  # noqa: E501
        :rtype: list[InstallmentPlanStatus]
        """
        return self._installments_plan_statuses

    @installments_plan_statuses.setter
    def installments_plan_statuses(self, installments_plan_statuses):
        """Sets the installments_plan_statuses of this InstallmentPlanQueryCriteria.


        :param installments_plan_statuses: The installments_plan_statuses of this InstallmentPlanQueryCriteria.  # noqa: E501
        :type: list[InstallmentPlanStatus]
        """

        self._installments_plan_statuses = installments_plan_statuses

    @property
    def test_modes(self):
        """Gets the test_modes of this InstallmentPlanQueryCriteria.  # noqa: E501


        :return: The test_modes of this InstallmentPlanQueryCriteria.  # noqa: E501
        :rtype: list[TestModes]
        """
        return self._test_modes

    @test_modes.setter
    def test_modes(self, test_modes):
        """Sets the test_modes of this InstallmentPlanQueryCriteria.


        :param test_modes: The test_modes of this InstallmentPlanQueryCriteria.  # noqa: E501
        :type: list[TestModes]
        """

        self._test_modes = test_modes

    @property
    def delay_resolutions(self):
        """Gets the delay_resolutions of this InstallmentPlanQueryCriteria.  # noqa: E501


        :return: The delay_resolutions of this InstallmentPlanQueryCriteria.  # noqa: E501
        :rtype: list[DelayResolution]
        """
        return self._delay_resolutions

    @delay_resolutions.setter
    def delay_resolutions(self, delay_resolutions):
        """Sets the delay_resolutions of this InstallmentPlanQueryCriteria.


        :param delay_resolutions: The delay_resolutions of this InstallmentPlanQueryCriteria.  # noqa: E501
        :type: list[DelayResolution]
        """

        self._delay_resolutions = delay_resolutions

    @property
    def transaction_information(self):
        """Gets the transaction_information of this InstallmentPlanQueryCriteria.  # noqa: E501


        :return: The transaction_information of this InstallmentPlanQueryCriteria.  # noqa: E501
        :rtype: TransactionInfo
        """
        return self._transaction_information

    @transaction_information.setter
    def transaction_information(self, transaction_information):
        """Sets the transaction_information of this InstallmentPlanQueryCriteria.


        :param transaction_information: The transaction_information of this InstallmentPlanQueryCriteria.  # noqa: E501
        :type: TransactionInfo
        """

        self._transaction_information = transaction_information

    @property
    def date_info(self):
        """Gets the date_info of this InstallmentPlanQueryCriteria.  # noqa: E501


        :return: The date_info of this InstallmentPlanQueryCriteria.  # noqa: E501
        :rtype: InstallmentPlanDateInfo
        """
        return self._date_info

    @date_info.setter
    def date_info(self, date_info):
        """Sets the date_info of this InstallmentPlanQueryCriteria.


        :param date_info: The date_info of this InstallmentPlanQueryCriteria.  # noqa: E501
        :type: InstallmentPlanDateInfo
        """

        self._date_info = date_info

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InstallmentPlanQueryCriteria, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InstallmentPlanQueryCriteria):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
