# coding: utf-8

"""
    splitit-web-api-public-sdk

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CardData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'card_id': 'str',
        'card_number': 'str',
        'card_exp_month': 'str',
        'card_exp_year': 'str',
        'card_brand': 'ReferenceEntityBase',
        'card_type': 'ReferenceEntityBase',
        'bin': 'str',
        'card_holder_full_name': 'str',
        'card_cvv': 'str',
        'address': 'AddressData',
        'token': 'str'
    }

    attribute_map = {
        'card_id': 'CardId',
        'card_number': 'CardNumber',
        'card_exp_month': 'CardExpMonth',
        'card_exp_year': 'CardExpYear',
        'card_brand': 'CardBrand',
        'card_type': 'CardType',
        'bin': 'Bin',
        'card_holder_full_name': 'CardHolderFullName',
        'card_cvv': 'CardCvv',
        'address': 'Address',
        'token': 'Token'
    }

    def __init__(self, card_id=None, card_number=None, card_exp_month=None, card_exp_year=None, card_brand=None, card_type=None, bin=None, card_holder_full_name=None, card_cvv=None, address=None, token=None):  # noqa: E501
        """CardData - a model defined in Swagger"""  # noqa: E501

        self._card_id = None
        self._card_number = None
        self._card_exp_month = None
        self._card_exp_year = None
        self._card_brand = None
        self._card_type = None
        self._bin = None
        self._card_holder_full_name = None
        self._card_cvv = None
        self._address = None
        self._token = None
        self.discriminator = None

        if card_id is not None:
            self.card_id = card_id
        if card_number is not None:
            self.card_number = card_number
        if card_exp_month is not None:
            self.card_exp_month = card_exp_month
        if card_exp_year is not None:
            self.card_exp_year = card_exp_year
        if card_brand is not None:
            self.card_brand = card_brand
        if card_type is not None:
            self.card_type = card_type
        if bin is not None:
            self.bin = bin
        if card_holder_full_name is not None:
            self.card_holder_full_name = card_holder_full_name
        if card_cvv is not None:
            self.card_cvv = card_cvv
        if address is not None:
            self.address = address
        if token is not None:
            self.token = token

    @property
    def card_id(self):
        """Gets the card_id of this CardData.  # noqa: E501


        :return: The card_id of this CardData.  # noqa: E501
        :rtype: str
        """
        return self._card_id

    @card_id.setter
    def card_id(self, card_id):
        """Sets the card_id of this CardData.


        :param card_id: The card_id of this CardData.  # noqa: E501
        :type: str
        """

        self._card_id = card_id

    @property
    def card_number(self):
        """Gets the card_number of this CardData.  # noqa: E501


        :return: The card_number of this CardData.  # noqa: E501
        :rtype: str
        """
        return self._card_number

    @card_number.setter
    def card_number(self, card_number):
        """Sets the card_number of this CardData.


        :param card_number: The card_number of this CardData.  # noqa: E501
        :type: str
        """

        self._card_number = card_number

    @property
    def card_exp_month(self):
        """Gets the card_exp_month of this CardData.  # noqa: E501


        :return: The card_exp_month of this CardData.  # noqa: E501
        :rtype: str
        """
        return self._card_exp_month

    @card_exp_month.setter
    def card_exp_month(self, card_exp_month):
        """Sets the card_exp_month of this CardData.


        :param card_exp_month: The card_exp_month of this CardData.  # noqa: E501
        :type: str
        """

        self._card_exp_month = card_exp_month

    @property
    def card_exp_year(self):
        """Gets the card_exp_year of this CardData.  # noqa: E501


        :return: The card_exp_year of this CardData.  # noqa: E501
        :rtype: str
        """
        return self._card_exp_year

    @card_exp_year.setter
    def card_exp_year(self, card_exp_year):
        """Sets the card_exp_year of this CardData.


        :param card_exp_year: The card_exp_year of this CardData.  # noqa: E501
        :type: str
        """

        self._card_exp_year = card_exp_year

    @property
    def card_brand(self):
        """Gets the card_brand of this CardData.  # noqa: E501


        :return: The card_brand of this CardData.  # noqa: E501
        :rtype: ReferenceEntityBase
        """
        return self._card_brand

    @card_brand.setter
    def card_brand(self, card_brand):
        """Sets the card_brand of this CardData.


        :param card_brand: The card_brand of this CardData.  # noqa: E501
        :type: ReferenceEntityBase
        """

        self._card_brand = card_brand

    @property
    def card_type(self):
        """Gets the card_type of this CardData.  # noqa: E501


        :return: The card_type of this CardData.  # noqa: E501
        :rtype: ReferenceEntityBase
        """
        return self._card_type

    @card_type.setter
    def card_type(self, card_type):
        """Sets the card_type of this CardData.


        :param card_type: The card_type of this CardData.  # noqa: E501
        :type: ReferenceEntityBase
        """

        self._card_type = card_type

    @property
    def bin(self):
        """Gets the bin of this CardData.  # noqa: E501


        :return: The bin of this CardData.  # noqa: E501
        :rtype: str
        """
        return self._bin

    @bin.setter
    def bin(self, bin):
        """Sets the bin of this CardData.


        :param bin: The bin of this CardData.  # noqa: E501
        :type: str
        """

        self._bin = bin

    @property
    def card_holder_full_name(self):
        """Gets the card_holder_full_name of this CardData.  # noqa: E501


        :return: The card_holder_full_name of this CardData.  # noqa: E501
        :rtype: str
        """
        return self._card_holder_full_name

    @card_holder_full_name.setter
    def card_holder_full_name(self, card_holder_full_name):
        """Sets the card_holder_full_name of this CardData.


        :param card_holder_full_name: The card_holder_full_name of this CardData.  # noqa: E501
        :type: str
        """

        self._card_holder_full_name = card_holder_full_name

    @property
    def card_cvv(self):
        """Gets the card_cvv of this CardData.  # noqa: E501


        :return: The card_cvv of this CardData.  # noqa: E501
        :rtype: str
        """
        return self._card_cvv

    @card_cvv.setter
    def card_cvv(self, card_cvv):
        """Sets the card_cvv of this CardData.


        :param card_cvv: The card_cvv of this CardData.  # noqa: E501
        :type: str
        """

        self._card_cvv = card_cvv

    @property
    def address(self):
        """Gets the address of this CardData.  # noqa: E501


        :return: The address of this CardData.  # noqa: E501
        :rtype: AddressData
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this CardData.


        :param address: The address of this CardData.  # noqa: E501
        :type: AddressData
        """

        self._address = address

    @property
    def token(self):
        """Gets the token of this CardData.  # noqa: E501


        :return: The token of this CardData.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this CardData.


        :param token: The token of this CardData.  # noqa: E501
        :type: str
        """

        self._token = token

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CardData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CardData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
