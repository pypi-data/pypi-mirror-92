# coding: utf-8

"""
    splitit-web-api-public-sdk

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six



class InfrastructureApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    _REQUIRES_SESSION = True

    def __init__(self, api_client):
        self._api_client = api_client

    def infrastructure_get_resources(self, request, **kwargs):  # noqa: E501
        """infrastructure_get_resources  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.infrastructure_get_resources(request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GetResourcesRequest request: (required)
        :param str culture: Override culture pre request (optional)

        :return: GetResourcesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.infrastructure_get_resources_with_http_info(request, **kwargs)  # noqa: E501
        else:
            (data) = self.infrastructure_get_resources_with_http_info(request, **kwargs)  # noqa: E501
            return data

    def infrastructure_get_resources_with_http_info(self, request, **kwargs):  # noqa: E501
        """infrastructure_get_resources  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.infrastructure_get_resources_with_http_info(request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GetResourcesRequest request: (required)
        :param str culture: Override culture pre request (optional)
        :return: GetResourcesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method infrastructure_get_resources" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'request' is set
        if ('request' not in params or
                params['request'] is None):
            raise ValueError("Missing the required parameter `request` when calling `infrastructure_get_resources`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self._api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self._api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self._api_client.call_api(
            '/api/Infrastructure/GetResources', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetResourcesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats,
            _requires_session=self._REQUIRES_SESSION,
            culture=kwargs.get('culture'))

    def infrastructure_get_resources2(self, **kwargs):  # noqa: E501
        """infrastructure_get_resources2  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.infrastructure_get_resources2(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key:
        :param str session_id:
        :param str merchant_code:
        :param str culture_name:
        :param str touch_point_code:
        :param list[SystemTextCategory] system_text_categories:
        :param str culture: Override culture pre request (optional)

        :return: GetResourcesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.infrastructure_get_resources2_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.infrastructure_get_resources2_with_http_info(**kwargs)  # noqa: E501
            return data

    def infrastructure_get_resources2_with_http_info(self, **kwargs):  # noqa: E501
        """infrastructure_get_resources2  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.infrastructure_get_resources2_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key:
        :param str session_id:
        :param str merchant_code:
        :param str culture_name:
        :param str touch_point_code:
        :param list[SystemTextCategory] system_text_categories:
        :param str culture: Override culture pre request (optional)
        :return: GetResourcesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'session_id', 'merchant_code', 'culture_name', 'touch_point_code', 'system_text_categories']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method infrastructure_get_resources2" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_key' in params:
            query_params.append(('apiKey', params['api_key']))  # noqa: E501
        if 'session_id' in params:
            query_params.append(('sessionId', params['session_id']))  # noqa: E501
        if 'merchant_code' in params:
            query_params.append(('merchantCode', params['merchant_code']))  # noqa: E501
        if 'culture_name' in params:
            query_params.append(('cultureName', params['culture_name']))  # noqa: E501
        if 'touch_point_code' in params:
            query_params.append(('touchPointCode', params['touch_point_code']))  # noqa: E501
        if 'system_text_categories' in params:
            query_params.append(('systemTextCategories', params['system_text_categories']))  # noqa: E501
            collection_formats['systemTextCategories'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self._api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self._api_client.call_api(
            '/api/Infrastructure/GetResources', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetResourcesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats,
            _requires_session=self._REQUIRES_SESSION,
            culture=kwargs.get('culture'))

InfrastructureApi._REQUIRES_SESSION = "InfrastructureApi" != "LoginApi"
