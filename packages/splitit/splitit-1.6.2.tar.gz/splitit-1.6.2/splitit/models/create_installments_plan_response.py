# coding: utf-8

"""
    splitit-web-api-public-sdk

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CreateInstallmentsPlanResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'response_header': 'ResponseHeader',
        'installment_plan': 'InstallmentPlan',
        'gateway_transaction_results': 'list[TransactionResult]',
        'approval_url': 'str',
        'three_d_redirect_url': 'str'
    }

    attribute_map = {
        'response_header': 'ResponseHeader',
        'installment_plan': 'InstallmentPlan',
        'gateway_transaction_results': 'GatewayTransactionResults',
        'approval_url': 'ApprovalUrl',
        'three_d_redirect_url': 'ThreeDRedirectUrl'
    }

    def __init__(self, response_header=None, installment_plan=None, gateway_transaction_results=None, approval_url=None, three_d_redirect_url=None):  # noqa: E501
        """CreateInstallmentsPlanResponse - a model defined in Swagger"""  # noqa: E501

        self._response_header = None
        self._installment_plan = None
        self._gateway_transaction_results = None
        self._approval_url = None
        self._three_d_redirect_url = None
        self.discriminator = None

        if response_header is not None:
            self.response_header = response_header
        if installment_plan is not None:
            self.installment_plan = installment_plan
        if gateway_transaction_results is not None:
            self.gateway_transaction_results = gateway_transaction_results
        if approval_url is not None:
            self.approval_url = approval_url
        if three_d_redirect_url is not None:
            self.three_d_redirect_url = three_d_redirect_url

    @property
    def response_header(self):
        """Gets the response_header of this CreateInstallmentsPlanResponse.  # noqa: E501


        :return: The response_header of this CreateInstallmentsPlanResponse.  # noqa: E501
        :rtype: ResponseHeader
        """
        return self._response_header

    @response_header.setter
    def response_header(self, response_header):
        """Sets the response_header of this CreateInstallmentsPlanResponse.


        :param response_header: The response_header of this CreateInstallmentsPlanResponse.  # noqa: E501
        :type: ResponseHeader
        """

        self._response_header = response_header

    @property
    def installment_plan(self):
        """Gets the installment_plan of this CreateInstallmentsPlanResponse.  # noqa: E501


        :return: The installment_plan of this CreateInstallmentsPlanResponse.  # noqa: E501
        :rtype: InstallmentPlan
        """
        return self._installment_plan

    @installment_plan.setter
    def installment_plan(self, installment_plan):
        """Sets the installment_plan of this CreateInstallmentsPlanResponse.


        :param installment_plan: The installment_plan of this CreateInstallmentsPlanResponse.  # noqa: E501
        :type: InstallmentPlan
        """

        self._installment_plan = installment_plan

    @property
    def gateway_transaction_results(self):
        """Gets the gateway_transaction_results of this CreateInstallmentsPlanResponse.  # noqa: E501


        :return: The gateway_transaction_results of this CreateInstallmentsPlanResponse.  # noqa: E501
        :rtype: list[TransactionResult]
        """
        return self._gateway_transaction_results

    @gateway_transaction_results.setter
    def gateway_transaction_results(self, gateway_transaction_results):
        """Sets the gateway_transaction_results of this CreateInstallmentsPlanResponse.


        :param gateway_transaction_results: The gateway_transaction_results of this CreateInstallmentsPlanResponse.  # noqa: E501
        :type: list[TransactionResult]
        """

        self._gateway_transaction_results = gateway_transaction_results

    @property
    def approval_url(self):
        """Gets the approval_url of this CreateInstallmentsPlanResponse.  # noqa: E501


        :return: The approval_url of this CreateInstallmentsPlanResponse.  # noqa: E501
        :rtype: str
        """
        return self._approval_url

    @approval_url.setter
    def approval_url(self, approval_url):
        """Sets the approval_url of this CreateInstallmentsPlanResponse.


        :param approval_url: The approval_url of this CreateInstallmentsPlanResponse.  # noqa: E501
        :type: str
        """

        self._approval_url = approval_url

    @property
    def three_d_redirect_url(self):
        """Gets the three_d_redirect_url of this CreateInstallmentsPlanResponse.  # noqa: E501


        :return: The three_d_redirect_url of this CreateInstallmentsPlanResponse.  # noqa: E501
        :rtype: str
        """
        return self._three_d_redirect_url

    @three_d_redirect_url.setter
    def three_d_redirect_url(self, three_d_redirect_url):
        """Sets the three_d_redirect_url of this CreateInstallmentsPlanResponse.


        :param three_d_redirect_url: The three_d_redirect_url of this CreateInstallmentsPlanResponse.  # noqa: E501
        :type: str
        """

        self._three_d_redirect_url = three_d_redirect_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateInstallmentsPlanResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateInstallmentsPlanResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
