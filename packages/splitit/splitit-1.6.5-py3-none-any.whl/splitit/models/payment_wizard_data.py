# coding: utf-8

"""
    splitit-web-api-public-sdk

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PaymentWizardData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'requested_number_of_installments': 'str',
        'success_exit_url': 'str',
        'error_exit_url': 'str',
        'cancel_exit_url': 'str',
        'success_async_url': 'str',
        'view_name': 'str',
        'is_opened_in_iframe': 'bool',
        'is3d_secure_in_popup': 'bool',
        'payment_form_message': 'str'
    }

    attribute_map = {
        'requested_number_of_installments': 'RequestedNumberOfInstallments',
        'success_exit_url': 'SuccessExitURL',
        'error_exit_url': 'ErrorExitURL',
        'cancel_exit_url': 'CancelExitURL',
        'success_async_url': 'SuccessAsyncUrl',
        'view_name': 'ViewName',
        'is_opened_in_iframe': 'IsOpenedInIframe',
        'is3d_secure_in_popup': 'Is3dSecureInPopup',
        'payment_form_message': 'PaymentFormMessage'
    }

    def __init__(self, requested_number_of_installments=None, success_exit_url=None, error_exit_url=None, cancel_exit_url=None, success_async_url=None, view_name=None, is_opened_in_iframe=None, is3d_secure_in_popup=None, payment_form_message=None):  # noqa: E501
        """PaymentWizardData - a model defined in Swagger"""  # noqa: E501

        self._requested_number_of_installments = None
        self._success_exit_url = None
        self._error_exit_url = None
        self._cancel_exit_url = None
        self._success_async_url = None
        self._view_name = None
        self._is_opened_in_iframe = None
        self._is3d_secure_in_popup = None
        self._payment_form_message = None
        self.discriminator = None

        if requested_number_of_installments is not None:
            self.requested_number_of_installments = requested_number_of_installments
        if success_exit_url is not None:
            self.success_exit_url = success_exit_url
        if error_exit_url is not None:
            self.error_exit_url = error_exit_url
        if cancel_exit_url is not None:
            self.cancel_exit_url = cancel_exit_url
        if success_async_url is not None:
            self.success_async_url = success_async_url
        if view_name is not None:
            self.view_name = view_name
        self.is_opened_in_iframe = is_opened_in_iframe
        if is3d_secure_in_popup is not None:
            self.is3d_secure_in_popup = is3d_secure_in_popup
        if payment_form_message is not None:
            self.payment_form_message = payment_form_message

    @property
    def requested_number_of_installments(self):
        """Gets the requested_number_of_installments of this PaymentWizardData.  # noqa: E501


        :return: The requested_number_of_installments of this PaymentWizardData.  # noqa: E501
        :rtype: str
        """
        return self._requested_number_of_installments

    @requested_number_of_installments.setter
    def requested_number_of_installments(self, requested_number_of_installments):
        """Sets the requested_number_of_installments of this PaymentWizardData.


        :param requested_number_of_installments: The requested_number_of_installments of this PaymentWizardData.  # noqa: E501
        :type: str
        """

        self._requested_number_of_installments = requested_number_of_installments

    @property
    def success_exit_url(self):
        """Gets the success_exit_url of this PaymentWizardData.  # noqa: E501


        :return: The success_exit_url of this PaymentWizardData.  # noqa: E501
        :rtype: str
        """
        return self._success_exit_url

    @success_exit_url.setter
    def success_exit_url(self, success_exit_url):
        """Sets the success_exit_url of this PaymentWizardData.


        :param success_exit_url: The success_exit_url of this PaymentWizardData.  # noqa: E501
        :type: str
        """

        self._success_exit_url = success_exit_url

    @property
    def error_exit_url(self):
        """Gets the error_exit_url of this PaymentWizardData.  # noqa: E501


        :return: The error_exit_url of this PaymentWizardData.  # noqa: E501
        :rtype: str
        """
        return self._error_exit_url

    @error_exit_url.setter
    def error_exit_url(self, error_exit_url):
        """Sets the error_exit_url of this PaymentWizardData.


        :param error_exit_url: The error_exit_url of this PaymentWizardData.  # noqa: E501
        :type: str
        """

        self._error_exit_url = error_exit_url

    @property
    def cancel_exit_url(self):
        """Gets the cancel_exit_url of this PaymentWizardData.  # noqa: E501


        :return: The cancel_exit_url of this PaymentWizardData.  # noqa: E501
        :rtype: str
        """
        return self._cancel_exit_url

    @cancel_exit_url.setter
    def cancel_exit_url(self, cancel_exit_url):
        """Sets the cancel_exit_url of this PaymentWizardData.


        :param cancel_exit_url: The cancel_exit_url of this PaymentWizardData.  # noqa: E501
        :type: str
        """

        self._cancel_exit_url = cancel_exit_url

    @property
    def success_async_url(self):
        """Gets the success_async_url of this PaymentWizardData.  # noqa: E501


        :return: The success_async_url of this PaymentWizardData.  # noqa: E501
        :rtype: str
        """
        return self._success_async_url

    @success_async_url.setter
    def success_async_url(self, success_async_url):
        """Sets the success_async_url of this PaymentWizardData.


        :param success_async_url: The success_async_url of this PaymentWizardData.  # noqa: E501
        :type: str
        """

        self._success_async_url = success_async_url

    @property
    def view_name(self):
        """Gets the view_name of this PaymentWizardData.  # noqa: E501


        :return: The view_name of this PaymentWizardData.  # noqa: E501
        :rtype: str
        """
        return self._view_name

    @view_name.setter
    def view_name(self, view_name):
        """Sets the view_name of this PaymentWizardData.


        :param view_name: The view_name of this PaymentWizardData.  # noqa: E501
        :type: str
        """

        self._view_name = view_name

    @property
    def is_opened_in_iframe(self):
        """Gets the is_opened_in_iframe of this PaymentWizardData.  # noqa: E501


        :return: The is_opened_in_iframe of this PaymentWizardData.  # noqa: E501
        :rtype: bool
        """
        return self._is_opened_in_iframe

    @is_opened_in_iframe.setter
    def is_opened_in_iframe(self, is_opened_in_iframe):
        """Sets the is_opened_in_iframe of this PaymentWizardData.


        :param is_opened_in_iframe: The is_opened_in_iframe of this PaymentWizardData.  # noqa: E501
        :type: bool
        """
        is_opened_in_iframe = bool(is_opened_in_iframe)
        if is_opened_in_iframe is None:
            raise ValueError("Invalid value for `is_opened_in_iframe`, must not be `None`")  # noqa: E501

        self._is_opened_in_iframe = is_opened_in_iframe

    @property
    def is3d_secure_in_popup(self):
        """Gets the is3d_secure_in_popup of this PaymentWizardData.  # noqa: E501


        :return: The is3d_secure_in_popup of this PaymentWizardData.  # noqa: E501
        :rtype: bool
        """
        return self._is3d_secure_in_popup

    @is3d_secure_in_popup.setter
    def is3d_secure_in_popup(self, is3d_secure_in_popup):
        """Sets the is3d_secure_in_popup of this PaymentWizardData.


        :param is3d_secure_in_popup: The is3d_secure_in_popup of this PaymentWizardData.  # noqa: E501
        :type: bool
        """

        self._is3d_secure_in_popup = is3d_secure_in_popup

    @property
    def payment_form_message(self):
        """Gets the payment_form_message of this PaymentWizardData.  # noqa: E501


        :return: The payment_form_message of this PaymentWizardData.  # noqa: E501
        :rtype: str
        """
        return self._payment_form_message

    @payment_form_message.setter
    def payment_form_message(self, payment_form_message):
        """Sets the payment_form_message of this PaymentWizardData.


        :param payment_form_message: The payment_form_message of this PaymentWizardData.  # noqa: E501
        :type: str
        """

        self._payment_form_message = payment_form_message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PaymentWizardData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaymentWizardData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
