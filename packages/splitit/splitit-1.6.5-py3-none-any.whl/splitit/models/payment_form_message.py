# coding: utf-8

"""
    splitit-web-api-public-sdk

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PaymentFormMessage(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'PaymentFormMessageType',
        'code': 'int',
        'message': 'str',
        'is_empty': 'bool'
    }

    attribute_map = {
        'type': 'Type',
        'code': 'Code',
        'message': 'Message',
        'is_empty': 'IsEmpty'
    }

    def __init__(self, type=None, code=None, message=None, is_empty=None):  # noqa: E501
        """PaymentFormMessage - a model defined in Swagger"""  # noqa: E501

        self._type = None
        self._code = None
        self._message = None
        self._is_empty = None
        self.discriminator = None

        self.type = type
        self.code = code
        if message is not None:
            self.message = message
        self.is_empty = is_empty

    @property
    def type(self):
        """Gets the type of this PaymentFormMessage.  # noqa: E501


        :return: The type of this PaymentFormMessage.  # noqa: E501
        :rtype: PaymentFormMessageType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PaymentFormMessage.


        :param type: The type of this PaymentFormMessage.  # noqa: E501
        :type: PaymentFormMessageType
        """
        
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def code(self):
        """Gets the code of this PaymentFormMessage.  # noqa: E501


        :return: The code of this PaymentFormMessage.  # noqa: E501
        :rtype: int
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this PaymentFormMessage.


        :param code: The code of this PaymentFormMessage.  # noqa: E501
        :type: int
        """
        
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")  # noqa: E501

        self._code = code

    @property
    def message(self):
        """Gets the message of this PaymentFormMessage.  # noqa: E501


        :return: The message of this PaymentFormMessage.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this PaymentFormMessage.


        :param message: The message of this PaymentFormMessage.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def is_empty(self):
        """Gets the is_empty of this PaymentFormMessage.  # noqa: E501


        :return: The is_empty of this PaymentFormMessage.  # noqa: E501
        :rtype: bool
        """
        return self._is_empty

    @is_empty.setter
    def is_empty(self, is_empty):
        """Sets the is_empty of this PaymentFormMessage.


        :param is_empty: The is_empty of this PaymentFormMessage.  # noqa: E501
        :type: bool
        """
        is_empty = bool(is_empty)
        if is_empty is None:
            raise ValueError("Invalid value for `is_empty`, must not be `None`")  # noqa: E501

        self._is_empty = is_empty

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PaymentFormMessage, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaymentFormMessage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
