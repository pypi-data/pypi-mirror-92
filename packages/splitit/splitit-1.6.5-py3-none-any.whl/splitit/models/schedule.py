# coding: utf-8

"""
    splitit-web-api-public-sdk

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Schedule(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'number_of_installments': 'int',
        'deposit': 'bool',
        'elements': 'list[ScheduleElements]'
    }

    attribute_map = {
        'number_of_installments': 'NumberOfInstallments',
        'deposit': 'Deposit',
        'elements': 'Elements'
    }

    def __init__(self, number_of_installments=None, deposit=None, elements=None):  # noqa: E501
        """Schedule - a model defined in Swagger"""  # noqa: E501

        self._number_of_installments = None
        self._deposit = None
        self._elements = None
        self.discriminator = None

        self.number_of_installments = number_of_installments
        self.deposit = deposit
        if elements is not None:
            self.elements = elements

    @property
    def number_of_installments(self):
        """Gets the number_of_installments of this Schedule.  # noqa: E501


        :return: The number_of_installments of this Schedule.  # noqa: E501
        :rtype: int
        """
        return self._number_of_installments

    @number_of_installments.setter
    def number_of_installments(self, number_of_installments):
        """Sets the number_of_installments of this Schedule.


        :param number_of_installments: The number_of_installments of this Schedule.  # noqa: E501
        :type: int
        """
        
        if number_of_installments is None:
            raise ValueError("Invalid value for `number_of_installments`, must not be `None`")  # noqa: E501

        self._number_of_installments = number_of_installments

    @property
    def deposit(self):
        """Gets the deposit of this Schedule.  # noqa: E501


        :return: The deposit of this Schedule.  # noqa: E501
        :rtype: bool
        """
        return self._deposit

    @deposit.setter
    def deposit(self, deposit):
        """Sets the deposit of this Schedule.


        :param deposit: The deposit of this Schedule.  # noqa: E501
        :type: bool
        """
        deposit = bool(deposit)
        if deposit is None:
            raise ValueError("Invalid value for `deposit`, must not be `None`")  # noqa: E501

        self._deposit = deposit

    @property
    def elements(self):
        """Gets the elements of this Schedule.  # noqa: E501


        :return: The elements of this Schedule.  # noqa: E501
        :rtype: list[ScheduleElements]
        """
        return self._elements

    @elements.setter
    def elements(self, elements):
        """Sets the elements of this Schedule.


        :param elements: The elements of this Schedule.  # noqa: E501
        :type: list[ScheduleElements]
        """

        self._elements = elements

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Schedule, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Schedule):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
