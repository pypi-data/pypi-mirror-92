# coding: utf-8

"""
    AristaFlowREST/WorklistManager

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 4.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from af_worklist_manager.models.worklist_item import WorklistItem  # noqa: F401,E501

class AdministrativeWorklistItem(WorklistItem):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'worklist_ids': 'list[str]',
        'staff_assignment_rule': 'str',
        'escalation_handling_procedure_id': 'str',
        'distribution_handling_procedure_id': 'str',
        'delegation_handling_procedure_id': 'str',
        'delegation_history': 'list[Delegation]',
        'attached_data_context': 'InputDataContext'
    }
    if hasattr(WorklistItem, "swagger_types"):
        swagger_types.update(WorklistItem.swagger_types)

    attribute_map = {
        'worklist_ids': 'worklistIds',
        'staff_assignment_rule': 'staffAssignmentRule',
        'escalation_handling_procedure_id': 'escalationHandlingProcedureId',
        'distribution_handling_procedure_id': 'distributionHandlingProcedureId',
        'delegation_handling_procedure_id': 'delegationHandlingProcedureId',
        'delegation_history': 'delegationHistory',
        'attached_data_context': 'attachedDataContext'
    }
    if hasattr(WorklistItem, "attribute_map"):
        attribute_map.update(WorklistItem.attribute_map)

    def __init__(self, worklist_ids=None, staff_assignment_rule=None, escalation_handling_procedure_id=None, distribution_handling_procedure_id=None, delegation_handling_procedure_id=None, delegation_history=None, attached_data_context=None, *args, **kwargs):  # noqa: E501
        """AdministrativeWorklistItem - a model defined in Swagger"""  # noqa: E501
        self._worklist_ids = None
        self._staff_assignment_rule = None
        self._escalation_handling_procedure_id = None
        self._distribution_handling_procedure_id = None
        self._delegation_handling_procedure_id = None
        self._delegation_history = None
        self._attached_data_context = None
        if not(hasattr(self, "discriminator")) or not(self.discriminator):
            self.discriminator = None
        self.worklist_ids = worklist_ids
        self.staff_assignment_rule = staff_assignment_rule
        if escalation_handling_procedure_id is not None:
            self.escalation_handling_procedure_id = escalation_handling_procedure_id
        if distribution_handling_procedure_id is not None:
            self.distribution_handling_procedure_id = distribution_handling_procedure_id
        if delegation_handling_procedure_id is not None:
            self.delegation_handling_procedure_id = delegation_handling_procedure_id
        if delegation_history is not None:
            self.delegation_history = delegation_history
        if attached_data_context is not None:
            self.attached_data_context = attached_data_context
        WorklistItem.__init__(self, *args, **kwargs)

    @property
    def worklist_ids(self):
        """Gets the worklist_ids of this AdministrativeWorklistItem.  # noqa: E501


        :return: The worklist_ids of this AdministrativeWorklistItem.  # noqa: E501
        :rtype: list[str]
        """
        return self._worklist_ids

    @worklist_ids.setter
    def worklist_ids(self, worklist_ids):
        """Sets the worklist_ids of this AdministrativeWorklistItem.


        :param worklist_ids: The worklist_ids of this AdministrativeWorklistItem.  # noqa: E501
        :type: list[str]
        """
        if worklist_ids is None:
            raise ValueError("Invalid value for `worklist_ids`, must not be `None`")  # noqa: E501

        self._worklist_ids = worklist_ids

    @property
    def staff_assignment_rule(self):
        """Gets the staff_assignment_rule of this AdministrativeWorklistItem.  # noqa: E501


        :return: The staff_assignment_rule of this AdministrativeWorklistItem.  # noqa: E501
        :rtype: str
        """
        return self._staff_assignment_rule

    @staff_assignment_rule.setter
    def staff_assignment_rule(self, staff_assignment_rule):
        """Sets the staff_assignment_rule of this AdministrativeWorklistItem.


        :param staff_assignment_rule: The staff_assignment_rule of this AdministrativeWorklistItem.  # noqa: E501
        :type: str
        """
        if staff_assignment_rule is None:
            raise ValueError("Invalid value for `staff_assignment_rule`, must not be `None`")  # noqa: E501

        self._staff_assignment_rule = staff_assignment_rule

    @property
    def escalation_handling_procedure_id(self):
        """Gets the escalation_handling_procedure_id of this AdministrativeWorklistItem.  # noqa: E501


        :return: The escalation_handling_procedure_id of this AdministrativeWorklistItem.  # noqa: E501
        :rtype: str
        """
        return self._escalation_handling_procedure_id

    @escalation_handling_procedure_id.setter
    def escalation_handling_procedure_id(self, escalation_handling_procedure_id):
        """Sets the escalation_handling_procedure_id of this AdministrativeWorklistItem.


        :param escalation_handling_procedure_id: The escalation_handling_procedure_id of this AdministrativeWorklistItem.  # noqa: E501
        :type: str
        """

        self._escalation_handling_procedure_id = escalation_handling_procedure_id

    @property
    def distribution_handling_procedure_id(self):
        """Gets the distribution_handling_procedure_id of this AdministrativeWorklistItem.  # noqa: E501


        :return: The distribution_handling_procedure_id of this AdministrativeWorklistItem.  # noqa: E501
        :rtype: str
        """
        return self._distribution_handling_procedure_id

    @distribution_handling_procedure_id.setter
    def distribution_handling_procedure_id(self, distribution_handling_procedure_id):
        """Sets the distribution_handling_procedure_id of this AdministrativeWorklistItem.


        :param distribution_handling_procedure_id: The distribution_handling_procedure_id of this AdministrativeWorklistItem.  # noqa: E501
        :type: str
        """

        self._distribution_handling_procedure_id = distribution_handling_procedure_id

    @property
    def delegation_handling_procedure_id(self):
        """Gets the delegation_handling_procedure_id of this AdministrativeWorklistItem.  # noqa: E501


        :return: The delegation_handling_procedure_id of this AdministrativeWorklistItem.  # noqa: E501
        :rtype: str
        """
        return self._delegation_handling_procedure_id

    @delegation_handling_procedure_id.setter
    def delegation_handling_procedure_id(self, delegation_handling_procedure_id):
        """Sets the delegation_handling_procedure_id of this AdministrativeWorklistItem.


        :param delegation_handling_procedure_id: The delegation_handling_procedure_id of this AdministrativeWorklistItem.  # noqa: E501
        :type: str
        """

        self._delegation_handling_procedure_id = delegation_handling_procedure_id

    @property
    def delegation_history(self):
        """Gets the delegation_history of this AdministrativeWorklistItem.  # noqa: E501


        :return: The delegation_history of this AdministrativeWorklistItem.  # noqa: E501
        :rtype: list[Delegation]
        """
        return self._delegation_history

    @delegation_history.setter
    def delegation_history(self, delegation_history):
        """Sets the delegation_history of this AdministrativeWorklistItem.


        :param delegation_history: The delegation_history of this AdministrativeWorklistItem.  # noqa: E501
        :type: list[Delegation]
        """

        self._delegation_history = delegation_history

    @property
    def attached_data_context(self):
        """Gets the attached_data_context of this AdministrativeWorklistItem.  # noqa: E501


        :return: The attached_data_context of this AdministrativeWorklistItem.  # noqa: E501
        :rtype: InputDataContext
        """
        return self._attached_data_context

    @attached_data_context.setter
    def attached_data_context(self, attached_data_context):
        """Sets the attached_data_context of this AdministrativeWorklistItem.


        :param attached_data_context: The attached_data_context of this AdministrativeWorklistItem.  # noqa: E501
        :type: InputDataContext
        """

        self._attached_data_context = attached_data_context

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AdministrativeWorklistItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdministrativeWorklistItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
