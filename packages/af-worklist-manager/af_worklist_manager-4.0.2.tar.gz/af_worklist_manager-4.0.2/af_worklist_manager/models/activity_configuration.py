# coding: utf-8

"""
    AristaFlowREST/WorklistManager

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 4.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ActivityConfiguration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sub_class': 'str',
        'values': 'dict(str, str)',
        'fixed': 'list[str]',
        'source_origins': 'dict(str, str)',
        'from_input_parameter': 'dict(str, str)',
        'from_process_configuration': 'dict(str, str)'
    }

    attribute_map = {
        'sub_class': 'subClass',
        'values': 'values',
        'fixed': 'fixed',
        'source_origins': 'sourceOrigins',
        'from_input_parameter': 'fromInputParameter',
        'from_process_configuration': 'fromProcessConfiguration'
    }

    def __init__(self, sub_class=None, values=None, fixed=None, source_origins=None, from_input_parameter=None, from_process_configuration=None):  # noqa: E501
        """ActivityConfiguration - a model defined in Swagger"""  # noqa: E501
        self._sub_class = None
        self._values = None
        self._fixed = None
        self._source_origins = None
        self._from_input_parameter = None
        self._from_process_configuration = None
        if not(hasattr(self, "discriminator")) or not(self.discriminator):
            self.discriminator = None
        self.sub_class = sub_class
        if values is not None:
            self.values = values
        if fixed is not None:
            self.fixed = fixed
        if source_origins is not None:
            self.source_origins = source_origins
        if from_input_parameter is not None:
            self.from_input_parameter = from_input_parameter
        if from_process_configuration is not None:
            self.from_process_configuration = from_process_configuration

    @property
    def sub_class(self):
        """Gets the sub_class of this ActivityConfiguration.  # noqa: E501


        :return: The sub_class of this ActivityConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._sub_class

    @sub_class.setter
    def sub_class(self, sub_class):
        """Sets the sub_class of this ActivityConfiguration.


        :param sub_class: The sub_class of this ActivityConfiguration.  # noqa: E501
        :type: str
        """
        if sub_class is None:
            raise ValueError("Invalid value for `sub_class`, must not be `None`")  # noqa: E501

        self._sub_class = sub_class

    @property
    def values(self):
        """Gets the values of this ActivityConfiguration.  # noqa: E501


        :return: The values of this ActivityConfiguration.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this ActivityConfiguration.


        :param values: The values of this ActivityConfiguration.  # noqa: E501
        :type: dict(str, str)
        """

        self._values = values

    @property
    def fixed(self):
        """Gets the fixed of this ActivityConfiguration.  # noqa: E501


        :return: The fixed of this ActivityConfiguration.  # noqa: E501
        :rtype: list[str]
        """
        return self._fixed

    @fixed.setter
    def fixed(self, fixed):
        """Sets the fixed of this ActivityConfiguration.


        :param fixed: The fixed of this ActivityConfiguration.  # noqa: E501
        :type: list[str]
        """

        self._fixed = fixed

    @property
    def source_origins(self):
        """Gets the source_origins of this ActivityConfiguration.  # noqa: E501


        :return: The source_origins of this ActivityConfiguration.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._source_origins

    @source_origins.setter
    def source_origins(self, source_origins):
        """Sets the source_origins of this ActivityConfiguration.


        :param source_origins: The source_origins of this ActivityConfiguration.  # noqa: E501
        :type: dict(str, str)
        """

        self._source_origins = source_origins

    @property
    def from_input_parameter(self):
        """Gets the from_input_parameter of this ActivityConfiguration.  # noqa: E501


        :return: The from_input_parameter of this ActivityConfiguration.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._from_input_parameter

    @from_input_parameter.setter
    def from_input_parameter(self, from_input_parameter):
        """Sets the from_input_parameter of this ActivityConfiguration.


        :param from_input_parameter: The from_input_parameter of this ActivityConfiguration.  # noqa: E501
        :type: dict(str, str)
        """

        self._from_input_parameter = from_input_parameter

    @property
    def from_process_configuration(self):
        """Gets the from_process_configuration of this ActivityConfiguration.  # noqa: E501


        :return: The from_process_configuration of this ActivityConfiguration.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._from_process_configuration

    @from_process_configuration.setter
    def from_process_configuration(self, from_process_configuration):
        """Sets the from_process_configuration of this ActivityConfiguration.


        :param from_process_configuration: The from_process_configuration of this ActivityConfiguration.  # noqa: E501
        :type: dict(str, str)
        """

        self._from_process_configuration = from_process_configuration

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ActivityConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ActivityConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
