# coding: utf-8

"""
    AristaFlowREST/WorklistManager

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 4.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InitialIncClientWorklistData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sub_class': 'str',
        'inc_wl_id': 'str',
        'rem_alive_time': 'int',
        'dropped': 'bool',
        'worklist_id': 'str',
        'agent': 'QualifiedAgent',
        'revision': 'WorklistRevision',
        'user_attributes': 'dict(str, str)',
        'client_worklist_id': 'int',
        'wu_conf': 'WorklistUpdateConfiguration',
        'items_flat': 'list[ClientWorklistItem]'
    }

    attribute_map = {
        'sub_class': 'subClass',
        'inc_wl_id': 'incWlId',
        'rem_alive_time': 'remAliveTime',
        'dropped': 'dropped',
        'worklist_id': 'worklistId',
        'agent': 'agent',
        'revision': 'revision',
        'user_attributes': 'userAttributes',
        'client_worklist_id': 'clientWorklistId',
        'wu_conf': 'wuConf',
        'items_flat': 'itemsFlat'
    }

    def __init__(self, sub_class=None, inc_wl_id=None, rem_alive_time=None, dropped=None, worklist_id=None, agent=None, revision=None, user_attributes=None, client_worklist_id=None, wu_conf=None, items_flat=None):  # noqa: E501
        """InitialIncClientWorklistData - a model defined in Swagger"""  # noqa: E501
        self._sub_class = None
        self._inc_wl_id = None
        self._rem_alive_time = None
        self._dropped = None
        self._worklist_id = None
        self._agent = None
        self._revision = None
        self._user_attributes = None
        self._client_worklist_id = None
        self._wu_conf = None
        self._items_flat = None
        if not(hasattr(self, "discriminator")) or not(self.discriminator):
            self.discriminator = None
        self.sub_class = sub_class
        if inc_wl_id is not None:
            self.inc_wl_id = inc_wl_id
        self.rem_alive_time = rem_alive_time
        self.dropped = dropped
        self.worklist_id = worklist_id
        self.agent = agent
        self.revision = revision
        if user_attributes is not None:
            self.user_attributes = user_attributes
        self.client_worklist_id = client_worklist_id
        self.wu_conf = wu_conf
        if items_flat is not None:
            self.items_flat = items_flat

    @property
    def sub_class(self):
        """Gets the sub_class of this InitialIncClientWorklistData.  # noqa: E501


        :return: The sub_class of this InitialIncClientWorklistData.  # noqa: E501
        :rtype: str
        """
        return self._sub_class

    @sub_class.setter
    def sub_class(self, sub_class):
        """Sets the sub_class of this InitialIncClientWorklistData.


        :param sub_class: The sub_class of this InitialIncClientWorklistData.  # noqa: E501
        :type: str
        """
        if sub_class is None:
            raise ValueError("Invalid value for `sub_class`, must not be `None`")  # noqa: E501

        self._sub_class = sub_class

    @property
    def inc_wl_id(self):
        """Gets the inc_wl_id of this InitialIncClientWorklistData.  # noqa: E501


        :return: The inc_wl_id of this InitialIncClientWorklistData.  # noqa: E501
        :rtype: str
        """
        return self._inc_wl_id

    @inc_wl_id.setter
    def inc_wl_id(self, inc_wl_id):
        """Sets the inc_wl_id of this InitialIncClientWorklistData.


        :param inc_wl_id: The inc_wl_id of this InitialIncClientWorklistData.  # noqa: E501
        :type: str
        """

        self._inc_wl_id = inc_wl_id

    @property
    def rem_alive_time(self):
        """Gets the rem_alive_time of this InitialIncClientWorklistData.  # noqa: E501


        :return: The rem_alive_time of this InitialIncClientWorklistData.  # noqa: E501
        :rtype: int
        """
        return self._rem_alive_time

    @rem_alive_time.setter
    def rem_alive_time(self, rem_alive_time):
        """Sets the rem_alive_time of this InitialIncClientWorklistData.


        :param rem_alive_time: The rem_alive_time of this InitialIncClientWorklistData.  # noqa: E501
        :type: int
        """
        if rem_alive_time is None:
            raise ValueError("Invalid value for `rem_alive_time`, must not be `None`")  # noqa: E501

        self._rem_alive_time = rem_alive_time

    @property
    def dropped(self):
        """Gets the dropped of this InitialIncClientWorklistData.  # noqa: E501


        :return: The dropped of this InitialIncClientWorklistData.  # noqa: E501
        :rtype: bool
        """
        return self._dropped

    @dropped.setter
    def dropped(self, dropped):
        """Sets the dropped of this InitialIncClientWorklistData.


        :param dropped: The dropped of this InitialIncClientWorklistData.  # noqa: E501
        :type: bool
        """
        if dropped is None:
            raise ValueError("Invalid value for `dropped`, must not be `None`")  # noqa: E501

        self._dropped = dropped

    @property
    def worklist_id(self):
        """Gets the worklist_id of this InitialIncClientWorklistData.  # noqa: E501


        :return: The worklist_id of this InitialIncClientWorklistData.  # noqa: E501
        :rtype: str
        """
        return self._worklist_id

    @worklist_id.setter
    def worklist_id(self, worklist_id):
        """Sets the worklist_id of this InitialIncClientWorklistData.


        :param worklist_id: The worklist_id of this InitialIncClientWorklistData.  # noqa: E501
        :type: str
        """
        if worklist_id is None:
            raise ValueError("Invalid value for `worklist_id`, must not be `None`")  # noqa: E501

        self._worklist_id = worklist_id

    @property
    def agent(self):
        """Gets the agent of this InitialIncClientWorklistData.  # noqa: E501


        :return: The agent of this InitialIncClientWorklistData.  # noqa: E501
        :rtype: QualifiedAgent
        """
        return self._agent

    @agent.setter
    def agent(self, agent):
        """Sets the agent of this InitialIncClientWorklistData.


        :param agent: The agent of this InitialIncClientWorklistData.  # noqa: E501
        :type: QualifiedAgent
        """
        if agent is None:
            raise ValueError("Invalid value for `agent`, must not be `None`")  # noqa: E501

        self._agent = agent

    @property
    def revision(self):
        """Gets the revision of this InitialIncClientWorklistData.  # noqa: E501


        :return: The revision of this InitialIncClientWorklistData.  # noqa: E501
        :rtype: WorklistRevision
        """
        return self._revision

    @revision.setter
    def revision(self, revision):
        """Sets the revision of this InitialIncClientWorklistData.


        :param revision: The revision of this InitialIncClientWorklistData.  # noqa: E501
        :type: WorklistRevision
        """
        if revision is None:
            raise ValueError("Invalid value for `revision`, must not be `None`")  # noqa: E501

        self._revision = revision

    @property
    def user_attributes(self):
        """Gets the user_attributes of this InitialIncClientWorklistData.  # noqa: E501


        :return: The user_attributes of this InitialIncClientWorklistData.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._user_attributes

    @user_attributes.setter
    def user_attributes(self, user_attributes):
        """Sets the user_attributes of this InitialIncClientWorklistData.


        :param user_attributes: The user_attributes of this InitialIncClientWorklistData.  # noqa: E501
        :type: dict(str, str)
        """

        self._user_attributes = user_attributes

    @property
    def client_worklist_id(self):
        """Gets the client_worklist_id of this InitialIncClientWorklistData.  # noqa: E501


        :return: The client_worklist_id of this InitialIncClientWorklistData.  # noqa: E501
        :rtype: int
        """
        return self._client_worklist_id

    @client_worklist_id.setter
    def client_worklist_id(self, client_worklist_id):
        """Sets the client_worklist_id of this InitialIncClientWorklistData.


        :param client_worklist_id: The client_worklist_id of this InitialIncClientWorklistData.  # noqa: E501
        :type: int
        """
        if client_worklist_id is None:
            raise ValueError("Invalid value for `client_worklist_id`, must not be `None`")  # noqa: E501

        self._client_worklist_id = client_worklist_id

    @property
    def wu_conf(self):
        """Gets the wu_conf of this InitialIncClientWorklistData.  # noqa: E501


        :return: The wu_conf of this InitialIncClientWorklistData.  # noqa: E501
        :rtype: WorklistUpdateConfiguration
        """
        return self._wu_conf

    @wu_conf.setter
    def wu_conf(self, wu_conf):
        """Sets the wu_conf of this InitialIncClientWorklistData.


        :param wu_conf: The wu_conf of this InitialIncClientWorklistData.  # noqa: E501
        :type: WorklistUpdateConfiguration
        """
        if wu_conf is None:
            raise ValueError("Invalid value for `wu_conf`, must not be `None`")  # noqa: E501

        self._wu_conf = wu_conf

    @property
    def items_flat(self):
        """Gets the items_flat of this InitialIncClientWorklistData.  # noqa: E501


        :return: The items_flat of this InitialIncClientWorklistData.  # noqa: E501
        :rtype: list[ClientWorklistItem]
        """
        return self._items_flat

    @items_flat.setter
    def items_flat(self, items_flat):
        """Sets the items_flat of this InitialIncClientWorklistData.


        :param items_flat: The items_flat of this InitialIncClientWorklistData.  # noqa: E501
        :type: list[ClientWorklistItem]
        """

        self._items_flat = items_flat

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InitialIncClientWorklistData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InitialIncClientWorklistData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
