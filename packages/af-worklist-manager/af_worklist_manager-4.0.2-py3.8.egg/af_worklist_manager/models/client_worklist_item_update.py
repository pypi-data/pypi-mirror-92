# coding: utf-8

"""
    AristaFlowREST/WorklistManager

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 4.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ClientWorklistItemUpdate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sub_class': 'str',
        'update_type': 'str',
        'item': 'ClientWorklistItem'
    }

    attribute_map = {
        'sub_class': 'subClass',
        'update_type': 'updateType',
        'item': 'item'
    }

    def __init__(self, sub_class=None, update_type=None, item=None):  # noqa: E501
        """ClientWorklistItemUpdate - a model defined in Swagger"""  # noqa: E501
        self._sub_class = None
        self._update_type = None
        self._item = None
        if not(hasattr(self, "discriminator")) or not(self.discriminator):
            self.discriminator = None
        self.sub_class = sub_class
        self.update_type = update_type
        self.item = item

    @property
    def sub_class(self):
        """Gets the sub_class of this ClientWorklistItemUpdate.  # noqa: E501


        :return: The sub_class of this ClientWorklistItemUpdate.  # noqa: E501
        :rtype: str
        """
        return self._sub_class

    @sub_class.setter
    def sub_class(self, sub_class):
        """Sets the sub_class of this ClientWorklistItemUpdate.


        :param sub_class: The sub_class of this ClientWorklistItemUpdate.  # noqa: E501
        :type: str
        """
        if sub_class is None:
            raise ValueError("Invalid value for `sub_class`, must not be `None`")  # noqa: E501

        self._sub_class = sub_class

    @property
    def update_type(self):
        """Gets the update_type of this ClientWorklistItemUpdate.  # noqa: E501


        :return: The update_type of this ClientWorklistItemUpdate.  # noqa: E501
        :rtype: str
        """
        return self._update_type

    @update_type.setter
    def update_type(self, update_type):
        """Sets the update_type of this ClientWorklistItemUpdate.


        :param update_type: The update_type of this ClientWorklistItemUpdate.  # noqa: E501
        :type: str
        """
        if update_type is None:
            raise ValueError("Invalid value for `update_type`, must not be `None`")  # noqa: E501
        allowed_values = ["CHANGED", "ADDED", "REMOVED", "ADDED_OR_CHANGED", "REMOVED_OR_NOTHING"]  # noqa: E501
        if update_type not in allowed_values:
            raise ValueError(
                "Invalid value for `update_type` ({0}), must be one of {1}"  # noqa: E501
                .format(update_type, allowed_values)
            )

        self._update_type = update_type

    @property
    def item(self):
        """Gets the item of this ClientWorklistItemUpdate.  # noqa: E501


        :return: The item of this ClientWorklistItemUpdate.  # noqa: E501
        :rtype: ClientWorklistItem
        """
        return self._item

    @item.setter
    def item(self, item):
        """Sets the item of this ClientWorklistItemUpdate.


        :param item: The item of this ClientWorklistItemUpdate.  # noqa: E501
        :type: ClientWorklistItem
        """
        if item is None:
            raise ValueError("Invalid value for `item`, must not be `None`")  # noqa: E501

        self._item = item

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClientWorklistItemUpdate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClientWorklistItemUpdate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
