# coding: utf-8

"""
    AristaFlowREST/WorklistManager

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 4.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from af_worklist_manager.models.inc_worklist_update_data import IncWorklistUpdateData  # noqa: F401,E501

class InitialIncWorklistUpdateData(IncWorklistUpdateData):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'worklist_id': 'str',
        'source_revision': 'WorklistRevision',
        'target_revision': 'int',
        'max_priority': 'int',
        'user_attributes': 'dict(str, str)'
    }
    if hasattr(IncWorklistUpdateData, "swagger_types"):
        swagger_types.update(IncWorklistUpdateData.swagger_types)

    attribute_map = {
        'worklist_id': 'worklistId',
        'source_revision': 'sourceRevision',
        'target_revision': 'targetRevision',
        'max_priority': 'maxPriority',
        'user_attributes': 'userAttributes'
    }
    if hasattr(IncWorklistUpdateData, "attribute_map"):
        attribute_map.update(IncWorklistUpdateData.attribute_map)

    def __init__(self, worklist_id=None, source_revision=None, target_revision=None, max_priority=None, user_attributes=None, *args, **kwargs):  # noqa: E501
        """InitialIncWorklistUpdateData - a model defined in Swagger"""  # noqa: E501
        self._worklist_id = None
        self._source_revision = None
        self._target_revision = None
        self._max_priority = None
        self._user_attributes = None
        if not(hasattr(self, "discriminator")) or not(self.discriminator):
            self.discriminator = None
        self.worklist_id = worklist_id
        self.source_revision = source_revision
        self.target_revision = target_revision
        self.max_priority = max_priority
        if user_attributes is not None:
            self.user_attributes = user_attributes
        IncWorklistUpdateData.__init__(self, *args, **kwargs)

    @property
    def worklist_id(self):
        """Gets the worklist_id of this InitialIncWorklistUpdateData.  # noqa: E501


        :return: The worklist_id of this InitialIncWorklistUpdateData.  # noqa: E501
        :rtype: str
        """
        return self._worklist_id

    @worklist_id.setter
    def worklist_id(self, worklist_id):
        """Sets the worklist_id of this InitialIncWorklistUpdateData.


        :param worklist_id: The worklist_id of this InitialIncWorklistUpdateData.  # noqa: E501
        :type: str
        """
        if worklist_id is None:
            raise ValueError("Invalid value for `worklist_id`, must not be `None`")  # noqa: E501

        self._worklist_id = worklist_id

    @property
    def source_revision(self):
        """Gets the source_revision of this InitialIncWorklistUpdateData.  # noqa: E501


        :return: The source_revision of this InitialIncWorklistUpdateData.  # noqa: E501
        :rtype: WorklistRevision
        """
        return self._source_revision

    @source_revision.setter
    def source_revision(self, source_revision):
        """Sets the source_revision of this InitialIncWorklistUpdateData.


        :param source_revision: The source_revision of this InitialIncWorklistUpdateData.  # noqa: E501
        :type: WorklistRevision
        """
        if source_revision is None:
            raise ValueError("Invalid value for `source_revision`, must not be `None`")  # noqa: E501

        self._source_revision = source_revision

    @property
    def target_revision(self):
        """Gets the target_revision of this InitialIncWorklistUpdateData.  # noqa: E501


        :return: The target_revision of this InitialIncWorklistUpdateData.  # noqa: E501
        :rtype: int
        """
        return self._target_revision

    @target_revision.setter
    def target_revision(self, target_revision):
        """Sets the target_revision of this InitialIncWorklistUpdateData.


        :param target_revision: The target_revision of this InitialIncWorklistUpdateData.  # noqa: E501
        :type: int
        """
        if target_revision is None:
            raise ValueError("Invalid value for `target_revision`, must not be `None`")  # noqa: E501

        self._target_revision = target_revision

    @property
    def max_priority(self):
        """Gets the max_priority of this InitialIncWorklistUpdateData.  # noqa: E501


        :return: The max_priority of this InitialIncWorklistUpdateData.  # noqa: E501
        :rtype: int
        """
        return self._max_priority

    @max_priority.setter
    def max_priority(self, max_priority):
        """Sets the max_priority of this InitialIncWorklistUpdateData.


        :param max_priority: The max_priority of this InitialIncWorklistUpdateData.  # noqa: E501
        :type: int
        """
        if max_priority is None:
            raise ValueError("Invalid value for `max_priority`, must not be `None`")  # noqa: E501

        self._max_priority = max_priority

    @property
    def user_attributes(self):
        """Gets the user_attributes of this InitialIncWorklistUpdateData.  # noqa: E501


        :return: The user_attributes of this InitialIncWorklistUpdateData.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._user_attributes

    @user_attributes.setter
    def user_attributes(self, user_attributes):
        """Sets the user_attributes of this InitialIncWorklistUpdateData.


        :param user_attributes: The user_attributes of this InitialIncWorklistUpdateData.  # noqa: E501
        :type: dict(str, str)
        """

        self._user_attributes = user_attributes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InitialIncWorklistUpdateData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InitialIncWorklistUpdateData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
