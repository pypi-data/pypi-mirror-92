# coding: utf-8

"""
    AristaFlowREST/WorklistManager

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 4.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WorklistRevision(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'initialisation_date': 'int',
        'update_count': 'int'
    }

    attribute_map = {
        'initialisation_date': 'initialisationDate',
        'update_count': 'updateCount'
    }

    def __init__(self, initialisation_date=None, update_count=None):  # noqa: E501
        """WorklistRevision - a model defined in Swagger"""  # noqa: E501
        self._initialisation_date = None
        self._update_count = None
        if not(hasattr(self, "discriminator")) or not(self.discriminator):
            self.discriminator = None
        self.initialisation_date = initialisation_date
        self.update_count = update_count

    @property
    def initialisation_date(self):
        """Gets the initialisation_date of this WorklistRevision.  # noqa: E501


        :return: The initialisation_date of this WorklistRevision.  # noqa: E501
        :rtype: int
        """
        return self._initialisation_date

    @initialisation_date.setter
    def initialisation_date(self, initialisation_date):
        """Sets the initialisation_date of this WorklistRevision.


        :param initialisation_date: The initialisation_date of this WorklistRevision.  # noqa: E501
        :type: int
        """
        if initialisation_date is None:
            raise ValueError("Invalid value for `initialisation_date`, must not be `None`")  # noqa: E501

        self._initialisation_date = initialisation_date

    @property
    def update_count(self):
        """Gets the update_count of this WorklistRevision.  # noqa: E501


        :return: The update_count of this WorklistRevision.  # noqa: E501
        :rtype: int
        """
        return self._update_count

    @update_count.setter
    def update_count(self, update_count):
        """Sets the update_count of this WorklistRevision.


        :param update_count: The update_count of this WorklistRevision.  # noqa: E501
        :type: int
        """
        if update_count is None:
            raise ValueError("Invalid value for `update_count`, must not be `None`")  # noqa: E501

        self._update_count = update_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WorklistRevision, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorklistRevision):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
