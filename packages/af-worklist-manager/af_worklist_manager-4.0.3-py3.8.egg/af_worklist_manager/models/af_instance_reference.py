# coding: utf-8

"""
    AristaFlowREST/WorklistManager

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 4.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from af_worklist_manager.models.activity_reference import ActivityReference  # noqa: F401,E501

class AfInstanceReference(ActivityReference):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'instance_id': 'str',
        'instance_log_id': 'str',
        'base_template_id': 'str',
        'execution_manager_uris': 'list[str]'
    }
    if hasattr(ActivityReference, "swagger_types"):
        swagger_types.update(ActivityReference.swagger_types)

    attribute_map = {
        'instance_id': 'instanceId',
        'instance_log_id': 'instanceLogId',
        'base_template_id': 'baseTemplateId',
        'execution_manager_uris': 'executionManagerUris'
    }
    if hasattr(ActivityReference, "attribute_map"):
        attribute_map.update(ActivityReference.attribute_map)

    discriminator_value_class_map = {
          'AfEbpReference': 'AfEbpReference'    }

    def __init__(self, instance_id=None, instance_log_id=None, base_template_id=None, execution_manager_uris=None, *args, **kwargs):  # noqa: E501
        """AfInstanceReference - a model defined in Swagger"""  # noqa: E501
        self._instance_id = None
        self._instance_log_id = None
        self._base_template_id = None
        self._execution_manager_uris = None
        if not(hasattr(self, "discriminator")) or not(self.discriminator):
            self.discriminator = 'sub_class'
        self.instance_id = instance_id
        self.instance_log_id = instance_log_id
        self.base_template_id = base_template_id
        self.execution_manager_uris = execution_manager_uris
        ActivityReference.__init__(self, *args, **kwargs)

    @property
    def instance_id(self):
        """Gets the instance_id of this AfInstanceReference.  # noqa: E501


        :return: The instance_id of this AfInstanceReference.  # noqa: E501
        :rtype: str
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id):
        """Sets the instance_id of this AfInstanceReference.


        :param instance_id: The instance_id of this AfInstanceReference.  # noqa: E501
        :type: str
        """
        if instance_id is None:
            raise ValueError("Invalid value for `instance_id`, must not be `None`")  # noqa: E501

        self._instance_id = instance_id

    @property
    def instance_log_id(self):
        """Gets the instance_log_id of this AfInstanceReference.  # noqa: E501


        :return: The instance_log_id of this AfInstanceReference.  # noqa: E501
        :rtype: str
        """
        return self._instance_log_id

    @instance_log_id.setter
    def instance_log_id(self, instance_log_id):
        """Sets the instance_log_id of this AfInstanceReference.


        :param instance_log_id: The instance_log_id of this AfInstanceReference.  # noqa: E501
        :type: str
        """
        if instance_log_id is None:
            raise ValueError("Invalid value for `instance_log_id`, must not be `None`")  # noqa: E501

        self._instance_log_id = instance_log_id

    @property
    def base_template_id(self):
        """Gets the base_template_id of this AfInstanceReference.  # noqa: E501


        :return: The base_template_id of this AfInstanceReference.  # noqa: E501
        :rtype: str
        """
        return self._base_template_id

    @base_template_id.setter
    def base_template_id(self, base_template_id):
        """Sets the base_template_id of this AfInstanceReference.


        :param base_template_id: The base_template_id of this AfInstanceReference.  # noqa: E501
        :type: str
        """
        if base_template_id is None:
            raise ValueError("Invalid value for `base_template_id`, must not be `None`")  # noqa: E501

        self._base_template_id = base_template_id

    @property
    def execution_manager_uris(self):
        """Gets the execution_manager_uris of this AfInstanceReference.  # noqa: E501


        :return: The execution_manager_uris of this AfInstanceReference.  # noqa: E501
        :rtype: list[str]
        """
        return self._execution_manager_uris

    @execution_manager_uris.setter
    def execution_manager_uris(self, execution_manager_uris):
        """Sets the execution_manager_uris of this AfInstanceReference.


        :param execution_manager_uris: The execution_manager_uris of this AfInstanceReference.  # noqa: E501
        :type: list[str]
        """
        if execution_manager_uris is None:
            raise ValueError("Invalid value for `execution_manager_uris`, must not be `None`")  # noqa: E501

        self._execution_manager_uris = execution_manager_uris

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_value = data[self.attribute_map[self.discriminator]]
        return discriminator_value if not(self.__class__.__name__ == discriminator_value) else None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AfInstanceReference, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AfInstanceReference):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
