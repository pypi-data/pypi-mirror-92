# coding: utf-8

"""
    AristaFlowREST/WorklistManager

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 4.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from af_worklist_manager.models.worklist_update_notification import WorklistUpdateNotification  # noqa: F401,E501

class WorklistUpdate(WorklistUpdateNotification):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'item_updates': 'list[ClientWorklistItemUpdate]',
        'user_attributes': 'dict(str, str)'
    }
    if hasattr(WorklistUpdateNotification, "swagger_types"):
        swagger_types.update(WorklistUpdateNotification.swagger_types)

    attribute_map = {
        'item_updates': 'itemUpdates',
        'user_attributes': 'userAttributes'
    }
    if hasattr(WorklistUpdateNotification, "attribute_map"):
        attribute_map.update(WorklistUpdateNotification.attribute_map)

    def __init__(self, item_updates=None, user_attributes=None, *args, **kwargs):  # noqa: E501
        """WorklistUpdate - a model defined in Swagger"""  # noqa: E501
        self._item_updates = None
        self._user_attributes = None
        if not(hasattr(self, "discriminator")) or not(self.discriminator):
            self.discriminator = None
        self.item_updates = item_updates
        if user_attributes is not None:
            self.user_attributes = user_attributes
        WorklistUpdateNotification.__init__(self, *args, **kwargs)

    @property
    def item_updates(self):
        """Gets the item_updates of this WorklistUpdate.  # noqa: E501


        :return: The item_updates of this WorklistUpdate.  # noqa: E501
        :rtype: list[ClientWorklistItemUpdate]
        """
        return self._item_updates

    @item_updates.setter
    def item_updates(self, item_updates):
        """Sets the item_updates of this WorklistUpdate.


        :param item_updates: The item_updates of this WorklistUpdate.  # noqa: E501
        :type: list[ClientWorklistItemUpdate]
        """
        if item_updates is None:
            raise ValueError("Invalid value for `item_updates`, must not be `None`")  # noqa: E501

        self._item_updates = item_updates

    @property
    def user_attributes(self):
        """Gets the user_attributes of this WorklistUpdate.  # noqa: E501


        :return: The user_attributes of this WorklistUpdate.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._user_attributes

    @user_attributes.setter
    def user_attributes(self, user_attributes):
        """Sets the user_attributes of this WorklistUpdate.


        :param user_attributes: The user_attributes of this WorklistUpdate.  # noqa: E501
        :type: dict(str, str)
        """

        self._user_attributes = user_attributes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WorklistUpdate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorklistUpdate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
