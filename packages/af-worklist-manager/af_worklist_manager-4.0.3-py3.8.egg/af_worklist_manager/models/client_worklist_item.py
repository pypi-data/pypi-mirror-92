# coding: utf-8

"""
    AristaFlowREST/WorklistManager

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 4.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from af_worklist_manager.models.worklist_item import WorklistItem  # noqa: F401,E501

class ClientWorklistItem(WorklistItem):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'substituted_from': 'list[QualifiedAgent]',
        'worklist_id': 'str',
        'ind_title': 'str',
        'ind_description': 'str',
        'ind_priority': 'int',
        'ind_due_date': 'int',
        'ind_escalation_proc_id': 'str',
        'resubmission_date': 'int',
        'ind_escalation_date': 'int',
        'ind_user_attributes': 'dict(str, str)'
    }
    if hasattr(WorklistItem, "swagger_types"):
        swagger_types.update(WorklistItem.swagger_types)

    attribute_map = {
        'substituted_from': 'substitutedFrom',
        'worklist_id': 'worklistId',
        'ind_title': 'indTitle',
        'ind_description': 'indDescription',
        'ind_priority': 'indPriority',
        'ind_due_date': 'indDueDate',
        'ind_escalation_proc_id': 'indEscalationProcId',
        'resubmission_date': 'resubmissionDate',
        'ind_escalation_date': 'indEscalationDate',
        'ind_user_attributes': 'indUserAttributes'
    }
    if hasattr(WorklistItem, "attribute_map"):
        attribute_map.update(WorklistItem.attribute_map)

    def __init__(self, substituted_from=None, worklist_id=None, ind_title=None, ind_description=None, ind_priority=None, ind_due_date=None, ind_escalation_proc_id=None, resubmission_date=None, ind_escalation_date=None, ind_user_attributes=None, *args, **kwargs):  # noqa: E501
        """ClientWorklistItem - a model defined in Swagger"""  # noqa: E501
        self._substituted_from = None
        self._worklist_id = None
        self._ind_title = None
        self._ind_description = None
        self._ind_priority = None
        self._ind_due_date = None
        self._ind_escalation_proc_id = None
        self._resubmission_date = None
        self._ind_escalation_date = None
        self._ind_user_attributes = None
        if not(hasattr(self, "discriminator")) or not(self.discriminator):
            self.discriminator = None
        if substituted_from is not None:
            self.substituted_from = substituted_from
        self.worklist_id = worklist_id
        if ind_title is not None:
            self.ind_title = ind_title
        if ind_description is not None:
            self.ind_description = ind_description
        self.ind_priority = ind_priority
        if ind_due_date is not None:
            self.ind_due_date = ind_due_date
        if ind_escalation_proc_id is not None:
            self.ind_escalation_proc_id = ind_escalation_proc_id
        if resubmission_date is not None:
            self.resubmission_date = resubmission_date
        if ind_escalation_date is not None:
            self.ind_escalation_date = ind_escalation_date
        if ind_user_attributes is not None:
            self.ind_user_attributes = ind_user_attributes
        WorklistItem.__init__(self, *args, **kwargs)

    @property
    def substituted_from(self):
        """Gets the substituted_from of this ClientWorklistItem.  # noqa: E501


        :return: The substituted_from of this ClientWorklistItem.  # noqa: E501
        :rtype: list[QualifiedAgent]
        """
        return self._substituted_from

    @substituted_from.setter
    def substituted_from(self, substituted_from):
        """Sets the substituted_from of this ClientWorklistItem.


        :param substituted_from: The substituted_from of this ClientWorklistItem.  # noqa: E501
        :type: list[QualifiedAgent]
        """

        self._substituted_from = substituted_from

    @property
    def worklist_id(self):
        """Gets the worklist_id of this ClientWorklistItem.  # noqa: E501


        :return: The worklist_id of this ClientWorklistItem.  # noqa: E501
        :rtype: str
        """
        return self._worklist_id

    @worklist_id.setter
    def worklist_id(self, worklist_id):
        """Sets the worklist_id of this ClientWorklistItem.


        :param worklist_id: The worklist_id of this ClientWorklistItem.  # noqa: E501
        :type: str
        """
        if worklist_id is None:
            raise ValueError("Invalid value for `worklist_id`, must not be `None`")  # noqa: E501

        self._worklist_id = worklist_id

    @property
    def ind_title(self):
        """Gets the ind_title of this ClientWorklistItem.  # noqa: E501


        :return: The ind_title of this ClientWorklistItem.  # noqa: E501
        :rtype: str
        """
        return self._ind_title

    @ind_title.setter
    def ind_title(self, ind_title):
        """Sets the ind_title of this ClientWorklistItem.


        :param ind_title: The ind_title of this ClientWorklistItem.  # noqa: E501
        :type: str
        """

        self._ind_title = ind_title

    @property
    def ind_description(self):
        """Gets the ind_description of this ClientWorklistItem.  # noqa: E501


        :return: The ind_description of this ClientWorklistItem.  # noqa: E501
        :rtype: str
        """
        return self._ind_description

    @ind_description.setter
    def ind_description(self, ind_description):
        """Sets the ind_description of this ClientWorklistItem.


        :param ind_description: The ind_description of this ClientWorklistItem.  # noqa: E501
        :type: str
        """

        self._ind_description = ind_description

    @property
    def ind_priority(self):
        """Gets the ind_priority of this ClientWorklistItem.  # noqa: E501


        :return: The ind_priority of this ClientWorklistItem.  # noqa: E501
        :rtype: int
        """
        return self._ind_priority

    @ind_priority.setter
    def ind_priority(self, ind_priority):
        """Sets the ind_priority of this ClientWorklistItem.


        :param ind_priority: The ind_priority of this ClientWorklistItem.  # noqa: E501
        :type: int
        """
        if ind_priority is None:
            raise ValueError("Invalid value for `ind_priority`, must not be `None`")  # noqa: E501

        self._ind_priority = ind_priority

    @property
    def ind_due_date(self):
        """Gets the ind_due_date of this ClientWorklistItem.  # noqa: E501


        :return: The ind_due_date of this ClientWorklistItem.  # noqa: E501
        :rtype: int
        """
        return self._ind_due_date

    @ind_due_date.setter
    def ind_due_date(self, ind_due_date):
        """Sets the ind_due_date of this ClientWorklistItem.


        :param ind_due_date: The ind_due_date of this ClientWorklistItem.  # noqa: E501
        :type: int
        """

        self._ind_due_date = ind_due_date

    @property
    def ind_escalation_proc_id(self):
        """Gets the ind_escalation_proc_id of this ClientWorklistItem.  # noqa: E501


        :return: The ind_escalation_proc_id of this ClientWorklistItem.  # noqa: E501
        :rtype: str
        """
        return self._ind_escalation_proc_id

    @ind_escalation_proc_id.setter
    def ind_escalation_proc_id(self, ind_escalation_proc_id):
        """Sets the ind_escalation_proc_id of this ClientWorklistItem.


        :param ind_escalation_proc_id: The ind_escalation_proc_id of this ClientWorklistItem.  # noqa: E501
        :type: str
        """

        self._ind_escalation_proc_id = ind_escalation_proc_id

    @property
    def resubmission_date(self):
        """Gets the resubmission_date of this ClientWorklistItem.  # noqa: E501


        :return: The resubmission_date of this ClientWorklistItem.  # noqa: E501
        :rtype: int
        """
        return self._resubmission_date

    @resubmission_date.setter
    def resubmission_date(self, resubmission_date):
        """Sets the resubmission_date of this ClientWorklistItem.


        :param resubmission_date: The resubmission_date of this ClientWorklistItem.  # noqa: E501
        :type: int
        """

        self._resubmission_date = resubmission_date

    @property
    def ind_escalation_date(self):
        """Gets the ind_escalation_date of this ClientWorklistItem.  # noqa: E501


        :return: The ind_escalation_date of this ClientWorklistItem.  # noqa: E501
        :rtype: int
        """
        return self._ind_escalation_date

    @ind_escalation_date.setter
    def ind_escalation_date(self, ind_escalation_date):
        """Sets the ind_escalation_date of this ClientWorklistItem.


        :param ind_escalation_date: The ind_escalation_date of this ClientWorklistItem.  # noqa: E501
        :type: int
        """

        self._ind_escalation_date = ind_escalation_date

    @property
    def ind_user_attributes(self):
        """Gets the ind_user_attributes of this ClientWorklistItem.  # noqa: E501


        :return: The ind_user_attributes of this ClientWorklistItem.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._ind_user_attributes

    @ind_user_attributes.setter
    def ind_user_attributes(self, ind_user_attributes):
        """Sets the ind_user_attributes of this ClientWorklistItem.


        :param ind_user_attributes: The ind_user_attributes of this ClientWorklistItem.  # noqa: E501
        :type: dict(str, str)
        """

        self._ind_user_attributes = ind_user_attributes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClientWorklistItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClientWorklistItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
