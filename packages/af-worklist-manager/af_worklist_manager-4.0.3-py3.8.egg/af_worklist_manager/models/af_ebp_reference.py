# coding: utf-8

"""
    AristaFlowREST/WorklistManager

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 4.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from af_worklist_manager.models.af_instance_reference import AfInstanceReference  # noqa: F401,E501

class AfEbpReference(AfInstanceReference):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'node_id': 'int',
        'node_iteration': 'int',
        'runtime_manager_uris': 'list[str]',
        'exec_control_props': 'ExecutionControlProperties'
    }
    if hasattr(AfInstanceReference, "swagger_types"):
        swagger_types.update(AfInstanceReference.swagger_types)

    attribute_map = {
        'type': 'type',
        'node_id': 'nodeId',
        'node_iteration': 'nodeIteration',
        'runtime_manager_uris': 'runtimeManagerUris',
        'exec_control_props': 'execControlProps'
    }
    if hasattr(AfInstanceReference, "attribute_map"):
        attribute_map.update(AfInstanceReference.attribute_map)

    discriminator_value_class_map = {
          'AfActivityReference': 'AfActivityReference'    }

    def __init__(self, type=None, node_id=None, node_iteration=None, runtime_manager_uris=None, exec_control_props=None, *args, **kwargs):  # noqa: E501
        """AfEbpReference - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._node_id = None
        self._node_iteration = None
        self._runtime_manager_uris = None
        self._exec_control_props = None
        if not(hasattr(self, "discriminator")) or not(self.discriminator):
            self.discriminator = 'sub_class'
        self.type = type
        self.node_id = node_id
        self.node_iteration = node_iteration
        if runtime_manager_uris is not None:
            self.runtime_manager_uris = runtime_manager_uris
        self.exec_control_props = exec_control_props
        AfInstanceReference.__init__(self, *args, **kwargs)

    @property
    def type(self):
        """Gets the type of this AfEbpReference.  # noqa: E501


        :return: The type of this AfEbpReference.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AfEbpReference.


        :param type: The type of this AfEbpReference.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["NULL", "ACTIVITY", "DECISION_ACTIVITY", "LWP", "TLPI"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def node_id(self):
        """Gets the node_id of this AfEbpReference.  # noqa: E501


        :return: The node_id of this AfEbpReference.  # noqa: E501
        :rtype: int
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this AfEbpReference.


        :param node_id: The node_id of this AfEbpReference.  # noqa: E501
        :type: int
        """
        if node_id is None:
            raise ValueError("Invalid value for `node_id`, must not be `None`")  # noqa: E501

        self._node_id = node_id

    @property
    def node_iteration(self):
        """Gets the node_iteration of this AfEbpReference.  # noqa: E501


        :return: The node_iteration of this AfEbpReference.  # noqa: E501
        :rtype: int
        """
        return self._node_iteration

    @node_iteration.setter
    def node_iteration(self, node_iteration):
        """Sets the node_iteration of this AfEbpReference.


        :param node_iteration: The node_iteration of this AfEbpReference.  # noqa: E501
        :type: int
        """
        if node_iteration is None:
            raise ValueError("Invalid value for `node_iteration`, must not be `None`")  # noqa: E501

        self._node_iteration = node_iteration

    @property
    def runtime_manager_uris(self):
        """Gets the runtime_manager_uris of this AfEbpReference.  # noqa: E501


        :return: The runtime_manager_uris of this AfEbpReference.  # noqa: E501
        :rtype: list[str]
        """
        return self._runtime_manager_uris

    @runtime_manager_uris.setter
    def runtime_manager_uris(self, runtime_manager_uris):
        """Sets the runtime_manager_uris of this AfEbpReference.


        :param runtime_manager_uris: The runtime_manager_uris of this AfEbpReference.  # noqa: E501
        :type: list[str]
        """

        self._runtime_manager_uris = runtime_manager_uris

    @property
    def exec_control_props(self):
        """Gets the exec_control_props of this AfEbpReference.  # noqa: E501


        :return: The exec_control_props of this AfEbpReference.  # noqa: E501
        :rtype: ExecutionControlProperties
        """
        return self._exec_control_props

    @exec_control_props.setter
    def exec_control_props(self, exec_control_props):
        """Sets the exec_control_props of this AfEbpReference.


        :param exec_control_props: The exec_control_props of this AfEbpReference.  # noqa: E501
        :type: ExecutionControlProperties
        """
        if exec_control_props is None:
            raise ValueError("Invalid value for `exec_control_props`, must not be `None`")  # noqa: E501

        self._exec_control_props = exec_control_props

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_value = data[self.attribute_map[self.discriminator]]
        return discriminator_value if not(self.__class__.__name__ == discriminator_value) else None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AfEbpReference, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AfEbpReference):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
