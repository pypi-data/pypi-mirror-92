# coding: utf-8

"""
    AristaFlowREST/WorklistManager

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 4.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WorklistUpdateConfiguration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'update_mode_threshold': 'int',
        'update_intervals': 'list[UpdateInterval]',
        'notify_only': 'bool',
        'worklist_filter': 'str',
        'user_attributes': 'dict(str, str)'
    }

    attribute_map = {
        'update_mode_threshold': 'updateModeThreshold',
        'update_intervals': 'updateIntervals',
        'notify_only': 'notifyOnly',
        'worklist_filter': 'worklistFilter',
        'user_attributes': 'userAttributes'
    }

    def __init__(self, update_mode_threshold=None, update_intervals=None, notify_only=None, worklist_filter=None, user_attributes=None):  # noqa: E501
        """WorklistUpdateConfiguration - a model defined in Swagger"""  # noqa: E501
        self._update_mode_threshold = None
        self._update_intervals = None
        self._notify_only = None
        self._worklist_filter = None
        self._user_attributes = None
        if not(hasattr(self, "discriminator")) or not(self.discriminator):
            self.discriminator = None
        self.update_mode_threshold = update_mode_threshold
        if update_intervals is not None:
            self.update_intervals = update_intervals
        self.notify_only = notify_only
        if worklist_filter is not None:
            self.worklist_filter = worklist_filter
        if user_attributes is not None:
            self.user_attributes = user_attributes

    @property
    def update_mode_threshold(self):
        """Gets the update_mode_threshold of this WorklistUpdateConfiguration.  # noqa: E501


        :return: The update_mode_threshold of this WorklistUpdateConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._update_mode_threshold

    @update_mode_threshold.setter
    def update_mode_threshold(self, update_mode_threshold):
        """Sets the update_mode_threshold of this WorklistUpdateConfiguration.


        :param update_mode_threshold: The update_mode_threshold of this WorklistUpdateConfiguration.  # noqa: E501
        :type: int
        """
        if update_mode_threshold is None:
            raise ValueError("Invalid value for `update_mode_threshold`, must not be `None`")  # noqa: E501

        self._update_mode_threshold = update_mode_threshold

    @property
    def update_intervals(self):
        """Gets the update_intervals of this WorklistUpdateConfiguration.  # noqa: E501


        :return: The update_intervals of this WorklistUpdateConfiguration.  # noqa: E501
        :rtype: list[UpdateInterval]
        """
        return self._update_intervals

    @update_intervals.setter
    def update_intervals(self, update_intervals):
        """Sets the update_intervals of this WorklistUpdateConfiguration.


        :param update_intervals: The update_intervals of this WorklistUpdateConfiguration.  # noqa: E501
        :type: list[UpdateInterval]
        """

        self._update_intervals = update_intervals

    @property
    def notify_only(self):
        """Gets the notify_only of this WorklistUpdateConfiguration.  # noqa: E501


        :return: The notify_only of this WorklistUpdateConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._notify_only

    @notify_only.setter
    def notify_only(self, notify_only):
        """Sets the notify_only of this WorklistUpdateConfiguration.


        :param notify_only: The notify_only of this WorklistUpdateConfiguration.  # noqa: E501
        :type: bool
        """
        if notify_only is None:
            raise ValueError("Invalid value for `notify_only`, must not be `None`")  # noqa: E501

        self._notify_only = notify_only

    @property
    def worklist_filter(self):
        """Gets the worklist_filter of this WorklistUpdateConfiguration.  # noqa: E501


        :return: The worklist_filter of this WorklistUpdateConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._worklist_filter

    @worklist_filter.setter
    def worklist_filter(self, worklist_filter):
        """Sets the worklist_filter of this WorklistUpdateConfiguration.


        :param worklist_filter: The worklist_filter of this WorklistUpdateConfiguration.  # noqa: E501
        :type: str
        """
        allowed_values = ["NO_TL", "TL_ONLY"]  # noqa: E501
        if worklist_filter not in allowed_values:
            raise ValueError(
                "Invalid value for `worklist_filter` ({0}), must be one of {1}"  # noqa: E501
                .format(worklist_filter, allowed_values)
            )

        self._worklist_filter = worklist_filter

    @property
    def user_attributes(self):
        """Gets the user_attributes of this WorklistUpdateConfiguration.  # noqa: E501


        :return: The user_attributes of this WorklistUpdateConfiguration.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._user_attributes

    @user_attributes.setter
    def user_attributes(self, user_attributes):
        """Sets the user_attributes of this WorklistUpdateConfiguration.


        :param user_attributes: The user_attributes of this WorklistUpdateConfiguration.  # noqa: E501
        :type: dict(str, str)
        """

        self._user_attributes = user_attributes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WorklistUpdateConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorklistUpdateConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
