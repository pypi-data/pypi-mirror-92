# coding: utf-8

"""
    AristaFlowREST/ExecutionManager

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 4.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from af_execution_manager.models.dummy_parent import DummyParent  # noqa: F401,E501

class InstanceCreationData(DummyParent):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sub_class': 'str',
        'dc': 'DataContainer',
        'exec_mode': 'str',
        'rt_mgr': 'list[str]'
    }
    if hasattr(DummyParent, "swagger_types"):
        swagger_types.update(DummyParent.swagger_types)

    attribute_map = {
        'sub_class': 'subClass',
        'dc': 'dc',
        'exec_mode': 'execMode',
        'rt_mgr': 'rtMgr'
    }
    if hasattr(DummyParent, "attribute_map"):
        attribute_map.update(DummyParent.attribute_map)

    discriminator_value_class_map = {
          'InstanceCreationRestData': 'InstanceCreationRestData',
'InstanceCreationSseData': 'InstanceCreationSseData'    }

    def __init__(self, sub_class=None, dc=None, exec_mode=None, rt_mgr=None, *args, **kwargs):  # noqa: E501
        """InstanceCreationData - a model defined in Swagger"""  # noqa: E501
        self._sub_class = None
        self._dc = None
        self._exec_mode = None
        self._rt_mgr = None
        if not(hasattr(self, "discriminator")) or not(self.discriminator):
            self.discriminator = 'sub_class'
        self.sub_class = sub_class
        if dc is not None:
            self.dc = dc
        if exec_mode is not None:
            self.exec_mode = exec_mode
        if rt_mgr is not None:
            self.rt_mgr = rt_mgr
        DummyParent.__init__(self, *args, **kwargs)

    @property
    def sub_class(self):
        """Gets the sub_class of this InstanceCreationData.  # noqa: E501


        :return: The sub_class of this InstanceCreationData.  # noqa: E501
        :rtype: str
        """
        return self._sub_class

    @sub_class.setter
    def sub_class(self, sub_class):
        """Sets the sub_class of this InstanceCreationData.


        :param sub_class: The sub_class of this InstanceCreationData.  # noqa: E501
        :type: str
        """
        if sub_class is None:
            raise ValueError("Invalid value for `sub_class`, must not be `None`")  # noqa: E501

        self._sub_class = sub_class

    @property
    def dc(self):
        """Gets the dc of this InstanceCreationData.  # noqa: E501


        :return: The dc of this InstanceCreationData.  # noqa: E501
        :rtype: DataContainer
        """
        return self._dc

    @dc.setter
    def dc(self, dc):
        """Sets the dc of this InstanceCreationData.


        :param dc: The dc of this InstanceCreationData.  # noqa: E501
        :type: DataContainer
        """

        self._dc = dc

    @property
    def exec_mode(self):
        """Gets the exec_mode of this InstanceCreationData.  # noqa: E501


        :return: The exec_mode of this InstanceCreationData.  # noqa: E501
        :rtype: str
        """
        return self._exec_mode

    @exec_mode.setter
    def exec_mode(self, exec_mode):
        """Sets the exec_mode of this InstanceCreationData.


        :param exec_mode: The exec_mode of this InstanceCreationData.  # noqa: E501
        :type: str
        """
        allowed_values = ["SUBSTITUTED_TEST", "COMPONENT_TEST", "PRODUCTION", "VIEW_ONLY"]  # noqa: E501
        if exec_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `exec_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(exec_mode, allowed_values)
            )

        self._exec_mode = exec_mode

    @property
    def rt_mgr(self):
        """Gets the rt_mgr of this InstanceCreationData.  # noqa: E501


        :return: The rt_mgr of this InstanceCreationData.  # noqa: E501
        :rtype: list[str]
        """
        return self._rt_mgr

    @rt_mgr.setter
    def rt_mgr(self, rt_mgr):
        """Sets the rt_mgr of this InstanceCreationData.


        :param rt_mgr: The rt_mgr of this InstanceCreationData.  # noqa: E501
        :type: list[str]
        """

        self._rt_mgr = rt_mgr

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_value = data[self.attribute_map[self.discriminator]]
        return discriminator_value if not(self.__class__.__name__ == discriminator_value) else None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InstanceCreationData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InstanceCreationData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
