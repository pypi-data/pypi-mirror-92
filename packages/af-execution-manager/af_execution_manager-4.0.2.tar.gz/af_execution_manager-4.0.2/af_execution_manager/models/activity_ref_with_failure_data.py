# coding: utf-8

"""
    AristaFlowREST/ExecutionManager

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 4.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from af_execution_manager.models.activity_reference_data import ActivityReferenceData  # noqa: F401,E501

class ActivityRefWithFailureData(ActivityReferenceData):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dc': 'WritingDataContainer',
        'error_code': 'int',
        'error_msg': 'str',
        'state': 'str'
    }
    if hasattr(ActivityReferenceData, "swagger_types"):
        swagger_types.update(ActivityReferenceData.swagger_types)

    attribute_map = {
        'dc': 'dc',
        'error_code': 'errorCode',
        'error_msg': 'errorMsg',
        'state': 'state'
    }
    if hasattr(ActivityReferenceData, "attribute_map"):
        attribute_map.update(ActivityReferenceData.attribute_map)

    def __init__(self, dc=None, error_code=None, error_msg=None, state=None, *args, **kwargs):  # noqa: E501
        """ActivityRefWithFailureData - a model defined in Swagger"""  # noqa: E501
        self._dc = None
        self._error_code = None
        self._error_msg = None
        self._state = None
        if not(hasattr(self, "discriminator")) or not(self.discriminator):
            self.discriminator = None
        if dc is not None:
            self.dc = dc
        self.error_code = error_code
        if error_msg is not None:
            self.error_msg = error_msg
        if state is not None:
            self.state = state
        ActivityReferenceData.__init__(self, *args, **kwargs)

    @property
    def dc(self):
        """Gets the dc of this ActivityRefWithFailureData.  # noqa: E501


        :return: The dc of this ActivityRefWithFailureData.  # noqa: E501
        :rtype: WritingDataContainer
        """
        return self._dc

    @dc.setter
    def dc(self, dc):
        """Sets the dc of this ActivityRefWithFailureData.


        :param dc: The dc of this ActivityRefWithFailureData.  # noqa: E501
        :type: WritingDataContainer
        """

        self._dc = dc

    @property
    def error_code(self):
        """Gets the error_code of this ActivityRefWithFailureData.  # noqa: E501


        :return: The error_code of this ActivityRefWithFailureData.  # noqa: E501
        :rtype: int
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this ActivityRefWithFailureData.


        :param error_code: The error_code of this ActivityRefWithFailureData.  # noqa: E501
        :type: int
        """
        if error_code is None:
            raise ValueError("Invalid value for `error_code`, must not be `None`")  # noqa: E501

        self._error_code = error_code

    @property
    def error_msg(self):
        """Gets the error_msg of this ActivityRefWithFailureData.  # noqa: E501


        :return: The error_msg of this ActivityRefWithFailureData.  # noqa: E501
        :rtype: str
        """
        return self._error_msg

    @error_msg.setter
    def error_msg(self, error_msg):
        """Sets the error_msg of this ActivityRefWithFailureData.


        :param error_msg: The error_msg of this ActivityRefWithFailureData.  # noqa: E501
        :type: str
        """

        self._error_msg = error_msg

    @property
    def state(self):
        """Gets the state of this ActivityRefWithFailureData.  # noqa: E501


        :return: The state of this ActivityRefWithFailureData.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ActivityRefWithFailureData.


        :param state: The state of this ActivityRefWithFailureData.  # noqa: E501
        :type: str
        """

        self._state = state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ActivityRefWithFailureData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ActivityRefWithFailureData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
