# coding: utf-8

"""
    AristaFlowREST/ExecutionManager

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 4.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from af_execution_manager.models.data_container import DataContainer  # noqa: F401,E501

class ActivityDataContainer(DataContainer):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'read_only': 'bool',
        'instance_id': 'str',
        'node_id': 'int',
        'node_iteration': 'int'
    }
    if hasattr(DataContainer, "swagger_types"):
        swagger_types.update(DataContainer.swagger_types)

    attribute_map = {
        'read_only': 'readOnly',
        'instance_id': 'instanceId',
        'node_id': 'nodeId',
        'node_iteration': 'nodeIteration'
    }
    if hasattr(DataContainer, "attribute_map"):
        attribute_map.update(DataContainer.attribute_map)

    discriminator_value_class_map = {
          'WritingDataContainer': 'WritingDataContainer',
'ReadingDataContainer': 'ReadingDataContainer'    }

    def __init__(self, read_only=None, instance_id=None, node_id=None, node_iteration=None, *args, **kwargs):  # noqa: E501
        """ActivityDataContainer - a model defined in Swagger"""  # noqa: E501
        self._read_only = None
        self._instance_id = None
        self._node_id = None
        self._node_iteration = None
        if not(hasattr(self, "discriminator")) or not(self.discriminator):
            self.discriminator = 'sub_class'
        self.read_only = read_only
        self.instance_id = instance_id
        self.node_id = node_id
        self.node_iteration = node_iteration
        DataContainer.__init__(self, *args, **kwargs)

    @property
    def read_only(self):
        """Gets the read_only of this ActivityDataContainer.  # noqa: E501


        :return: The read_only of this ActivityDataContainer.  # noqa: E501
        :rtype: bool
        """
        return self._read_only

    @read_only.setter
    def read_only(self, read_only):
        """Sets the read_only of this ActivityDataContainer.


        :param read_only: The read_only of this ActivityDataContainer.  # noqa: E501
        :type: bool
        """
        if read_only is None:
            raise ValueError("Invalid value for `read_only`, must not be `None`")  # noqa: E501

        self._read_only = read_only

    @property
    def instance_id(self):
        """Gets the instance_id of this ActivityDataContainer.  # noqa: E501


        :return: The instance_id of this ActivityDataContainer.  # noqa: E501
        :rtype: str
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id):
        """Sets the instance_id of this ActivityDataContainer.


        :param instance_id: The instance_id of this ActivityDataContainer.  # noqa: E501
        :type: str
        """
        if instance_id is None:
            raise ValueError("Invalid value for `instance_id`, must not be `None`")  # noqa: E501

        self._instance_id = instance_id

    @property
    def node_id(self):
        """Gets the node_id of this ActivityDataContainer.  # noqa: E501


        :return: The node_id of this ActivityDataContainer.  # noqa: E501
        :rtype: int
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this ActivityDataContainer.


        :param node_id: The node_id of this ActivityDataContainer.  # noqa: E501
        :type: int
        """
        if node_id is None:
            raise ValueError("Invalid value for `node_id`, must not be `None`")  # noqa: E501

        self._node_id = node_id

    @property
    def node_iteration(self):
        """Gets the node_iteration of this ActivityDataContainer.  # noqa: E501


        :return: The node_iteration of this ActivityDataContainer.  # noqa: E501
        :rtype: int
        """
        return self._node_iteration

    @node_iteration.setter
    def node_iteration(self, node_iteration):
        """Sets the node_iteration of this ActivityDataContainer.


        :param node_iteration: The node_iteration of this ActivityDataContainer.  # noqa: E501
        :type: int
        """
        if node_iteration is None:
            raise ValueError("Invalid value for `node_iteration`, must not be `None`")  # noqa: E501

        self._node_iteration = node_iteration

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_value = data[self.attribute_map[self.discriminator]]
        return discriminator_value if not(self.__class__.__name__ == discriminator_value) else None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ActivityDataContainer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ActivityDataContainer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
