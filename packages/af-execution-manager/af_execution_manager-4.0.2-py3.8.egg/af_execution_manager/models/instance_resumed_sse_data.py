# coding: utf-8

"""
    AristaFlowREST/ExecutionManager

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 4.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from af_execution_manager.models.instance_state_data import InstanceStateData  # noqa: F401,E501

class InstanceResumedSseData(InstanceStateData):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'new_listener': 'list[str]',
        'sse_conn': 'str'
    }
    if hasattr(InstanceStateData, "swagger_types"):
        swagger_types.update(InstanceStateData.swagger_types)

    attribute_map = {
        'new_listener': 'newListener',
        'sse_conn': 'sseConn'
    }
    if hasattr(InstanceStateData, "attribute_map"):
        attribute_map.update(InstanceStateData.attribute_map)

    def __init__(self, new_listener=None, sse_conn=None, *args, **kwargs):  # noqa: E501
        """InstanceResumedSseData - a model defined in Swagger"""  # noqa: E501
        self._new_listener = None
        self._sse_conn = None
        if not(hasattr(self, "discriminator")) or not(self.discriminator):
            self.discriminator = None
        if new_listener is not None:
            self.new_listener = new_listener
        if sse_conn is not None:
            self.sse_conn = sse_conn
        InstanceStateData.__init__(self, *args, **kwargs)

    @property
    def new_listener(self):
        """Gets the new_listener of this InstanceResumedSseData.  # noqa: E501


        :return: The new_listener of this InstanceResumedSseData.  # noqa: E501
        :rtype: list[str]
        """
        return self._new_listener

    @new_listener.setter
    def new_listener(self, new_listener):
        """Sets the new_listener of this InstanceResumedSseData.


        :param new_listener: The new_listener of this InstanceResumedSseData.  # noqa: E501
        :type: list[str]
        """

        self._new_listener = new_listener

    @property
    def sse_conn(self):
        """Gets the sse_conn of this InstanceResumedSseData.  # noqa: E501


        :return: The sse_conn of this InstanceResumedSseData.  # noqa: E501
        :rtype: str
        """
        return self._sse_conn

    @sse_conn.setter
    def sse_conn(self, sse_conn):
        """Sets the sse_conn of this InstanceResumedSseData.


        :param sse_conn: The sse_conn of this InstanceResumedSseData.  # noqa: E501
        :type: str
        """

        self._sse_conn = sse_conn

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InstanceResumedSseData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InstanceResumedSseData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
