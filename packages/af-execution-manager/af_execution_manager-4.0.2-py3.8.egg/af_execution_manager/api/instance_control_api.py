# coding: utf-8

"""
    AristaFlowREST/ExecutionManager

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 4.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from af_execution_manager.api_client import ApiClient


class InstanceControlApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def check_for_and_fix_inconsistencies(self, inst_id, **kwargs):  # noqa: E501
        """check_for_and_fix_inconsistencies  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.check_for_and_fix_inconsistencies(inst_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str inst_id: (required)
        :param bool consider_running:
        :return: ConsistencyCheckResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.check_for_and_fix_inconsistencies_with_http_info(inst_id, **kwargs)  # noqa: E501
        else:
            (data) = self.check_for_and_fix_inconsistencies_with_http_info(inst_id, **kwargs)  # noqa: E501
            return data

    def check_for_and_fix_inconsistencies_with_http_info(self, inst_id, **kwargs):  # noqa: E501
        """check_for_and_fix_inconsistencies  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.check_for_and_fix_inconsistencies_with_http_info(inst_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str inst_id: (required)
        :param bool consider_running:
        :return: ConsistencyCheckResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['inst_id', 'consider_running']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method check_for_and_fix_inconsistencies" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'inst_id' is set
        if ('inst_id' not in params or
                params['inst_id'] is None):
            raise ValueError("Missing the required parameter `inst_id` when calling `check_for_and_fix_inconsistencies`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'inst_id' in params:
            path_params['instId'] = params['inst_id']  # noqa: E501

        query_params = []
        if 'consider_running' in params:
            query_params.append(('considerRunning', params['consider_running']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/InstanceControlRest/consistency-check/{instId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConsistencyCheckResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_and_start_instance(self, templ_id, **kwargs):  # noqa: E501
        """create_and_start_instance  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_and_start_instance(templ_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str templ_id: (required)
        :param InstanceCreationData body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_and_start_instance_with_http_info(templ_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_and_start_instance_with_http_info(templ_id, **kwargs)  # noqa: E501
            return data

    def create_and_start_instance_with_http_info(self, templ_id, **kwargs):  # noqa: E501
        """create_and_start_instance  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_and_start_instance_with_http_info(templ_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str templ_id: (required)
        :param InstanceCreationData body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['templ_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_and_start_instance" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'templ_id' is set
        if ('templ_id' not in params or
                params['templ_id'] is None):
            raise ValueError("Missing the required parameter `templ_id` when calling `create_and_start_instance`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'templ_id' in params:
            path_params['templId'] = params['templ_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/InstanceControlRest/instance-start/simple/{templId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_and_start_instance_callback(self, body, templ_id, **kwargs):  # noqa: E501
        """create_and_start_instance_callback  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_and_start_instance_callback(body, templ_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InstanceCreationRestData body: (required)
        :param str templ_id: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_and_start_instance_callback_with_http_info(body, templ_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_and_start_instance_callback_with_http_info(body, templ_id, **kwargs)  # noqa: E501
            return data

    def create_and_start_instance_callback_with_http_info(self, body, templ_id, **kwargs):  # noqa: E501
        """create_and_start_instance_callback  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_and_start_instance_callback_with_http_info(body, templ_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InstanceCreationRestData body: (required)
        :param str templ_id: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'templ_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_and_start_instance_callback" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_and_start_instance_callback`")  # noqa: E501
        # verify the required parameter 'templ_id' is set
        if ('templ_id' not in params or
                params['templ_id'] is None):
            raise ValueError("Missing the required parameter `templ_id` when calling `create_and_start_instance_callback`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'templ_id' in params:
            path_params['templId'] = params['templ_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/InstanceControlRest/instance-start/callback/{templId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_and_start_instance_sse(self, body, templ_id, **kwargs):  # noqa: E501
        """create_and_start_instance_sse  # noqa: E501

        You have to be registered to receive events via operation /sse. The events sent via SSE are JSON encoded ActivityStateNotification (or subclasses). Event names will be 'instance-finished', 'instance-suspended', 'instance-resumed', 'instance-failed', 'autostart-pending'. This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_and_start_instance_sse(body, templ_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InstanceCreationSseData body: (required)
        :param str templ_id: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_and_start_instance_sse_with_http_info(body, templ_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_and_start_instance_sse_with_http_info(body, templ_id, **kwargs)  # noqa: E501
            return data

    def create_and_start_instance_sse_with_http_info(self, body, templ_id, **kwargs):  # noqa: E501
        """create_and_start_instance_sse  # noqa: E501

        You have to be registered to receive events via operation /sse. The events sent via SSE are JSON encoded ActivityStateNotification (or subclasses). Event names will be 'instance-finished', 'instance-suspended', 'instance-resumed', 'instance-failed', 'autostart-pending'. This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_and_start_instance_sse_with_http_info(body, templ_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InstanceCreationSseData body: (required)
        :param str templ_id: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'templ_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_and_start_instance_sse" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_and_start_instance_sse`")  # noqa: E501
        # verify the required parameter 'templ_id' is set
        if ('templ_id' not in params or
                params['templ_id'] is None):
            raise ValueError("Missing the required parameter `templ_id` when calling `create_and_start_instance_sse`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'templ_id' in params:
            path_params['templId'] = params['templ_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/InstanceControlRest/instance-start/sse/{templId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_instance_data_container(self, templ_id, **kwargs):  # noqa: E501
        """create_instance_data_container  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_instance_data_container(templ_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str templ_id: (required)
        :return: DataContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_instance_data_container_with_http_info(templ_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_instance_data_container_with_http_info(templ_id, **kwargs)  # noqa: E501
            return data

    def create_instance_data_container_with_http_info(self, templ_id, **kwargs):  # noqa: E501
        """create_instance_data_container  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_instance_data_container_with_http_info(templ_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str templ_id: (required)
        :return: DataContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['templ_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_instance_data_container" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'templ_id' is set
        if ('templ_id' not in params or
                params['templ_id'] is None):
            raise ValueError("Missing the required parameter `templ_id` when calling `create_instance_data_container`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'templ_id' in params:
            path_params['templId'] = params['templ_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/InstanceControlRest/instance-data-container/{templId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DataContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_instantiable_templ_refs(self, **kwargs):  # noqa: E501
        """get_instantiable_templ_refs  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_instantiable_templ_refs(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool incl_outdated:
        :param int count:
        :param int alive_time:
        :return: TemplRefInitialRemoteIteratorData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_instantiable_templ_refs_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_instantiable_templ_refs_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_instantiable_templ_refs_with_http_info(self, **kwargs):  # noqa: E501
        """get_instantiable_templ_refs  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_instantiable_templ_refs_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool incl_outdated:
        :param int count:
        :param int alive_time:
        :return: TemplRefInitialRemoteIteratorData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['incl_outdated', 'count', 'alive_time']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_instantiable_templ_refs" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'incl_outdated' in params:
            query_params.append(('inclOutdated', params['incl_outdated']))  # noqa: E501
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501
        if 'alive_time' in params:
            query_params.append(('aliveTime', params['alive_time']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/InstanceControlRest/TemplateRefIterator/instantiable-template', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TemplRefInitialRemoteIteratorData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_instantiable_templates(self, **kwargs):  # noqa: E501
        """get_instantiable_templates  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_instantiable_templates(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool incl_outdated:
        :param int count:
        :param int alive_time:
        :return: TemplIdInitialRemoteIteratorData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_instantiable_templates_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_instantiable_templates_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_instantiable_templates_with_http_info(self, **kwargs):  # noqa: E501
        """get_instantiable_templates  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_instantiable_templates_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool incl_outdated:
        :param int count:
        :param int alive_time:
        :return: TemplIdInitialRemoteIteratorData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['incl_outdated', 'count', 'alive_time']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_instantiable_templates" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'incl_outdated' in params:
            query_params.append(('inclOutdated', params['incl_outdated']))  # noqa: E501
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501
        if 'alive_time' in params:
            query_params.append(('aliveTime', params['alive_time']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/InstanceControlRest/InstTemplIterator/instantiable-template', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TemplIdInitialRemoteIteratorData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_public_data_context(self, inst_id, **kwargs):  # noqa: E501
        """get_public_data_context  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_public_data_context(inst_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str inst_id: (required)
        :return: InputDataContext
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_public_data_context_with_http_info(inst_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_public_data_context_with_http_info(inst_id, **kwargs)  # noqa: E501
            return data

    def get_public_data_context_with_http_info(self, inst_id, **kwargs):  # noqa: E501
        """get_public_data_context  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_public_data_context_with_http_info(inst_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str inst_id: (required)
        :return: InputDataContext
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['inst_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_public_data_context" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'inst_id' is set
        if ('inst_id' not in params or
                params['inst_id'] is None):
            raise ValueError("Missing the required parameter `inst_id` when calling `get_public_data_context`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'inst_id' in params:
            path_params['instId'] = params['inst_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/InstanceControlRest/public-data-context/{instId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InputDataContext',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_templ_refs(self, body, **kwargs):  # noqa: E501
        """get_templ_refs  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_templ_refs(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] body: (required)
        :param int count:
        :param int alive_time:
        :return: TemplRefInitialRemoteIteratorData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_templ_refs_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.get_templ_refs_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def get_templ_refs_with_http_info(self, body, **kwargs):  # noqa: E501
        """get_templ_refs  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_templ_refs_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] body: (required)
        :param int count:
        :param int alive_time:
        :return: TemplRefInitialRemoteIteratorData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'count', 'alive_time']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_templ_refs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `get_templ_refs`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501
        if 'alive_time' in params:
            query_params.append(('aliveTime', params['alive_time']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/InstanceControlRest/TemplateRefIterator/template-reference', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TemplRefInitialRemoteIteratorData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resume_instance(self, inst_id, **kwargs):  # noqa: E501
        """resume_instance  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.resume_instance(inst_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str inst_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.resume_instance_with_http_info(inst_id, **kwargs)  # noqa: E501
        else:
            (data) = self.resume_instance_with_http_info(inst_id, **kwargs)  # noqa: E501
            return data

    def resume_instance_with_http_info(self, inst_id, **kwargs):  # noqa: E501
        """resume_instance  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.resume_instance_with_http_info(inst_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str inst_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['inst_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resume_instance" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'inst_id' is set
        if ('inst_id' not in params or
                params['inst_id'] is None):
            raise ValueError("Missing the required parameter `inst_id` when calling `resume_instance`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'inst_id' in params:
            path_params['instId'] = params['inst_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/InstanceControlRest/continuation/simple/{instId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resume_instance_callback(self, body, inst_id, **kwargs):  # noqa: E501
        """resume_instance_callback  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.resume_instance_callback(body, inst_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body: (required)
        :param str inst_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.resume_instance_callback_with_http_info(body, inst_id, **kwargs)  # noqa: E501
        else:
            (data) = self.resume_instance_callback_with_http_info(body, inst_id, **kwargs)  # noqa: E501
            return data

    def resume_instance_callback_with_http_info(self, body, inst_id, **kwargs):  # noqa: E501
        """resume_instance_callback  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.resume_instance_callback_with_http_info(body, inst_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body: (required)
        :param str inst_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'inst_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resume_instance_callback" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `resume_instance_callback`")  # noqa: E501
        # verify the required parameter 'inst_id' is set
        if ('inst_id' not in params or
                params['inst_id'] is None):
            raise ValueError("Missing the required parameter `inst_id` when calling `resume_instance_callback`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'inst_id' in params:
            path_params['instId'] = params['inst_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/InstanceControlRest/continuation/callback/{instId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resume_instance_sse(self, body, inst_id, **kwargs):  # noqa: E501
        """resume_instance_sse  # noqa: E501

        You have to be registered to receive events via operation /sse. The events sent via SSE are JSON encoded ActivityStateNotification (or subclasses). Event names will be 'instance-finished', 'instance-suspended', 'instance-resumed', 'instance-failed', 'autostart-pending'. This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.resume_instance_sse(body, inst_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body: (required)
        :param str inst_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.resume_instance_sse_with_http_info(body, inst_id, **kwargs)  # noqa: E501
        else:
            (data) = self.resume_instance_sse_with_http_info(body, inst_id, **kwargs)  # noqa: E501
            return data

    def resume_instance_sse_with_http_info(self, body, inst_id, **kwargs):  # noqa: E501
        """resume_instance_sse  # noqa: E501

        You have to be registered to receive events via operation /sse. The events sent via SSE are JSON encoded ActivityStateNotification (or subclasses). Event names will be 'instance-finished', 'instance-suspended', 'instance-resumed', 'instance-failed', 'autostart-pending'. This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.resume_instance_sse_with_http_info(body, inst_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body: (required)
        :param str inst_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'inst_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resume_instance_sse" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `resume_instance_sse`")  # noqa: E501
        # verify the required parameter 'inst_id' is set
        if ('inst_id' not in params or
                params['inst_id'] is None):
            raise ValueError("Missing the required parameter `inst_id` when calling `resume_instance_sse`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'inst_id' in params:
            path_params['instId'] = params['inst_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/InstanceControlRest/continuation/sse/{instId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def stop_and_abort_instance(self, inst_id, error_code, **kwargs):  # noqa: E501
        """stop_and_abort_instance  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.stop_and_abort_instance(inst_id, error_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str inst_id: (required)
        :param int error_code: (required)
        :param str error_msg:
        :param str state:
        :param bool propagate_to_running_acts:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.stop_and_abort_instance_with_http_info(inst_id, error_code, **kwargs)  # noqa: E501
        else:
            (data) = self.stop_and_abort_instance_with_http_info(inst_id, error_code, **kwargs)  # noqa: E501
            return data

    def stop_and_abort_instance_with_http_info(self, inst_id, error_code, **kwargs):  # noqa: E501
        """stop_and_abort_instance  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.stop_and_abort_instance_with_http_info(inst_id, error_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str inst_id: (required)
        :param int error_code: (required)
        :param str error_msg:
        :param str state:
        :param bool propagate_to_running_acts:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['inst_id', 'error_code', 'error_msg', 'state', 'propagate_to_running_acts']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stop_and_abort_instance" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'inst_id' is set
        if ('inst_id' not in params or
                params['inst_id'] is None):
            raise ValueError("Missing the required parameter `inst_id` when calling `stop_and_abort_instance`")  # noqa: E501
        # verify the required parameter 'error_code' is set
        if ('error_code' not in params or
                params['error_code'] is None):
            raise ValueError("Missing the required parameter `error_code` when calling `stop_and_abort_instance`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'inst_id' in params:
            path_params['instId'] = params['inst_id']  # noqa: E501

        query_params = []
        if 'error_code' in params:
            query_params.append(('errorCode', params['error_code']))  # noqa: E501
        if 'error_msg' in params:
            query_params.append(('errorMsg', params['error_msg']))  # noqa: E501
        if 'state' in params:
            query_params.append(('state', params['state']))  # noqa: E501
        if 'propagate_to_running_acts' in params:
            query_params.append(('propagateToRunningActs', params['propagate_to_running_acts']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/InstanceControlRest/abortion/{instId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def suspend_instance(self, inst_id, **kwargs):  # noqa: E501
        """suspend_instance  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.suspend_instance(inst_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str inst_id: (required)
        :param bool propagate_to_running_acts:
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.suspend_instance_with_http_info(inst_id, **kwargs)  # noqa: E501
        else:
            (data) = self.suspend_instance_with_http_info(inst_id, **kwargs)  # noqa: E501
            return data

    def suspend_instance_with_http_info(self, inst_id, **kwargs):  # noqa: E501
        """suspend_instance  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.suspend_instance_with_http_info(inst_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str inst_id: (required)
        :param bool propagate_to_running_acts:
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['inst_id', 'propagate_to_running_acts']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method suspend_instance" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'inst_id' is set
        if ('inst_id' not in params or
                params['inst_id'] is None):
            raise ValueError("Missing the required parameter `inst_id` when calling `suspend_instance`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'inst_id' in params:
            path_params['instId'] = params['inst_id']  # noqa: E501

        query_params = []
        if 'propagate_to_running_acts' in params:
            query_params.append(('propagateToRunningActs', params['propagate_to_running_acts']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/InstanceControlRest/suspension/{instId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
