# coding: utf-8

"""
    AristaFlowREST/ExecutionManager

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 4.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from af_execution_manager.models.instance_state_data import InstanceStateData  # noqa: F401,E501

class AutoStartPendingData(InstanceStateData):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'activity': 'EbpInstanceReference',
        'term_time': 'int',
        'agent': 'QualifiedAgent',
        'rt_mgr': 'list[str]',
        'rtm_resolved': 'bool'
    }
    if hasattr(InstanceStateData, "swagger_types"):
        swagger_types.update(InstanceStateData.swagger_types)

    attribute_map = {
        'activity': 'activity',
        'term_time': 'termTime',
        'agent': 'agent',
        'rt_mgr': 'rtMgr',
        'rtm_resolved': 'rtmResolved'
    }
    if hasattr(InstanceStateData, "attribute_map"):
        attribute_map.update(InstanceStateData.attribute_map)

    def __init__(self, activity=None, term_time=None, agent=None, rt_mgr=None, rtm_resolved=None, *args, **kwargs):  # noqa: E501
        """AutoStartPendingData - a model defined in Swagger"""  # noqa: E501
        self._activity = None
        self._term_time = None
        self._agent = None
        self._rt_mgr = None
        self._rtm_resolved = None
        if not(hasattr(self, "discriminator")) or not(self.discriminator):
            self.discriminator = None
        self.activity = activity
        self.term_time = term_time
        self.agent = agent
        if rt_mgr is not None:
            self.rt_mgr = rt_mgr
        self.rtm_resolved = rtm_resolved
        InstanceStateData.__init__(self, *args, **kwargs)

    @property
    def activity(self):
        """Gets the activity of this AutoStartPendingData.  # noqa: E501


        :return: The activity of this AutoStartPendingData.  # noqa: E501
        :rtype: EbpInstanceReference
        """
        return self._activity

    @activity.setter
    def activity(self, activity):
        """Sets the activity of this AutoStartPendingData.


        :param activity: The activity of this AutoStartPendingData.  # noqa: E501
        :type: EbpInstanceReference
        """
        if activity is None:
            raise ValueError("Invalid value for `activity`, must not be `None`")  # noqa: E501

        self._activity = activity

    @property
    def term_time(self):
        """Gets the term_time of this AutoStartPendingData.  # noqa: E501


        :return: The term_time of this AutoStartPendingData.  # noqa: E501
        :rtype: int
        """
        return self._term_time

    @term_time.setter
    def term_time(self, term_time):
        """Sets the term_time of this AutoStartPendingData.


        :param term_time: The term_time of this AutoStartPendingData.  # noqa: E501
        :type: int
        """
        if term_time is None:
            raise ValueError("Invalid value for `term_time`, must not be `None`")  # noqa: E501

        self._term_time = term_time

    @property
    def agent(self):
        """Gets the agent of this AutoStartPendingData.  # noqa: E501


        :return: The agent of this AutoStartPendingData.  # noqa: E501
        :rtype: QualifiedAgent
        """
        return self._agent

    @agent.setter
    def agent(self, agent):
        """Sets the agent of this AutoStartPendingData.


        :param agent: The agent of this AutoStartPendingData.  # noqa: E501
        :type: QualifiedAgent
        """
        if agent is None:
            raise ValueError("Invalid value for `agent`, must not be `None`")  # noqa: E501

        self._agent = agent

    @property
    def rt_mgr(self):
        """Gets the rt_mgr of this AutoStartPendingData.  # noqa: E501


        :return: The rt_mgr of this AutoStartPendingData.  # noqa: E501
        :rtype: list[str]
        """
        return self._rt_mgr

    @rt_mgr.setter
    def rt_mgr(self, rt_mgr):
        """Sets the rt_mgr of this AutoStartPendingData.


        :param rt_mgr: The rt_mgr of this AutoStartPendingData.  # noqa: E501
        :type: list[str]
        """

        self._rt_mgr = rt_mgr

    @property
    def rtm_resolved(self):
        """Gets the rtm_resolved of this AutoStartPendingData.  # noqa: E501


        :return: The rtm_resolved of this AutoStartPendingData.  # noqa: E501
        :rtype: bool
        """
        return self._rtm_resolved

    @rtm_resolved.setter
    def rtm_resolved(self, rtm_resolved):
        """Sets the rtm_resolved of this AutoStartPendingData.


        :param rtm_resolved: The rtm_resolved of this AutoStartPendingData.  # noqa: E501
        :type: bool
        """
        if rtm_resolved is None:
            raise ValueError("Invalid value for `rtm_resolved`, must not be `None`")  # noqa: E501

        self._rtm_resolved = rtm_resolved

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AutoStartPendingData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AutoStartPendingData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
