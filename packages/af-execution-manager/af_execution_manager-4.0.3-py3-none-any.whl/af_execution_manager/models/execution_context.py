# coding: utf-8

"""
    AristaFlowREST/ExecutionManager

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 4.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ExecutionContext(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'agent': 'QualifiedAgent',
        'ebp_instance': 'ExecutableBusinessProcessInstance',
        'data_container': 'ActivityDataContainer',
        'exec_mode': 'str',
        'resumed': 'bool',
        'current_enq': 'Enquiry',
        'replied_enq': 'Enquiry',
        'user_attributes': 'dict(str, str)'
    }

    attribute_map = {
        'agent': 'agent',
        'ebp_instance': 'ebpInstance',
        'data_container': 'dataContainer',
        'exec_mode': 'execMode',
        'resumed': 'resumed',
        'current_enq': 'currentEnq',
        'replied_enq': 'repliedEnq',
        'user_attributes': 'userAttributes'
    }

    def __init__(self, agent=None, ebp_instance=None, data_container=None, exec_mode=None, resumed=None, current_enq=None, replied_enq=None, user_attributes=None):  # noqa: E501
        """ExecutionContext - a model defined in Swagger"""  # noqa: E501
        self._agent = None
        self._ebp_instance = None
        self._data_container = None
        self._exec_mode = None
        self._resumed = None
        self._current_enq = None
        self._replied_enq = None
        self._user_attributes = None
        if not(hasattr(self, "discriminator")) or not(self.discriminator):
            self.discriminator = None
        self.agent = agent
        self.ebp_instance = ebp_instance
        self.data_container = data_container
        if exec_mode is not None:
            self.exec_mode = exec_mode
        self.resumed = resumed
        if current_enq is not None:
            self.current_enq = current_enq
        if replied_enq is not None:
            self.replied_enq = replied_enq
        if user_attributes is not None:
            self.user_attributes = user_attributes

    @property
    def agent(self):
        """Gets the agent of this ExecutionContext.  # noqa: E501


        :return: The agent of this ExecutionContext.  # noqa: E501
        :rtype: QualifiedAgent
        """
        return self._agent

    @agent.setter
    def agent(self, agent):
        """Sets the agent of this ExecutionContext.


        :param agent: The agent of this ExecutionContext.  # noqa: E501
        :type: QualifiedAgent
        """
        if agent is None:
            raise ValueError("Invalid value for `agent`, must not be `None`")  # noqa: E501

        self._agent = agent

    @property
    def ebp_instance(self):
        """Gets the ebp_instance of this ExecutionContext.  # noqa: E501


        :return: The ebp_instance of this ExecutionContext.  # noqa: E501
        :rtype: ExecutableBusinessProcessInstance
        """
        return self._ebp_instance

    @ebp_instance.setter
    def ebp_instance(self, ebp_instance):
        """Sets the ebp_instance of this ExecutionContext.


        :param ebp_instance: The ebp_instance of this ExecutionContext.  # noqa: E501
        :type: ExecutableBusinessProcessInstance
        """
        if ebp_instance is None:
            raise ValueError("Invalid value for `ebp_instance`, must not be `None`")  # noqa: E501

        self._ebp_instance = ebp_instance

    @property
    def data_container(self):
        """Gets the data_container of this ExecutionContext.  # noqa: E501


        :return: The data_container of this ExecutionContext.  # noqa: E501
        :rtype: ActivityDataContainer
        """
        return self._data_container

    @data_container.setter
    def data_container(self, data_container):
        """Sets the data_container of this ExecutionContext.


        :param data_container: The data_container of this ExecutionContext.  # noqa: E501
        :type: ActivityDataContainer
        """
        if data_container is None:
            raise ValueError("Invalid value for `data_container`, must not be `None`")  # noqa: E501

        self._data_container = data_container

    @property
    def exec_mode(self):
        """Gets the exec_mode of this ExecutionContext.  # noqa: E501


        :return: The exec_mode of this ExecutionContext.  # noqa: E501
        :rtype: str
        """
        return self._exec_mode

    @exec_mode.setter
    def exec_mode(self, exec_mode):
        """Sets the exec_mode of this ExecutionContext.


        :param exec_mode: The exec_mode of this ExecutionContext.  # noqa: E501
        :type: str
        """
        allowed_values = ["SUBSTITUTED_TEST", "COMPONENT_TEST", "PRODUCTION", "VIEW_ONLY"]  # noqa: E501
        if exec_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `exec_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(exec_mode, allowed_values)
            )

        self._exec_mode = exec_mode

    @property
    def resumed(self):
        """Gets the resumed of this ExecutionContext.  # noqa: E501


        :return: The resumed of this ExecutionContext.  # noqa: E501
        :rtype: bool
        """
        return self._resumed

    @resumed.setter
    def resumed(self, resumed):
        """Sets the resumed of this ExecutionContext.


        :param resumed: The resumed of this ExecutionContext.  # noqa: E501
        :type: bool
        """
        if resumed is None:
            raise ValueError("Invalid value for `resumed`, must not be `None`")  # noqa: E501

        self._resumed = resumed

    @property
    def current_enq(self):
        """Gets the current_enq of this ExecutionContext.  # noqa: E501


        :return: The current_enq of this ExecutionContext.  # noqa: E501
        :rtype: Enquiry
        """
        return self._current_enq

    @current_enq.setter
    def current_enq(self, current_enq):
        """Sets the current_enq of this ExecutionContext.


        :param current_enq: The current_enq of this ExecutionContext.  # noqa: E501
        :type: Enquiry
        """

        self._current_enq = current_enq

    @property
    def replied_enq(self):
        """Gets the replied_enq of this ExecutionContext.  # noqa: E501


        :return: The replied_enq of this ExecutionContext.  # noqa: E501
        :rtype: Enquiry
        """
        return self._replied_enq

    @replied_enq.setter
    def replied_enq(self, replied_enq):
        """Sets the replied_enq of this ExecutionContext.


        :param replied_enq: The replied_enq of this ExecutionContext.  # noqa: E501
        :type: Enquiry
        """

        self._replied_enq = replied_enq

    @property
    def user_attributes(self):
        """Gets the user_attributes of this ExecutionContext.  # noqa: E501


        :return: The user_attributes of this ExecutionContext.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._user_attributes

    @user_attributes.setter
    def user_attributes(self, user_attributes):
        """Sets the user_attributes of this ExecutionContext.


        :param user_attributes: The user_attributes of this ExecutionContext.  # noqa: E501
        :type: dict(str, str)
        """

        self._user_attributes = user_attributes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExecutionContext, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExecutionContext):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
