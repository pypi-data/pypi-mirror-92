# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _py_unsio
else:
    import _py_unsio

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



def getVersion():
    return _py_unsio.getVersion()
EMPTY = _py_unsio.EMPTY
Time = _py_unsio.Time
Redshift = _py_unsio.Redshift
Pos = _py_unsio.Pos
Vel = _py_unsio.Vel
Mass = _py_unsio.Mass
Id = _py_unsio.Id
Rho = _py_unsio.Rho
Hsml = _py_unsio.Hsml
U = _py_unsio.U
Keys = _py_unsio.Keys
Aux = _py_unsio.Aux
Eps = _py_unsio.Eps
Pot = _py_unsio.Pot
Acc = _py_unsio.Acc
Age = _py_unsio.Age
Temp = _py_unsio.Temp
Ne = _py_unsio.Ne
Sfr = _py_unsio.Sfr
Nh = _py_unsio.Nh
Metal = _py_unsio.Metal
GasMetal = _py_unsio.GasMetal
StarsMetal = _py_unsio.StarsMetal
Zs = _py_unsio.Zs
ZSMT = _py_unsio.ZSMT
Im = _py_unsio.Im
Cm = _py_unsio.Cm
Czs = _py_unsio.Czs
Czsmt = _py_unsio.Czsmt
Ssl = _py_unsio.Ssl
Header = _py_unsio.Header
Hydro = _py_unsio.Hydro
Nvarh = _py_unsio.Nvarh
Nsel = _py_unsio.Nsel
Nbody = _py_unsio.Nbody
Ngas = _py_unsio.Ngas
Nhalo = _py_unsio.Nhalo
Ndisk = _py_unsio.Ndisk
Nbulge = _py_unsio.Nbulge
Nstars = _py_unsio.Nstars
Nbndry = _py_unsio.Nbndry
Gas = _py_unsio.Gas
Halo = _py_unsio.Halo
Disk = _py_unsio.Disk
Bulge = _py_unsio.Bulge
Stars = _py_unsio.Stars
Bndry = _py_unsio.Bndry
All = _py_unsio.All
GasMPV = _py_unsio.GasMPV
HaloMPV = _py_unsio.HaloMPV
DiskMPV = _py_unsio.DiskMPV
BulgeMPV = _py_unsio.BulgeMPV
StarsMPV = _py_unsio.StarsMPV
BndryMPV = _py_unsio.BndryMPV
Extra = _py_unsio.Extra
class CunsIn(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _py_unsio.CunsIn_swiginit(self, _py_unsio.new_CunsIn(*args))
    __swig_destroy__ = _py_unsio.delete_CunsIn

    def isValid(self):
        return _py_unsio.CunsIn_isValid(self)
    snapshot = property(_py_unsio.CunsIn_snapshot_get, _py_unsio.CunsIn_snapshot_set)
    s_mapCompInt = property(_py_unsio.CunsIn_s_mapCompInt_get, _py_unsio.CunsIn_s_mapCompInt_set)

    @staticmethod
    def initMap():
        return _py_unsio.CunsIn_initMap()

    def nextFrame(self, _bits):
        return _py_unsio.CunsIn_nextFrame(self, _bits)

    def getArrayF(self, *args):
        return _py_unsio.CunsIn_getArrayF(self, *args)

    def getValueF(self, prop):
        return _py_unsio.CunsIn_getValueF(self, prop)

    def getArrayI(self, *args):
        return _py_unsio.CunsIn_getArrayI(self, *args)

    def getValueI(self, prop):
        return _py_unsio.CunsIn_getValueI(self, prop)

    def close(self):
        return _py_unsio.CunsIn_close(self)

    def getFileName(self):
        return _py_unsio.CunsIn_getFileName(self)

    def getFileStructure(self):
        return _py_unsio.CunsIn_getFileStructure(self)

    def getInterfaceType(self):
        return _py_unsio.CunsIn_getInterfaceType(self)

# Register CunsIn in _py_unsio:
_py_unsio.CunsIn_swigregister(CunsIn)
cvar = _py_unsio.cvar
VERSION = cvar.VERSION

def CunsIn_initMap():
    return _py_unsio.CunsIn_initMap()

class CunsInD(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _py_unsio.CunsInD_swiginit(self, _py_unsio.new_CunsInD(*args))
    __swig_destroy__ = _py_unsio.delete_CunsInD

    def isValid(self):
        return _py_unsio.CunsInD_isValid(self)
    snapshot = property(_py_unsio.CunsInD_snapshot_get, _py_unsio.CunsInD_snapshot_set)
    s_mapCompInt = property(_py_unsio.CunsInD_s_mapCompInt_get, _py_unsio.CunsInD_s_mapCompInt_set)

    @staticmethod
    def initMap():
        return _py_unsio.CunsInD_initMap()

    def nextFrame(self, _bits):
        return _py_unsio.CunsInD_nextFrame(self, _bits)

    def getArrayF(self, *args):
        return _py_unsio.CunsInD_getArrayF(self, *args)

    def getValueF(self, prop):
        return _py_unsio.CunsInD_getValueF(self, prop)

    def getArrayI(self, *args):
        return _py_unsio.CunsInD_getArrayI(self, *args)

    def getValueI(self, prop):
        return _py_unsio.CunsInD_getValueI(self, prop)

    def close(self):
        return _py_unsio.CunsInD_close(self)

    def getFileName(self):
        return _py_unsio.CunsInD_getFileName(self)

    def getFileStructure(self):
        return _py_unsio.CunsInD_getFileStructure(self)

    def getInterfaceType(self):
        return _py_unsio.CunsInD_getInterfaceType(self)

# Register CunsInD in _py_unsio:
_py_unsio.CunsInD_swigregister(CunsInD)

def CunsInD_initMap():
    return _py_unsio.CunsInD_initMap()

class CunsOut(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2, arg3, verb=False):
        _py_unsio.CunsOut_swiginit(self, _py_unsio.new_CunsOut(arg2, arg3, verb))
    __swig_destroy__ = _py_unsio.delete_CunsOut

    def isValid(self):
        return _py_unsio.CunsOut_isValid(self)
    snapshot = property(_py_unsio.CunsOut_snapshot_get, _py_unsio.CunsOut_snapshot_set)
    s_mapStringValues = property(_py_unsio.CunsOut_s_mapStringValues_get, _py_unsio.CunsOut_s_mapStringValues_set)

    def setArrayF_do_not_used(self, *args):
        return _py_unsio.CunsOut_setArrayF_do_not_used(self, *args)

    def setValueF(self, prop, fvalue):
        return _py_unsio.CunsOut_setValueF(self, prop, fvalue)

    def setData(self, prop, size, _addr=False):
        return _py_unsio.CunsOut_setData(self, prop, size, _addr)

    def setArrayI(self, prop, size, _addr=False):
        return _py_unsio.CunsOut_setArrayI(self, prop, size, _addr)

    def setValueI(self, prop, ivalue):
        return _py_unsio.CunsOut_setValueI(self, prop, ivalue)

    def save(self):
        return _py_unsio.CunsOut_save(self)

    def close(self):
        return _py_unsio.CunsOut_close(self)

    @staticmethod
    def initializeStringMap(arg1):
        return _py_unsio.CunsOut_initializeStringMap(arg1)

    def setArrayF(self, *args):
        return _py_unsio.CunsOut_setArrayF(self, *args)

# Register CunsOut in _py_unsio:
_py_unsio.CunsOut_swigregister(CunsOut)

def CunsOut_initializeStringMap(arg1):
    return _py_unsio.CunsOut_initializeStringMap(arg1)

class CunsOutD(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2, arg3, verb=False):
        _py_unsio.CunsOutD_swiginit(self, _py_unsio.new_CunsOutD(arg2, arg3, verb))
    __swig_destroy__ = _py_unsio.delete_CunsOutD

    def isValid(self):
        return _py_unsio.CunsOutD_isValid(self)
    snapshot = property(_py_unsio.CunsOutD_snapshot_get, _py_unsio.CunsOutD_snapshot_set)
    s_mapStringValues = property(_py_unsio.CunsOutD_s_mapStringValues_get, _py_unsio.CunsOutD_s_mapStringValues_set)

    def setArrayF_do_not_used(self, *args):
        return _py_unsio.CunsOutD_setArrayF_do_not_used(self, *args)

    def setValueF(self, prop, fvalue):
        return _py_unsio.CunsOutD_setValueF(self, prop, fvalue)

    def setData(self, prop, size, _addr=False):
        return _py_unsio.CunsOutD_setData(self, prop, size, _addr)

    def setArrayI(self, prop, size, _addr=False):
        return _py_unsio.CunsOutD_setArrayI(self, prop, size, _addr)

    def setValueI(self, prop, ivalue):
        return _py_unsio.CunsOutD_setValueI(self, prop, ivalue)

    def save(self):
        return _py_unsio.CunsOutD_save(self)

    def close(self):
        return _py_unsio.CunsOutD_close(self)

    @staticmethod
    def initializeStringMap(arg1):
        return _py_unsio.CunsOutD_initializeStringMap(arg1)

    def setArrayF(self, *args):
        return _py_unsio.CunsOutD_setArrayF(self, *args)

# Register CunsOutD in _py_unsio:
_py_unsio.CunsOutD_swigregister(CunsOutD)

def CunsOutD_initializeStringMap(arg1):
    return _py_unsio.CunsOutD_initializeStringMap(arg1)



