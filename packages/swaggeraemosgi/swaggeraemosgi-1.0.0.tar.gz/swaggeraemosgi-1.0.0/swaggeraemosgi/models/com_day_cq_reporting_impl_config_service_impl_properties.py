# coding: utf-8

"""
    Adobe Experience Manager OSGI config (AEM) API

    Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API  # noqa: E501

    OpenAPI spec version: 1.0.0-pre.0
    Contact: opensource@shinesolutions.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ComDayCqReportingImplConfigServiceImplProperties(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'repconf_timezone': 'ConfigNodePropertyString',
        'repconf_locale': 'ConfigNodePropertyString',
        'repconf_snapshots': 'ConfigNodePropertyString',
        'repconf_repdir': 'ConfigNodePropertyString',
        'repconf_hourofday': 'ConfigNodePropertyInteger',
        'repconf_minofhour': 'ConfigNodePropertyInteger',
        'repconf_maxrows': 'ConfigNodePropertyInteger',
        'repconf_fakedata': 'ConfigNodePropertyBoolean',
        'repconf_snapshotuser': 'ConfigNodePropertyString',
        'repconf_enforcesnapshotuser': 'ConfigNodePropertyBoolean'
    }

    attribute_map = {
        'repconf_timezone': 'repconf.timezone',
        'repconf_locale': 'repconf.locale',
        'repconf_snapshots': 'repconf.snapshots',
        'repconf_repdir': 'repconf.repdir',
        'repconf_hourofday': 'repconf.hourofday',
        'repconf_minofhour': 'repconf.minofhour',
        'repconf_maxrows': 'repconf.maxrows',
        'repconf_fakedata': 'repconf.fakedata',
        'repconf_snapshotuser': 'repconf.snapshotuser',
        'repconf_enforcesnapshotuser': 'repconf.enforcesnapshotuser'
    }

    def __init__(self, repconf_timezone=None, repconf_locale=None, repconf_snapshots=None, repconf_repdir=None, repconf_hourofday=None, repconf_minofhour=None, repconf_maxrows=None, repconf_fakedata=None, repconf_snapshotuser=None, repconf_enforcesnapshotuser=None):  # noqa: E501
        """ComDayCqReportingImplConfigServiceImplProperties - a model defined in OpenAPI"""  # noqa: E501

        self._repconf_timezone = None
        self._repconf_locale = None
        self._repconf_snapshots = None
        self._repconf_repdir = None
        self._repconf_hourofday = None
        self._repconf_minofhour = None
        self._repconf_maxrows = None
        self._repconf_fakedata = None
        self._repconf_snapshotuser = None
        self._repconf_enforcesnapshotuser = None
        self.discriminator = None

        if repconf_timezone is not None:
            self.repconf_timezone = repconf_timezone
        if repconf_locale is not None:
            self.repconf_locale = repconf_locale
        if repconf_snapshots is not None:
            self.repconf_snapshots = repconf_snapshots
        if repconf_repdir is not None:
            self.repconf_repdir = repconf_repdir
        if repconf_hourofday is not None:
            self.repconf_hourofday = repconf_hourofday
        if repconf_minofhour is not None:
            self.repconf_minofhour = repconf_minofhour
        if repconf_maxrows is not None:
            self.repconf_maxrows = repconf_maxrows
        if repconf_fakedata is not None:
            self.repconf_fakedata = repconf_fakedata
        if repconf_snapshotuser is not None:
            self.repconf_snapshotuser = repconf_snapshotuser
        if repconf_enforcesnapshotuser is not None:
            self.repconf_enforcesnapshotuser = repconf_enforcesnapshotuser

    @property
    def repconf_timezone(self):
        """Gets the repconf_timezone of this ComDayCqReportingImplConfigServiceImplProperties.  # noqa: E501


        :return: The repconf_timezone of this ComDayCqReportingImplConfigServiceImplProperties.  # noqa: E501
        :rtype: ConfigNodePropertyString
        """
        return self._repconf_timezone

    @repconf_timezone.setter
    def repconf_timezone(self, repconf_timezone):
        """Sets the repconf_timezone of this ComDayCqReportingImplConfigServiceImplProperties.


        :param repconf_timezone: The repconf_timezone of this ComDayCqReportingImplConfigServiceImplProperties.  # noqa: E501
        :type: ConfigNodePropertyString
        """

        self._repconf_timezone = repconf_timezone

    @property
    def repconf_locale(self):
        """Gets the repconf_locale of this ComDayCqReportingImplConfigServiceImplProperties.  # noqa: E501


        :return: The repconf_locale of this ComDayCqReportingImplConfigServiceImplProperties.  # noqa: E501
        :rtype: ConfigNodePropertyString
        """
        return self._repconf_locale

    @repconf_locale.setter
    def repconf_locale(self, repconf_locale):
        """Sets the repconf_locale of this ComDayCqReportingImplConfigServiceImplProperties.


        :param repconf_locale: The repconf_locale of this ComDayCqReportingImplConfigServiceImplProperties.  # noqa: E501
        :type: ConfigNodePropertyString
        """

        self._repconf_locale = repconf_locale

    @property
    def repconf_snapshots(self):
        """Gets the repconf_snapshots of this ComDayCqReportingImplConfigServiceImplProperties.  # noqa: E501


        :return: The repconf_snapshots of this ComDayCqReportingImplConfigServiceImplProperties.  # noqa: E501
        :rtype: ConfigNodePropertyString
        """
        return self._repconf_snapshots

    @repconf_snapshots.setter
    def repconf_snapshots(self, repconf_snapshots):
        """Sets the repconf_snapshots of this ComDayCqReportingImplConfigServiceImplProperties.


        :param repconf_snapshots: The repconf_snapshots of this ComDayCqReportingImplConfigServiceImplProperties.  # noqa: E501
        :type: ConfigNodePropertyString
        """

        self._repconf_snapshots = repconf_snapshots

    @property
    def repconf_repdir(self):
        """Gets the repconf_repdir of this ComDayCqReportingImplConfigServiceImplProperties.  # noqa: E501


        :return: The repconf_repdir of this ComDayCqReportingImplConfigServiceImplProperties.  # noqa: E501
        :rtype: ConfigNodePropertyString
        """
        return self._repconf_repdir

    @repconf_repdir.setter
    def repconf_repdir(self, repconf_repdir):
        """Sets the repconf_repdir of this ComDayCqReportingImplConfigServiceImplProperties.


        :param repconf_repdir: The repconf_repdir of this ComDayCqReportingImplConfigServiceImplProperties.  # noqa: E501
        :type: ConfigNodePropertyString
        """

        self._repconf_repdir = repconf_repdir

    @property
    def repconf_hourofday(self):
        """Gets the repconf_hourofday of this ComDayCqReportingImplConfigServiceImplProperties.  # noqa: E501


        :return: The repconf_hourofday of this ComDayCqReportingImplConfigServiceImplProperties.  # noqa: E501
        :rtype: ConfigNodePropertyInteger
        """
        return self._repconf_hourofday

    @repconf_hourofday.setter
    def repconf_hourofday(self, repconf_hourofday):
        """Sets the repconf_hourofday of this ComDayCqReportingImplConfigServiceImplProperties.


        :param repconf_hourofday: The repconf_hourofday of this ComDayCqReportingImplConfigServiceImplProperties.  # noqa: E501
        :type: ConfigNodePropertyInteger
        """

        self._repconf_hourofday = repconf_hourofday

    @property
    def repconf_minofhour(self):
        """Gets the repconf_minofhour of this ComDayCqReportingImplConfigServiceImplProperties.  # noqa: E501


        :return: The repconf_minofhour of this ComDayCqReportingImplConfigServiceImplProperties.  # noqa: E501
        :rtype: ConfigNodePropertyInteger
        """
        return self._repconf_minofhour

    @repconf_minofhour.setter
    def repconf_minofhour(self, repconf_minofhour):
        """Sets the repconf_minofhour of this ComDayCqReportingImplConfigServiceImplProperties.


        :param repconf_minofhour: The repconf_minofhour of this ComDayCqReportingImplConfigServiceImplProperties.  # noqa: E501
        :type: ConfigNodePropertyInteger
        """

        self._repconf_minofhour = repconf_minofhour

    @property
    def repconf_maxrows(self):
        """Gets the repconf_maxrows of this ComDayCqReportingImplConfigServiceImplProperties.  # noqa: E501


        :return: The repconf_maxrows of this ComDayCqReportingImplConfigServiceImplProperties.  # noqa: E501
        :rtype: ConfigNodePropertyInteger
        """
        return self._repconf_maxrows

    @repconf_maxrows.setter
    def repconf_maxrows(self, repconf_maxrows):
        """Sets the repconf_maxrows of this ComDayCqReportingImplConfigServiceImplProperties.


        :param repconf_maxrows: The repconf_maxrows of this ComDayCqReportingImplConfigServiceImplProperties.  # noqa: E501
        :type: ConfigNodePropertyInteger
        """

        self._repconf_maxrows = repconf_maxrows

    @property
    def repconf_fakedata(self):
        """Gets the repconf_fakedata of this ComDayCqReportingImplConfigServiceImplProperties.  # noqa: E501


        :return: The repconf_fakedata of this ComDayCqReportingImplConfigServiceImplProperties.  # noqa: E501
        :rtype: ConfigNodePropertyBoolean
        """
        return self._repconf_fakedata

    @repconf_fakedata.setter
    def repconf_fakedata(self, repconf_fakedata):
        """Sets the repconf_fakedata of this ComDayCqReportingImplConfigServiceImplProperties.


        :param repconf_fakedata: The repconf_fakedata of this ComDayCqReportingImplConfigServiceImplProperties.  # noqa: E501
        :type: ConfigNodePropertyBoolean
        """

        self._repconf_fakedata = repconf_fakedata

    @property
    def repconf_snapshotuser(self):
        """Gets the repconf_snapshotuser of this ComDayCqReportingImplConfigServiceImplProperties.  # noqa: E501


        :return: The repconf_snapshotuser of this ComDayCqReportingImplConfigServiceImplProperties.  # noqa: E501
        :rtype: ConfigNodePropertyString
        """
        return self._repconf_snapshotuser

    @repconf_snapshotuser.setter
    def repconf_snapshotuser(self, repconf_snapshotuser):
        """Sets the repconf_snapshotuser of this ComDayCqReportingImplConfigServiceImplProperties.


        :param repconf_snapshotuser: The repconf_snapshotuser of this ComDayCqReportingImplConfigServiceImplProperties.  # noqa: E501
        :type: ConfigNodePropertyString
        """

        self._repconf_snapshotuser = repconf_snapshotuser

    @property
    def repconf_enforcesnapshotuser(self):
        """Gets the repconf_enforcesnapshotuser of this ComDayCqReportingImplConfigServiceImplProperties.  # noqa: E501


        :return: The repconf_enforcesnapshotuser of this ComDayCqReportingImplConfigServiceImplProperties.  # noqa: E501
        :rtype: ConfigNodePropertyBoolean
        """
        return self._repconf_enforcesnapshotuser

    @repconf_enforcesnapshotuser.setter
    def repconf_enforcesnapshotuser(self, repconf_enforcesnapshotuser):
        """Sets the repconf_enforcesnapshotuser of this ComDayCqReportingImplConfigServiceImplProperties.


        :param repconf_enforcesnapshotuser: The repconf_enforcesnapshotuser of this ComDayCqReportingImplConfigServiceImplProperties.  # noqa: E501
        :type: ConfigNodePropertyBoolean
        """

        self._repconf_enforcesnapshotuser = repconf_enforcesnapshotuser

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComDayCqReportingImplConfigServiceImplProperties):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
