# coding: utf-8

"""
    Adobe Experience Manager OSGI config (AEM) API

    Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API  # noqa: E501

    OpenAPI spec version: 1.0.0-pre.0
    Contact: opensource@shinesolutions.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableProperties(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'enabled_actions': 'ConfigNodePropertyDropDown',
        'user_privilege_names': 'ConfigNodePropertyArray',
        'group_privilege_names': 'ConfigNodePropertyArray',
        'constraint': 'ConfigNodePropertyString'
    }

    attribute_map = {
        'enabled_actions': 'enabledActions',
        'user_privilege_names': 'userPrivilegeNames',
        'group_privilege_names': 'groupPrivilegeNames',
        'constraint': 'constraint'
    }

    def __init__(self, enabled_actions=None, user_privilege_names=None, group_privilege_names=None, constraint=None):  # noqa: E501
        """OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableProperties - a model defined in OpenAPI"""  # noqa: E501

        self._enabled_actions = None
        self._user_privilege_names = None
        self._group_privilege_names = None
        self._constraint = None
        self.discriminator = None

        if enabled_actions is not None:
            self.enabled_actions = enabled_actions
        if user_privilege_names is not None:
            self.user_privilege_names = user_privilege_names
        if group_privilege_names is not None:
            self.group_privilege_names = group_privilege_names
        if constraint is not None:
            self.constraint = constraint

    @property
    def enabled_actions(self):
        """Gets the enabled_actions of this OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableProperties.  # noqa: E501


        :return: The enabled_actions of this OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableProperties.  # noqa: E501
        :rtype: ConfigNodePropertyDropDown
        """
        return self._enabled_actions

    @enabled_actions.setter
    def enabled_actions(self, enabled_actions):
        """Sets the enabled_actions of this OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableProperties.


        :param enabled_actions: The enabled_actions of this OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableProperties.  # noqa: E501
        :type: ConfigNodePropertyDropDown
        """

        self._enabled_actions = enabled_actions

    @property
    def user_privilege_names(self):
        """Gets the user_privilege_names of this OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableProperties.  # noqa: E501


        :return: The user_privilege_names of this OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableProperties.  # noqa: E501
        :rtype: ConfigNodePropertyArray
        """
        return self._user_privilege_names

    @user_privilege_names.setter
    def user_privilege_names(self, user_privilege_names):
        """Sets the user_privilege_names of this OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableProperties.


        :param user_privilege_names: The user_privilege_names of this OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableProperties.  # noqa: E501
        :type: ConfigNodePropertyArray
        """

        self._user_privilege_names = user_privilege_names

    @property
    def group_privilege_names(self):
        """Gets the group_privilege_names of this OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableProperties.  # noqa: E501


        :return: The group_privilege_names of this OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableProperties.  # noqa: E501
        :rtype: ConfigNodePropertyArray
        """
        return self._group_privilege_names

    @group_privilege_names.setter
    def group_privilege_names(self, group_privilege_names):
        """Sets the group_privilege_names of this OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableProperties.


        :param group_privilege_names: The group_privilege_names of this OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableProperties.  # noqa: E501
        :type: ConfigNodePropertyArray
        """

        self._group_privilege_names = group_privilege_names

    @property
    def constraint(self):
        """Gets the constraint of this OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableProperties.  # noqa: E501


        :return: The constraint of this OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableProperties.  # noqa: E501
        :rtype: ConfigNodePropertyString
        """
        return self._constraint

    @constraint.setter
    def constraint(self, constraint):
        """Sets the constraint of this OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableProperties.


        :param constraint: The constraint of this OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableProperties.  # noqa: E501
        :type: ConfigNodePropertyString
        """

        self._constraint = constraint

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableProperties):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
