# coding: utf-8

"""
    Adobe Experience Manager OSGI config (AEM) API

    Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API  # noqa: E501

    OpenAPI spec version: 1.0.0-pre.0
    Contact: opensource@shinesolutions.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'version_id': 'ConfigNodePropertyString',
        'cache_on': 'ConfigNodePropertyBoolean',
        'concurrency_level': 'ConfigNodePropertyInteger',
        'cache_start_size': 'ConfigNodePropertyInteger',
        'cache_ttl': 'ConfigNodePropertyInteger',
        'cache_size': 'ConfigNodePropertyInteger',
        'time_limit': 'ConfigNodePropertyInteger'
    }

    attribute_map = {
        'version_id': 'version.id',
        'cache_on': 'cache.on',
        'concurrency_level': 'concurrency.level',
        'cache_start_size': 'cache.start.size',
        'cache_ttl': 'cache.ttl',
        'cache_size': 'cache.size',
        'time_limit': 'time.limit'
    }

    def __init__(self, version_id=None, cache_on=None, concurrency_level=None, cache_start_size=None, cache_ttl=None, cache_size=None, time_limit=None):  # noqa: E501
        """ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties - a model defined in OpenAPI"""  # noqa: E501

        self._version_id = None
        self._cache_on = None
        self._concurrency_level = None
        self._cache_start_size = None
        self._cache_ttl = None
        self._cache_size = None
        self._time_limit = None
        self.discriminator = None

        if version_id is not None:
            self.version_id = version_id
        if cache_on is not None:
            self.cache_on = cache_on
        if concurrency_level is not None:
            self.concurrency_level = concurrency_level
        if cache_start_size is not None:
            self.cache_start_size = cache_start_size
        if cache_ttl is not None:
            self.cache_ttl = cache_ttl
        if cache_size is not None:
            self.cache_size = cache_size
        if time_limit is not None:
            self.time_limit = time_limit

    @property
    def version_id(self):
        """Gets the version_id of this ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties.  # noqa: E501


        :return: The version_id of this ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties.  # noqa: E501
        :rtype: ConfigNodePropertyString
        """
        return self._version_id

    @version_id.setter
    def version_id(self, version_id):
        """Sets the version_id of this ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties.


        :param version_id: The version_id of this ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties.  # noqa: E501
        :type: ConfigNodePropertyString
        """

        self._version_id = version_id

    @property
    def cache_on(self):
        """Gets the cache_on of this ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties.  # noqa: E501


        :return: The cache_on of this ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties.  # noqa: E501
        :rtype: ConfigNodePropertyBoolean
        """
        return self._cache_on

    @cache_on.setter
    def cache_on(self, cache_on):
        """Sets the cache_on of this ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties.


        :param cache_on: The cache_on of this ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties.  # noqa: E501
        :type: ConfigNodePropertyBoolean
        """

        self._cache_on = cache_on

    @property
    def concurrency_level(self):
        """Gets the concurrency_level of this ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties.  # noqa: E501


        :return: The concurrency_level of this ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties.  # noqa: E501
        :rtype: ConfigNodePropertyInteger
        """
        return self._concurrency_level

    @concurrency_level.setter
    def concurrency_level(self, concurrency_level):
        """Sets the concurrency_level of this ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties.


        :param concurrency_level: The concurrency_level of this ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties.  # noqa: E501
        :type: ConfigNodePropertyInteger
        """

        self._concurrency_level = concurrency_level

    @property
    def cache_start_size(self):
        """Gets the cache_start_size of this ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties.  # noqa: E501


        :return: The cache_start_size of this ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties.  # noqa: E501
        :rtype: ConfigNodePropertyInteger
        """
        return self._cache_start_size

    @cache_start_size.setter
    def cache_start_size(self, cache_start_size):
        """Sets the cache_start_size of this ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties.


        :param cache_start_size: The cache_start_size of this ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties.  # noqa: E501
        :type: ConfigNodePropertyInteger
        """

        self._cache_start_size = cache_start_size

    @property
    def cache_ttl(self):
        """Gets the cache_ttl of this ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties.  # noqa: E501


        :return: The cache_ttl of this ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties.  # noqa: E501
        :rtype: ConfigNodePropertyInteger
        """
        return self._cache_ttl

    @cache_ttl.setter
    def cache_ttl(self, cache_ttl):
        """Sets the cache_ttl of this ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties.


        :param cache_ttl: The cache_ttl of this ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties.  # noqa: E501
        :type: ConfigNodePropertyInteger
        """

        self._cache_ttl = cache_ttl

    @property
    def cache_size(self):
        """Gets the cache_size of this ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties.  # noqa: E501


        :return: The cache_size of this ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties.  # noqa: E501
        :rtype: ConfigNodePropertyInteger
        """
        return self._cache_size

    @cache_size.setter
    def cache_size(self, cache_size):
        """Sets the cache_size of this ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties.


        :param cache_size: The cache_size of this ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties.  # noqa: E501
        :type: ConfigNodePropertyInteger
        """

        self._cache_size = cache_size

    @property
    def time_limit(self):
        """Gets the time_limit of this ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties.  # noqa: E501


        :return: The time_limit of this ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties.  # noqa: E501
        :rtype: ConfigNodePropertyInteger
        """
        return self._time_limit

    @time_limit.setter
    def time_limit(self, time_limit):
        """Sets the time_limit of this ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties.


        :param time_limit: The time_limit of this ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties.  # noqa: E501
        :type: ConfigNodePropertyInteger
        """

        self._time_limit = time_limit

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
