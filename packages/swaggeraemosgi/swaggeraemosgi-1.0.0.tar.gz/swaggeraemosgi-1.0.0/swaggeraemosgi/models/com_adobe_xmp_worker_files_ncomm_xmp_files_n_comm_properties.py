# coding: utf-8

"""
    Adobe Experience Manager OSGI config (AEM) API

    Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API  # noqa: E501

    OpenAPI spec version: 1.0.0-pre.0
    Contact: opensource@shinesolutions.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ComAdobeXmpWorkerFilesNcommXMPFilesNCommProperties(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'max_connections': 'ConfigNodePropertyString',
        'max_requests': 'ConfigNodePropertyString',
        'request_timeout': 'ConfigNodePropertyString',
        'log_dir': 'ConfigNodePropertyString'
    }

    attribute_map = {
        'max_connections': 'maxConnections',
        'max_requests': 'maxRequests',
        'request_timeout': 'requestTimeout',
        'log_dir': 'logDir'
    }

    def __init__(self, max_connections=None, max_requests=None, request_timeout=None, log_dir=None):  # noqa: E501
        """ComAdobeXmpWorkerFilesNcommXMPFilesNCommProperties - a model defined in OpenAPI"""  # noqa: E501

        self._max_connections = None
        self._max_requests = None
        self._request_timeout = None
        self._log_dir = None
        self.discriminator = None

        if max_connections is not None:
            self.max_connections = max_connections
        if max_requests is not None:
            self.max_requests = max_requests
        if request_timeout is not None:
            self.request_timeout = request_timeout
        if log_dir is not None:
            self.log_dir = log_dir

    @property
    def max_connections(self):
        """Gets the max_connections of this ComAdobeXmpWorkerFilesNcommXMPFilesNCommProperties.  # noqa: E501


        :return: The max_connections of this ComAdobeXmpWorkerFilesNcommXMPFilesNCommProperties.  # noqa: E501
        :rtype: ConfigNodePropertyString
        """
        return self._max_connections

    @max_connections.setter
    def max_connections(self, max_connections):
        """Sets the max_connections of this ComAdobeXmpWorkerFilesNcommXMPFilesNCommProperties.


        :param max_connections: The max_connections of this ComAdobeXmpWorkerFilesNcommXMPFilesNCommProperties.  # noqa: E501
        :type: ConfigNodePropertyString
        """

        self._max_connections = max_connections

    @property
    def max_requests(self):
        """Gets the max_requests of this ComAdobeXmpWorkerFilesNcommXMPFilesNCommProperties.  # noqa: E501


        :return: The max_requests of this ComAdobeXmpWorkerFilesNcommXMPFilesNCommProperties.  # noqa: E501
        :rtype: ConfigNodePropertyString
        """
        return self._max_requests

    @max_requests.setter
    def max_requests(self, max_requests):
        """Sets the max_requests of this ComAdobeXmpWorkerFilesNcommXMPFilesNCommProperties.


        :param max_requests: The max_requests of this ComAdobeXmpWorkerFilesNcommXMPFilesNCommProperties.  # noqa: E501
        :type: ConfigNodePropertyString
        """

        self._max_requests = max_requests

    @property
    def request_timeout(self):
        """Gets the request_timeout of this ComAdobeXmpWorkerFilesNcommXMPFilesNCommProperties.  # noqa: E501


        :return: The request_timeout of this ComAdobeXmpWorkerFilesNcommXMPFilesNCommProperties.  # noqa: E501
        :rtype: ConfigNodePropertyString
        """
        return self._request_timeout

    @request_timeout.setter
    def request_timeout(self, request_timeout):
        """Sets the request_timeout of this ComAdobeXmpWorkerFilesNcommXMPFilesNCommProperties.


        :param request_timeout: The request_timeout of this ComAdobeXmpWorkerFilesNcommXMPFilesNCommProperties.  # noqa: E501
        :type: ConfigNodePropertyString
        """

        self._request_timeout = request_timeout

    @property
    def log_dir(self):
        """Gets the log_dir of this ComAdobeXmpWorkerFilesNcommXMPFilesNCommProperties.  # noqa: E501


        :return: The log_dir of this ComAdobeXmpWorkerFilesNcommXMPFilesNCommProperties.  # noqa: E501
        :rtype: ConfigNodePropertyString
        """
        return self._log_dir

    @log_dir.setter
    def log_dir(self, log_dir):
        """Sets the log_dir of this ComAdobeXmpWorkerFilesNcommXMPFilesNCommProperties.


        :param log_dir: The log_dir of this ComAdobeXmpWorkerFilesNcommXMPFilesNCommProperties.  # noqa: E501
        :type: ConfigNodePropertyString
        """

        self._log_dir = log_dir

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComAdobeXmpWorkerFilesNcommXMPFilesNCommProperties):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
