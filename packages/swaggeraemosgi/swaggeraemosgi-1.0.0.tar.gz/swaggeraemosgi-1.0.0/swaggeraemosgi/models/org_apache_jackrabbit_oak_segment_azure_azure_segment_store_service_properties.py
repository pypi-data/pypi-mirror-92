# coding: utf-8

"""
    Adobe Experience Manager OSGI config (AEM) API

    Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API  # noqa: E501

    OpenAPI spec version: 1.0.0-pre.0
    Contact: opensource@shinesolutions.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'account_name': 'ConfigNodePropertyString',
        'container_name': 'ConfigNodePropertyString',
        'access_key': 'ConfigNodePropertyString',
        'root_path': 'ConfigNodePropertyString',
        'connection_url': 'ConfigNodePropertyString'
    }

    attribute_map = {
        'account_name': 'accountName',
        'container_name': 'containerName',
        'access_key': 'accessKey',
        'root_path': 'rootPath',
        'connection_url': 'connectionURL'
    }

    def __init__(self, account_name=None, container_name=None, access_key=None, root_path=None, connection_url=None):  # noqa: E501
        """OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties - a model defined in OpenAPI"""  # noqa: E501

        self._account_name = None
        self._container_name = None
        self._access_key = None
        self._root_path = None
        self._connection_url = None
        self.discriminator = None

        if account_name is not None:
            self.account_name = account_name
        if container_name is not None:
            self.container_name = container_name
        if access_key is not None:
            self.access_key = access_key
        if root_path is not None:
            self.root_path = root_path
        if connection_url is not None:
            self.connection_url = connection_url

    @property
    def account_name(self):
        """Gets the account_name of this OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties.  # noqa: E501


        :return: The account_name of this OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties.  # noqa: E501
        :rtype: ConfigNodePropertyString
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """Sets the account_name of this OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties.


        :param account_name: The account_name of this OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties.  # noqa: E501
        :type: ConfigNodePropertyString
        """

        self._account_name = account_name

    @property
    def container_name(self):
        """Gets the container_name of this OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties.  # noqa: E501


        :return: The container_name of this OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties.  # noqa: E501
        :rtype: ConfigNodePropertyString
        """
        return self._container_name

    @container_name.setter
    def container_name(self, container_name):
        """Sets the container_name of this OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties.


        :param container_name: The container_name of this OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties.  # noqa: E501
        :type: ConfigNodePropertyString
        """

        self._container_name = container_name

    @property
    def access_key(self):
        """Gets the access_key of this OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties.  # noqa: E501


        :return: The access_key of this OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties.  # noqa: E501
        :rtype: ConfigNodePropertyString
        """
        return self._access_key

    @access_key.setter
    def access_key(self, access_key):
        """Sets the access_key of this OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties.


        :param access_key: The access_key of this OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties.  # noqa: E501
        :type: ConfigNodePropertyString
        """

        self._access_key = access_key

    @property
    def root_path(self):
        """Gets the root_path of this OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties.  # noqa: E501


        :return: The root_path of this OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties.  # noqa: E501
        :rtype: ConfigNodePropertyString
        """
        return self._root_path

    @root_path.setter
    def root_path(self, root_path):
        """Sets the root_path of this OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties.


        :param root_path: The root_path of this OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties.  # noqa: E501
        :type: ConfigNodePropertyString
        """

        self._root_path = root_path

    @property
    def connection_url(self):
        """Gets the connection_url of this OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties.  # noqa: E501


        :return: The connection_url of this OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties.  # noqa: E501
        :rtype: ConfigNodePropertyString
        """
        return self._connection_url

    @connection_url.setter
    def connection_url(self, connection_url):
        """Sets the connection_url of this OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties.


        :param connection_url: The connection_url of this OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties.  # noqa: E501
        :type: ConfigNodePropertyString
        """

        self._connection_url = connection_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
