# coding: utf-8

"""
    Adobe Experience Manager OSGI config (AEM) API

    Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API  # noqa: E501

    OpenAPI spec version: 1.0.0-pre.0
    Contact: opensource@shinesolutions.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class OrgApacheSlingEventImplJobsDefaultJobManagerProperties(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'queue_priority': 'ConfigNodePropertyDropDown',
        'queue_retries': 'ConfigNodePropertyInteger',
        'queue_retrydelay': 'ConfigNodePropertyInteger',
        'queue_maxparallel': 'ConfigNodePropertyInteger'
    }

    attribute_map = {
        'queue_priority': 'queue.priority',
        'queue_retries': 'queue.retries',
        'queue_retrydelay': 'queue.retrydelay',
        'queue_maxparallel': 'queue.maxparallel'
    }

    def __init__(self, queue_priority=None, queue_retries=None, queue_retrydelay=None, queue_maxparallel=None):  # noqa: E501
        """OrgApacheSlingEventImplJobsDefaultJobManagerProperties - a model defined in OpenAPI"""  # noqa: E501

        self._queue_priority = None
        self._queue_retries = None
        self._queue_retrydelay = None
        self._queue_maxparallel = None
        self.discriminator = None

        if queue_priority is not None:
            self.queue_priority = queue_priority
        if queue_retries is not None:
            self.queue_retries = queue_retries
        if queue_retrydelay is not None:
            self.queue_retrydelay = queue_retrydelay
        if queue_maxparallel is not None:
            self.queue_maxparallel = queue_maxparallel

    @property
    def queue_priority(self):
        """Gets the queue_priority of this OrgApacheSlingEventImplJobsDefaultJobManagerProperties.  # noqa: E501


        :return: The queue_priority of this OrgApacheSlingEventImplJobsDefaultJobManagerProperties.  # noqa: E501
        :rtype: ConfigNodePropertyDropDown
        """
        return self._queue_priority

    @queue_priority.setter
    def queue_priority(self, queue_priority):
        """Sets the queue_priority of this OrgApacheSlingEventImplJobsDefaultJobManagerProperties.


        :param queue_priority: The queue_priority of this OrgApacheSlingEventImplJobsDefaultJobManagerProperties.  # noqa: E501
        :type: ConfigNodePropertyDropDown
        """

        self._queue_priority = queue_priority

    @property
    def queue_retries(self):
        """Gets the queue_retries of this OrgApacheSlingEventImplJobsDefaultJobManagerProperties.  # noqa: E501


        :return: The queue_retries of this OrgApacheSlingEventImplJobsDefaultJobManagerProperties.  # noqa: E501
        :rtype: ConfigNodePropertyInteger
        """
        return self._queue_retries

    @queue_retries.setter
    def queue_retries(self, queue_retries):
        """Sets the queue_retries of this OrgApacheSlingEventImplJobsDefaultJobManagerProperties.


        :param queue_retries: The queue_retries of this OrgApacheSlingEventImplJobsDefaultJobManagerProperties.  # noqa: E501
        :type: ConfigNodePropertyInteger
        """

        self._queue_retries = queue_retries

    @property
    def queue_retrydelay(self):
        """Gets the queue_retrydelay of this OrgApacheSlingEventImplJobsDefaultJobManagerProperties.  # noqa: E501


        :return: The queue_retrydelay of this OrgApacheSlingEventImplJobsDefaultJobManagerProperties.  # noqa: E501
        :rtype: ConfigNodePropertyInteger
        """
        return self._queue_retrydelay

    @queue_retrydelay.setter
    def queue_retrydelay(self, queue_retrydelay):
        """Sets the queue_retrydelay of this OrgApacheSlingEventImplJobsDefaultJobManagerProperties.


        :param queue_retrydelay: The queue_retrydelay of this OrgApacheSlingEventImplJobsDefaultJobManagerProperties.  # noqa: E501
        :type: ConfigNodePropertyInteger
        """

        self._queue_retrydelay = queue_retrydelay

    @property
    def queue_maxparallel(self):
        """Gets the queue_maxparallel of this OrgApacheSlingEventImplJobsDefaultJobManagerProperties.  # noqa: E501


        :return: The queue_maxparallel of this OrgApacheSlingEventImplJobsDefaultJobManagerProperties.  # noqa: E501
        :rtype: ConfigNodePropertyInteger
        """
        return self._queue_maxparallel

    @queue_maxparallel.setter
    def queue_maxparallel(self, queue_maxparallel):
        """Sets the queue_maxparallel of this OrgApacheSlingEventImplJobsDefaultJobManagerProperties.


        :param queue_maxparallel: The queue_maxparallel of this OrgApacheSlingEventImplJobsDefaultJobManagerProperties.  # noqa: E501
        :type: ConfigNodePropertyInteger
        """

        self._queue_maxparallel = queue_maxparallel

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrgApacheSlingEventImplJobsDefaultJobManagerProperties):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
