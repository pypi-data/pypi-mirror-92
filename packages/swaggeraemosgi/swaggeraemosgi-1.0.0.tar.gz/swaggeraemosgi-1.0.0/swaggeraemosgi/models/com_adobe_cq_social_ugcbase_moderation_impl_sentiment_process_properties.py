# coding: utf-8

"""
    Adobe Experience Manager OSGI config (AEM) API

    Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API  # noqa: E501

    OpenAPI spec version: 1.0.0-pre.0
    Contact: opensource@shinesolutions.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ComAdobeCqSocialUgcbaseModerationImplSentimentProcessProperties(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'watchwords_positive': 'ConfigNodePropertyArray',
        'watchwords_negative': 'ConfigNodePropertyArray',
        'watchwords_path': 'ConfigNodePropertyString',
        'sentiment_path': 'ConfigNodePropertyString'
    }

    attribute_map = {
        'watchwords_positive': 'watchwords.positive',
        'watchwords_negative': 'watchwords.negative',
        'watchwords_path': 'watchwords.path',
        'sentiment_path': 'sentiment.path'
    }

    def __init__(self, watchwords_positive=None, watchwords_negative=None, watchwords_path=None, sentiment_path=None):  # noqa: E501
        """ComAdobeCqSocialUgcbaseModerationImplSentimentProcessProperties - a model defined in OpenAPI"""  # noqa: E501

        self._watchwords_positive = None
        self._watchwords_negative = None
        self._watchwords_path = None
        self._sentiment_path = None
        self.discriminator = None

        if watchwords_positive is not None:
            self.watchwords_positive = watchwords_positive
        if watchwords_negative is not None:
            self.watchwords_negative = watchwords_negative
        if watchwords_path is not None:
            self.watchwords_path = watchwords_path
        if sentiment_path is not None:
            self.sentiment_path = sentiment_path

    @property
    def watchwords_positive(self):
        """Gets the watchwords_positive of this ComAdobeCqSocialUgcbaseModerationImplSentimentProcessProperties.  # noqa: E501


        :return: The watchwords_positive of this ComAdobeCqSocialUgcbaseModerationImplSentimentProcessProperties.  # noqa: E501
        :rtype: ConfigNodePropertyArray
        """
        return self._watchwords_positive

    @watchwords_positive.setter
    def watchwords_positive(self, watchwords_positive):
        """Sets the watchwords_positive of this ComAdobeCqSocialUgcbaseModerationImplSentimentProcessProperties.


        :param watchwords_positive: The watchwords_positive of this ComAdobeCqSocialUgcbaseModerationImplSentimentProcessProperties.  # noqa: E501
        :type: ConfigNodePropertyArray
        """

        self._watchwords_positive = watchwords_positive

    @property
    def watchwords_negative(self):
        """Gets the watchwords_negative of this ComAdobeCqSocialUgcbaseModerationImplSentimentProcessProperties.  # noqa: E501


        :return: The watchwords_negative of this ComAdobeCqSocialUgcbaseModerationImplSentimentProcessProperties.  # noqa: E501
        :rtype: ConfigNodePropertyArray
        """
        return self._watchwords_negative

    @watchwords_negative.setter
    def watchwords_negative(self, watchwords_negative):
        """Sets the watchwords_negative of this ComAdobeCqSocialUgcbaseModerationImplSentimentProcessProperties.


        :param watchwords_negative: The watchwords_negative of this ComAdobeCqSocialUgcbaseModerationImplSentimentProcessProperties.  # noqa: E501
        :type: ConfigNodePropertyArray
        """

        self._watchwords_negative = watchwords_negative

    @property
    def watchwords_path(self):
        """Gets the watchwords_path of this ComAdobeCqSocialUgcbaseModerationImplSentimentProcessProperties.  # noqa: E501


        :return: The watchwords_path of this ComAdobeCqSocialUgcbaseModerationImplSentimentProcessProperties.  # noqa: E501
        :rtype: ConfigNodePropertyString
        """
        return self._watchwords_path

    @watchwords_path.setter
    def watchwords_path(self, watchwords_path):
        """Sets the watchwords_path of this ComAdobeCqSocialUgcbaseModerationImplSentimentProcessProperties.


        :param watchwords_path: The watchwords_path of this ComAdobeCqSocialUgcbaseModerationImplSentimentProcessProperties.  # noqa: E501
        :type: ConfigNodePropertyString
        """

        self._watchwords_path = watchwords_path

    @property
    def sentiment_path(self):
        """Gets the sentiment_path of this ComAdobeCqSocialUgcbaseModerationImplSentimentProcessProperties.  # noqa: E501


        :return: The sentiment_path of this ComAdobeCqSocialUgcbaseModerationImplSentimentProcessProperties.  # noqa: E501
        :rtype: ConfigNodePropertyString
        """
        return self._sentiment_path

    @sentiment_path.setter
    def sentiment_path(self, sentiment_path):
        """Sets the sentiment_path of this ComAdobeCqSocialUgcbaseModerationImplSentimentProcessProperties.


        :param sentiment_path: The sentiment_path of this ComAdobeCqSocialUgcbaseModerationImplSentimentProcessProperties.  # noqa: E501
        :type: ConfigNodePropertyString
        """

        self._sentiment_path = sentiment_path

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComAdobeCqSocialUgcbaseModerationImplSentimentProcessProperties):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
