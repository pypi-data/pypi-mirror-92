# coding: utf-8

"""
    Adobe Experience Manager OSGI config (AEM) API

    Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API  # noqa: E501

    OpenAPI spec version: 1.0.0-pre.0
    Contact: opensource@shinesolutions.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ComDayCqWcmFoundationImplHTTPAuthHandlerProperties(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'path': 'ConfigNodePropertyString',
        'auth_http_nologin': 'ConfigNodePropertyBoolean',
        'auth_http_realm': 'ConfigNodePropertyString',
        'auth_default_loginpage': 'ConfigNodePropertyString',
        'auth_cred_form': 'ConfigNodePropertyArray',
        'auth_cred_utf8': 'ConfigNodePropertyArray'
    }

    attribute_map = {
        'path': 'path',
        'auth_http_nologin': 'auth.http.nologin',
        'auth_http_realm': 'auth.http.realm',
        'auth_default_loginpage': 'auth.default.loginpage',
        'auth_cred_form': 'auth.cred.form',
        'auth_cred_utf8': 'auth.cred.utf8'
    }

    def __init__(self, path=None, auth_http_nologin=None, auth_http_realm=None, auth_default_loginpage=None, auth_cred_form=None, auth_cred_utf8=None):  # noqa: E501
        """ComDayCqWcmFoundationImplHTTPAuthHandlerProperties - a model defined in OpenAPI"""  # noqa: E501

        self._path = None
        self._auth_http_nologin = None
        self._auth_http_realm = None
        self._auth_default_loginpage = None
        self._auth_cred_form = None
        self._auth_cred_utf8 = None
        self.discriminator = None

        if path is not None:
            self.path = path
        if auth_http_nologin is not None:
            self.auth_http_nologin = auth_http_nologin
        if auth_http_realm is not None:
            self.auth_http_realm = auth_http_realm
        if auth_default_loginpage is not None:
            self.auth_default_loginpage = auth_default_loginpage
        if auth_cred_form is not None:
            self.auth_cred_form = auth_cred_form
        if auth_cred_utf8 is not None:
            self.auth_cred_utf8 = auth_cred_utf8

    @property
    def path(self):
        """Gets the path of this ComDayCqWcmFoundationImplHTTPAuthHandlerProperties.  # noqa: E501


        :return: The path of this ComDayCqWcmFoundationImplHTTPAuthHandlerProperties.  # noqa: E501
        :rtype: ConfigNodePropertyString
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this ComDayCqWcmFoundationImplHTTPAuthHandlerProperties.


        :param path: The path of this ComDayCqWcmFoundationImplHTTPAuthHandlerProperties.  # noqa: E501
        :type: ConfigNodePropertyString
        """

        self._path = path

    @property
    def auth_http_nologin(self):
        """Gets the auth_http_nologin of this ComDayCqWcmFoundationImplHTTPAuthHandlerProperties.  # noqa: E501


        :return: The auth_http_nologin of this ComDayCqWcmFoundationImplHTTPAuthHandlerProperties.  # noqa: E501
        :rtype: ConfigNodePropertyBoolean
        """
        return self._auth_http_nologin

    @auth_http_nologin.setter
    def auth_http_nologin(self, auth_http_nologin):
        """Sets the auth_http_nologin of this ComDayCqWcmFoundationImplHTTPAuthHandlerProperties.


        :param auth_http_nologin: The auth_http_nologin of this ComDayCqWcmFoundationImplHTTPAuthHandlerProperties.  # noqa: E501
        :type: ConfigNodePropertyBoolean
        """

        self._auth_http_nologin = auth_http_nologin

    @property
    def auth_http_realm(self):
        """Gets the auth_http_realm of this ComDayCqWcmFoundationImplHTTPAuthHandlerProperties.  # noqa: E501


        :return: The auth_http_realm of this ComDayCqWcmFoundationImplHTTPAuthHandlerProperties.  # noqa: E501
        :rtype: ConfigNodePropertyString
        """
        return self._auth_http_realm

    @auth_http_realm.setter
    def auth_http_realm(self, auth_http_realm):
        """Sets the auth_http_realm of this ComDayCqWcmFoundationImplHTTPAuthHandlerProperties.


        :param auth_http_realm: The auth_http_realm of this ComDayCqWcmFoundationImplHTTPAuthHandlerProperties.  # noqa: E501
        :type: ConfigNodePropertyString
        """

        self._auth_http_realm = auth_http_realm

    @property
    def auth_default_loginpage(self):
        """Gets the auth_default_loginpage of this ComDayCqWcmFoundationImplHTTPAuthHandlerProperties.  # noqa: E501


        :return: The auth_default_loginpage of this ComDayCqWcmFoundationImplHTTPAuthHandlerProperties.  # noqa: E501
        :rtype: ConfigNodePropertyString
        """
        return self._auth_default_loginpage

    @auth_default_loginpage.setter
    def auth_default_loginpage(self, auth_default_loginpage):
        """Sets the auth_default_loginpage of this ComDayCqWcmFoundationImplHTTPAuthHandlerProperties.


        :param auth_default_loginpage: The auth_default_loginpage of this ComDayCqWcmFoundationImplHTTPAuthHandlerProperties.  # noqa: E501
        :type: ConfigNodePropertyString
        """

        self._auth_default_loginpage = auth_default_loginpage

    @property
    def auth_cred_form(self):
        """Gets the auth_cred_form of this ComDayCqWcmFoundationImplHTTPAuthHandlerProperties.  # noqa: E501


        :return: The auth_cred_form of this ComDayCqWcmFoundationImplHTTPAuthHandlerProperties.  # noqa: E501
        :rtype: ConfigNodePropertyArray
        """
        return self._auth_cred_form

    @auth_cred_form.setter
    def auth_cred_form(self, auth_cred_form):
        """Sets the auth_cred_form of this ComDayCqWcmFoundationImplHTTPAuthHandlerProperties.


        :param auth_cred_form: The auth_cred_form of this ComDayCqWcmFoundationImplHTTPAuthHandlerProperties.  # noqa: E501
        :type: ConfigNodePropertyArray
        """

        self._auth_cred_form = auth_cred_form

    @property
    def auth_cred_utf8(self):
        """Gets the auth_cred_utf8 of this ComDayCqWcmFoundationImplHTTPAuthHandlerProperties.  # noqa: E501


        :return: The auth_cred_utf8 of this ComDayCqWcmFoundationImplHTTPAuthHandlerProperties.  # noqa: E501
        :rtype: ConfigNodePropertyArray
        """
        return self._auth_cred_utf8

    @auth_cred_utf8.setter
    def auth_cred_utf8(self, auth_cred_utf8):
        """Sets the auth_cred_utf8 of this ComDayCqWcmFoundationImplHTTPAuthHandlerProperties.


        :param auth_cred_utf8: The auth_cred_utf8 of this ComDayCqWcmFoundationImplHTTPAuthHandlerProperties.  # noqa: E501
        :type: ConfigNodePropertyArray
        """

        self._auth_cred_utf8 = auth_cred_utf8

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComDayCqWcmFoundationImplHTTPAuthHandlerProperties):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
