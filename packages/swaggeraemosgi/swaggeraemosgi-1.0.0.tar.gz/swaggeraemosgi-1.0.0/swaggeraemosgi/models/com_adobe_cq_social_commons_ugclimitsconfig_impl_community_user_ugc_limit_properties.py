# coding: utf-8

"""
    Adobe Experience Manager OSGI config (AEM) API

    Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API  # noqa: E501

    OpenAPI spec version: 1.0.0-pre.0
    Contact: opensource@shinesolutions.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'enable': 'ConfigNodePropertyBoolean',
        'ugc_limit': 'ConfigNodePropertyInteger',
        'ugc_limit_duration': 'ConfigNodePropertyInteger',
        'domains': 'ConfigNodePropertyArray',
        'to_list': 'ConfigNodePropertyArray'
    }

    attribute_map = {
        'enable': 'enable',
        'ugc_limit': 'UGCLimit',
        'ugc_limit_duration': 'ugcLimitDuration',
        'domains': 'domains',
        'to_list': 'toList'
    }

    def __init__(self, enable=None, ugc_limit=None, ugc_limit_duration=None, domains=None, to_list=None):  # noqa: E501
        """ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties - a model defined in OpenAPI"""  # noqa: E501

        self._enable = None
        self._ugc_limit = None
        self._ugc_limit_duration = None
        self._domains = None
        self._to_list = None
        self.discriminator = None

        if enable is not None:
            self.enable = enable
        if ugc_limit is not None:
            self.ugc_limit = ugc_limit
        if ugc_limit_duration is not None:
            self.ugc_limit_duration = ugc_limit_duration
        if domains is not None:
            self.domains = domains
        if to_list is not None:
            self.to_list = to_list

    @property
    def enable(self):
        """Gets the enable of this ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties.  # noqa: E501


        :return: The enable of this ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties.  # noqa: E501
        :rtype: ConfigNodePropertyBoolean
        """
        return self._enable

    @enable.setter
    def enable(self, enable):
        """Sets the enable of this ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties.


        :param enable: The enable of this ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties.  # noqa: E501
        :type: ConfigNodePropertyBoolean
        """

        self._enable = enable

    @property
    def ugc_limit(self):
        """Gets the ugc_limit of this ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties.  # noqa: E501


        :return: The ugc_limit of this ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties.  # noqa: E501
        :rtype: ConfigNodePropertyInteger
        """
        return self._ugc_limit

    @ugc_limit.setter
    def ugc_limit(self, ugc_limit):
        """Sets the ugc_limit of this ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties.


        :param ugc_limit: The ugc_limit of this ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties.  # noqa: E501
        :type: ConfigNodePropertyInteger
        """

        self._ugc_limit = ugc_limit

    @property
    def ugc_limit_duration(self):
        """Gets the ugc_limit_duration of this ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties.  # noqa: E501


        :return: The ugc_limit_duration of this ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties.  # noqa: E501
        :rtype: ConfigNodePropertyInteger
        """
        return self._ugc_limit_duration

    @ugc_limit_duration.setter
    def ugc_limit_duration(self, ugc_limit_duration):
        """Sets the ugc_limit_duration of this ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties.


        :param ugc_limit_duration: The ugc_limit_duration of this ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties.  # noqa: E501
        :type: ConfigNodePropertyInteger
        """

        self._ugc_limit_duration = ugc_limit_duration

    @property
    def domains(self):
        """Gets the domains of this ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties.  # noqa: E501


        :return: The domains of this ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties.  # noqa: E501
        :rtype: ConfigNodePropertyArray
        """
        return self._domains

    @domains.setter
    def domains(self, domains):
        """Sets the domains of this ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties.


        :param domains: The domains of this ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties.  # noqa: E501
        :type: ConfigNodePropertyArray
        """

        self._domains = domains

    @property
    def to_list(self):
        """Gets the to_list of this ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties.  # noqa: E501


        :return: The to_list of this ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties.  # noqa: E501
        :rtype: ConfigNodePropertyArray
        """
        return self._to_list

    @to_list.setter
    def to_list(self, to_list):
        """Sets the to_list of this ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties.


        :param to_list: The to_list of this ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties.  # noqa: E501
        :type: ConfigNodePropertyArray
        """

        self._to_list = to_list

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
