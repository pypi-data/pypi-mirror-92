# coding: utf-8

"""
    Adobe Experience Manager OSGI config (AEM) API

    Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API  # noqa: E501

    OpenAPI spec version: 1.0.0-pre.0
    Contact: opensource@shinesolutions.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'org_apache_sling_installer_configuration_persist': 'ConfigNodePropertyBoolean',
        'mode': 'ConfigNodePropertyDropDown',
        'port': 'ConfigNodePropertyInteger',
        'primary_host': 'ConfigNodePropertyString',
        'interval': 'ConfigNodePropertyInteger',
        'primary_allowed_client_ip_ranges': 'ConfigNodePropertyArray',
        'secure': 'ConfigNodePropertyBoolean',
        'standby_readtimeout': 'ConfigNodePropertyInteger',
        'standby_autoclean': 'ConfigNodePropertyBoolean'
    }

    attribute_map = {
        'org_apache_sling_installer_configuration_persist': 'org.apache.sling.installer.configuration.persist',
        'mode': 'mode',
        'port': 'port',
        'primary_host': 'primary.host',
        'interval': 'interval',
        'primary_allowed_client_ip_ranges': 'primary.allowed-client-ip-ranges',
        'secure': 'secure',
        'standby_readtimeout': 'standby.readtimeout',
        'standby_autoclean': 'standby.autoclean'
    }

    def __init__(self, org_apache_sling_installer_configuration_persist=None, mode=None, port=None, primary_host=None, interval=None, primary_allowed_client_ip_ranges=None, secure=None, standby_readtimeout=None, standby_autoclean=None):  # noqa: E501
        """OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties - a model defined in OpenAPI"""  # noqa: E501

        self._org_apache_sling_installer_configuration_persist = None
        self._mode = None
        self._port = None
        self._primary_host = None
        self._interval = None
        self._primary_allowed_client_ip_ranges = None
        self._secure = None
        self._standby_readtimeout = None
        self._standby_autoclean = None
        self.discriminator = None

        if org_apache_sling_installer_configuration_persist is not None:
            self.org_apache_sling_installer_configuration_persist = org_apache_sling_installer_configuration_persist
        if mode is not None:
            self.mode = mode
        if port is not None:
            self.port = port
        if primary_host is not None:
            self.primary_host = primary_host
        if interval is not None:
            self.interval = interval
        if primary_allowed_client_ip_ranges is not None:
            self.primary_allowed_client_ip_ranges = primary_allowed_client_ip_ranges
        if secure is not None:
            self.secure = secure
        if standby_readtimeout is not None:
            self.standby_readtimeout = standby_readtimeout
        if standby_autoclean is not None:
            self.standby_autoclean = standby_autoclean

    @property
    def org_apache_sling_installer_configuration_persist(self):
        """Gets the org_apache_sling_installer_configuration_persist of this OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties.  # noqa: E501


        :return: The org_apache_sling_installer_configuration_persist of this OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties.  # noqa: E501
        :rtype: ConfigNodePropertyBoolean
        """
        return self._org_apache_sling_installer_configuration_persist

    @org_apache_sling_installer_configuration_persist.setter
    def org_apache_sling_installer_configuration_persist(self, org_apache_sling_installer_configuration_persist):
        """Sets the org_apache_sling_installer_configuration_persist of this OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties.


        :param org_apache_sling_installer_configuration_persist: The org_apache_sling_installer_configuration_persist of this OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties.  # noqa: E501
        :type: ConfigNodePropertyBoolean
        """

        self._org_apache_sling_installer_configuration_persist = org_apache_sling_installer_configuration_persist

    @property
    def mode(self):
        """Gets the mode of this OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties.  # noqa: E501


        :return: The mode of this OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties.  # noqa: E501
        :rtype: ConfigNodePropertyDropDown
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties.


        :param mode: The mode of this OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties.  # noqa: E501
        :type: ConfigNodePropertyDropDown
        """

        self._mode = mode

    @property
    def port(self):
        """Gets the port of this OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties.  # noqa: E501


        :return: The port of this OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties.  # noqa: E501
        :rtype: ConfigNodePropertyInteger
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties.


        :param port: The port of this OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties.  # noqa: E501
        :type: ConfigNodePropertyInteger
        """

        self._port = port

    @property
    def primary_host(self):
        """Gets the primary_host of this OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties.  # noqa: E501


        :return: The primary_host of this OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties.  # noqa: E501
        :rtype: ConfigNodePropertyString
        """
        return self._primary_host

    @primary_host.setter
    def primary_host(self, primary_host):
        """Sets the primary_host of this OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties.


        :param primary_host: The primary_host of this OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties.  # noqa: E501
        :type: ConfigNodePropertyString
        """

        self._primary_host = primary_host

    @property
    def interval(self):
        """Gets the interval of this OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties.  # noqa: E501


        :return: The interval of this OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties.  # noqa: E501
        :rtype: ConfigNodePropertyInteger
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties.


        :param interval: The interval of this OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties.  # noqa: E501
        :type: ConfigNodePropertyInteger
        """

        self._interval = interval

    @property
    def primary_allowed_client_ip_ranges(self):
        """Gets the primary_allowed_client_ip_ranges of this OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties.  # noqa: E501


        :return: The primary_allowed_client_ip_ranges of this OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties.  # noqa: E501
        :rtype: ConfigNodePropertyArray
        """
        return self._primary_allowed_client_ip_ranges

    @primary_allowed_client_ip_ranges.setter
    def primary_allowed_client_ip_ranges(self, primary_allowed_client_ip_ranges):
        """Sets the primary_allowed_client_ip_ranges of this OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties.


        :param primary_allowed_client_ip_ranges: The primary_allowed_client_ip_ranges of this OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties.  # noqa: E501
        :type: ConfigNodePropertyArray
        """

        self._primary_allowed_client_ip_ranges = primary_allowed_client_ip_ranges

    @property
    def secure(self):
        """Gets the secure of this OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties.  # noqa: E501


        :return: The secure of this OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties.  # noqa: E501
        :rtype: ConfigNodePropertyBoolean
        """
        return self._secure

    @secure.setter
    def secure(self, secure):
        """Sets the secure of this OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties.


        :param secure: The secure of this OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties.  # noqa: E501
        :type: ConfigNodePropertyBoolean
        """

        self._secure = secure

    @property
    def standby_readtimeout(self):
        """Gets the standby_readtimeout of this OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties.  # noqa: E501


        :return: The standby_readtimeout of this OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties.  # noqa: E501
        :rtype: ConfigNodePropertyInteger
        """
        return self._standby_readtimeout

    @standby_readtimeout.setter
    def standby_readtimeout(self, standby_readtimeout):
        """Sets the standby_readtimeout of this OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties.


        :param standby_readtimeout: The standby_readtimeout of this OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties.  # noqa: E501
        :type: ConfigNodePropertyInteger
        """

        self._standby_readtimeout = standby_readtimeout

    @property
    def standby_autoclean(self):
        """Gets the standby_autoclean of this OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties.  # noqa: E501


        :return: The standby_autoclean of this OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties.  # noqa: E501
        :rtype: ConfigNodePropertyBoolean
        """
        return self._standby_autoclean

    @standby_autoclean.setter
    def standby_autoclean(self, standby_autoclean):
        """Sets the standby_autoclean of this OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties.


        :param standby_autoclean: The standby_autoclean of this OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties.  # noqa: E501
        :type: ConfigNodePropertyBoolean
        """

        self._standby_autoclean = standby_autoclean

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
