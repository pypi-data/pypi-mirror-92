# coding: utf-8

"""
    Adobe Experience Manager OSGI config (AEM) API

    Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API  # noqa: E501

    OpenAPI spec version: 1.0.0-pre.0
    Contact: opensource@shinesolutions.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ComAdobeCqDamS7imagingImplIsImageServerComponentProperties(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'tcp_port': 'ConfigNodePropertyString',
        'allow_remote_access': 'ConfigNodePropertyBoolean',
        'max_render_rgn_pixels': 'ConfigNodePropertyString',
        'max_message_size': 'ConfigNodePropertyString',
        'random_access_url_timeout': 'ConfigNodePropertyInteger',
        'worker_threads': 'ConfigNodePropertyInteger'
    }

    attribute_map = {
        'tcp_port': 'TcpPort',
        'allow_remote_access': 'AllowRemoteAccess',
        'max_render_rgn_pixels': 'MaxRenderRgnPixels',
        'max_message_size': 'MaxMessageSize',
        'random_access_url_timeout': 'RandomAccessUrlTimeout',
        'worker_threads': 'WorkerThreads'
    }

    def __init__(self, tcp_port=None, allow_remote_access=None, max_render_rgn_pixels=None, max_message_size=None, random_access_url_timeout=None, worker_threads=None):  # noqa: E501
        """ComAdobeCqDamS7imagingImplIsImageServerComponentProperties - a model defined in OpenAPI"""  # noqa: E501

        self._tcp_port = None
        self._allow_remote_access = None
        self._max_render_rgn_pixels = None
        self._max_message_size = None
        self._random_access_url_timeout = None
        self._worker_threads = None
        self.discriminator = None

        if tcp_port is not None:
            self.tcp_port = tcp_port
        if allow_remote_access is not None:
            self.allow_remote_access = allow_remote_access
        if max_render_rgn_pixels is not None:
            self.max_render_rgn_pixels = max_render_rgn_pixels
        if max_message_size is not None:
            self.max_message_size = max_message_size
        if random_access_url_timeout is not None:
            self.random_access_url_timeout = random_access_url_timeout
        if worker_threads is not None:
            self.worker_threads = worker_threads

    @property
    def tcp_port(self):
        """Gets the tcp_port of this ComAdobeCqDamS7imagingImplIsImageServerComponentProperties.  # noqa: E501


        :return: The tcp_port of this ComAdobeCqDamS7imagingImplIsImageServerComponentProperties.  # noqa: E501
        :rtype: ConfigNodePropertyString
        """
        return self._tcp_port

    @tcp_port.setter
    def tcp_port(self, tcp_port):
        """Sets the tcp_port of this ComAdobeCqDamS7imagingImplIsImageServerComponentProperties.


        :param tcp_port: The tcp_port of this ComAdobeCqDamS7imagingImplIsImageServerComponentProperties.  # noqa: E501
        :type: ConfigNodePropertyString
        """

        self._tcp_port = tcp_port

    @property
    def allow_remote_access(self):
        """Gets the allow_remote_access of this ComAdobeCqDamS7imagingImplIsImageServerComponentProperties.  # noqa: E501


        :return: The allow_remote_access of this ComAdobeCqDamS7imagingImplIsImageServerComponentProperties.  # noqa: E501
        :rtype: ConfigNodePropertyBoolean
        """
        return self._allow_remote_access

    @allow_remote_access.setter
    def allow_remote_access(self, allow_remote_access):
        """Sets the allow_remote_access of this ComAdobeCqDamS7imagingImplIsImageServerComponentProperties.


        :param allow_remote_access: The allow_remote_access of this ComAdobeCqDamS7imagingImplIsImageServerComponentProperties.  # noqa: E501
        :type: ConfigNodePropertyBoolean
        """

        self._allow_remote_access = allow_remote_access

    @property
    def max_render_rgn_pixels(self):
        """Gets the max_render_rgn_pixels of this ComAdobeCqDamS7imagingImplIsImageServerComponentProperties.  # noqa: E501


        :return: The max_render_rgn_pixels of this ComAdobeCqDamS7imagingImplIsImageServerComponentProperties.  # noqa: E501
        :rtype: ConfigNodePropertyString
        """
        return self._max_render_rgn_pixels

    @max_render_rgn_pixels.setter
    def max_render_rgn_pixels(self, max_render_rgn_pixels):
        """Sets the max_render_rgn_pixels of this ComAdobeCqDamS7imagingImplIsImageServerComponentProperties.


        :param max_render_rgn_pixels: The max_render_rgn_pixels of this ComAdobeCqDamS7imagingImplIsImageServerComponentProperties.  # noqa: E501
        :type: ConfigNodePropertyString
        """

        self._max_render_rgn_pixels = max_render_rgn_pixels

    @property
    def max_message_size(self):
        """Gets the max_message_size of this ComAdobeCqDamS7imagingImplIsImageServerComponentProperties.  # noqa: E501


        :return: The max_message_size of this ComAdobeCqDamS7imagingImplIsImageServerComponentProperties.  # noqa: E501
        :rtype: ConfigNodePropertyString
        """
        return self._max_message_size

    @max_message_size.setter
    def max_message_size(self, max_message_size):
        """Sets the max_message_size of this ComAdobeCqDamS7imagingImplIsImageServerComponentProperties.


        :param max_message_size: The max_message_size of this ComAdobeCqDamS7imagingImplIsImageServerComponentProperties.  # noqa: E501
        :type: ConfigNodePropertyString
        """

        self._max_message_size = max_message_size

    @property
    def random_access_url_timeout(self):
        """Gets the random_access_url_timeout of this ComAdobeCqDamS7imagingImplIsImageServerComponentProperties.  # noqa: E501


        :return: The random_access_url_timeout of this ComAdobeCqDamS7imagingImplIsImageServerComponentProperties.  # noqa: E501
        :rtype: ConfigNodePropertyInteger
        """
        return self._random_access_url_timeout

    @random_access_url_timeout.setter
    def random_access_url_timeout(self, random_access_url_timeout):
        """Sets the random_access_url_timeout of this ComAdobeCqDamS7imagingImplIsImageServerComponentProperties.


        :param random_access_url_timeout: The random_access_url_timeout of this ComAdobeCqDamS7imagingImplIsImageServerComponentProperties.  # noqa: E501
        :type: ConfigNodePropertyInteger
        """

        self._random_access_url_timeout = random_access_url_timeout

    @property
    def worker_threads(self):
        """Gets the worker_threads of this ComAdobeCqDamS7imagingImplIsImageServerComponentProperties.  # noqa: E501


        :return: The worker_threads of this ComAdobeCqDamS7imagingImplIsImageServerComponentProperties.  # noqa: E501
        :rtype: ConfigNodePropertyInteger
        """
        return self._worker_threads

    @worker_threads.setter
    def worker_threads(self, worker_threads):
        """Sets the worker_threads of this ComAdobeCqDamS7imagingImplIsImageServerComponentProperties.


        :param worker_threads: The worker_threads of this ComAdobeCqDamS7imagingImplIsImageServerComponentProperties.  # noqa: E501
        :type: ConfigNodePropertyInteger
        """

        self._worker_threads = worker_threads

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComAdobeCqDamS7imagingImplIsImageServerComponentProperties):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
