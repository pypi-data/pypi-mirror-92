# coding: utf-8

"""
    Adobe Experience Manager OSGI config (AEM) API

    Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API  # noqa: E501

    OpenAPI spec version: 1.0.0-pre.0
    Contact: opensource@shinesolutions.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'path': 'ConfigNodePropertyString',
        'token_required_attr': 'ConfigNodePropertyDropDown',
        'token_alternate_url': 'ConfigNodePropertyString',
        'token_encapsulated': 'ConfigNodePropertyBoolean',
        'skip_token_refresh': 'ConfigNodePropertyArray'
    }

    attribute_map = {
        'path': 'path',
        'token_required_attr': 'token.required.attr',
        'token_alternate_url': 'token.alternate.url',
        'token_encapsulated': 'token.encapsulated',
        'skip_token_refresh': 'skip.token.refresh'
    }

    def __init__(self, path=None, token_required_attr=None, token_alternate_url=None, token_encapsulated=None, skip_token_refresh=None):  # noqa: E501
        """ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties - a model defined in OpenAPI"""  # noqa: E501

        self._path = None
        self._token_required_attr = None
        self._token_alternate_url = None
        self._token_encapsulated = None
        self._skip_token_refresh = None
        self.discriminator = None

        if path is not None:
            self.path = path
        if token_required_attr is not None:
            self.token_required_attr = token_required_attr
        if token_alternate_url is not None:
            self.token_alternate_url = token_alternate_url
        if token_encapsulated is not None:
            self.token_encapsulated = token_encapsulated
        if skip_token_refresh is not None:
            self.skip_token_refresh = skip_token_refresh

    @property
    def path(self):
        """Gets the path of this ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties.  # noqa: E501


        :return: The path of this ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties.  # noqa: E501
        :rtype: ConfigNodePropertyString
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties.


        :param path: The path of this ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties.  # noqa: E501
        :type: ConfigNodePropertyString
        """

        self._path = path

    @property
    def token_required_attr(self):
        """Gets the token_required_attr of this ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties.  # noqa: E501


        :return: The token_required_attr of this ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties.  # noqa: E501
        :rtype: ConfigNodePropertyDropDown
        """
        return self._token_required_attr

    @token_required_attr.setter
    def token_required_attr(self, token_required_attr):
        """Sets the token_required_attr of this ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties.


        :param token_required_attr: The token_required_attr of this ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties.  # noqa: E501
        :type: ConfigNodePropertyDropDown
        """

        self._token_required_attr = token_required_attr

    @property
    def token_alternate_url(self):
        """Gets the token_alternate_url of this ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties.  # noqa: E501


        :return: The token_alternate_url of this ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties.  # noqa: E501
        :rtype: ConfigNodePropertyString
        """
        return self._token_alternate_url

    @token_alternate_url.setter
    def token_alternate_url(self, token_alternate_url):
        """Sets the token_alternate_url of this ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties.


        :param token_alternate_url: The token_alternate_url of this ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties.  # noqa: E501
        :type: ConfigNodePropertyString
        """

        self._token_alternate_url = token_alternate_url

    @property
    def token_encapsulated(self):
        """Gets the token_encapsulated of this ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties.  # noqa: E501


        :return: The token_encapsulated of this ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties.  # noqa: E501
        :rtype: ConfigNodePropertyBoolean
        """
        return self._token_encapsulated

    @token_encapsulated.setter
    def token_encapsulated(self, token_encapsulated):
        """Sets the token_encapsulated of this ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties.


        :param token_encapsulated: The token_encapsulated of this ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties.  # noqa: E501
        :type: ConfigNodePropertyBoolean
        """

        self._token_encapsulated = token_encapsulated

    @property
    def skip_token_refresh(self):
        """Gets the skip_token_refresh of this ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties.  # noqa: E501


        :return: The skip_token_refresh of this ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties.  # noqa: E501
        :rtype: ConfigNodePropertyArray
        """
        return self._skip_token_refresh

    @skip_token_refresh.setter
    def skip_token_refresh(self, skip_token_refresh):
        """Sets the skip_token_refresh of this ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties.


        :param skip_token_refresh: The skip_token_refresh of this ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties.  # noqa: E501
        :type: ConfigNodePropertyArray
        """

        self._skip_token_refresh = skip_token_refresh

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
