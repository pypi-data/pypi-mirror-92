# coding: utf-8

"""
    Adobe Experience Manager OSGI config (AEM) API

    Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API  # noqa: E501

    OpenAPI spec version: 1.0.0-pre.0
    Contact: opensource@shinesolutions.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ComDayCqDamCoreImplDamEventRecorderImplProperties(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'event_filter': 'ConfigNodePropertyString',
        'event_queue_length': 'ConfigNodePropertyInteger',
        'eventrecorder_enabled': 'ConfigNodePropertyBoolean',
        'eventrecorder_blacklist': 'ConfigNodePropertyArray',
        'eventrecorder_eventtypes': 'ConfigNodePropertyDropDown'
    }

    attribute_map = {
        'event_filter': 'event.filter',
        'event_queue_length': 'event.queue.length',
        'eventrecorder_enabled': 'eventrecorder.enabled',
        'eventrecorder_blacklist': 'eventrecorder.blacklist',
        'eventrecorder_eventtypes': 'eventrecorder.eventtypes'
    }

    def __init__(self, event_filter=None, event_queue_length=None, eventrecorder_enabled=None, eventrecorder_blacklist=None, eventrecorder_eventtypes=None):  # noqa: E501
        """ComDayCqDamCoreImplDamEventRecorderImplProperties - a model defined in OpenAPI"""  # noqa: E501

        self._event_filter = None
        self._event_queue_length = None
        self._eventrecorder_enabled = None
        self._eventrecorder_blacklist = None
        self._eventrecorder_eventtypes = None
        self.discriminator = None

        if event_filter is not None:
            self.event_filter = event_filter
        if event_queue_length is not None:
            self.event_queue_length = event_queue_length
        if eventrecorder_enabled is not None:
            self.eventrecorder_enabled = eventrecorder_enabled
        if eventrecorder_blacklist is not None:
            self.eventrecorder_blacklist = eventrecorder_blacklist
        if eventrecorder_eventtypes is not None:
            self.eventrecorder_eventtypes = eventrecorder_eventtypes

    @property
    def event_filter(self):
        """Gets the event_filter of this ComDayCqDamCoreImplDamEventRecorderImplProperties.  # noqa: E501


        :return: The event_filter of this ComDayCqDamCoreImplDamEventRecorderImplProperties.  # noqa: E501
        :rtype: ConfigNodePropertyString
        """
        return self._event_filter

    @event_filter.setter
    def event_filter(self, event_filter):
        """Sets the event_filter of this ComDayCqDamCoreImplDamEventRecorderImplProperties.


        :param event_filter: The event_filter of this ComDayCqDamCoreImplDamEventRecorderImplProperties.  # noqa: E501
        :type: ConfigNodePropertyString
        """

        self._event_filter = event_filter

    @property
    def event_queue_length(self):
        """Gets the event_queue_length of this ComDayCqDamCoreImplDamEventRecorderImplProperties.  # noqa: E501


        :return: The event_queue_length of this ComDayCqDamCoreImplDamEventRecorderImplProperties.  # noqa: E501
        :rtype: ConfigNodePropertyInteger
        """
        return self._event_queue_length

    @event_queue_length.setter
    def event_queue_length(self, event_queue_length):
        """Sets the event_queue_length of this ComDayCqDamCoreImplDamEventRecorderImplProperties.


        :param event_queue_length: The event_queue_length of this ComDayCqDamCoreImplDamEventRecorderImplProperties.  # noqa: E501
        :type: ConfigNodePropertyInteger
        """

        self._event_queue_length = event_queue_length

    @property
    def eventrecorder_enabled(self):
        """Gets the eventrecorder_enabled of this ComDayCqDamCoreImplDamEventRecorderImplProperties.  # noqa: E501


        :return: The eventrecorder_enabled of this ComDayCqDamCoreImplDamEventRecorderImplProperties.  # noqa: E501
        :rtype: ConfigNodePropertyBoolean
        """
        return self._eventrecorder_enabled

    @eventrecorder_enabled.setter
    def eventrecorder_enabled(self, eventrecorder_enabled):
        """Sets the eventrecorder_enabled of this ComDayCqDamCoreImplDamEventRecorderImplProperties.


        :param eventrecorder_enabled: The eventrecorder_enabled of this ComDayCqDamCoreImplDamEventRecorderImplProperties.  # noqa: E501
        :type: ConfigNodePropertyBoolean
        """

        self._eventrecorder_enabled = eventrecorder_enabled

    @property
    def eventrecorder_blacklist(self):
        """Gets the eventrecorder_blacklist of this ComDayCqDamCoreImplDamEventRecorderImplProperties.  # noqa: E501


        :return: The eventrecorder_blacklist of this ComDayCqDamCoreImplDamEventRecorderImplProperties.  # noqa: E501
        :rtype: ConfigNodePropertyArray
        """
        return self._eventrecorder_blacklist

    @eventrecorder_blacklist.setter
    def eventrecorder_blacklist(self, eventrecorder_blacklist):
        """Sets the eventrecorder_blacklist of this ComDayCqDamCoreImplDamEventRecorderImplProperties.


        :param eventrecorder_blacklist: The eventrecorder_blacklist of this ComDayCqDamCoreImplDamEventRecorderImplProperties.  # noqa: E501
        :type: ConfigNodePropertyArray
        """

        self._eventrecorder_blacklist = eventrecorder_blacklist

    @property
    def eventrecorder_eventtypes(self):
        """Gets the eventrecorder_eventtypes of this ComDayCqDamCoreImplDamEventRecorderImplProperties.  # noqa: E501


        :return: The eventrecorder_eventtypes of this ComDayCqDamCoreImplDamEventRecorderImplProperties.  # noqa: E501
        :rtype: ConfigNodePropertyDropDown
        """
        return self._eventrecorder_eventtypes

    @eventrecorder_eventtypes.setter
    def eventrecorder_eventtypes(self, eventrecorder_eventtypes):
        """Sets the eventrecorder_eventtypes of this ComDayCqDamCoreImplDamEventRecorderImplProperties.


        :param eventrecorder_eventtypes: The eventrecorder_eventtypes of this ComDayCqDamCoreImplDamEventRecorderImplProperties.  # noqa: E501
        :type: ConfigNodePropertyDropDown
        """

        self._eventrecorder_eventtypes = eventrecorder_eventtypes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComDayCqDamCoreImplDamEventRecorderImplProperties):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
