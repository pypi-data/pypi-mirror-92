# coding: utf-8

"""
    Adobe Experience Manager OSGI config (AEM) API

    Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API  # noqa: E501

    OpenAPI spec version: 1.0.0-pre.0
    Contact: opensource@shinesolutions.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'service_ranking': 'ConfigNodePropertyInteger',
        'global_size': 'ConfigNodePropertyInteger',
        'max_disk_usage': 'ConfigNodePropertyInteger',
        'persistence_enabled': 'ConfigNodePropertyBoolean',
        'thread_pool_max_size': 'ConfigNodePropertyInteger',
        'scheduled_thread_pool_max_size': 'ConfigNodePropertyInteger',
        'graceful_shutdown_timeout': 'ConfigNodePropertyInteger',
        'queues': 'ConfigNodePropertyArray',
        'topics': 'ConfigNodePropertyArray',
        'addresses_max_delivery_attempts': 'ConfigNodePropertyInteger',
        'addresses_expiry_delay': 'ConfigNodePropertyInteger',
        'addresses_address_full_message_policy': 'ConfigNodePropertyDropDown',
        'addresses_max_size_bytes': 'ConfigNodePropertyInteger',
        'addresses_page_size_bytes': 'ConfigNodePropertyInteger',
        'addresses_page_cache_max_size': 'ConfigNodePropertyInteger',
        'cluster_user': 'ConfigNodePropertyString',
        'cluster_password': 'ConfigNodePropertyString',
        'cluster_call_timeout': 'ConfigNodePropertyInteger',
        'cluster_call_failover_timeout': 'ConfigNodePropertyInteger',
        'cluster_client_failure_check_period': 'ConfigNodePropertyInteger',
        'cluster_notification_attempts': 'ConfigNodePropertyInteger',
        'cluster_notification_interval': 'ConfigNodePropertyInteger',
        'id_cache_size': 'ConfigNodePropertyInteger',
        'cluster_confirmation_window_size': 'ConfigNodePropertyInteger',
        'cluster_connection_ttl': 'ConfigNodePropertyInteger',
        'cluster_duplicate_detection': 'ConfigNodePropertyBoolean',
        'cluster_initial_connect_attempts': 'ConfigNodePropertyInteger',
        'cluster_max_retry_interval': 'ConfigNodePropertyInteger',
        'cluster_min_large_message_size': 'ConfigNodePropertyInteger',
        'cluster_producer_window_size': 'ConfigNodePropertyInteger',
        'cluster_reconnect_attempts': 'ConfigNodePropertyInteger',
        'cluster_retry_interval': 'ConfigNodePropertyInteger',
        'cluster_retry_interval_multiplier': 'ConfigNodePropertyFloat'
    }

    attribute_map = {
        'service_ranking': 'service.ranking',
        'global_size': 'global.size',
        'max_disk_usage': 'max.disk.usage',
        'persistence_enabled': 'persistence.enabled',
        'thread_pool_max_size': 'thread.pool.max.size',
        'scheduled_thread_pool_max_size': 'scheduled.thread.pool.max.size',
        'graceful_shutdown_timeout': 'graceful.shutdown.timeout',
        'queues': 'queues',
        'topics': 'topics',
        'addresses_max_delivery_attempts': 'addresses.max.delivery.attempts',
        'addresses_expiry_delay': 'addresses.expiry.delay',
        'addresses_address_full_message_policy': 'addresses.address.full.message.policy',
        'addresses_max_size_bytes': 'addresses.max.size.bytes',
        'addresses_page_size_bytes': 'addresses.page.size.bytes',
        'addresses_page_cache_max_size': 'addresses.page.cache.max.size',
        'cluster_user': 'cluster.user',
        'cluster_password': 'cluster.password',
        'cluster_call_timeout': 'cluster.call.timeout',
        'cluster_call_failover_timeout': 'cluster.call.failover.timeout',
        'cluster_client_failure_check_period': 'cluster.client.failure.check.period',
        'cluster_notification_attempts': 'cluster.notification.attempts',
        'cluster_notification_interval': 'cluster.notification.interval',
        'id_cache_size': 'id.cache.size',
        'cluster_confirmation_window_size': 'cluster.confirmation.window.size',
        'cluster_connection_ttl': 'cluster.connection.ttl',
        'cluster_duplicate_detection': 'cluster.duplicate.detection',
        'cluster_initial_connect_attempts': 'cluster.initial.connect.attempts',
        'cluster_max_retry_interval': 'cluster.max.retry.interval',
        'cluster_min_large_message_size': 'cluster.min.large.message.size',
        'cluster_producer_window_size': 'cluster.producer.window.size',
        'cluster_reconnect_attempts': 'cluster.reconnect.attempts',
        'cluster_retry_interval': 'cluster.retry.interval',
        'cluster_retry_interval_multiplier': 'cluster.retry.interval.multiplier'
    }

    def __init__(self, service_ranking=None, global_size=None, max_disk_usage=None, persistence_enabled=None, thread_pool_max_size=None, scheduled_thread_pool_max_size=None, graceful_shutdown_timeout=None, queues=None, topics=None, addresses_max_delivery_attempts=None, addresses_expiry_delay=None, addresses_address_full_message_policy=None, addresses_max_size_bytes=None, addresses_page_size_bytes=None, addresses_page_cache_max_size=None, cluster_user=None, cluster_password=None, cluster_call_timeout=None, cluster_call_failover_timeout=None, cluster_client_failure_check_period=None, cluster_notification_attempts=None, cluster_notification_interval=None, id_cache_size=None, cluster_confirmation_window_size=None, cluster_connection_ttl=None, cluster_duplicate_detection=None, cluster_initial_connect_attempts=None, cluster_max_retry_interval=None, cluster_min_large_message_size=None, cluster_producer_window_size=None, cluster_reconnect_attempts=None, cluster_retry_interval=None, cluster_retry_interval_multiplier=None):  # noqa: E501
        """ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties - a model defined in OpenAPI"""  # noqa: E501

        self._service_ranking = None
        self._global_size = None
        self._max_disk_usage = None
        self._persistence_enabled = None
        self._thread_pool_max_size = None
        self._scheduled_thread_pool_max_size = None
        self._graceful_shutdown_timeout = None
        self._queues = None
        self._topics = None
        self._addresses_max_delivery_attempts = None
        self._addresses_expiry_delay = None
        self._addresses_address_full_message_policy = None
        self._addresses_max_size_bytes = None
        self._addresses_page_size_bytes = None
        self._addresses_page_cache_max_size = None
        self._cluster_user = None
        self._cluster_password = None
        self._cluster_call_timeout = None
        self._cluster_call_failover_timeout = None
        self._cluster_client_failure_check_period = None
        self._cluster_notification_attempts = None
        self._cluster_notification_interval = None
        self._id_cache_size = None
        self._cluster_confirmation_window_size = None
        self._cluster_connection_ttl = None
        self._cluster_duplicate_detection = None
        self._cluster_initial_connect_attempts = None
        self._cluster_max_retry_interval = None
        self._cluster_min_large_message_size = None
        self._cluster_producer_window_size = None
        self._cluster_reconnect_attempts = None
        self._cluster_retry_interval = None
        self._cluster_retry_interval_multiplier = None
        self.discriminator = None

        if service_ranking is not None:
            self.service_ranking = service_ranking
        if global_size is not None:
            self.global_size = global_size
        if max_disk_usage is not None:
            self.max_disk_usage = max_disk_usage
        if persistence_enabled is not None:
            self.persistence_enabled = persistence_enabled
        if thread_pool_max_size is not None:
            self.thread_pool_max_size = thread_pool_max_size
        if scheduled_thread_pool_max_size is not None:
            self.scheduled_thread_pool_max_size = scheduled_thread_pool_max_size
        if graceful_shutdown_timeout is not None:
            self.graceful_shutdown_timeout = graceful_shutdown_timeout
        if queues is not None:
            self.queues = queues
        if topics is not None:
            self.topics = topics
        if addresses_max_delivery_attempts is not None:
            self.addresses_max_delivery_attempts = addresses_max_delivery_attempts
        if addresses_expiry_delay is not None:
            self.addresses_expiry_delay = addresses_expiry_delay
        if addresses_address_full_message_policy is not None:
            self.addresses_address_full_message_policy = addresses_address_full_message_policy
        if addresses_max_size_bytes is not None:
            self.addresses_max_size_bytes = addresses_max_size_bytes
        if addresses_page_size_bytes is not None:
            self.addresses_page_size_bytes = addresses_page_size_bytes
        if addresses_page_cache_max_size is not None:
            self.addresses_page_cache_max_size = addresses_page_cache_max_size
        if cluster_user is not None:
            self.cluster_user = cluster_user
        if cluster_password is not None:
            self.cluster_password = cluster_password
        if cluster_call_timeout is not None:
            self.cluster_call_timeout = cluster_call_timeout
        if cluster_call_failover_timeout is not None:
            self.cluster_call_failover_timeout = cluster_call_failover_timeout
        if cluster_client_failure_check_period is not None:
            self.cluster_client_failure_check_period = cluster_client_failure_check_period
        if cluster_notification_attempts is not None:
            self.cluster_notification_attempts = cluster_notification_attempts
        if cluster_notification_interval is not None:
            self.cluster_notification_interval = cluster_notification_interval
        if id_cache_size is not None:
            self.id_cache_size = id_cache_size
        if cluster_confirmation_window_size is not None:
            self.cluster_confirmation_window_size = cluster_confirmation_window_size
        if cluster_connection_ttl is not None:
            self.cluster_connection_ttl = cluster_connection_ttl
        if cluster_duplicate_detection is not None:
            self.cluster_duplicate_detection = cluster_duplicate_detection
        if cluster_initial_connect_attempts is not None:
            self.cluster_initial_connect_attempts = cluster_initial_connect_attempts
        if cluster_max_retry_interval is not None:
            self.cluster_max_retry_interval = cluster_max_retry_interval
        if cluster_min_large_message_size is not None:
            self.cluster_min_large_message_size = cluster_min_large_message_size
        if cluster_producer_window_size is not None:
            self.cluster_producer_window_size = cluster_producer_window_size
        if cluster_reconnect_attempts is not None:
            self.cluster_reconnect_attempts = cluster_reconnect_attempts
        if cluster_retry_interval is not None:
            self.cluster_retry_interval = cluster_retry_interval
        if cluster_retry_interval_multiplier is not None:
            self.cluster_retry_interval_multiplier = cluster_retry_interval_multiplier

    @property
    def service_ranking(self):
        """Gets the service_ranking of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.  # noqa: E501


        :return: The service_ranking of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.  # noqa: E501
        :rtype: ConfigNodePropertyInteger
        """
        return self._service_ranking

    @service_ranking.setter
    def service_ranking(self, service_ranking):
        """Sets the service_ranking of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.


        :param service_ranking: The service_ranking of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.  # noqa: E501
        :type: ConfigNodePropertyInteger
        """

        self._service_ranking = service_ranking

    @property
    def global_size(self):
        """Gets the global_size of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.  # noqa: E501


        :return: The global_size of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.  # noqa: E501
        :rtype: ConfigNodePropertyInteger
        """
        return self._global_size

    @global_size.setter
    def global_size(self, global_size):
        """Sets the global_size of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.


        :param global_size: The global_size of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.  # noqa: E501
        :type: ConfigNodePropertyInteger
        """

        self._global_size = global_size

    @property
    def max_disk_usage(self):
        """Gets the max_disk_usage of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.  # noqa: E501


        :return: The max_disk_usage of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.  # noqa: E501
        :rtype: ConfigNodePropertyInteger
        """
        return self._max_disk_usage

    @max_disk_usage.setter
    def max_disk_usage(self, max_disk_usage):
        """Sets the max_disk_usage of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.


        :param max_disk_usage: The max_disk_usage of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.  # noqa: E501
        :type: ConfigNodePropertyInteger
        """

        self._max_disk_usage = max_disk_usage

    @property
    def persistence_enabled(self):
        """Gets the persistence_enabled of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.  # noqa: E501


        :return: The persistence_enabled of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.  # noqa: E501
        :rtype: ConfigNodePropertyBoolean
        """
        return self._persistence_enabled

    @persistence_enabled.setter
    def persistence_enabled(self, persistence_enabled):
        """Sets the persistence_enabled of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.


        :param persistence_enabled: The persistence_enabled of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.  # noqa: E501
        :type: ConfigNodePropertyBoolean
        """

        self._persistence_enabled = persistence_enabled

    @property
    def thread_pool_max_size(self):
        """Gets the thread_pool_max_size of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.  # noqa: E501


        :return: The thread_pool_max_size of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.  # noqa: E501
        :rtype: ConfigNodePropertyInteger
        """
        return self._thread_pool_max_size

    @thread_pool_max_size.setter
    def thread_pool_max_size(self, thread_pool_max_size):
        """Sets the thread_pool_max_size of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.


        :param thread_pool_max_size: The thread_pool_max_size of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.  # noqa: E501
        :type: ConfigNodePropertyInteger
        """

        self._thread_pool_max_size = thread_pool_max_size

    @property
    def scheduled_thread_pool_max_size(self):
        """Gets the scheduled_thread_pool_max_size of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.  # noqa: E501


        :return: The scheduled_thread_pool_max_size of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.  # noqa: E501
        :rtype: ConfigNodePropertyInteger
        """
        return self._scheduled_thread_pool_max_size

    @scheduled_thread_pool_max_size.setter
    def scheduled_thread_pool_max_size(self, scheduled_thread_pool_max_size):
        """Sets the scheduled_thread_pool_max_size of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.


        :param scheduled_thread_pool_max_size: The scheduled_thread_pool_max_size of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.  # noqa: E501
        :type: ConfigNodePropertyInteger
        """

        self._scheduled_thread_pool_max_size = scheduled_thread_pool_max_size

    @property
    def graceful_shutdown_timeout(self):
        """Gets the graceful_shutdown_timeout of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.  # noqa: E501


        :return: The graceful_shutdown_timeout of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.  # noqa: E501
        :rtype: ConfigNodePropertyInteger
        """
        return self._graceful_shutdown_timeout

    @graceful_shutdown_timeout.setter
    def graceful_shutdown_timeout(self, graceful_shutdown_timeout):
        """Sets the graceful_shutdown_timeout of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.


        :param graceful_shutdown_timeout: The graceful_shutdown_timeout of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.  # noqa: E501
        :type: ConfigNodePropertyInteger
        """

        self._graceful_shutdown_timeout = graceful_shutdown_timeout

    @property
    def queues(self):
        """Gets the queues of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.  # noqa: E501


        :return: The queues of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.  # noqa: E501
        :rtype: ConfigNodePropertyArray
        """
        return self._queues

    @queues.setter
    def queues(self, queues):
        """Sets the queues of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.


        :param queues: The queues of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.  # noqa: E501
        :type: ConfigNodePropertyArray
        """

        self._queues = queues

    @property
    def topics(self):
        """Gets the topics of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.  # noqa: E501


        :return: The topics of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.  # noqa: E501
        :rtype: ConfigNodePropertyArray
        """
        return self._topics

    @topics.setter
    def topics(self, topics):
        """Sets the topics of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.


        :param topics: The topics of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.  # noqa: E501
        :type: ConfigNodePropertyArray
        """

        self._topics = topics

    @property
    def addresses_max_delivery_attempts(self):
        """Gets the addresses_max_delivery_attempts of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.  # noqa: E501


        :return: The addresses_max_delivery_attempts of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.  # noqa: E501
        :rtype: ConfigNodePropertyInteger
        """
        return self._addresses_max_delivery_attempts

    @addresses_max_delivery_attempts.setter
    def addresses_max_delivery_attempts(self, addresses_max_delivery_attempts):
        """Sets the addresses_max_delivery_attempts of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.


        :param addresses_max_delivery_attempts: The addresses_max_delivery_attempts of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.  # noqa: E501
        :type: ConfigNodePropertyInteger
        """

        self._addresses_max_delivery_attempts = addresses_max_delivery_attempts

    @property
    def addresses_expiry_delay(self):
        """Gets the addresses_expiry_delay of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.  # noqa: E501


        :return: The addresses_expiry_delay of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.  # noqa: E501
        :rtype: ConfigNodePropertyInteger
        """
        return self._addresses_expiry_delay

    @addresses_expiry_delay.setter
    def addresses_expiry_delay(self, addresses_expiry_delay):
        """Sets the addresses_expiry_delay of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.


        :param addresses_expiry_delay: The addresses_expiry_delay of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.  # noqa: E501
        :type: ConfigNodePropertyInteger
        """

        self._addresses_expiry_delay = addresses_expiry_delay

    @property
    def addresses_address_full_message_policy(self):
        """Gets the addresses_address_full_message_policy of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.  # noqa: E501


        :return: The addresses_address_full_message_policy of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.  # noqa: E501
        :rtype: ConfigNodePropertyDropDown
        """
        return self._addresses_address_full_message_policy

    @addresses_address_full_message_policy.setter
    def addresses_address_full_message_policy(self, addresses_address_full_message_policy):
        """Sets the addresses_address_full_message_policy of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.


        :param addresses_address_full_message_policy: The addresses_address_full_message_policy of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.  # noqa: E501
        :type: ConfigNodePropertyDropDown
        """

        self._addresses_address_full_message_policy = addresses_address_full_message_policy

    @property
    def addresses_max_size_bytes(self):
        """Gets the addresses_max_size_bytes of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.  # noqa: E501


        :return: The addresses_max_size_bytes of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.  # noqa: E501
        :rtype: ConfigNodePropertyInteger
        """
        return self._addresses_max_size_bytes

    @addresses_max_size_bytes.setter
    def addresses_max_size_bytes(self, addresses_max_size_bytes):
        """Sets the addresses_max_size_bytes of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.


        :param addresses_max_size_bytes: The addresses_max_size_bytes of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.  # noqa: E501
        :type: ConfigNodePropertyInteger
        """

        self._addresses_max_size_bytes = addresses_max_size_bytes

    @property
    def addresses_page_size_bytes(self):
        """Gets the addresses_page_size_bytes of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.  # noqa: E501


        :return: The addresses_page_size_bytes of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.  # noqa: E501
        :rtype: ConfigNodePropertyInteger
        """
        return self._addresses_page_size_bytes

    @addresses_page_size_bytes.setter
    def addresses_page_size_bytes(self, addresses_page_size_bytes):
        """Sets the addresses_page_size_bytes of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.


        :param addresses_page_size_bytes: The addresses_page_size_bytes of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.  # noqa: E501
        :type: ConfigNodePropertyInteger
        """

        self._addresses_page_size_bytes = addresses_page_size_bytes

    @property
    def addresses_page_cache_max_size(self):
        """Gets the addresses_page_cache_max_size of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.  # noqa: E501


        :return: The addresses_page_cache_max_size of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.  # noqa: E501
        :rtype: ConfigNodePropertyInteger
        """
        return self._addresses_page_cache_max_size

    @addresses_page_cache_max_size.setter
    def addresses_page_cache_max_size(self, addresses_page_cache_max_size):
        """Sets the addresses_page_cache_max_size of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.


        :param addresses_page_cache_max_size: The addresses_page_cache_max_size of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.  # noqa: E501
        :type: ConfigNodePropertyInteger
        """

        self._addresses_page_cache_max_size = addresses_page_cache_max_size

    @property
    def cluster_user(self):
        """Gets the cluster_user of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.  # noqa: E501


        :return: The cluster_user of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.  # noqa: E501
        :rtype: ConfigNodePropertyString
        """
        return self._cluster_user

    @cluster_user.setter
    def cluster_user(self, cluster_user):
        """Sets the cluster_user of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.


        :param cluster_user: The cluster_user of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.  # noqa: E501
        :type: ConfigNodePropertyString
        """

        self._cluster_user = cluster_user

    @property
    def cluster_password(self):
        """Gets the cluster_password of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.  # noqa: E501


        :return: The cluster_password of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.  # noqa: E501
        :rtype: ConfigNodePropertyString
        """
        return self._cluster_password

    @cluster_password.setter
    def cluster_password(self, cluster_password):
        """Sets the cluster_password of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.


        :param cluster_password: The cluster_password of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.  # noqa: E501
        :type: ConfigNodePropertyString
        """

        self._cluster_password = cluster_password

    @property
    def cluster_call_timeout(self):
        """Gets the cluster_call_timeout of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.  # noqa: E501


        :return: The cluster_call_timeout of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.  # noqa: E501
        :rtype: ConfigNodePropertyInteger
        """
        return self._cluster_call_timeout

    @cluster_call_timeout.setter
    def cluster_call_timeout(self, cluster_call_timeout):
        """Sets the cluster_call_timeout of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.


        :param cluster_call_timeout: The cluster_call_timeout of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.  # noqa: E501
        :type: ConfigNodePropertyInteger
        """

        self._cluster_call_timeout = cluster_call_timeout

    @property
    def cluster_call_failover_timeout(self):
        """Gets the cluster_call_failover_timeout of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.  # noqa: E501


        :return: The cluster_call_failover_timeout of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.  # noqa: E501
        :rtype: ConfigNodePropertyInteger
        """
        return self._cluster_call_failover_timeout

    @cluster_call_failover_timeout.setter
    def cluster_call_failover_timeout(self, cluster_call_failover_timeout):
        """Sets the cluster_call_failover_timeout of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.


        :param cluster_call_failover_timeout: The cluster_call_failover_timeout of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.  # noqa: E501
        :type: ConfigNodePropertyInteger
        """

        self._cluster_call_failover_timeout = cluster_call_failover_timeout

    @property
    def cluster_client_failure_check_period(self):
        """Gets the cluster_client_failure_check_period of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.  # noqa: E501


        :return: The cluster_client_failure_check_period of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.  # noqa: E501
        :rtype: ConfigNodePropertyInteger
        """
        return self._cluster_client_failure_check_period

    @cluster_client_failure_check_period.setter
    def cluster_client_failure_check_period(self, cluster_client_failure_check_period):
        """Sets the cluster_client_failure_check_period of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.


        :param cluster_client_failure_check_period: The cluster_client_failure_check_period of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.  # noqa: E501
        :type: ConfigNodePropertyInteger
        """

        self._cluster_client_failure_check_period = cluster_client_failure_check_period

    @property
    def cluster_notification_attempts(self):
        """Gets the cluster_notification_attempts of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.  # noqa: E501


        :return: The cluster_notification_attempts of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.  # noqa: E501
        :rtype: ConfigNodePropertyInteger
        """
        return self._cluster_notification_attempts

    @cluster_notification_attempts.setter
    def cluster_notification_attempts(self, cluster_notification_attempts):
        """Sets the cluster_notification_attempts of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.


        :param cluster_notification_attempts: The cluster_notification_attempts of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.  # noqa: E501
        :type: ConfigNodePropertyInteger
        """

        self._cluster_notification_attempts = cluster_notification_attempts

    @property
    def cluster_notification_interval(self):
        """Gets the cluster_notification_interval of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.  # noqa: E501


        :return: The cluster_notification_interval of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.  # noqa: E501
        :rtype: ConfigNodePropertyInteger
        """
        return self._cluster_notification_interval

    @cluster_notification_interval.setter
    def cluster_notification_interval(self, cluster_notification_interval):
        """Sets the cluster_notification_interval of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.


        :param cluster_notification_interval: The cluster_notification_interval of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.  # noqa: E501
        :type: ConfigNodePropertyInteger
        """

        self._cluster_notification_interval = cluster_notification_interval

    @property
    def id_cache_size(self):
        """Gets the id_cache_size of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.  # noqa: E501


        :return: The id_cache_size of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.  # noqa: E501
        :rtype: ConfigNodePropertyInteger
        """
        return self._id_cache_size

    @id_cache_size.setter
    def id_cache_size(self, id_cache_size):
        """Sets the id_cache_size of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.


        :param id_cache_size: The id_cache_size of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.  # noqa: E501
        :type: ConfigNodePropertyInteger
        """

        self._id_cache_size = id_cache_size

    @property
    def cluster_confirmation_window_size(self):
        """Gets the cluster_confirmation_window_size of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.  # noqa: E501


        :return: The cluster_confirmation_window_size of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.  # noqa: E501
        :rtype: ConfigNodePropertyInteger
        """
        return self._cluster_confirmation_window_size

    @cluster_confirmation_window_size.setter
    def cluster_confirmation_window_size(self, cluster_confirmation_window_size):
        """Sets the cluster_confirmation_window_size of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.


        :param cluster_confirmation_window_size: The cluster_confirmation_window_size of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.  # noqa: E501
        :type: ConfigNodePropertyInteger
        """

        self._cluster_confirmation_window_size = cluster_confirmation_window_size

    @property
    def cluster_connection_ttl(self):
        """Gets the cluster_connection_ttl of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.  # noqa: E501


        :return: The cluster_connection_ttl of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.  # noqa: E501
        :rtype: ConfigNodePropertyInteger
        """
        return self._cluster_connection_ttl

    @cluster_connection_ttl.setter
    def cluster_connection_ttl(self, cluster_connection_ttl):
        """Sets the cluster_connection_ttl of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.


        :param cluster_connection_ttl: The cluster_connection_ttl of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.  # noqa: E501
        :type: ConfigNodePropertyInteger
        """

        self._cluster_connection_ttl = cluster_connection_ttl

    @property
    def cluster_duplicate_detection(self):
        """Gets the cluster_duplicate_detection of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.  # noqa: E501


        :return: The cluster_duplicate_detection of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.  # noqa: E501
        :rtype: ConfigNodePropertyBoolean
        """
        return self._cluster_duplicate_detection

    @cluster_duplicate_detection.setter
    def cluster_duplicate_detection(self, cluster_duplicate_detection):
        """Sets the cluster_duplicate_detection of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.


        :param cluster_duplicate_detection: The cluster_duplicate_detection of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.  # noqa: E501
        :type: ConfigNodePropertyBoolean
        """

        self._cluster_duplicate_detection = cluster_duplicate_detection

    @property
    def cluster_initial_connect_attempts(self):
        """Gets the cluster_initial_connect_attempts of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.  # noqa: E501


        :return: The cluster_initial_connect_attempts of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.  # noqa: E501
        :rtype: ConfigNodePropertyInteger
        """
        return self._cluster_initial_connect_attempts

    @cluster_initial_connect_attempts.setter
    def cluster_initial_connect_attempts(self, cluster_initial_connect_attempts):
        """Sets the cluster_initial_connect_attempts of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.


        :param cluster_initial_connect_attempts: The cluster_initial_connect_attempts of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.  # noqa: E501
        :type: ConfigNodePropertyInteger
        """

        self._cluster_initial_connect_attempts = cluster_initial_connect_attempts

    @property
    def cluster_max_retry_interval(self):
        """Gets the cluster_max_retry_interval of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.  # noqa: E501


        :return: The cluster_max_retry_interval of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.  # noqa: E501
        :rtype: ConfigNodePropertyInteger
        """
        return self._cluster_max_retry_interval

    @cluster_max_retry_interval.setter
    def cluster_max_retry_interval(self, cluster_max_retry_interval):
        """Sets the cluster_max_retry_interval of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.


        :param cluster_max_retry_interval: The cluster_max_retry_interval of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.  # noqa: E501
        :type: ConfigNodePropertyInteger
        """

        self._cluster_max_retry_interval = cluster_max_retry_interval

    @property
    def cluster_min_large_message_size(self):
        """Gets the cluster_min_large_message_size of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.  # noqa: E501


        :return: The cluster_min_large_message_size of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.  # noqa: E501
        :rtype: ConfigNodePropertyInteger
        """
        return self._cluster_min_large_message_size

    @cluster_min_large_message_size.setter
    def cluster_min_large_message_size(self, cluster_min_large_message_size):
        """Sets the cluster_min_large_message_size of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.


        :param cluster_min_large_message_size: The cluster_min_large_message_size of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.  # noqa: E501
        :type: ConfigNodePropertyInteger
        """

        self._cluster_min_large_message_size = cluster_min_large_message_size

    @property
    def cluster_producer_window_size(self):
        """Gets the cluster_producer_window_size of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.  # noqa: E501


        :return: The cluster_producer_window_size of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.  # noqa: E501
        :rtype: ConfigNodePropertyInteger
        """
        return self._cluster_producer_window_size

    @cluster_producer_window_size.setter
    def cluster_producer_window_size(self, cluster_producer_window_size):
        """Sets the cluster_producer_window_size of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.


        :param cluster_producer_window_size: The cluster_producer_window_size of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.  # noqa: E501
        :type: ConfigNodePropertyInteger
        """

        self._cluster_producer_window_size = cluster_producer_window_size

    @property
    def cluster_reconnect_attempts(self):
        """Gets the cluster_reconnect_attempts of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.  # noqa: E501


        :return: The cluster_reconnect_attempts of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.  # noqa: E501
        :rtype: ConfigNodePropertyInteger
        """
        return self._cluster_reconnect_attempts

    @cluster_reconnect_attempts.setter
    def cluster_reconnect_attempts(self, cluster_reconnect_attempts):
        """Sets the cluster_reconnect_attempts of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.


        :param cluster_reconnect_attempts: The cluster_reconnect_attempts of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.  # noqa: E501
        :type: ConfigNodePropertyInteger
        """

        self._cluster_reconnect_attempts = cluster_reconnect_attempts

    @property
    def cluster_retry_interval(self):
        """Gets the cluster_retry_interval of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.  # noqa: E501


        :return: The cluster_retry_interval of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.  # noqa: E501
        :rtype: ConfigNodePropertyInteger
        """
        return self._cluster_retry_interval

    @cluster_retry_interval.setter
    def cluster_retry_interval(self, cluster_retry_interval):
        """Sets the cluster_retry_interval of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.


        :param cluster_retry_interval: The cluster_retry_interval of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.  # noqa: E501
        :type: ConfigNodePropertyInteger
        """

        self._cluster_retry_interval = cluster_retry_interval

    @property
    def cluster_retry_interval_multiplier(self):
        """Gets the cluster_retry_interval_multiplier of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.  # noqa: E501


        :return: The cluster_retry_interval_multiplier of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.  # noqa: E501
        :rtype: ConfigNodePropertyFloat
        """
        return self._cluster_retry_interval_multiplier

    @cluster_retry_interval_multiplier.setter
    def cluster_retry_interval_multiplier(self, cluster_retry_interval_multiplier):
        """Sets the cluster_retry_interval_multiplier of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.


        :param cluster_retry_interval_multiplier: The cluster_retry_interval_multiplier of this ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.  # noqa: E501
        :type: ConfigNodePropertyFloat
        """

        self._cluster_retry_interval_multiplier = cluster_retry_interval_multiplier

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
