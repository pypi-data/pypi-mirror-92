# coding: utf-8

"""
    Adobe Experience Manager OSGI config (AEM) API

    Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API  # noqa: E501

    OpenAPI spec version: 1.0.0-pre.0
    Contact: opensource@shinesolutions.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class OrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'user_mapping': 'ConfigNodePropertyArray',
        'user_default': 'ConfigNodePropertyString',
        'user_enable_default_mapping': 'ConfigNodePropertyBoolean',
        'require_validation': 'ConfigNodePropertyBoolean'
    }

    attribute_map = {
        'user_mapping': 'user.mapping',
        'user_default': 'user.default',
        'user_enable_default_mapping': 'user.enable.default.mapping',
        'require_validation': 'require.validation'
    }

    def __init__(self, user_mapping=None, user_default=None, user_enable_default_mapping=None, require_validation=None):  # noqa: E501
        """OrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties - a model defined in OpenAPI"""  # noqa: E501

        self._user_mapping = None
        self._user_default = None
        self._user_enable_default_mapping = None
        self._require_validation = None
        self.discriminator = None

        if user_mapping is not None:
            self.user_mapping = user_mapping
        if user_default is not None:
            self.user_default = user_default
        if user_enable_default_mapping is not None:
            self.user_enable_default_mapping = user_enable_default_mapping
        if require_validation is not None:
            self.require_validation = require_validation

    @property
    def user_mapping(self):
        """Gets the user_mapping of this OrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties.  # noqa: E501


        :return: The user_mapping of this OrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties.  # noqa: E501
        :rtype: ConfigNodePropertyArray
        """
        return self._user_mapping

    @user_mapping.setter
    def user_mapping(self, user_mapping):
        """Sets the user_mapping of this OrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties.


        :param user_mapping: The user_mapping of this OrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties.  # noqa: E501
        :type: ConfigNodePropertyArray
        """

        self._user_mapping = user_mapping

    @property
    def user_default(self):
        """Gets the user_default of this OrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties.  # noqa: E501


        :return: The user_default of this OrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties.  # noqa: E501
        :rtype: ConfigNodePropertyString
        """
        return self._user_default

    @user_default.setter
    def user_default(self, user_default):
        """Sets the user_default of this OrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties.


        :param user_default: The user_default of this OrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties.  # noqa: E501
        :type: ConfigNodePropertyString
        """

        self._user_default = user_default

    @property
    def user_enable_default_mapping(self):
        """Gets the user_enable_default_mapping of this OrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties.  # noqa: E501


        :return: The user_enable_default_mapping of this OrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties.  # noqa: E501
        :rtype: ConfigNodePropertyBoolean
        """
        return self._user_enable_default_mapping

    @user_enable_default_mapping.setter
    def user_enable_default_mapping(self, user_enable_default_mapping):
        """Sets the user_enable_default_mapping of this OrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties.


        :param user_enable_default_mapping: The user_enable_default_mapping of this OrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties.  # noqa: E501
        :type: ConfigNodePropertyBoolean
        """

        self._user_enable_default_mapping = user_enable_default_mapping

    @property
    def require_validation(self):
        """Gets the require_validation of this OrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties.  # noqa: E501


        :return: The require_validation of this OrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties.  # noqa: E501
        :rtype: ConfigNodePropertyBoolean
        """
        return self._require_validation

    @require_validation.setter
    def require_validation(self, require_validation):
        """Sets the require_validation of this OrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties.


        :param require_validation: The require_validation of this OrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties.  # noqa: E501
        :type: ConfigNodePropertyBoolean
        """

        self._require_validation = require_validation

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
