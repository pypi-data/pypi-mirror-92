# coding: utf-8

"""
    Adobe Experience Manager OSGI config (AEM) API

    Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API  # noqa: E501

    OpenAPI spec version: 1.0.0-pre.0
    Contact: opensource@shinesolutions.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ComAdobeCqProjectsPurgeSchedulerProperties(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'scheduledpurge_name': 'ConfigNodePropertyString',
        'scheduledpurge_purge_active': 'ConfigNodePropertyBoolean',
        'scheduledpurge_templates': 'ConfigNodePropertyArray',
        'scheduledpurge_purge_groups': 'ConfigNodePropertyBoolean',
        'scheduledpurge_purge_assets': 'ConfigNodePropertyBoolean',
        'scheduledpurge_terminate_running_workflows': 'ConfigNodePropertyBoolean',
        'scheduledpurge_daysold': 'ConfigNodePropertyInteger',
        'scheduledpurge_save_threshold': 'ConfigNodePropertyInteger'
    }

    attribute_map = {
        'scheduledpurge_name': 'scheduledpurge.name',
        'scheduledpurge_purge_active': 'scheduledpurge.purgeActive',
        'scheduledpurge_templates': 'scheduledpurge.templates',
        'scheduledpurge_purge_groups': 'scheduledpurge.purgeGroups',
        'scheduledpurge_purge_assets': 'scheduledpurge.purgeAssets',
        'scheduledpurge_terminate_running_workflows': 'scheduledpurge.terminateRunningWorkflows',
        'scheduledpurge_daysold': 'scheduledpurge.daysold',
        'scheduledpurge_save_threshold': 'scheduledpurge.saveThreshold'
    }

    def __init__(self, scheduledpurge_name=None, scheduledpurge_purge_active=None, scheduledpurge_templates=None, scheduledpurge_purge_groups=None, scheduledpurge_purge_assets=None, scheduledpurge_terminate_running_workflows=None, scheduledpurge_daysold=None, scheduledpurge_save_threshold=None):  # noqa: E501
        """ComAdobeCqProjectsPurgeSchedulerProperties - a model defined in OpenAPI"""  # noqa: E501

        self._scheduledpurge_name = None
        self._scheduledpurge_purge_active = None
        self._scheduledpurge_templates = None
        self._scheduledpurge_purge_groups = None
        self._scheduledpurge_purge_assets = None
        self._scheduledpurge_terminate_running_workflows = None
        self._scheduledpurge_daysold = None
        self._scheduledpurge_save_threshold = None
        self.discriminator = None

        if scheduledpurge_name is not None:
            self.scheduledpurge_name = scheduledpurge_name
        if scheduledpurge_purge_active is not None:
            self.scheduledpurge_purge_active = scheduledpurge_purge_active
        if scheduledpurge_templates is not None:
            self.scheduledpurge_templates = scheduledpurge_templates
        if scheduledpurge_purge_groups is not None:
            self.scheduledpurge_purge_groups = scheduledpurge_purge_groups
        if scheduledpurge_purge_assets is not None:
            self.scheduledpurge_purge_assets = scheduledpurge_purge_assets
        if scheduledpurge_terminate_running_workflows is not None:
            self.scheduledpurge_terminate_running_workflows = scheduledpurge_terminate_running_workflows
        if scheduledpurge_daysold is not None:
            self.scheduledpurge_daysold = scheduledpurge_daysold
        if scheduledpurge_save_threshold is not None:
            self.scheduledpurge_save_threshold = scheduledpurge_save_threshold

    @property
    def scheduledpurge_name(self):
        """Gets the scheduledpurge_name of this ComAdobeCqProjectsPurgeSchedulerProperties.  # noqa: E501


        :return: The scheduledpurge_name of this ComAdobeCqProjectsPurgeSchedulerProperties.  # noqa: E501
        :rtype: ConfigNodePropertyString
        """
        return self._scheduledpurge_name

    @scheduledpurge_name.setter
    def scheduledpurge_name(self, scheduledpurge_name):
        """Sets the scheduledpurge_name of this ComAdobeCqProjectsPurgeSchedulerProperties.


        :param scheduledpurge_name: The scheduledpurge_name of this ComAdobeCqProjectsPurgeSchedulerProperties.  # noqa: E501
        :type: ConfigNodePropertyString
        """

        self._scheduledpurge_name = scheduledpurge_name

    @property
    def scheduledpurge_purge_active(self):
        """Gets the scheduledpurge_purge_active of this ComAdobeCqProjectsPurgeSchedulerProperties.  # noqa: E501


        :return: The scheduledpurge_purge_active of this ComAdobeCqProjectsPurgeSchedulerProperties.  # noqa: E501
        :rtype: ConfigNodePropertyBoolean
        """
        return self._scheduledpurge_purge_active

    @scheduledpurge_purge_active.setter
    def scheduledpurge_purge_active(self, scheduledpurge_purge_active):
        """Sets the scheduledpurge_purge_active of this ComAdobeCqProjectsPurgeSchedulerProperties.


        :param scheduledpurge_purge_active: The scheduledpurge_purge_active of this ComAdobeCqProjectsPurgeSchedulerProperties.  # noqa: E501
        :type: ConfigNodePropertyBoolean
        """

        self._scheduledpurge_purge_active = scheduledpurge_purge_active

    @property
    def scheduledpurge_templates(self):
        """Gets the scheduledpurge_templates of this ComAdobeCqProjectsPurgeSchedulerProperties.  # noqa: E501


        :return: The scheduledpurge_templates of this ComAdobeCqProjectsPurgeSchedulerProperties.  # noqa: E501
        :rtype: ConfigNodePropertyArray
        """
        return self._scheduledpurge_templates

    @scheduledpurge_templates.setter
    def scheduledpurge_templates(self, scheduledpurge_templates):
        """Sets the scheduledpurge_templates of this ComAdobeCqProjectsPurgeSchedulerProperties.


        :param scheduledpurge_templates: The scheduledpurge_templates of this ComAdobeCqProjectsPurgeSchedulerProperties.  # noqa: E501
        :type: ConfigNodePropertyArray
        """

        self._scheduledpurge_templates = scheduledpurge_templates

    @property
    def scheduledpurge_purge_groups(self):
        """Gets the scheduledpurge_purge_groups of this ComAdobeCqProjectsPurgeSchedulerProperties.  # noqa: E501


        :return: The scheduledpurge_purge_groups of this ComAdobeCqProjectsPurgeSchedulerProperties.  # noqa: E501
        :rtype: ConfigNodePropertyBoolean
        """
        return self._scheduledpurge_purge_groups

    @scheduledpurge_purge_groups.setter
    def scheduledpurge_purge_groups(self, scheduledpurge_purge_groups):
        """Sets the scheduledpurge_purge_groups of this ComAdobeCqProjectsPurgeSchedulerProperties.


        :param scheduledpurge_purge_groups: The scheduledpurge_purge_groups of this ComAdobeCqProjectsPurgeSchedulerProperties.  # noqa: E501
        :type: ConfigNodePropertyBoolean
        """

        self._scheduledpurge_purge_groups = scheduledpurge_purge_groups

    @property
    def scheduledpurge_purge_assets(self):
        """Gets the scheduledpurge_purge_assets of this ComAdobeCqProjectsPurgeSchedulerProperties.  # noqa: E501


        :return: The scheduledpurge_purge_assets of this ComAdobeCqProjectsPurgeSchedulerProperties.  # noqa: E501
        :rtype: ConfigNodePropertyBoolean
        """
        return self._scheduledpurge_purge_assets

    @scheduledpurge_purge_assets.setter
    def scheduledpurge_purge_assets(self, scheduledpurge_purge_assets):
        """Sets the scheduledpurge_purge_assets of this ComAdobeCqProjectsPurgeSchedulerProperties.


        :param scheduledpurge_purge_assets: The scheduledpurge_purge_assets of this ComAdobeCqProjectsPurgeSchedulerProperties.  # noqa: E501
        :type: ConfigNodePropertyBoolean
        """

        self._scheduledpurge_purge_assets = scheduledpurge_purge_assets

    @property
    def scheduledpurge_terminate_running_workflows(self):
        """Gets the scheduledpurge_terminate_running_workflows of this ComAdobeCqProjectsPurgeSchedulerProperties.  # noqa: E501


        :return: The scheduledpurge_terminate_running_workflows of this ComAdobeCqProjectsPurgeSchedulerProperties.  # noqa: E501
        :rtype: ConfigNodePropertyBoolean
        """
        return self._scheduledpurge_terminate_running_workflows

    @scheduledpurge_terminate_running_workflows.setter
    def scheduledpurge_terminate_running_workflows(self, scheduledpurge_terminate_running_workflows):
        """Sets the scheduledpurge_terminate_running_workflows of this ComAdobeCqProjectsPurgeSchedulerProperties.


        :param scheduledpurge_terminate_running_workflows: The scheduledpurge_terminate_running_workflows of this ComAdobeCqProjectsPurgeSchedulerProperties.  # noqa: E501
        :type: ConfigNodePropertyBoolean
        """

        self._scheduledpurge_terminate_running_workflows = scheduledpurge_terminate_running_workflows

    @property
    def scheduledpurge_daysold(self):
        """Gets the scheduledpurge_daysold of this ComAdobeCqProjectsPurgeSchedulerProperties.  # noqa: E501


        :return: The scheduledpurge_daysold of this ComAdobeCqProjectsPurgeSchedulerProperties.  # noqa: E501
        :rtype: ConfigNodePropertyInteger
        """
        return self._scheduledpurge_daysold

    @scheduledpurge_daysold.setter
    def scheduledpurge_daysold(self, scheduledpurge_daysold):
        """Sets the scheduledpurge_daysold of this ComAdobeCqProjectsPurgeSchedulerProperties.


        :param scheduledpurge_daysold: The scheduledpurge_daysold of this ComAdobeCqProjectsPurgeSchedulerProperties.  # noqa: E501
        :type: ConfigNodePropertyInteger
        """

        self._scheduledpurge_daysold = scheduledpurge_daysold

    @property
    def scheduledpurge_save_threshold(self):
        """Gets the scheduledpurge_save_threshold of this ComAdobeCqProjectsPurgeSchedulerProperties.  # noqa: E501


        :return: The scheduledpurge_save_threshold of this ComAdobeCqProjectsPurgeSchedulerProperties.  # noqa: E501
        :rtype: ConfigNodePropertyInteger
        """
        return self._scheduledpurge_save_threshold

    @scheduledpurge_save_threshold.setter
    def scheduledpurge_save_threshold(self, scheduledpurge_save_threshold):
        """Sets the scheduledpurge_save_threshold of this ComAdobeCqProjectsPurgeSchedulerProperties.


        :param scheduledpurge_save_threshold: The scheduledpurge_save_threshold of this ComAdobeCqProjectsPurgeSchedulerProperties.  # noqa: E501
        :type: ConfigNodePropertyInteger
        """

        self._scheduledpurge_save_threshold = scheduledpurge_save_threshold

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComAdobeCqProjectsPurgeSchedulerProperties):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
