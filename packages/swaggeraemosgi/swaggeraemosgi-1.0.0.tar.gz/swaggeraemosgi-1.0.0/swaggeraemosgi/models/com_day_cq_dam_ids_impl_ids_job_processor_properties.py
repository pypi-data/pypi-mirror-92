# coding: utf-8

"""
    Adobe Experience Manager OSGI config (AEM) API

    Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API  # noqa: E501

    OpenAPI spec version: 1.0.0-pre.0
    Contact: opensource@shinesolutions.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ComDayCqDamIdsImplIDSJobProcessorProperties(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'enable_multisession': 'ConfigNodePropertyBoolean',
        'ids_cc_enable': 'ConfigNodePropertyBoolean',
        'enable_retry': 'ConfigNodePropertyBoolean',
        'enable_retry_scripterror': 'ConfigNodePropertyBoolean',
        'externalizer_domain_cqhost': 'ConfigNodePropertyString',
        'externalizer_domain_http': 'ConfigNodePropertyString'
    }

    attribute_map = {
        'enable_multisession': 'enable.multisession',
        'ids_cc_enable': 'ids.cc.enable',
        'enable_retry': 'enable.retry',
        'enable_retry_scripterror': 'enable.retry.scripterror',
        'externalizer_domain_cqhost': 'externalizer.domain.cqhost',
        'externalizer_domain_http': 'externalizer.domain.http'
    }

    def __init__(self, enable_multisession=None, ids_cc_enable=None, enable_retry=None, enable_retry_scripterror=None, externalizer_domain_cqhost=None, externalizer_domain_http=None):  # noqa: E501
        """ComDayCqDamIdsImplIDSJobProcessorProperties - a model defined in OpenAPI"""  # noqa: E501

        self._enable_multisession = None
        self._ids_cc_enable = None
        self._enable_retry = None
        self._enable_retry_scripterror = None
        self._externalizer_domain_cqhost = None
        self._externalizer_domain_http = None
        self.discriminator = None

        if enable_multisession is not None:
            self.enable_multisession = enable_multisession
        if ids_cc_enable is not None:
            self.ids_cc_enable = ids_cc_enable
        if enable_retry is not None:
            self.enable_retry = enable_retry
        if enable_retry_scripterror is not None:
            self.enable_retry_scripterror = enable_retry_scripterror
        if externalizer_domain_cqhost is not None:
            self.externalizer_domain_cqhost = externalizer_domain_cqhost
        if externalizer_domain_http is not None:
            self.externalizer_domain_http = externalizer_domain_http

    @property
    def enable_multisession(self):
        """Gets the enable_multisession of this ComDayCqDamIdsImplIDSJobProcessorProperties.  # noqa: E501


        :return: The enable_multisession of this ComDayCqDamIdsImplIDSJobProcessorProperties.  # noqa: E501
        :rtype: ConfigNodePropertyBoolean
        """
        return self._enable_multisession

    @enable_multisession.setter
    def enable_multisession(self, enable_multisession):
        """Sets the enable_multisession of this ComDayCqDamIdsImplIDSJobProcessorProperties.


        :param enable_multisession: The enable_multisession of this ComDayCqDamIdsImplIDSJobProcessorProperties.  # noqa: E501
        :type: ConfigNodePropertyBoolean
        """

        self._enable_multisession = enable_multisession

    @property
    def ids_cc_enable(self):
        """Gets the ids_cc_enable of this ComDayCqDamIdsImplIDSJobProcessorProperties.  # noqa: E501


        :return: The ids_cc_enable of this ComDayCqDamIdsImplIDSJobProcessorProperties.  # noqa: E501
        :rtype: ConfigNodePropertyBoolean
        """
        return self._ids_cc_enable

    @ids_cc_enable.setter
    def ids_cc_enable(self, ids_cc_enable):
        """Sets the ids_cc_enable of this ComDayCqDamIdsImplIDSJobProcessorProperties.


        :param ids_cc_enable: The ids_cc_enable of this ComDayCqDamIdsImplIDSJobProcessorProperties.  # noqa: E501
        :type: ConfigNodePropertyBoolean
        """

        self._ids_cc_enable = ids_cc_enable

    @property
    def enable_retry(self):
        """Gets the enable_retry of this ComDayCqDamIdsImplIDSJobProcessorProperties.  # noqa: E501


        :return: The enable_retry of this ComDayCqDamIdsImplIDSJobProcessorProperties.  # noqa: E501
        :rtype: ConfigNodePropertyBoolean
        """
        return self._enable_retry

    @enable_retry.setter
    def enable_retry(self, enable_retry):
        """Sets the enable_retry of this ComDayCqDamIdsImplIDSJobProcessorProperties.


        :param enable_retry: The enable_retry of this ComDayCqDamIdsImplIDSJobProcessorProperties.  # noqa: E501
        :type: ConfigNodePropertyBoolean
        """

        self._enable_retry = enable_retry

    @property
    def enable_retry_scripterror(self):
        """Gets the enable_retry_scripterror of this ComDayCqDamIdsImplIDSJobProcessorProperties.  # noqa: E501


        :return: The enable_retry_scripterror of this ComDayCqDamIdsImplIDSJobProcessorProperties.  # noqa: E501
        :rtype: ConfigNodePropertyBoolean
        """
        return self._enable_retry_scripterror

    @enable_retry_scripterror.setter
    def enable_retry_scripterror(self, enable_retry_scripterror):
        """Sets the enable_retry_scripterror of this ComDayCqDamIdsImplIDSJobProcessorProperties.


        :param enable_retry_scripterror: The enable_retry_scripterror of this ComDayCqDamIdsImplIDSJobProcessorProperties.  # noqa: E501
        :type: ConfigNodePropertyBoolean
        """

        self._enable_retry_scripterror = enable_retry_scripterror

    @property
    def externalizer_domain_cqhost(self):
        """Gets the externalizer_domain_cqhost of this ComDayCqDamIdsImplIDSJobProcessorProperties.  # noqa: E501


        :return: The externalizer_domain_cqhost of this ComDayCqDamIdsImplIDSJobProcessorProperties.  # noqa: E501
        :rtype: ConfigNodePropertyString
        """
        return self._externalizer_domain_cqhost

    @externalizer_domain_cqhost.setter
    def externalizer_domain_cqhost(self, externalizer_domain_cqhost):
        """Sets the externalizer_domain_cqhost of this ComDayCqDamIdsImplIDSJobProcessorProperties.


        :param externalizer_domain_cqhost: The externalizer_domain_cqhost of this ComDayCqDamIdsImplIDSJobProcessorProperties.  # noqa: E501
        :type: ConfigNodePropertyString
        """

        self._externalizer_domain_cqhost = externalizer_domain_cqhost

    @property
    def externalizer_domain_http(self):
        """Gets the externalizer_domain_http of this ComDayCqDamIdsImplIDSJobProcessorProperties.  # noqa: E501


        :return: The externalizer_domain_http of this ComDayCqDamIdsImplIDSJobProcessorProperties.  # noqa: E501
        :rtype: ConfigNodePropertyString
        """
        return self._externalizer_domain_http

    @externalizer_domain_http.setter
    def externalizer_domain_http(self, externalizer_domain_http):
        """Sets the externalizer_domain_http of this ComDayCqDamIdsImplIDSJobProcessorProperties.


        :param externalizer_domain_http: The externalizer_domain_http of this ComDayCqDamIdsImplIDSJobProcessorProperties.  # noqa: E501
        :type: ConfigNodePropertyString
        """

        self._externalizer_domain_http = externalizer_domain_http

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComDayCqDamIdsImplIDSJobProcessorProperties):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
