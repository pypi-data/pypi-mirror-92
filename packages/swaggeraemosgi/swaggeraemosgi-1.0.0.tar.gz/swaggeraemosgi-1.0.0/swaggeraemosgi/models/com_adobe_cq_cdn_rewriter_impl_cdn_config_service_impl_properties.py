# coding: utf-8

"""
    Adobe Experience Manager OSGI config (AEM) API

    Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API  # noqa: E501

    OpenAPI spec version: 1.0.0-pre.0
    Contact: opensource@shinesolutions.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cdn_config_distribution_domain': 'ConfigNodePropertyString',
        'cdn_config_enable_rewriting': 'ConfigNodePropertyBoolean',
        'cdn_config_path_prefixes': 'ConfigNodePropertyArray',
        'cdn_config_cdnttl': 'ConfigNodePropertyInteger',
        'cdn_config_application_protocol': 'ConfigNodePropertyString'
    }

    attribute_map = {
        'cdn_config_distribution_domain': 'cdn.config.distribution.domain',
        'cdn_config_enable_rewriting': 'cdn.config.enable.rewriting',
        'cdn_config_path_prefixes': 'cdn.config.path.prefixes',
        'cdn_config_cdnttl': 'cdn.config.cdnttl',
        'cdn_config_application_protocol': 'cdn.config.application.protocol'
    }

    def __init__(self, cdn_config_distribution_domain=None, cdn_config_enable_rewriting=None, cdn_config_path_prefixes=None, cdn_config_cdnttl=None, cdn_config_application_protocol=None):  # noqa: E501
        """ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties - a model defined in OpenAPI"""  # noqa: E501

        self._cdn_config_distribution_domain = None
        self._cdn_config_enable_rewriting = None
        self._cdn_config_path_prefixes = None
        self._cdn_config_cdnttl = None
        self._cdn_config_application_protocol = None
        self.discriminator = None

        if cdn_config_distribution_domain is not None:
            self.cdn_config_distribution_domain = cdn_config_distribution_domain
        if cdn_config_enable_rewriting is not None:
            self.cdn_config_enable_rewriting = cdn_config_enable_rewriting
        if cdn_config_path_prefixes is not None:
            self.cdn_config_path_prefixes = cdn_config_path_prefixes
        if cdn_config_cdnttl is not None:
            self.cdn_config_cdnttl = cdn_config_cdnttl
        if cdn_config_application_protocol is not None:
            self.cdn_config_application_protocol = cdn_config_application_protocol

    @property
    def cdn_config_distribution_domain(self):
        """Gets the cdn_config_distribution_domain of this ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties.  # noqa: E501


        :return: The cdn_config_distribution_domain of this ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties.  # noqa: E501
        :rtype: ConfigNodePropertyString
        """
        return self._cdn_config_distribution_domain

    @cdn_config_distribution_domain.setter
    def cdn_config_distribution_domain(self, cdn_config_distribution_domain):
        """Sets the cdn_config_distribution_domain of this ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties.


        :param cdn_config_distribution_domain: The cdn_config_distribution_domain of this ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties.  # noqa: E501
        :type: ConfigNodePropertyString
        """

        self._cdn_config_distribution_domain = cdn_config_distribution_domain

    @property
    def cdn_config_enable_rewriting(self):
        """Gets the cdn_config_enable_rewriting of this ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties.  # noqa: E501


        :return: The cdn_config_enable_rewriting of this ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties.  # noqa: E501
        :rtype: ConfigNodePropertyBoolean
        """
        return self._cdn_config_enable_rewriting

    @cdn_config_enable_rewriting.setter
    def cdn_config_enable_rewriting(self, cdn_config_enable_rewriting):
        """Sets the cdn_config_enable_rewriting of this ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties.


        :param cdn_config_enable_rewriting: The cdn_config_enable_rewriting of this ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties.  # noqa: E501
        :type: ConfigNodePropertyBoolean
        """

        self._cdn_config_enable_rewriting = cdn_config_enable_rewriting

    @property
    def cdn_config_path_prefixes(self):
        """Gets the cdn_config_path_prefixes of this ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties.  # noqa: E501


        :return: The cdn_config_path_prefixes of this ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties.  # noqa: E501
        :rtype: ConfigNodePropertyArray
        """
        return self._cdn_config_path_prefixes

    @cdn_config_path_prefixes.setter
    def cdn_config_path_prefixes(self, cdn_config_path_prefixes):
        """Sets the cdn_config_path_prefixes of this ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties.


        :param cdn_config_path_prefixes: The cdn_config_path_prefixes of this ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties.  # noqa: E501
        :type: ConfigNodePropertyArray
        """

        self._cdn_config_path_prefixes = cdn_config_path_prefixes

    @property
    def cdn_config_cdnttl(self):
        """Gets the cdn_config_cdnttl of this ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties.  # noqa: E501


        :return: The cdn_config_cdnttl of this ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties.  # noqa: E501
        :rtype: ConfigNodePropertyInteger
        """
        return self._cdn_config_cdnttl

    @cdn_config_cdnttl.setter
    def cdn_config_cdnttl(self, cdn_config_cdnttl):
        """Sets the cdn_config_cdnttl of this ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties.


        :param cdn_config_cdnttl: The cdn_config_cdnttl of this ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties.  # noqa: E501
        :type: ConfigNodePropertyInteger
        """

        self._cdn_config_cdnttl = cdn_config_cdnttl

    @property
    def cdn_config_application_protocol(self):
        """Gets the cdn_config_application_protocol of this ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties.  # noqa: E501


        :return: The cdn_config_application_protocol of this ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties.  # noqa: E501
        :rtype: ConfigNodePropertyString
        """
        return self._cdn_config_application_protocol

    @cdn_config_application_protocol.setter
    def cdn_config_application_protocol(self, cdn_config_application_protocol):
        """Sets the cdn_config_application_protocol of this ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties.


        :param cdn_config_application_protocol: The cdn_config_application_protocol of this ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties.  # noqa: E501
        :type: ConfigNodePropertyString
        """

        self._cdn_config_application_protocol = cdn_config_application_protocol

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
