# coding: utf-8

"""
    Adobe Experience Manager OSGI config (AEM) API

    Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API  # noqa: E501

    OpenAPI spec version: 1.0.0-pre.0
    Contact: opensource@shinesolutions.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ComDayCqAuthImplLoginSelectorHandlerProperties(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'path': 'ConfigNodePropertyString',
        'service_ranking': 'ConfigNodePropertyInteger',
        'auth_loginselector_mappings': 'ConfigNodePropertyArray',
        'auth_loginselector_changepw_mappings': 'ConfigNodePropertyArray',
        'auth_loginselector_defaultloginpage': 'ConfigNodePropertyString',
        'auth_loginselector_defaultchangepwpage': 'ConfigNodePropertyString',
        'auth_loginselector_handle': 'ConfigNodePropertyArray',
        'auth_loginselector_handle_all_extensions': 'ConfigNodePropertyBoolean'
    }

    attribute_map = {
        'path': 'path',
        'service_ranking': 'service.ranking',
        'auth_loginselector_mappings': 'auth.loginselector.mappings',
        'auth_loginselector_changepw_mappings': 'auth.loginselector.changepw.mappings',
        'auth_loginselector_defaultloginpage': 'auth.loginselector.defaultloginpage',
        'auth_loginselector_defaultchangepwpage': 'auth.loginselector.defaultchangepwpage',
        'auth_loginselector_handle': 'auth.loginselector.handle',
        'auth_loginselector_handle_all_extensions': 'auth.loginselector.handle.all.extensions'
    }

    def __init__(self, path=None, service_ranking=None, auth_loginselector_mappings=None, auth_loginselector_changepw_mappings=None, auth_loginselector_defaultloginpage=None, auth_loginselector_defaultchangepwpage=None, auth_loginselector_handle=None, auth_loginselector_handle_all_extensions=None):  # noqa: E501
        """ComDayCqAuthImplLoginSelectorHandlerProperties - a model defined in OpenAPI"""  # noqa: E501

        self._path = None
        self._service_ranking = None
        self._auth_loginselector_mappings = None
        self._auth_loginselector_changepw_mappings = None
        self._auth_loginselector_defaultloginpage = None
        self._auth_loginselector_defaultchangepwpage = None
        self._auth_loginselector_handle = None
        self._auth_loginselector_handle_all_extensions = None
        self.discriminator = None

        if path is not None:
            self.path = path
        if service_ranking is not None:
            self.service_ranking = service_ranking
        if auth_loginselector_mappings is not None:
            self.auth_loginselector_mappings = auth_loginselector_mappings
        if auth_loginselector_changepw_mappings is not None:
            self.auth_loginselector_changepw_mappings = auth_loginselector_changepw_mappings
        if auth_loginselector_defaultloginpage is not None:
            self.auth_loginselector_defaultloginpage = auth_loginselector_defaultloginpage
        if auth_loginselector_defaultchangepwpage is not None:
            self.auth_loginselector_defaultchangepwpage = auth_loginselector_defaultchangepwpage
        if auth_loginselector_handle is not None:
            self.auth_loginselector_handle = auth_loginselector_handle
        if auth_loginselector_handle_all_extensions is not None:
            self.auth_loginselector_handle_all_extensions = auth_loginselector_handle_all_extensions

    @property
    def path(self):
        """Gets the path of this ComDayCqAuthImplLoginSelectorHandlerProperties.  # noqa: E501


        :return: The path of this ComDayCqAuthImplLoginSelectorHandlerProperties.  # noqa: E501
        :rtype: ConfigNodePropertyString
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this ComDayCqAuthImplLoginSelectorHandlerProperties.


        :param path: The path of this ComDayCqAuthImplLoginSelectorHandlerProperties.  # noqa: E501
        :type: ConfigNodePropertyString
        """

        self._path = path

    @property
    def service_ranking(self):
        """Gets the service_ranking of this ComDayCqAuthImplLoginSelectorHandlerProperties.  # noqa: E501


        :return: The service_ranking of this ComDayCqAuthImplLoginSelectorHandlerProperties.  # noqa: E501
        :rtype: ConfigNodePropertyInteger
        """
        return self._service_ranking

    @service_ranking.setter
    def service_ranking(self, service_ranking):
        """Sets the service_ranking of this ComDayCqAuthImplLoginSelectorHandlerProperties.


        :param service_ranking: The service_ranking of this ComDayCqAuthImplLoginSelectorHandlerProperties.  # noqa: E501
        :type: ConfigNodePropertyInteger
        """

        self._service_ranking = service_ranking

    @property
    def auth_loginselector_mappings(self):
        """Gets the auth_loginselector_mappings of this ComDayCqAuthImplLoginSelectorHandlerProperties.  # noqa: E501


        :return: The auth_loginselector_mappings of this ComDayCqAuthImplLoginSelectorHandlerProperties.  # noqa: E501
        :rtype: ConfigNodePropertyArray
        """
        return self._auth_loginselector_mappings

    @auth_loginselector_mappings.setter
    def auth_loginselector_mappings(self, auth_loginselector_mappings):
        """Sets the auth_loginselector_mappings of this ComDayCqAuthImplLoginSelectorHandlerProperties.


        :param auth_loginselector_mappings: The auth_loginselector_mappings of this ComDayCqAuthImplLoginSelectorHandlerProperties.  # noqa: E501
        :type: ConfigNodePropertyArray
        """

        self._auth_loginselector_mappings = auth_loginselector_mappings

    @property
    def auth_loginselector_changepw_mappings(self):
        """Gets the auth_loginselector_changepw_mappings of this ComDayCqAuthImplLoginSelectorHandlerProperties.  # noqa: E501


        :return: The auth_loginselector_changepw_mappings of this ComDayCqAuthImplLoginSelectorHandlerProperties.  # noqa: E501
        :rtype: ConfigNodePropertyArray
        """
        return self._auth_loginselector_changepw_mappings

    @auth_loginselector_changepw_mappings.setter
    def auth_loginselector_changepw_mappings(self, auth_loginselector_changepw_mappings):
        """Sets the auth_loginselector_changepw_mappings of this ComDayCqAuthImplLoginSelectorHandlerProperties.


        :param auth_loginselector_changepw_mappings: The auth_loginselector_changepw_mappings of this ComDayCqAuthImplLoginSelectorHandlerProperties.  # noqa: E501
        :type: ConfigNodePropertyArray
        """

        self._auth_loginselector_changepw_mappings = auth_loginselector_changepw_mappings

    @property
    def auth_loginselector_defaultloginpage(self):
        """Gets the auth_loginselector_defaultloginpage of this ComDayCqAuthImplLoginSelectorHandlerProperties.  # noqa: E501


        :return: The auth_loginselector_defaultloginpage of this ComDayCqAuthImplLoginSelectorHandlerProperties.  # noqa: E501
        :rtype: ConfigNodePropertyString
        """
        return self._auth_loginselector_defaultloginpage

    @auth_loginselector_defaultloginpage.setter
    def auth_loginselector_defaultloginpage(self, auth_loginselector_defaultloginpage):
        """Sets the auth_loginselector_defaultloginpage of this ComDayCqAuthImplLoginSelectorHandlerProperties.


        :param auth_loginselector_defaultloginpage: The auth_loginselector_defaultloginpage of this ComDayCqAuthImplLoginSelectorHandlerProperties.  # noqa: E501
        :type: ConfigNodePropertyString
        """

        self._auth_loginselector_defaultloginpage = auth_loginselector_defaultloginpage

    @property
    def auth_loginselector_defaultchangepwpage(self):
        """Gets the auth_loginselector_defaultchangepwpage of this ComDayCqAuthImplLoginSelectorHandlerProperties.  # noqa: E501


        :return: The auth_loginselector_defaultchangepwpage of this ComDayCqAuthImplLoginSelectorHandlerProperties.  # noqa: E501
        :rtype: ConfigNodePropertyString
        """
        return self._auth_loginselector_defaultchangepwpage

    @auth_loginselector_defaultchangepwpage.setter
    def auth_loginselector_defaultchangepwpage(self, auth_loginselector_defaultchangepwpage):
        """Sets the auth_loginselector_defaultchangepwpage of this ComDayCqAuthImplLoginSelectorHandlerProperties.


        :param auth_loginselector_defaultchangepwpage: The auth_loginselector_defaultchangepwpage of this ComDayCqAuthImplLoginSelectorHandlerProperties.  # noqa: E501
        :type: ConfigNodePropertyString
        """

        self._auth_loginselector_defaultchangepwpage = auth_loginselector_defaultchangepwpage

    @property
    def auth_loginselector_handle(self):
        """Gets the auth_loginselector_handle of this ComDayCqAuthImplLoginSelectorHandlerProperties.  # noqa: E501


        :return: The auth_loginselector_handle of this ComDayCqAuthImplLoginSelectorHandlerProperties.  # noqa: E501
        :rtype: ConfigNodePropertyArray
        """
        return self._auth_loginselector_handle

    @auth_loginselector_handle.setter
    def auth_loginselector_handle(self, auth_loginselector_handle):
        """Sets the auth_loginselector_handle of this ComDayCqAuthImplLoginSelectorHandlerProperties.


        :param auth_loginselector_handle: The auth_loginselector_handle of this ComDayCqAuthImplLoginSelectorHandlerProperties.  # noqa: E501
        :type: ConfigNodePropertyArray
        """

        self._auth_loginselector_handle = auth_loginselector_handle

    @property
    def auth_loginselector_handle_all_extensions(self):
        """Gets the auth_loginselector_handle_all_extensions of this ComDayCqAuthImplLoginSelectorHandlerProperties.  # noqa: E501


        :return: The auth_loginselector_handle_all_extensions of this ComDayCqAuthImplLoginSelectorHandlerProperties.  # noqa: E501
        :rtype: ConfigNodePropertyBoolean
        """
        return self._auth_loginselector_handle_all_extensions

    @auth_loginselector_handle_all_extensions.setter
    def auth_loginselector_handle_all_extensions(self, auth_loginselector_handle_all_extensions):
        """Sets the auth_loginselector_handle_all_extensions of this ComDayCqAuthImplLoginSelectorHandlerProperties.


        :param auth_loginselector_handle_all_extensions: The auth_loginselector_handle_all_extensions of this ComDayCqAuthImplLoginSelectorHandlerProperties.  # noqa: E501
        :type: ConfigNodePropertyBoolean
        """

        self._auth_loginselector_handle_all_extensions = auth_loginselector_handle_all_extensions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComDayCqAuthImplLoginSelectorHandlerProperties):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
