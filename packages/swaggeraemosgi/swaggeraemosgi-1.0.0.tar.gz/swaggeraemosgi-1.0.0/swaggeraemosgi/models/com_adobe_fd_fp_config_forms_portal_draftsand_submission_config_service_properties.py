# coding: utf-8

"""
    Adobe Experience Manager OSGI config (AEM) API

    Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API  # noqa: E501

    OpenAPI spec version: 1.0.0-pre.0
    Contact: opensource@shinesolutions.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'portal_outboxes': 'ConfigNodePropertyArray',
        'draft_data_service': 'ConfigNodePropertyString',
        'draft_metadata_service': 'ConfigNodePropertyString',
        'submit_data_service': 'ConfigNodePropertyString',
        'submit_metadata_service': 'ConfigNodePropertyString',
        'pending_sign_data_service': 'ConfigNodePropertyString',
        'pending_sign_metadata_service': 'ConfigNodePropertyString'
    }

    attribute_map = {
        'portal_outboxes': 'portal.outboxes',
        'draft_data_service': 'draft.data.service',
        'draft_metadata_service': 'draft.metadata.service',
        'submit_data_service': 'submit.data.service',
        'submit_metadata_service': 'submit.metadata.service',
        'pending_sign_data_service': 'pendingSign.data.service',
        'pending_sign_metadata_service': 'pendingSign.metadata.service'
    }

    def __init__(self, portal_outboxes=None, draft_data_service=None, draft_metadata_service=None, submit_data_service=None, submit_metadata_service=None, pending_sign_data_service=None, pending_sign_metadata_service=None):  # noqa: E501
        """ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties - a model defined in OpenAPI"""  # noqa: E501

        self._portal_outboxes = None
        self._draft_data_service = None
        self._draft_metadata_service = None
        self._submit_data_service = None
        self._submit_metadata_service = None
        self._pending_sign_data_service = None
        self._pending_sign_metadata_service = None
        self.discriminator = None

        if portal_outboxes is not None:
            self.portal_outboxes = portal_outboxes
        if draft_data_service is not None:
            self.draft_data_service = draft_data_service
        if draft_metadata_service is not None:
            self.draft_metadata_service = draft_metadata_service
        if submit_data_service is not None:
            self.submit_data_service = submit_data_service
        if submit_metadata_service is not None:
            self.submit_metadata_service = submit_metadata_service
        if pending_sign_data_service is not None:
            self.pending_sign_data_service = pending_sign_data_service
        if pending_sign_metadata_service is not None:
            self.pending_sign_metadata_service = pending_sign_metadata_service

    @property
    def portal_outboxes(self):
        """Gets the portal_outboxes of this ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties.  # noqa: E501


        :return: The portal_outboxes of this ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties.  # noqa: E501
        :rtype: ConfigNodePropertyArray
        """
        return self._portal_outboxes

    @portal_outboxes.setter
    def portal_outboxes(self, portal_outboxes):
        """Sets the portal_outboxes of this ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties.


        :param portal_outboxes: The portal_outboxes of this ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties.  # noqa: E501
        :type: ConfigNodePropertyArray
        """

        self._portal_outboxes = portal_outboxes

    @property
    def draft_data_service(self):
        """Gets the draft_data_service of this ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties.  # noqa: E501


        :return: The draft_data_service of this ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties.  # noqa: E501
        :rtype: ConfigNodePropertyString
        """
        return self._draft_data_service

    @draft_data_service.setter
    def draft_data_service(self, draft_data_service):
        """Sets the draft_data_service of this ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties.


        :param draft_data_service: The draft_data_service of this ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties.  # noqa: E501
        :type: ConfigNodePropertyString
        """

        self._draft_data_service = draft_data_service

    @property
    def draft_metadata_service(self):
        """Gets the draft_metadata_service of this ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties.  # noqa: E501


        :return: The draft_metadata_service of this ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties.  # noqa: E501
        :rtype: ConfigNodePropertyString
        """
        return self._draft_metadata_service

    @draft_metadata_service.setter
    def draft_metadata_service(self, draft_metadata_service):
        """Sets the draft_metadata_service of this ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties.


        :param draft_metadata_service: The draft_metadata_service of this ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties.  # noqa: E501
        :type: ConfigNodePropertyString
        """

        self._draft_metadata_service = draft_metadata_service

    @property
    def submit_data_service(self):
        """Gets the submit_data_service of this ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties.  # noqa: E501


        :return: The submit_data_service of this ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties.  # noqa: E501
        :rtype: ConfigNodePropertyString
        """
        return self._submit_data_service

    @submit_data_service.setter
    def submit_data_service(self, submit_data_service):
        """Sets the submit_data_service of this ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties.


        :param submit_data_service: The submit_data_service of this ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties.  # noqa: E501
        :type: ConfigNodePropertyString
        """

        self._submit_data_service = submit_data_service

    @property
    def submit_metadata_service(self):
        """Gets the submit_metadata_service of this ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties.  # noqa: E501


        :return: The submit_metadata_service of this ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties.  # noqa: E501
        :rtype: ConfigNodePropertyString
        """
        return self._submit_metadata_service

    @submit_metadata_service.setter
    def submit_metadata_service(self, submit_metadata_service):
        """Sets the submit_metadata_service of this ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties.


        :param submit_metadata_service: The submit_metadata_service of this ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties.  # noqa: E501
        :type: ConfigNodePropertyString
        """

        self._submit_metadata_service = submit_metadata_service

    @property
    def pending_sign_data_service(self):
        """Gets the pending_sign_data_service of this ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties.  # noqa: E501


        :return: The pending_sign_data_service of this ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties.  # noqa: E501
        :rtype: ConfigNodePropertyString
        """
        return self._pending_sign_data_service

    @pending_sign_data_service.setter
    def pending_sign_data_service(self, pending_sign_data_service):
        """Sets the pending_sign_data_service of this ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties.


        :param pending_sign_data_service: The pending_sign_data_service of this ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties.  # noqa: E501
        :type: ConfigNodePropertyString
        """

        self._pending_sign_data_service = pending_sign_data_service

    @property
    def pending_sign_metadata_service(self):
        """Gets the pending_sign_metadata_service of this ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties.  # noqa: E501


        :return: The pending_sign_metadata_service of this ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties.  # noqa: E501
        :rtype: ConfigNodePropertyString
        """
        return self._pending_sign_metadata_service

    @pending_sign_metadata_service.setter
    def pending_sign_metadata_service(self, pending_sign_metadata_service):
        """Sets the pending_sign_metadata_service of this ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties.


        :param pending_sign_metadata_service: The pending_sign_metadata_service of this ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties.  # noqa: E501
        :type: ConfigNodePropertyString
        """

        self._pending_sign_metadata_service = pending_sign_metadata_service

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
