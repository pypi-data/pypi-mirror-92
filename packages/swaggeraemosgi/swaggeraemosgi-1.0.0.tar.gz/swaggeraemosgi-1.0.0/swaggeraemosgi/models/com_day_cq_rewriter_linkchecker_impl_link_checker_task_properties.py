# coding: utf-8

"""
    Adobe Experience Manager OSGI config (AEM) API

    Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API  # noqa: E501

    OpenAPI spec version: 1.0.0-pre.0
    Contact: opensource@shinesolutions.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'scheduler_period': 'ConfigNodePropertyInteger',
        'scheduler_concurrent': 'ConfigNodePropertyBoolean',
        'good_link_test_interval': 'ConfigNodePropertyInteger',
        'bad_link_test_interval': 'ConfigNodePropertyInteger',
        'link_unused_interval': 'ConfigNodePropertyInteger',
        'connection_timeout': 'ConfigNodePropertyInteger'
    }

    attribute_map = {
        'scheduler_period': 'scheduler.period',
        'scheduler_concurrent': 'scheduler.concurrent',
        'good_link_test_interval': 'good_link_test_interval',
        'bad_link_test_interval': 'bad_link_test_interval',
        'link_unused_interval': 'link_unused_interval',
        'connection_timeout': 'connection.timeout'
    }

    def __init__(self, scheduler_period=None, scheduler_concurrent=None, good_link_test_interval=None, bad_link_test_interval=None, link_unused_interval=None, connection_timeout=None):  # noqa: E501
        """ComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties - a model defined in OpenAPI"""  # noqa: E501

        self._scheduler_period = None
        self._scheduler_concurrent = None
        self._good_link_test_interval = None
        self._bad_link_test_interval = None
        self._link_unused_interval = None
        self._connection_timeout = None
        self.discriminator = None

        if scheduler_period is not None:
            self.scheduler_period = scheduler_period
        if scheduler_concurrent is not None:
            self.scheduler_concurrent = scheduler_concurrent
        if good_link_test_interval is not None:
            self.good_link_test_interval = good_link_test_interval
        if bad_link_test_interval is not None:
            self.bad_link_test_interval = bad_link_test_interval
        if link_unused_interval is not None:
            self.link_unused_interval = link_unused_interval
        if connection_timeout is not None:
            self.connection_timeout = connection_timeout

    @property
    def scheduler_period(self):
        """Gets the scheduler_period of this ComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties.  # noqa: E501


        :return: The scheduler_period of this ComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties.  # noqa: E501
        :rtype: ConfigNodePropertyInteger
        """
        return self._scheduler_period

    @scheduler_period.setter
    def scheduler_period(self, scheduler_period):
        """Sets the scheduler_period of this ComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties.


        :param scheduler_period: The scheduler_period of this ComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties.  # noqa: E501
        :type: ConfigNodePropertyInteger
        """

        self._scheduler_period = scheduler_period

    @property
    def scheduler_concurrent(self):
        """Gets the scheduler_concurrent of this ComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties.  # noqa: E501


        :return: The scheduler_concurrent of this ComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties.  # noqa: E501
        :rtype: ConfigNodePropertyBoolean
        """
        return self._scheduler_concurrent

    @scheduler_concurrent.setter
    def scheduler_concurrent(self, scheduler_concurrent):
        """Sets the scheduler_concurrent of this ComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties.


        :param scheduler_concurrent: The scheduler_concurrent of this ComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties.  # noqa: E501
        :type: ConfigNodePropertyBoolean
        """

        self._scheduler_concurrent = scheduler_concurrent

    @property
    def good_link_test_interval(self):
        """Gets the good_link_test_interval of this ComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties.  # noqa: E501


        :return: The good_link_test_interval of this ComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties.  # noqa: E501
        :rtype: ConfigNodePropertyInteger
        """
        return self._good_link_test_interval

    @good_link_test_interval.setter
    def good_link_test_interval(self, good_link_test_interval):
        """Sets the good_link_test_interval of this ComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties.


        :param good_link_test_interval: The good_link_test_interval of this ComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties.  # noqa: E501
        :type: ConfigNodePropertyInteger
        """

        self._good_link_test_interval = good_link_test_interval

    @property
    def bad_link_test_interval(self):
        """Gets the bad_link_test_interval of this ComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties.  # noqa: E501


        :return: The bad_link_test_interval of this ComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties.  # noqa: E501
        :rtype: ConfigNodePropertyInteger
        """
        return self._bad_link_test_interval

    @bad_link_test_interval.setter
    def bad_link_test_interval(self, bad_link_test_interval):
        """Sets the bad_link_test_interval of this ComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties.


        :param bad_link_test_interval: The bad_link_test_interval of this ComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties.  # noqa: E501
        :type: ConfigNodePropertyInteger
        """

        self._bad_link_test_interval = bad_link_test_interval

    @property
    def link_unused_interval(self):
        """Gets the link_unused_interval of this ComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties.  # noqa: E501


        :return: The link_unused_interval of this ComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties.  # noqa: E501
        :rtype: ConfigNodePropertyInteger
        """
        return self._link_unused_interval

    @link_unused_interval.setter
    def link_unused_interval(self, link_unused_interval):
        """Sets the link_unused_interval of this ComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties.


        :param link_unused_interval: The link_unused_interval of this ComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties.  # noqa: E501
        :type: ConfigNodePropertyInteger
        """

        self._link_unused_interval = link_unused_interval

    @property
    def connection_timeout(self):
        """Gets the connection_timeout of this ComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties.  # noqa: E501


        :return: The connection_timeout of this ComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties.  # noqa: E501
        :rtype: ConfigNodePropertyInteger
        """
        return self._connection_timeout

    @connection_timeout.setter
    def connection_timeout(self, connection_timeout):
        """Sets the connection_timeout of this ComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties.


        :param connection_timeout: The connection_timeout of this ComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties.  # noqa: E501
        :type: ConfigNodePropertyInteger
        """

        self._connection_timeout = connection_timeout

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
