# coding: utf-8

"""
    Adobe Experience Manager OSGI config (AEM) API

    Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API  # noqa: E501

    OpenAPI spec version: 1.0.0-pre.0
    Contact: opensource@shinesolutions.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class OrgApacheHttpProxyconfiguratorProperties(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'proxy_enabled': 'ConfigNodePropertyBoolean',
        'proxy_host': 'ConfigNodePropertyString',
        'proxy_port': 'ConfigNodePropertyInteger',
        'proxy_user': 'ConfigNodePropertyString',
        'proxy_password': 'ConfigNodePropertyString',
        'proxy_exceptions': 'ConfigNodePropertyArray'
    }

    attribute_map = {
        'proxy_enabled': 'proxy.enabled',
        'proxy_host': 'proxy.host',
        'proxy_port': 'proxy.port',
        'proxy_user': 'proxy.user',
        'proxy_password': 'proxy.password',
        'proxy_exceptions': 'proxy.exceptions'
    }

    def __init__(self, proxy_enabled=None, proxy_host=None, proxy_port=None, proxy_user=None, proxy_password=None, proxy_exceptions=None):  # noqa: E501
        """OrgApacheHttpProxyconfiguratorProperties - a model defined in OpenAPI"""  # noqa: E501

        self._proxy_enabled = None
        self._proxy_host = None
        self._proxy_port = None
        self._proxy_user = None
        self._proxy_password = None
        self._proxy_exceptions = None
        self.discriminator = None

        if proxy_enabled is not None:
            self.proxy_enabled = proxy_enabled
        if proxy_host is not None:
            self.proxy_host = proxy_host
        if proxy_port is not None:
            self.proxy_port = proxy_port
        if proxy_user is not None:
            self.proxy_user = proxy_user
        if proxy_password is not None:
            self.proxy_password = proxy_password
        if proxy_exceptions is not None:
            self.proxy_exceptions = proxy_exceptions

    @property
    def proxy_enabled(self):
        """Gets the proxy_enabled of this OrgApacheHttpProxyconfiguratorProperties.  # noqa: E501


        :return: The proxy_enabled of this OrgApacheHttpProxyconfiguratorProperties.  # noqa: E501
        :rtype: ConfigNodePropertyBoolean
        """
        return self._proxy_enabled

    @proxy_enabled.setter
    def proxy_enabled(self, proxy_enabled):
        """Sets the proxy_enabled of this OrgApacheHttpProxyconfiguratorProperties.


        :param proxy_enabled: The proxy_enabled of this OrgApacheHttpProxyconfiguratorProperties.  # noqa: E501
        :type: ConfigNodePropertyBoolean
        """

        self._proxy_enabled = proxy_enabled

    @property
    def proxy_host(self):
        """Gets the proxy_host of this OrgApacheHttpProxyconfiguratorProperties.  # noqa: E501


        :return: The proxy_host of this OrgApacheHttpProxyconfiguratorProperties.  # noqa: E501
        :rtype: ConfigNodePropertyString
        """
        return self._proxy_host

    @proxy_host.setter
    def proxy_host(self, proxy_host):
        """Sets the proxy_host of this OrgApacheHttpProxyconfiguratorProperties.


        :param proxy_host: The proxy_host of this OrgApacheHttpProxyconfiguratorProperties.  # noqa: E501
        :type: ConfigNodePropertyString
        """

        self._proxy_host = proxy_host

    @property
    def proxy_port(self):
        """Gets the proxy_port of this OrgApacheHttpProxyconfiguratorProperties.  # noqa: E501


        :return: The proxy_port of this OrgApacheHttpProxyconfiguratorProperties.  # noqa: E501
        :rtype: ConfigNodePropertyInteger
        """
        return self._proxy_port

    @proxy_port.setter
    def proxy_port(self, proxy_port):
        """Sets the proxy_port of this OrgApacheHttpProxyconfiguratorProperties.


        :param proxy_port: The proxy_port of this OrgApacheHttpProxyconfiguratorProperties.  # noqa: E501
        :type: ConfigNodePropertyInteger
        """

        self._proxy_port = proxy_port

    @property
    def proxy_user(self):
        """Gets the proxy_user of this OrgApacheHttpProxyconfiguratorProperties.  # noqa: E501


        :return: The proxy_user of this OrgApacheHttpProxyconfiguratorProperties.  # noqa: E501
        :rtype: ConfigNodePropertyString
        """
        return self._proxy_user

    @proxy_user.setter
    def proxy_user(self, proxy_user):
        """Sets the proxy_user of this OrgApacheHttpProxyconfiguratorProperties.


        :param proxy_user: The proxy_user of this OrgApacheHttpProxyconfiguratorProperties.  # noqa: E501
        :type: ConfigNodePropertyString
        """

        self._proxy_user = proxy_user

    @property
    def proxy_password(self):
        """Gets the proxy_password of this OrgApacheHttpProxyconfiguratorProperties.  # noqa: E501


        :return: The proxy_password of this OrgApacheHttpProxyconfiguratorProperties.  # noqa: E501
        :rtype: ConfigNodePropertyString
        """
        return self._proxy_password

    @proxy_password.setter
    def proxy_password(self, proxy_password):
        """Sets the proxy_password of this OrgApacheHttpProxyconfiguratorProperties.


        :param proxy_password: The proxy_password of this OrgApacheHttpProxyconfiguratorProperties.  # noqa: E501
        :type: ConfigNodePropertyString
        """

        self._proxy_password = proxy_password

    @property
    def proxy_exceptions(self):
        """Gets the proxy_exceptions of this OrgApacheHttpProxyconfiguratorProperties.  # noqa: E501


        :return: The proxy_exceptions of this OrgApacheHttpProxyconfiguratorProperties.  # noqa: E501
        :rtype: ConfigNodePropertyArray
        """
        return self._proxy_exceptions

    @proxy_exceptions.setter
    def proxy_exceptions(self, proxy_exceptions):
        """Sets the proxy_exceptions of this OrgApacheHttpProxyconfiguratorProperties.


        :param proxy_exceptions: The proxy_exceptions of this OrgApacheHttpProxyconfiguratorProperties.  # noqa: E501
        :type: ConfigNodePropertyArray
        """

        self._proxy_exceptions = proxy_exceptions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrgApacheHttpProxyconfiguratorProperties):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
