# coding: utf-8

"""
    Adobe Experience Manager OSGI config (AEM) API

    Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API  # noqa: E501

    OpenAPI spec version: 1.0.0-pre.0
    Contact: opensource@shinesolutions.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'default_transport_agent_to_worker_prefix': 'ConfigNodePropertyString',
        'default_transport_agent_to_master_prefix': 'ConfigNodePropertyString',
        'default_transport_input_package': 'ConfigNodePropertyString',
        'default_transport_output_package': 'ConfigNodePropertyString',
        'default_transport_replication_synchronous': 'ConfigNodePropertyBoolean',
        'default_transport_contentpackage': 'ConfigNodePropertyBoolean',
        'offloading_transporter_default_enabled': 'ConfigNodePropertyBoolean'
    }

    attribute_map = {
        'default_transport_agent_to_worker_prefix': 'default.transport.agent-to-worker.prefix',
        'default_transport_agent_to_master_prefix': 'default.transport.agent-to-master.prefix',
        'default_transport_input_package': 'default.transport.input.package',
        'default_transport_output_package': 'default.transport.output.package',
        'default_transport_replication_synchronous': 'default.transport.replication.synchronous',
        'default_transport_contentpackage': 'default.transport.contentpackage',
        'offloading_transporter_default_enabled': 'offloading.transporter.default.enabled'
    }

    def __init__(self, default_transport_agent_to_worker_prefix=None, default_transport_agent_to_master_prefix=None, default_transport_input_package=None, default_transport_output_package=None, default_transport_replication_synchronous=None, default_transport_contentpackage=None, offloading_transporter_default_enabled=None):  # noqa: E501
        """ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties - a model defined in OpenAPI"""  # noqa: E501

        self._default_transport_agent_to_worker_prefix = None
        self._default_transport_agent_to_master_prefix = None
        self._default_transport_input_package = None
        self._default_transport_output_package = None
        self._default_transport_replication_synchronous = None
        self._default_transport_contentpackage = None
        self._offloading_transporter_default_enabled = None
        self.discriminator = None

        if default_transport_agent_to_worker_prefix is not None:
            self.default_transport_agent_to_worker_prefix = default_transport_agent_to_worker_prefix
        if default_transport_agent_to_master_prefix is not None:
            self.default_transport_agent_to_master_prefix = default_transport_agent_to_master_prefix
        if default_transport_input_package is not None:
            self.default_transport_input_package = default_transport_input_package
        if default_transport_output_package is not None:
            self.default_transport_output_package = default_transport_output_package
        if default_transport_replication_synchronous is not None:
            self.default_transport_replication_synchronous = default_transport_replication_synchronous
        if default_transport_contentpackage is not None:
            self.default_transport_contentpackage = default_transport_contentpackage
        if offloading_transporter_default_enabled is not None:
            self.offloading_transporter_default_enabled = offloading_transporter_default_enabled

    @property
    def default_transport_agent_to_worker_prefix(self):
        """Gets the default_transport_agent_to_worker_prefix of this ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties.  # noqa: E501


        :return: The default_transport_agent_to_worker_prefix of this ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties.  # noqa: E501
        :rtype: ConfigNodePropertyString
        """
        return self._default_transport_agent_to_worker_prefix

    @default_transport_agent_to_worker_prefix.setter
    def default_transport_agent_to_worker_prefix(self, default_transport_agent_to_worker_prefix):
        """Sets the default_transport_agent_to_worker_prefix of this ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties.


        :param default_transport_agent_to_worker_prefix: The default_transport_agent_to_worker_prefix of this ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties.  # noqa: E501
        :type: ConfigNodePropertyString
        """

        self._default_transport_agent_to_worker_prefix = default_transport_agent_to_worker_prefix

    @property
    def default_transport_agent_to_master_prefix(self):
        """Gets the default_transport_agent_to_master_prefix of this ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties.  # noqa: E501


        :return: The default_transport_agent_to_master_prefix of this ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties.  # noqa: E501
        :rtype: ConfigNodePropertyString
        """
        return self._default_transport_agent_to_master_prefix

    @default_transport_agent_to_master_prefix.setter
    def default_transport_agent_to_master_prefix(self, default_transport_agent_to_master_prefix):
        """Sets the default_transport_agent_to_master_prefix of this ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties.


        :param default_transport_agent_to_master_prefix: The default_transport_agent_to_master_prefix of this ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties.  # noqa: E501
        :type: ConfigNodePropertyString
        """

        self._default_transport_agent_to_master_prefix = default_transport_agent_to_master_prefix

    @property
    def default_transport_input_package(self):
        """Gets the default_transport_input_package of this ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties.  # noqa: E501


        :return: The default_transport_input_package of this ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties.  # noqa: E501
        :rtype: ConfigNodePropertyString
        """
        return self._default_transport_input_package

    @default_transport_input_package.setter
    def default_transport_input_package(self, default_transport_input_package):
        """Sets the default_transport_input_package of this ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties.


        :param default_transport_input_package: The default_transport_input_package of this ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties.  # noqa: E501
        :type: ConfigNodePropertyString
        """

        self._default_transport_input_package = default_transport_input_package

    @property
    def default_transport_output_package(self):
        """Gets the default_transport_output_package of this ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties.  # noqa: E501


        :return: The default_transport_output_package of this ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties.  # noqa: E501
        :rtype: ConfigNodePropertyString
        """
        return self._default_transport_output_package

    @default_transport_output_package.setter
    def default_transport_output_package(self, default_transport_output_package):
        """Sets the default_transport_output_package of this ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties.


        :param default_transport_output_package: The default_transport_output_package of this ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties.  # noqa: E501
        :type: ConfigNodePropertyString
        """

        self._default_transport_output_package = default_transport_output_package

    @property
    def default_transport_replication_synchronous(self):
        """Gets the default_transport_replication_synchronous of this ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties.  # noqa: E501


        :return: The default_transport_replication_synchronous of this ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties.  # noqa: E501
        :rtype: ConfigNodePropertyBoolean
        """
        return self._default_transport_replication_synchronous

    @default_transport_replication_synchronous.setter
    def default_transport_replication_synchronous(self, default_transport_replication_synchronous):
        """Sets the default_transport_replication_synchronous of this ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties.


        :param default_transport_replication_synchronous: The default_transport_replication_synchronous of this ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties.  # noqa: E501
        :type: ConfigNodePropertyBoolean
        """

        self._default_transport_replication_synchronous = default_transport_replication_synchronous

    @property
    def default_transport_contentpackage(self):
        """Gets the default_transport_contentpackage of this ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties.  # noqa: E501


        :return: The default_transport_contentpackage of this ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties.  # noqa: E501
        :rtype: ConfigNodePropertyBoolean
        """
        return self._default_transport_contentpackage

    @default_transport_contentpackage.setter
    def default_transport_contentpackage(self, default_transport_contentpackage):
        """Sets the default_transport_contentpackage of this ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties.


        :param default_transport_contentpackage: The default_transport_contentpackage of this ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties.  # noqa: E501
        :type: ConfigNodePropertyBoolean
        """

        self._default_transport_contentpackage = default_transport_contentpackage

    @property
    def offloading_transporter_default_enabled(self):
        """Gets the offloading_transporter_default_enabled of this ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties.  # noqa: E501


        :return: The offloading_transporter_default_enabled of this ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties.  # noqa: E501
        :rtype: ConfigNodePropertyBoolean
        """
        return self._offloading_transporter_default_enabled

    @offloading_transporter_default_enabled.setter
    def offloading_transporter_default_enabled(self, offloading_transporter_default_enabled):
        """Sets the offloading_transporter_default_enabled of this ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties.


        :param offloading_transporter_default_enabled: The offloading_transporter_default_enabled of this ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties.  # noqa: E501
        :type: ConfigNodePropertyBoolean
        """

        self._offloading_transporter_default_enabled = offloading_transporter_default_enabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
