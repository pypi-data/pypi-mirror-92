# coding: utf-8

"""
    Adobe Experience Manager OSGI config (AEM) API

    Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API  # noqa: E501

    OpenAPI spec version: 1.0.0-pre.0
    Contact: opensource@shinesolutions.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ComAdobeCqSocialAccountverificationImplAccountManagementConfigImProperties(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'enable': 'ConfigNodePropertyBoolean',
        'ttl1': 'ConfigNodePropertyInteger',
        'ttl2': 'ConfigNodePropertyInteger'
    }

    attribute_map = {
        'enable': 'enable',
        'ttl1': 'ttl1',
        'ttl2': 'ttl2'
    }

    def __init__(self, enable=None, ttl1=None, ttl2=None):  # noqa: E501
        """ComAdobeCqSocialAccountverificationImplAccountManagementConfigImProperties - a model defined in OpenAPI"""  # noqa: E501

        self._enable = None
        self._ttl1 = None
        self._ttl2 = None
        self.discriminator = None

        if enable is not None:
            self.enable = enable
        if ttl1 is not None:
            self.ttl1 = ttl1
        if ttl2 is not None:
            self.ttl2 = ttl2

    @property
    def enable(self):
        """Gets the enable of this ComAdobeCqSocialAccountverificationImplAccountManagementConfigImProperties.  # noqa: E501


        :return: The enable of this ComAdobeCqSocialAccountverificationImplAccountManagementConfigImProperties.  # noqa: E501
        :rtype: ConfigNodePropertyBoolean
        """
        return self._enable

    @enable.setter
    def enable(self, enable):
        """Sets the enable of this ComAdobeCqSocialAccountverificationImplAccountManagementConfigImProperties.


        :param enable: The enable of this ComAdobeCqSocialAccountverificationImplAccountManagementConfigImProperties.  # noqa: E501
        :type: ConfigNodePropertyBoolean
        """

        self._enable = enable

    @property
    def ttl1(self):
        """Gets the ttl1 of this ComAdobeCqSocialAccountverificationImplAccountManagementConfigImProperties.  # noqa: E501


        :return: The ttl1 of this ComAdobeCqSocialAccountverificationImplAccountManagementConfigImProperties.  # noqa: E501
        :rtype: ConfigNodePropertyInteger
        """
        return self._ttl1

    @ttl1.setter
    def ttl1(self, ttl1):
        """Sets the ttl1 of this ComAdobeCqSocialAccountverificationImplAccountManagementConfigImProperties.


        :param ttl1: The ttl1 of this ComAdobeCqSocialAccountverificationImplAccountManagementConfigImProperties.  # noqa: E501
        :type: ConfigNodePropertyInteger
        """

        self._ttl1 = ttl1

    @property
    def ttl2(self):
        """Gets the ttl2 of this ComAdobeCqSocialAccountverificationImplAccountManagementConfigImProperties.  # noqa: E501


        :return: The ttl2 of this ComAdobeCqSocialAccountverificationImplAccountManagementConfigImProperties.  # noqa: E501
        :rtype: ConfigNodePropertyInteger
        """
        return self._ttl2

    @ttl2.setter
    def ttl2(self, ttl2):
        """Sets the ttl2 of this ComAdobeCqSocialAccountverificationImplAccountManagementConfigImProperties.


        :param ttl2: The ttl2 of this ComAdobeCqSocialAccountverificationImplAccountManagementConfigImProperties.  # noqa: E501
        :type: ConfigNodePropertyInteger
        """

        self._ttl2 = ttl2

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComAdobeCqSocialAccountverificationImplAccountManagementConfigImProperties):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
