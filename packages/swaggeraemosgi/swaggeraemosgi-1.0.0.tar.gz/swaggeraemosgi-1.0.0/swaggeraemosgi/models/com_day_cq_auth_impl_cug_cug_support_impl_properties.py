# coding: utf-8

"""
    Adobe Experience Manager OSGI config (AEM) API

    Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API  # noqa: E501

    OpenAPI spec version: 1.0.0-pre.0
    Contact: opensource@shinesolutions.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ComDayCqAuthImplCugCugSupportImplProperties(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cug_exempted_principals': 'ConfigNodePropertyArray',
        'cug_enabled': 'ConfigNodePropertyBoolean',
        'cug_principals_regex': 'ConfigNodePropertyString',
        'cug_principals_replacement': 'ConfigNodePropertyString'
    }

    attribute_map = {
        'cug_exempted_principals': 'cug.exempted.principals',
        'cug_enabled': 'cug.enabled',
        'cug_principals_regex': 'cug.principals.regex',
        'cug_principals_replacement': 'cug.principals.replacement'
    }

    def __init__(self, cug_exempted_principals=None, cug_enabled=None, cug_principals_regex=None, cug_principals_replacement=None):  # noqa: E501
        """ComDayCqAuthImplCugCugSupportImplProperties - a model defined in OpenAPI"""  # noqa: E501

        self._cug_exempted_principals = None
        self._cug_enabled = None
        self._cug_principals_regex = None
        self._cug_principals_replacement = None
        self.discriminator = None

        if cug_exempted_principals is not None:
            self.cug_exempted_principals = cug_exempted_principals
        if cug_enabled is not None:
            self.cug_enabled = cug_enabled
        if cug_principals_regex is not None:
            self.cug_principals_regex = cug_principals_regex
        if cug_principals_replacement is not None:
            self.cug_principals_replacement = cug_principals_replacement

    @property
    def cug_exempted_principals(self):
        """Gets the cug_exempted_principals of this ComDayCqAuthImplCugCugSupportImplProperties.  # noqa: E501


        :return: The cug_exempted_principals of this ComDayCqAuthImplCugCugSupportImplProperties.  # noqa: E501
        :rtype: ConfigNodePropertyArray
        """
        return self._cug_exempted_principals

    @cug_exempted_principals.setter
    def cug_exempted_principals(self, cug_exempted_principals):
        """Sets the cug_exempted_principals of this ComDayCqAuthImplCugCugSupportImplProperties.


        :param cug_exempted_principals: The cug_exempted_principals of this ComDayCqAuthImplCugCugSupportImplProperties.  # noqa: E501
        :type: ConfigNodePropertyArray
        """

        self._cug_exempted_principals = cug_exempted_principals

    @property
    def cug_enabled(self):
        """Gets the cug_enabled of this ComDayCqAuthImplCugCugSupportImplProperties.  # noqa: E501


        :return: The cug_enabled of this ComDayCqAuthImplCugCugSupportImplProperties.  # noqa: E501
        :rtype: ConfigNodePropertyBoolean
        """
        return self._cug_enabled

    @cug_enabled.setter
    def cug_enabled(self, cug_enabled):
        """Sets the cug_enabled of this ComDayCqAuthImplCugCugSupportImplProperties.


        :param cug_enabled: The cug_enabled of this ComDayCqAuthImplCugCugSupportImplProperties.  # noqa: E501
        :type: ConfigNodePropertyBoolean
        """

        self._cug_enabled = cug_enabled

    @property
    def cug_principals_regex(self):
        """Gets the cug_principals_regex of this ComDayCqAuthImplCugCugSupportImplProperties.  # noqa: E501


        :return: The cug_principals_regex of this ComDayCqAuthImplCugCugSupportImplProperties.  # noqa: E501
        :rtype: ConfigNodePropertyString
        """
        return self._cug_principals_regex

    @cug_principals_regex.setter
    def cug_principals_regex(self, cug_principals_regex):
        """Sets the cug_principals_regex of this ComDayCqAuthImplCugCugSupportImplProperties.


        :param cug_principals_regex: The cug_principals_regex of this ComDayCqAuthImplCugCugSupportImplProperties.  # noqa: E501
        :type: ConfigNodePropertyString
        """

        self._cug_principals_regex = cug_principals_regex

    @property
    def cug_principals_replacement(self):
        """Gets the cug_principals_replacement of this ComDayCqAuthImplCugCugSupportImplProperties.  # noqa: E501


        :return: The cug_principals_replacement of this ComDayCqAuthImplCugCugSupportImplProperties.  # noqa: E501
        :rtype: ConfigNodePropertyString
        """
        return self._cug_principals_replacement

    @cug_principals_replacement.setter
    def cug_principals_replacement(self, cug_principals_replacement):
        """Sets the cug_principals_replacement of this ComDayCqAuthImplCugCugSupportImplProperties.


        :param cug_principals_replacement: The cug_principals_replacement of this ComDayCqAuthImplCugCugSupportImplProperties.  # noqa: E501
        :type: ConfigNodePropertyString
        """

        self._cug_principals_replacement = cug_principals_replacement

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComDayCqAuthImplCugCugSupportImplProperties):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
