# coding: utf-8

"""
    Adobe Experience Manager OSGI config (AEM) API

    Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API  # noqa: E501

    OpenAPI spec version: 1.0.0-pre.0
    Contact: opensource@shinesolutions.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ComAdobeGraniteWorkflowCoreWorkflowConfigProperties(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cq_workflow_config_workflow_packages_root_path': 'ConfigNodePropertyArray',
        'cq_workflow_config_workflow_process_legacy_mode': 'ConfigNodePropertyBoolean',
        'cq_workflow_config_allow_locking': 'ConfigNodePropertyBoolean'
    }

    attribute_map = {
        'cq_workflow_config_workflow_packages_root_path': 'cq.workflow.config.workflow.packages.root.path',
        'cq_workflow_config_workflow_process_legacy_mode': 'cq.workflow.config.workflow.process.legacy.mode',
        'cq_workflow_config_allow_locking': 'cq.workflow.config.allow.locking'
    }

    def __init__(self, cq_workflow_config_workflow_packages_root_path=None, cq_workflow_config_workflow_process_legacy_mode=None, cq_workflow_config_allow_locking=None):  # noqa: E501
        """ComAdobeGraniteWorkflowCoreWorkflowConfigProperties - a model defined in OpenAPI"""  # noqa: E501

        self._cq_workflow_config_workflow_packages_root_path = None
        self._cq_workflow_config_workflow_process_legacy_mode = None
        self._cq_workflow_config_allow_locking = None
        self.discriminator = None

        if cq_workflow_config_workflow_packages_root_path is not None:
            self.cq_workflow_config_workflow_packages_root_path = cq_workflow_config_workflow_packages_root_path
        if cq_workflow_config_workflow_process_legacy_mode is not None:
            self.cq_workflow_config_workflow_process_legacy_mode = cq_workflow_config_workflow_process_legacy_mode
        if cq_workflow_config_allow_locking is not None:
            self.cq_workflow_config_allow_locking = cq_workflow_config_allow_locking

    @property
    def cq_workflow_config_workflow_packages_root_path(self):
        """Gets the cq_workflow_config_workflow_packages_root_path of this ComAdobeGraniteWorkflowCoreWorkflowConfigProperties.  # noqa: E501


        :return: The cq_workflow_config_workflow_packages_root_path of this ComAdobeGraniteWorkflowCoreWorkflowConfigProperties.  # noqa: E501
        :rtype: ConfigNodePropertyArray
        """
        return self._cq_workflow_config_workflow_packages_root_path

    @cq_workflow_config_workflow_packages_root_path.setter
    def cq_workflow_config_workflow_packages_root_path(self, cq_workflow_config_workflow_packages_root_path):
        """Sets the cq_workflow_config_workflow_packages_root_path of this ComAdobeGraniteWorkflowCoreWorkflowConfigProperties.


        :param cq_workflow_config_workflow_packages_root_path: The cq_workflow_config_workflow_packages_root_path of this ComAdobeGraniteWorkflowCoreWorkflowConfigProperties.  # noqa: E501
        :type: ConfigNodePropertyArray
        """

        self._cq_workflow_config_workflow_packages_root_path = cq_workflow_config_workflow_packages_root_path

    @property
    def cq_workflow_config_workflow_process_legacy_mode(self):
        """Gets the cq_workflow_config_workflow_process_legacy_mode of this ComAdobeGraniteWorkflowCoreWorkflowConfigProperties.  # noqa: E501


        :return: The cq_workflow_config_workflow_process_legacy_mode of this ComAdobeGraniteWorkflowCoreWorkflowConfigProperties.  # noqa: E501
        :rtype: ConfigNodePropertyBoolean
        """
        return self._cq_workflow_config_workflow_process_legacy_mode

    @cq_workflow_config_workflow_process_legacy_mode.setter
    def cq_workflow_config_workflow_process_legacy_mode(self, cq_workflow_config_workflow_process_legacy_mode):
        """Sets the cq_workflow_config_workflow_process_legacy_mode of this ComAdobeGraniteWorkflowCoreWorkflowConfigProperties.


        :param cq_workflow_config_workflow_process_legacy_mode: The cq_workflow_config_workflow_process_legacy_mode of this ComAdobeGraniteWorkflowCoreWorkflowConfigProperties.  # noqa: E501
        :type: ConfigNodePropertyBoolean
        """

        self._cq_workflow_config_workflow_process_legacy_mode = cq_workflow_config_workflow_process_legacy_mode

    @property
    def cq_workflow_config_allow_locking(self):
        """Gets the cq_workflow_config_allow_locking of this ComAdobeGraniteWorkflowCoreWorkflowConfigProperties.  # noqa: E501


        :return: The cq_workflow_config_allow_locking of this ComAdobeGraniteWorkflowCoreWorkflowConfigProperties.  # noqa: E501
        :rtype: ConfigNodePropertyBoolean
        """
        return self._cq_workflow_config_allow_locking

    @cq_workflow_config_allow_locking.setter
    def cq_workflow_config_allow_locking(self, cq_workflow_config_allow_locking):
        """Sets the cq_workflow_config_allow_locking of this ComAdobeGraniteWorkflowCoreWorkflowConfigProperties.


        :param cq_workflow_config_allow_locking: The cq_workflow_config_allow_locking of this ComAdobeGraniteWorkflowCoreWorkflowConfigProperties.  # noqa: E501
        :type: ConfigNodePropertyBoolean
        """

        self._cq_workflow_config_allow_locking = cq_workflow_config_allow_locking

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComAdobeGraniteWorkflowCoreWorkflowConfigProperties):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
