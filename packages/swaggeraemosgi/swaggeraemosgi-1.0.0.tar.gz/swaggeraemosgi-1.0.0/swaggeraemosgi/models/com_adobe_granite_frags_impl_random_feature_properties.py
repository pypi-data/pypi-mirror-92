# coding: utf-8

"""
    Adobe Experience Manager OSGI config (AEM) API

    Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API  # noqa: E501

    OpenAPI spec version: 1.0.0-pre.0
    Contact: opensource@shinesolutions.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ComAdobeGraniteFragsImplRandomFeatureProperties(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'feature_name': 'ConfigNodePropertyString',
        'feature_description': 'ConfigNodePropertyString',
        'active_percentage': 'ConfigNodePropertyString',
        'cookie_name': 'ConfigNodePropertyString',
        'cookie_max_age': 'ConfigNodePropertyInteger'
    }

    attribute_map = {
        'feature_name': 'feature.name',
        'feature_description': 'feature.description',
        'active_percentage': 'active.percentage',
        'cookie_name': 'cookie.name',
        'cookie_max_age': 'cookie.maxAge'
    }

    def __init__(self, feature_name=None, feature_description=None, active_percentage=None, cookie_name=None, cookie_max_age=None):  # noqa: E501
        """ComAdobeGraniteFragsImplRandomFeatureProperties - a model defined in OpenAPI"""  # noqa: E501

        self._feature_name = None
        self._feature_description = None
        self._active_percentage = None
        self._cookie_name = None
        self._cookie_max_age = None
        self.discriminator = None

        if feature_name is not None:
            self.feature_name = feature_name
        if feature_description is not None:
            self.feature_description = feature_description
        if active_percentage is not None:
            self.active_percentage = active_percentage
        if cookie_name is not None:
            self.cookie_name = cookie_name
        if cookie_max_age is not None:
            self.cookie_max_age = cookie_max_age

    @property
    def feature_name(self):
        """Gets the feature_name of this ComAdobeGraniteFragsImplRandomFeatureProperties.  # noqa: E501


        :return: The feature_name of this ComAdobeGraniteFragsImplRandomFeatureProperties.  # noqa: E501
        :rtype: ConfigNodePropertyString
        """
        return self._feature_name

    @feature_name.setter
    def feature_name(self, feature_name):
        """Sets the feature_name of this ComAdobeGraniteFragsImplRandomFeatureProperties.


        :param feature_name: The feature_name of this ComAdobeGraniteFragsImplRandomFeatureProperties.  # noqa: E501
        :type: ConfigNodePropertyString
        """

        self._feature_name = feature_name

    @property
    def feature_description(self):
        """Gets the feature_description of this ComAdobeGraniteFragsImplRandomFeatureProperties.  # noqa: E501


        :return: The feature_description of this ComAdobeGraniteFragsImplRandomFeatureProperties.  # noqa: E501
        :rtype: ConfigNodePropertyString
        """
        return self._feature_description

    @feature_description.setter
    def feature_description(self, feature_description):
        """Sets the feature_description of this ComAdobeGraniteFragsImplRandomFeatureProperties.


        :param feature_description: The feature_description of this ComAdobeGraniteFragsImplRandomFeatureProperties.  # noqa: E501
        :type: ConfigNodePropertyString
        """

        self._feature_description = feature_description

    @property
    def active_percentage(self):
        """Gets the active_percentage of this ComAdobeGraniteFragsImplRandomFeatureProperties.  # noqa: E501


        :return: The active_percentage of this ComAdobeGraniteFragsImplRandomFeatureProperties.  # noqa: E501
        :rtype: ConfigNodePropertyString
        """
        return self._active_percentage

    @active_percentage.setter
    def active_percentage(self, active_percentage):
        """Sets the active_percentage of this ComAdobeGraniteFragsImplRandomFeatureProperties.


        :param active_percentage: The active_percentage of this ComAdobeGraniteFragsImplRandomFeatureProperties.  # noqa: E501
        :type: ConfigNodePropertyString
        """

        self._active_percentage = active_percentage

    @property
    def cookie_name(self):
        """Gets the cookie_name of this ComAdobeGraniteFragsImplRandomFeatureProperties.  # noqa: E501


        :return: The cookie_name of this ComAdobeGraniteFragsImplRandomFeatureProperties.  # noqa: E501
        :rtype: ConfigNodePropertyString
        """
        return self._cookie_name

    @cookie_name.setter
    def cookie_name(self, cookie_name):
        """Sets the cookie_name of this ComAdobeGraniteFragsImplRandomFeatureProperties.


        :param cookie_name: The cookie_name of this ComAdobeGraniteFragsImplRandomFeatureProperties.  # noqa: E501
        :type: ConfigNodePropertyString
        """

        self._cookie_name = cookie_name

    @property
    def cookie_max_age(self):
        """Gets the cookie_max_age of this ComAdobeGraniteFragsImplRandomFeatureProperties.  # noqa: E501


        :return: The cookie_max_age of this ComAdobeGraniteFragsImplRandomFeatureProperties.  # noqa: E501
        :rtype: ConfigNodePropertyInteger
        """
        return self._cookie_max_age

    @cookie_max_age.setter
    def cookie_max_age(self, cookie_max_age):
        """Sets the cookie_max_age of this ComAdobeGraniteFragsImplRandomFeatureProperties.


        :param cookie_max_age: The cookie_max_age of this ComAdobeGraniteFragsImplRandomFeatureProperties.  # noqa: E501
        :type: ConfigNodePropertyInteger
        """

        self._cookie_max_age = cookie_max_age

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComAdobeGraniteFragsImplRandomFeatureProperties):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
