# coding: utf-8

"""
    Adobe Experience Manager OSGI config (AEM) API

    Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API  # noqa: E501

    OpenAPI spec version: 1.0.0-pre.0
    Contact: opensource@shinesolutions.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ComAdobeCqAuditPurgePagesProperties(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'auditlog_rule_name': 'ConfigNodePropertyString',
        'auditlog_rule_contentpath': 'ConfigNodePropertyString',
        'auditlog_rule_minimumage': 'ConfigNodePropertyInteger',
        'auditlog_rule_types': 'ConfigNodePropertyDropDown'
    }

    attribute_map = {
        'auditlog_rule_name': 'auditlog.rule.name',
        'auditlog_rule_contentpath': 'auditlog.rule.contentpath',
        'auditlog_rule_minimumage': 'auditlog.rule.minimumage',
        'auditlog_rule_types': 'auditlog.rule.types'
    }

    def __init__(self, auditlog_rule_name=None, auditlog_rule_contentpath=None, auditlog_rule_minimumage=None, auditlog_rule_types=None):  # noqa: E501
        """ComAdobeCqAuditPurgePagesProperties - a model defined in OpenAPI"""  # noqa: E501

        self._auditlog_rule_name = None
        self._auditlog_rule_contentpath = None
        self._auditlog_rule_minimumage = None
        self._auditlog_rule_types = None
        self.discriminator = None

        if auditlog_rule_name is not None:
            self.auditlog_rule_name = auditlog_rule_name
        if auditlog_rule_contentpath is not None:
            self.auditlog_rule_contentpath = auditlog_rule_contentpath
        if auditlog_rule_minimumage is not None:
            self.auditlog_rule_minimumage = auditlog_rule_minimumage
        if auditlog_rule_types is not None:
            self.auditlog_rule_types = auditlog_rule_types

    @property
    def auditlog_rule_name(self):
        """Gets the auditlog_rule_name of this ComAdobeCqAuditPurgePagesProperties.  # noqa: E501


        :return: The auditlog_rule_name of this ComAdobeCqAuditPurgePagesProperties.  # noqa: E501
        :rtype: ConfigNodePropertyString
        """
        return self._auditlog_rule_name

    @auditlog_rule_name.setter
    def auditlog_rule_name(self, auditlog_rule_name):
        """Sets the auditlog_rule_name of this ComAdobeCqAuditPurgePagesProperties.


        :param auditlog_rule_name: The auditlog_rule_name of this ComAdobeCqAuditPurgePagesProperties.  # noqa: E501
        :type: ConfigNodePropertyString
        """

        self._auditlog_rule_name = auditlog_rule_name

    @property
    def auditlog_rule_contentpath(self):
        """Gets the auditlog_rule_contentpath of this ComAdobeCqAuditPurgePagesProperties.  # noqa: E501


        :return: The auditlog_rule_contentpath of this ComAdobeCqAuditPurgePagesProperties.  # noqa: E501
        :rtype: ConfigNodePropertyString
        """
        return self._auditlog_rule_contentpath

    @auditlog_rule_contentpath.setter
    def auditlog_rule_contentpath(self, auditlog_rule_contentpath):
        """Sets the auditlog_rule_contentpath of this ComAdobeCqAuditPurgePagesProperties.


        :param auditlog_rule_contentpath: The auditlog_rule_contentpath of this ComAdobeCqAuditPurgePagesProperties.  # noqa: E501
        :type: ConfigNodePropertyString
        """

        self._auditlog_rule_contentpath = auditlog_rule_contentpath

    @property
    def auditlog_rule_minimumage(self):
        """Gets the auditlog_rule_minimumage of this ComAdobeCqAuditPurgePagesProperties.  # noqa: E501


        :return: The auditlog_rule_minimumage of this ComAdobeCqAuditPurgePagesProperties.  # noqa: E501
        :rtype: ConfigNodePropertyInteger
        """
        return self._auditlog_rule_minimumage

    @auditlog_rule_minimumage.setter
    def auditlog_rule_minimumage(self, auditlog_rule_minimumage):
        """Sets the auditlog_rule_minimumage of this ComAdobeCqAuditPurgePagesProperties.


        :param auditlog_rule_minimumage: The auditlog_rule_minimumage of this ComAdobeCqAuditPurgePagesProperties.  # noqa: E501
        :type: ConfigNodePropertyInteger
        """

        self._auditlog_rule_minimumage = auditlog_rule_minimumage

    @property
    def auditlog_rule_types(self):
        """Gets the auditlog_rule_types of this ComAdobeCqAuditPurgePagesProperties.  # noqa: E501


        :return: The auditlog_rule_types of this ComAdobeCqAuditPurgePagesProperties.  # noqa: E501
        :rtype: ConfigNodePropertyDropDown
        """
        return self._auditlog_rule_types

    @auditlog_rule_types.setter
    def auditlog_rule_types(self, auditlog_rule_types):
        """Sets the auditlog_rule_types of this ComAdobeCqAuditPurgePagesProperties.


        :param auditlog_rule_types: The auditlog_rule_types of this ComAdobeCqAuditPurgePagesProperties.  # noqa: E501
        :type: ConfigNodePropertyDropDown
        """

        self._auditlog_rule_types = auditlog_rule_types

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComAdobeCqAuditPurgePagesProperties):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
