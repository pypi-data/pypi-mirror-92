# coding: utf-8

"""
    Adobe Experience Manager OSGI config (AEM) API

    Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API  # noqa: E501

    OpenAPI spec version: 1.0.0-pre.0
    Contact: opensource@shinesolutions.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ComDayCqReplicationImplReplicationContentFactoryProviderImplProperties(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'replication_content_use_file_storage': 'ConfigNodePropertyBoolean',
        'replication_content_max_commit_attempts': 'ConfigNodePropertyInteger'
    }

    attribute_map = {
        'replication_content_use_file_storage': 'replication.content.useFileStorage',
        'replication_content_max_commit_attempts': 'replication.content.maxCommitAttempts'
    }

    def __init__(self, replication_content_use_file_storage=None, replication_content_max_commit_attempts=None):  # noqa: E501
        """ComDayCqReplicationImplReplicationContentFactoryProviderImplProperties - a model defined in OpenAPI"""  # noqa: E501

        self._replication_content_use_file_storage = None
        self._replication_content_max_commit_attempts = None
        self.discriminator = None

        if replication_content_use_file_storage is not None:
            self.replication_content_use_file_storage = replication_content_use_file_storage
        if replication_content_max_commit_attempts is not None:
            self.replication_content_max_commit_attempts = replication_content_max_commit_attempts

    @property
    def replication_content_use_file_storage(self):
        """Gets the replication_content_use_file_storage of this ComDayCqReplicationImplReplicationContentFactoryProviderImplProperties.  # noqa: E501


        :return: The replication_content_use_file_storage of this ComDayCqReplicationImplReplicationContentFactoryProviderImplProperties.  # noqa: E501
        :rtype: ConfigNodePropertyBoolean
        """
        return self._replication_content_use_file_storage

    @replication_content_use_file_storage.setter
    def replication_content_use_file_storage(self, replication_content_use_file_storage):
        """Sets the replication_content_use_file_storage of this ComDayCqReplicationImplReplicationContentFactoryProviderImplProperties.


        :param replication_content_use_file_storage: The replication_content_use_file_storage of this ComDayCqReplicationImplReplicationContentFactoryProviderImplProperties.  # noqa: E501
        :type: ConfigNodePropertyBoolean
        """

        self._replication_content_use_file_storage = replication_content_use_file_storage

    @property
    def replication_content_max_commit_attempts(self):
        """Gets the replication_content_max_commit_attempts of this ComDayCqReplicationImplReplicationContentFactoryProviderImplProperties.  # noqa: E501


        :return: The replication_content_max_commit_attempts of this ComDayCqReplicationImplReplicationContentFactoryProviderImplProperties.  # noqa: E501
        :rtype: ConfigNodePropertyInteger
        """
        return self._replication_content_max_commit_attempts

    @replication_content_max_commit_attempts.setter
    def replication_content_max_commit_attempts(self, replication_content_max_commit_attempts):
        """Sets the replication_content_max_commit_attempts of this ComDayCqReplicationImplReplicationContentFactoryProviderImplProperties.


        :param replication_content_max_commit_attempts: The replication_content_max_commit_attempts of this ComDayCqReplicationImplReplicationContentFactoryProviderImplProperties.  # noqa: E501
        :type: ConfigNodePropertyInteger
        """

        self._replication_content_max_commit_attempts = replication_content_max_commit_attempts

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComDayCqReplicationImplReplicationContentFactoryProviderImplProperties):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
