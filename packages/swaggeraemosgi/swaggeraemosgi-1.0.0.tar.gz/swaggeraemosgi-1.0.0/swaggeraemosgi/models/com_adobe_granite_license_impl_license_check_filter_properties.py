# coding: utf-8

"""
    Adobe Experience Manager OSGI config (AEM) API

    Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API  # noqa: E501

    OpenAPI spec version: 1.0.0-pre.0
    Contact: opensource@shinesolutions.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ComAdobeGraniteLicenseImplLicenseCheckFilterProperties(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'check_internval': 'ConfigNodePropertyInteger',
        'exclude_ids': 'ConfigNodePropertyArray',
        'encrypt_ping': 'ConfigNodePropertyBoolean'
    }

    attribute_map = {
        'check_internval': 'checkInternval',
        'exclude_ids': 'excludeIds',
        'encrypt_ping': 'encryptPing'
    }

    def __init__(self, check_internval=None, exclude_ids=None, encrypt_ping=None):  # noqa: E501
        """ComAdobeGraniteLicenseImplLicenseCheckFilterProperties - a model defined in OpenAPI"""  # noqa: E501

        self._check_internval = None
        self._exclude_ids = None
        self._encrypt_ping = None
        self.discriminator = None

        if check_internval is not None:
            self.check_internval = check_internval
        if exclude_ids is not None:
            self.exclude_ids = exclude_ids
        if encrypt_ping is not None:
            self.encrypt_ping = encrypt_ping

    @property
    def check_internval(self):
        """Gets the check_internval of this ComAdobeGraniteLicenseImplLicenseCheckFilterProperties.  # noqa: E501


        :return: The check_internval of this ComAdobeGraniteLicenseImplLicenseCheckFilterProperties.  # noqa: E501
        :rtype: ConfigNodePropertyInteger
        """
        return self._check_internval

    @check_internval.setter
    def check_internval(self, check_internval):
        """Sets the check_internval of this ComAdobeGraniteLicenseImplLicenseCheckFilterProperties.


        :param check_internval: The check_internval of this ComAdobeGraniteLicenseImplLicenseCheckFilterProperties.  # noqa: E501
        :type: ConfigNodePropertyInteger
        """

        self._check_internval = check_internval

    @property
    def exclude_ids(self):
        """Gets the exclude_ids of this ComAdobeGraniteLicenseImplLicenseCheckFilterProperties.  # noqa: E501


        :return: The exclude_ids of this ComAdobeGraniteLicenseImplLicenseCheckFilterProperties.  # noqa: E501
        :rtype: ConfigNodePropertyArray
        """
        return self._exclude_ids

    @exclude_ids.setter
    def exclude_ids(self, exclude_ids):
        """Sets the exclude_ids of this ComAdobeGraniteLicenseImplLicenseCheckFilterProperties.


        :param exclude_ids: The exclude_ids of this ComAdobeGraniteLicenseImplLicenseCheckFilterProperties.  # noqa: E501
        :type: ConfigNodePropertyArray
        """

        self._exclude_ids = exclude_ids

    @property
    def encrypt_ping(self):
        """Gets the encrypt_ping of this ComAdobeGraniteLicenseImplLicenseCheckFilterProperties.  # noqa: E501


        :return: The encrypt_ping of this ComAdobeGraniteLicenseImplLicenseCheckFilterProperties.  # noqa: E501
        :rtype: ConfigNodePropertyBoolean
        """
        return self._encrypt_ping

    @encrypt_ping.setter
    def encrypt_ping(self, encrypt_ping):
        """Sets the encrypt_ping of this ComAdobeGraniteLicenseImplLicenseCheckFilterProperties.


        :param encrypt_ping: The encrypt_ping of this ComAdobeGraniteLicenseImplLicenseCheckFilterProperties.  # noqa: E501
        :type: ConfigNodePropertyBoolean
        """

        self._encrypt_ping = encrypt_ping

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComAdobeGraniteLicenseImplLicenseCheckFilterProperties):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
