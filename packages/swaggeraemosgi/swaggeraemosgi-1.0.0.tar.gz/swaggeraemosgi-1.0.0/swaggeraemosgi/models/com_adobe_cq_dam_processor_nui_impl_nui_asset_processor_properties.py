# coding: utf-8

"""
    Adobe Experience Manager OSGI config (AEM) API

    Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API  # noqa: E501

    OpenAPI spec version: 1.0.0-pre.0
    Contact: opensource@shinesolutions.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ComAdobeCqDamProcessorNuiImplNuiAssetProcessorProperties(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'nui_enabled': 'ConfigNodePropertyBoolean',
        'nui_service_url': 'ConfigNodePropertyString',
        'nui_api_key': 'ConfigNodePropertyString'
    }

    attribute_map = {
        'nui_enabled': 'nuiEnabled',
        'nui_service_url': 'nuiServiceUrl',
        'nui_api_key': 'nuiApiKey'
    }

    def __init__(self, nui_enabled=None, nui_service_url=None, nui_api_key=None):  # noqa: E501
        """ComAdobeCqDamProcessorNuiImplNuiAssetProcessorProperties - a model defined in OpenAPI"""  # noqa: E501

        self._nui_enabled = None
        self._nui_service_url = None
        self._nui_api_key = None
        self.discriminator = None

        if nui_enabled is not None:
            self.nui_enabled = nui_enabled
        if nui_service_url is not None:
            self.nui_service_url = nui_service_url
        if nui_api_key is not None:
            self.nui_api_key = nui_api_key

    @property
    def nui_enabled(self):
        """Gets the nui_enabled of this ComAdobeCqDamProcessorNuiImplNuiAssetProcessorProperties.  # noqa: E501


        :return: The nui_enabled of this ComAdobeCqDamProcessorNuiImplNuiAssetProcessorProperties.  # noqa: E501
        :rtype: ConfigNodePropertyBoolean
        """
        return self._nui_enabled

    @nui_enabled.setter
    def nui_enabled(self, nui_enabled):
        """Sets the nui_enabled of this ComAdobeCqDamProcessorNuiImplNuiAssetProcessorProperties.


        :param nui_enabled: The nui_enabled of this ComAdobeCqDamProcessorNuiImplNuiAssetProcessorProperties.  # noqa: E501
        :type: ConfigNodePropertyBoolean
        """

        self._nui_enabled = nui_enabled

    @property
    def nui_service_url(self):
        """Gets the nui_service_url of this ComAdobeCqDamProcessorNuiImplNuiAssetProcessorProperties.  # noqa: E501


        :return: The nui_service_url of this ComAdobeCqDamProcessorNuiImplNuiAssetProcessorProperties.  # noqa: E501
        :rtype: ConfigNodePropertyString
        """
        return self._nui_service_url

    @nui_service_url.setter
    def nui_service_url(self, nui_service_url):
        """Sets the nui_service_url of this ComAdobeCqDamProcessorNuiImplNuiAssetProcessorProperties.


        :param nui_service_url: The nui_service_url of this ComAdobeCqDamProcessorNuiImplNuiAssetProcessorProperties.  # noqa: E501
        :type: ConfigNodePropertyString
        """

        self._nui_service_url = nui_service_url

    @property
    def nui_api_key(self):
        """Gets the nui_api_key of this ComAdobeCqDamProcessorNuiImplNuiAssetProcessorProperties.  # noqa: E501


        :return: The nui_api_key of this ComAdobeCqDamProcessorNuiImplNuiAssetProcessorProperties.  # noqa: E501
        :rtype: ConfigNodePropertyString
        """
        return self._nui_api_key

    @nui_api_key.setter
    def nui_api_key(self, nui_api_key):
        """Sets the nui_api_key of this ComAdobeCqDamProcessorNuiImplNuiAssetProcessorProperties.


        :param nui_api_key: The nui_api_key of this ComAdobeCqDamProcessorNuiImplNuiAssetProcessorProperties.  # noqa: E501
        :type: ConfigNodePropertyString
        """

        self._nui_api_key = nui_api_key

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComAdobeCqDamProcessorNuiImplNuiAssetProcessorProperties):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
