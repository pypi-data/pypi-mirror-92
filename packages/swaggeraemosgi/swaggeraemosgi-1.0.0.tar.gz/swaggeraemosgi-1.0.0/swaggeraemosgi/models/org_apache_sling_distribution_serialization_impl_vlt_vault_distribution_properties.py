# coding: utf-8

"""
    Adobe Experience Manager OSGI config (AEM) API

    Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API  # noqa: E501

    OpenAPI spec version: 1.0.0-pre.0
    Contact: opensource@shinesolutions.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'ConfigNodePropertyString',
        'type': 'ConfigNodePropertyDropDown',
        'import_mode': 'ConfigNodePropertyString',
        'acl_handling': 'ConfigNodePropertyString',
        'package_roots': 'ConfigNodePropertyString',
        'package_filters': 'ConfigNodePropertyArray',
        'property_filters': 'ConfigNodePropertyArray',
        'temp_fs_folder': 'ConfigNodePropertyString',
        'use_binary_references': 'ConfigNodePropertyBoolean',
        'auto_save_threshold': 'ConfigNodePropertyInteger',
        'cleanup_delay': 'ConfigNodePropertyInteger',
        'file_threshold': 'ConfigNodePropertyInteger',
        'mega_bytes': 'ConfigNodePropertyDropDown',
        'use_off_heap_memory': 'ConfigNodePropertyBoolean',
        'digest_algorithm': 'ConfigNodePropertyDropDown',
        'monitoring_queue_size': 'ConfigNodePropertyInteger',
        'paths_mapping': 'ConfigNodePropertyArray',
        'strict_import': 'ConfigNodePropertyBoolean'
    }

    attribute_map = {
        'name': 'name',
        'type': 'type',
        'import_mode': 'importMode',
        'acl_handling': 'aclHandling',
        'package_roots': 'package.roots',
        'package_filters': 'package.filters',
        'property_filters': 'property.filters',
        'temp_fs_folder': 'tempFsFolder',
        'use_binary_references': 'useBinaryReferences',
        'auto_save_threshold': 'autoSaveThreshold',
        'cleanup_delay': 'cleanupDelay',
        'file_threshold': 'fileThreshold',
        'mega_bytes': 'MEGA_BYTES',
        'use_off_heap_memory': 'useOffHeapMemory',
        'digest_algorithm': 'digestAlgorithm',
        'monitoring_queue_size': 'monitoringQueueSize',
        'paths_mapping': 'pathsMapping',
        'strict_import': 'strictImport'
    }

    def __init__(self, name=None, type=None, import_mode=None, acl_handling=None, package_roots=None, package_filters=None, property_filters=None, temp_fs_folder=None, use_binary_references=None, auto_save_threshold=None, cleanup_delay=None, file_threshold=None, mega_bytes=None, use_off_heap_memory=None, digest_algorithm=None, monitoring_queue_size=None, paths_mapping=None, strict_import=None):  # noqa: E501
        """OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties - a model defined in OpenAPI"""  # noqa: E501

        self._name = None
        self._type = None
        self._import_mode = None
        self._acl_handling = None
        self._package_roots = None
        self._package_filters = None
        self._property_filters = None
        self._temp_fs_folder = None
        self._use_binary_references = None
        self._auto_save_threshold = None
        self._cleanup_delay = None
        self._file_threshold = None
        self._mega_bytes = None
        self._use_off_heap_memory = None
        self._digest_algorithm = None
        self._monitoring_queue_size = None
        self._paths_mapping = None
        self._strict_import = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if type is not None:
            self.type = type
        if import_mode is not None:
            self.import_mode = import_mode
        if acl_handling is not None:
            self.acl_handling = acl_handling
        if package_roots is not None:
            self.package_roots = package_roots
        if package_filters is not None:
            self.package_filters = package_filters
        if property_filters is not None:
            self.property_filters = property_filters
        if temp_fs_folder is not None:
            self.temp_fs_folder = temp_fs_folder
        if use_binary_references is not None:
            self.use_binary_references = use_binary_references
        if auto_save_threshold is not None:
            self.auto_save_threshold = auto_save_threshold
        if cleanup_delay is not None:
            self.cleanup_delay = cleanup_delay
        if file_threshold is not None:
            self.file_threshold = file_threshold
        if mega_bytes is not None:
            self.mega_bytes = mega_bytes
        if use_off_heap_memory is not None:
            self.use_off_heap_memory = use_off_heap_memory
        if digest_algorithm is not None:
            self.digest_algorithm = digest_algorithm
        if monitoring_queue_size is not None:
            self.monitoring_queue_size = monitoring_queue_size
        if paths_mapping is not None:
            self.paths_mapping = paths_mapping
        if strict_import is not None:
            self.strict_import = strict_import

    @property
    def name(self):
        """Gets the name of this OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.  # noqa: E501


        :return: The name of this OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.  # noqa: E501
        :rtype: ConfigNodePropertyString
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.


        :param name: The name of this OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.  # noqa: E501
        :type: ConfigNodePropertyString
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.  # noqa: E501


        :return: The type of this OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.  # noqa: E501
        :rtype: ConfigNodePropertyDropDown
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.


        :param type: The type of this OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.  # noqa: E501
        :type: ConfigNodePropertyDropDown
        """

        self._type = type

    @property
    def import_mode(self):
        """Gets the import_mode of this OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.  # noqa: E501


        :return: The import_mode of this OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.  # noqa: E501
        :rtype: ConfigNodePropertyString
        """
        return self._import_mode

    @import_mode.setter
    def import_mode(self, import_mode):
        """Sets the import_mode of this OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.


        :param import_mode: The import_mode of this OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.  # noqa: E501
        :type: ConfigNodePropertyString
        """

        self._import_mode = import_mode

    @property
    def acl_handling(self):
        """Gets the acl_handling of this OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.  # noqa: E501


        :return: The acl_handling of this OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.  # noqa: E501
        :rtype: ConfigNodePropertyString
        """
        return self._acl_handling

    @acl_handling.setter
    def acl_handling(self, acl_handling):
        """Sets the acl_handling of this OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.


        :param acl_handling: The acl_handling of this OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.  # noqa: E501
        :type: ConfigNodePropertyString
        """

        self._acl_handling = acl_handling

    @property
    def package_roots(self):
        """Gets the package_roots of this OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.  # noqa: E501


        :return: The package_roots of this OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.  # noqa: E501
        :rtype: ConfigNodePropertyString
        """
        return self._package_roots

    @package_roots.setter
    def package_roots(self, package_roots):
        """Sets the package_roots of this OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.


        :param package_roots: The package_roots of this OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.  # noqa: E501
        :type: ConfigNodePropertyString
        """

        self._package_roots = package_roots

    @property
    def package_filters(self):
        """Gets the package_filters of this OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.  # noqa: E501


        :return: The package_filters of this OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.  # noqa: E501
        :rtype: ConfigNodePropertyArray
        """
        return self._package_filters

    @package_filters.setter
    def package_filters(self, package_filters):
        """Sets the package_filters of this OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.


        :param package_filters: The package_filters of this OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.  # noqa: E501
        :type: ConfigNodePropertyArray
        """

        self._package_filters = package_filters

    @property
    def property_filters(self):
        """Gets the property_filters of this OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.  # noqa: E501


        :return: The property_filters of this OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.  # noqa: E501
        :rtype: ConfigNodePropertyArray
        """
        return self._property_filters

    @property_filters.setter
    def property_filters(self, property_filters):
        """Sets the property_filters of this OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.


        :param property_filters: The property_filters of this OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.  # noqa: E501
        :type: ConfigNodePropertyArray
        """

        self._property_filters = property_filters

    @property
    def temp_fs_folder(self):
        """Gets the temp_fs_folder of this OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.  # noqa: E501


        :return: The temp_fs_folder of this OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.  # noqa: E501
        :rtype: ConfigNodePropertyString
        """
        return self._temp_fs_folder

    @temp_fs_folder.setter
    def temp_fs_folder(self, temp_fs_folder):
        """Sets the temp_fs_folder of this OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.


        :param temp_fs_folder: The temp_fs_folder of this OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.  # noqa: E501
        :type: ConfigNodePropertyString
        """

        self._temp_fs_folder = temp_fs_folder

    @property
    def use_binary_references(self):
        """Gets the use_binary_references of this OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.  # noqa: E501


        :return: The use_binary_references of this OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.  # noqa: E501
        :rtype: ConfigNodePropertyBoolean
        """
        return self._use_binary_references

    @use_binary_references.setter
    def use_binary_references(self, use_binary_references):
        """Sets the use_binary_references of this OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.


        :param use_binary_references: The use_binary_references of this OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.  # noqa: E501
        :type: ConfigNodePropertyBoolean
        """

        self._use_binary_references = use_binary_references

    @property
    def auto_save_threshold(self):
        """Gets the auto_save_threshold of this OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.  # noqa: E501


        :return: The auto_save_threshold of this OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.  # noqa: E501
        :rtype: ConfigNodePropertyInteger
        """
        return self._auto_save_threshold

    @auto_save_threshold.setter
    def auto_save_threshold(self, auto_save_threshold):
        """Sets the auto_save_threshold of this OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.


        :param auto_save_threshold: The auto_save_threshold of this OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.  # noqa: E501
        :type: ConfigNodePropertyInteger
        """

        self._auto_save_threshold = auto_save_threshold

    @property
    def cleanup_delay(self):
        """Gets the cleanup_delay of this OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.  # noqa: E501


        :return: The cleanup_delay of this OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.  # noqa: E501
        :rtype: ConfigNodePropertyInteger
        """
        return self._cleanup_delay

    @cleanup_delay.setter
    def cleanup_delay(self, cleanup_delay):
        """Sets the cleanup_delay of this OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.


        :param cleanup_delay: The cleanup_delay of this OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.  # noqa: E501
        :type: ConfigNodePropertyInteger
        """

        self._cleanup_delay = cleanup_delay

    @property
    def file_threshold(self):
        """Gets the file_threshold of this OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.  # noqa: E501


        :return: The file_threshold of this OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.  # noqa: E501
        :rtype: ConfigNodePropertyInteger
        """
        return self._file_threshold

    @file_threshold.setter
    def file_threshold(self, file_threshold):
        """Sets the file_threshold of this OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.


        :param file_threshold: The file_threshold of this OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.  # noqa: E501
        :type: ConfigNodePropertyInteger
        """

        self._file_threshold = file_threshold

    @property
    def mega_bytes(self):
        """Gets the mega_bytes of this OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.  # noqa: E501


        :return: The mega_bytes of this OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.  # noqa: E501
        :rtype: ConfigNodePropertyDropDown
        """
        return self._mega_bytes

    @mega_bytes.setter
    def mega_bytes(self, mega_bytes):
        """Sets the mega_bytes of this OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.


        :param mega_bytes: The mega_bytes of this OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.  # noqa: E501
        :type: ConfigNodePropertyDropDown
        """

        self._mega_bytes = mega_bytes

    @property
    def use_off_heap_memory(self):
        """Gets the use_off_heap_memory of this OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.  # noqa: E501


        :return: The use_off_heap_memory of this OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.  # noqa: E501
        :rtype: ConfigNodePropertyBoolean
        """
        return self._use_off_heap_memory

    @use_off_heap_memory.setter
    def use_off_heap_memory(self, use_off_heap_memory):
        """Sets the use_off_heap_memory of this OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.


        :param use_off_heap_memory: The use_off_heap_memory of this OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.  # noqa: E501
        :type: ConfigNodePropertyBoolean
        """

        self._use_off_heap_memory = use_off_heap_memory

    @property
    def digest_algorithm(self):
        """Gets the digest_algorithm of this OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.  # noqa: E501


        :return: The digest_algorithm of this OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.  # noqa: E501
        :rtype: ConfigNodePropertyDropDown
        """
        return self._digest_algorithm

    @digest_algorithm.setter
    def digest_algorithm(self, digest_algorithm):
        """Sets the digest_algorithm of this OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.


        :param digest_algorithm: The digest_algorithm of this OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.  # noqa: E501
        :type: ConfigNodePropertyDropDown
        """

        self._digest_algorithm = digest_algorithm

    @property
    def monitoring_queue_size(self):
        """Gets the monitoring_queue_size of this OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.  # noqa: E501


        :return: The monitoring_queue_size of this OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.  # noqa: E501
        :rtype: ConfigNodePropertyInteger
        """
        return self._monitoring_queue_size

    @monitoring_queue_size.setter
    def monitoring_queue_size(self, monitoring_queue_size):
        """Sets the monitoring_queue_size of this OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.


        :param monitoring_queue_size: The monitoring_queue_size of this OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.  # noqa: E501
        :type: ConfigNodePropertyInteger
        """

        self._monitoring_queue_size = monitoring_queue_size

    @property
    def paths_mapping(self):
        """Gets the paths_mapping of this OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.  # noqa: E501


        :return: The paths_mapping of this OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.  # noqa: E501
        :rtype: ConfigNodePropertyArray
        """
        return self._paths_mapping

    @paths_mapping.setter
    def paths_mapping(self, paths_mapping):
        """Sets the paths_mapping of this OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.


        :param paths_mapping: The paths_mapping of this OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.  # noqa: E501
        :type: ConfigNodePropertyArray
        """

        self._paths_mapping = paths_mapping

    @property
    def strict_import(self):
        """Gets the strict_import of this OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.  # noqa: E501


        :return: The strict_import of this OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.  # noqa: E501
        :rtype: ConfigNodePropertyBoolean
        """
        return self._strict_import

    @strict_import.setter
    def strict_import(self, strict_import):
        """Sets the strict_import of this OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.


        :param strict_import: The strict_import of this OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.  # noqa: E501
        :type: ConfigNodePropertyBoolean
        """

        self._strict_import = strict_import

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
