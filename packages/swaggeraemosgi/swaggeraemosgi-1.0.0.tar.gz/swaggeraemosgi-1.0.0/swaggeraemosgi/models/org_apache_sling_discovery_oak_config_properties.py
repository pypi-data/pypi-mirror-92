# coding: utf-8

"""
    Adobe Experience Manager OSGI config (AEM) API

    Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API  # noqa: E501

    OpenAPI spec version: 1.0.0-pre.0
    Contact: opensource@shinesolutions.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class OrgApacheSlingDiscoveryOakConfigProperties(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'connector_ping_timeout': 'ConfigNodePropertyInteger',
        'connector_ping_interval': 'ConfigNodePropertyInteger',
        'discovery_lite_check_interval': 'ConfigNodePropertyInteger',
        'cluster_sync_service_timeout': 'ConfigNodePropertyInteger',
        'cluster_sync_service_interval': 'ConfigNodePropertyInteger',
        'enable_sync_token': 'ConfigNodePropertyBoolean',
        'min_event_delay': 'ConfigNodePropertyInteger',
        'socket_connect_timeout': 'ConfigNodePropertyInteger',
        'so_timeout': 'ConfigNodePropertyInteger',
        'topology_connector_urls': 'ConfigNodePropertyArray',
        'topology_connector_whitelist': 'ConfigNodePropertyArray',
        'auto_stop_local_loop_enabled': 'ConfigNodePropertyBoolean',
        'gzip_connector_requests_enabled': 'ConfigNodePropertyBoolean',
        'hmac_enabled': 'ConfigNodePropertyBoolean',
        'enable_encryption': 'ConfigNodePropertyBoolean',
        'shared_key': 'ConfigNodePropertyString',
        'hmac_shared_key_ttl': 'ConfigNodePropertyInteger',
        'backoff_standby_factor': 'ConfigNodePropertyString',
        'backoff_stable_factor': 'ConfigNodePropertyString'
    }

    attribute_map = {
        'connector_ping_timeout': 'connectorPingTimeout',
        'connector_ping_interval': 'connectorPingInterval',
        'discovery_lite_check_interval': 'discoveryLiteCheckInterval',
        'cluster_sync_service_timeout': 'clusterSyncServiceTimeout',
        'cluster_sync_service_interval': 'clusterSyncServiceInterval',
        'enable_sync_token': 'enableSyncToken',
        'min_event_delay': 'minEventDelay',
        'socket_connect_timeout': 'socketConnectTimeout',
        'so_timeout': 'soTimeout',
        'topology_connector_urls': 'topologyConnectorUrls',
        'topology_connector_whitelist': 'topologyConnectorWhitelist',
        'auto_stop_local_loop_enabled': 'autoStopLocalLoopEnabled',
        'gzip_connector_requests_enabled': 'gzipConnectorRequestsEnabled',
        'hmac_enabled': 'hmacEnabled',
        'enable_encryption': 'enableEncryption',
        'shared_key': 'sharedKey',
        'hmac_shared_key_ttl': 'hmacSharedKeyTTL',
        'backoff_standby_factor': 'backoffStandbyFactor',
        'backoff_stable_factor': 'backoffStableFactor'
    }

    def __init__(self, connector_ping_timeout=None, connector_ping_interval=None, discovery_lite_check_interval=None, cluster_sync_service_timeout=None, cluster_sync_service_interval=None, enable_sync_token=None, min_event_delay=None, socket_connect_timeout=None, so_timeout=None, topology_connector_urls=None, topology_connector_whitelist=None, auto_stop_local_loop_enabled=None, gzip_connector_requests_enabled=None, hmac_enabled=None, enable_encryption=None, shared_key=None, hmac_shared_key_ttl=None, backoff_standby_factor=None, backoff_stable_factor=None):  # noqa: E501
        """OrgApacheSlingDiscoveryOakConfigProperties - a model defined in OpenAPI"""  # noqa: E501

        self._connector_ping_timeout = None
        self._connector_ping_interval = None
        self._discovery_lite_check_interval = None
        self._cluster_sync_service_timeout = None
        self._cluster_sync_service_interval = None
        self._enable_sync_token = None
        self._min_event_delay = None
        self._socket_connect_timeout = None
        self._so_timeout = None
        self._topology_connector_urls = None
        self._topology_connector_whitelist = None
        self._auto_stop_local_loop_enabled = None
        self._gzip_connector_requests_enabled = None
        self._hmac_enabled = None
        self._enable_encryption = None
        self._shared_key = None
        self._hmac_shared_key_ttl = None
        self._backoff_standby_factor = None
        self._backoff_stable_factor = None
        self.discriminator = None

        if connector_ping_timeout is not None:
            self.connector_ping_timeout = connector_ping_timeout
        if connector_ping_interval is not None:
            self.connector_ping_interval = connector_ping_interval
        if discovery_lite_check_interval is not None:
            self.discovery_lite_check_interval = discovery_lite_check_interval
        if cluster_sync_service_timeout is not None:
            self.cluster_sync_service_timeout = cluster_sync_service_timeout
        if cluster_sync_service_interval is not None:
            self.cluster_sync_service_interval = cluster_sync_service_interval
        if enable_sync_token is not None:
            self.enable_sync_token = enable_sync_token
        if min_event_delay is not None:
            self.min_event_delay = min_event_delay
        if socket_connect_timeout is not None:
            self.socket_connect_timeout = socket_connect_timeout
        if so_timeout is not None:
            self.so_timeout = so_timeout
        if topology_connector_urls is not None:
            self.topology_connector_urls = topology_connector_urls
        if topology_connector_whitelist is not None:
            self.topology_connector_whitelist = topology_connector_whitelist
        if auto_stop_local_loop_enabled is not None:
            self.auto_stop_local_loop_enabled = auto_stop_local_loop_enabled
        if gzip_connector_requests_enabled is not None:
            self.gzip_connector_requests_enabled = gzip_connector_requests_enabled
        if hmac_enabled is not None:
            self.hmac_enabled = hmac_enabled
        if enable_encryption is not None:
            self.enable_encryption = enable_encryption
        if shared_key is not None:
            self.shared_key = shared_key
        if hmac_shared_key_ttl is not None:
            self.hmac_shared_key_ttl = hmac_shared_key_ttl
        if backoff_standby_factor is not None:
            self.backoff_standby_factor = backoff_standby_factor
        if backoff_stable_factor is not None:
            self.backoff_stable_factor = backoff_stable_factor

    @property
    def connector_ping_timeout(self):
        """Gets the connector_ping_timeout of this OrgApacheSlingDiscoveryOakConfigProperties.  # noqa: E501


        :return: The connector_ping_timeout of this OrgApacheSlingDiscoveryOakConfigProperties.  # noqa: E501
        :rtype: ConfigNodePropertyInteger
        """
        return self._connector_ping_timeout

    @connector_ping_timeout.setter
    def connector_ping_timeout(self, connector_ping_timeout):
        """Sets the connector_ping_timeout of this OrgApacheSlingDiscoveryOakConfigProperties.


        :param connector_ping_timeout: The connector_ping_timeout of this OrgApacheSlingDiscoveryOakConfigProperties.  # noqa: E501
        :type: ConfigNodePropertyInteger
        """

        self._connector_ping_timeout = connector_ping_timeout

    @property
    def connector_ping_interval(self):
        """Gets the connector_ping_interval of this OrgApacheSlingDiscoveryOakConfigProperties.  # noqa: E501


        :return: The connector_ping_interval of this OrgApacheSlingDiscoveryOakConfigProperties.  # noqa: E501
        :rtype: ConfigNodePropertyInteger
        """
        return self._connector_ping_interval

    @connector_ping_interval.setter
    def connector_ping_interval(self, connector_ping_interval):
        """Sets the connector_ping_interval of this OrgApacheSlingDiscoveryOakConfigProperties.


        :param connector_ping_interval: The connector_ping_interval of this OrgApacheSlingDiscoveryOakConfigProperties.  # noqa: E501
        :type: ConfigNodePropertyInteger
        """

        self._connector_ping_interval = connector_ping_interval

    @property
    def discovery_lite_check_interval(self):
        """Gets the discovery_lite_check_interval of this OrgApacheSlingDiscoveryOakConfigProperties.  # noqa: E501


        :return: The discovery_lite_check_interval of this OrgApacheSlingDiscoveryOakConfigProperties.  # noqa: E501
        :rtype: ConfigNodePropertyInteger
        """
        return self._discovery_lite_check_interval

    @discovery_lite_check_interval.setter
    def discovery_lite_check_interval(self, discovery_lite_check_interval):
        """Sets the discovery_lite_check_interval of this OrgApacheSlingDiscoveryOakConfigProperties.


        :param discovery_lite_check_interval: The discovery_lite_check_interval of this OrgApacheSlingDiscoveryOakConfigProperties.  # noqa: E501
        :type: ConfigNodePropertyInteger
        """

        self._discovery_lite_check_interval = discovery_lite_check_interval

    @property
    def cluster_sync_service_timeout(self):
        """Gets the cluster_sync_service_timeout of this OrgApacheSlingDiscoveryOakConfigProperties.  # noqa: E501


        :return: The cluster_sync_service_timeout of this OrgApacheSlingDiscoveryOakConfigProperties.  # noqa: E501
        :rtype: ConfigNodePropertyInteger
        """
        return self._cluster_sync_service_timeout

    @cluster_sync_service_timeout.setter
    def cluster_sync_service_timeout(self, cluster_sync_service_timeout):
        """Sets the cluster_sync_service_timeout of this OrgApacheSlingDiscoveryOakConfigProperties.


        :param cluster_sync_service_timeout: The cluster_sync_service_timeout of this OrgApacheSlingDiscoveryOakConfigProperties.  # noqa: E501
        :type: ConfigNodePropertyInteger
        """

        self._cluster_sync_service_timeout = cluster_sync_service_timeout

    @property
    def cluster_sync_service_interval(self):
        """Gets the cluster_sync_service_interval of this OrgApacheSlingDiscoveryOakConfigProperties.  # noqa: E501


        :return: The cluster_sync_service_interval of this OrgApacheSlingDiscoveryOakConfigProperties.  # noqa: E501
        :rtype: ConfigNodePropertyInteger
        """
        return self._cluster_sync_service_interval

    @cluster_sync_service_interval.setter
    def cluster_sync_service_interval(self, cluster_sync_service_interval):
        """Sets the cluster_sync_service_interval of this OrgApacheSlingDiscoveryOakConfigProperties.


        :param cluster_sync_service_interval: The cluster_sync_service_interval of this OrgApacheSlingDiscoveryOakConfigProperties.  # noqa: E501
        :type: ConfigNodePropertyInteger
        """

        self._cluster_sync_service_interval = cluster_sync_service_interval

    @property
    def enable_sync_token(self):
        """Gets the enable_sync_token of this OrgApacheSlingDiscoveryOakConfigProperties.  # noqa: E501


        :return: The enable_sync_token of this OrgApacheSlingDiscoveryOakConfigProperties.  # noqa: E501
        :rtype: ConfigNodePropertyBoolean
        """
        return self._enable_sync_token

    @enable_sync_token.setter
    def enable_sync_token(self, enable_sync_token):
        """Sets the enable_sync_token of this OrgApacheSlingDiscoveryOakConfigProperties.


        :param enable_sync_token: The enable_sync_token of this OrgApacheSlingDiscoveryOakConfigProperties.  # noqa: E501
        :type: ConfigNodePropertyBoolean
        """

        self._enable_sync_token = enable_sync_token

    @property
    def min_event_delay(self):
        """Gets the min_event_delay of this OrgApacheSlingDiscoveryOakConfigProperties.  # noqa: E501


        :return: The min_event_delay of this OrgApacheSlingDiscoveryOakConfigProperties.  # noqa: E501
        :rtype: ConfigNodePropertyInteger
        """
        return self._min_event_delay

    @min_event_delay.setter
    def min_event_delay(self, min_event_delay):
        """Sets the min_event_delay of this OrgApacheSlingDiscoveryOakConfigProperties.


        :param min_event_delay: The min_event_delay of this OrgApacheSlingDiscoveryOakConfigProperties.  # noqa: E501
        :type: ConfigNodePropertyInteger
        """

        self._min_event_delay = min_event_delay

    @property
    def socket_connect_timeout(self):
        """Gets the socket_connect_timeout of this OrgApacheSlingDiscoveryOakConfigProperties.  # noqa: E501


        :return: The socket_connect_timeout of this OrgApacheSlingDiscoveryOakConfigProperties.  # noqa: E501
        :rtype: ConfigNodePropertyInteger
        """
        return self._socket_connect_timeout

    @socket_connect_timeout.setter
    def socket_connect_timeout(self, socket_connect_timeout):
        """Sets the socket_connect_timeout of this OrgApacheSlingDiscoveryOakConfigProperties.


        :param socket_connect_timeout: The socket_connect_timeout of this OrgApacheSlingDiscoveryOakConfigProperties.  # noqa: E501
        :type: ConfigNodePropertyInteger
        """

        self._socket_connect_timeout = socket_connect_timeout

    @property
    def so_timeout(self):
        """Gets the so_timeout of this OrgApacheSlingDiscoveryOakConfigProperties.  # noqa: E501


        :return: The so_timeout of this OrgApacheSlingDiscoveryOakConfigProperties.  # noqa: E501
        :rtype: ConfigNodePropertyInteger
        """
        return self._so_timeout

    @so_timeout.setter
    def so_timeout(self, so_timeout):
        """Sets the so_timeout of this OrgApacheSlingDiscoveryOakConfigProperties.


        :param so_timeout: The so_timeout of this OrgApacheSlingDiscoveryOakConfigProperties.  # noqa: E501
        :type: ConfigNodePropertyInteger
        """

        self._so_timeout = so_timeout

    @property
    def topology_connector_urls(self):
        """Gets the topology_connector_urls of this OrgApacheSlingDiscoveryOakConfigProperties.  # noqa: E501


        :return: The topology_connector_urls of this OrgApacheSlingDiscoveryOakConfigProperties.  # noqa: E501
        :rtype: ConfigNodePropertyArray
        """
        return self._topology_connector_urls

    @topology_connector_urls.setter
    def topology_connector_urls(self, topology_connector_urls):
        """Sets the topology_connector_urls of this OrgApacheSlingDiscoveryOakConfigProperties.


        :param topology_connector_urls: The topology_connector_urls of this OrgApacheSlingDiscoveryOakConfigProperties.  # noqa: E501
        :type: ConfigNodePropertyArray
        """

        self._topology_connector_urls = topology_connector_urls

    @property
    def topology_connector_whitelist(self):
        """Gets the topology_connector_whitelist of this OrgApacheSlingDiscoveryOakConfigProperties.  # noqa: E501


        :return: The topology_connector_whitelist of this OrgApacheSlingDiscoveryOakConfigProperties.  # noqa: E501
        :rtype: ConfigNodePropertyArray
        """
        return self._topology_connector_whitelist

    @topology_connector_whitelist.setter
    def topology_connector_whitelist(self, topology_connector_whitelist):
        """Sets the topology_connector_whitelist of this OrgApacheSlingDiscoveryOakConfigProperties.


        :param topology_connector_whitelist: The topology_connector_whitelist of this OrgApacheSlingDiscoveryOakConfigProperties.  # noqa: E501
        :type: ConfigNodePropertyArray
        """

        self._topology_connector_whitelist = topology_connector_whitelist

    @property
    def auto_stop_local_loop_enabled(self):
        """Gets the auto_stop_local_loop_enabled of this OrgApacheSlingDiscoveryOakConfigProperties.  # noqa: E501


        :return: The auto_stop_local_loop_enabled of this OrgApacheSlingDiscoveryOakConfigProperties.  # noqa: E501
        :rtype: ConfigNodePropertyBoolean
        """
        return self._auto_stop_local_loop_enabled

    @auto_stop_local_loop_enabled.setter
    def auto_stop_local_loop_enabled(self, auto_stop_local_loop_enabled):
        """Sets the auto_stop_local_loop_enabled of this OrgApacheSlingDiscoveryOakConfigProperties.


        :param auto_stop_local_loop_enabled: The auto_stop_local_loop_enabled of this OrgApacheSlingDiscoveryOakConfigProperties.  # noqa: E501
        :type: ConfigNodePropertyBoolean
        """

        self._auto_stop_local_loop_enabled = auto_stop_local_loop_enabled

    @property
    def gzip_connector_requests_enabled(self):
        """Gets the gzip_connector_requests_enabled of this OrgApacheSlingDiscoveryOakConfigProperties.  # noqa: E501


        :return: The gzip_connector_requests_enabled of this OrgApacheSlingDiscoveryOakConfigProperties.  # noqa: E501
        :rtype: ConfigNodePropertyBoolean
        """
        return self._gzip_connector_requests_enabled

    @gzip_connector_requests_enabled.setter
    def gzip_connector_requests_enabled(self, gzip_connector_requests_enabled):
        """Sets the gzip_connector_requests_enabled of this OrgApacheSlingDiscoveryOakConfigProperties.


        :param gzip_connector_requests_enabled: The gzip_connector_requests_enabled of this OrgApacheSlingDiscoveryOakConfigProperties.  # noqa: E501
        :type: ConfigNodePropertyBoolean
        """

        self._gzip_connector_requests_enabled = gzip_connector_requests_enabled

    @property
    def hmac_enabled(self):
        """Gets the hmac_enabled of this OrgApacheSlingDiscoveryOakConfigProperties.  # noqa: E501


        :return: The hmac_enabled of this OrgApacheSlingDiscoveryOakConfigProperties.  # noqa: E501
        :rtype: ConfigNodePropertyBoolean
        """
        return self._hmac_enabled

    @hmac_enabled.setter
    def hmac_enabled(self, hmac_enabled):
        """Sets the hmac_enabled of this OrgApacheSlingDiscoveryOakConfigProperties.


        :param hmac_enabled: The hmac_enabled of this OrgApacheSlingDiscoveryOakConfigProperties.  # noqa: E501
        :type: ConfigNodePropertyBoolean
        """

        self._hmac_enabled = hmac_enabled

    @property
    def enable_encryption(self):
        """Gets the enable_encryption of this OrgApacheSlingDiscoveryOakConfigProperties.  # noqa: E501


        :return: The enable_encryption of this OrgApacheSlingDiscoveryOakConfigProperties.  # noqa: E501
        :rtype: ConfigNodePropertyBoolean
        """
        return self._enable_encryption

    @enable_encryption.setter
    def enable_encryption(self, enable_encryption):
        """Sets the enable_encryption of this OrgApacheSlingDiscoveryOakConfigProperties.


        :param enable_encryption: The enable_encryption of this OrgApacheSlingDiscoveryOakConfigProperties.  # noqa: E501
        :type: ConfigNodePropertyBoolean
        """

        self._enable_encryption = enable_encryption

    @property
    def shared_key(self):
        """Gets the shared_key of this OrgApacheSlingDiscoveryOakConfigProperties.  # noqa: E501


        :return: The shared_key of this OrgApacheSlingDiscoveryOakConfigProperties.  # noqa: E501
        :rtype: ConfigNodePropertyString
        """
        return self._shared_key

    @shared_key.setter
    def shared_key(self, shared_key):
        """Sets the shared_key of this OrgApacheSlingDiscoveryOakConfigProperties.


        :param shared_key: The shared_key of this OrgApacheSlingDiscoveryOakConfigProperties.  # noqa: E501
        :type: ConfigNodePropertyString
        """

        self._shared_key = shared_key

    @property
    def hmac_shared_key_ttl(self):
        """Gets the hmac_shared_key_ttl of this OrgApacheSlingDiscoveryOakConfigProperties.  # noqa: E501


        :return: The hmac_shared_key_ttl of this OrgApacheSlingDiscoveryOakConfigProperties.  # noqa: E501
        :rtype: ConfigNodePropertyInteger
        """
        return self._hmac_shared_key_ttl

    @hmac_shared_key_ttl.setter
    def hmac_shared_key_ttl(self, hmac_shared_key_ttl):
        """Sets the hmac_shared_key_ttl of this OrgApacheSlingDiscoveryOakConfigProperties.


        :param hmac_shared_key_ttl: The hmac_shared_key_ttl of this OrgApacheSlingDiscoveryOakConfigProperties.  # noqa: E501
        :type: ConfigNodePropertyInteger
        """

        self._hmac_shared_key_ttl = hmac_shared_key_ttl

    @property
    def backoff_standby_factor(self):
        """Gets the backoff_standby_factor of this OrgApacheSlingDiscoveryOakConfigProperties.  # noqa: E501


        :return: The backoff_standby_factor of this OrgApacheSlingDiscoveryOakConfigProperties.  # noqa: E501
        :rtype: ConfigNodePropertyString
        """
        return self._backoff_standby_factor

    @backoff_standby_factor.setter
    def backoff_standby_factor(self, backoff_standby_factor):
        """Sets the backoff_standby_factor of this OrgApacheSlingDiscoveryOakConfigProperties.


        :param backoff_standby_factor: The backoff_standby_factor of this OrgApacheSlingDiscoveryOakConfigProperties.  # noqa: E501
        :type: ConfigNodePropertyString
        """

        self._backoff_standby_factor = backoff_standby_factor

    @property
    def backoff_stable_factor(self):
        """Gets the backoff_stable_factor of this OrgApacheSlingDiscoveryOakConfigProperties.  # noqa: E501


        :return: The backoff_stable_factor of this OrgApacheSlingDiscoveryOakConfigProperties.  # noqa: E501
        :rtype: ConfigNodePropertyString
        """
        return self._backoff_stable_factor

    @backoff_stable_factor.setter
    def backoff_stable_factor(self, backoff_stable_factor):
        """Sets the backoff_stable_factor of this OrgApacheSlingDiscoveryOakConfigProperties.


        :param backoff_stable_factor: The backoff_stable_factor of this OrgApacheSlingDiscoveryOakConfigProperties.  # noqa: E501
        :type: ConfigNodePropertyString
        """

        self._backoff_stable_factor = backoff_stable_factor

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrgApacheSlingDiscoveryOakConfigProperties):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
