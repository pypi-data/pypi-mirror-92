# coding: utf-8

"""
    Adobe Experience Manager OSGI config (AEM) API

    Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API  # noqa: E501

    OpenAPI spec version: 1.0.0-pre.0
    Contact: opensource@shinesolutions.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryProperties(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'device_info_transformer_enabled': 'ConfigNodePropertyBoolean',
        'device_info_transformer_css_style': 'ConfigNodePropertyString'
    }

    attribute_map = {
        'device_info_transformer_enabled': 'device.info.transformer.enabled',
        'device_info_transformer_css_style': 'device.info.transformer.css.style'
    }

    def __init__(self, device_info_transformer_enabled=None, device_info_transformer_css_style=None):  # noqa: E501
        """ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryProperties - a model defined in OpenAPI"""  # noqa: E501

        self._device_info_transformer_enabled = None
        self._device_info_transformer_css_style = None
        self.discriminator = None

        if device_info_transformer_enabled is not None:
            self.device_info_transformer_enabled = device_info_transformer_enabled
        if device_info_transformer_css_style is not None:
            self.device_info_transformer_css_style = device_info_transformer_css_style

    @property
    def device_info_transformer_enabled(self):
        """Gets the device_info_transformer_enabled of this ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryProperties.  # noqa: E501


        :return: The device_info_transformer_enabled of this ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryProperties.  # noqa: E501
        :rtype: ConfigNodePropertyBoolean
        """
        return self._device_info_transformer_enabled

    @device_info_transformer_enabled.setter
    def device_info_transformer_enabled(self, device_info_transformer_enabled):
        """Sets the device_info_transformer_enabled of this ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryProperties.


        :param device_info_transformer_enabled: The device_info_transformer_enabled of this ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryProperties.  # noqa: E501
        :type: ConfigNodePropertyBoolean
        """

        self._device_info_transformer_enabled = device_info_transformer_enabled

    @property
    def device_info_transformer_css_style(self):
        """Gets the device_info_transformer_css_style of this ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryProperties.  # noqa: E501


        :return: The device_info_transformer_css_style of this ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryProperties.  # noqa: E501
        :rtype: ConfigNodePropertyString
        """
        return self._device_info_transformer_css_style

    @device_info_transformer_css_style.setter
    def device_info_transformer_css_style(self, device_info_transformer_css_style):
        """Sets the device_info_transformer_css_style of this ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryProperties.


        :param device_info_transformer_css_style: The device_info_transformer_css_style of this ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryProperties.  # noqa: E501
        :type: ConfigNodePropertyString
        """

        self._device_info_transformer_css_style = device_info_transformer_css_style

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryProperties):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
