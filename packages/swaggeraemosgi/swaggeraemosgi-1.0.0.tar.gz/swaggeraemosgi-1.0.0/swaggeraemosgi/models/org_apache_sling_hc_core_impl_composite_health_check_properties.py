# coding: utf-8

"""
    Adobe Experience Manager OSGI config (AEM) API

    Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API  # noqa: E501

    OpenAPI spec version: 1.0.0-pre.0
    Contact: opensource@shinesolutions.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class OrgApacheSlingHcCoreImplCompositeHealthCheckProperties(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'hc_name': 'ConfigNodePropertyString',
        'hc_tags': 'ConfigNodePropertyArray',
        'hc_mbean_name': 'ConfigNodePropertyString',
        'filter_tags': 'ConfigNodePropertyArray',
        'filter_combine_tags_with_or': 'ConfigNodePropertyBoolean'
    }

    attribute_map = {
        'hc_name': 'hc.name',
        'hc_tags': 'hc.tags',
        'hc_mbean_name': 'hc.mbean.name',
        'filter_tags': 'filter.tags',
        'filter_combine_tags_with_or': 'filter.combineTagsWithOr'
    }

    def __init__(self, hc_name=None, hc_tags=None, hc_mbean_name=None, filter_tags=None, filter_combine_tags_with_or=None):  # noqa: E501
        """OrgApacheSlingHcCoreImplCompositeHealthCheckProperties - a model defined in OpenAPI"""  # noqa: E501

        self._hc_name = None
        self._hc_tags = None
        self._hc_mbean_name = None
        self._filter_tags = None
        self._filter_combine_tags_with_or = None
        self.discriminator = None

        if hc_name is not None:
            self.hc_name = hc_name
        if hc_tags is not None:
            self.hc_tags = hc_tags
        if hc_mbean_name is not None:
            self.hc_mbean_name = hc_mbean_name
        if filter_tags is not None:
            self.filter_tags = filter_tags
        if filter_combine_tags_with_or is not None:
            self.filter_combine_tags_with_or = filter_combine_tags_with_or

    @property
    def hc_name(self):
        """Gets the hc_name of this OrgApacheSlingHcCoreImplCompositeHealthCheckProperties.  # noqa: E501


        :return: The hc_name of this OrgApacheSlingHcCoreImplCompositeHealthCheckProperties.  # noqa: E501
        :rtype: ConfigNodePropertyString
        """
        return self._hc_name

    @hc_name.setter
    def hc_name(self, hc_name):
        """Sets the hc_name of this OrgApacheSlingHcCoreImplCompositeHealthCheckProperties.


        :param hc_name: The hc_name of this OrgApacheSlingHcCoreImplCompositeHealthCheckProperties.  # noqa: E501
        :type: ConfigNodePropertyString
        """

        self._hc_name = hc_name

    @property
    def hc_tags(self):
        """Gets the hc_tags of this OrgApacheSlingHcCoreImplCompositeHealthCheckProperties.  # noqa: E501


        :return: The hc_tags of this OrgApacheSlingHcCoreImplCompositeHealthCheckProperties.  # noqa: E501
        :rtype: ConfigNodePropertyArray
        """
        return self._hc_tags

    @hc_tags.setter
    def hc_tags(self, hc_tags):
        """Sets the hc_tags of this OrgApacheSlingHcCoreImplCompositeHealthCheckProperties.


        :param hc_tags: The hc_tags of this OrgApacheSlingHcCoreImplCompositeHealthCheckProperties.  # noqa: E501
        :type: ConfigNodePropertyArray
        """

        self._hc_tags = hc_tags

    @property
    def hc_mbean_name(self):
        """Gets the hc_mbean_name of this OrgApacheSlingHcCoreImplCompositeHealthCheckProperties.  # noqa: E501


        :return: The hc_mbean_name of this OrgApacheSlingHcCoreImplCompositeHealthCheckProperties.  # noqa: E501
        :rtype: ConfigNodePropertyString
        """
        return self._hc_mbean_name

    @hc_mbean_name.setter
    def hc_mbean_name(self, hc_mbean_name):
        """Sets the hc_mbean_name of this OrgApacheSlingHcCoreImplCompositeHealthCheckProperties.


        :param hc_mbean_name: The hc_mbean_name of this OrgApacheSlingHcCoreImplCompositeHealthCheckProperties.  # noqa: E501
        :type: ConfigNodePropertyString
        """

        self._hc_mbean_name = hc_mbean_name

    @property
    def filter_tags(self):
        """Gets the filter_tags of this OrgApacheSlingHcCoreImplCompositeHealthCheckProperties.  # noqa: E501


        :return: The filter_tags of this OrgApacheSlingHcCoreImplCompositeHealthCheckProperties.  # noqa: E501
        :rtype: ConfigNodePropertyArray
        """
        return self._filter_tags

    @filter_tags.setter
    def filter_tags(self, filter_tags):
        """Sets the filter_tags of this OrgApacheSlingHcCoreImplCompositeHealthCheckProperties.


        :param filter_tags: The filter_tags of this OrgApacheSlingHcCoreImplCompositeHealthCheckProperties.  # noqa: E501
        :type: ConfigNodePropertyArray
        """

        self._filter_tags = filter_tags

    @property
    def filter_combine_tags_with_or(self):
        """Gets the filter_combine_tags_with_or of this OrgApacheSlingHcCoreImplCompositeHealthCheckProperties.  # noqa: E501


        :return: The filter_combine_tags_with_or of this OrgApacheSlingHcCoreImplCompositeHealthCheckProperties.  # noqa: E501
        :rtype: ConfigNodePropertyBoolean
        """
        return self._filter_combine_tags_with_or

    @filter_combine_tags_with_or.setter
    def filter_combine_tags_with_or(self, filter_combine_tags_with_or):
        """Sets the filter_combine_tags_with_or of this OrgApacheSlingHcCoreImplCompositeHealthCheckProperties.


        :param filter_combine_tags_with_or: The filter_combine_tags_with_or of this OrgApacheSlingHcCoreImplCompositeHealthCheckProperties.  # noqa: E501
        :type: ConfigNodePropertyBoolean
        """

        self._filter_combine_tags_with_or = filter_combine_tags_with_or

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrgApacheSlingHcCoreImplCompositeHealthCheckProperties):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
