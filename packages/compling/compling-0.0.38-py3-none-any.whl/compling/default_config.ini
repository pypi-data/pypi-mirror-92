[Corpus]
;The language of documents in your corpus.
language = english

;Documents in your corpus store their text in this key.
text_key = text

;Documents in your corpus store their date values as string in this format.
;For a complete list of formatting directives, see: https://docs.python.org/3/library/datetime.html#strftime-strptime-behavior.
date_format = %d/%m/%Y

;The size of spacy model you want it to be used in the text processing
spacy_model_size = md

[Document_record]
;Document records metadata:

;If sentiment==1, for each document it will be stored its polarity value.
sentiment = 1

;If lower==1, A lowercase version will be stored for each document.
lower = 0

;If lemma==1, A version with tokens replace by their lemma will be stored for each document.
lemma = 0

;If stem==1, A version with tokens replace by their stem will be stored for each document.
stem = 0

;If negations==1, A version where negated token are preceded by 'NOT_' prefix will be stored for each document.
negations = 0

;If named_entities==1, the occurring named entities will be stored in a list for each document.
named_entities = 1

[Paragraph_record]
;Paragraph records metadata:

;If sentiment==1, for each document it will be stored its polarity value.
sentiment = 1

;If lower==1, A lowercase version will be stored for each paragraph.
lower = 0

;If lemma==1, A version with tokens replace by their lemma will be stored for each paragraph.
lemma = 0

;If stem==1, A version with tokens replace by their stem will be stored for each paragraph.
stem = 0

;If negations==1, A version where negated token are preceded by 'NOT_' prefix will be stored for each paragraph.
negations = 0

;If named_entities==1, the occurring named entities will be stored in a list for each paragraph.
named_entities = 1

[Sentence_record]
;Sentence records metadata:

;If sentiment==1, for each document it will be stored its polarity value.
sentiment = 1

;If lower==1, A lowercase version will be stored for each sentence.
lower = 0

;If lemma==1, A version with tokens replace by their lemma will be stored for each sentence.
lemma = 0

;If stem==1, A version with tokens replace by their stem will be stored for each sentence.
stem = 0

;If negations==1, A version where negated token are preceded by 'NOT_' prefix will be stored for each sentence.
negations = 0

;If named_entities==1, the occurring named entities will be stored in a list for each sentence.
named_entities = 1

[Token_record]
;Token records metadata:

;If sentiment==1, for each document it will be stored its polarity value.
sentiment = 1

;If lower==1, A lowercase version will be stored for each token.
lower = 1

;If lemma==1, the token lemma will be stored for each token.
lemma = 1

;If stem==1, the token stem will be stored for each token.
stem = 1

;If pos==1, the token pos tag will be stored for each token.
pos = 1

;If dep==1, the token dep tag will be stored for each token.
dep = 1

;If lang==1, the token language will be stored for each token.
lang = 1

;If is_stopword==1, for each token it will be stored if the token is a stopwords.
is_stopword = 1

;If is_negated==1, for each token it will be stored if the token is negated. (e.g. don't play, not smart, ...)
is_negated = 1

;If is_ngram==1, for each token it will be stored if the token is a frequent ngram in the corpus. (e.g. New York).
is_ngram = 1

;If is_digit==1, for each token it will be stored if the token is digit.
is_digit = 1

;If is_upper==1, for each token it will be stored if the token is upper.
is_upper = 0

;If is_capitalize==1, for each token it will be stored if the token is_capitalize.
is_capitalize = 0

;If is_punct==1, for each token it will be stored if the token is a punctuation character.
is_punct = 1

;If is_bracket==1, for each token it will be stored if the token is a bracket.
is_bracket = 0

;If is_ascii==1, for each token it will be stored if the token is encoded in ascii.
is_ascii = 0

[Vector_filter]
;Token filter for the vectorization task.

;if 1, tokens to be grouped must have True as value of the key is_stopword_.
;if 0; tokens to be grouped must have False as value of the key is_stopword_.
;if None, the key is_stopword_ won't be considered for the tokens grouping.
is_stopword = 0

;if 1, tokens to be grouped must have True as value of the key is_ngram_.
;if 0; tokens to be grouped must have False as value of the key is_ngram_.
;if None, the key is_ngram_ won't be considered for the tokens grouping.
is_ngram = None

;if 1, tokens to be grouped must have True as value of the key is_digit.
;if 0; tokens to be grouped must have False as value of the key is_digit.
;if None, the key is_digit won't be considered for the tokens grouping.
is_digit = None

;if 1, tokens to be grouped must have True as value of the key is_upper_.
;if 0; tokens to be grouped must have False as value of the key is_upper_.
;if None, the key is_upper_ won't be considered for the tokens grouping.
is_upper = None

;if 1, tokens to be grouped must have True as value of the key is_capitalize_.
;if 0; tokens to be grouped must have False as value of the key is_capitalize_.
;if None, the key is_capitalize_ won't be considered for the tokens grouping.
is_capitalize = None

;if 1, tokens to be grouped must have True as value of the key is_punct_.
;if 0; tokens to be grouped must have False as value of the key is_punct_.
;if None, the key is_punct_ won't be considered for the tokens grouping.
is_punct = None

;if 1, tokens to be grouped must have True as value of the key is_bracket_.
;if 0; tokens to be grouped must have False as value of the key is_bracket_.
;if None, the key is_bracket_ won't be considered for the tokens grouping.
is_bracket = None

;if 1, tokens to be grouped must have True as value of the key is_ascii_.
;if 0; tokens to be grouped must have False as value of the key is_ascii_.
;if None, the key is_ascii_ won't be considered for the tokens grouping.
is_ascii = None