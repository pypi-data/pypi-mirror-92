# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _RTKPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _rtkDeconstructSoftThresholdReconstructImageFilterPython
else:
    import _rtkDeconstructSoftThresholdReconstructImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _rtkDeconstructSoftThresholdReconstructImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _rtkDeconstructSoftThresholdReconstructImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.itkImageToImageFilterAPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageRegionPython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkVectorImagePython
import itk.stdcomplexPython
import itk.itkVariableLengthVectorPython
import itk.itkImagePython
import itk.itkMatrixPython
import itk.itkVectorPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkPointPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython

def rtkDeconstructSoftThresholdReconstructImageFilterID2_New():
    return rtkDeconstructSoftThresholdReconstructImageFilterID2.New()

class rtkDeconstructSoftThresholdReconstructImageFilterID2(itk.itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    r"""Proxy of C++ rtkDeconstructSoftThresholdReconstructImageFilterID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_rtkDeconstructSoftThresholdReconstructImageFilterPython.rtkDeconstructSoftThresholdReconstructImageFilterID2___New_orig__)
    Clone = _swig_new_instance_method(_rtkDeconstructSoftThresholdReconstructImageFilterPython.rtkDeconstructSoftThresholdReconstructImageFilterID2_Clone)
    SetNumberOfLevels = _swig_new_instance_method(_rtkDeconstructSoftThresholdReconstructImageFilterPython.rtkDeconstructSoftThresholdReconstructImageFilterID2_SetNumberOfLevels)
    GetOrder = _swig_new_instance_method(_rtkDeconstructSoftThresholdReconstructImageFilterPython.rtkDeconstructSoftThresholdReconstructImageFilterID2_GetOrder)
    SetOrder = _swig_new_instance_method(_rtkDeconstructSoftThresholdReconstructImageFilterPython.rtkDeconstructSoftThresholdReconstructImageFilterID2_SetOrder)
    GetThreshold = _swig_new_instance_method(_rtkDeconstructSoftThresholdReconstructImageFilterPython.rtkDeconstructSoftThresholdReconstructImageFilterID2_GetThreshold)
    SetThreshold = _swig_new_instance_method(_rtkDeconstructSoftThresholdReconstructImageFilterPython.rtkDeconstructSoftThresholdReconstructImageFilterID2_SetThreshold)
    __swig_destroy__ = _rtkDeconstructSoftThresholdReconstructImageFilterPython.delete_rtkDeconstructSoftThresholdReconstructImageFilterID2
    cast = _swig_new_static_method(_rtkDeconstructSoftThresholdReconstructImageFilterPython.rtkDeconstructSoftThresholdReconstructImageFilterID2_cast)

    def New(*args, **kargs):
        """New() -> rtkDeconstructSoftThresholdReconstructImageFilterID2

        Create a new object of the class rtkDeconstructSoftThresholdReconstructImageFilterID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkDeconstructSoftThresholdReconstructImageFilterID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkDeconstructSoftThresholdReconstructImageFilterID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkDeconstructSoftThresholdReconstructImageFilterID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkDeconstructSoftThresholdReconstructImageFilterID2 in _rtkDeconstructSoftThresholdReconstructImageFilterPython:
_rtkDeconstructSoftThresholdReconstructImageFilterPython.rtkDeconstructSoftThresholdReconstructImageFilterID2_swigregister(rtkDeconstructSoftThresholdReconstructImageFilterID2)
rtkDeconstructSoftThresholdReconstructImageFilterID2___New_orig__ = _rtkDeconstructSoftThresholdReconstructImageFilterPython.rtkDeconstructSoftThresholdReconstructImageFilterID2___New_orig__
rtkDeconstructSoftThresholdReconstructImageFilterID2_cast = _rtkDeconstructSoftThresholdReconstructImageFilterPython.rtkDeconstructSoftThresholdReconstructImageFilterID2_cast


def rtkDeconstructSoftThresholdReconstructImageFilterID3_New():
    return rtkDeconstructSoftThresholdReconstructImageFilterID3.New()

class rtkDeconstructSoftThresholdReconstructImageFilterID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    r"""Proxy of C++ rtkDeconstructSoftThresholdReconstructImageFilterID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_rtkDeconstructSoftThresholdReconstructImageFilterPython.rtkDeconstructSoftThresholdReconstructImageFilterID3___New_orig__)
    Clone = _swig_new_instance_method(_rtkDeconstructSoftThresholdReconstructImageFilterPython.rtkDeconstructSoftThresholdReconstructImageFilterID3_Clone)
    SetNumberOfLevels = _swig_new_instance_method(_rtkDeconstructSoftThresholdReconstructImageFilterPython.rtkDeconstructSoftThresholdReconstructImageFilterID3_SetNumberOfLevels)
    GetOrder = _swig_new_instance_method(_rtkDeconstructSoftThresholdReconstructImageFilterPython.rtkDeconstructSoftThresholdReconstructImageFilterID3_GetOrder)
    SetOrder = _swig_new_instance_method(_rtkDeconstructSoftThresholdReconstructImageFilterPython.rtkDeconstructSoftThresholdReconstructImageFilterID3_SetOrder)
    GetThreshold = _swig_new_instance_method(_rtkDeconstructSoftThresholdReconstructImageFilterPython.rtkDeconstructSoftThresholdReconstructImageFilterID3_GetThreshold)
    SetThreshold = _swig_new_instance_method(_rtkDeconstructSoftThresholdReconstructImageFilterPython.rtkDeconstructSoftThresholdReconstructImageFilterID3_SetThreshold)
    __swig_destroy__ = _rtkDeconstructSoftThresholdReconstructImageFilterPython.delete_rtkDeconstructSoftThresholdReconstructImageFilterID3
    cast = _swig_new_static_method(_rtkDeconstructSoftThresholdReconstructImageFilterPython.rtkDeconstructSoftThresholdReconstructImageFilterID3_cast)

    def New(*args, **kargs):
        """New() -> rtkDeconstructSoftThresholdReconstructImageFilterID3

        Create a new object of the class rtkDeconstructSoftThresholdReconstructImageFilterID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkDeconstructSoftThresholdReconstructImageFilterID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkDeconstructSoftThresholdReconstructImageFilterID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkDeconstructSoftThresholdReconstructImageFilterID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkDeconstructSoftThresholdReconstructImageFilterID3 in _rtkDeconstructSoftThresholdReconstructImageFilterPython:
_rtkDeconstructSoftThresholdReconstructImageFilterPython.rtkDeconstructSoftThresholdReconstructImageFilterID3_swigregister(rtkDeconstructSoftThresholdReconstructImageFilterID3)
rtkDeconstructSoftThresholdReconstructImageFilterID3___New_orig__ = _rtkDeconstructSoftThresholdReconstructImageFilterPython.rtkDeconstructSoftThresholdReconstructImageFilterID3___New_orig__
rtkDeconstructSoftThresholdReconstructImageFilterID3_cast = _rtkDeconstructSoftThresholdReconstructImageFilterPython.rtkDeconstructSoftThresholdReconstructImageFilterID3_cast


def rtkDeconstructSoftThresholdReconstructImageFilterIF2_New():
    return rtkDeconstructSoftThresholdReconstructImageFilterIF2.New()

class rtkDeconstructSoftThresholdReconstructImageFilterIF2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    r"""Proxy of C++ rtkDeconstructSoftThresholdReconstructImageFilterIF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_rtkDeconstructSoftThresholdReconstructImageFilterPython.rtkDeconstructSoftThresholdReconstructImageFilterIF2___New_orig__)
    Clone = _swig_new_instance_method(_rtkDeconstructSoftThresholdReconstructImageFilterPython.rtkDeconstructSoftThresholdReconstructImageFilterIF2_Clone)
    SetNumberOfLevels = _swig_new_instance_method(_rtkDeconstructSoftThresholdReconstructImageFilterPython.rtkDeconstructSoftThresholdReconstructImageFilterIF2_SetNumberOfLevels)
    GetOrder = _swig_new_instance_method(_rtkDeconstructSoftThresholdReconstructImageFilterPython.rtkDeconstructSoftThresholdReconstructImageFilterIF2_GetOrder)
    SetOrder = _swig_new_instance_method(_rtkDeconstructSoftThresholdReconstructImageFilterPython.rtkDeconstructSoftThresholdReconstructImageFilterIF2_SetOrder)
    GetThreshold = _swig_new_instance_method(_rtkDeconstructSoftThresholdReconstructImageFilterPython.rtkDeconstructSoftThresholdReconstructImageFilterIF2_GetThreshold)
    SetThreshold = _swig_new_instance_method(_rtkDeconstructSoftThresholdReconstructImageFilterPython.rtkDeconstructSoftThresholdReconstructImageFilterIF2_SetThreshold)
    __swig_destroy__ = _rtkDeconstructSoftThresholdReconstructImageFilterPython.delete_rtkDeconstructSoftThresholdReconstructImageFilterIF2
    cast = _swig_new_static_method(_rtkDeconstructSoftThresholdReconstructImageFilterPython.rtkDeconstructSoftThresholdReconstructImageFilterIF2_cast)

    def New(*args, **kargs):
        """New() -> rtkDeconstructSoftThresholdReconstructImageFilterIF2

        Create a new object of the class rtkDeconstructSoftThresholdReconstructImageFilterIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkDeconstructSoftThresholdReconstructImageFilterIF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkDeconstructSoftThresholdReconstructImageFilterIF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkDeconstructSoftThresholdReconstructImageFilterIF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkDeconstructSoftThresholdReconstructImageFilterIF2 in _rtkDeconstructSoftThresholdReconstructImageFilterPython:
_rtkDeconstructSoftThresholdReconstructImageFilterPython.rtkDeconstructSoftThresholdReconstructImageFilterIF2_swigregister(rtkDeconstructSoftThresholdReconstructImageFilterIF2)
rtkDeconstructSoftThresholdReconstructImageFilterIF2___New_orig__ = _rtkDeconstructSoftThresholdReconstructImageFilterPython.rtkDeconstructSoftThresholdReconstructImageFilterIF2___New_orig__
rtkDeconstructSoftThresholdReconstructImageFilterIF2_cast = _rtkDeconstructSoftThresholdReconstructImageFilterPython.rtkDeconstructSoftThresholdReconstructImageFilterIF2_cast


def rtkDeconstructSoftThresholdReconstructImageFilterIF3_New():
    return rtkDeconstructSoftThresholdReconstructImageFilterIF3.New()

class rtkDeconstructSoftThresholdReconstructImageFilterIF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    r"""Proxy of C++ rtkDeconstructSoftThresholdReconstructImageFilterIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_rtkDeconstructSoftThresholdReconstructImageFilterPython.rtkDeconstructSoftThresholdReconstructImageFilterIF3___New_orig__)
    Clone = _swig_new_instance_method(_rtkDeconstructSoftThresholdReconstructImageFilterPython.rtkDeconstructSoftThresholdReconstructImageFilterIF3_Clone)
    SetNumberOfLevels = _swig_new_instance_method(_rtkDeconstructSoftThresholdReconstructImageFilterPython.rtkDeconstructSoftThresholdReconstructImageFilterIF3_SetNumberOfLevels)
    GetOrder = _swig_new_instance_method(_rtkDeconstructSoftThresholdReconstructImageFilterPython.rtkDeconstructSoftThresholdReconstructImageFilterIF3_GetOrder)
    SetOrder = _swig_new_instance_method(_rtkDeconstructSoftThresholdReconstructImageFilterPython.rtkDeconstructSoftThresholdReconstructImageFilterIF3_SetOrder)
    GetThreshold = _swig_new_instance_method(_rtkDeconstructSoftThresholdReconstructImageFilterPython.rtkDeconstructSoftThresholdReconstructImageFilterIF3_GetThreshold)
    SetThreshold = _swig_new_instance_method(_rtkDeconstructSoftThresholdReconstructImageFilterPython.rtkDeconstructSoftThresholdReconstructImageFilterIF3_SetThreshold)
    __swig_destroy__ = _rtkDeconstructSoftThresholdReconstructImageFilterPython.delete_rtkDeconstructSoftThresholdReconstructImageFilterIF3
    cast = _swig_new_static_method(_rtkDeconstructSoftThresholdReconstructImageFilterPython.rtkDeconstructSoftThresholdReconstructImageFilterIF3_cast)

    def New(*args, **kargs):
        """New() -> rtkDeconstructSoftThresholdReconstructImageFilterIF3

        Create a new object of the class rtkDeconstructSoftThresholdReconstructImageFilterIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkDeconstructSoftThresholdReconstructImageFilterIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkDeconstructSoftThresholdReconstructImageFilterIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkDeconstructSoftThresholdReconstructImageFilterIF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkDeconstructSoftThresholdReconstructImageFilterIF3 in _rtkDeconstructSoftThresholdReconstructImageFilterPython:
_rtkDeconstructSoftThresholdReconstructImageFilterPython.rtkDeconstructSoftThresholdReconstructImageFilterIF3_swigregister(rtkDeconstructSoftThresholdReconstructImageFilterIF3)
rtkDeconstructSoftThresholdReconstructImageFilterIF3___New_orig__ = _rtkDeconstructSoftThresholdReconstructImageFilterPython.rtkDeconstructSoftThresholdReconstructImageFilterIF3___New_orig__
rtkDeconstructSoftThresholdReconstructImageFilterIF3_cast = _rtkDeconstructSoftThresholdReconstructImageFilterPython.rtkDeconstructSoftThresholdReconstructImageFilterIF3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def deconstruct_soft_threshold_reconstruct_image_filter(*args, **kwargs):
    """Procedural interface for DeconstructSoftThresholdReconstructImageFilter"""
    import itk
    instance = itk.DeconstructSoftThresholdReconstructImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def deconstruct_soft_threshold_reconstruct_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.DeconstructSoftThresholdReconstructImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.DeconstructSoftThresholdReconstructImageFilter.values()[0]
    else:
        filter_object = itk.DeconstructSoftThresholdReconstructImageFilter

    deconstruct_soft_threshold_reconstruct_image_filter.__doc__ = filter_object.__doc__
    deconstruct_soft_threshold_reconstruct_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    deconstruct_soft_threshold_reconstruct_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.DeconstructSoftThresholdReconstructImageFilter, itkTemplate.itkTemplate):
        deconstruct_soft_threshold_reconstruct_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        deconstruct_soft_threshold_reconstruct_image_filter.__doc__ += "\n"
        deconstruct_soft_threshold_reconstruct_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        deconstruct_soft_threshold_reconstruct_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



