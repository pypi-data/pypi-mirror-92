# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _RTKPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _rtkDrawGeometricPhantomImageFilterPython
else:
    import _rtkDrawGeometricPhantomImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _rtkDrawGeometricPhantomImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _rtkDrawGeometricPhantomImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.vnl_matrixPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.itkPointPython
import itk.vnl_vector_refPython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.itkCovariantVectorPython
import itk.ITKCommonBasePython
import itk.rtkGeometricPhantomPython
import itk.rtkConvexShapePython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterAPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkIndexPython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.itkImagePython
import itk.itkRGBPixelPython
import itk.itkImageRegionPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBAPixelPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterBPython

def rtkDrawGeometricPhantomImageFilterID3ID3_New():
    return rtkDrawGeometricPhantomImageFilterID3ID3.New()

class rtkDrawGeometricPhantomImageFilterID3ID3(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3ID3):
    r"""Proxy of C++ rtkDrawGeometricPhantomImageFilterID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_rtkDrawGeometricPhantomImageFilterPython.rtkDrawGeometricPhantomImageFilterID3ID3___New_orig__)
    Clone = _swig_new_instance_method(_rtkDrawGeometricPhantomImageFilterPython.rtkDrawGeometricPhantomImageFilterID3ID3_Clone)
    GetGeometricPhantom = _swig_new_instance_method(_rtkDrawGeometricPhantomImageFilterPython.rtkDrawGeometricPhantomImageFilterID3ID3_GetGeometricPhantom)
    SetGeometricPhantom = _swig_new_instance_method(_rtkDrawGeometricPhantomImageFilterPython.rtkDrawGeometricPhantomImageFilterID3ID3_SetGeometricPhantom)
    SetConfigFile = _swig_new_instance_method(_rtkDrawGeometricPhantomImageFilterPython.rtkDrawGeometricPhantomImageFilterID3ID3_SetConfigFile)
    GetConfigFile = _swig_new_instance_method(_rtkDrawGeometricPhantomImageFilterPython.rtkDrawGeometricPhantomImageFilterID3ID3_GetConfigFile)
    SetPhantomScale = _swig_new_instance_method(_rtkDrawGeometricPhantomImageFilterPython.rtkDrawGeometricPhantomImageFilterID3ID3_SetPhantomScale)
    GetPhantomScale = _swig_new_instance_method(_rtkDrawGeometricPhantomImageFilterPython.rtkDrawGeometricPhantomImageFilterID3ID3_GetPhantomScale)
    SetOriginOffset = _swig_new_instance_method(_rtkDrawGeometricPhantomImageFilterPython.rtkDrawGeometricPhantomImageFilterID3ID3_SetOriginOffset)
    GetOriginOffset = _swig_new_instance_method(_rtkDrawGeometricPhantomImageFilterPython.rtkDrawGeometricPhantomImageFilterID3ID3_GetOriginOffset)
    SetIsForbildConfigFile = _swig_new_instance_method(_rtkDrawGeometricPhantomImageFilterPython.rtkDrawGeometricPhantomImageFilterID3ID3_SetIsForbildConfigFile)
    GetIsForbildConfigFile = _swig_new_instance_method(_rtkDrawGeometricPhantomImageFilterPython.rtkDrawGeometricPhantomImageFilterID3ID3_GetIsForbildConfigFile)
    IsForbildConfigFileOn = _swig_new_instance_method(_rtkDrawGeometricPhantomImageFilterPython.rtkDrawGeometricPhantomImageFilterID3ID3_IsForbildConfigFileOn)
    IsForbildConfigFileOff = _swig_new_instance_method(_rtkDrawGeometricPhantomImageFilterPython.rtkDrawGeometricPhantomImageFilterID3ID3_IsForbildConfigFileOff)
    SetRotationMatrix = _swig_new_instance_method(_rtkDrawGeometricPhantomImageFilterPython.rtkDrawGeometricPhantomImageFilterID3ID3_SetRotationMatrix)
    GetRotationMatrix = _swig_new_instance_method(_rtkDrawGeometricPhantomImageFilterPython.rtkDrawGeometricPhantomImageFilterID3ID3_GetRotationMatrix)
    AddClipPlane = _swig_new_instance_method(_rtkDrawGeometricPhantomImageFilterPython.rtkDrawGeometricPhantomImageFilterID3ID3_AddClipPlane)
    SetClipPlanes = _swig_new_instance_method(_rtkDrawGeometricPhantomImageFilterPython.rtkDrawGeometricPhantomImageFilterID3ID3_SetClipPlanes)
    __swig_destroy__ = _rtkDrawGeometricPhantomImageFilterPython.delete_rtkDrawGeometricPhantomImageFilterID3ID3
    cast = _swig_new_static_method(_rtkDrawGeometricPhantomImageFilterPython.rtkDrawGeometricPhantomImageFilterID3ID3_cast)

    def New(*args, **kargs):
        """New() -> rtkDrawGeometricPhantomImageFilterID3ID3

        Create a new object of the class rtkDrawGeometricPhantomImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkDrawGeometricPhantomImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkDrawGeometricPhantomImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkDrawGeometricPhantomImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkDrawGeometricPhantomImageFilterID3ID3 in _rtkDrawGeometricPhantomImageFilterPython:
_rtkDrawGeometricPhantomImageFilterPython.rtkDrawGeometricPhantomImageFilterID3ID3_swigregister(rtkDrawGeometricPhantomImageFilterID3ID3)
rtkDrawGeometricPhantomImageFilterID3ID3___New_orig__ = _rtkDrawGeometricPhantomImageFilterPython.rtkDrawGeometricPhantomImageFilterID3ID3___New_orig__
rtkDrawGeometricPhantomImageFilterID3ID3_cast = _rtkDrawGeometricPhantomImageFilterPython.rtkDrawGeometricPhantomImageFilterID3ID3_cast


def rtkDrawGeometricPhantomImageFilterIF3IF3_New():
    return rtkDrawGeometricPhantomImageFilterIF3IF3.New()

class rtkDrawGeometricPhantomImageFilterIF3IF3(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IF3):
    r"""Proxy of C++ rtkDrawGeometricPhantomImageFilterIF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_rtkDrawGeometricPhantomImageFilterPython.rtkDrawGeometricPhantomImageFilterIF3IF3___New_orig__)
    Clone = _swig_new_instance_method(_rtkDrawGeometricPhantomImageFilterPython.rtkDrawGeometricPhantomImageFilterIF3IF3_Clone)
    GetGeometricPhantom = _swig_new_instance_method(_rtkDrawGeometricPhantomImageFilterPython.rtkDrawGeometricPhantomImageFilterIF3IF3_GetGeometricPhantom)
    SetGeometricPhantom = _swig_new_instance_method(_rtkDrawGeometricPhantomImageFilterPython.rtkDrawGeometricPhantomImageFilterIF3IF3_SetGeometricPhantom)
    SetConfigFile = _swig_new_instance_method(_rtkDrawGeometricPhantomImageFilterPython.rtkDrawGeometricPhantomImageFilterIF3IF3_SetConfigFile)
    GetConfigFile = _swig_new_instance_method(_rtkDrawGeometricPhantomImageFilterPython.rtkDrawGeometricPhantomImageFilterIF3IF3_GetConfigFile)
    SetPhantomScale = _swig_new_instance_method(_rtkDrawGeometricPhantomImageFilterPython.rtkDrawGeometricPhantomImageFilterIF3IF3_SetPhantomScale)
    GetPhantomScale = _swig_new_instance_method(_rtkDrawGeometricPhantomImageFilterPython.rtkDrawGeometricPhantomImageFilterIF3IF3_GetPhantomScale)
    SetOriginOffset = _swig_new_instance_method(_rtkDrawGeometricPhantomImageFilterPython.rtkDrawGeometricPhantomImageFilterIF3IF3_SetOriginOffset)
    GetOriginOffset = _swig_new_instance_method(_rtkDrawGeometricPhantomImageFilterPython.rtkDrawGeometricPhantomImageFilterIF3IF3_GetOriginOffset)
    SetIsForbildConfigFile = _swig_new_instance_method(_rtkDrawGeometricPhantomImageFilterPython.rtkDrawGeometricPhantomImageFilterIF3IF3_SetIsForbildConfigFile)
    GetIsForbildConfigFile = _swig_new_instance_method(_rtkDrawGeometricPhantomImageFilterPython.rtkDrawGeometricPhantomImageFilterIF3IF3_GetIsForbildConfigFile)
    IsForbildConfigFileOn = _swig_new_instance_method(_rtkDrawGeometricPhantomImageFilterPython.rtkDrawGeometricPhantomImageFilterIF3IF3_IsForbildConfigFileOn)
    IsForbildConfigFileOff = _swig_new_instance_method(_rtkDrawGeometricPhantomImageFilterPython.rtkDrawGeometricPhantomImageFilterIF3IF3_IsForbildConfigFileOff)
    SetRotationMatrix = _swig_new_instance_method(_rtkDrawGeometricPhantomImageFilterPython.rtkDrawGeometricPhantomImageFilterIF3IF3_SetRotationMatrix)
    GetRotationMatrix = _swig_new_instance_method(_rtkDrawGeometricPhantomImageFilterPython.rtkDrawGeometricPhantomImageFilterIF3IF3_GetRotationMatrix)
    AddClipPlane = _swig_new_instance_method(_rtkDrawGeometricPhantomImageFilterPython.rtkDrawGeometricPhantomImageFilterIF3IF3_AddClipPlane)
    SetClipPlanes = _swig_new_instance_method(_rtkDrawGeometricPhantomImageFilterPython.rtkDrawGeometricPhantomImageFilterIF3IF3_SetClipPlanes)
    __swig_destroy__ = _rtkDrawGeometricPhantomImageFilterPython.delete_rtkDrawGeometricPhantomImageFilterIF3IF3
    cast = _swig_new_static_method(_rtkDrawGeometricPhantomImageFilterPython.rtkDrawGeometricPhantomImageFilterIF3IF3_cast)

    def New(*args, **kargs):
        """New() -> rtkDrawGeometricPhantomImageFilterIF3IF3

        Create a new object of the class rtkDrawGeometricPhantomImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkDrawGeometricPhantomImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkDrawGeometricPhantomImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkDrawGeometricPhantomImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkDrawGeometricPhantomImageFilterIF3IF3 in _rtkDrawGeometricPhantomImageFilterPython:
_rtkDrawGeometricPhantomImageFilterPython.rtkDrawGeometricPhantomImageFilterIF3IF3_swigregister(rtkDrawGeometricPhantomImageFilterIF3IF3)
rtkDrawGeometricPhantomImageFilterIF3IF3___New_orig__ = _rtkDrawGeometricPhantomImageFilterPython.rtkDrawGeometricPhantomImageFilterIF3IF3___New_orig__
rtkDrawGeometricPhantomImageFilterIF3IF3_cast = _rtkDrawGeometricPhantomImageFilterPython.rtkDrawGeometricPhantomImageFilterIF3IF3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def draw_geometric_phantom_image_filter(*args, **kwargs):
    """Procedural interface for DrawGeometricPhantomImageFilter"""
    import itk
    instance = itk.DrawGeometricPhantomImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def draw_geometric_phantom_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.DrawGeometricPhantomImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.DrawGeometricPhantomImageFilter.values()[0]
    else:
        filter_object = itk.DrawGeometricPhantomImageFilter

    draw_geometric_phantom_image_filter.__doc__ = filter_object.__doc__
    draw_geometric_phantom_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    draw_geometric_phantom_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.DrawGeometricPhantomImageFilter, itkTemplate.itkTemplate):
        draw_geometric_phantom_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        draw_geometric_phantom_image_filter.__doc__ += "\n"
        draw_geometric_phantom_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        draw_geometric_phantom_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



