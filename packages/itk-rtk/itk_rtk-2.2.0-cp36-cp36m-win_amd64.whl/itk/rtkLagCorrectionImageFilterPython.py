# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _RTKPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _rtkLagCorrectionImageFilterPython
else:
    import _rtkLagCorrectionImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _rtkLagCorrectionImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _rtkLagCorrectionImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterAPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.stdcomplexPython
import itk.itkIndexPython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.itkImagePython
import itk.itkCovariantVectorPython
import itk.vnl_vector_refPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.itkRGBPixelPython
import itk.itkImageRegionPython
import itk.itkPointPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkRGBAPixelPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterBPython

def rtkLagCorrectionImageFilterID31_New():
    return rtkLagCorrectionImageFilterID31.New()

class rtkLagCorrectionImageFilterID31(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3ID3):
    r"""Proxy of C++ rtkLagCorrectionImageFilterID31 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterID31___New_orig__)
    Clone = _swig_new_instance_method(_rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterID31_Clone)
    GetA = _swig_new_instance_method(_rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterID31_GetA)
    GetB = _swig_new_instance_method(_rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterID31_GetB)
    SetCoefficients = _swig_new_instance_method(_rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterID31_SetCoefficients)
    __swig_destroy__ = _rtkLagCorrectionImageFilterPython.delete_rtkLagCorrectionImageFilterID31
    cast = _swig_new_static_method(_rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterID31_cast)

    def New(*args, **kargs):
        """New() -> rtkLagCorrectionImageFilterID31

        Create a new object of the class rtkLagCorrectionImageFilterID31 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkLagCorrectionImageFilterID31.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkLagCorrectionImageFilterID31.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkLagCorrectionImageFilterID31.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkLagCorrectionImageFilterID31 in _rtkLagCorrectionImageFilterPython:
_rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterID31_swigregister(rtkLagCorrectionImageFilterID31)
rtkLagCorrectionImageFilterID31___New_orig__ = _rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterID31___New_orig__
rtkLagCorrectionImageFilterID31_cast = _rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterID31_cast


def rtkLagCorrectionImageFilterID32_New():
    return rtkLagCorrectionImageFilterID32.New()

class rtkLagCorrectionImageFilterID32(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3ID3):
    r"""Proxy of C++ rtkLagCorrectionImageFilterID32 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterID32___New_orig__)
    Clone = _swig_new_instance_method(_rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterID32_Clone)
    GetA = _swig_new_instance_method(_rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterID32_GetA)
    GetB = _swig_new_instance_method(_rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterID32_GetB)
    SetCoefficients = _swig_new_instance_method(_rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterID32_SetCoefficients)
    __swig_destroy__ = _rtkLagCorrectionImageFilterPython.delete_rtkLagCorrectionImageFilterID32
    cast = _swig_new_static_method(_rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterID32_cast)

    def New(*args, **kargs):
        """New() -> rtkLagCorrectionImageFilterID32

        Create a new object of the class rtkLagCorrectionImageFilterID32 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkLagCorrectionImageFilterID32.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkLagCorrectionImageFilterID32.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkLagCorrectionImageFilterID32.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkLagCorrectionImageFilterID32 in _rtkLagCorrectionImageFilterPython:
_rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterID32_swigregister(rtkLagCorrectionImageFilterID32)
rtkLagCorrectionImageFilterID32___New_orig__ = _rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterID32___New_orig__
rtkLagCorrectionImageFilterID32_cast = _rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterID32_cast


def rtkLagCorrectionImageFilterID33_New():
    return rtkLagCorrectionImageFilterID33.New()

class rtkLagCorrectionImageFilterID33(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3ID3):
    r"""Proxy of C++ rtkLagCorrectionImageFilterID33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterID33___New_orig__)
    Clone = _swig_new_instance_method(_rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterID33_Clone)
    GetA = _swig_new_instance_method(_rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterID33_GetA)
    GetB = _swig_new_instance_method(_rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterID33_GetB)
    SetCoefficients = _swig_new_instance_method(_rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterID33_SetCoefficients)
    __swig_destroy__ = _rtkLagCorrectionImageFilterPython.delete_rtkLagCorrectionImageFilterID33
    cast = _swig_new_static_method(_rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterID33_cast)

    def New(*args, **kargs):
        """New() -> rtkLagCorrectionImageFilterID33

        Create a new object of the class rtkLagCorrectionImageFilterID33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkLagCorrectionImageFilterID33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkLagCorrectionImageFilterID33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkLagCorrectionImageFilterID33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkLagCorrectionImageFilterID33 in _rtkLagCorrectionImageFilterPython:
_rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterID33_swigregister(rtkLagCorrectionImageFilterID33)
rtkLagCorrectionImageFilterID33___New_orig__ = _rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterID33___New_orig__
rtkLagCorrectionImageFilterID33_cast = _rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterID33_cast


def rtkLagCorrectionImageFilterID34_New():
    return rtkLagCorrectionImageFilterID34.New()

class rtkLagCorrectionImageFilterID34(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3ID3):
    r"""Proxy of C++ rtkLagCorrectionImageFilterID34 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterID34___New_orig__)
    Clone = _swig_new_instance_method(_rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterID34_Clone)
    GetA = _swig_new_instance_method(_rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterID34_GetA)
    GetB = _swig_new_instance_method(_rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterID34_GetB)
    SetCoefficients = _swig_new_instance_method(_rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterID34_SetCoefficients)
    __swig_destroy__ = _rtkLagCorrectionImageFilterPython.delete_rtkLagCorrectionImageFilterID34
    cast = _swig_new_static_method(_rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterID34_cast)

    def New(*args, **kargs):
        """New() -> rtkLagCorrectionImageFilterID34

        Create a new object of the class rtkLagCorrectionImageFilterID34 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkLagCorrectionImageFilterID34.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkLagCorrectionImageFilterID34.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkLagCorrectionImageFilterID34.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkLagCorrectionImageFilterID34 in _rtkLagCorrectionImageFilterPython:
_rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterID34_swigregister(rtkLagCorrectionImageFilterID34)
rtkLagCorrectionImageFilterID34___New_orig__ = _rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterID34___New_orig__
rtkLagCorrectionImageFilterID34_cast = _rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterID34_cast


def rtkLagCorrectionImageFilterIF31_New():
    return rtkLagCorrectionImageFilterIF31.New()

class rtkLagCorrectionImageFilterIF31(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IF3):
    r"""Proxy of C++ rtkLagCorrectionImageFilterIF31 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF31___New_orig__)
    Clone = _swig_new_instance_method(_rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF31_Clone)
    GetA = _swig_new_instance_method(_rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF31_GetA)
    GetB = _swig_new_instance_method(_rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF31_GetB)
    SetCoefficients = _swig_new_instance_method(_rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF31_SetCoefficients)
    __swig_destroy__ = _rtkLagCorrectionImageFilterPython.delete_rtkLagCorrectionImageFilterIF31
    cast = _swig_new_static_method(_rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF31_cast)

    def New(*args, **kargs):
        """New() -> rtkLagCorrectionImageFilterIF31

        Create a new object of the class rtkLagCorrectionImageFilterIF31 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkLagCorrectionImageFilterIF31.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkLagCorrectionImageFilterIF31.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkLagCorrectionImageFilterIF31.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkLagCorrectionImageFilterIF31 in _rtkLagCorrectionImageFilterPython:
_rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF31_swigregister(rtkLagCorrectionImageFilterIF31)
rtkLagCorrectionImageFilterIF31___New_orig__ = _rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF31___New_orig__
rtkLagCorrectionImageFilterIF31_cast = _rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF31_cast


def rtkLagCorrectionImageFilterIF32_New():
    return rtkLagCorrectionImageFilterIF32.New()

class rtkLagCorrectionImageFilterIF32(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IF3):
    r"""Proxy of C++ rtkLagCorrectionImageFilterIF32 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF32___New_orig__)
    Clone = _swig_new_instance_method(_rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF32_Clone)
    GetA = _swig_new_instance_method(_rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF32_GetA)
    GetB = _swig_new_instance_method(_rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF32_GetB)
    SetCoefficients = _swig_new_instance_method(_rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF32_SetCoefficients)
    __swig_destroy__ = _rtkLagCorrectionImageFilterPython.delete_rtkLagCorrectionImageFilterIF32
    cast = _swig_new_static_method(_rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF32_cast)

    def New(*args, **kargs):
        """New() -> rtkLagCorrectionImageFilterIF32

        Create a new object of the class rtkLagCorrectionImageFilterIF32 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkLagCorrectionImageFilterIF32.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkLagCorrectionImageFilterIF32.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkLagCorrectionImageFilterIF32.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkLagCorrectionImageFilterIF32 in _rtkLagCorrectionImageFilterPython:
_rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF32_swigregister(rtkLagCorrectionImageFilterIF32)
rtkLagCorrectionImageFilterIF32___New_orig__ = _rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF32___New_orig__
rtkLagCorrectionImageFilterIF32_cast = _rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF32_cast


def rtkLagCorrectionImageFilterIF33_New():
    return rtkLagCorrectionImageFilterIF33.New()

class rtkLagCorrectionImageFilterIF33(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IF3):
    r"""Proxy of C++ rtkLagCorrectionImageFilterIF33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF33___New_orig__)
    Clone = _swig_new_instance_method(_rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF33_Clone)
    GetA = _swig_new_instance_method(_rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF33_GetA)
    GetB = _swig_new_instance_method(_rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF33_GetB)
    SetCoefficients = _swig_new_instance_method(_rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF33_SetCoefficients)
    __swig_destroy__ = _rtkLagCorrectionImageFilterPython.delete_rtkLagCorrectionImageFilterIF33
    cast = _swig_new_static_method(_rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF33_cast)

    def New(*args, **kargs):
        """New() -> rtkLagCorrectionImageFilterIF33

        Create a new object of the class rtkLagCorrectionImageFilterIF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkLagCorrectionImageFilterIF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkLagCorrectionImageFilterIF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkLagCorrectionImageFilterIF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkLagCorrectionImageFilterIF33 in _rtkLagCorrectionImageFilterPython:
_rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF33_swigregister(rtkLagCorrectionImageFilterIF33)
rtkLagCorrectionImageFilterIF33___New_orig__ = _rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF33___New_orig__
rtkLagCorrectionImageFilterIF33_cast = _rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF33_cast


def rtkLagCorrectionImageFilterIF34_New():
    return rtkLagCorrectionImageFilterIF34.New()

class rtkLagCorrectionImageFilterIF34(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IF3):
    r"""Proxy of C++ rtkLagCorrectionImageFilterIF34 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF34___New_orig__)
    Clone = _swig_new_instance_method(_rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF34_Clone)
    GetA = _swig_new_instance_method(_rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF34_GetA)
    GetB = _swig_new_instance_method(_rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF34_GetB)
    SetCoefficients = _swig_new_instance_method(_rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF34_SetCoefficients)
    __swig_destroy__ = _rtkLagCorrectionImageFilterPython.delete_rtkLagCorrectionImageFilterIF34
    cast = _swig_new_static_method(_rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF34_cast)

    def New(*args, **kargs):
        """New() -> rtkLagCorrectionImageFilterIF34

        Create a new object of the class rtkLagCorrectionImageFilterIF34 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkLagCorrectionImageFilterIF34.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkLagCorrectionImageFilterIF34.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkLagCorrectionImageFilterIF34.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkLagCorrectionImageFilterIF34 in _rtkLagCorrectionImageFilterPython:
_rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF34_swigregister(rtkLagCorrectionImageFilterIF34)
rtkLagCorrectionImageFilterIF34___New_orig__ = _rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF34___New_orig__
rtkLagCorrectionImageFilterIF34_cast = _rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF34_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def lag_correction_image_filter(*args, **kwargs):
    """Procedural interface for LagCorrectionImageFilter"""
    import itk
    instance = itk.LagCorrectionImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def lag_correction_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.LagCorrectionImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.LagCorrectionImageFilter.values()[0]
    else:
        filter_object = itk.LagCorrectionImageFilter

    lag_correction_image_filter.__doc__ = filter_object.__doc__
    lag_correction_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    lag_correction_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.LagCorrectionImageFilter, itkTemplate.itkTemplate):
        lag_correction_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        lag_correction_image_filter.__doc__ += "\n"
        lag_correction_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        lag_correction_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



