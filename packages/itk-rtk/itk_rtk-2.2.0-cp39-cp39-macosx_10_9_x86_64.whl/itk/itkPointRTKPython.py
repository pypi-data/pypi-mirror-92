# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _RTKPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkPointRTKPython
else:
    import _itkPointRTKPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkPointRTKPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkPointRTKPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
class vectoritkPointD1(object):
    r"""Proxy of C++ std::vector< itkPointD1 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_itkPointRTKPython.vectoritkPointD1_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_itkPointRTKPython.vectoritkPointD1___nonzero__)
    __bool__ = _swig_new_instance_method(_itkPointRTKPython.vectoritkPointD1___bool__)
    __len__ = _swig_new_instance_method(_itkPointRTKPython.vectoritkPointD1___len__)
    __getslice__ = _swig_new_instance_method(_itkPointRTKPython.vectoritkPointD1___getslice__)
    __setslice__ = _swig_new_instance_method(_itkPointRTKPython.vectoritkPointD1___setslice__)
    __delslice__ = _swig_new_instance_method(_itkPointRTKPython.vectoritkPointD1___delslice__)
    __delitem__ = _swig_new_instance_method(_itkPointRTKPython.vectoritkPointD1___delitem__)
    __getitem__ = _swig_new_instance_method(_itkPointRTKPython.vectoritkPointD1___getitem__)
    __setitem__ = _swig_new_instance_method(_itkPointRTKPython.vectoritkPointD1___setitem__)
    pop = _swig_new_instance_method(_itkPointRTKPython.vectoritkPointD1_pop)
    append = _swig_new_instance_method(_itkPointRTKPython.vectoritkPointD1_append)
    empty = _swig_new_instance_method(_itkPointRTKPython.vectoritkPointD1_empty)
    size = _swig_new_instance_method(_itkPointRTKPython.vectoritkPointD1_size)
    swap = _swig_new_instance_method(_itkPointRTKPython.vectoritkPointD1_swap)
    begin = _swig_new_instance_method(_itkPointRTKPython.vectoritkPointD1_begin)
    end = _swig_new_instance_method(_itkPointRTKPython.vectoritkPointD1_end)
    rbegin = _swig_new_instance_method(_itkPointRTKPython.vectoritkPointD1_rbegin)
    rend = _swig_new_instance_method(_itkPointRTKPython.vectoritkPointD1_rend)
    clear = _swig_new_instance_method(_itkPointRTKPython.vectoritkPointD1_clear)
    get_allocator = _swig_new_instance_method(_itkPointRTKPython.vectoritkPointD1_get_allocator)
    pop_back = _swig_new_instance_method(_itkPointRTKPython.vectoritkPointD1_pop_back)
    erase = _swig_new_instance_method(_itkPointRTKPython.vectoritkPointD1_erase)

    def __init__(self, *args):
        r"""
        __init__(vectoritkPointD1 self) -> vectoritkPointD1
        __init__(vectoritkPointD1 self, vectoritkPointD1 other) -> vectoritkPointD1
        __init__(vectoritkPointD1 self, std::vector< itkPointD1 >::size_type size) -> vectoritkPointD1
        __init__(vectoritkPointD1 self, std::vector< itkPointD1 >::size_type size, itkPointD1 value) -> vectoritkPointD1
        """
        _itkPointRTKPython.vectoritkPointD1_swiginit(self, _itkPointRTKPython.new_vectoritkPointD1(*args))
    push_back = _swig_new_instance_method(_itkPointRTKPython.vectoritkPointD1_push_back)
    front = _swig_new_instance_method(_itkPointRTKPython.vectoritkPointD1_front)
    back = _swig_new_instance_method(_itkPointRTKPython.vectoritkPointD1_back)
    assign = _swig_new_instance_method(_itkPointRTKPython.vectoritkPointD1_assign)
    resize = _swig_new_instance_method(_itkPointRTKPython.vectoritkPointD1_resize)
    insert = _swig_new_instance_method(_itkPointRTKPython.vectoritkPointD1_insert)
    reserve = _swig_new_instance_method(_itkPointRTKPython.vectoritkPointD1_reserve)
    capacity = _swig_new_instance_method(_itkPointRTKPython.vectoritkPointD1_capacity)
    __swig_destroy__ = _itkPointRTKPython.delete_vectoritkPointD1

# Register vectoritkPointD1 in _itkPointRTKPython:
_itkPointRTKPython.vectoritkPointD1_swigregister(vectoritkPointD1)

class itkPointD1(itk.itkFixedArrayPython.itkFixedArrayD1):
    r"""Proxy of C++ itkPointD1 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    GetPointDimension = _swig_new_static_method(_itkPointRTKPython.itkPointD1_GetPointDimension)
    __swig_destroy__ = _itkPointRTKPython.delete_itkPointD1

    def __init__(self, *args):
        r"""
        __init__(itkPointD1 self) -> itkPointD1
        __init__(itkPointD1 self, itkPointD1 arg0) -> itkPointD1
        __init__(itkPointD1 self, double const * r) -> itkPointD1
        __init__(itkPointD1 self, double const & v) -> itkPointD1
        __init__(itkPointD1 self, std::array< double,1 > const & stdArray) -> itkPointD1
        """
        _itkPointRTKPython.itkPointD1_swiginit(self, _itkPointRTKPython.new_itkPointD1(*args))
    __eq__ = _swig_new_instance_method(_itkPointRTKPython.itkPointD1___eq__)
    __ne__ = _swig_new_instance_method(_itkPointRTKPython.itkPointD1___ne__)
    __iadd__ = _swig_new_instance_method(_itkPointRTKPython.itkPointD1___iadd__)
    __isub__ = _swig_new_instance_method(_itkPointRTKPython.itkPointD1___isub__)
    __add__ = _swig_new_instance_method(_itkPointRTKPython.itkPointD1___add__)
    __sub__ = _swig_new_instance_method(_itkPointRTKPython.itkPointD1___sub__)
    GetVectorFromOrigin = _swig_new_instance_method(_itkPointRTKPython.itkPointD1_GetVectorFromOrigin)
    GetVnlVector = _swig_new_instance_method(_itkPointRTKPython.itkPointD1_GetVnlVector)
    SetToMidPoint = _swig_new_instance_method(_itkPointRTKPython.itkPointD1_SetToMidPoint)
    SetToBarycentricCombination = _swig_new_instance_method(_itkPointRTKPython.itkPointD1_SetToBarycentricCombination)
    __getitem__ = _swig_new_instance_method(_itkPointRTKPython.itkPointD1___getitem__)
    __setitem__ = _swig_new_instance_method(_itkPointRTKPython.itkPointD1___setitem__)
    __len__ = _swig_new_static_method(_itkPointRTKPython.itkPointD1___len__)
    __repr__ = _swig_new_instance_method(_itkPointRTKPython.itkPointD1___repr__)

# Register itkPointD1 in _itkPointRTKPython:
_itkPointRTKPython.itkPointD1_swigregister(itkPointD1)
itkPointD1_GetPointDimension = _itkPointRTKPython.itkPointD1_GetPointDimension
itkPointD1___len__ = _itkPointRTKPython.itkPointD1___len__



