# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _RTKPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkCovariantVectorRTKPython
else:
    import _itkCovariantVectorRTKPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkCovariantVectorRTKPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkCovariantVectorRTKPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
class itkCovariantVectorD1(itk.itkFixedArrayPython.itkFixedArrayD1):
    r"""Proxy of C++ itkCovariantVectorD1 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    GetCovariantVectorDimension = _swig_new_static_method(_itkCovariantVectorRTKPython.itkCovariantVectorD1_GetCovariantVectorDimension)
    SetVnlVector = _swig_new_instance_method(_itkCovariantVectorRTKPython.itkCovariantVectorD1_SetVnlVector)
    GetVnlVector = _swig_new_instance_method(_itkCovariantVectorRTKPython.itkCovariantVectorD1_GetVnlVector)
    __swig_destroy__ = _itkCovariantVectorRTKPython.delete_itkCovariantVectorD1

    def __init__(self, *args):
        r"""
        __init__(itkCovariantVectorD1 self) -> itkCovariantVectorD1
        __init__(itkCovariantVectorD1 self, itkCovariantVectorD1 arg0) -> itkCovariantVectorD1
        __init__(itkCovariantVectorD1 self, double const & r) -> itkCovariantVectorD1
        __init__(itkCovariantVectorD1 self, double const * r) -> itkCovariantVectorD1
        """
        _itkCovariantVectorRTKPython.itkCovariantVectorD1_swiginit(self, _itkCovariantVectorRTKPython.new_itkCovariantVectorD1(*args))
    __iadd__ = _swig_new_instance_method(_itkCovariantVectorRTKPython.itkCovariantVectorD1___iadd__)
    __isub__ = _swig_new_instance_method(_itkCovariantVectorRTKPython.itkCovariantVectorD1___isub__)
    __neg__ = _swig_new_instance_method(_itkCovariantVectorRTKPython.itkCovariantVectorD1___neg__)
    __add__ = _swig_new_instance_method(_itkCovariantVectorRTKPython.itkCovariantVectorD1___add__)
    __sub__ = _swig_new_instance_method(_itkCovariantVectorRTKPython.itkCovariantVectorD1___sub__)
    __mul__ = _swig_new_instance_method(_itkCovariantVectorRTKPython.itkCovariantVectorD1___mul__)
    GetNorm = _swig_new_instance_method(_itkCovariantVectorRTKPython.itkCovariantVectorD1_GetNorm)
    GetNumberOfComponents = _swig_new_static_method(_itkCovariantVectorRTKPython.itkCovariantVectorD1_GetNumberOfComponents)
    Normalize = _swig_new_instance_method(_itkCovariantVectorRTKPython.itkCovariantVectorD1_Normalize)
    GetSquaredNorm = _swig_new_instance_method(_itkCovariantVectorRTKPython.itkCovariantVectorD1_GetSquaredNorm)
    __getitem__ = _swig_new_instance_method(_itkCovariantVectorRTKPython.itkCovariantVectorD1___getitem__)
    __setitem__ = _swig_new_instance_method(_itkCovariantVectorRTKPython.itkCovariantVectorD1___setitem__)
    __len__ = _swig_new_static_method(_itkCovariantVectorRTKPython.itkCovariantVectorD1___len__)
    __repr__ = _swig_new_instance_method(_itkCovariantVectorRTKPython.itkCovariantVectorD1___repr__)

# Register itkCovariantVectorD1 in _itkCovariantVectorRTKPython:
_itkCovariantVectorRTKPython.itkCovariantVectorD1_swigregister(itkCovariantVectorD1)
itkCovariantVectorD1_GetCovariantVectorDimension = _itkCovariantVectorRTKPython.itkCovariantVectorD1_GetCovariantVectorDimension
itkCovariantVectorD1_GetNumberOfComponents = _itkCovariantVectorRTKPython.itkCovariantVectorD1_GetNumberOfComponents
itkCovariantVectorD1___len__ = _itkCovariantVectorRTKPython.itkCovariantVectorD1___len__



