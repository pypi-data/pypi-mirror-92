# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _RTKPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _rtkParkerShortScanImageFilterPython
else:
    import _rtkParkerShortScanImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _rtkParkerShortScanImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _rtkParkerShortScanImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.rtkThreeDCircularProjectionGeometryPython
import itk.itkPointPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkFixedArrayPython
import itk.rtkProjectionGeometryPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterAPython
import itk.itkImagePython
import itk.itkRGBPixelPython
import itk.itkSizePython
import itk.itkRGBAPixelPython
import itk.itkOffsetPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkIndexPython
import itk.itkImageRegionPython
import itk.itkImageSourcePython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageToImageFilterBPython

def rtkParkerShortScanImageFilterID2_New():
    return rtkParkerShortScanImageFilterID2.New()

class rtkParkerShortScanImageFilterID2(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2ID2):
    r"""Proxy of C++ rtkParkerShortScanImageFilterID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_rtkParkerShortScanImageFilterPython.rtkParkerShortScanImageFilterID2___New_orig__)
    Clone = _swig_new_instance_method(_rtkParkerShortScanImageFilterPython.rtkParkerShortScanImageFilterID2_Clone)
    GetModifiableGeometry = _swig_new_instance_method(_rtkParkerShortScanImageFilterPython.rtkParkerShortScanImageFilterID2_GetModifiableGeometry)
    GetGeometry = _swig_new_instance_method(_rtkParkerShortScanImageFilterPython.rtkParkerShortScanImageFilterID2_GetGeometry)
    SetGeometry = _swig_new_instance_method(_rtkParkerShortScanImageFilterPython.rtkParkerShortScanImageFilterID2_SetGeometry)
    GetAngularGapThreshold = _swig_new_instance_method(_rtkParkerShortScanImageFilterPython.rtkParkerShortScanImageFilterID2_GetAngularGapThreshold)
    SetAngularGapThreshold = _swig_new_instance_method(_rtkParkerShortScanImageFilterPython.rtkParkerShortScanImageFilterID2_SetAngularGapThreshold)
    __swig_destroy__ = _rtkParkerShortScanImageFilterPython.delete_rtkParkerShortScanImageFilterID2
    cast = _swig_new_static_method(_rtkParkerShortScanImageFilterPython.rtkParkerShortScanImageFilterID2_cast)

    def New(*args, **kargs):
        """New() -> rtkParkerShortScanImageFilterID2

        Create a new object of the class rtkParkerShortScanImageFilterID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkParkerShortScanImageFilterID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkParkerShortScanImageFilterID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkParkerShortScanImageFilterID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkParkerShortScanImageFilterID2 in _rtkParkerShortScanImageFilterPython:
_rtkParkerShortScanImageFilterPython.rtkParkerShortScanImageFilterID2_swigregister(rtkParkerShortScanImageFilterID2)
rtkParkerShortScanImageFilterID2___New_orig__ = _rtkParkerShortScanImageFilterPython.rtkParkerShortScanImageFilterID2___New_orig__
rtkParkerShortScanImageFilterID2_cast = _rtkParkerShortScanImageFilterPython.rtkParkerShortScanImageFilterID2_cast


def rtkParkerShortScanImageFilterID3_New():
    return rtkParkerShortScanImageFilterID3.New()

class rtkParkerShortScanImageFilterID3(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3ID3):
    r"""Proxy of C++ rtkParkerShortScanImageFilterID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_rtkParkerShortScanImageFilterPython.rtkParkerShortScanImageFilterID3___New_orig__)
    Clone = _swig_new_instance_method(_rtkParkerShortScanImageFilterPython.rtkParkerShortScanImageFilterID3_Clone)
    GetModifiableGeometry = _swig_new_instance_method(_rtkParkerShortScanImageFilterPython.rtkParkerShortScanImageFilterID3_GetModifiableGeometry)
    GetGeometry = _swig_new_instance_method(_rtkParkerShortScanImageFilterPython.rtkParkerShortScanImageFilterID3_GetGeometry)
    SetGeometry = _swig_new_instance_method(_rtkParkerShortScanImageFilterPython.rtkParkerShortScanImageFilterID3_SetGeometry)
    GetAngularGapThreshold = _swig_new_instance_method(_rtkParkerShortScanImageFilterPython.rtkParkerShortScanImageFilterID3_GetAngularGapThreshold)
    SetAngularGapThreshold = _swig_new_instance_method(_rtkParkerShortScanImageFilterPython.rtkParkerShortScanImageFilterID3_SetAngularGapThreshold)
    __swig_destroy__ = _rtkParkerShortScanImageFilterPython.delete_rtkParkerShortScanImageFilterID3
    cast = _swig_new_static_method(_rtkParkerShortScanImageFilterPython.rtkParkerShortScanImageFilterID3_cast)

    def New(*args, **kargs):
        """New() -> rtkParkerShortScanImageFilterID3

        Create a new object of the class rtkParkerShortScanImageFilterID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkParkerShortScanImageFilterID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkParkerShortScanImageFilterID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkParkerShortScanImageFilterID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkParkerShortScanImageFilterID3 in _rtkParkerShortScanImageFilterPython:
_rtkParkerShortScanImageFilterPython.rtkParkerShortScanImageFilterID3_swigregister(rtkParkerShortScanImageFilterID3)
rtkParkerShortScanImageFilterID3___New_orig__ = _rtkParkerShortScanImageFilterPython.rtkParkerShortScanImageFilterID3___New_orig__
rtkParkerShortScanImageFilterID3_cast = _rtkParkerShortScanImageFilterPython.rtkParkerShortScanImageFilterID3_cast


def rtkParkerShortScanImageFilterIF2_New():
    return rtkParkerShortScanImageFilterIF2.New()

class rtkParkerShortScanImageFilterIF2(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2IF2):
    r"""Proxy of C++ rtkParkerShortScanImageFilterIF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_rtkParkerShortScanImageFilterPython.rtkParkerShortScanImageFilterIF2___New_orig__)
    Clone = _swig_new_instance_method(_rtkParkerShortScanImageFilterPython.rtkParkerShortScanImageFilterIF2_Clone)
    GetModifiableGeometry = _swig_new_instance_method(_rtkParkerShortScanImageFilterPython.rtkParkerShortScanImageFilterIF2_GetModifiableGeometry)
    GetGeometry = _swig_new_instance_method(_rtkParkerShortScanImageFilterPython.rtkParkerShortScanImageFilterIF2_GetGeometry)
    SetGeometry = _swig_new_instance_method(_rtkParkerShortScanImageFilterPython.rtkParkerShortScanImageFilterIF2_SetGeometry)
    GetAngularGapThreshold = _swig_new_instance_method(_rtkParkerShortScanImageFilterPython.rtkParkerShortScanImageFilterIF2_GetAngularGapThreshold)
    SetAngularGapThreshold = _swig_new_instance_method(_rtkParkerShortScanImageFilterPython.rtkParkerShortScanImageFilterIF2_SetAngularGapThreshold)
    __swig_destroy__ = _rtkParkerShortScanImageFilterPython.delete_rtkParkerShortScanImageFilterIF2
    cast = _swig_new_static_method(_rtkParkerShortScanImageFilterPython.rtkParkerShortScanImageFilterIF2_cast)

    def New(*args, **kargs):
        """New() -> rtkParkerShortScanImageFilterIF2

        Create a new object of the class rtkParkerShortScanImageFilterIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkParkerShortScanImageFilterIF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkParkerShortScanImageFilterIF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkParkerShortScanImageFilterIF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkParkerShortScanImageFilterIF2 in _rtkParkerShortScanImageFilterPython:
_rtkParkerShortScanImageFilterPython.rtkParkerShortScanImageFilterIF2_swigregister(rtkParkerShortScanImageFilterIF2)
rtkParkerShortScanImageFilterIF2___New_orig__ = _rtkParkerShortScanImageFilterPython.rtkParkerShortScanImageFilterIF2___New_orig__
rtkParkerShortScanImageFilterIF2_cast = _rtkParkerShortScanImageFilterPython.rtkParkerShortScanImageFilterIF2_cast


def rtkParkerShortScanImageFilterIF3_New():
    return rtkParkerShortScanImageFilterIF3.New()

class rtkParkerShortScanImageFilterIF3(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IF3):
    r"""Proxy of C++ rtkParkerShortScanImageFilterIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_rtkParkerShortScanImageFilterPython.rtkParkerShortScanImageFilterIF3___New_orig__)
    Clone = _swig_new_instance_method(_rtkParkerShortScanImageFilterPython.rtkParkerShortScanImageFilterIF3_Clone)
    GetModifiableGeometry = _swig_new_instance_method(_rtkParkerShortScanImageFilterPython.rtkParkerShortScanImageFilterIF3_GetModifiableGeometry)
    GetGeometry = _swig_new_instance_method(_rtkParkerShortScanImageFilterPython.rtkParkerShortScanImageFilterIF3_GetGeometry)
    SetGeometry = _swig_new_instance_method(_rtkParkerShortScanImageFilterPython.rtkParkerShortScanImageFilterIF3_SetGeometry)
    GetAngularGapThreshold = _swig_new_instance_method(_rtkParkerShortScanImageFilterPython.rtkParkerShortScanImageFilterIF3_GetAngularGapThreshold)
    SetAngularGapThreshold = _swig_new_instance_method(_rtkParkerShortScanImageFilterPython.rtkParkerShortScanImageFilterIF3_SetAngularGapThreshold)
    __swig_destroy__ = _rtkParkerShortScanImageFilterPython.delete_rtkParkerShortScanImageFilterIF3
    cast = _swig_new_static_method(_rtkParkerShortScanImageFilterPython.rtkParkerShortScanImageFilterIF3_cast)

    def New(*args, **kargs):
        """New() -> rtkParkerShortScanImageFilterIF3

        Create a new object of the class rtkParkerShortScanImageFilterIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkParkerShortScanImageFilterIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkParkerShortScanImageFilterIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkParkerShortScanImageFilterIF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkParkerShortScanImageFilterIF3 in _rtkParkerShortScanImageFilterPython:
_rtkParkerShortScanImageFilterPython.rtkParkerShortScanImageFilterIF3_swigregister(rtkParkerShortScanImageFilterIF3)
rtkParkerShortScanImageFilterIF3___New_orig__ = _rtkParkerShortScanImageFilterPython.rtkParkerShortScanImageFilterIF3___New_orig__
rtkParkerShortScanImageFilterIF3_cast = _rtkParkerShortScanImageFilterPython.rtkParkerShortScanImageFilterIF3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def parker_short_scan_image_filter(*args, **kwargs):
    """Procedural interface for ParkerShortScanImageFilter"""
    import itk
    instance = itk.ParkerShortScanImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def parker_short_scan_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.ParkerShortScanImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.ParkerShortScanImageFilter.values()[0]
    else:
        filter_object = itk.ParkerShortScanImageFilter

    parker_short_scan_image_filter.__doc__ = filter_object.__doc__
    parker_short_scan_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    parker_short_scan_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.ParkerShortScanImageFilter, itkTemplate.itkTemplate):
        parker_short_scan_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        parker_short_scan_image_filter.__doc__ += "\n"
        parker_short_scan_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        parker_short_scan_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



