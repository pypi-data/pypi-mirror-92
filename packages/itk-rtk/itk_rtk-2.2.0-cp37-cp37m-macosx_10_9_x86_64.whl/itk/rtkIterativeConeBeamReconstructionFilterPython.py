# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _RTKPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _rtkIterativeConeBeamReconstructionFilterPython
else:
    import _rtkIterativeConeBeamReconstructionFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _rtkIterativeConeBeamReconstructionFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _rtkIterativeConeBeamReconstructionFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.rtkBackProjectionImageFilterPython
import itk.rtkThreeDCircularProjectionGeometryPython
import itk.itkPointPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkFixedArrayPython
import itk.rtkProjectionGeometryPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkImagePython
import itk.itkRGBPixelPython
import itk.itkSizePython
import itk.itkRGBAPixelPython
import itk.itkOffsetPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkIndexPython
import itk.itkImageRegionPython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterAPython
import itk.itkImageSourcePython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageToImageFilterBPython
import itk.itkImageToImageFilterRTKPython
import itk.itkImageRTKPython
import itk.itkImageBaseRTKPython
import itk.itkImageRegionRTKPython
import itk.itkMatrixRTKPython
import itk.itkPointRTKPython
import itk.itkCovariantVectorRTKPython
import itk.itkImageSourceRTKPython
import itk.rtkForwardProjectionImageFilterPython
import itk.itkInPlaceImageFilterRTKPython

def rtkIterativeConeBeamReconstructionFilterID3_New():
    return rtkIterativeConeBeamReconstructionFilterID3.New()

class rtkIterativeConeBeamReconstructionFilterID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    r"""Proxy of C++ rtkIterativeConeBeamReconstructionFilterID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    ForwardProjectionType_FP_JOSEPH = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterID3_ForwardProjectionType_FP_JOSEPH
    
    ForwardProjectionType_FP_CUDARAYCAST = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterID3_ForwardProjectionType_FP_CUDARAYCAST
    
    ForwardProjectionType_FP_JOSEPHATTENUATED = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterID3_ForwardProjectionType_FP_JOSEPHATTENUATED
    
    ForwardProjectionType_FP_ZENG = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterID3_ForwardProjectionType_FP_ZENG
    
    BackProjectionType_BP_VOXELBASED = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterID3_BackProjectionType_BP_VOXELBASED
    
    BackProjectionType_BP_JOSEPH = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterID3_BackProjectionType_BP_JOSEPH
    
    BackProjectionType_BP_CUDAVOXELBASED = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterID3_BackProjectionType_BP_CUDAVOXELBASED
    
    BackProjectionType_BP_CUDARAYCAST = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterID3_BackProjectionType_BP_CUDARAYCAST
    
    BackProjectionType_BP_JOSEPHATTENUATED = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterID3_BackProjectionType_BP_JOSEPHATTENUATED
    
    BackProjectionType_BP_ZENG = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterID3_BackProjectionType_BP_ZENG
    
    __New_orig__ = _swig_new_static_method(_rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterID3___New_orig__)
    Clone = _swig_new_instance_method(_rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterID3_Clone)
    SetForwardProjectionFilter = _swig_new_instance_method(_rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterID3_SetForwardProjectionFilter)
    GetForwardProjectionFilter = _swig_new_instance_method(_rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterID3_GetForwardProjectionFilter)
    SetBackProjectionFilter = _swig_new_instance_method(_rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterID3_SetBackProjectionFilter)
    GetBackProjectionFilter = _swig_new_instance_method(_rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterID3_GetBackProjectionFilter)
    __swig_destroy__ = _rtkIterativeConeBeamReconstructionFilterPython.delete_rtkIterativeConeBeamReconstructionFilterID3
    cast = _swig_new_static_method(_rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterID3_cast)

    def New(*args, **kargs):
        """New() -> rtkIterativeConeBeamReconstructionFilterID3

        Create a new object of the class rtkIterativeConeBeamReconstructionFilterID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkIterativeConeBeamReconstructionFilterID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkIterativeConeBeamReconstructionFilterID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkIterativeConeBeamReconstructionFilterID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkIterativeConeBeamReconstructionFilterID3 in _rtkIterativeConeBeamReconstructionFilterPython:
_rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterID3_swigregister(rtkIterativeConeBeamReconstructionFilterID3)
rtkIterativeConeBeamReconstructionFilterID3___New_orig__ = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterID3___New_orig__
rtkIterativeConeBeamReconstructionFilterID3_cast = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterID3_cast


def rtkIterativeConeBeamReconstructionFilterID4ID3_New():
    return rtkIterativeConeBeamReconstructionFilterID4ID3.New()

class rtkIterativeConeBeamReconstructionFilterID4ID3(itk.itkImageToImageFilterRTKPython.itkImageToImageFilterID4ID4):
    r"""Proxy of C++ rtkIterativeConeBeamReconstructionFilterID4ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    ForwardProjectionType_FP_JOSEPH = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterID4ID3_ForwardProjectionType_FP_JOSEPH
    
    ForwardProjectionType_FP_CUDARAYCAST = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterID4ID3_ForwardProjectionType_FP_CUDARAYCAST
    
    ForwardProjectionType_FP_JOSEPHATTENUATED = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterID4ID3_ForwardProjectionType_FP_JOSEPHATTENUATED
    
    ForwardProjectionType_FP_ZENG = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterID4ID3_ForwardProjectionType_FP_ZENG
    
    BackProjectionType_BP_VOXELBASED = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterID4ID3_BackProjectionType_BP_VOXELBASED
    
    BackProjectionType_BP_JOSEPH = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterID4ID3_BackProjectionType_BP_JOSEPH
    
    BackProjectionType_BP_CUDAVOXELBASED = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterID4ID3_BackProjectionType_BP_CUDAVOXELBASED
    
    BackProjectionType_BP_CUDARAYCAST = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterID4ID3_BackProjectionType_BP_CUDARAYCAST
    
    BackProjectionType_BP_JOSEPHATTENUATED = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterID4ID3_BackProjectionType_BP_JOSEPHATTENUATED
    
    BackProjectionType_BP_ZENG = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterID4ID3_BackProjectionType_BP_ZENG
    
    __New_orig__ = _swig_new_static_method(_rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterID4ID3___New_orig__)
    Clone = _swig_new_instance_method(_rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterID4ID3_Clone)
    SetForwardProjectionFilter = _swig_new_instance_method(_rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterID4ID3_SetForwardProjectionFilter)
    GetForwardProjectionFilter = _swig_new_instance_method(_rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterID4ID3_GetForwardProjectionFilter)
    SetBackProjectionFilter = _swig_new_instance_method(_rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterID4ID3_SetBackProjectionFilter)
    GetBackProjectionFilter = _swig_new_instance_method(_rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterID4ID3_GetBackProjectionFilter)
    __swig_destroy__ = _rtkIterativeConeBeamReconstructionFilterPython.delete_rtkIterativeConeBeamReconstructionFilterID4ID3
    cast = _swig_new_static_method(_rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterID4ID3_cast)

    def New(*args, **kargs):
        """New() -> rtkIterativeConeBeamReconstructionFilterID4ID3

        Create a new object of the class rtkIterativeConeBeamReconstructionFilterID4ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkIterativeConeBeamReconstructionFilterID4ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkIterativeConeBeamReconstructionFilterID4ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkIterativeConeBeamReconstructionFilterID4ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkIterativeConeBeamReconstructionFilterID4ID3 in _rtkIterativeConeBeamReconstructionFilterPython:
_rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterID4ID3_swigregister(rtkIterativeConeBeamReconstructionFilterID4ID3)
rtkIterativeConeBeamReconstructionFilterID4ID3___New_orig__ = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterID4ID3___New_orig__
rtkIterativeConeBeamReconstructionFilterID4ID3_cast = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterID4ID3_cast


def rtkIterativeConeBeamReconstructionFilterIF3_New():
    return rtkIterativeConeBeamReconstructionFilterIF3.New()

class rtkIterativeConeBeamReconstructionFilterIF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    r"""Proxy of C++ rtkIterativeConeBeamReconstructionFilterIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    ForwardProjectionType_FP_JOSEPH = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIF3_ForwardProjectionType_FP_JOSEPH
    
    ForwardProjectionType_FP_CUDARAYCAST = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIF3_ForwardProjectionType_FP_CUDARAYCAST
    
    ForwardProjectionType_FP_JOSEPHATTENUATED = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIF3_ForwardProjectionType_FP_JOSEPHATTENUATED
    
    ForwardProjectionType_FP_ZENG = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIF3_ForwardProjectionType_FP_ZENG
    
    BackProjectionType_BP_VOXELBASED = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIF3_BackProjectionType_BP_VOXELBASED
    
    BackProjectionType_BP_JOSEPH = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIF3_BackProjectionType_BP_JOSEPH
    
    BackProjectionType_BP_CUDAVOXELBASED = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIF3_BackProjectionType_BP_CUDAVOXELBASED
    
    BackProjectionType_BP_CUDARAYCAST = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIF3_BackProjectionType_BP_CUDARAYCAST
    
    BackProjectionType_BP_JOSEPHATTENUATED = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIF3_BackProjectionType_BP_JOSEPHATTENUATED
    
    BackProjectionType_BP_ZENG = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIF3_BackProjectionType_BP_ZENG
    
    __New_orig__ = _swig_new_static_method(_rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIF3___New_orig__)
    Clone = _swig_new_instance_method(_rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIF3_Clone)
    SetForwardProjectionFilter = _swig_new_instance_method(_rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIF3_SetForwardProjectionFilter)
    GetForwardProjectionFilter = _swig_new_instance_method(_rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIF3_GetForwardProjectionFilter)
    SetBackProjectionFilter = _swig_new_instance_method(_rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIF3_SetBackProjectionFilter)
    GetBackProjectionFilter = _swig_new_instance_method(_rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIF3_GetBackProjectionFilter)
    __swig_destroy__ = _rtkIterativeConeBeamReconstructionFilterPython.delete_rtkIterativeConeBeamReconstructionFilterIF3
    cast = _swig_new_static_method(_rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIF3_cast)

    def New(*args, **kargs):
        """New() -> rtkIterativeConeBeamReconstructionFilterIF3

        Create a new object of the class rtkIterativeConeBeamReconstructionFilterIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkIterativeConeBeamReconstructionFilterIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkIterativeConeBeamReconstructionFilterIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkIterativeConeBeamReconstructionFilterIF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkIterativeConeBeamReconstructionFilterIF3 in _rtkIterativeConeBeamReconstructionFilterPython:
_rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIF3_swigregister(rtkIterativeConeBeamReconstructionFilterIF3)
rtkIterativeConeBeamReconstructionFilterIF3___New_orig__ = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIF3___New_orig__
rtkIterativeConeBeamReconstructionFilterIF3_cast = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIF3_cast


def rtkIterativeConeBeamReconstructionFilterIF4IF3_New():
    return rtkIterativeConeBeamReconstructionFilterIF4IF3.New()

class rtkIterativeConeBeamReconstructionFilterIF4IF3(itk.itkImageToImageFilterRTKPython.itkImageToImageFilterIF4IF4):
    r"""Proxy of C++ rtkIterativeConeBeamReconstructionFilterIF4IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    ForwardProjectionType_FP_JOSEPH = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIF4IF3_ForwardProjectionType_FP_JOSEPH
    
    ForwardProjectionType_FP_CUDARAYCAST = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIF4IF3_ForwardProjectionType_FP_CUDARAYCAST
    
    ForwardProjectionType_FP_JOSEPHATTENUATED = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIF4IF3_ForwardProjectionType_FP_JOSEPHATTENUATED
    
    ForwardProjectionType_FP_ZENG = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIF4IF3_ForwardProjectionType_FP_ZENG
    
    BackProjectionType_BP_VOXELBASED = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIF4IF3_BackProjectionType_BP_VOXELBASED
    
    BackProjectionType_BP_JOSEPH = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIF4IF3_BackProjectionType_BP_JOSEPH
    
    BackProjectionType_BP_CUDAVOXELBASED = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIF4IF3_BackProjectionType_BP_CUDAVOXELBASED
    
    BackProjectionType_BP_CUDARAYCAST = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIF4IF3_BackProjectionType_BP_CUDARAYCAST
    
    BackProjectionType_BP_JOSEPHATTENUATED = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIF4IF3_BackProjectionType_BP_JOSEPHATTENUATED
    
    BackProjectionType_BP_ZENG = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIF4IF3_BackProjectionType_BP_ZENG
    
    __New_orig__ = _swig_new_static_method(_rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIF4IF3___New_orig__)
    Clone = _swig_new_instance_method(_rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIF4IF3_Clone)
    SetForwardProjectionFilter = _swig_new_instance_method(_rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIF4IF3_SetForwardProjectionFilter)
    GetForwardProjectionFilter = _swig_new_instance_method(_rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIF4IF3_GetForwardProjectionFilter)
    SetBackProjectionFilter = _swig_new_instance_method(_rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIF4IF3_SetBackProjectionFilter)
    GetBackProjectionFilter = _swig_new_instance_method(_rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIF4IF3_GetBackProjectionFilter)
    __swig_destroy__ = _rtkIterativeConeBeamReconstructionFilterPython.delete_rtkIterativeConeBeamReconstructionFilterIF4IF3
    cast = _swig_new_static_method(_rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIF4IF3_cast)

    def New(*args, **kargs):
        """New() -> rtkIterativeConeBeamReconstructionFilterIF4IF3

        Create a new object of the class rtkIterativeConeBeamReconstructionFilterIF4IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkIterativeConeBeamReconstructionFilterIF4IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkIterativeConeBeamReconstructionFilterIF4IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkIterativeConeBeamReconstructionFilterIF4IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkIterativeConeBeamReconstructionFilterIF4IF3 in _rtkIterativeConeBeamReconstructionFilterPython:
_rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIF4IF3_swigregister(rtkIterativeConeBeamReconstructionFilterIF4IF3)
rtkIterativeConeBeamReconstructionFilterIF4IF3___New_orig__ = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIF4IF3___New_orig__
rtkIterativeConeBeamReconstructionFilterIF4IF3_cast = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIF4IF3_cast


def rtkIterativeConeBeamReconstructionFilterIVF23IVF23_New():
    return rtkIterativeConeBeamReconstructionFilterIVF23IVF23.New()

class rtkIterativeConeBeamReconstructionFilterIVF23IVF23(itk.itkImageToImageFilterAPython.itkImageToImageFilterIVF23IVF23):
    r"""Proxy of C++ rtkIterativeConeBeamReconstructionFilterIVF23IVF23 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    ForwardProjectionType_FP_JOSEPH = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF23IVF23_ForwardProjectionType_FP_JOSEPH
    
    ForwardProjectionType_FP_CUDARAYCAST = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF23IVF23_ForwardProjectionType_FP_CUDARAYCAST
    
    ForwardProjectionType_FP_JOSEPHATTENUATED = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF23IVF23_ForwardProjectionType_FP_JOSEPHATTENUATED
    
    ForwardProjectionType_FP_ZENG = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF23IVF23_ForwardProjectionType_FP_ZENG
    
    BackProjectionType_BP_VOXELBASED = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF23IVF23_BackProjectionType_BP_VOXELBASED
    
    BackProjectionType_BP_JOSEPH = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF23IVF23_BackProjectionType_BP_JOSEPH
    
    BackProjectionType_BP_CUDAVOXELBASED = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF23IVF23_BackProjectionType_BP_CUDAVOXELBASED
    
    BackProjectionType_BP_CUDARAYCAST = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF23IVF23_BackProjectionType_BP_CUDARAYCAST
    
    BackProjectionType_BP_JOSEPHATTENUATED = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF23IVF23_BackProjectionType_BP_JOSEPHATTENUATED
    
    BackProjectionType_BP_ZENG = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF23IVF23_BackProjectionType_BP_ZENG
    
    __New_orig__ = _swig_new_static_method(_rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF23IVF23___New_orig__)
    Clone = _swig_new_instance_method(_rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF23IVF23_Clone)
    SetForwardProjectionFilter = _swig_new_instance_method(_rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF23IVF23_SetForwardProjectionFilter)
    GetForwardProjectionFilter = _swig_new_instance_method(_rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF23IVF23_GetForwardProjectionFilter)
    SetBackProjectionFilter = _swig_new_instance_method(_rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF23IVF23_SetBackProjectionFilter)
    GetBackProjectionFilter = _swig_new_instance_method(_rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF23IVF23_GetBackProjectionFilter)
    __swig_destroy__ = _rtkIterativeConeBeamReconstructionFilterPython.delete_rtkIterativeConeBeamReconstructionFilterIVF23IVF23
    cast = _swig_new_static_method(_rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF23IVF23_cast)

    def New(*args, **kargs):
        """New() -> rtkIterativeConeBeamReconstructionFilterIVF23IVF23

        Create a new object of the class rtkIterativeConeBeamReconstructionFilterIVF23IVF23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkIterativeConeBeamReconstructionFilterIVF23IVF23.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkIterativeConeBeamReconstructionFilterIVF23IVF23.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkIterativeConeBeamReconstructionFilterIVF23IVF23.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkIterativeConeBeamReconstructionFilterIVF23IVF23 in _rtkIterativeConeBeamReconstructionFilterPython:
_rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF23IVF23_swigregister(rtkIterativeConeBeamReconstructionFilterIVF23IVF23)
rtkIterativeConeBeamReconstructionFilterIVF23IVF23___New_orig__ = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF23IVF23___New_orig__
rtkIterativeConeBeamReconstructionFilterIVF23IVF23_cast = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF23IVF23_cast


def rtkIterativeConeBeamReconstructionFilterIVF33IVF33_New():
    return rtkIterativeConeBeamReconstructionFilterIVF33IVF33.New()

class rtkIterativeConeBeamReconstructionFilterIVF33IVF33(itk.itkImageToImageFilterAPython.itkImageToImageFilterIVF33IVF33):
    r"""Proxy of C++ rtkIterativeConeBeamReconstructionFilterIVF33IVF33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    ForwardProjectionType_FP_JOSEPH = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF33IVF33_ForwardProjectionType_FP_JOSEPH
    
    ForwardProjectionType_FP_CUDARAYCAST = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF33IVF33_ForwardProjectionType_FP_CUDARAYCAST
    
    ForwardProjectionType_FP_JOSEPHATTENUATED = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF33IVF33_ForwardProjectionType_FP_JOSEPHATTENUATED
    
    ForwardProjectionType_FP_ZENG = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF33IVF33_ForwardProjectionType_FP_ZENG
    
    BackProjectionType_BP_VOXELBASED = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF33IVF33_BackProjectionType_BP_VOXELBASED
    
    BackProjectionType_BP_JOSEPH = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF33IVF33_BackProjectionType_BP_JOSEPH
    
    BackProjectionType_BP_CUDAVOXELBASED = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF33IVF33_BackProjectionType_BP_CUDAVOXELBASED
    
    BackProjectionType_BP_CUDARAYCAST = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF33IVF33_BackProjectionType_BP_CUDARAYCAST
    
    BackProjectionType_BP_JOSEPHATTENUATED = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF33IVF33_BackProjectionType_BP_JOSEPHATTENUATED
    
    BackProjectionType_BP_ZENG = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF33IVF33_BackProjectionType_BP_ZENG
    
    __New_orig__ = _swig_new_static_method(_rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF33IVF33___New_orig__)
    Clone = _swig_new_instance_method(_rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF33IVF33_Clone)
    SetForwardProjectionFilter = _swig_new_instance_method(_rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF33IVF33_SetForwardProjectionFilter)
    GetForwardProjectionFilter = _swig_new_instance_method(_rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF33IVF33_GetForwardProjectionFilter)
    SetBackProjectionFilter = _swig_new_instance_method(_rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF33IVF33_SetBackProjectionFilter)
    GetBackProjectionFilter = _swig_new_instance_method(_rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF33IVF33_GetBackProjectionFilter)
    __swig_destroy__ = _rtkIterativeConeBeamReconstructionFilterPython.delete_rtkIterativeConeBeamReconstructionFilterIVF33IVF33
    cast = _swig_new_static_method(_rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF33IVF33_cast)

    def New(*args, **kargs):
        """New() -> rtkIterativeConeBeamReconstructionFilterIVF33IVF33

        Create a new object of the class rtkIterativeConeBeamReconstructionFilterIVF33IVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkIterativeConeBeamReconstructionFilterIVF33IVF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkIterativeConeBeamReconstructionFilterIVF33IVF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkIterativeConeBeamReconstructionFilterIVF33IVF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkIterativeConeBeamReconstructionFilterIVF33IVF33 in _rtkIterativeConeBeamReconstructionFilterPython:
_rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF33IVF33_swigregister(rtkIterativeConeBeamReconstructionFilterIVF33IVF33)
rtkIterativeConeBeamReconstructionFilterIVF33IVF33___New_orig__ = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF33IVF33___New_orig__
rtkIterativeConeBeamReconstructionFilterIVF33IVF33_cast = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF33IVF33_cast


def rtkIterativeConeBeamReconstructionFilterIVF43IVF43_New():
    return rtkIterativeConeBeamReconstructionFilterIVF43IVF43.New()

class rtkIterativeConeBeamReconstructionFilterIVF43IVF43(itk.itkImageToImageFilterAPython.itkImageToImageFilterIVF43IVF43):
    r"""Proxy of C++ rtkIterativeConeBeamReconstructionFilterIVF43IVF43 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    ForwardProjectionType_FP_JOSEPH = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF43IVF43_ForwardProjectionType_FP_JOSEPH
    
    ForwardProjectionType_FP_CUDARAYCAST = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF43IVF43_ForwardProjectionType_FP_CUDARAYCAST
    
    ForwardProjectionType_FP_JOSEPHATTENUATED = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF43IVF43_ForwardProjectionType_FP_JOSEPHATTENUATED
    
    ForwardProjectionType_FP_ZENG = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF43IVF43_ForwardProjectionType_FP_ZENG
    
    BackProjectionType_BP_VOXELBASED = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF43IVF43_BackProjectionType_BP_VOXELBASED
    
    BackProjectionType_BP_JOSEPH = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF43IVF43_BackProjectionType_BP_JOSEPH
    
    BackProjectionType_BP_CUDAVOXELBASED = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF43IVF43_BackProjectionType_BP_CUDAVOXELBASED
    
    BackProjectionType_BP_CUDARAYCAST = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF43IVF43_BackProjectionType_BP_CUDARAYCAST
    
    BackProjectionType_BP_JOSEPHATTENUATED = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF43IVF43_BackProjectionType_BP_JOSEPHATTENUATED
    
    BackProjectionType_BP_ZENG = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF43IVF43_BackProjectionType_BP_ZENG
    
    __New_orig__ = _swig_new_static_method(_rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF43IVF43___New_orig__)
    Clone = _swig_new_instance_method(_rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF43IVF43_Clone)
    SetForwardProjectionFilter = _swig_new_instance_method(_rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF43IVF43_SetForwardProjectionFilter)
    GetForwardProjectionFilter = _swig_new_instance_method(_rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF43IVF43_GetForwardProjectionFilter)
    SetBackProjectionFilter = _swig_new_instance_method(_rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF43IVF43_SetBackProjectionFilter)
    GetBackProjectionFilter = _swig_new_instance_method(_rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF43IVF43_GetBackProjectionFilter)
    __swig_destroy__ = _rtkIterativeConeBeamReconstructionFilterPython.delete_rtkIterativeConeBeamReconstructionFilterIVF43IVF43
    cast = _swig_new_static_method(_rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF43IVF43_cast)

    def New(*args, **kargs):
        """New() -> rtkIterativeConeBeamReconstructionFilterIVF43IVF43

        Create a new object of the class rtkIterativeConeBeamReconstructionFilterIVF43IVF43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkIterativeConeBeamReconstructionFilterIVF43IVF43.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkIterativeConeBeamReconstructionFilterIVF43IVF43.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkIterativeConeBeamReconstructionFilterIVF43IVF43.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkIterativeConeBeamReconstructionFilterIVF43IVF43 in _rtkIterativeConeBeamReconstructionFilterPython:
_rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF43IVF43_swigregister(rtkIterativeConeBeamReconstructionFilterIVF43IVF43)
rtkIterativeConeBeamReconstructionFilterIVF43IVF43___New_orig__ = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF43IVF43___New_orig__
rtkIterativeConeBeamReconstructionFilterIVF43IVF43_cast = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF43IVF43_cast


def rtkIterativeConeBeamReconstructionFilterIVF53IVF53_New():
    return rtkIterativeConeBeamReconstructionFilterIVF53IVF53.New()

class rtkIterativeConeBeamReconstructionFilterIVF53IVF53(itk.itkImageToImageFilterRTKPython.itkImageToImageFilterIVF53IVF53):
    r"""Proxy of C++ rtkIterativeConeBeamReconstructionFilterIVF53IVF53 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    ForwardProjectionType_FP_JOSEPH = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF53IVF53_ForwardProjectionType_FP_JOSEPH
    
    ForwardProjectionType_FP_CUDARAYCAST = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF53IVF53_ForwardProjectionType_FP_CUDARAYCAST
    
    ForwardProjectionType_FP_JOSEPHATTENUATED = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF53IVF53_ForwardProjectionType_FP_JOSEPHATTENUATED
    
    ForwardProjectionType_FP_ZENG = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF53IVF53_ForwardProjectionType_FP_ZENG
    
    BackProjectionType_BP_VOXELBASED = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF53IVF53_BackProjectionType_BP_VOXELBASED
    
    BackProjectionType_BP_JOSEPH = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF53IVF53_BackProjectionType_BP_JOSEPH
    
    BackProjectionType_BP_CUDAVOXELBASED = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF53IVF53_BackProjectionType_BP_CUDAVOXELBASED
    
    BackProjectionType_BP_CUDARAYCAST = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF53IVF53_BackProjectionType_BP_CUDARAYCAST
    
    BackProjectionType_BP_JOSEPHATTENUATED = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF53IVF53_BackProjectionType_BP_JOSEPHATTENUATED
    
    BackProjectionType_BP_ZENG = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF53IVF53_BackProjectionType_BP_ZENG
    
    __New_orig__ = _swig_new_static_method(_rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF53IVF53___New_orig__)
    Clone = _swig_new_instance_method(_rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF53IVF53_Clone)
    SetForwardProjectionFilter = _swig_new_instance_method(_rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF53IVF53_SetForwardProjectionFilter)
    GetForwardProjectionFilter = _swig_new_instance_method(_rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF53IVF53_GetForwardProjectionFilter)
    SetBackProjectionFilter = _swig_new_instance_method(_rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF53IVF53_SetBackProjectionFilter)
    GetBackProjectionFilter = _swig_new_instance_method(_rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF53IVF53_GetBackProjectionFilter)
    __swig_destroy__ = _rtkIterativeConeBeamReconstructionFilterPython.delete_rtkIterativeConeBeamReconstructionFilterIVF53IVF53
    cast = _swig_new_static_method(_rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF53IVF53_cast)

    def New(*args, **kargs):
        """New() -> rtkIterativeConeBeamReconstructionFilterIVF53IVF53

        Create a new object of the class rtkIterativeConeBeamReconstructionFilterIVF53IVF53 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkIterativeConeBeamReconstructionFilterIVF53IVF53.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkIterativeConeBeamReconstructionFilterIVF53IVF53.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkIterativeConeBeamReconstructionFilterIVF53IVF53.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkIterativeConeBeamReconstructionFilterIVF53IVF53 in _rtkIterativeConeBeamReconstructionFilterPython:
_rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF53IVF53_swigregister(rtkIterativeConeBeamReconstructionFilterIVF53IVF53)
rtkIterativeConeBeamReconstructionFilterIVF53IVF53___New_orig__ = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF53IVF53___New_orig__
rtkIterativeConeBeamReconstructionFilterIVF53IVF53_cast = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF53IVF53_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def iterative_cone_beam_reconstruction_filter(*args, **kwargs):
    """Procedural interface for IterativeConeBeamReconstructionFilter"""
    import itk
    instance = itk.IterativeConeBeamReconstructionFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def iterative_cone_beam_reconstruction_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.IterativeConeBeamReconstructionFilter, itkTemplate.itkTemplate):
        filter_object = itk.IterativeConeBeamReconstructionFilter.values()[0]
    else:
        filter_object = itk.IterativeConeBeamReconstructionFilter

    iterative_cone_beam_reconstruction_filter.__doc__ = filter_object.__doc__
    iterative_cone_beam_reconstruction_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    iterative_cone_beam_reconstruction_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.IterativeConeBeamReconstructionFilter, itkTemplate.itkTemplate):
        iterative_cone_beam_reconstruction_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        iterative_cone_beam_reconstruction_filter.__doc__ += "\n"
        iterative_cone_beam_reconstruction_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        iterative_cone_beam_reconstruction_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



