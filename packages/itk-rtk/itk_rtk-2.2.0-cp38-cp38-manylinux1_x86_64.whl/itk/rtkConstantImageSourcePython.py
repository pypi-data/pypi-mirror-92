# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _RTKPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _rtkConstantImageSourcePython
else:
    import _rtkConstantImageSourcePython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _rtkConstantImageSourcePython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _rtkConstantImageSourcePython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.pyBasePython
import itk.ITKCommonBasePython
import itk.itkImageSourcePython
import itk.itkImagePython
import itk.itkRGBPixelPython
import itk.itkFixedArrayPython
import itk.itkPointPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.vnl_vector_refPython
import itk.itkVectorPython
import itk.itkMatrixPython
import itk.itkCovariantVectorPython
import itk.vnl_matrix_fixedPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBAPixelPython
import itk.itkImageSourceCommonPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython

def rtkConstantImageSourceID2_New():
    return rtkConstantImageSourceID2.New()

class rtkConstantImageSourceID2(itk.itkImageSourcePython.itkImageSourceID2):
    r"""Proxy of C++ rtkConstantImageSourceID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_rtkConstantImageSourcePython.rtkConstantImageSourceID2___New_orig__)
    Clone = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceID2_Clone)
    SetSize = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceID2_SetSize)
    GetSize = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceID2_GetSize)
    SetSpacing = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceID2_SetSpacing)
    GetSpacing = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceID2_GetSpacing)
    SetOrigin = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceID2_SetOrigin)
    GetOrigin = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceID2_GetOrigin)
    SetDirection = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceID2_SetDirection)
    GetDirection = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceID2_GetDirection)
    SetIndex = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceID2_SetIndex)
    GetIndex = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceID2_GetIndex)
    SetConstant = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceID2_SetConstant)
    GetConstant = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceID2_GetConstant)
    SetInformationFromImage = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceID2_SetInformationFromImage)
    __swig_destroy__ = _rtkConstantImageSourcePython.delete_rtkConstantImageSourceID2
    cast = _swig_new_static_method(_rtkConstantImageSourcePython.rtkConstantImageSourceID2_cast)

    def New(*args, **kargs):
        """New() -> rtkConstantImageSourceID2

        Create a new object of the class rtkConstantImageSourceID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkConstantImageSourceID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkConstantImageSourceID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkConstantImageSourceID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkConstantImageSourceID2 in _rtkConstantImageSourcePython:
_rtkConstantImageSourcePython.rtkConstantImageSourceID2_swigregister(rtkConstantImageSourceID2)
rtkConstantImageSourceID2___New_orig__ = _rtkConstantImageSourcePython.rtkConstantImageSourceID2___New_orig__
rtkConstantImageSourceID2_cast = _rtkConstantImageSourcePython.rtkConstantImageSourceID2_cast


def rtkConstantImageSourceID3_New():
    return rtkConstantImageSourceID3.New()

class rtkConstantImageSourceID3(itk.itkImageSourcePython.itkImageSourceID3):
    r"""Proxy of C++ rtkConstantImageSourceID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_rtkConstantImageSourcePython.rtkConstantImageSourceID3___New_orig__)
    Clone = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceID3_Clone)
    SetSize = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceID3_SetSize)
    GetSize = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceID3_GetSize)
    SetSpacing = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceID3_SetSpacing)
    GetSpacing = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceID3_GetSpacing)
    SetOrigin = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceID3_SetOrigin)
    GetOrigin = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceID3_GetOrigin)
    SetDirection = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceID3_SetDirection)
    GetDirection = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceID3_GetDirection)
    SetIndex = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceID3_SetIndex)
    GetIndex = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceID3_GetIndex)
    SetConstant = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceID3_SetConstant)
    GetConstant = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceID3_GetConstant)
    SetInformationFromImage = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceID3_SetInformationFromImage)
    __swig_destroy__ = _rtkConstantImageSourcePython.delete_rtkConstantImageSourceID3
    cast = _swig_new_static_method(_rtkConstantImageSourcePython.rtkConstantImageSourceID3_cast)

    def New(*args, **kargs):
        """New() -> rtkConstantImageSourceID3

        Create a new object of the class rtkConstantImageSourceID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkConstantImageSourceID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkConstantImageSourceID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkConstantImageSourceID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkConstantImageSourceID3 in _rtkConstantImageSourcePython:
_rtkConstantImageSourcePython.rtkConstantImageSourceID3_swigregister(rtkConstantImageSourceID3)
rtkConstantImageSourceID3___New_orig__ = _rtkConstantImageSourcePython.rtkConstantImageSourceID3___New_orig__
rtkConstantImageSourceID3_cast = _rtkConstantImageSourcePython.rtkConstantImageSourceID3_cast


def rtkConstantImageSourceIF2_New():
    return rtkConstantImageSourceIF2.New()

class rtkConstantImageSourceIF2(itk.itkImageSourcePython.itkImageSourceIF2):
    r"""Proxy of C++ rtkConstantImageSourceIF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIF2___New_orig__)
    Clone = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIF2_Clone)
    SetSize = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIF2_SetSize)
    GetSize = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIF2_GetSize)
    SetSpacing = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIF2_SetSpacing)
    GetSpacing = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIF2_GetSpacing)
    SetOrigin = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIF2_SetOrigin)
    GetOrigin = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIF2_GetOrigin)
    SetDirection = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIF2_SetDirection)
    GetDirection = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIF2_GetDirection)
    SetIndex = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIF2_SetIndex)
    GetIndex = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIF2_GetIndex)
    SetConstant = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIF2_SetConstant)
    GetConstant = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIF2_GetConstant)
    SetInformationFromImage = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIF2_SetInformationFromImage)
    __swig_destroy__ = _rtkConstantImageSourcePython.delete_rtkConstantImageSourceIF2
    cast = _swig_new_static_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIF2_cast)

    def New(*args, **kargs):
        """New() -> rtkConstantImageSourceIF2

        Create a new object of the class rtkConstantImageSourceIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkConstantImageSourceIF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkConstantImageSourceIF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkConstantImageSourceIF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkConstantImageSourceIF2 in _rtkConstantImageSourcePython:
_rtkConstantImageSourcePython.rtkConstantImageSourceIF2_swigregister(rtkConstantImageSourceIF2)
rtkConstantImageSourceIF2___New_orig__ = _rtkConstantImageSourcePython.rtkConstantImageSourceIF2___New_orig__
rtkConstantImageSourceIF2_cast = _rtkConstantImageSourcePython.rtkConstantImageSourceIF2_cast


def rtkConstantImageSourceIF3_New():
    return rtkConstantImageSourceIF3.New()

class rtkConstantImageSourceIF3(itk.itkImageSourcePython.itkImageSourceIF3):
    r"""Proxy of C++ rtkConstantImageSourceIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIF3___New_orig__)
    Clone = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIF3_Clone)
    SetSize = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIF3_SetSize)
    GetSize = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIF3_GetSize)
    SetSpacing = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIF3_SetSpacing)
    GetSpacing = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIF3_GetSpacing)
    SetOrigin = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIF3_SetOrigin)
    GetOrigin = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIF3_GetOrigin)
    SetDirection = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIF3_SetDirection)
    GetDirection = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIF3_GetDirection)
    SetIndex = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIF3_SetIndex)
    GetIndex = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIF3_GetIndex)
    SetConstant = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIF3_SetConstant)
    GetConstant = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIF3_GetConstant)
    SetInformationFromImage = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIF3_SetInformationFromImage)
    __swig_destroy__ = _rtkConstantImageSourcePython.delete_rtkConstantImageSourceIF3
    cast = _swig_new_static_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIF3_cast)

    def New(*args, **kargs):
        """New() -> rtkConstantImageSourceIF3

        Create a new object of the class rtkConstantImageSourceIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkConstantImageSourceIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkConstantImageSourceIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkConstantImageSourceIF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkConstantImageSourceIF3 in _rtkConstantImageSourcePython:
_rtkConstantImageSourcePython.rtkConstantImageSourceIF3_swigregister(rtkConstantImageSourceIF3)
rtkConstantImageSourceIF3___New_orig__ = _rtkConstantImageSourcePython.rtkConstantImageSourceIF3___New_orig__
rtkConstantImageSourceIF3_cast = _rtkConstantImageSourcePython.rtkConstantImageSourceIF3_cast


def rtkConstantImageSourceIVF22_New():
    return rtkConstantImageSourceIVF22.New()

class rtkConstantImageSourceIVF22(itk.itkImageSourcePython.itkImageSourceIVF22):
    r"""Proxy of C++ rtkConstantImageSourceIVF22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIVF22___New_orig__)
    Clone = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIVF22_Clone)
    SetSize = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIVF22_SetSize)
    GetSize = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIVF22_GetSize)
    SetSpacing = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIVF22_SetSpacing)
    GetSpacing = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIVF22_GetSpacing)
    SetOrigin = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIVF22_SetOrigin)
    GetOrigin = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIVF22_GetOrigin)
    SetDirection = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIVF22_SetDirection)
    GetDirection = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIVF22_GetDirection)
    SetIndex = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIVF22_SetIndex)
    GetIndex = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIVF22_GetIndex)
    SetConstant = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIVF22_SetConstant)
    GetConstant = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIVF22_GetConstant)
    SetInformationFromImage = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIVF22_SetInformationFromImage)
    __swig_destroy__ = _rtkConstantImageSourcePython.delete_rtkConstantImageSourceIVF22
    cast = _swig_new_static_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIVF22_cast)

    def New(*args, **kargs):
        """New() -> rtkConstantImageSourceIVF22

        Create a new object of the class rtkConstantImageSourceIVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkConstantImageSourceIVF22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkConstantImageSourceIVF22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkConstantImageSourceIVF22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkConstantImageSourceIVF22 in _rtkConstantImageSourcePython:
_rtkConstantImageSourcePython.rtkConstantImageSourceIVF22_swigregister(rtkConstantImageSourceIVF22)
rtkConstantImageSourceIVF22___New_orig__ = _rtkConstantImageSourcePython.rtkConstantImageSourceIVF22___New_orig__
rtkConstantImageSourceIVF22_cast = _rtkConstantImageSourcePython.rtkConstantImageSourceIVF22_cast


def rtkConstantImageSourceIVF23_New():
    return rtkConstantImageSourceIVF23.New()

class rtkConstantImageSourceIVF23(itk.itkImageSourcePython.itkImageSourceIVF23):
    r"""Proxy of C++ rtkConstantImageSourceIVF23 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIVF23___New_orig__)
    Clone = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIVF23_Clone)
    SetSize = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIVF23_SetSize)
    GetSize = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIVF23_GetSize)
    SetSpacing = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIVF23_SetSpacing)
    GetSpacing = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIVF23_GetSpacing)
    SetOrigin = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIVF23_SetOrigin)
    GetOrigin = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIVF23_GetOrigin)
    SetDirection = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIVF23_SetDirection)
    GetDirection = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIVF23_GetDirection)
    SetIndex = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIVF23_SetIndex)
    GetIndex = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIVF23_GetIndex)
    SetConstant = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIVF23_SetConstant)
    GetConstant = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIVF23_GetConstant)
    SetInformationFromImage = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIVF23_SetInformationFromImage)
    __swig_destroy__ = _rtkConstantImageSourcePython.delete_rtkConstantImageSourceIVF23
    cast = _swig_new_static_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIVF23_cast)

    def New(*args, **kargs):
        """New() -> rtkConstantImageSourceIVF23

        Create a new object of the class rtkConstantImageSourceIVF23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkConstantImageSourceIVF23.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkConstantImageSourceIVF23.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkConstantImageSourceIVF23.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkConstantImageSourceIVF23 in _rtkConstantImageSourcePython:
_rtkConstantImageSourcePython.rtkConstantImageSourceIVF23_swigregister(rtkConstantImageSourceIVF23)
rtkConstantImageSourceIVF23___New_orig__ = _rtkConstantImageSourcePython.rtkConstantImageSourceIVF23___New_orig__
rtkConstantImageSourceIVF23_cast = _rtkConstantImageSourcePython.rtkConstantImageSourceIVF23_cast


def rtkConstantImageSourceIVF32_New():
    return rtkConstantImageSourceIVF32.New()

class rtkConstantImageSourceIVF32(itk.itkImageSourcePython.itkImageSourceIVF32):
    r"""Proxy of C++ rtkConstantImageSourceIVF32 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIVF32___New_orig__)
    Clone = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIVF32_Clone)
    SetSize = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIVF32_SetSize)
    GetSize = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIVF32_GetSize)
    SetSpacing = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIVF32_SetSpacing)
    GetSpacing = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIVF32_GetSpacing)
    SetOrigin = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIVF32_SetOrigin)
    GetOrigin = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIVF32_GetOrigin)
    SetDirection = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIVF32_SetDirection)
    GetDirection = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIVF32_GetDirection)
    SetIndex = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIVF32_SetIndex)
    GetIndex = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIVF32_GetIndex)
    SetConstant = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIVF32_SetConstant)
    GetConstant = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIVF32_GetConstant)
    SetInformationFromImage = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIVF32_SetInformationFromImage)
    __swig_destroy__ = _rtkConstantImageSourcePython.delete_rtkConstantImageSourceIVF32
    cast = _swig_new_static_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIVF32_cast)

    def New(*args, **kargs):
        """New() -> rtkConstantImageSourceIVF32

        Create a new object of the class rtkConstantImageSourceIVF32 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkConstantImageSourceIVF32.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkConstantImageSourceIVF32.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkConstantImageSourceIVF32.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkConstantImageSourceIVF32 in _rtkConstantImageSourcePython:
_rtkConstantImageSourcePython.rtkConstantImageSourceIVF32_swigregister(rtkConstantImageSourceIVF32)
rtkConstantImageSourceIVF32___New_orig__ = _rtkConstantImageSourcePython.rtkConstantImageSourceIVF32___New_orig__
rtkConstantImageSourceIVF32_cast = _rtkConstantImageSourcePython.rtkConstantImageSourceIVF32_cast


def rtkConstantImageSourceIVF33_New():
    return rtkConstantImageSourceIVF33.New()

class rtkConstantImageSourceIVF33(itk.itkImageSourcePython.itkImageSourceIVF33):
    r"""Proxy of C++ rtkConstantImageSourceIVF33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIVF33___New_orig__)
    Clone = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIVF33_Clone)
    SetSize = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIVF33_SetSize)
    GetSize = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIVF33_GetSize)
    SetSpacing = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIVF33_SetSpacing)
    GetSpacing = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIVF33_GetSpacing)
    SetOrigin = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIVF33_SetOrigin)
    GetOrigin = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIVF33_GetOrigin)
    SetDirection = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIVF33_SetDirection)
    GetDirection = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIVF33_GetDirection)
    SetIndex = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIVF33_SetIndex)
    GetIndex = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIVF33_GetIndex)
    SetConstant = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIVF33_SetConstant)
    GetConstant = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIVF33_GetConstant)
    SetInformationFromImage = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIVF33_SetInformationFromImage)
    __swig_destroy__ = _rtkConstantImageSourcePython.delete_rtkConstantImageSourceIVF33
    cast = _swig_new_static_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIVF33_cast)

    def New(*args, **kargs):
        """New() -> rtkConstantImageSourceIVF33

        Create a new object of the class rtkConstantImageSourceIVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkConstantImageSourceIVF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkConstantImageSourceIVF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkConstantImageSourceIVF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkConstantImageSourceIVF33 in _rtkConstantImageSourcePython:
_rtkConstantImageSourcePython.rtkConstantImageSourceIVF33_swigregister(rtkConstantImageSourceIVF33)
rtkConstantImageSourceIVF33___New_orig__ = _rtkConstantImageSourcePython.rtkConstantImageSourceIVF33___New_orig__
rtkConstantImageSourceIVF33_cast = _rtkConstantImageSourcePython.rtkConstantImageSourceIVF33_cast


def rtkConstantImageSourceIVF42_New():
    return rtkConstantImageSourceIVF42.New()

class rtkConstantImageSourceIVF42(itk.itkImageSourcePython.itkImageSourceIVF42):
    r"""Proxy of C++ rtkConstantImageSourceIVF42 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIVF42___New_orig__)
    Clone = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIVF42_Clone)
    SetSize = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIVF42_SetSize)
    GetSize = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIVF42_GetSize)
    SetSpacing = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIVF42_SetSpacing)
    GetSpacing = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIVF42_GetSpacing)
    SetOrigin = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIVF42_SetOrigin)
    GetOrigin = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIVF42_GetOrigin)
    SetDirection = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIVF42_SetDirection)
    GetDirection = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIVF42_GetDirection)
    SetIndex = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIVF42_SetIndex)
    GetIndex = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIVF42_GetIndex)
    SetConstant = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIVF42_SetConstant)
    GetConstant = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIVF42_GetConstant)
    SetInformationFromImage = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIVF42_SetInformationFromImage)
    __swig_destroy__ = _rtkConstantImageSourcePython.delete_rtkConstantImageSourceIVF42
    cast = _swig_new_static_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIVF42_cast)

    def New(*args, **kargs):
        """New() -> rtkConstantImageSourceIVF42

        Create a new object of the class rtkConstantImageSourceIVF42 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkConstantImageSourceIVF42.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkConstantImageSourceIVF42.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkConstantImageSourceIVF42.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkConstantImageSourceIVF42 in _rtkConstantImageSourcePython:
_rtkConstantImageSourcePython.rtkConstantImageSourceIVF42_swigregister(rtkConstantImageSourceIVF42)
rtkConstantImageSourceIVF42___New_orig__ = _rtkConstantImageSourcePython.rtkConstantImageSourceIVF42___New_orig__
rtkConstantImageSourceIVF42_cast = _rtkConstantImageSourcePython.rtkConstantImageSourceIVF42_cast


def rtkConstantImageSourceIVF43_New():
    return rtkConstantImageSourceIVF43.New()

class rtkConstantImageSourceIVF43(itk.itkImageSourcePython.itkImageSourceIVF43):
    r"""Proxy of C++ rtkConstantImageSourceIVF43 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIVF43___New_orig__)
    Clone = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIVF43_Clone)
    SetSize = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIVF43_SetSize)
    GetSize = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIVF43_GetSize)
    SetSpacing = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIVF43_SetSpacing)
    GetSpacing = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIVF43_GetSpacing)
    SetOrigin = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIVF43_SetOrigin)
    GetOrigin = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIVF43_GetOrigin)
    SetDirection = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIVF43_SetDirection)
    GetDirection = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIVF43_GetDirection)
    SetIndex = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIVF43_SetIndex)
    GetIndex = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIVF43_GetIndex)
    SetConstant = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIVF43_SetConstant)
    GetConstant = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIVF43_GetConstant)
    SetInformationFromImage = _swig_new_instance_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIVF43_SetInformationFromImage)
    __swig_destroy__ = _rtkConstantImageSourcePython.delete_rtkConstantImageSourceIVF43
    cast = _swig_new_static_method(_rtkConstantImageSourcePython.rtkConstantImageSourceIVF43_cast)

    def New(*args, **kargs):
        """New() -> rtkConstantImageSourceIVF43

        Create a new object of the class rtkConstantImageSourceIVF43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkConstantImageSourceIVF43.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkConstantImageSourceIVF43.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkConstantImageSourceIVF43.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkConstantImageSourceIVF43 in _rtkConstantImageSourcePython:
_rtkConstantImageSourcePython.rtkConstantImageSourceIVF43_swigregister(rtkConstantImageSourceIVF43)
rtkConstantImageSourceIVF43___New_orig__ = _rtkConstantImageSourcePython.rtkConstantImageSourceIVF43___New_orig__
rtkConstantImageSourceIVF43_cast = _rtkConstantImageSourcePython.rtkConstantImageSourceIVF43_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def constant_image_source(*args, **kwargs):
    """Procedural interface for ConstantImageSource"""
    import itk
    instance = itk.ConstantImageSource.New(*args, **kwargs)
    return instance.__internal_call__()

def constant_image_source_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.ConstantImageSource, itkTemplate.itkTemplate):
        filter_object = itk.ConstantImageSource.values()[0]
    else:
        filter_object = itk.ConstantImageSource

    constant_image_source.__doc__ = filter_object.__doc__
    constant_image_source.__doc__ += "\n Args are Input(s) to the filter.\n"
    constant_image_source.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.ConstantImageSource, itkTemplate.itkTemplate):
        constant_image_source.__doc__ += itkHelpers.filter_args(filter_object)[0]
        constant_image_source.__doc__ += "\n"
        constant_image_source.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        constant_image_source.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



