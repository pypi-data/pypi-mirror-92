# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _RTKPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _rtkFFTRampImageFilterPython
else:
    import _rtkFFTRampImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _rtkFFTRampImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _rtkFFTRampImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.itkSizePython
import itk.rtkFFTProjectionsConvolutionImageFilterPython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkVectorRTKPython
import itk.vnl_vector_refPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.itkFixedArrayRTKPython
import itk.itkImagePython
import itk.itkRGBPixelPython
import itk.itkFixedArrayPython
import itk.itkPointPython
import itk.itkVectorPython
import itk.itkMatrixPython
import itk.itkCovariantVectorPython
import itk.vnl_matrix_fixedPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBAPixelPython
import itk.itkImageToImageFilterAPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython

def rtkFFTRampImageFilterID3ID3D_New():
    return rtkFFTRampImageFilterID3ID3D.New()

class rtkFFTRampImageFilterID3ID3D(itk.rtkFFTProjectionsConvolutionImageFilterPython.rtkFFTProjectionsConvolutionImageFilterID3ID3D):
    r"""Proxy of C++ rtkFFTRampImageFilterID3ID3D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_rtkFFTRampImageFilterPython.rtkFFTRampImageFilterID3ID3D___New_orig__)
    Clone = _swig_new_instance_method(_rtkFFTRampImageFilterPython.rtkFFTRampImageFilterID3ID3D_Clone)
    GetHannCutFrequency = _swig_new_instance_method(_rtkFFTRampImageFilterPython.rtkFFTRampImageFilterID3ID3D_GetHannCutFrequency)
    SetHannCutFrequency = _swig_new_instance_method(_rtkFFTRampImageFilterPython.rtkFFTRampImageFilterID3ID3D_SetHannCutFrequency)
    GetCosineCutFrequency = _swig_new_instance_method(_rtkFFTRampImageFilterPython.rtkFFTRampImageFilterID3ID3D_GetCosineCutFrequency)
    SetCosineCutFrequency = _swig_new_instance_method(_rtkFFTRampImageFilterPython.rtkFFTRampImageFilterID3ID3D_SetCosineCutFrequency)
    GetHammingFrequency = _swig_new_instance_method(_rtkFFTRampImageFilterPython.rtkFFTRampImageFilterID3ID3D_GetHammingFrequency)
    SetHammingFrequency = _swig_new_instance_method(_rtkFFTRampImageFilterPython.rtkFFTRampImageFilterID3ID3D_SetHammingFrequency)
    GetHannCutFrequencyY = _swig_new_instance_method(_rtkFFTRampImageFilterPython.rtkFFTRampImageFilterID3ID3D_GetHannCutFrequencyY)
    SetHannCutFrequencyY = _swig_new_instance_method(_rtkFFTRampImageFilterPython.rtkFFTRampImageFilterID3ID3D_SetHannCutFrequencyY)
    GetRamLakCutFrequency = _swig_new_instance_method(_rtkFFTRampImageFilterPython.rtkFFTRampImageFilterID3ID3D_GetRamLakCutFrequency)
    SetRamLakCutFrequency = _swig_new_instance_method(_rtkFFTRampImageFilterPython.rtkFFTRampImageFilterID3ID3D_SetRamLakCutFrequency)
    GetSheppLoganCutFrequency = _swig_new_instance_method(_rtkFFTRampImageFilterPython.rtkFFTRampImageFilterID3ID3D_GetSheppLoganCutFrequency)
    SetSheppLoganCutFrequency = _swig_new_instance_method(_rtkFFTRampImageFilterPython.rtkFFTRampImageFilterID3ID3D_SetSheppLoganCutFrequency)
    __swig_destroy__ = _rtkFFTRampImageFilterPython.delete_rtkFFTRampImageFilterID3ID3D
    cast = _swig_new_static_method(_rtkFFTRampImageFilterPython.rtkFFTRampImageFilterID3ID3D_cast)

    def New(*args, **kargs):
        """New() -> rtkFFTRampImageFilterID3ID3D

        Create a new object of the class rtkFFTRampImageFilterID3ID3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkFFTRampImageFilterID3ID3D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkFFTRampImageFilterID3ID3D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkFFTRampImageFilterID3ID3D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkFFTRampImageFilterID3ID3D in _rtkFFTRampImageFilterPython:
_rtkFFTRampImageFilterPython.rtkFFTRampImageFilterID3ID3D_swigregister(rtkFFTRampImageFilterID3ID3D)
rtkFFTRampImageFilterID3ID3D___New_orig__ = _rtkFFTRampImageFilterPython.rtkFFTRampImageFilterID3ID3D___New_orig__
rtkFFTRampImageFilterID3ID3D_cast = _rtkFFTRampImageFilterPython.rtkFFTRampImageFilterID3ID3D_cast


def rtkFFTRampImageFilterIF3IF3D_New():
    return rtkFFTRampImageFilterIF3IF3D.New()

class rtkFFTRampImageFilterIF3IF3D(itk.rtkFFTProjectionsConvolutionImageFilterPython.rtkFFTProjectionsConvolutionImageFilterIF3IF3D):
    r"""Proxy of C++ rtkFFTRampImageFilterIF3IF3D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_rtkFFTRampImageFilterPython.rtkFFTRampImageFilterIF3IF3D___New_orig__)
    Clone = _swig_new_instance_method(_rtkFFTRampImageFilterPython.rtkFFTRampImageFilterIF3IF3D_Clone)
    GetHannCutFrequency = _swig_new_instance_method(_rtkFFTRampImageFilterPython.rtkFFTRampImageFilterIF3IF3D_GetHannCutFrequency)
    SetHannCutFrequency = _swig_new_instance_method(_rtkFFTRampImageFilterPython.rtkFFTRampImageFilterIF3IF3D_SetHannCutFrequency)
    GetCosineCutFrequency = _swig_new_instance_method(_rtkFFTRampImageFilterPython.rtkFFTRampImageFilterIF3IF3D_GetCosineCutFrequency)
    SetCosineCutFrequency = _swig_new_instance_method(_rtkFFTRampImageFilterPython.rtkFFTRampImageFilterIF3IF3D_SetCosineCutFrequency)
    GetHammingFrequency = _swig_new_instance_method(_rtkFFTRampImageFilterPython.rtkFFTRampImageFilterIF3IF3D_GetHammingFrequency)
    SetHammingFrequency = _swig_new_instance_method(_rtkFFTRampImageFilterPython.rtkFFTRampImageFilterIF3IF3D_SetHammingFrequency)
    GetHannCutFrequencyY = _swig_new_instance_method(_rtkFFTRampImageFilterPython.rtkFFTRampImageFilterIF3IF3D_GetHannCutFrequencyY)
    SetHannCutFrequencyY = _swig_new_instance_method(_rtkFFTRampImageFilterPython.rtkFFTRampImageFilterIF3IF3D_SetHannCutFrequencyY)
    GetRamLakCutFrequency = _swig_new_instance_method(_rtkFFTRampImageFilterPython.rtkFFTRampImageFilterIF3IF3D_GetRamLakCutFrequency)
    SetRamLakCutFrequency = _swig_new_instance_method(_rtkFFTRampImageFilterPython.rtkFFTRampImageFilterIF3IF3D_SetRamLakCutFrequency)
    GetSheppLoganCutFrequency = _swig_new_instance_method(_rtkFFTRampImageFilterPython.rtkFFTRampImageFilterIF3IF3D_GetSheppLoganCutFrequency)
    SetSheppLoganCutFrequency = _swig_new_instance_method(_rtkFFTRampImageFilterPython.rtkFFTRampImageFilterIF3IF3D_SetSheppLoganCutFrequency)
    __swig_destroy__ = _rtkFFTRampImageFilterPython.delete_rtkFFTRampImageFilterIF3IF3D
    cast = _swig_new_static_method(_rtkFFTRampImageFilterPython.rtkFFTRampImageFilterIF3IF3D_cast)

    def New(*args, **kargs):
        """New() -> rtkFFTRampImageFilterIF3IF3D

        Create a new object of the class rtkFFTRampImageFilterIF3IF3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkFFTRampImageFilterIF3IF3D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkFFTRampImageFilterIF3IF3D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkFFTRampImageFilterIF3IF3D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkFFTRampImageFilterIF3IF3D in _rtkFFTRampImageFilterPython:
_rtkFFTRampImageFilterPython.rtkFFTRampImageFilterIF3IF3D_swigregister(rtkFFTRampImageFilterIF3IF3D)
rtkFFTRampImageFilterIF3IF3D___New_orig__ = _rtkFFTRampImageFilterPython.rtkFFTRampImageFilterIF3IF3D___New_orig__
rtkFFTRampImageFilterIF3IF3D_cast = _rtkFFTRampImageFilterPython.rtkFFTRampImageFilterIF3IF3D_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def fft_ramp_image_filter(*args, **kwargs):
    """Procedural interface for FFTRampImageFilter"""
    import itk
    instance = itk.FFTRampImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def fft_ramp_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.FFTRampImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.FFTRampImageFilter.values()[0]
    else:
        filter_object = itk.FFTRampImageFilter

    fft_ramp_image_filter.__doc__ = filter_object.__doc__
    fft_ramp_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    fft_ramp_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.FFTRampImageFilter, itkTemplate.itkTemplate):
        fft_ramp_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        fft_ramp_image_filter.__doc__ += "\n"
        fft_ramp_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        fft_ramp_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



