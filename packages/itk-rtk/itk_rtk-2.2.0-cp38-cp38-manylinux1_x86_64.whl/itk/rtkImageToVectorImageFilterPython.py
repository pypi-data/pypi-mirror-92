# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _RTKPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _rtkImageToVectorImageFilterPython
else:
    import _rtkImageToVectorImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _rtkImageToVectorImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _rtkImageToVectorImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.pyBasePython
import itk.ITKCommonBasePython
import itk.itkImageToImageFilterRTKPython
import itk.itkVectorImagePython
import itk.itkImagePython
import itk.itkRGBPixelPython
import itk.itkFixedArrayPython
import itk.itkPointPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.vnl_vector_refPython
import itk.itkVectorPython
import itk.itkMatrixPython
import itk.itkCovariantVectorPython
import itk.vnl_matrix_fixedPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBAPixelPython
import itk.itkVariableLengthVectorPython
import itk.itkImageRegionRTKPython
import itk.itkImageRTKPython
import itk.itkImageBaseRTKPython
import itk.itkPointRTKPython
import itk.itkMatrixRTKPython
import itk.itkCovariantVectorRTKPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkImageSourceRTKPython
import itk.itkImageToImageFilterBPython

def rtkImageToVectorImageFilterID2VID2_New():
    return rtkImageToVectorImageFilterID2VID2.New()

class rtkImageToVectorImageFilterID2VID2(itk.itkImageToImageFilterBPython.itkImageToImageFilterID2VID2):
    r"""Proxy of C++ rtkImageToVectorImageFilterID2VID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_rtkImageToVectorImageFilterPython.rtkImageToVectorImageFilterID2VID2___New_orig__)
    Clone = _swig_new_instance_method(_rtkImageToVectorImageFilterPython.rtkImageToVectorImageFilterID2VID2_Clone)
    SetNumberOfChannels = _swig_new_instance_method(_rtkImageToVectorImageFilterPython.rtkImageToVectorImageFilterID2VID2_SetNumberOfChannels)
    GetNumberOfChannels = _swig_new_instance_method(_rtkImageToVectorImageFilterPython.rtkImageToVectorImageFilterID2VID2_GetNumberOfChannels)
    __swig_destroy__ = _rtkImageToVectorImageFilterPython.delete_rtkImageToVectorImageFilterID2VID2
    cast = _swig_new_static_method(_rtkImageToVectorImageFilterPython.rtkImageToVectorImageFilterID2VID2_cast)

    def New(*args, **kargs):
        """New() -> rtkImageToVectorImageFilterID2VID2

        Create a new object of the class rtkImageToVectorImageFilterID2VID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkImageToVectorImageFilterID2VID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkImageToVectorImageFilterID2VID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkImageToVectorImageFilterID2VID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkImageToVectorImageFilterID2VID2 in _rtkImageToVectorImageFilterPython:
_rtkImageToVectorImageFilterPython.rtkImageToVectorImageFilterID2VID2_swigregister(rtkImageToVectorImageFilterID2VID2)
rtkImageToVectorImageFilterID2VID2___New_orig__ = _rtkImageToVectorImageFilterPython.rtkImageToVectorImageFilterID2VID2___New_orig__
rtkImageToVectorImageFilterID2VID2_cast = _rtkImageToVectorImageFilterPython.rtkImageToVectorImageFilterID2VID2_cast


def rtkImageToVectorImageFilterID3VID2_New():
    return rtkImageToVectorImageFilterID3VID2.New()

class rtkImageToVectorImageFilterID3VID2(itk.itkImageToImageFilterRTKPython.itkImageToImageFilterID3VID2):
    r"""Proxy of C++ rtkImageToVectorImageFilterID3VID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_rtkImageToVectorImageFilterPython.rtkImageToVectorImageFilterID3VID2___New_orig__)
    Clone = _swig_new_instance_method(_rtkImageToVectorImageFilterPython.rtkImageToVectorImageFilterID3VID2_Clone)
    SetNumberOfChannels = _swig_new_instance_method(_rtkImageToVectorImageFilterPython.rtkImageToVectorImageFilterID3VID2_SetNumberOfChannels)
    GetNumberOfChannels = _swig_new_instance_method(_rtkImageToVectorImageFilterPython.rtkImageToVectorImageFilterID3VID2_GetNumberOfChannels)
    __swig_destroy__ = _rtkImageToVectorImageFilterPython.delete_rtkImageToVectorImageFilterID3VID2
    cast = _swig_new_static_method(_rtkImageToVectorImageFilterPython.rtkImageToVectorImageFilterID3VID2_cast)

    def New(*args, **kargs):
        """New() -> rtkImageToVectorImageFilterID3VID2

        Create a new object of the class rtkImageToVectorImageFilterID3VID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkImageToVectorImageFilterID3VID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkImageToVectorImageFilterID3VID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkImageToVectorImageFilterID3VID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkImageToVectorImageFilterID3VID2 in _rtkImageToVectorImageFilterPython:
_rtkImageToVectorImageFilterPython.rtkImageToVectorImageFilterID3VID2_swigregister(rtkImageToVectorImageFilterID3VID2)
rtkImageToVectorImageFilterID3VID2___New_orig__ = _rtkImageToVectorImageFilterPython.rtkImageToVectorImageFilterID3VID2___New_orig__
rtkImageToVectorImageFilterID3VID2_cast = _rtkImageToVectorImageFilterPython.rtkImageToVectorImageFilterID3VID2_cast


def rtkImageToVectorImageFilterIF2VIF2_New():
    return rtkImageToVectorImageFilterIF2VIF2.New()

class rtkImageToVectorImageFilterIF2VIF2(itk.itkImageToImageFilterBPython.itkImageToImageFilterIF2VIF2):
    r"""Proxy of C++ rtkImageToVectorImageFilterIF2VIF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_rtkImageToVectorImageFilterPython.rtkImageToVectorImageFilterIF2VIF2___New_orig__)
    Clone = _swig_new_instance_method(_rtkImageToVectorImageFilterPython.rtkImageToVectorImageFilterIF2VIF2_Clone)
    SetNumberOfChannels = _swig_new_instance_method(_rtkImageToVectorImageFilterPython.rtkImageToVectorImageFilterIF2VIF2_SetNumberOfChannels)
    GetNumberOfChannels = _swig_new_instance_method(_rtkImageToVectorImageFilterPython.rtkImageToVectorImageFilterIF2VIF2_GetNumberOfChannels)
    __swig_destroy__ = _rtkImageToVectorImageFilterPython.delete_rtkImageToVectorImageFilterIF2VIF2
    cast = _swig_new_static_method(_rtkImageToVectorImageFilterPython.rtkImageToVectorImageFilterIF2VIF2_cast)

    def New(*args, **kargs):
        """New() -> rtkImageToVectorImageFilterIF2VIF2

        Create a new object of the class rtkImageToVectorImageFilterIF2VIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkImageToVectorImageFilterIF2VIF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkImageToVectorImageFilterIF2VIF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkImageToVectorImageFilterIF2VIF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkImageToVectorImageFilterIF2VIF2 in _rtkImageToVectorImageFilterPython:
_rtkImageToVectorImageFilterPython.rtkImageToVectorImageFilterIF2VIF2_swigregister(rtkImageToVectorImageFilterIF2VIF2)
rtkImageToVectorImageFilterIF2VIF2___New_orig__ = _rtkImageToVectorImageFilterPython.rtkImageToVectorImageFilterIF2VIF2___New_orig__
rtkImageToVectorImageFilterIF2VIF2_cast = _rtkImageToVectorImageFilterPython.rtkImageToVectorImageFilterIF2VIF2_cast


def rtkImageToVectorImageFilterIF3VIF2_New():
    return rtkImageToVectorImageFilterIF3VIF2.New()

class rtkImageToVectorImageFilterIF3VIF2(itk.itkImageToImageFilterRTKPython.itkImageToImageFilterIF3VIF2):
    r"""Proxy of C++ rtkImageToVectorImageFilterIF3VIF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_rtkImageToVectorImageFilterPython.rtkImageToVectorImageFilterIF3VIF2___New_orig__)
    Clone = _swig_new_instance_method(_rtkImageToVectorImageFilterPython.rtkImageToVectorImageFilterIF3VIF2_Clone)
    SetNumberOfChannels = _swig_new_instance_method(_rtkImageToVectorImageFilterPython.rtkImageToVectorImageFilterIF3VIF2_SetNumberOfChannels)
    GetNumberOfChannels = _swig_new_instance_method(_rtkImageToVectorImageFilterPython.rtkImageToVectorImageFilterIF3VIF2_GetNumberOfChannels)
    __swig_destroy__ = _rtkImageToVectorImageFilterPython.delete_rtkImageToVectorImageFilterIF3VIF2
    cast = _swig_new_static_method(_rtkImageToVectorImageFilterPython.rtkImageToVectorImageFilterIF3VIF2_cast)

    def New(*args, **kargs):
        """New() -> rtkImageToVectorImageFilterIF3VIF2

        Create a new object of the class rtkImageToVectorImageFilterIF3VIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkImageToVectorImageFilterIF3VIF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkImageToVectorImageFilterIF3VIF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkImageToVectorImageFilterIF3VIF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkImageToVectorImageFilterIF3VIF2 in _rtkImageToVectorImageFilterPython:
_rtkImageToVectorImageFilterPython.rtkImageToVectorImageFilterIF3VIF2_swigregister(rtkImageToVectorImageFilterIF3VIF2)
rtkImageToVectorImageFilterIF3VIF2___New_orig__ = _rtkImageToVectorImageFilterPython.rtkImageToVectorImageFilterIF3VIF2___New_orig__
rtkImageToVectorImageFilterIF3VIF2_cast = _rtkImageToVectorImageFilterPython.rtkImageToVectorImageFilterIF3VIF2_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def image_to_vector_image_filter(*args, **kwargs):
    """Procedural interface for ImageToVectorImageFilter"""
    import itk
    instance = itk.ImageToVectorImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def image_to_vector_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.ImageToVectorImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.ImageToVectorImageFilter.values()[0]
    else:
        filter_object = itk.ImageToVectorImageFilter

    image_to_vector_image_filter.__doc__ = filter_object.__doc__
    image_to_vector_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    image_to_vector_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.ImageToVectorImageFilter, itkTemplate.itkTemplate):
        image_to_vector_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        image_to_vector_image_filter.__doc__ += "\n"
        image_to_vector_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        image_to_vector_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



