# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _RTKPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _rtkBoellaardScatterCorrectionImageFilterPython
else:
    import _rtkBoellaardScatterCorrectionImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _rtkBoellaardScatterCorrectionImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _rtkBoellaardScatterCorrectionImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.pyBasePython
import itk.ITKCommonBasePython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterBPython
import itk.itkImagePython
import itk.itkRGBPixelPython
import itk.itkFixedArrayPython
import itk.itkPointPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.vnl_vector_refPython
import itk.itkVectorPython
import itk.itkMatrixPython
import itk.itkCovariantVectorPython
import itk.vnl_matrix_fixedPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBAPixelPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageToImageFilterAPython

def rtkBoellaardScatterCorrectionImageFilterID3_New():
    return rtkBoellaardScatterCorrectionImageFilterID3.New()

class rtkBoellaardScatterCorrectionImageFilterID3(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3ID3):
    r"""Proxy of C++ rtkBoellaardScatterCorrectionImageFilterID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_rtkBoellaardScatterCorrectionImageFilterPython.rtkBoellaardScatterCorrectionImageFilterID3___New_orig__)
    Clone = _swig_new_instance_method(_rtkBoellaardScatterCorrectionImageFilterPython.rtkBoellaardScatterCorrectionImageFilterID3_Clone)
    GetAirThreshold = _swig_new_instance_method(_rtkBoellaardScatterCorrectionImageFilterPython.rtkBoellaardScatterCorrectionImageFilterID3_GetAirThreshold)
    SetAirThreshold = _swig_new_instance_method(_rtkBoellaardScatterCorrectionImageFilterPython.rtkBoellaardScatterCorrectionImageFilterID3_SetAirThreshold)
    GetScatterToPrimaryRatio = _swig_new_instance_method(_rtkBoellaardScatterCorrectionImageFilterPython.rtkBoellaardScatterCorrectionImageFilterID3_GetScatterToPrimaryRatio)
    SetScatterToPrimaryRatio = _swig_new_instance_method(_rtkBoellaardScatterCorrectionImageFilterPython.rtkBoellaardScatterCorrectionImageFilterID3_SetScatterToPrimaryRatio)
    GetNonNegativityConstraintThreshold = _swig_new_instance_method(_rtkBoellaardScatterCorrectionImageFilterPython.rtkBoellaardScatterCorrectionImageFilterID3_GetNonNegativityConstraintThreshold)
    SetNonNegativityConstraintThreshold = _swig_new_instance_method(_rtkBoellaardScatterCorrectionImageFilterPython.rtkBoellaardScatterCorrectionImageFilterID3_SetNonNegativityConstraintThreshold)
    __swig_destroy__ = _rtkBoellaardScatterCorrectionImageFilterPython.delete_rtkBoellaardScatterCorrectionImageFilterID3
    cast = _swig_new_static_method(_rtkBoellaardScatterCorrectionImageFilterPython.rtkBoellaardScatterCorrectionImageFilterID3_cast)

    def New(*args, **kargs):
        """New() -> rtkBoellaardScatterCorrectionImageFilterID3

        Create a new object of the class rtkBoellaardScatterCorrectionImageFilterID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkBoellaardScatterCorrectionImageFilterID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkBoellaardScatterCorrectionImageFilterID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkBoellaardScatterCorrectionImageFilterID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkBoellaardScatterCorrectionImageFilterID3 in _rtkBoellaardScatterCorrectionImageFilterPython:
_rtkBoellaardScatterCorrectionImageFilterPython.rtkBoellaardScatterCorrectionImageFilterID3_swigregister(rtkBoellaardScatterCorrectionImageFilterID3)
rtkBoellaardScatterCorrectionImageFilterID3___New_orig__ = _rtkBoellaardScatterCorrectionImageFilterPython.rtkBoellaardScatterCorrectionImageFilterID3___New_orig__
rtkBoellaardScatterCorrectionImageFilterID3_cast = _rtkBoellaardScatterCorrectionImageFilterPython.rtkBoellaardScatterCorrectionImageFilterID3_cast


def rtkBoellaardScatterCorrectionImageFilterIF3_New():
    return rtkBoellaardScatterCorrectionImageFilterIF3.New()

class rtkBoellaardScatterCorrectionImageFilterIF3(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IF3):
    r"""Proxy of C++ rtkBoellaardScatterCorrectionImageFilterIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_rtkBoellaardScatterCorrectionImageFilterPython.rtkBoellaardScatterCorrectionImageFilterIF3___New_orig__)
    Clone = _swig_new_instance_method(_rtkBoellaardScatterCorrectionImageFilterPython.rtkBoellaardScatterCorrectionImageFilterIF3_Clone)
    GetAirThreshold = _swig_new_instance_method(_rtkBoellaardScatterCorrectionImageFilterPython.rtkBoellaardScatterCorrectionImageFilterIF3_GetAirThreshold)
    SetAirThreshold = _swig_new_instance_method(_rtkBoellaardScatterCorrectionImageFilterPython.rtkBoellaardScatterCorrectionImageFilterIF3_SetAirThreshold)
    GetScatterToPrimaryRatio = _swig_new_instance_method(_rtkBoellaardScatterCorrectionImageFilterPython.rtkBoellaardScatterCorrectionImageFilterIF3_GetScatterToPrimaryRatio)
    SetScatterToPrimaryRatio = _swig_new_instance_method(_rtkBoellaardScatterCorrectionImageFilterPython.rtkBoellaardScatterCorrectionImageFilterIF3_SetScatterToPrimaryRatio)
    GetNonNegativityConstraintThreshold = _swig_new_instance_method(_rtkBoellaardScatterCorrectionImageFilterPython.rtkBoellaardScatterCorrectionImageFilterIF3_GetNonNegativityConstraintThreshold)
    SetNonNegativityConstraintThreshold = _swig_new_instance_method(_rtkBoellaardScatterCorrectionImageFilterPython.rtkBoellaardScatterCorrectionImageFilterIF3_SetNonNegativityConstraintThreshold)
    __swig_destroy__ = _rtkBoellaardScatterCorrectionImageFilterPython.delete_rtkBoellaardScatterCorrectionImageFilterIF3
    cast = _swig_new_static_method(_rtkBoellaardScatterCorrectionImageFilterPython.rtkBoellaardScatterCorrectionImageFilterIF3_cast)

    def New(*args, **kargs):
        """New() -> rtkBoellaardScatterCorrectionImageFilterIF3

        Create a new object of the class rtkBoellaardScatterCorrectionImageFilterIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkBoellaardScatterCorrectionImageFilterIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkBoellaardScatterCorrectionImageFilterIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkBoellaardScatterCorrectionImageFilterIF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkBoellaardScatterCorrectionImageFilterIF3 in _rtkBoellaardScatterCorrectionImageFilterPython:
_rtkBoellaardScatterCorrectionImageFilterPython.rtkBoellaardScatterCorrectionImageFilterIF3_swigregister(rtkBoellaardScatterCorrectionImageFilterIF3)
rtkBoellaardScatterCorrectionImageFilterIF3___New_orig__ = _rtkBoellaardScatterCorrectionImageFilterPython.rtkBoellaardScatterCorrectionImageFilterIF3___New_orig__
rtkBoellaardScatterCorrectionImageFilterIF3_cast = _rtkBoellaardScatterCorrectionImageFilterPython.rtkBoellaardScatterCorrectionImageFilterIF3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def boellaard_scatter_correction_image_filter(*args, **kwargs):
    """Procedural interface for BoellaardScatterCorrectionImageFilter"""
    import itk
    instance = itk.BoellaardScatterCorrectionImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def boellaard_scatter_correction_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.BoellaardScatterCorrectionImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.BoellaardScatterCorrectionImageFilter.values()[0]
    else:
        filter_object = itk.BoellaardScatterCorrectionImageFilter

    boellaard_scatter_correction_image_filter.__doc__ = filter_object.__doc__
    boellaard_scatter_correction_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    boellaard_scatter_correction_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.BoellaardScatterCorrectionImageFilter, itkTemplate.itkTemplate):
        boellaard_scatter_correction_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        boellaard_scatter_correction_image_filter.__doc__ += "\n"
        boellaard_scatter_correction_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        boellaard_scatter_correction_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



