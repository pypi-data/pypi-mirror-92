# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _RTKPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _rtkTotalVariationImageFilterPython
else:
    import _rtkTotalVariationImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _rtkTotalVariationImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _rtkTotalVariationImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkImageRegionPython
import itk.itkSizePython
import itk.pyBasePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.ITKCommonBasePython
import itk.itkImageToImageFilterAPython
import itk.itkImagePython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.itkFixedArrayPython
import itk.itkCovariantVectorPython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkRGBPixelPython
import itk.itkImageSourcePython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterCommonPython
import itk.itkSimpleDataObjectDecoratorPython
import itk.itkArrayPython

def rtkTotalVariationImageFilterID2_New():
    return rtkTotalVariationImageFilterID2.New()

class rtkTotalVariationImageFilterID2(itk.itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    r"""Proxy of C++ rtkTotalVariationImageFilterID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterID2___New_orig__)
    Clone = _swig_new_instance_method(_rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterID2_Clone)
    GetTotalVariation = _swig_new_instance_method(_rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterID2_GetTotalVariation)
    GetTotalVariationOutput = _swig_new_instance_method(_rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterID2_GetTotalVariationOutput)
    InputHasNumericTraitsCheck = _rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterID2_InputHasNumericTraitsCheck
    
    SetUseImageSpacingOn = _swig_new_instance_method(_rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterID2_SetUseImageSpacingOn)
    SetUseImageSpacingOff = _swig_new_instance_method(_rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterID2_SetUseImageSpacingOff)
    SetUseImageSpacing = _swig_new_instance_method(_rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterID2_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterID2_GetUseImageSpacing)
    __swig_destroy__ = _rtkTotalVariationImageFilterPython.delete_rtkTotalVariationImageFilterID2
    cast = _swig_new_static_method(_rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterID2_cast)

    def New(*args, **kargs):
        """New() -> rtkTotalVariationImageFilterID2

        Create a new object of the class rtkTotalVariationImageFilterID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkTotalVariationImageFilterID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkTotalVariationImageFilterID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkTotalVariationImageFilterID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkTotalVariationImageFilterID2 in _rtkTotalVariationImageFilterPython:
_rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterID2_swigregister(rtkTotalVariationImageFilterID2)
rtkTotalVariationImageFilterID2___New_orig__ = _rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterID2___New_orig__
rtkTotalVariationImageFilterID2_cast = _rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterID2_cast


def rtkTotalVariationImageFilterID3_New():
    return rtkTotalVariationImageFilterID3.New()

class rtkTotalVariationImageFilterID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    r"""Proxy of C++ rtkTotalVariationImageFilterID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterID3___New_orig__)
    Clone = _swig_new_instance_method(_rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterID3_Clone)
    GetTotalVariation = _swig_new_instance_method(_rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterID3_GetTotalVariation)
    GetTotalVariationOutput = _swig_new_instance_method(_rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterID3_GetTotalVariationOutput)
    InputHasNumericTraitsCheck = _rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterID3_InputHasNumericTraitsCheck
    
    SetUseImageSpacingOn = _swig_new_instance_method(_rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterID3_SetUseImageSpacingOn)
    SetUseImageSpacingOff = _swig_new_instance_method(_rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterID3_SetUseImageSpacingOff)
    SetUseImageSpacing = _swig_new_instance_method(_rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterID3_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterID3_GetUseImageSpacing)
    __swig_destroy__ = _rtkTotalVariationImageFilterPython.delete_rtkTotalVariationImageFilterID3
    cast = _swig_new_static_method(_rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterID3_cast)

    def New(*args, **kargs):
        """New() -> rtkTotalVariationImageFilterID3

        Create a new object of the class rtkTotalVariationImageFilterID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkTotalVariationImageFilterID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkTotalVariationImageFilterID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkTotalVariationImageFilterID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkTotalVariationImageFilterID3 in _rtkTotalVariationImageFilterPython:
_rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterID3_swigregister(rtkTotalVariationImageFilterID3)
rtkTotalVariationImageFilterID3___New_orig__ = _rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterID3___New_orig__
rtkTotalVariationImageFilterID3_cast = _rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterID3_cast


def rtkTotalVariationImageFilterIF2_New():
    return rtkTotalVariationImageFilterIF2.New()

class rtkTotalVariationImageFilterIF2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    r"""Proxy of C++ rtkTotalVariationImageFilterIF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterIF2___New_orig__)
    Clone = _swig_new_instance_method(_rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterIF2_Clone)
    GetTotalVariation = _swig_new_instance_method(_rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterIF2_GetTotalVariation)
    GetTotalVariationOutput = _swig_new_instance_method(_rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterIF2_GetTotalVariationOutput)
    InputHasNumericTraitsCheck = _rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterIF2_InputHasNumericTraitsCheck
    
    SetUseImageSpacingOn = _swig_new_instance_method(_rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterIF2_SetUseImageSpacingOn)
    SetUseImageSpacingOff = _swig_new_instance_method(_rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterIF2_SetUseImageSpacingOff)
    SetUseImageSpacing = _swig_new_instance_method(_rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterIF2_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterIF2_GetUseImageSpacing)
    __swig_destroy__ = _rtkTotalVariationImageFilterPython.delete_rtkTotalVariationImageFilterIF2
    cast = _swig_new_static_method(_rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterIF2_cast)

    def New(*args, **kargs):
        """New() -> rtkTotalVariationImageFilterIF2

        Create a new object of the class rtkTotalVariationImageFilterIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkTotalVariationImageFilterIF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkTotalVariationImageFilterIF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkTotalVariationImageFilterIF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkTotalVariationImageFilterIF2 in _rtkTotalVariationImageFilterPython:
_rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterIF2_swigregister(rtkTotalVariationImageFilterIF2)
rtkTotalVariationImageFilterIF2___New_orig__ = _rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterIF2___New_orig__
rtkTotalVariationImageFilterIF2_cast = _rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterIF2_cast


def rtkTotalVariationImageFilterIF3_New():
    return rtkTotalVariationImageFilterIF3.New()

class rtkTotalVariationImageFilterIF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    r"""Proxy of C++ rtkTotalVariationImageFilterIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterIF3___New_orig__)
    Clone = _swig_new_instance_method(_rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterIF3_Clone)
    GetTotalVariation = _swig_new_instance_method(_rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterIF3_GetTotalVariation)
    GetTotalVariationOutput = _swig_new_instance_method(_rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterIF3_GetTotalVariationOutput)
    InputHasNumericTraitsCheck = _rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterIF3_InputHasNumericTraitsCheck
    
    SetUseImageSpacingOn = _swig_new_instance_method(_rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterIF3_SetUseImageSpacingOn)
    SetUseImageSpacingOff = _swig_new_instance_method(_rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterIF3_SetUseImageSpacingOff)
    SetUseImageSpacing = _swig_new_instance_method(_rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterIF3_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterIF3_GetUseImageSpacing)
    __swig_destroy__ = _rtkTotalVariationImageFilterPython.delete_rtkTotalVariationImageFilterIF3
    cast = _swig_new_static_method(_rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterIF3_cast)

    def New(*args, **kargs):
        """New() -> rtkTotalVariationImageFilterIF3

        Create a new object of the class rtkTotalVariationImageFilterIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkTotalVariationImageFilterIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkTotalVariationImageFilterIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkTotalVariationImageFilterIF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkTotalVariationImageFilterIF3 in _rtkTotalVariationImageFilterPython:
_rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterIF3_swigregister(rtkTotalVariationImageFilterIF3)
rtkTotalVariationImageFilterIF3___New_orig__ = _rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterIF3___New_orig__
rtkTotalVariationImageFilterIF3_cast = _rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterIF3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def total_variation_image_filter(*args, **kwargs):
    """Procedural interface for TotalVariationImageFilter"""
    import itk
    instance = itk.TotalVariationImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def total_variation_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.TotalVariationImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.TotalVariationImageFilter.values()[0]
    else:
        filter_object = itk.TotalVariationImageFilter

    total_variation_image_filter.__doc__ = filter_object.__doc__
    total_variation_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    total_variation_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.TotalVariationImageFilter, itkTemplate.itkTemplate):
        total_variation_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        total_variation_image_filter.__doc__ += "\n"
        total_variation_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        total_variation_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



