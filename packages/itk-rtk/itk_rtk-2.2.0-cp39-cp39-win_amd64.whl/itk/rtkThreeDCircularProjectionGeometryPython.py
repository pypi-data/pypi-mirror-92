# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _RTKPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _rtkThreeDCircularProjectionGeometryPython
else:
    import _rtkThreeDCircularProjectionGeometryPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _rtkThreeDCircularProjectionGeometryPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _rtkThreeDCircularProjectionGeometryPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkVectorPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_matrixPython
import itk.itkFixedArrayPython
import itk.vnl_vector_refPython
import itk.itkPointPython
import itk.rtkProjectionGeometryPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.ITKCommonBasePython

def rtkThreeDCircularProjectionGeometry_New():
    return rtkThreeDCircularProjectionGeometry.New()

class rtkThreeDCircularProjectionGeometry(itk.rtkProjectionGeometryPython.rtkProjectionGeometry3):
    r"""Proxy of C++ rtkThreeDCircularProjectionGeometry class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_rtkThreeDCircularProjectionGeometryPython.rtkThreeDCircularProjectionGeometry___New_orig__)
    Clone = _swig_new_instance_method(_rtkThreeDCircularProjectionGeometryPython.rtkThreeDCircularProjectionGeometry_Clone)
    AddProjectionInRadians = _swig_new_instance_method(_rtkThreeDCircularProjectionGeometryPython.rtkThreeDCircularProjectionGeometry_AddProjectionInRadians)
    AddProjection = _swig_new_instance_method(_rtkThreeDCircularProjectionGeometryPython.rtkThreeDCircularProjectionGeometry_AddProjection)
    GetGantryAngles = _swig_new_instance_method(_rtkThreeDCircularProjectionGeometryPython.rtkThreeDCircularProjectionGeometry_GetGantryAngles)
    GetOutOfPlaneAngles = _swig_new_instance_method(_rtkThreeDCircularProjectionGeometryPython.rtkThreeDCircularProjectionGeometry_GetOutOfPlaneAngles)
    GetInPlaneAngles = _swig_new_instance_method(_rtkThreeDCircularProjectionGeometryPython.rtkThreeDCircularProjectionGeometry_GetInPlaneAngles)
    GetSourceToIsocenterDistances = _swig_new_instance_method(_rtkThreeDCircularProjectionGeometryPython.rtkThreeDCircularProjectionGeometry_GetSourceToIsocenterDistances)
    GetSourceOffsetsX = _swig_new_instance_method(_rtkThreeDCircularProjectionGeometryPython.rtkThreeDCircularProjectionGeometry_GetSourceOffsetsX)
    GetSourceOffsetsY = _swig_new_instance_method(_rtkThreeDCircularProjectionGeometryPython.rtkThreeDCircularProjectionGeometry_GetSourceOffsetsY)
    GetSourceToDetectorDistances = _swig_new_instance_method(_rtkThreeDCircularProjectionGeometryPython.rtkThreeDCircularProjectionGeometry_GetSourceToDetectorDistances)
    GetProjectionOffsetsX = _swig_new_instance_method(_rtkThreeDCircularProjectionGeometryPython.rtkThreeDCircularProjectionGeometry_GetProjectionOffsetsX)
    GetProjectionOffsetsY = _swig_new_instance_method(_rtkThreeDCircularProjectionGeometryPython.rtkThreeDCircularProjectionGeometry_GetProjectionOffsetsY)
    GetSourceAngles = _swig_new_instance_method(_rtkThreeDCircularProjectionGeometryPython.rtkThreeDCircularProjectionGeometry_GetSourceAngles)
    GetTiltAngles = _swig_new_instance_method(_rtkThreeDCircularProjectionGeometryPython.rtkThreeDCircularProjectionGeometry_GetTiltAngles)
    GetSortedAngles = _swig_new_instance_method(_rtkThreeDCircularProjectionGeometryPython.rtkThreeDCircularProjectionGeometry_GetSortedAngles)
    GetUniqueSortedAngles = _swig_new_instance_method(_rtkThreeDCircularProjectionGeometryPython.rtkThreeDCircularProjectionGeometry_GetUniqueSortedAngles)
    GetAngularGapsWithNext = _swig_new_instance_method(_rtkThreeDCircularProjectionGeometryPython.rtkThreeDCircularProjectionGeometry_GetAngularGapsWithNext)
    GetAngularGaps = _swig_new_instance_method(_rtkThreeDCircularProjectionGeometryPython.rtkThreeDCircularProjectionGeometry_GetAngularGaps)
    ComputeRotationHomogeneousMatrix = _swig_new_static_method(_rtkThreeDCircularProjectionGeometryPython.rtkThreeDCircularProjectionGeometry_ComputeRotationHomogeneousMatrix)
    ComputeTranslationHomogeneousMatrix = _swig_new_static_method(_rtkThreeDCircularProjectionGeometryPython.rtkThreeDCircularProjectionGeometry_ComputeTranslationHomogeneousMatrix)
    ComputeProjectionMagnificationMatrix = _swig_new_static_method(_rtkThreeDCircularProjectionGeometryPython.rtkThreeDCircularProjectionGeometry_ComputeProjectionMagnificationMatrix)
    GetProjectionTranslationMatrices = _swig_new_instance_method(_rtkThreeDCircularProjectionGeometryPython.rtkThreeDCircularProjectionGeometry_GetProjectionTranslationMatrices)
    GetProjectionTranslationMatrix = _swig_new_instance_method(_rtkThreeDCircularProjectionGeometryPython.rtkThreeDCircularProjectionGeometry_GetProjectionTranslationMatrix)
    GetRotationMatrices = _swig_new_instance_method(_rtkThreeDCircularProjectionGeometryPython.rtkThreeDCircularProjectionGeometry_GetRotationMatrices)
    GetRotationMatrix = _swig_new_instance_method(_rtkThreeDCircularProjectionGeometryPython.rtkThreeDCircularProjectionGeometry_GetRotationMatrix)
    GetSourceTranslationMatrices = _swig_new_instance_method(_rtkThreeDCircularProjectionGeometryPython.rtkThreeDCircularProjectionGeometry_GetSourceTranslationMatrices)
    GetMagnificationMatrices = _swig_new_instance_method(_rtkThreeDCircularProjectionGeometryPython.rtkThreeDCircularProjectionGeometry_GetMagnificationMatrices)
    GetCollimationUInf = _swig_new_instance_method(_rtkThreeDCircularProjectionGeometryPython.rtkThreeDCircularProjectionGeometry_GetCollimationUInf)
    GetCollimationUSup = _swig_new_instance_method(_rtkThreeDCircularProjectionGeometryPython.rtkThreeDCircularProjectionGeometry_GetCollimationUSup)
    GetCollimationVInf = _swig_new_instance_method(_rtkThreeDCircularProjectionGeometryPython.rtkThreeDCircularProjectionGeometry_GetCollimationVInf)
    GetCollimationVSup = _swig_new_instance_method(_rtkThreeDCircularProjectionGeometryPython.rtkThreeDCircularProjectionGeometry_GetCollimationVSup)
    SetCollimationOfLastProjection = _swig_new_instance_method(_rtkThreeDCircularProjectionGeometryPython.rtkThreeDCircularProjectionGeometry_SetCollimationOfLastProjection)
    GetSourcePosition = _swig_new_instance_method(_rtkThreeDCircularProjectionGeometryPython.rtkThreeDCircularProjectionGeometry_GetSourcePosition)
    GetProjectionCoordinatesToDetectorSystemMatrix = _swig_new_instance_method(_rtkThreeDCircularProjectionGeometryPython.rtkThreeDCircularProjectionGeometry_GetProjectionCoordinatesToDetectorSystemMatrix)
    GetProjectionCoordinatesToFixedSystemMatrix = _swig_new_instance_method(_rtkThreeDCircularProjectionGeometryPython.rtkThreeDCircularProjectionGeometry_GetProjectionCoordinatesToFixedSystemMatrix)
    ConvertAngleBetween0And360Degrees = _swig_new_static_method(_rtkThreeDCircularProjectionGeometryPython.rtkThreeDCircularProjectionGeometry_ConvertAngleBetween0And360Degrees)
    ConvertAngleBetween0And2PIRadians = _swig_new_static_method(_rtkThreeDCircularProjectionGeometryPython.rtkThreeDCircularProjectionGeometry_ConvertAngleBetween0And2PIRadians)
    ConvertAngleBetweenMinusAndPlusPIRadians = _swig_new_static_method(_rtkThreeDCircularProjectionGeometryPython.rtkThreeDCircularProjectionGeometry_ConvertAngleBetweenMinusAndPlusPIRadians)
    ToUntiltedCoordinateAtIsocenter = _swig_new_instance_method(_rtkThreeDCircularProjectionGeometryPython.rtkThreeDCircularProjectionGeometry_ToUntiltedCoordinateAtIsocenter)
    GetRadiusCylindricalDetector = _swig_new_instance_method(_rtkThreeDCircularProjectionGeometryPython.rtkThreeDCircularProjectionGeometry_GetRadiusCylindricalDetector)
    SetRadiusCylindricalDetector = _swig_new_instance_method(_rtkThreeDCircularProjectionGeometryPython.rtkThreeDCircularProjectionGeometry_SetRadiusCylindricalDetector)
    __swig_destroy__ = _rtkThreeDCircularProjectionGeometryPython.delete_rtkThreeDCircularProjectionGeometry
    cast = _swig_new_static_method(_rtkThreeDCircularProjectionGeometryPython.rtkThreeDCircularProjectionGeometry_cast)

    def New(*args, **kargs):
        """New() -> rtkThreeDCircularProjectionGeometry

        Create a new object of the class rtkThreeDCircularProjectionGeometry and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkThreeDCircularProjectionGeometry.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkThreeDCircularProjectionGeometry.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkThreeDCircularProjectionGeometry.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkThreeDCircularProjectionGeometry in _rtkThreeDCircularProjectionGeometryPython:
_rtkThreeDCircularProjectionGeometryPython.rtkThreeDCircularProjectionGeometry_swigregister(rtkThreeDCircularProjectionGeometry)
rtkThreeDCircularProjectionGeometry___New_orig__ = _rtkThreeDCircularProjectionGeometryPython.rtkThreeDCircularProjectionGeometry___New_orig__
rtkThreeDCircularProjectionGeometry_ComputeRotationHomogeneousMatrix = _rtkThreeDCircularProjectionGeometryPython.rtkThreeDCircularProjectionGeometry_ComputeRotationHomogeneousMatrix
rtkThreeDCircularProjectionGeometry_ComputeTranslationHomogeneousMatrix = _rtkThreeDCircularProjectionGeometryPython.rtkThreeDCircularProjectionGeometry_ComputeTranslationHomogeneousMatrix
rtkThreeDCircularProjectionGeometry_ComputeProjectionMagnificationMatrix = _rtkThreeDCircularProjectionGeometryPython.rtkThreeDCircularProjectionGeometry_ComputeProjectionMagnificationMatrix
rtkThreeDCircularProjectionGeometry_ConvertAngleBetween0And360Degrees = _rtkThreeDCircularProjectionGeometryPython.rtkThreeDCircularProjectionGeometry_ConvertAngleBetween0And360Degrees
rtkThreeDCircularProjectionGeometry_ConvertAngleBetween0And2PIRadians = _rtkThreeDCircularProjectionGeometryPython.rtkThreeDCircularProjectionGeometry_ConvertAngleBetween0And2PIRadians
rtkThreeDCircularProjectionGeometry_ConvertAngleBetweenMinusAndPlusPIRadians = _rtkThreeDCircularProjectionGeometryPython.rtkThreeDCircularProjectionGeometry_ConvertAngleBetweenMinusAndPlusPIRadians
rtkThreeDCircularProjectionGeometry_cast = _rtkThreeDCircularProjectionGeometryPython.rtkThreeDCircularProjectionGeometry_cast



