# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _RTKPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _rtkScatterGlareCorrectionImageFilterPython
else:
    import _rtkScatterGlareCorrectionImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _rtkScatterGlareCorrectionImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _rtkScatterGlareCorrectionImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkSizePython
import itk.pyBasePython
import itk.ITKCommonBasePython
import itk.rtkFFTProjectionsConvolutionImageFilterPython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkFixedArrayPython
import itk.itkPointPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.vnl_matrixPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkRGBPixelPython
import itk.itkVectorRTKPython
import itk.itkFixedArrayRTKPython
import itk.itkImageToImageFilterAPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterCommonPython

def rtkScatterGlareCorrectionImageFilterID3ID3F_New():
    return rtkScatterGlareCorrectionImageFilterID3ID3F.New()

class rtkScatterGlareCorrectionImageFilterID3ID3F(itk.rtkFFTProjectionsConvolutionImageFilterPython.rtkFFTProjectionsConvolutionImageFilterID3ID3F):
    r"""Proxy of C++ rtkScatterGlareCorrectionImageFilterID3ID3F class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_rtkScatterGlareCorrectionImageFilterPython.rtkScatterGlareCorrectionImageFilterID3ID3F___New_orig__)
    Clone = _swig_new_instance_method(_rtkScatterGlareCorrectionImageFilterPython.rtkScatterGlareCorrectionImageFilterID3ID3F_Clone)
    GetCoefficients = _swig_new_instance_method(_rtkScatterGlareCorrectionImageFilterPython.rtkScatterGlareCorrectionImageFilterID3ID3F_GetCoefficients)
    SetCoefficients = _swig_new_instance_method(_rtkScatterGlareCorrectionImageFilterPython.rtkScatterGlareCorrectionImageFilterID3ID3F_SetCoefficients)
    __swig_destroy__ = _rtkScatterGlareCorrectionImageFilterPython.delete_rtkScatterGlareCorrectionImageFilterID3ID3F
    cast = _swig_new_static_method(_rtkScatterGlareCorrectionImageFilterPython.rtkScatterGlareCorrectionImageFilterID3ID3F_cast)

    def New(*args, **kargs):
        """New() -> rtkScatterGlareCorrectionImageFilterID3ID3F

        Create a new object of the class rtkScatterGlareCorrectionImageFilterID3ID3F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkScatterGlareCorrectionImageFilterID3ID3F.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkScatterGlareCorrectionImageFilterID3ID3F.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkScatterGlareCorrectionImageFilterID3ID3F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkScatterGlareCorrectionImageFilterID3ID3F in _rtkScatterGlareCorrectionImageFilterPython:
_rtkScatterGlareCorrectionImageFilterPython.rtkScatterGlareCorrectionImageFilterID3ID3F_swigregister(rtkScatterGlareCorrectionImageFilterID3ID3F)
rtkScatterGlareCorrectionImageFilterID3ID3F___New_orig__ = _rtkScatterGlareCorrectionImageFilterPython.rtkScatterGlareCorrectionImageFilterID3ID3F___New_orig__
rtkScatterGlareCorrectionImageFilterID3ID3F_cast = _rtkScatterGlareCorrectionImageFilterPython.rtkScatterGlareCorrectionImageFilterID3ID3F_cast


def rtkScatterGlareCorrectionImageFilterIF3IF3F_New():
    return rtkScatterGlareCorrectionImageFilterIF3IF3F.New()

class rtkScatterGlareCorrectionImageFilterIF3IF3F(itk.rtkFFTProjectionsConvolutionImageFilterPython.rtkFFTProjectionsConvolutionImageFilterIF3IF3F):
    r"""Proxy of C++ rtkScatterGlareCorrectionImageFilterIF3IF3F class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_rtkScatterGlareCorrectionImageFilterPython.rtkScatterGlareCorrectionImageFilterIF3IF3F___New_orig__)
    Clone = _swig_new_instance_method(_rtkScatterGlareCorrectionImageFilterPython.rtkScatterGlareCorrectionImageFilterIF3IF3F_Clone)
    GetCoefficients = _swig_new_instance_method(_rtkScatterGlareCorrectionImageFilterPython.rtkScatterGlareCorrectionImageFilterIF3IF3F_GetCoefficients)
    SetCoefficients = _swig_new_instance_method(_rtkScatterGlareCorrectionImageFilterPython.rtkScatterGlareCorrectionImageFilterIF3IF3F_SetCoefficients)
    __swig_destroy__ = _rtkScatterGlareCorrectionImageFilterPython.delete_rtkScatterGlareCorrectionImageFilterIF3IF3F
    cast = _swig_new_static_method(_rtkScatterGlareCorrectionImageFilterPython.rtkScatterGlareCorrectionImageFilterIF3IF3F_cast)

    def New(*args, **kargs):
        """New() -> rtkScatterGlareCorrectionImageFilterIF3IF3F

        Create a new object of the class rtkScatterGlareCorrectionImageFilterIF3IF3F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkScatterGlareCorrectionImageFilterIF3IF3F.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkScatterGlareCorrectionImageFilterIF3IF3F.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkScatterGlareCorrectionImageFilterIF3IF3F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkScatterGlareCorrectionImageFilterIF3IF3F in _rtkScatterGlareCorrectionImageFilterPython:
_rtkScatterGlareCorrectionImageFilterPython.rtkScatterGlareCorrectionImageFilterIF3IF3F_swigregister(rtkScatterGlareCorrectionImageFilterIF3IF3F)
rtkScatterGlareCorrectionImageFilterIF3IF3F___New_orig__ = _rtkScatterGlareCorrectionImageFilterPython.rtkScatterGlareCorrectionImageFilterIF3IF3F___New_orig__
rtkScatterGlareCorrectionImageFilterIF3IF3F_cast = _rtkScatterGlareCorrectionImageFilterPython.rtkScatterGlareCorrectionImageFilterIF3IF3F_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def scatter_glare_correction_image_filter(*args, **kwargs):
    """Procedural interface for ScatterGlareCorrectionImageFilter"""
    import itk
    instance = itk.ScatterGlareCorrectionImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def scatter_glare_correction_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.ScatterGlareCorrectionImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.ScatterGlareCorrectionImageFilter.values()[0]
    else:
        filter_object = itk.ScatterGlareCorrectionImageFilter

    scatter_glare_correction_image_filter.__doc__ = filter_object.__doc__
    scatter_glare_correction_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    scatter_glare_correction_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.ScatterGlareCorrectionImageFilter, itkTemplate.itkTemplate):
        scatter_glare_correction_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        scatter_glare_correction_image_filter.__doc__ += "\n"
        scatter_glare_correction_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        scatter_glare_correction_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



