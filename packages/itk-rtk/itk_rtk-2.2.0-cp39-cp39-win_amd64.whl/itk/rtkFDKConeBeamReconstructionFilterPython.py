# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _RTKPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _rtkFDKConeBeamReconstructionFilterPython
else:
    import _rtkFDKConeBeamReconstructionFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _rtkFDKConeBeamReconstructionFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _rtkFDKConeBeamReconstructionFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.rtkFDKBackProjectionImageFilterPython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.itkPointPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.vnl_matrixPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkSymmetricSecondRankTensorPython
import itk.ITKCommonBasePython
import itk.itkImageRegionPython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkRGBPixelPython
import itk.rtkBackProjectionImageFilterPython
import itk.rtkThreeDCircularProjectionGeometryPython
import itk.rtkProjectionGeometryPython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterBPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageToImageFilterAPython
import itk.rtkFFTRampImageFilterPython
import itk.rtkFFTProjectionsConvolutionImageFilterPython
import itk.itkVectorRTKPython
import itk.itkFixedArrayRTKPython
import itk.rtkFDKWeightProjectionFilterPython

def rtkFDKConeBeamReconstructionFilterID3_New():
    return rtkFDKConeBeamReconstructionFilterID3.New()

class rtkFDKConeBeamReconstructionFilterID3(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3ID3):
    r"""Proxy of C++ rtkFDKConeBeamReconstructionFilterID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_rtkFDKConeBeamReconstructionFilterPython.rtkFDKConeBeamReconstructionFilterID3___New_orig__)
    Clone = _swig_new_instance_method(_rtkFDKConeBeamReconstructionFilterPython.rtkFDKConeBeamReconstructionFilterID3_Clone)
    GetModifiableGeometry = _swig_new_instance_method(_rtkFDKConeBeamReconstructionFilterPython.rtkFDKConeBeamReconstructionFilterID3_GetModifiableGeometry)
    GetGeometry = _swig_new_instance_method(_rtkFDKConeBeamReconstructionFilterPython.rtkFDKConeBeamReconstructionFilterID3_GetGeometry)
    SetGeometry = _swig_new_instance_method(_rtkFDKConeBeamReconstructionFilterPython.rtkFDKConeBeamReconstructionFilterID3_SetGeometry)
    GetWeightFilter = _swig_new_instance_method(_rtkFDKConeBeamReconstructionFilterPython.rtkFDKConeBeamReconstructionFilterID3_GetWeightFilter)
    GetRampFilter = _swig_new_instance_method(_rtkFDKConeBeamReconstructionFilterPython.rtkFDKConeBeamReconstructionFilterID3_GetRampFilter)
    GetProjectionSubsetSize = _swig_new_instance_method(_rtkFDKConeBeamReconstructionFilterPython.rtkFDKConeBeamReconstructionFilterID3_GetProjectionSubsetSize)
    SetProjectionSubsetSize = _swig_new_instance_method(_rtkFDKConeBeamReconstructionFilterPython.rtkFDKConeBeamReconstructionFilterID3_SetProjectionSubsetSize)
    GetBackProjectionFilter = _swig_new_instance_method(_rtkFDKConeBeamReconstructionFilterPython.rtkFDKConeBeamReconstructionFilterID3_GetBackProjectionFilter)
    SetBackProjectionFilter = _swig_new_instance_method(_rtkFDKConeBeamReconstructionFilterPython.rtkFDKConeBeamReconstructionFilterID3_SetBackProjectionFilter)
    __swig_destroy__ = _rtkFDKConeBeamReconstructionFilterPython.delete_rtkFDKConeBeamReconstructionFilterID3
    cast = _swig_new_static_method(_rtkFDKConeBeamReconstructionFilterPython.rtkFDKConeBeamReconstructionFilterID3_cast)

    def New(*args, **kargs):
        """New() -> rtkFDKConeBeamReconstructionFilterID3

        Create a new object of the class rtkFDKConeBeamReconstructionFilterID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkFDKConeBeamReconstructionFilterID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkFDKConeBeamReconstructionFilterID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkFDKConeBeamReconstructionFilterID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkFDKConeBeamReconstructionFilterID3 in _rtkFDKConeBeamReconstructionFilterPython:
_rtkFDKConeBeamReconstructionFilterPython.rtkFDKConeBeamReconstructionFilterID3_swigregister(rtkFDKConeBeamReconstructionFilterID3)
rtkFDKConeBeamReconstructionFilterID3___New_orig__ = _rtkFDKConeBeamReconstructionFilterPython.rtkFDKConeBeamReconstructionFilterID3___New_orig__
rtkFDKConeBeamReconstructionFilterID3_cast = _rtkFDKConeBeamReconstructionFilterPython.rtkFDKConeBeamReconstructionFilterID3_cast


def rtkFDKConeBeamReconstructionFilterIF3_New():
    return rtkFDKConeBeamReconstructionFilterIF3.New()

class rtkFDKConeBeamReconstructionFilterIF3(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IF3):
    r"""Proxy of C++ rtkFDKConeBeamReconstructionFilterIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_rtkFDKConeBeamReconstructionFilterPython.rtkFDKConeBeamReconstructionFilterIF3___New_orig__)
    Clone = _swig_new_instance_method(_rtkFDKConeBeamReconstructionFilterPython.rtkFDKConeBeamReconstructionFilterIF3_Clone)
    GetModifiableGeometry = _swig_new_instance_method(_rtkFDKConeBeamReconstructionFilterPython.rtkFDKConeBeamReconstructionFilterIF3_GetModifiableGeometry)
    GetGeometry = _swig_new_instance_method(_rtkFDKConeBeamReconstructionFilterPython.rtkFDKConeBeamReconstructionFilterIF3_GetGeometry)
    SetGeometry = _swig_new_instance_method(_rtkFDKConeBeamReconstructionFilterPython.rtkFDKConeBeamReconstructionFilterIF3_SetGeometry)
    GetWeightFilter = _swig_new_instance_method(_rtkFDKConeBeamReconstructionFilterPython.rtkFDKConeBeamReconstructionFilterIF3_GetWeightFilter)
    GetRampFilter = _swig_new_instance_method(_rtkFDKConeBeamReconstructionFilterPython.rtkFDKConeBeamReconstructionFilterIF3_GetRampFilter)
    GetProjectionSubsetSize = _swig_new_instance_method(_rtkFDKConeBeamReconstructionFilterPython.rtkFDKConeBeamReconstructionFilterIF3_GetProjectionSubsetSize)
    SetProjectionSubsetSize = _swig_new_instance_method(_rtkFDKConeBeamReconstructionFilterPython.rtkFDKConeBeamReconstructionFilterIF3_SetProjectionSubsetSize)
    GetBackProjectionFilter = _swig_new_instance_method(_rtkFDKConeBeamReconstructionFilterPython.rtkFDKConeBeamReconstructionFilterIF3_GetBackProjectionFilter)
    SetBackProjectionFilter = _swig_new_instance_method(_rtkFDKConeBeamReconstructionFilterPython.rtkFDKConeBeamReconstructionFilterIF3_SetBackProjectionFilter)
    __swig_destroy__ = _rtkFDKConeBeamReconstructionFilterPython.delete_rtkFDKConeBeamReconstructionFilterIF3
    cast = _swig_new_static_method(_rtkFDKConeBeamReconstructionFilterPython.rtkFDKConeBeamReconstructionFilterIF3_cast)

    def New(*args, **kargs):
        """New() -> rtkFDKConeBeamReconstructionFilterIF3

        Create a new object of the class rtkFDKConeBeamReconstructionFilterIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkFDKConeBeamReconstructionFilterIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkFDKConeBeamReconstructionFilterIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkFDKConeBeamReconstructionFilterIF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkFDKConeBeamReconstructionFilterIF3 in _rtkFDKConeBeamReconstructionFilterPython:
_rtkFDKConeBeamReconstructionFilterPython.rtkFDKConeBeamReconstructionFilterIF3_swigregister(rtkFDKConeBeamReconstructionFilterIF3)
rtkFDKConeBeamReconstructionFilterIF3___New_orig__ = _rtkFDKConeBeamReconstructionFilterPython.rtkFDKConeBeamReconstructionFilterIF3___New_orig__
rtkFDKConeBeamReconstructionFilterIF3_cast = _rtkFDKConeBeamReconstructionFilterPython.rtkFDKConeBeamReconstructionFilterIF3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def fdk_cone_beam_reconstruction_filter(*args, **kwargs):
    """Procedural interface for FDKConeBeamReconstructionFilter"""
    import itk
    instance = itk.FDKConeBeamReconstructionFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def fdk_cone_beam_reconstruction_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.FDKConeBeamReconstructionFilter, itkTemplate.itkTemplate):
        filter_object = itk.FDKConeBeamReconstructionFilter.values()[0]
    else:
        filter_object = itk.FDKConeBeamReconstructionFilter

    fdk_cone_beam_reconstruction_filter.__doc__ = filter_object.__doc__
    fdk_cone_beam_reconstruction_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    fdk_cone_beam_reconstruction_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.FDKConeBeamReconstructionFilter, itkTemplate.itkTemplate):
        fdk_cone_beam_reconstruction_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        fdk_cone_beam_reconstruction_filter.__doc__ += "\n"
        fdk_cone_beam_reconstruction_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        fdk_cone_beam_reconstruction_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



