# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _RTKPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _rtkFFTProjectionsConvolutionImageFilterPython
else:
    import _rtkFFTProjectionsConvolutionImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _rtkFFTProjectionsConvolutionImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _rtkFFTProjectionsConvolutionImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.itkPointPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.vnl_matrixPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkSymmetricSecondRankTensorPython
import itk.ITKCommonBasePython
import itk.itkImageRegionPython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkRGBPixelPython
import itk.itkVectorRTKPython
import itk.itkFixedArrayRTKPython
import itk.itkImageToImageFilterAPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterCommonPython
class rtkFFTProjectionsConvolutionImageFilterID3ID3D(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    r"""Proxy of C++ rtkFFTProjectionsConvolutionImageFilterID3ID3D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    GetGreatestPrimeFactor = _swig_new_instance_method(_rtkFFTProjectionsConvolutionImageFilterPython.rtkFFTProjectionsConvolutionImageFilterID3ID3D_GetGreatestPrimeFactor)
    SetGreatestPrimeFactor = _swig_new_instance_method(_rtkFFTProjectionsConvolutionImageFilterPython.rtkFFTProjectionsConvolutionImageFilterID3ID3D_SetGreatestPrimeFactor)
    GetTruncationCorrection = _swig_new_instance_method(_rtkFFTProjectionsConvolutionImageFilterPython.rtkFFTProjectionsConvolutionImageFilterID3ID3D_GetTruncationCorrection)
    SetTruncationCorrection = _swig_new_instance_method(_rtkFFTProjectionsConvolutionImageFilterPython.rtkFFTProjectionsConvolutionImageFilterID3ID3D_SetTruncationCorrection)
    GetZeroPadFactors = _swig_new_instance_method(_rtkFFTProjectionsConvolutionImageFilterPython.rtkFFTProjectionsConvolutionImageFilterID3ID3D_GetZeroPadFactors)
    SetZeroPadFactors = _swig_new_instance_method(_rtkFFTProjectionsConvolutionImageFilterPython.rtkFFTProjectionsConvolutionImageFilterID3ID3D_SetZeroPadFactors)
    ImageDimensionCheck = _rtkFFTProjectionsConvolutionImageFilterPython.rtkFFTProjectionsConvolutionImageFilterID3ID3D_ImageDimensionCheck
    
    __swig_destroy__ = _rtkFFTProjectionsConvolutionImageFilterPython.delete_rtkFFTProjectionsConvolutionImageFilterID3ID3D
    cast = _swig_new_static_method(_rtkFFTProjectionsConvolutionImageFilterPython.rtkFFTProjectionsConvolutionImageFilterID3ID3D_cast)

# Register rtkFFTProjectionsConvolutionImageFilterID3ID3D in _rtkFFTProjectionsConvolutionImageFilterPython:
_rtkFFTProjectionsConvolutionImageFilterPython.rtkFFTProjectionsConvolutionImageFilterID3ID3D_swigregister(rtkFFTProjectionsConvolutionImageFilterID3ID3D)
rtkFFTProjectionsConvolutionImageFilterID3ID3D_cast = _rtkFFTProjectionsConvolutionImageFilterPython.rtkFFTProjectionsConvolutionImageFilterID3ID3D_cast

class rtkFFTProjectionsConvolutionImageFilterID3ID3F(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    r"""Proxy of C++ rtkFFTProjectionsConvolutionImageFilterID3ID3F class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    GetGreatestPrimeFactor = _swig_new_instance_method(_rtkFFTProjectionsConvolutionImageFilterPython.rtkFFTProjectionsConvolutionImageFilterID3ID3F_GetGreatestPrimeFactor)
    SetGreatestPrimeFactor = _swig_new_instance_method(_rtkFFTProjectionsConvolutionImageFilterPython.rtkFFTProjectionsConvolutionImageFilterID3ID3F_SetGreatestPrimeFactor)
    GetTruncationCorrection = _swig_new_instance_method(_rtkFFTProjectionsConvolutionImageFilterPython.rtkFFTProjectionsConvolutionImageFilterID3ID3F_GetTruncationCorrection)
    SetTruncationCorrection = _swig_new_instance_method(_rtkFFTProjectionsConvolutionImageFilterPython.rtkFFTProjectionsConvolutionImageFilterID3ID3F_SetTruncationCorrection)
    GetZeroPadFactors = _swig_new_instance_method(_rtkFFTProjectionsConvolutionImageFilterPython.rtkFFTProjectionsConvolutionImageFilterID3ID3F_GetZeroPadFactors)
    SetZeroPadFactors = _swig_new_instance_method(_rtkFFTProjectionsConvolutionImageFilterPython.rtkFFTProjectionsConvolutionImageFilterID3ID3F_SetZeroPadFactors)
    ImageDimensionCheck = _rtkFFTProjectionsConvolutionImageFilterPython.rtkFFTProjectionsConvolutionImageFilterID3ID3F_ImageDimensionCheck
    
    __swig_destroy__ = _rtkFFTProjectionsConvolutionImageFilterPython.delete_rtkFFTProjectionsConvolutionImageFilterID3ID3F
    cast = _swig_new_static_method(_rtkFFTProjectionsConvolutionImageFilterPython.rtkFFTProjectionsConvolutionImageFilterID3ID3F_cast)

# Register rtkFFTProjectionsConvolutionImageFilterID3ID3F in _rtkFFTProjectionsConvolutionImageFilterPython:
_rtkFFTProjectionsConvolutionImageFilterPython.rtkFFTProjectionsConvolutionImageFilterID3ID3F_swigregister(rtkFFTProjectionsConvolutionImageFilterID3ID3F)
rtkFFTProjectionsConvolutionImageFilterID3ID3F_cast = _rtkFFTProjectionsConvolutionImageFilterPython.rtkFFTProjectionsConvolutionImageFilterID3ID3F_cast

class rtkFFTProjectionsConvolutionImageFilterIF3IF3D(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    r"""Proxy of C++ rtkFFTProjectionsConvolutionImageFilterIF3IF3D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    GetGreatestPrimeFactor = _swig_new_instance_method(_rtkFFTProjectionsConvolutionImageFilterPython.rtkFFTProjectionsConvolutionImageFilterIF3IF3D_GetGreatestPrimeFactor)
    SetGreatestPrimeFactor = _swig_new_instance_method(_rtkFFTProjectionsConvolutionImageFilterPython.rtkFFTProjectionsConvolutionImageFilterIF3IF3D_SetGreatestPrimeFactor)
    GetTruncationCorrection = _swig_new_instance_method(_rtkFFTProjectionsConvolutionImageFilterPython.rtkFFTProjectionsConvolutionImageFilterIF3IF3D_GetTruncationCorrection)
    SetTruncationCorrection = _swig_new_instance_method(_rtkFFTProjectionsConvolutionImageFilterPython.rtkFFTProjectionsConvolutionImageFilterIF3IF3D_SetTruncationCorrection)
    GetZeroPadFactors = _swig_new_instance_method(_rtkFFTProjectionsConvolutionImageFilterPython.rtkFFTProjectionsConvolutionImageFilterIF3IF3D_GetZeroPadFactors)
    SetZeroPadFactors = _swig_new_instance_method(_rtkFFTProjectionsConvolutionImageFilterPython.rtkFFTProjectionsConvolutionImageFilterIF3IF3D_SetZeroPadFactors)
    ImageDimensionCheck = _rtkFFTProjectionsConvolutionImageFilterPython.rtkFFTProjectionsConvolutionImageFilterIF3IF3D_ImageDimensionCheck
    
    __swig_destroy__ = _rtkFFTProjectionsConvolutionImageFilterPython.delete_rtkFFTProjectionsConvolutionImageFilterIF3IF3D
    cast = _swig_new_static_method(_rtkFFTProjectionsConvolutionImageFilterPython.rtkFFTProjectionsConvolutionImageFilterIF3IF3D_cast)

# Register rtkFFTProjectionsConvolutionImageFilterIF3IF3D in _rtkFFTProjectionsConvolutionImageFilterPython:
_rtkFFTProjectionsConvolutionImageFilterPython.rtkFFTProjectionsConvolutionImageFilterIF3IF3D_swigregister(rtkFFTProjectionsConvolutionImageFilterIF3IF3D)
rtkFFTProjectionsConvolutionImageFilterIF3IF3D_cast = _rtkFFTProjectionsConvolutionImageFilterPython.rtkFFTProjectionsConvolutionImageFilterIF3IF3D_cast

class rtkFFTProjectionsConvolutionImageFilterIF3IF3F(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    r"""Proxy of C++ rtkFFTProjectionsConvolutionImageFilterIF3IF3F class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    GetGreatestPrimeFactor = _swig_new_instance_method(_rtkFFTProjectionsConvolutionImageFilterPython.rtkFFTProjectionsConvolutionImageFilterIF3IF3F_GetGreatestPrimeFactor)
    SetGreatestPrimeFactor = _swig_new_instance_method(_rtkFFTProjectionsConvolutionImageFilterPython.rtkFFTProjectionsConvolutionImageFilterIF3IF3F_SetGreatestPrimeFactor)
    GetTruncationCorrection = _swig_new_instance_method(_rtkFFTProjectionsConvolutionImageFilterPython.rtkFFTProjectionsConvolutionImageFilterIF3IF3F_GetTruncationCorrection)
    SetTruncationCorrection = _swig_new_instance_method(_rtkFFTProjectionsConvolutionImageFilterPython.rtkFFTProjectionsConvolutionImageFilterIF3IF3F_SetTruncationCorrection)
    GetZeroPadFactors = _swig_new_instance_method(_rtkFFTProjectionsConvolutionImageFilterPython.rtkFFTProjectionsConvolutionImageFilterIF3IF3F_GetZeroPadFactors)
    SetZeroPadFactors = _swig_new_instance_method(_rtkFFTProjectionsConvolutionImageFilterPython.rtkFFTProjectionsConvolutionImageFilterIF3IF3F_SetZeroPadFactors)
    ImageDimensionCheck = _rtkFFTProjectionsConvolutionImageFilterPython.rtkFFTProjectionsConvolutionImageFilterIF3IF3F_ImageDimensionCheck
    
    __swig_destroy__ = _rtkFFTProjectionsConvolutionImageFilterPython.delete_rtkFFTProjectionsConvolutionImageFilterIF3IF3F
    cast = _swig_new_static_method(_rtkFFTProjectionsConvolutionImageFilterPython.rtkFFTProjectionsConvolutionImageFilterIF3IF3F_cast)

# Register rtkFFTProjectionsConvolutionImageFilterIF3IF3F in _rtkFFTProjectionsConvolutionImageFilterPython:
_rtkFFTProjectionsConvolutionImageFilterPython.rtkFFTProjectionsConvolutionImageFilterIF3IF3F_swigregister(rtkFFTProjectionsConvolutionImageFilterIF3IF3F)
rtkFFTProjectionsConvolutionImageFilterIF3IF3F_cast = _rtkFFTProjectionsConvolutionImageFilterPython.rtkFFTProjectionsConvolutionImageFilterIF3IF3F_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def fft_projections_convolution_image_filter(*args, **kwargs):
    """Procedural interface for FFTProjectionsConvolutionImageFilter"""
    import itk
    instance = itk.FFTProjectionsConvolutionImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def fft_projections_convolution_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.FFTProjectionsConvolutionImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.FFTProjectionsConvolutionImageFilter.values()[0]
    else:
        filter_object = itk.FFTProjectionsConvolutionImageFilter

    fft_projections_convolution_image_filter.__doc__ = filter_object.__doc__
    fft_projections_convolution_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    fft_projections_convolution_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.FFTProjectionsConvolutionImageFilter, itkTemplate.itkTemplate):
        fft_projections_convolution_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        fft_projections_convolution_image_filter.__doc__ += "\n"
        fft_projections_convolution_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        fft_projections_convolution_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



