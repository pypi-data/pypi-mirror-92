# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _RTKPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _rtkFDKWarpBackProjectionImageFilterPython
else:
    import _rtkFDKWarpBackProjectionImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _rtkFDKWarpBackProjectionImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _rtkFDKWarpBackProjectionImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.rtkCyclicDeformationImageFilterPython
import itk.itkImageToImageFilterRTKPython
import itk.itkVectorImagePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkVariableLengthVectorPython
import itk.stdcomplexPython
import itk.itkImagePython
import itk.itkImageRegionPython
import itk.itkRGBPixelPython
import itk.itkFixedArrayPython
import itk.itkRGBAPixelPython
import itk.itkPointPython
import itk.vnl_vector_refPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkVectorPython
import itk.itkCovariantVectorPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkImageRTKPython
import itk.itkImageBaseRTKPython
import itk.itkPointRTKPython
import itk.itkImageRegionRTKPython
import itk.itkMatrixRTKPython
import itk.itkCovariantVectorRTKPython
import itk.itkImageSourceRTKPython
import itk.itkImageSourceCommonPython
import itk.itkImageSourcePython
import itk.itkImageToImageFilterCommonPython
import itk.rtkFDKBackProjectionImageFilterPython
import itk.rtkBackProjectionImageFilterPython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterBPython
import itk.itkImageToImageFilterAPython
import itk.rtkThreeDCircularProjectionGeometryPython
import itk.rtkProjectionGeometryPython

def rtkFDKWarpBackProjectionImageFilterIF3IF3CDFIF4IF3_New():
    return rtkFDKWarpBackProjectionImageFilterIF3IF3CDFIF4IF3.New()

class rtkFDKWarpBackProjectionImageFilterIF3IF3CDFIF4IF3(itk.rtkFDKBackProjectionImageFilterPython.rtkFDKBackProjectionImageFilterIF3IF3):
    r"""Proxy of C++ rtkFDKWarpBackProjectionImageFilterIF3IF3CDFIF4IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_rtkFDKWarpBackProjectionImageFilterPython.rtkFDKWarpBackProjectionImageFilterIF3IF3CDFIF4IF3___New_orig__)
    Clone = _swig_new_instance_method(_rtkFDKWarpBackProjectionImageFilterPython.rtkFDKWarpBackProjectionImageFilterIF3IF3CDFIF4IF3_Clone)
    GetDeformation = _swig_new_instance_method(_rtkFDKWarpBackProjectionImageFilterPython.rtkFDKWarpBackProjectionImageFilterIF3IF3CDFIF4IF3_GetDeformation)
    SetDeformation = _swig_new_instance_method(_rtkFDKWarpBackProjectionImageFilterPython.rtkFDKWarpBackProjectionImageFilterIF3IF3CDFIF4IF3_SetDeformation)
    __swig_destroy__ = _rtkFDKWarpBackProjectionImageFilterPython.delete_rtkFDKWarpBackProjectionImageFilterIF3IF3CDFIF4IF3
    cast = _swig_new_static_method(_rtkFDKWarpBackProjectionImageFilterPython.rtkFDKWarpBackProjectionImageFilterIF3IF3CDFIF4IF3_cast)

    def New(*args, **kargs):
        """New() -> rtkFDKWarpBackProjectionImageFilterIF3IF3CDFIF4IF3

        Create a new object of the class rtkFDKWarpBackProjectionImageFilterIF3IF3CDFIF4IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkFDKWarpBackProjectionImageFilterIF3IF3CDFIF4IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkFDKWarpBackProjectionImageFilterIF3IF3CDFIF4IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkFDKWarpBackProjectionImageFilterIF3IF3CDFIF4IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkFDKWarpBackProjectionImageFilterIF3IF3CDFIF4IF3 in _rtkFDKWarpBackProjectionImageFilterPython:
_rtkFDKWarpBackProjectionImageFilterPython.rtkFDKWarpBackProjectionImageFilterIF3IF3CDFIF4IF3_swigregister(rtkFDKWarpBackProjectionImageFilterIF3IF3CDFIF4IF3)
rtkFDKWarpBackProjectionImageFilterIF3IF3CDFIF4IF3___New_orig__ = _rtkFDKWarpBackProjectionImageFilterPython.rtkFDKWarpBackProjectionImageFilterIF3IF3CDFIF4IF3___New_orig__
rtkFDKWarpBackProjectionImageFilterIF3IF3CDFIF4IF3_cast = _rtkFDKWarpBackProjectionImageFilterPython.rtkFDKWarpBackProjectionImageFilterIF3IF3CDFIF4IF3_cast


def rtkFDKWarpBackProjectionImageFilterIF3IF3CDFIVF34IVF33_New():
    return rtkFDKWarpBackProjectionImageFilterIF3IF3CDFIVF34IVF33.New()

class rtkFDKWarpBackProjectionImageFilterIF3IF3CDFIVF34IVF33(itk.rtkFDKBackProjectionImageFilterPython.rtkFDKBackProjectionImageFilterIF3IF3):
    r"""Proxy of C++ rtkFDKWarpBackProjectionImageFilterIF3IF3CDFIVF34IVF33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_rtkFDKWarpBackProjectionImageFilterPython.rtkFDKWarpBackProjectionImageFilterIF3IF3CDFIVF34IVF33___New_orig__)
    Clone = _swig_new_instance_method(_rtkFDKWarpBackProjectionImageFilterPython.rtkFDKWarpBackProjectionImageFilterIF3IF3CDFIVF34IVF33_Clone)
    GetDeformation = _swig_new_instance_method(_rtkFDKWarpBackProjectionImageFilterPython.rtkFDKWarpBackProjectionImageFilterIF3IF3CDFIVF34IVF33_GetDeformation)
    SetDeformation = _swig_new_instance_method(_rtkFDKWarpBackProjectionImageFilterPython.rtkFDKWarpBackProjectionImageFilterIF3IF3CDFIVF34IVF33_SetDeformation)
    __swig_destroy__ = _rtkFDKWarpBackProjectionImageFilterPython.delete_rtkFDKWarpBackProjectionImageFilterIF3IF3CDFIVF34IVF33
    cast = _swig_new_static_method(_rtkFDKWarpBackProjectionImageFilterPython.rtkFDKWarpBackProjectionImageFilterIF3IF3CDFIVF34IVF33_cast)

    def New(*args, **kargs):
        """New() -> rtkFDKWarpBackProjectionImageFilterIF3IF3CDFIVF34IVF33

        Create a new object of the class rtkFDKWarpBackProjectionImageFilterIF3IF3CDFIVF34IVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkFDKWarpBackProjectionImageFilterIF3IF3CDFIVF34IVF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkFDKWarpBackProjectionImageFilterIF3IF3CDFIVF34IVF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkFDKWarpBackProjectionImageFilterIF3IF3CDFIVF34IVF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkFDKWarpBackProjectionImageFilterIF3IF3CDFIVF34IVF33 in _rtkFDKWarpBackProjectionImageFilterPython:
_rtkFDKWarpBackProjectionImageFilterPython.rtkFDKWarpBackProjectionImageFilterIF3IF3CDFIVF34IVF33_swigregister(rtkFDKWarpBackProjectionImageFilterIF3IF3CDFIVF34IVF33)
rtkFDKWarpBackProjectionImageFilterIF3IF3CDFIVF34IVF33___New_orig__ = _rtkFDKWarpBackProjectionImageFilterPython.rtkFDKWarpBackProjectionImageFilterIF3IF3CDFIVF34IVF33___New_orig__
rtkFDKWarpBackProjectionImageFilterIF3IF3CDFIVF34IVF33_cast = _rtkFDKWarpBackProjectionImageFilterPython.rtkFDKWarpBackProjectionImageFilterIF3IF3CDFIVF34IVF33_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def fdk_warp_back_projection_image_filter(*args, **kwargs):
    """Procedural interface for FDKWarpBackProjectionImageFilter"""
    import itk
    instance = itk.FDKWarpBackProjectionImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def fdk_warp_back_projection_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.FDKWarpBackProjectionImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.FDKWarpBackProjectionImageFilter.values()[0]
    else:
        filter_object = itk.FDKWarpBackProjectionImageFilter

    fdk_warp_back_projection_image_filter.__doc__ = filter_object.__doc__
    fdk_warp_back_projection_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    fdk_warp_back_projection_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.FDKWarpBackProjectionImageFilter, itkTemplate.itkTemplate):
        fdk_warp_back_projection_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        fdk_warp_back_projection_image_filter.__doc__ += "\n"
        fdk_warp_back_projection_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        fdk_warp_back_projection_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



