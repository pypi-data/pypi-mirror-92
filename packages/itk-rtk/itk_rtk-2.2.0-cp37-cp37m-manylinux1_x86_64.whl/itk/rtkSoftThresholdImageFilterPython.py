# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _RTKPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _rtkSoftThresholdImageFilterPython
else:
    import _rtkSoftThresholdImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _rtkSoftThresholdImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _rtkSoftThresholdImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterBPython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.pyBasePython
import itk.ITKCommonBasePython
import itk.itkImageSourcePython
import itk.itkImagePython
import itk.itkRGBPixelPython
import itk.itkFixedArrayPython
import itk.stdcomplexPython
import itk.itkRGBAPixelPython
import itk.itkPointPython
import itk.vnl_vector_refPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkVectorPython
import itk.itkCovariantVectorPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkImageSourceCommonPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageToImageFilterAPython

def itkUnaryFunctorImageFilterID3ID3STDD_New():
    return itkUnaryFunctorImageFilterID3ID3STDD.New()

class itkUnaryFunctorImageFilterID3ID3STDD(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3ID3):
    r"""Proxy of C++ itkUnaryFunctorImageFilterID3ID3STDD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_rtkSoftThresholdImageFilterPython.itkUnaryFunctorImageFilterID3ID3STDD___New_orig__)
    Clone = _swig_new_instance_method(_rtkSoftThresholdImageFilterPython.itkUnaryFunctorImageFilterID3ID3STDD_Clone)
    GetFunctor = _swig_new_instance_method(_rtkSoftThresholdImageFilterPython.itkUnaryFunctorImageFilterID3ID3STDD_GetFunctor)
    SetFunctor = _swig_new_instance_method(_rtkSoftThresholdImageFilterPython.itkUnaryFunctorImageFilterID3ID3STDD_SetFunctor)
    __swig_destroy__ = _rtkSoftThresholdImageFilterPython.delete_itkUnaryFunctorImageFilterID3ID3STDD
    cast = _swig_new_static_method(_rtkSoftThresholdImageFilterPython.itkUnaryFunctorImageFilterID3ID3STDD_cast)

    def New(*args, **kargs):
        """New() -> itkUnaryFunctorImageFilterID3ID3STDD

        Create a new object of the class itkUnaryFunctorImageFilterID3ID3STDD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkUnaryFunctorImageFilterID3ID3STDD.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkUnaryFunctorImageFilterID3ID3STDD.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkUnaryFunctorImageFilterID3ID3STDD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkUnaryFunctorImageFilterID3ID3STDD in _rtkSoftThresholdImageFilterPython:
_rtkSoftThresholdImageFilterPython.itkUnaryFunctorImageFilterID3ID3STDD_swigregister(itkUnaryFunctorImageFilterID3ID3STDD)
itkUnaryFunctorImageFilterID3ID3STDD___New_orig__ = _rtkSoftThresholdImageFilterPython.itkUnaryFunctorImageFilterID3ID3STDD___New_orig__
itkUnaryFunctorImageFilterID3ID3STDD_cast = _rtkSoftThresholdImageFilterPython.itkUnaryFunctorImageFilterID3ID3STDD_cast


def itkUnaryFunctorImageFilterIF3IF3STFF_New():
    return itkUnaryFunctorImageFilterIF3IF3STFF.New()

class itkUnaryFunctorImageFilterIF3IF3STFF(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IF3):
    r"""Proxy of C++ itkUnaryFunctorImageFilterIF3IF3STFF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_rtkSoftThresholdImageFilterPython.itkUnaryFunctorImageFilterIF3IF3STFF___New_orig__)
    Clone = _swig_new_instance_method(_rtkSoftThresholdImageFilterPython.itkUnaryFunctorImageFilterIF3IF3STFF_Clone)
    GetFunctor = _swig_new_instance_method(_rtkSoftThresholdImageFilterPython.itkUnaryFunctorImageFilterIF3IF3STFF_GetFunctor)
    SetFunctor = _swig_new_instance_method(_rtkSoftThresholdImageFilterPython.itkUnaryFunctorImageFilterIF3IF3STFF_SetFunctor)
    __swig_destroy__ = _rtkSoftThresholdImageFilterPython.delete_itkUnaryFunctorImageFilterIF3IF3STFF
    cast = _swig_new_static_method(_rtkSoftThresholdImageFilterPython.itkUnaryFunctorImageFilterIF3IF3STFF_cast)

    def New(*args, **kargs):
        """New() -> itkUnaryFunctorImageFilterIF3IF3STFF

        Create a new object of the class itkUnaryFunctorImageFilterIF3IF3STFF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkUnaryFunctorImageFilterIF3IF3STFF.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkUnaryFunctorImageFilterIF3IF3STFF.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkUnaryFunctorImageFilterIF3IF3STFF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkUnaryFunctorImageFilterIF3IF3STFF in _rtkSoftThresholdImageFilterPython:
_rtkSoftThresholdImageFilterPython.itkUnaryFunctorImageFilterIF3IF3STFF_swigregister(itkUnaryFunctorImageFilterIF3IF3STFF)
itkUnaryFunctorImageFilterIF3IF3STFF___New_orig__ = _rtkSoftThresholdImageFilterPython.itkUnaryFunctorImageFilterIF3IF3STFF___New_orig__
itkUnaryFunctorImageFilterIF3IF3STFF_cast = _rtkSoftThresholdImageFilterPython.itkUnaryFunctorImageFilterIF3IF3STFF_cast

class rtkFunctorSoftThresholdDD(object):
    r"""Proxy of C++ rtkFunctorSoftThresholdDD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _rtkSoftThresholdImageFilterPython.delete_rtkFunctorSoftThresholdDD
    SetThreshold = _swig_new_instance_method(_rtkSoftThresholdImageFilterPython.rtkFunctorSoftThresholdDD_SetThreshold)
    __ne__ = _swig_new_instance_method(_rtkSoftThresholdImageFilterPython.rtkFunctorSoftThresholdDD___ne__)
    __eq__ = _swig_new_instance_method(_rtkSoftThresholdImageFilterPython.rtkFunctorSoftThresholdDD___eq__)
    __call__ = _swig_new_instance_method(_rtkSoftThresholdImageFilterPython.rtkFunctorSoftThresholdDD___call__)

    def __init__(self, *args):
        r"""
        __init__(rtkFunctorSoftThresholdDD self) -> rtkFunctorSoftThresholdDD
        __init__(rtkFunctorSoftThresholdDD self, rtkFunctorSoftThresholdDD arg0) -> rtkFunctorSoftThresholdDD
        """
        _rtkSoftThresholdImageFilterPython.rtkFunctorSoftThresholdDD_swiginit(self, _rtkSoftThresholdImageFilterPython.new_rtkFunctorSoftThresholdDD(*args))

# Register rtkFunctorSoftThresholdDD in _rtkSoftThresholdImageFilterPython:
_rtkSoftThresholdImageFilterPython.rtkFunctorSoftThresholdDD_swigregister(rtkFunctorSoftThresholdDD)

class rtkFunctorSoftThresholdFF(object):
    r"""Proxy of C++ rtkFunctorSoftThresholdFF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _rtkSoftThresholdImageFilterPython.delete_rtkFunctorSoftThresholdFF
    SetThreshold = _swig_new_instance_method(_rtkSoftThresholdImageFilterPython.rtkFunctorSoftThresholdFF_SetThreshold)
    __ne__ = _swig_new_instance_method(_rtkSoftThresholdImageFilterPython.rtkFunctorSoftThresholdFF___ne__)
    __eq__ = _swig_new_instance_method(_rtkSoftThresholdImageFilterPython.rtkFunctorSoftThresholdFF___eq__)
    __call__ = _swig_new_instance_method(_rtkSoftThresholdImageFilterPython.rtkFunctorSoftThresholdFF___call__)

    def __init__(self, *args):
        r"""
        __init__(rtkFunctorSoftThresholdFF self) -> rtkFunctorSoftThresholdFF
        __init__(rtkFunctorSoftThresholdFF self, rtkFunctorSoftThresholdFF arg0) -> rtkFunctorSoftThresholdFF
        """
        _rtkSoftThresholdImageFilterPython.rtkFunctorSoftThresholdFF_swiginit(self, _rtkSoftThresholdImageFilterPython.new_rtkFunctorSoftThresholdFF(*args))

# Register rtkFunctorSoftThresholdFF in _rtkSoftThresholdImageFilterPython:
_rtkSoftThresholdImageFilterPython.rtkFunctorSoftThresholdFF_swigregister(rtkFunctorSoftThresholdFF)


def rtkSoftThresholdImageFilterID3ID3_New():
    return rtkSoftThresholdImageFilterID3ID3.New()

class rtkSoftThresholdImageFilterID3ID3(itkUnaryFunctorImageFilterID3ID3STDD):
    r"""Proxy of C++ rtkSoftThresholdImageFilterID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_rtkSoftThresholdImageFilterPython.rtkSoftThresholdImageFilterID3ID3___New_orig__)
    Clone = _swig_new_instance_method(_rtkSoftThresholdImageFilterPython.rtkSoftThresholdImageFilterID3ID3_Clone)
    SetThreshold = _swig_new_instance_method(_rtkSoftThresholdImageFilterPython.rtkSoftThresholdImageFilterID3ID3_SetThreshold)
    OutputEqualityComparableCheck = _rtkSoftThresholdImageFilterPython.rtkSoftThresholdImageFilterID3ID3_OutputEqualityComparableCheck
    
    InputPixelTypeComparable = _rtkSoftThresholdImageFilterPython.rtkSoftThresholdImageFilterID3ID3_InputPixelTypeComparable
    
    InputOStreamWritableCheck = _rtkSoftThresholdImageFilterPython.rtkSoftThresholdImageFilterID3ID3_InputOStreamWritableCheck
    
    OutputOStreamWritableCheck = _rtkSoftThresholdImageFilterPython.rtkSoftThresholdImageFilterID3ID3_OutputOStreamWritableCheck
    
    __swig_destroy__ = _rtkSoftThresholdImageFilterPython.delete_rtkSoftThresholdImageFilterID3ID3
    cast = _swig_new_static_method(_rtkSoftThresholdImageFilterPython.rtkSoftThresholdImageFilterID3ID3_cast)

    def New(*args, **kargs):
        """New() -> rtkSoftThresholdImageFilterID3ID3

        Create a new object of the class rtkSoftThresholdImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkSoftThresholdImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkSoftThresholdImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkSoftThresholdImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkSoftThresholdImageFilterID3ID3 in _rtkSoftThresholdImageFilterPython:
_rtkSoftThresholdImageFilterPython.rtkSoftThresholdImageFilterID3ID3_swigregister(rtkSoftThresholdImageFilterID3ID3)
rtkSoftThresholdImageFilterID3ID3___New_orig__ = _rtkSoftThresholdImageFilterPython.rtkSoftThresholdImageFilterID3ID3___New_orig__
rtkSoftThresholdImageFilterID3ID3_cast = _rtkSoftThresholdImageFilterPython.rtkSoftThresholdImageFilterID3ID3_cast


def rtkSoftThresholdImageFilterIF3IF3_New():
    return rtkSoftThresholdImageFilterIF3IF3.New()

class rtkSoftThresholdImageFilterIF3IF3(itkUnaryFunctorImageFilterIF3IF3STFF):
    r"""Proxy of C++ rtkSoftThresholdImageFilterIF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_rtkSoftThresholdImageFilterPython.rtkSoftThresholdImageFilterIF3IF3___New_orig__)
    Clone = _swig_new_instance_method(_rtkSoftThresholdImageFilterPython.rtkSoftThresholdImageFilterIF3IF3_Clone)
    SetThreshold = _swig_new_instance_method(_rtkSoftThresholdImageFilterPython.rtkSoftThresholdImageFilterIF3IF3_SetThreshold)
    OutputEqualityComparableCheck = _rtkSoftThresholdImageFilterPython.rtkSoftThresholdImageFilterIF3IF3_OutputEqualityComparableCheck
    
    InputPixelTypeComparable = _rtkSoftThresholdImageFilterPython.rtkSoftThresholdImageFilterIF3IF3_InputPixelTypeComparable
    
    InputOStreamWritableCheck = _rtkSoftThresholdImageFilterPython.rtkSoftThresholdImageFilterIF3IF3_InputOStreamWritableCheck
    
    OutputOStreamWritableCheck = _rtkSoftThresholdImageFilterPython.rtkSoftThresholdImageFilterIF3IF3_OutputOStreamWritableCheck
    
    __swig_destroy__ = _rtkSoftThresholdImageFilterPython.delete_rtkSoftThresholdImageFilterIF3IF3
    cast = _swig_new_static_method(_rtkSoftThresholdImageFilterPython.rtkSoftThresholdImageFilterIF3IF3_cast)

    def New(*args, **kargs):
        """New() -> rtkSoftThresholdImageFilterIF3IF3

        Create a new object of the class rtkSoftThresholdImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkSoftThresholdImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkSoftThresholdImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkSoftThresholdImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkSoftThresholdImageFilterIF3IF3 in _rtkSoftThresholdImageFilterPython:
_rtkSoftThresholdImageFilterPython.rtkSoftThresholdImageFilterIF3IF3_swigregister(rtkSoftThresholdImageFilterIF3IF3)
rtkSoftThresholdImageFilterIF3IF3___New_orig__ = _rtkSoftThresholdImageFilterPython.rtkSoftThresholdImageFilterIF3IF3___New_orig__
rtkSoftThresholdImageFilterIF3IF3_cast = _rtkSoftThresholdImageFilterPython.rtkSoftThresholdImageFilterIF3IF3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def soft_threshold_image_filter(*args, **kwargs):
    """Procedural interface for SoftThresholdImageFilter"""
    import itk
    instance = itk.SoftThresholdImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def soft_threshold_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.SoftThresholdImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.SoftThresholdImageFilter.values()[0]
    else:
        filter_object = itk.SoftThresholdImageFilter

    soft_threshold_image_filter.__doc__ = filter_object.__doc__
    soft_threshold_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    soft_threshold_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.SoftThresholdImageFilter, itkTemplate.itkTemplate):
        soft_threshold_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        soft_threshold_image_filter.__doc__ += "\n"
        soft_threshold_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        soft_threshold_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])
import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def unary_functor_image_filter(*args, **kwargs):
    """Procedural interface for UnaryFunctorImageFilter"""
    import itk
    instance = itk.UnaryFunctorImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def unary_functor_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.UnaryFunctorImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.UnaryFunctorImageFilter.values()[0]
    else:
        filter_object = itk.UnaryFunctorImageFilter

    unary_functor_image_filter.__doc__ = filter_object.__doc__
    unary_functor_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    unary_functor_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.UnaryFunctorImageFilter, itkTemplate.itkTemplate):
        unary_functor_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        unary_functor_image_filter.__doc__ += "\n"
        unary_functor_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        unary_functor_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



