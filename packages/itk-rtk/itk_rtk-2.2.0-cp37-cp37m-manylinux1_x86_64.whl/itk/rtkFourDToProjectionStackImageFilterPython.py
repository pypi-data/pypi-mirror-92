# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _RTKPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _rtkFourDToProjectionStackImageFilterPython
else:
    import _rtkFourDToProjectionStackImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _rtkFourDToProjectionStackImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _rtkFourDToProjectionStackImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.rtkForwardProjectionImageFilterPython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterBPython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.pyBasePython
import itk.ITKCommonBasePython
import itk.itkImageSourcePython
import itk.itkImagePython
import itk.itkRGBPixelPython
import itk.itkFixedArrayPython
import itk.stdcomplexPython
import itk.itkRGBAPixelPython
import itk.itkPointPython
import itk.vnl_vector_refPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkVectorPython
import itk.itkCovariantVectorPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkImageSourceCommonPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageToImageFilterAPython
import itk.itkInPlaceImageFilterRTKPython
import itk.itkImageToImageFilterRTKPython
import itk.itkImageRTKPython
import itk.itkImageBaseRTKPython
import itk.itkPointRTKPython
import itk.itkImageRegionRTKPython
import itk.itkMatrixRTKPython
import itk.itkCovariantVectorRTKPython
import itk.itkImageSourceRTKPython
import itk.rtkThreeDCircularProjectionGeometryPython
import itk.rtkProjectionGeometryPython
import itk.itkArray2DPython

def rtkFourDToProjectionStackImageFilterID3ID4_New():
    return rtkFourDToProjectionStackImageFilterID3ID4.New()

class rtkFourDToProjectionStackImageFilterID3ID4(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    r"""Proxy of C++ rtkFourDToProjectionStackImageFilterID3ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_rtkFourDToProjectionStackImageFilterPython.rtkFourDToProjectionStackImageFilterID3ID4___New_orig__)
    Clone = _swig_new_instance_method(_rtkFourDToProjectionStackImageFilterPython.rtkFourDToProjectionStackImageFilterID3ID4_Clone)
    SetInputVolumeSeries = _swig_new_instance_method(_rtkFourDToProjectionStackImageFilterPython.rtkFourDToProjectionStackImageFilterID3ID4_SetInputVolumeSeries)
    SetInputProjectionStack = _swig_new_instance_method(_rtkFourDToProjectionStackImageFilterPython.rtkFourDToProjectionStackImageFilterID3ID4_SetInputProjectionStack)
    SetForwardProjectionFilter = _swig_new_instance_method(_rtkFourDToProjectionStackImageFilterPython.rtkFourDToProjectionStackImageFilterID3ID4_SetForwardProjectionFilter)
    SetGeometry = _swig_new_instance_method(_rtkFourDToProjectionStackImageFilterPython.rtkFourDToProjectionStackImageFilterID3ID4_SetGeometry)
    SetWeights = _swig_new_instance_method(_rtkFourDToProjectionStackImageFilterPython.rtkFourDToProjectionStackImageFilterID3ID4_SetWeights)
    InitializeConstantVolumeSource = _swig_new_instance_method(_rtkFourDToProjectionStackImageFilterPython.rtkFourDToProjectionStackImageFilterID3ID4_InitializeConstantVolumeSource)
    SetSignal = _swig_new_instance_method(_rtkFourDToProjectionStackImageFilterPython.rtkFourDToProjectionStackImageFilterID3ID4_SetSignal)
    __swig_destroy__ = _rtkFourDToProjectionStackImageFilterPython.delete_rtkFourDToProjectionStackImageFilterID3ID4
    cast = _swig_new_static_method(_rtkFourDToProjectionStackImageFilterPython.rtkFourDToProjectionStackImageFilterID3ID4_cast)

    def New(*args, **kargs):
        """New() -> rtkFourDToProjectionStackImageFilterID3ID4

        Create a new object of the class rtkFourDToProjectionStackImageFilterID3ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkFourDToProjectionStackImageFilterID3ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkFourDToProjectionStackImageFilterID3ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkFourDToProjectionStackImageFilterID3ID4.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkFourDToProjectionStackImageFilterID3ID4 in _rtkFourDToProjectionStackImageFilterPython:
_rtkFourDToProjectionStackImageFilterPython.rtkFourDToProjectionStackImageFilterID3ID4_swigregister(rtkFourDToProjectionStackImageFilterID3ID4)
rtkFourDToProjectionStackImageFilterID3ID4___New_orig__ = _rtkFourDToProjectionStackImageFilterPython.rtkFourDToProjectionStackImageFilterID3ID4___New_orig__
rtkFourDToProjectionStackImageFilterID3ID4_cast = _rtkFourDToProjectionStackImageFilterPython.rtkFourDToProjectionStackImageFilterID3ID4_cast


def rtkFourDToProjectionStackImageFilterIF3IF4_New():
    return rtkFourDToProjectionStackImageFilterIF3IF4.New()

class rtkFourDToProjectionStackImageFilterIF3IF4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    r"""Proxy of C++ rtkFourDToProjectionStackImageFilterIF3IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_rtkFourDToProjectionStackImageFilterPython.rtkFourDToProjectionStackImageFilterIF3IF4___New_orig__)
    Clone = _swig_new_instance_method(_rtkFourDToProjectionStackImageFilterPython.rtkFourDToProjectionStackImageFilterIF3IF4_Clone)
    SetInputVolumeSeries = _swig_new_instance_method(_rtkFourDToProjectionStackImageFilterPython.rtkFourDToProjectionStackImageFilterIF3IF4_SetInputVolumeSeries)
    SetInputProjectionStack = _swig_new_instance_method(_rtkFourDToProjectionStackImageFilterPython.rtkFourDToProjectionStackImageFilterIF3IF4_SetInputProjectionStack)
    SetForwardProjectionFilter = _swig_new_instance_method(_rtkFourDToProjectionStackImageFilterPython.rtkFourDToProjectionStackImageFilterIF3IF4_SetForwardProjectionFilter)
    SetGeometry = _swig_new_instance_method(_rtkFourDToProjectionStackImageFilterPython.rtkFourDToProjectionStackImageFilterIF3IF4_SetGeometry)
    SetWeights = _swig_new_instance_method(_rtkFourDToProjectionStackImageFilterPython.rtkFourDToProjectionStackImageFilterIF3IF4_SetWeights)
    InitializeConstantVolumeSource = _swig_new_instance_method(_rtkFourDToProjectionStackImageFilterPython.rtkFourDToProjectionStackImageFilterIF3IF4_InitializeConstantVolumeSource)
    SetSignal = _swig_new_instance_method(_rtkFourDToProjectionStackImageFilterPython.rtkFourDToProjectionStackImageFilterIF3IF4_SetSignal)
    __swig_destroy__ = _rtkFourDToProjectionStackImageFilterPython.delete_rtkFourDToProjectionStackImageFilterIF3IF4
    cast = _swig_new_static_method(_rtkFourDToProjectionStackImageFilterPython.rtkFourDToProjectionStackImageFilterIF3IF4_cast)

    def New(*args, **kargs):
        """New() -> rtkFourDToProjectionStackImageFilterIF3IF4

        Create a new object of the class rtkFourDToProjectionStackImageFilterIF3IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkFourDToProjectionStackImageFilterIF3IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkFourDToProjectionStackImageFilterIF3IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkFourDToProjectionStackImageFilterIF3IF4.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkFourDToProjectionStackImageFilterIF3IF4 in _rtkFourDToProjectionStackImageFilterPython:
_rtkFourDToProjectionStackImageFilterPython.rtkFourDToProjectionStackImageFilterIF3IF4_swigregister(rtkFourDToProjectionStackImageFilterIF3IF4)
rtkFourDToProjectionStackImageFilterIF3IF4___New_orig__ = _rtkFourDToProjectionStackImageFilterPython.rtkFourDToProjectionStackImageFilterIF3IF4___New_orig__
rtkFourDToProjectionStackImageFilterIF3IF4_cast = _rtkFourDToProjectionStackImageFilterPython.rtkFourDToProjectionStackImageFilterIF3IF4_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def four_d_to_projection_stack_image_filter(*args, **kwargs):
    """Procedural interface for FourDToProjectionStackImageFilter"""
    import itk
    instance = itk.FourDToProjectionStackImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def four_d_to_projection_stack_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.FourDToProjectionStackImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.FourDToProjectionStackImageFilter.values()[0]
    else:
        filter_object = itk.FourDToProjectionStackImageFilter

    four_d_to_projection_stack_image_filter.__doc__ = filter_object.__doc__
    four_d_to_projection_stack_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    four_d_to_projection_stack_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.FourDToProjectionStackImageFilter, itkTemplate.itkTemplate):
        four_d_to_projection_stack_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        four_d_to_projection_stack_image_filter.__doc__ += "\n"
        four_d_to_projection_stack_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        four_d_to_projection_stack_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



