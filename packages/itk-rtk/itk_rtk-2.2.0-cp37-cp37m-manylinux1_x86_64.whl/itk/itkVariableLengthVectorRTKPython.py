# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _RTKPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkVariableLengthVectorRTKPython
else:
    import _itkVariableLengthVectorRTKPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkVariableLengthVectorRTKPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkVariableLengthVectorRTKPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.pyBasePython
class itkVariableLengthVectorI(object):
    r"""Proxy of C++ itkVariableLengthVectorI class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(itkVariableLengthVectorI self) -> itkVariableLengthVectorI
        __init__(itkVariableLengthVectorI self, unsigned int dimension) -> itkVariableLengthVectorI
        __init__(itkVariableLengthVectorI self, int * data, unsigned int sz, bool LetArrayManageMemory=False) -> itkVariableLengthVectorI
        __init__(itkVariableLengthVectorI self, int const * data, unsigned int sz, bool LetArrayManageMemory=False) -> itkVariableLengthVectorI
        __init__(itkVariableLengthVectorI self, itkVariableLengthVectorI v) -> itkVariableLengthVectorI
        """
        _itkVariableLengthVectorRTKPython.itkVariableLengthVectorI_swiginit(self, _itkVariableLengthVectorRTKPython.new_itkVariableLengthVectorI(*args))
    Swap = _swig_new_instance_method(_itkVariableLengthVectorRTKPython.itkVariableLengthVectorI_Swap)
    Fill = _swig_new_instance_method(_itkVariableLengthVectorRTKPython.itkVariableLengthVectorI_Fill)
    FastAssign = _swig_new_instance_method(_itkVariableLengthVectorRTKPython.itkVariableLengthVectorI_FastAssign)
    Size = _swig_new_instance_method(_itkVariableLengthVectorRTKPython.itkVariableLengthVectorI_Size)
    GetSize = _swig_new_instance_method(_itkVariableLengthVectorRTKPython.itkVariableLengthVectorI_GetSize)
    GetNumberOfElements = _swig_new_instance_method(_itkVariableLengthVectorRTKPython.itkVariableLengthVectorI_GetNumberOfElements)
    GetElement = _swig_new_instance_method(_itkVariableLengthVectorRTKPython.itkVariableLengthVectorI_GetElement)
    SetElement = _swig_new_instance_method(_itkVariableLengthVectorRTKPython.itkVariableLengthVectorI_SetElement)
    SetSize = _swig_new_instance_method(_itkVariableLengthVectorRTKPython.itkVariableLengthVectorI_SetSize)
    DestroyExistingData = _swig_new_instance_method(_itkVariableLengthVectorRTKPython.itkVariableLengthVectorI_DestroyExistingData)
    SetData = _swig_new_instance_method(_itkVariableLengthVectorRTKPython.itkVariableLengthVectorI_SetData)
    __swig_destroy__ = _itkVariableLengthVectorRTKPython.delete_itkVariableLengthVectorI
    Reserve = _swig_new_instance_method(_itkVariableLengthVectorRTKPython.itkVariableLengthVectorI_Reserve)
    AllocateElements = _swig_new_instance_method(_itkVariableLengthVectorRTKPython.itkVariableLengthVectorI_AllocateElements)
    GetDataPointer = _swig_new_instance_method(_itkVariableLengthVectorRTKPython.itkVariableLengthVectorI_GetDataPointer)
    __isub__ = _swig_new_instance_method(_itkVariableLengthVectorRTKPython.itkVariableLengthVectorI___isub__)
    __iadd__ = _swig_new_instance_method(_itkVariableLengthVectorRTKPython.itkVariableLengthVectorI___iadd__)
    __imul__ = _swig_new_instance_method(_itkVariableLengthVectorRTKPython.itkVariableLengthVectorI___imul__)
    __neg__ = _swig_new_instance_method(_itkVariableLengthVectorRTKPython.itkVariableLengthVectorI___neg__)
    __eq__ = _swig_new_instance_method(_itkVariableLengthVectorRTKPython.itkVariableLengthVectorI___eq__)
    __ne__ = _swig_new_instance_method(_itkVariableLengthVectorRTKPython.itkVariableLengthVectorI___ne__)
    GetNorm = _swig_new_instance_method(_itkVariableLengthVectorRTKPython.itkVariableLengthVectorI_GetNorm)
    GetSquaredNorm = _swig_new_instance_method(_itkVariableLengthVectorRTKPython.itkVariableLengthVectorI_GetSquaredNorm)
    IsAProxy = _swig_new_instance_method(_itkVariableLengthVectorRTKPython.itkVariableLengthVectorI_IsAProxy)

# Register itkVariableLengthVectorI in _itkVariableLengthVectorRTKPython:
_itkVariableLengthVectorRTKPython.itkVariableLengthVectorI_swigregister(itkVariableLengthVectorI)



