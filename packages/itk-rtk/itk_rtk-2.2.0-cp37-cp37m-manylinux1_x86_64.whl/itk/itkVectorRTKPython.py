# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _RTKPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkVectorRTKPython
else:
    import _itkVectorRTKPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkVectorRTKPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkVectorRTKPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkFixedArrayRTKPython
class itkVectori2(itk.itkFixedArrayRTKPython.itkFixedArrayi2):
    r"""Proxy of C++ itkVectori2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    GetVectorDimension = _swig_new_static_method(_itkVectorRTKPython.itkVectori2_GetVectorDimension)
    SetVnlVector = _swig_new_instance_method(_itkVectorRTKPython.itkVectori2_SetVnlVector)
    GetVnlVector = _swig_new_instance_method(_itkVectorRTKPython.itkVectori2_GetVnlVector)
    __swig_destroy__ = _itkVectorRTKPython.delete_itkVectori2

    def __init__(self, *args):
        r"""
        __init__(itkVectori2 self) -> itkVectori2
        __init__(itkVectori2 self, itkVectori2 arg0) -> itkVectori2
        __init__(itkVectori2 self, int const & r) -> itkVectori2
        __init__(itkVectori2 self, int const * r) -> itkVectori2
        """
        _itkVectorRTKPython.itkVectori2_swiginit(self, _itkVectorRTKPython.new_itkVectori2(*args))
    __iadd__ = _swig_new_instance_method(_itkVectorRTKPython.itkVectori2___iadd__)
    __isub__ = _swig_new_instance_method(_itkVectorRTKPython.itkVectori2___isub__)
    __neg__ = _swig_new_instance_method(_itkVectorRTKPython.itkVectori2___neg__)
    __add__ = _swig_new_instance_method(_itkVectorRTKPython.itkVectori2___add__)
    __sub__ = _swig_new_instance_method(_itkVectorRTKPython.itkVectori2___sub__)
    __mul__ = _swig_new_instance_method(_itkVectorRTKPython.itkVectori2___mul__)
    __eq__ = _swig_new_instance_method(_itkVectorRTKPython.itkVectori2___eq__)
    __ne__ = _swig_new_instance_method(_itkVectorRTKPython.itkVectori2___ne__)
    GetNorm = _swig_new_instance_method(_itkVectorRTKPython.itkVectori2_GetNorm)
    GetSquaredNorm = _swig_new_instance_method(_itkVectorRTKPython.itkVectori2_GetSquaredNorm)
    GetNumberOfComponents = _swig_new_static_method(_itkVectorRTKPython.itkVectori2_GetNumberOfComponents)
    Normalize = _swig_new_instance_method(_itkVectorRTKPython.itkVectori2_Normalize)
    SetNthComponent = _swig_new_instance_method(_itkVectorRTKPython.itkVectori2_SetNthComponent)
    __getitem__ = _swig_new_instance_method(_itkVectorRTKPython.itkVectori2___getitem__)
    __setitem__ = _swig_new_instance_method(_itkVectorRTKPython.itkVectori2___setitem__)
    __len__ = _swig_new_static_method(_itkVectorRTKPython.itkVectori2___len__)
    __repr__ = _swig_new_instance_method(_itkVectorRTKPython.itkVectori2___repr__)

# Register itkVectori2 in _itkVectorRTKPython:
_itkVectorRTKPython.itkVectori2_swigregister(itkVectori2)
itkVectori2_GetVectorDimension = _itkVectorRTKPython.itkVectori2_GetVectorDimension
itkVectori2_GetNumberOfComponents = _itkVectorRTKPython.itkVectori2_GetNumberOfComponents
itkVectori2___len__ = _itkVectorRTKPython.itkVectori2___len__



