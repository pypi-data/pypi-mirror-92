# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _RTKPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _rtkProjectionStackToFourDImageFilterPython
else:
    import _rtkProjectionStackToFourDImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _rtkProjectionStackToFourDImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _rtkProjectionStackToFourDImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.rtkBackProjectionImageFilterPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.itkPointPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.itkCovariantVectorPython
import itk.ITKCommonBasePython
import itk.itkImagePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkImageRegionPython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterBPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageToImageFilterAPython
import itk.rtkThreeDCircularProjectionGeometryPython
import itk.rtkProjectionGeometryPython
import itk.itkImageRTKPython
import itk.itkImageBaseRTKPython
import itk.itkPointRTKPython
import itk.itkImageRegionRTKPython
import itk.itkMatrixRTKPython
import itk.itkCovariantVectorRTKPython
import itk.itkArray2DPython
import itk.itkImageToImageFilterRTKPython
import itk.itkImageSourceRTKPython

def rtkProjectionStackToFourDImageFilterID4ID3D_New():
    return rtkProjectionStackToFourDImageFilterID4ID3D.New()

class rtkProjectionStackToFourDImageFilterID4ID3D(itk.itkImageToImageFilterRTKPython.itkImageToImageFilterID4ID4):
    r"""Proxy of C++ rtkProjectionStackToFourDImageFilterID4ID3D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_rtkProjectionStackToFourDImageFilterPython.rtkProjectionStackToFourDImageFilterID4ID3D___New_orig__)
    Clone = _swig_new_instance_method(_rtkProjectionStackToFourDImageFilterPython.rtkProjectionStackToFourDImageFilterID4ID3D_Clone)
    SetInputVolumeSeries = _swig_new_instance_method(_rtkProjectionStackToFourDImageFilterPython.rtkProjectionStackToFourDImageFilterID4ID3D_SetInputVolumeSeries)
    GetInputVolumeSeries = _swig_new_instance_method(_rtkProjectionStackToFourDImageFilterPython.rtkProjectionStackToFourDImageFilterID4ID3D_GetInputVolumeSeries)
    SetInputProjectionStack = _swig_new_instance_method(_rtkProjectionStackToFourDImageFilterPython.rtkProjectionStackToFourDImageFilterID4ID3D_SetInputProjectionStack)
    GetInputProjectionStack = _swig_new_instance_method(_rtkProjectionStackToFourDImageFilterPython.rtkProjectionStackToFourDImageFilterID4ID3D_GetInputProjectionStack)
    SetBackProjectionFilter = _swig_new_instance_method(_rtkProjectionStackToFourDImageFilterPython.rtkProjectionStackToFourDImageFilterID4ID3D_SetBackProjectionFilter)
    SetGeometry = _swig_new_instance_method(_rtkProjectionStackToFourDImageFilterPython.rtkProjectionStackToFourDImageFilterID4ID3D_SetGeometry)
    SetUseCudaSplat = _swig_new_instance_method(_rtkProjectionStackToFourDImageFilterPython.rtkProjectionStackToFourDImageFilterID4ID3D_SetUseCudaSplat)
    GetUseCudaSplat = _swig_new_instance_method(_rtkProjectionStackToFourDImageFilterPython.rtkProjectionStackToFourDImageFilterID4ID3D_GetUseCudaSplat)
    SetUseCudaSources = _swig_new_instance_method(_rtkProjectionStackToFourDImageFilterPython.rtkProjectionStackToFourDImageFilterID4ID3D_SetUseCudaSources)
    GetUseCudaSources = _swig_new_instance_method(_rtkProjectionStackToFourDImageFilterPython.rtkProjectionStackToFourDImageFilterID4ID3D_GetUseCudaSources)
    GetWeights = _swig_new_instance_method(_rtkProjectionStackToFourDImageFilterPython.rtkProjectionStackToFourDImageFilterID4ID3D_GetWeights)
    SetWeights = _swig_new_instance_method(_rtkProjectionStackToFourDImageFilterPython.rtkProjectionStackToFourDImageFilterID4ID3D_SetWeights)
    SetSignal = _swig_new_instance_method(_rtkProjectionStackToFourDImageFilterPython.rtkProjectionStackToFourDImageFilterID4ID3D_SetSignal)
    __swig_destroy__ = _rtkProjectionStackToFourDImageFilterPython.delete_rtkProjectionStackToFourDImageFilterID4ID3D
    cast = _swig_new_static_method(_rtkProjectionStackToFourDImageFilterPython.rtkProjectionStackToFourDImageFilterID4ID3D_cast)

    def New(*args, **kargs):
        """New() -> rtkProjectionStackToFourDImageFilterID4ID3D

        Create a new object of the class rtkProjectionStackToFourDImageFilterID4ID3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkProjectionStackToFourDImageFilterID4ID3D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkProjectionStackToFourDImageFilterID4ID3D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkProjectionStackToFourDImageFilterID4ID3D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkProjectionStackToFourDImageFilterID4ID3D in _rtkProjectionStackToFourDImageFilterPython:
_rtkProjectionStackToFourDImageFilterPython.rtkProjectionStackToFourDImageFilterID4ID3D_swigregister(rtkProjectionStackToFourDImageFilterID4ID3D)
rtkProjectionStackToFourDImageFilterID4ID3D___New_orig__ = _rtkProjectionStackToFourDImageFilterPython.rtkProjectionStackToFourDImageFilterID4ID3D___New_orig__
rtkProjectionStackToFourDImageFilterID4ID3D_cast = _rtkProjectionStackToFourDImageFilterPython.rtkProjectionStackToFourDImageFilterID4ID3D_cast


def rtkProjectionStackToFourDImageFilterIF4IF3D_New():
    return rtkProjectionStackToFourDImageFilterIF4IF3D.New()

class rtkProjectionStackToFourDImageFilterIF4IF3D(itk.itkImageToImageFilterRTKPython.itkImageToImageFilterIF4IF4):
    r"""Proxy of C++ rtkProjectionStackToFourDImageFilterIF4IF3D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_rtkProjectionStackToFourDImageFilterPython.rtkProjectionStackToFourDImageFilterIF4IF3D___New_orig__)
    Clone = _swig_new_instance_method(_rtkProjectionStackToFourDImageFilterPython.rtkProjectionStackToFourDImageFilterIF4IF3D_Clone)
    SetInputVolumeSeries = _swig_new_instance_method(_rtkProjectionStackToFourDImageFilterPython.rtkProjectionStackToFourDImageFilterIF4IF3D_SetInputVolumeSeries)
    GetInputVolumeSeries = _swig_new_instance_method(_rtkProjectionStackToFourDImageFilterPython.rtkProjectionStackToFourDImageFilterIF4IF3D_GetInputVolumeSeries)
    SetInputProjectionStack = _swig_new_instance_method(_rtkProjectionStackToFourDImageFilterPython.rtkProjectionStackToFourDImageFilterIF4IF3D_SetInputProjectionStack)
    GetInputProjectionStack = _swig_new_instance_method(_rtkProjectionStackToFourDImageFilterPython.rtkProjectionStackToFourDImageFilterIF4IF3D_GetInputProjectionStack)
    SetBackProjectionFilter = _swig_new_instance_method(_rtkProjectionStackToFourDImageFilterPython.rtkProjectionStackToFourDImageFilterIF4IF3D_SetBackProjectionFilter)
    SetGeometry = _swig_new_instance_method(_rtkProjectionStackToFourDImageFilterPython.rtkProjectionStackToFourDImageFilterIF4IF3D_SetGeometry)
    SetUseCudaSplat = _swig_new_instance_method(_rtkProjectionStackToFourDImageFilterPython.rtkProjectionStackToFourDImageFilterIF4IF3D_SetUseCudaSplat)
    GetUseCudaSplat = _swig_new_instance_method(_rtkProjectionStackToFourDImageFilterPython.rtkProjectionStackToFourDImageFilterIF4IF3D_GetUseCudaSplat)
    SetUseCudaSources = _swig_new_instance_method(_rtkProjectionStackToFourDImageFilterPython.rtkProjectionStackToFourDImageFilterIF4IF3D_SetUseCudaSources)
    GetUseCudaSources = _swig_new_instance_method(_rtkProjectionStackToFourDImageFilterPython.rtkProjectionStackToFourDImageFilterIF4IF3D_GetUseCudaSources)
    GetWeights = _swig_new_instance_method(_rtkProjectionStackToFourDImageFilterPython.rtkProjectionStackToFourDImageFilterIF4IF3D_GetWeights)
    SetWeights = _swig_new_instance_method(_rtkProjectionStackToFourDImageFilterPython.rtkProjectionStackToFourDImageFilterIF4IF3D_SetWeights)
    SetSignal = _swig_new_instance_method(_rtkProjectionStackToFourDImageFilterPython.rtkProjectionStackToFourDImageFilterIF4IF3D_SetSignal)
    __swig_destroy__ = _rtkProjectionStackToFourDImageFilterPython.delete_rtkProjectionStackToFourDImageFilterIF4IF3D
    cast = _swig_new_static_method(_rtkProjectionStackToFourDImageFilterPython.rtkProjectionStackToFourDImageFilterIF4IF3D_cast)

    def New(*args, **kargs):
        """New() -> rtkProjectionStackToFourDImageFilterIF4IF3D

        Create a new object of the class rtkProjectionStackToFourDImageFilterIF4IF3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkProjectionStackToFourDImageFilterIF4IF3D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkProjectionStackToFourDImageFilterIF4IF3D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkProjectionStackToFourDImageFilterIF4IF3D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkProjectionStackToFourDImageFilterIF4IF3D in _rtkProjectionStackToFourDImageFilterPython:
_rtkProjectionStackToFourDImageFilterPython.rtkProjectionStackToFourDImageFilterIF4IF3D_swigregister(rtkProjectionStackToFourDImageFilterIF4IF3D)
rtkProjectionStackToFourDImageFilterIF4IF3D___New_orig__ = _rtkProjectionStackToFourDImageFilterPython.rtkProjectionStackToFourDImageFilterIF4IF3D___New_orig__
rtkProjectionStackToFourDImageFilterIF4IF3D_cast = _rtkProjectionStackToFourDImageFilterPython.rtkProjectionStackToFourDImageFilterIF4IF3D_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def projection_stack_to_four_d_image_filter(*args, **kwargs):
    """Procedural interface for ProjectionStackToFourDImageFilter"""
    import itk
    instance = itk.ProjectionStackToFourDImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def projection_stack_to_four_d_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.ProjectionStackToFourDImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.ProjectionStackToFourDImageFilter.values()[0]
    else:
        filter_object = itk.ProjectionStackToFourDImageFilter

    projection_stack_to_four_d_image_filter.__doc__ = filter_object.__doc__
    projection_stack_to_four_d_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    projection_stack_to_four_d_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.ProjectionStackToFourDImageFilter, itkTemplate.itkTemplate):
        projection_stack_to_four_d_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        projection_stack_to_four_d_image_filter.__doc__ += "\n"
        projection_stack_to_four_d_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        projection_stack_to_four_d_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



