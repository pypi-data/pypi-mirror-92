# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _RTKPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _rtkForwardWarpImageFilterPython
else:
    import _rtkForwardWarpImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _rtkForwardWarpImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _rtkForwardWarpImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkCovariantVectorPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_matrixPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkWarpImageFilterRTKPython
import itk.itkIndexPython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.itkInterpolateImageFunctionPython
import itk.ITKCommonBasePython
import itk.itkContinuousIndexPython
import itk.itkPointPython
import itk.itkRGBAPixelPython
import itk.itkImageFunctionBasePython
import itk.itkFunctionBasePython
import itk.itkRGBPixelPython
import itk.itkImagePython
import itk.itkImageRegionPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkArrayPython
import itk.itkImageToImageFilterAPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython

def rtkForwardWarpImageFilterIF2IF2ICVF22_New():
    return rtkForwardWarpImageFilterIF2IF2ICVF22.New()

class rtkForwardWarpImageFilterIF2IF2ICVF22(itk.itkWarpImageFilterRTKPython.itkWarpImageFilterIF2IF2ICVF22):
    r"""Proxy of C++ rtkForwardWarpImageFilterIF2IF2ICVF22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_rtkForwardWarpImageFilterPython.rtkForwardWarpImageFilterIF2IF2ICVF22___New_orig__)
    Clone = _swig_new_instance_method(_rtkForwardWarpImageFilterPython.rtkForwardWarpImageFilterIF2IF2ICVF22_Clone)
    __swig_destroy__ = _rtkForwardWarpImageFilterPython.delete_rtkForwardWarpImageFilterIF2IF2ICVF22
    cast = _swig_new_static_method(_rtkForwardWarpImageFilterPython.rtkForwardWarpImageFilterIF2IF2ICVF22_cast)

    def New(*args, **kargs):
        """New() -> rtkForwardWarpImageFilterIF2IF2ICVF22

        Create a new object of the class rtkForwardWarpImageFilterIF2IF2ICVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkForwardWarpImageFilterIF2IF2ICVF22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkForwardWarpImageFilterIF2IF2ICVF22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkForwardWarpImageFilterIF2IF2ICVF22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkForwardWarpImageFilterIF2IF2ICVF22 in _rtkForwardWarpImageFilterPython:
_rtkForwardWarpImageFilterPython.rtkForwardWarpImageFilterIF2IF2ICVF22_swigregister(rtkForwardWarpImageFilterIF2IF2ICVF22)
rtkForwardWarpImageFilterIF2IF2ICVF22___New_orig__ = _rtkForwardWarpImageFilterPython.rtkForwardWarpImageFilterIF2IF2ICVF22___New_orig__
rtkForwardWarpImageFilterIF2IF2ICVF22_cast = _rtkForwardWarpImageFilterPython.rtkForwardWarpImageFilterIF2IF2ICVF22_cast


def rtkForwardWarpImageFilterIF3IF3ICVF33_New():
    return rtkForwardWarpImageFilterIF3IF3ICVF33.New()

class rtkForwardWarpImageFilterIF3IF3ICVF33(itk.itkWarpImageFilterRTKPython.itkWarpImageFilterIF3IF3ICVF33):
    r"""Proxy of C++ rtkForwardWarpImageFilterIF3IF3ICVF33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_rtkForwardWarpImageFilterPython.rtkForwardWarpImageFilterIF3IF3ICVF33___New_orig__)
    Clone = _swig_new_instance_method(_rtkForwardWarpImageFilterPython.rtkForwardWarpImageFilterIF3IF3ICVF33_Clone)
    __swig_destroy__ = _rtkForwardWarpImageFilterPython.delete_rtkForwardWarpImageFilterIF3IF3ICVF33
    cast = _swig_new_static_method(_rtkForwardWarpImageFilterPython.rtkForwardWarpImageFilterIF3IF3ICVF33_cast)

    def New(*args, **kargs):
        """New() -> rtkForwardWarpImageFilterIF3IF3ICVF33

        Create a new object of the class rtkForwardWarpImageFilterIF3IF3ICVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkForwardWarpImageFilterIF3IF3ICVF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkForwardWarpImageFilterIF3IF3ICVF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkForwardWarpImageFilterIF3IF3ICVF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkForwardWarpImageFilterIF3IF3ICVF33 in _rtkForwardWarpImageFilterPython:
_rtkForwardWarpImageFilterPython.rtkForwardWarpImageFilterIF3IF3ICVF33_swigregister(rtkForwardWarpImageFilterIF3IF3ICVF33)
rtkForwardWarpImageFilterIF3IF3ICVF33___New_orig__ = _rtkForwardWarpImageFilterPython.rtkForwardWarpImageFilterIF3IF3ICVF33___New_orig__
rtkForwardWarpImageFilterIF3IF3ICVF33_cast = _rtkForwardWarpImageFilterPython.rtkForwardWarpImageFilterIF3IF3ICVF33_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def forward_warp_image_filter(*args, **kwargs):
    """Procedural interface for ForwardWarpImageFilter"""
    import itk
    instance = itk.ForwardWarpImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def forward_warp_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.ForwardWarpImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.ForwardWarpImageFilter.values()[0]
    else:
        filter_object = itk.ForwardWarpImageFilter

    forward_warp_image_filter.__doc__ = filter_object.__doc__
    forward_warp_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    forward_warp_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.ForwardWarpImageFilter, itkTemplate.itkTemplate):
        forward_warp_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        forward_warp_image_filter.__doc__ += "\n"
        forward_warp_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        forward_warp_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



