# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _RTKPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkImageBaseRTKPython
else:
    import _itkImageBaseRTKPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkImageBaseRTKPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkImageBaseRTKPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkIndexPython
import itk.itkSizePython
import itk.pyBasePython
import itk.itkOffsetPython
import itk.itkPointRTKPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.vnl_matrixPython
import itk.vnl_vector_refPython
import itk.ITKCommonBasePython
import itk.itkMatrixRTKPython
import itk.itkCovariantVectorRTKPython
import itk.itkImageRegionRTKPython

def itkImageBase1_New():
    return itkImageBase1.New()

class itkImageBase1(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkImageBase1 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageBaseRTKPython.itkImageBase1___New_orig__)
    Clone = _swig_new_instance_method(_itkImageBaseRTKPython.itkImageBase1_Clone)
    GetImageDimension = _swig_new_static_method(_itkImageBaseRTKPython.itkImageBase1_GetImageDimension)
    SetOrigin = _swig_new_instance_method(_itkImageBaseRTKPython.itkImageBase1_SetOrigin)
    __SetDirection_orig__ = _swig_new_instance_method(_itkImageBaseRTKPython.itkImageBase1___SetDirection_orig__)
    GetDirection = _swig_new_instance_method(_itkImageBaseRTKPython.itkImageBase1_GetDirection)
    GetInverseDirection = _swig_new_instance_method(_itkImageBaseRTKPython.itkImageBase1_GetInverseDirection)
    GetSpacing = _swig_new_instance_method(_itkImageBaseRTKPython.itkImageBase1_GetSpacing)
    GetOrigin = _swig_new_instance_method(_itkImageBaseRTKPython.itkImageBase1_GetOrigin)
    Allocate = _swig_new_instance_method(_itkImageBaseRTKPython.itkImageBase1_Allocate)
    SetLargestPossibleRegion = _swig_new_instance_method(_itkImageBaseRTKPython.itkImageBase1_SetLargestPossibleRegion)
    __GetLargestPossibleRegion_orig__ = _swig_new_instance_method(_itkImageBaseRTKPython.itkImageBase1___GetLargestPossibleRegion_orig__)
    SetBufferedRegion = _swig_new_instance_method(_itkImageBaseRTKPython.itkImageBase1_SetBufferedRegion)
    __GetBufferedRegion_orig__ = _swig_new_instance_method(_itkImageBaseRTKPython.itkImageBase1___GetBufferedRegion_orig__)
    SetRequestedRegion = _swig_new_instance_method(_itkImageBaseRTKPython.itkImageBase1_SetRequestedRegion)
    __GetRequestedRegion_orig__ = _swig_new_instance_method(_itkImageBaseRTKPython.itkImageBase1___GetRequestedRegion_orig__)
    SetRegions = _swig_new_instance_method(_itkImageBaseRTKPython.itkImageBase1_SetRegions)
    GetOffsetTable = _swig_new_instance_method(_itkImageBaseRTKPython.itkImageBase1_GetOffsetTable)
    ComputeOffset = _swig_new_instance_method(_itkImageBaseRTKPython.itkImageBase1_ComputeOffset)
    ComputeIndex = _swig_new_instance_method(_itkImageBaseRTKPython.itkImageBase1_ComputeIndex)
    SetSpacing = _swig_new_instance_method(_itkImageBaseRTKPython.itkImageBase1_SetSpacing)
    Graft = _swig_new_instance_method(_itkImageBaseRTKPython.itkImageBase1_Graft)
    GetNumberOfComponentsPerPixel = _swig_new_instance_method(_itkImageBaseRTKPython.itkImageBase1_GetNumberOfComponentsPerPixel)
    SetNumberOfComponentsPerPixel = _swig_new_instance_method(_itkImageBaseRTKPython.itkImageBase1_SetNumberOfComponentsPerPixel)
    __swig_destroy__ = _itkImageBaseRTKPython.delete_itkImageBase1
    cast = _swig_new_static_method(_itkImageBaseRTKPython.itkImageBase1_cast)

    def GetBufferedRegion(self):
        var = self.__GetBufferedRegion_orig__()
        var_copy = type(var)(var)
        return var_copy


    def GetLargestPossibleRegion(self):
        var = self.__GetLargestPossibleRegion_orig__()
        var_copy = type(var)(var)
        return var_copy


    def GetRequestedRegion(self):
        var = self.__GetRequestedRegion_orig__()
        var_copy = type(var)(var)
        return var_copy

    TransformPhysicalPointToIndex = _swig_new_instance_method(_itkImageBaseRTKPython.itkImageBase1_TransformPhysicalPointToIndex)
    TransformPhysicalPointToContinuousIndex = _swig_new_instance_method(_itkImageBaseRTKPython.itkImageBase1_TransformPhysicalPointToContinuousIndex)
    TransformContinuousIndexToPhysicalPoint = _swig_new_instance_method(_itkImageBaseRTKPython.itkImageBase1_TransformContinuousIndexToPhysicalPoint)
    TransformIndexToPhysicalPoint = _swig_new_instance_method(_itkImageBaseRTKPython.itkImageBase1_TransformIndexToPhysicalPoint)

    def _SetBase(self, base):
        """Internal method to keep a reference when creating a view of a NumPy array."""
        self.base = base

    @property
    def ndim(self):
        """Equivalant to the np.ndarray ndim attribute when converted
        to an image with itk.array_view_from_image."""
        spatial_dims = self.GetImageDimension()
        if self.GetNumberOfComponentsPerPixel() > 1:
            return spatial_dims + 1
        else:
            return spatial_dims

    @property
    def shape(self):
        """Equivalant to the np.ndarray shape attribute when converted
        to an image with itk.array_view_from_image."""
        itksize = self.GetLargestPossibleRegion().GetSize()
        dim = len(itksize)
        result = [int(itksize[idx]) for idx in range(dim)]

        if(self.GetNumberOfComponentsPerPixel() > 1):
            result = [self.GetNumberOfComponentsPerPixel(), ] + result
        result.reverse()
        return tuple(result)

    @property
    def dtype(self):
        """Equivalant to the np.ndarray dtype attribute when converted
        to an image with itk.array_view_from_image."""
        import itk
        first_template_arg = itk.template(self)[1][0]
        if hasattr(first_template_arg, 'dtype'):
            return first_template_arg.dtype
        else:
#Multi-component pixel types, e.g. Vector,
#CovariantVector, etc.
            return itk.template(first_template_arg)[1][0].dtype

    def SetDirection(self, direction):
        import itkHelpers
        if itkHelpers.is_arraylike(direction):
            import itk
            import numpy as np

            array = np.asarray(direction).astype(np.float64)
            dimension = self.GetImageDimension()
            for dim in array.shape:
                if dim != dimension:
                    raise ValueError('Array does not have the expected shape')
            matrix = itk.matrix_from_array(array)
            self.__SetDirection_orig__(matrix)
        else:
            self.__SetDirection_orig__(direction)


    def New(*args, **kargs):
        """New() -> itkImageBase1

        Create a new object of the class itkImageBase1 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageBase1.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageBase1.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageBase1.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageBase1 in _itkImageBaseRTKPython:
_itkImageBaseRTKPython.itkImageBase1_swigregister(itkImageBase1)
itkImageBase1___New_orig__ = _itkImageBaseRTKPython.itkImageBase1___New_orig__
itkImageBase1_GetImageDimension = _itkImageBaseRTKPython.itkImageBase1_GetImageDimension
itkImageBase1_cast = _itkImageBaseRTKPython.itkImageBase1_cast



