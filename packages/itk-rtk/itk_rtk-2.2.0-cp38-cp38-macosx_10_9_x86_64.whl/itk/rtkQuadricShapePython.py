# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _RTKPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _rtkQuadricShapePython
else:
    import _rtkQuadricShapePython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _rtkQuadricShapePython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _rtkQuadricShapePython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkVectorPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.rtkConvexShapePython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkCovariantVectorPython
import itk.itkPointPython
import itk.vnl_matrix_fixedPython

def rtkQuadricShape_New():
    return rtkQuadricShape.New()

class rtkQuadricShape(itk.rtkConvexShapePython.rtkConvexShape):
    r"""Proxy of C++ rtkQuadricShape class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_rtkQuadricShapePython.rtkQuadricShape___New_orig__)
    Clone = _swig_new_instance_method(_rtkQuadricShapePython.rtkQuadricShape_Clone)
    GetA = _swig_new_instance_method(_rtkQuadricShapePython.rtkQuadricShape_GetA)
    SetA = _swig_new_instance_method(_rtkQuadricShapePython.rtkQuadricShape_SetA)
    GetB = _swig_new_instance_method(_rtkQuadricShapePython.rtkQuadricShape_GetB)
    SetB = _swig_new_instance_method(_rtkQuadricShapePython.rtkQuadricShape_SetB)
    GetC = _swig_new_instance_method(_rtkQuadricShapePython.rtkQuadricShape_GetC)
    SetC = _swig_new_instance_method(_rtkQuadricShapePython.rtkQuadricShape_SetC)
    GetD = _swig_new_instance_method(_rtkQuadricShapePython.rtkQuadricShape_GetD)
    SetD = _swig_new_instance_method(_rtkQuadricShapePython.rtkQuadricShape_SetD)
    GetE = _swig_new_instance_method(_rtkQuadricShapePython.rtkQuadricShape_GetE)
    SetE = _swig_new_instance_method(_rtkQuadricShapePython.rtkQuadricShape_SetE)
    GetF = _swig_new_instance_method(_rtkQuadricShapePython.rtkQuadricShape_GetF)
    SetF = _swig_new_instance_method(_rtkQuadricShapePython.rtkQuadricShape_SetF)
    GetG = _swig_new_instance_method(_rtkQuadricShapePython.rtkQuadricShape_GetG)
    SetG = _swig_new_instance_method(_rtkQuadricShapePython.rtkQuadricShape_SetG)
    GetH = _swig_new_instance_method(_rtkQuadricShapePython.rtkQuadricShape_GetH)
    SetH = _swig_new_instance_method(_rtkQuadricShapePython.rtkQuadricShape_SetH)
    GetI = _swig_new_instance_method(_rtkQuadricShapePython.rtkQuadricShape_GetI)
    SetI = _swig_new_instance_method(_rtkQuadricShapePython.rtkQuadricShape_SetI)
    GetJ = _swig_new_instance_method(_rtkQuadricShapePython.rtkQuadricShape_GetJ)
    SetJ = _swig_new_instance_method(_rtkQuadricShapePython.rtkQuadricShape_SetJ)
    SetEllipsoid = _swig_new_instance_method(_rtkQuadricShapePython.rtkQuadricShape_SetEllipsoid)
    InternalClone = _swig_new_instance_method(_rtkQuadricShapePython.rtkQuadricShape_InternalClone)
    __swig_destroy__ = _rtkQuadricShapePython.delete_rtkQuadricShape
    cast = _swig_new_static_method(_rtkQuadricShapePython.rtkQuadricShape_cast)

    def New(*args, **kargs):
        """New() -> rtkQuadricShape

        Create a new object of the class rtkQuadricShape and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkQuadricShape.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkQuadricShape.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkQuadricShape.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkQuadricShape in _rtkQuadricShapePython:
_rtkQuadricShapePython.rtkQuadricShape_swigregister(rtkQuadricShape)
rtkQuadricShape___New_orig__ = _rtkQuadricShapePython.rtkQuadricShape___New_orig__
rtkQuadricShape_cast = _rtkQuadricShapePython.rtkQuadricShape_cast



