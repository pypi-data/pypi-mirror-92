# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _RTKPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkImageRTKPython
else:
    import _itkImageRTKPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkImageRTKPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkImageRTKPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkCovariantVectorPython
import itk.vnl_vector_refPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.itkImagePython
import itk.itkPointPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkRGBPixelPython
import itk.itkImageRegionPython
import itk.ITKCommonBasePython
import itk.itkRGBAPixelPython
import itk.itkImageBaseRTKPython
import itk.itkPointRTKPython
import itk.itkImageRegionRTKPython
import itk.itkMatrixRTKPython
import itk.itkCovariantVectorRTKPython
class vectoritkImageUS1(object):
    r"""Proxy of C++ std::vector< itkImageUS1_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUS1_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUS1___nonzero__)
    __bool__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUS1___bool__)
    __len__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUS1___len__)
    __getslice__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUS1___getslice__)
    __setslice__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUS1___setslice__)
    __delslice__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUS1___delslice__)
    __delitem__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUS1___delitem__)
    __getitem__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUS1___getitem__)
    __setitem__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUS1___setitem__)
    pop = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUS1_pop)
    append = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUS1_append)
    empty = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUS1_empty)
    size = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUS1_size)
    swap = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUS1_swap)
    begin = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUS1_begin)
    end = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUS1_end)
    rbegin = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUS1_rbegin)
    rend = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUS1_rend)
    clear = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUS1_clear)
    get_allocator = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUS1_get_allocator)
    pop_back = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUS1_pop_back)
    erase = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUS1_erase)

    def __init__(self, *args):
        r"""
        __init__(vectoritkImageUS1 self) -> vectoritkImageUS1
        __init__(vectoritkImageUS1 self, vectoritkImageUS1 other) -> vectoritkImageUS1
        __init__(vectoritkImageUS1 self, std::vector< itkImageUS1_Pointer >::size_type size) -> vectoritkImageUS1
        __init__(vectoritkImageUS1 self, std::vector< itkImageUS1_Pointer >::size_type size, std::vector< itkImageUS1_Pointer >::value_type const & value) -> vectoritkImageUS1
        """
        _itkImageRTKPython.vectoritkImageUS1_swiginit(self, _itkImageRTKPython.new_vectoritkImageUS1(*args))
    push_back = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUS1_push_back)
    front = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUS1_front)
    back = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUS1_back)
    assign = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUS1_assign)
    resize = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUS1_resize)
    insert = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUS1_insert)
    reserve = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUS1_reserve)
    capacity = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUS1_capacity)
    __swig_destroy__ = _itkImageRTKPython.delete_vectoritkImageUS1

# Register vectoritkImageUS1 in _itkImageRTKPython:
_itkImageRTKPython.vectoritkImageUS1_swigregister(vectoritkImageUS1)

class vectoritkImageUS4(object):
    r"""Proxy of C++ std::vector< itkImageUS4_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUS4_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUS4___nonzero__)
    __bool__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUS4___bool__)
    __len__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUS4___len__)
    __getslice__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUS4___getslice__)
    __setslice__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUS4___setslice__)
    __delslice__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUS4___delslice__)
    __delitem__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUS4___delitem__)
    __getitem__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUS4___getitem__)
    __setitem__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUS4___setitem__)
    pop = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUS4_pop)
    append = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUS4_append)
    empty = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUS4_empty)
    size = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUS4_size)
    swap = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUS4_swap)
    begin = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUS4_begin)
    end = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUS4_end)
    rbegin = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUS4_rbegin)
    rend = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUS4_rend)
    clear = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUS4_clear)
    get_allocator = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUS4_get_allocator)
    pop_back = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUS4_pop_back)
    erase = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUS4_erase)

    def __init__(self, *args):
        r"""
        __init__(vectoritkImageUS4 self) -> vectoritkImageUS4
        __init__(vectoritkImageUS4 self, vectoritkImageUS4 other) -> vectoritkImageUS4
        __init__(vectoritkImageUS4 self, std::vector< itkImageUS4_Pointer >::size_type size) -> vectoritkImageUS4
        __init__(vectoritkImageUS4 self, std::vector< itkImageUS4_Pointer >::size_type size, std::vector< itkImageUS4_Pointer >::value_type const & value) -> vectoritkImageUS4
        """
        _itkImageRTKPython.vectoritkImageUS4_swiginit(self, _itkImageRTKPython.new_vectoritkImageUS4(*args))
    push_back = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUS4_push_back)
    front = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUS4_front)
    back = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUS4_back)
    assign = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUS4_assign)
    resize = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUS4_resize)
    insert = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUS4_insert)
    reserve = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUS4_reserve)
    capacity = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUS4_capacity)
    __swig_destroy__ = _itkImageRTKPython.delete_vectoritkImageUS4

# Register vectoritkImageUS4 in _itkImageRTKPython:
_itkImageRTKPython.vectoritkImageUS4_swigregister(vectoritkImageUS4)

class vectoritkImageUI2(object):
    r"""Proxy of C++ std::vector< itkImageUI2_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUI2_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUI2___nonzero__)
    __bool__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUI2___bool__)
    __len__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUI2___len__)
    __getslice__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUI2___getslice__)
    __setslice__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUI2___setslice__)
    __delslice__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUI2___delslice__)
    __delitem__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUI2___delitem__)
    __getitem__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUI2___getitem__)
    __setitem__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUI2___setitem__)
    pop = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUI2_pop)
    append = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUI2_append)
    empty = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUI2_empty)
    size = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUI2_size)
    swap = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUI2_swap)
    begin = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUI2_begin)
    end = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUI2_end)
    rbegin = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUI2_rbegin)
    rend = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUI2_rend)
    clear = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUI2_clear)
    get_allocator = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUI2_get_allocator)
    pop_back = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUI2_pop_back)
    erase = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUI2_erase)

    def __init__(self, *args):
        r"""
        __init__(vectoritkImageUI2 self) -> vectoritkImageUI2
        __init__(vectoritkImageUI2 self, vectoritkImageUI2 other) -> vectoritkImageUI2
        __init__(vectoritkImageUI2 self, std::vector< itkImageUI2_Pointer >::size_type size) -> vectoritkImageUI2
        __init__(vectoritkImageUI2 self, std::vector< itkImageUI2_Pointer >::size_type size, std::vector< itkImageUI2_Pointer >::value_type const & value) -> vectoritkImageUI2
        """
        _itkImageRTKPython.vectoritkImageUI2_swiginit(self, _itkImageRTKPython.new_vectoritkImageUI2(*args))
    push_back = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUI2_push_back)
    front = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUI2_front)
    back = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUI2_back)
    assign = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUI2_assign)
    resize = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUI2_resize)
    insert = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUI2_insert)
    reserve = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUI2_reserve)
    capacity = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUI2_capacity)
    __swig_destroy__ = _itkImageRTKPython.delete_vectoritkImageUI2

# Register vectoritkImageUI2 in _itkImageRTKPython:
_itkImageRTKPython.vectoritkImageUI2_swigregister(vectoritkImageUI2)

class vectoritkImageUI3(object):
    r"""Proxy of C++ std::vector< itkImageUI3_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUI3_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUI3___nonzero__)
    __bool__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUI3___bool__)
    __len__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUI3___len__)
    __getslice__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUI3___getslice__)
    __setslice__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUI3___setslice__)
    __delslice__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUI3___delslice__)
    __delitem__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUI3___delitem__)
    __getitem__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUI3___getitem__)
    __setitem__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUI3___setitem__)
    pop = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUI3_pop)
    append = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUI3_append)
    empty = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUI3_empty)
    size = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUI3_size)
    swap = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUI3_swap)
    begin = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUI3_begin)
    end = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUI3_end)
    rbegin = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUI3_rbegin)
    rend = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUI3_rend)
    clear = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUI3_clear)
    get_allocator = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUI3_get_allocator)
    pop_back = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUI3_pop_back)
    erase = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUI3_erase)

    def __init__(self, *args):
        r"""
        __init__(vectoritkImageUI3 self) -> vectoritkImageUI3
        __init__(vectoritkImageUI3 self, vectoritkImageUI3 other) -> vectoritkImageUI3
        __init__(vectoritkImageUI3 self, std::vector< itkImageUI3_Pointer >::size_type size) -> vectoritkImageUI3
        __init__(vectoritkImageUI3 self, std::vector< itkImageUI3_Pointer >::size_type size, std::vector< itkImageUI3_Pointer >::value_type const & value) -> vectoritkImageUI3
        """
        _itkImageRTKPython.vectoritkImageUI3_swiginit(self, _itkImageRTKPython.new_vectoritkImageUI3(*args))
    push_back = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUI3_push_back)
    front = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUI3_front)
    back = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUI3_back)
    assign = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUI3_assign)
    resize = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUI3_resize)
    insert = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUI3_insert)
    reserve = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUI3_reserve)
    capacity = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUI3_capacity)
    __swig_destroy__ = _itkImageRTKPython.delete_vectoritkImageUI3

# Register vectoritkImageUI3 in _itkImageRTKPython:
_itkImageRTKPython.vectoritkImageUI3_swigregister(vectoritkImageUI3)

class vectoritkImageUC1(object):
    r"""Proxy of C++ std::vector< itkImageUC1_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUC1_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUC1___nonzero__)
    __bool__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUC1___bool__)
    __len__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUC1___len__)
    __getslice__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUC1___getslice__)
    __setslice__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUC1___setslice__)
    __delslice__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUC1___delslice__)
    __delitem__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUC1___delitem__)
    __getitem__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUC1___getitem__)
    __setitem__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUC1___setitem__)
    pop = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUC1_pop)
    append = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUC1_append)
    empty = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUC1_empty)
    size = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUC1_size)
    swap = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUC1_swap)
    begin = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUC1_begin)
    end = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUC1_end)
    rbegin = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUC1_rbegin)
    rend = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUC1_rend)
    clear = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUC1_clear)
    get_allocator = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUC1_get_allocator)
    pop_back = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUC1_pop_back)
    erase = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUC1_erase)

    def __init__(self, *args):
        r"""
        __init__(vectoritkImageUC1 self) -> vectoritkImageUC1
        __init__(vectoritkImageUC1 self, vectoritkImageUC1 other) -> vectoritkImageUC1
        __init__(vectoritkImageUC1 self, std::vector< itkImageUC1_Pointer >::size_type size) -> vectoritkImageUC1
        __init__(vectoritkImageUC1 self, std::vector< itkImageUC1_Pointer >::size_type size, std::vector< itkImageUC1_Pointer >::value_type const & value) -> vectoritkImageUC1
        """
        _itkImageRTKPython.vectoritkImageUC1_swiginit(self, _itkImageRTKPython.new_vectoritkImageUC1(*args))
    push_back = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUC1_push_back)
    front = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUC1_front)
    back = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUC1_back)
    assign = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUC1_assign)
    resize = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUC1_resize)
    insert = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUC1_insert)
    reserve = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUC1_reserve)
    capacity = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUC1_capacity)
    __swig_destroy__ = _itkImageRTKPython.delete_vectoritkImageUC1

# Register vectoritkImageUC1 in _itkImageRTKPython:
_itkImageRTKPython.vectoritkImageUC1_swigregister(vectoritkImageUC1)

class vectoritkImageF1(object):
    r"""Proxy of C++ std::vector< itkImageF1_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageF1_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageF1___nonzero__)
    __bool__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageF1___bool__)
    __len__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageF1___len__)
    __getslice__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageF1___getslice__)
    __setslice__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageF1___setslice__)
    __delslice__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageF1___delslice__)
    __delitem__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageF1___delitem__)
    __getitem__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageF1___getitem__)
    __setitem__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageF1___setitem__)
    pop = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageF1_pop)
    append = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageF1_append)
    empty = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageF1_empty)
    size = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageF1_size)
    swap = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageF1_swap)
    begin = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageF1_begin)
    end = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageF1_end)
    rbegin = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageF1_rbegin)
    rend = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageF1_rend)
    clear = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageF1_clear)
    get_allocator = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageF1_get_allocator)
    pop_back = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageF1_pop_back)
    erase = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageF1_erase)

    def __init__(self, *args):
        r"""
        __init__(vectoritkImageF1 self) -> vectoritkImageF1
        __init__(vectoritkImageF1 self, vectoritkImageF1 other) -> vectoritkImageF1
        __init__(vectoritkImageF1 self, std::vector< itkImageF1_Pointer >::size_type size) -> vectoritkImageF1
        __init__(vectoritkImageF1 self, std::vector< itkImageF1_Pointer >::size_type size, std::vector< itkImageF1_Pointer >::value_type const & value) -> vectoritkImageF1
        """
        _itkImageRTKPython.vectoritkImageF1_swiginit(self, _itkImageRTKPython.new_vectoritkImageF1(*args))
    push_back = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageF1_push_back)
    front = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageF1_front)
    back = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageF1_back)
    assign = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageF1_assign)
    resize = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageF1_resize)
    insert = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageF1_insert)
    reserve = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageF1_reserve)
    capacity = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageF1_capacity)
    __swig_destroy__ = _itkImageRTKPython.delete_vectoritkImageF1

# Register vectoritkImageF1 in _itkImageRTKPython:
_itkImageRTKPython.vectoritkImageF1_swigregister(vectoritkImageF1)

class vectoritkImageD1(object):
    r"""Proxy of C++ std::vector< itkImageD1_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageD1_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageD1___nonzero__)
    __bool__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageD1___bool__)
    __len__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageD1___len__)
    __getslice__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageD1___getslice__)
    __setslice__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageD1___setslice__)
    __delslice__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageD1___delslice__)
    __delitem__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageD1___delitem__)
    __getitem__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageD1___getitem__)
    __setitem__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageD1___setitem__)
    pop = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageD1_pop)
    append = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageD1_append)
    empty = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageD1_empty)
    size = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageD1_size)
    swap = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageD1_swap)
    begin = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageD1_begin)
    end = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageD1_end)
    rbegin = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageD1_rbegin)
    rend = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageD1_rend)
    clear = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageD1_clear)
    get_allocator = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageD1_get_allocator)
    pop_back = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageD1_pop_back)
    erase = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageD1_erase)

    def __init__(self, *args):
        r"""
        __init__(vectoritkImageD1 self) -> vectoritkImageD1
        __init__(vectoritkImageD1 self, vectoritkImageD1 other) -> vectoritkImageD1
        __init__(vectoritkImageD1 self, std::vector< itkImageD1_Pointer >::size_type size) -> vectoritkImageD1
        __init__(vectoritkImageD1 self, std::vector< itkImageD1_Pointer >::size_type size, std::vector< itkImageD1_Pointer >::value_type const & value) -> vectoritkImageD1
        """
        _itkImageRTKPython.vectoritkImageD1_swiginit(self, _itkImageRTKPython.new_vectoritkImageD1(*args))
    push_back = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageD1_push_back)
    front = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageD1_front)
    back = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageD1_back)
    assign = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageD1_assign)
    resize = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageD1_resize)
    insert = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageD1_insert)
    reserve = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageD1_reserve)
    capacity = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageD1_capacity)
    __swig_destroy__ = _itkImageRTKPython.delete_vectoritkImageD1

# Register vectoritkImageD1 in _itkImageRTKPython:
_itkImageRTKPython.vectoritkImageD1_swigregister(vectoritkImageD1)

class vectoritkImageF4(object):
    r"""Proxy of C++ std::vector< itkImageF4_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageF4_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageF4___nonzero__)
    __bool__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageF4___bool__)
    __len__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageF4___len__)
    __getslice__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageF4___getslice__)
    __setslice__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageF4___setslice__)
    __delslice__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageF4___delslice__)
    __delitem__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageF4___delitem__)
    __getitem__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageF4___getitem__)
    __setitem__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageF4___setitem__)
    pop = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageF4_pop)
    append = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageF4_append)
    empty = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageF4_empty)
    size = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageF4_size)
    swap = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageF4_swap)
    begin = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageF4_begin)
    end = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageF4_end)
    rbegin = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageF4_rbegin)
    rend = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageF4_rend)
    clear = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageF4_clear)
    get_allocator = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageF4_get_allocator)
    pop_back = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageF4_pop_back)
    erase = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageF4_erase)

    def __init__(self, *args):
        r"""
        __init__(vectoritkImageF4 self) -> vectoritkImageF4
        __init__(vectoritkImageF4 self, vectoritkImageF4 other) -> vectoritkImageF4
        __init__(vectoritkImageF4 self, std::vector< itkImageF4_Pointer >::size_type size) -> vectoritkImageF4
        __init__(vectoritkImageF4 self, std::vector< itkImageF4_Pointer >::size_type size, std::vector< itkImageF4_Pointer >::value_type const & value) -> vectoritkImageF4
        """
        _itkImageRTKPython.vectoritkImageF4_swiginit(self, _itkImageRTKPython.new_vectoritkImageF4(*args))
    push_back = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageF4_push_back)
    front = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageF4_front)
    back = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageF4_back)
    assign = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageF4_assign)
    resize = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageF4_resize)
    insert = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageF4_insert)
    reserve = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageF4_reserve)
    capacity = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageF4_capacity)
    __swig_destroy__ = _itkImageRTKPython.delete_vectoritkImageF4

# Register vectoritkImageF4 in _itkImageRTKPython:
_itkImageRTKPython.vectoritkImageF4_swigregister(vectoritkImageF4)

class vectoritkImageD4(object):
    r"""Proxy of C++ std::vector< itkImageD4_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageD4_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageD4___nonzero__)
    __bool__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageD4___bool__)
    __len__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageD4___len__)
    __getslice__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageD4___getslice__)
    __setslice__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageD4___setslice__)
    __delslice__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageD4___delslice__)
    __delitem__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageD4___delitem__)
    __getitem__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageD4___getitem__)
    __setitem__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageD4___setitem__)
    pop = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageD4_pop)
    append = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageD4_append)
    empty = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageD4_empty)
    size = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageD4_size)
    swap = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageD4_swap)
    begin = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageD4_begin)
    end = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageD4_end)
    rbegin = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageD4_rbegin)
    rend = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageD4_rend)
    clear = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageD4_clear)
    get_allocator = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageD4_get_allocator)
    pop_back = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageD4_pop_back)
    erase = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageD4_erase)

    def __init__(self, *args):
        r"""
        __init__(vectoritkImageD4 self) -> vectoritkImageD4
        __init__(vectoritkImageD4 self, vectoritkImageD4 other) -> vectoritkImageD4
        __init__(vectoritkImageD4 self, std::vector< itkImageD4_Pointer >::size_type size) -> vectoritkImageD4
        __init__(vectoritkImageD4 self, std::vector< itkImageD4_Pointer >::size_type size, std::vector< itkImageD4_Pointer >::value_type const & value) -> vectoritkImageD4
        """
        _itkImageRTKPython.vectoritkImageD4_swiginit(self, _itkImageRTKPython.new_vectoritkImageD4(*args))
    push_back = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageD4_push_back)
    front = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageD4_front)
    back = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageD4_back)
    assign = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageD4_assign)
    resize = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageD4_resize)
    insert = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageD4_insert)
    reserve = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageD4_reserve)
    capacity = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageD4_capacity)
    __swig_destroy__ = _itkImageRTKPython.delete_vectoritkImageD4

# Register vectoritkImageD4 in _itkImageRTKPython:
_itkImageRTKPython.vectoritkImageD4_swigregister(vectoritkImageD4)

class vectoritkImageVF52(object):
    r"""Proxy of C++ std::vector< itkImageVF52_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF52_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF52___nonzero__)
    __bool__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF52___bool__)
    __len__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF52___len__)
    __getslice__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF52___getslice__)
    __setslice__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF52___setslice__)
    __delslice__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF52___delslice__)
    __delitem__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF52___delitem__)
    __getitem__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF52___getitem__)
    __setitem__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF52___setitem__)
    pop = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF52_pop)
    append = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF52_append)
    empty = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF52_empty)
    size = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF52_size)
    swap = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF52_swap)
    begin = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF52_begin)
    end = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF52_end)
    rbegin = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF52_rbegin)
    rend = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF52_rend)
    clear = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF52_clear)
    get_allocator = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF52_get_allocator)
    pop_back = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF52_pop_back)
    erase = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF52_erase)

    def __init__(self, *args):
        r"""
        __init__(vectoritkImageVF52 self) -> vectoritkImageVF52
        __init__(vectoritkImageVF52 self, vectoritkImageVF52 other) -> vectoritkImageVF52
        __init__(vectoritkImageVF52 self, std::vector< itkImageVF52_Pointer >::size_type size) -> vectoritkImageVF52
        __init__(vectoritkImageVF52 self, std::vector< itkImageVF52_Pointer >::size_type size, std::vector< itkImageVF52_Pointer >::value_type const & value) -> vectoritkImageVF52
        """
        _itkImageRTKPython.vectoritkImageVF52_swiginit(self, _itkImageRTKPython.new_vectoritkImageVF52(*args))
    push_back = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF52_push_back)
    front = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF52_front)
    back = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF52_back)
    assign = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF52_assign)
    resize = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF52_resize)
    insert = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF52_insert)
    reserve = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF52_reserve)
    capacity = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF52_capacity)
    __swig_destroy__ = _itkImageRTKPython.delete_vectoritkImageVF52

# Register vectoritkImageVF52 in _itkImageRTKPython:
_itkImageRTKPython.vectoritkImageVF52_swigregister(vectoritkImageVF52)

class vectoritkImageCVF52(object):
    r"""Proxy of C++ std::vector< itkImageCVF52_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF52_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF52___nonzero__)
    __bool__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF52___bool__)
    __len__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF52___len__)
    __getslice__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF52___getslice__)
    __setslice__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF52___setslice__)
    __delslice__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF52___delslice__)
    __delitem__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF52___delitem__)
    __getitem__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF52___getitem__)
    __setitem__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF52___setitem__)
    pop = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF52_pop)
    append = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF52_append)
    empty = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF52_empty)
    size = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF52_size)
    swap = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF52_swap)
    begin = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF52_begin)
    end = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF52_end)
    rbegin = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF52_rbegin)
    rend = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF52_rend)
    clear = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF52_clear)
    get_allocator = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF52_get_allocator)
    pop_back = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF52_pop_back)
    erase = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF52_erase)

    def __init__(self, *args):
        r"""
        __init__(vectoritkImageCVF52 self) -> vectoritkImageCVF52
        __init__(vectoritkImageCVF52 self, vectoritkImageCVF52 other) -> vectoritkImageCVF52
        __init__(vectoritkImageCVF52 self, std::vector< itkImageCVF52_Pointer >::size_type size) -> vectoritkImageCVF52
        __init__(vectoritkImageCVF52 self, std::vector< itkImageCVF52_Pointer >::size_type size, std::vector< itkImageCVF52_Pointer >::value_type const & value) -> vectoritkImageCVF52
        """
        _itkImageRTKPython.vectoritkImageCVF52_swiginit(self, _itkImageRTKPython.new_vectoritkImageCVF52(*args))
    push_back = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF52_push_back)
    front = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF52_front)
    back = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF52_back)
    assign = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF52_assign)
    resize = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF52_resize)
    insert = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF52_insert)
    reserve = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF52_reserve)
    capacity = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF52_capacity)
    __swig_destroy__ = _itkImageRTKPython.delete_vectoritkImageCVF52

# Register vectoritkImageCVF52 in _itkImageRTKPython:
_itkImageRTKPython.vectoritkImageCVF52_swigregister(vectoritkImageCVF52)

class vectoritkImageVF53(object):
    r"""Proxy of C++ std::vector< itkImageVF53_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF53_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF53___nonzero__)
    __bool__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF53___bool__)
    __len__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF53___len__)
    __getslice__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF53___getslice__)
    __setslice__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF53___setslice__)
    __delslice__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF53___delslice__)
    __delitem__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF53___delitem__)
    __getitem__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF53___getitem__)
    __setitem__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF53___setitem__)
    pop = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF53_pop)
    append = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF53_append)
    empty = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF53_empty)
    size = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF53_size)
    swap = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF53_swap)
    begin = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF53_begin)
    end = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF53_end)
    rbegin = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF53_rbegin)
    rend = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF53_rend)
    clear = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF53_clear)
    get_allocator = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF53_get_allocator)
    pop_back = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF53_pop_back)
    erase = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF53_erase)

    def __init__(self, *args):
        r"""
        __init__(vectoritkImageVF53 self) -> vectoritkImageVF53
        __init__(vectoritkImageVF53 self, vectoritkImageVF53 other) -> vectoritkImageVF53
        __init__(vectoritkImageVF53 self, std::vector< itkImageVF53_Pointer >::size_type size) -> vectoritkImageVF53
        __init__(vectoritkImageVF53 self, std::vector< itkImageVF53_Pointer >::size_type size, std::vector< itkImageVF53_Pointer >::value_type const & value) -> vectoritkImageVF53
        """
        _itkImageRTKPython.vectoritkImageVF53_swiginit(self, _itkImageRTKPython.new_vectoritkImageVF53(*args))
    push_back = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF53_push_back)
    front = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF53_front)
    back = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF53_back)
    assign = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF53_assign)
    resize = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF53_resize)
    insert = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF53_insert)
    reserve = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF53_reserve)
    capacity = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF53_capacity)
    __swig_destroy__ = _itkImageRTKPython.delete_vectoritkImageVF53

# Register vectoritkImageVF53 in _itkImageRTKPython:
_itkImageRTKPython.vectoritkImageVF53_swigregister(vectoritkImageVF53)

class vectoritkImageCVF53(object):
    r"""Proxy of C++ std::vector< itkImageCVF53_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF53_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF53___nonzero__)
    __bool__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF53___bool__)
    __len__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF53___len__)
    __getslice__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF53___getslice__)
    __setslice__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF53___setslice__)
    __delslice__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF53___delslice__)
    __delitem__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF53___delitem__)
    __getitem__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF53___getitem__)
    __setitem__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF53___setitem__)
    pop = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF53_pop)
    append = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF53_append)
    empty = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF53_empty)
    size = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF53_size)
    swap = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF53_swap)
    begin = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF53_begin)
    end = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF53_end)
    rbegin = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF53_rbegin)
    rend = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF53_rend)
    clear = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF53_clear)
    get_allocator = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF53_get_allocator)
    pop_back = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF53_pop_back)
    erase = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF53_erase)

    def __init__(self, *args):
        r"""
        __init__(vectoritkImageCVF53 self) -> vectoritkImageCVF53
        __init__(vectoritkImageCVF53 self, vectoritkImageCVF53 other) -> vectoritkImageCVF53
        __init__(vectoritkImageCVF53 self, std::vector< itkImageCVF53_Pointer >::size_type size) -> vectoritkImageCVF53
        __init__(vectoritkImageCVF53 self, std::vector< itkImageCVF53_Pointer >::size_type size, std::vector< itkImageCVF53_Pointer >::value_type const & value) -> vectoritkImageCVF53
        """
        _itkImageRTKPython.vectoritkImageCVF53_swiginit(self, _itkImageRTKPython.new_vectoritkImageCVF53(*args))
    push_back = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF53_push_back)
    front = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF53_front)
    back = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF53_back)
    assign = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF53_assign)
    resize = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF53_resize)
    insert = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF53_insert)
    reserve = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF53_reserve)
    capacity = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF53_capacity)
    __swig_destroy__ = _itkImageRTKPython.delete_vectoritkImageCVF53

# Register vectoritkImageCVF53 in _itkImageRTKPython:
_itkImageRTKPython.vectoritkImageCVF53_swigregister(vectoritkImageCVF53)

class vectoritkImageVF54(object):
    r"""Proxy of C++ std::vector< itkImageVF54_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF54_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF54___nonzero__)
    __bool__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF54___bool__)
    __len__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF54___len__)
    __getslice__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF54___getslice__)
    __setslice__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF54___setslice__)
    __delslice__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF54___delslice__)
    __delitem__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF54___delitem__)
    __getitem__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF54___getitem__)
    __setitem__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF54___setitem__)
    pop = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF54_pop)
    append = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF54_append)
    empty = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF54_empty)
    size = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF54_size)
    swap = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF54_swap)
    begin = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF54_begin)
    end = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF54_end)
    rbegin = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF54_rbegin)
    rend = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF54_rend)
    clear = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF54_clear)
    get_allocator = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF54_get_allocator)
    pop_back = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF54_pop_back)
    erase = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF54_erase)

    def __init__(self, *args):
        r"""
        __init__(vectoritkImageVF54 self) -> vectoritkImageVF54
        __init__(vectoritkImageVF54 self, vectoritkImageVF54 other) -> vectoritkImageVF54
        __init__(vectoritkImageVF54 self, std::vector< itkImageVF54_Pointer >::size_type size) -> vectoritkImageVF54
        __init__(vectoritkImageVF54 self, std::vector< itkImageVF54_Pointer >::size_type size, std::vector< itkImageVF54_Pointer >::value_type const & value) -> vectoritkImageVF54
        """
        _itkImageRTKPython.vectoritkImageVF54_swiginit(self, _itkImageRTKPython.new_vectoritkImageVF54(*args))
    push_back = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF54_push_back)
    front = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF54_front)
    back = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF54_back)
    assign = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF54_assign)
    resize = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF54_resize)
    insert = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF54_insert)
    reserve = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF54_reserve)
    capacity = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF54_capacity)
    __swig_destroy__ = _itkImageRTKPython.delete_vectoritkImageVF54

# Register vectoritkImageVF54 in _itkImageRTKPython:
_itkImageRTKPython.vectoritkImageVF54_swigregister(vectoritkImageVF54)

class vectoritkImageCVF54(object):
    r"""Proxy of C++ std::vector< itkImageCVF54_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF54_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF54___nonzero__)
    __bool__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF54___bool__)
    __len__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF54___len__)
    __getslice__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF54___getslice__)
    __setslice__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF54___setslice__)
    __delslice__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF54___delslice__)
    __delitem__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF54___delitem__)
    __getitem__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF54___getitem__)
    __setitem__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF54___setitem__)
    pop = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF54_pop)
    append = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF54_append)
    empty = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF54_empty)
    size = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF54_size)
    swap = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF54_swap)
    begin = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF54_begin)
    end = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF54_end)
    rbegin = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF54_rbegin)
    rend = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF54_rend)
    clear = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF54_clear)
    get_allocator = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF54_get_allocator)
    pop_back = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF54_pop_back)
    erase = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF54_erase)

    def __init__(self, *args):
        r"""
        __init__(vectoritkImageCVF54 self) -> vectoritkImageCVF54
        __init__(vectoritkImageCVF54 self, vectoritkImageCVF54 other) -> vectoritkImageCVF54
        __init__(vectoritkImageCVF54 self, std::vector< itkImageCVF54_Pointer >::size_type size) -> vectoritkImageCVF54
        __init__(vectoritkImageCVF54 self, std::vector< itkImageCVF54_Pointer >::size_type size, std::vector< itkImageCVF54_Pointer >::value_type const & value) -> vectoritkImageCVF54
        """
        _itkImageRTKPython.vectoritkImageCVF54_swiginit(self, _itkImageRTKPython.new_vectoritkImageCVF54(*args))
    push_back = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF54_push_back)
    front = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF54_front)
    back = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF54_back)
    assign = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF54_assign)
    resize = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF54_resize)
    insert = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF54_insert)
    reserve = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF54_reserve)
    capacity = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF54_capacity)
    __swig_destroy__ = _itkImageRTKPython.delete_vectoritkImageCVF54

# Register vectoritkImageCVF54 in _itkImageRTKPython:
_itkImageRTKPython.vectoritkImageCVF54_swigregister(vectoritkImageCVF54)

class vectoritkImageVF24(object):
    r"""Proxy of C++ std::vector< itkImageVF24_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF24_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF24___nonzero__)
    __bool__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF24___bool__)
    __len__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF24___len__)
    __getslice__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF24___getslice__)
    __setslice__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF24___setslice__)
    __delslice__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF24___delslice__)
    __delitem__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF24___delitem__)
    __getitem__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF24___getitem__)
    __setitem__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF24___setitem__)
    pop = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF24_pop)
    append = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF24_append)
    empty = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF24_empty)
    size = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF24_size)
    swap = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF24_swap)
    begin = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF24_begin)
    end = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF24_end)
    rbegin = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF24_rbegin)
    rend = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF24_rend)
    clear = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF24_clear)
    get_allocator = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF24_get_allocator)
    pop_back = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF24_pop_back)
    erase = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF24_erase)

    def __init__(self, *args):
        r"""
        __init__(vectoritkImageVF24 self) -> vectoritkImageVF24
        __init__(vectoritkImageVF24 self, vectoritkImageVF24 other) -> vectoritkImageVF24
        __init__(vectoritkImageVF24 self, std::vector< itkImageVF24_Pointer >::size_type size) -> vectoritkImageVF24
        __init__(vectoritkImageVF24 self, std::vector< itkImageVF24_Pointer >::size_type size, std::vector< itkImageVF24_Pointer >::value_type const & value) -> vectoritkImageVF24
        """
        _itkImageRTKPython.vectoritkImageVF24_swiginit(self, _itkImageRTKPython.new_vectoritkImageVF24(*args))
    push_back = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF24_push_back)
    front = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF24_front)
    back = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF24_back)
    assign = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF24_assign)
    resize = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF24_resize)
    insert = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF24_insert)
    reserve = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF24_reserve)
    capacity = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF24_capacity)
    __swig_destroy__ = _itkImageRTKPython.delete_vectoritkImageVF24

# Register vectoritkImageVF24 in _itkImageRTKPython:
_itkImageRTKPython.vectoritkImageVF24_swigregister(vectoritkImageVF24)

class vectoritkImageCVF24(object):
    r"""Proxy of C++ std::vector< itkImageCVF24_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF24_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF24___nonzero__)
    __bool__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF24___bool__)
    __len__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF24___len__)
    __getslice__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF24___getslice__)
    __setslice__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF24___setslice__)
    __delslice__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF24___delslice__)
    __delitem__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF24___delitem__)
    __getitem__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF24___getitem__)
    __setitem__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF24___setitem__)
    pop = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF24_pop)
    append = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF24_append)
    empty = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF24_empty)
    size = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF24_size)
    swap = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF24_swap)
    begin = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF24_begin)
    end = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF24_end)
    rbegin = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF24_rbegin)
    rend = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF24_rend)
    clear = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF24_clear)
    get_allocator = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF24_get_allocator)
    pop_back = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF24_pop_back)
    erase = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF24_erase)

    def __init__(self, *args):
        r"""
        __init__(vectoritkImageCVF24 self) -> vectoritkImageCVF24
        __init__(vectoritkImageCVF24 self, vectoritkImageCVF24 other) -> vectoritkImageCVF24
        __init__(vectoritkImageCVF24 self, std::vector< itkImageCVF24_Pointer >::size_type size) -> vectoritkImageCVF24
        __init__(vectoritkImageCVF24 self, std::vector< itkImageCVF24_Pointer >::size_type size, std::vector< itkImageCVF24_Pointer >::value_type const & value) -> vectoritkImageCVF24
        """
        _itkImageRTKPython.vectoritkImageCVF24_swiginit(self, _itkImageRTKPython.new_vectoritkImageCVF24(*args))
    push_back = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF24_push_back)
    front = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF24_front)
    back = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF24_back)
    assign = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF24_assign)
    resize = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF24_resize)
    insert = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF24_insert)
    reserve = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF24_reserve)
    capacity = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF24_capacity)
    __swig_destroy__ = _itkImageRTKPython.delete_vectoritkImageCVF24

# Register vectoritkImageCVF24 in _itkImageRTKPython:
_itkImageRTKPython.vectoritkImageCVF24_swigregister(vectoritkImageCVF24)

class vectoritkImageVF34(object):
    r"""Proxy of C++ std::vector< itkImageVF34_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF34_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF34___nonzero__)
    __bool__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF34___bool__)
    __len__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF34___len__)
    __getslice__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF34___getslice__)
    __setslice__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF34___setslice__)
    __delslice__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF34___delslice__)
    __delitem__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF34___delitem__)
    __getitem__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF34___getitem__)
    __setitem__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF34___setitem__)
    pop = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF34_pop)
    append = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF34_append)
    empty = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF34_empty)
    size = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF34_size)
    swap = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF34_swap)
    begin = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF34_begin)
    end = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF34_end)
    rbegin = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF34_rbegin)
    rend = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF34_rend)
    clear = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF34_clear)
    get_allocator = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF34_get_allocator)
    pop_back = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF34_pop_back)
    erase = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF34_erase)

    def __init__(self, *args):
        r"""
        __init__(vectoritkImageVF34 self) -> vectoritkImageVF34
        __init__(vectoritkImageVF34 self, vectoritkImageVF34 other) -> vectoritkImageVF34
        __init__(vectoritkImageVF34 self, std::vector< itkImageVF34_Pointer >::size_type size) -> vectoritkImageVF34
        __init__(vectoritkImageVF34 self, std::vector< itkImageVF34_Pointer >::size_type size, std::vector< itkImageVF34_Pointer >::value_type const & value) -> vectoritkImageVF34
        """
        _itkImageRTKPython.vectoritkImageVF34_swiginit(self, _itkImageRTKPython.new_vectoritkImageVF34(*args))
    push_back = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF34_push_back)
    front = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF34_front)
    back = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF34_back)
    assign = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF34_assign)
    resize = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF34_resize)
    insert = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF34_insert)
    reserve = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF34_reserve)
    capacity = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF34_capacity)
    __swig_destroy__ = _itkImageRTKPython.delete_vectoritkImageVF34

# Register vectoritkImageVF34 in _itkImageRTKPython:
_itkImageRTKPython.vectoritkImageVF34_swigregister(vectoritkImageVF34)

class vectoritkImageCVF34(object):
    r"""Proxy of C++ std::vector< itkImageCVF34_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF34_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF34___nonzero__)
    __bool__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF34___bool__)
    __len__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF34___len__)
    __getslice__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF34___getslice__)
    __setslice__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF34___setslice__)
    __delslice__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF34___delslice__)
    __delitem__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF34___delitem__)
    __getitem__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF34___getitem__)
    __setitem__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF34___setitem__)
    pop = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF34_pop)
    append = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF34_append)
    empty = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF34_empty)
    size = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF34_size)
    swap = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF34_swap)
    begin = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF34_begin)
    end = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF34_end)
    rbegin = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF34_rbegin)
    rend = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF34_rend)
    clear = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF34_clear)
    get_allocator = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF34_get_allocator)
    pop_back = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF34_pop_back)
    erase = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF34_erase)

    def __init__(self, *args):
        r"""
        __init__(vectoritkImageCVF34 self) -> vectoritkImageCVF34
        __init__(vectoritkImageCVF34 self, vectoritkImageCVF34 other) -> vectoritkImageCVF34
        __init__(vectoritkImageCVF34 self, std::vector< itkImageCVF34_Pointer >::size_type size) -> vectoritkImageCVF34
        __init__(vectoritkImageCVF34 self, std::vector< itkImageCVF34_Pointer >::size_type size, std::vector< itkImageCVF34_Pointer >::value_type const & value) -> vectoritkImageCVF34
        """
        _itkImageRTKPython.vectoritkImageCVF34_swiginit(self, _itkImageRTKPython.new_vectoritkImageCVF34(*args))
    push_back = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF34_push_back)
    front = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF34_front)
    back = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF34_back)
    assign = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF34_assign)
    resize = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF34_resize)
    insert = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF34_insert)
    reserve = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF34_reserve)
    capacity = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF34_capacity)
    __swig_destroy__ = _itkImageRTKPython.delete_vectoritkImageCVF34

# Register vectoritkImageCVF34 in _itkImageRTKPython:
_itkImageRTKPython.vectoritkImageCVF34_swigregister(vectoritkImageCVF34)

class vectoritkImageVF44(object):
    r"""Proxy of C++ std::vector< itkImageVF44_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF44_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF44___nonzero__)
    __bool__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF44___bool__)
    __len__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF44___len__)
    __getslice__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF44___getslice__)
    __setslice__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF44___setslice__)
    __delslice__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF44___delslice__)
    __delitem__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF44___delitem__)
    __getitem__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF44___getitem__)
    __setitem__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF44___setitem__)
    pop = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF44_pop)
    append = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF44_append)
    empty = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF44_empty)
    size = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF44_size)
    swap = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF44_swap)
    begin = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF44_begin)
    end = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF44_end)
    rbegin = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF44_rbegin)
    rend = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF44_rend)
    clear = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF44_clear)
    get_allocator = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF44_get_allocator)
    pop_back = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF44_pop_back)
    erase = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF44_erase)

    def __init__(self, *args):
        r"""
        __init__(vectoritkImageVF44 self) -> vectoritkImageVF44
        __init__(vectoritkImageVF44 self, vectoritkImageVF44 other) -> vectoritkImageVF44
        __init__(vectoritkImageVF44 self, std::vector< itkImageVF44_Pointer >::size_type size) -> vectoritkImageVF44
        __init__(vectoritkImageVF44 self, std::vector< itkImageVF44_Pointer >::size_type size, std::vector< itkImageVF44_Pointer >::value_type const & value) -> vectoritkImageVF44
        """
        _itkImageRTKPython.vectoritkImageVF44_swiginit(self, _itkImageRTKPython.new_vectoritkImageVF44(*args))
    push_back = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF44_push_back)
    front = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF44_front)
    back = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF44_back)
    assign = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF44_assign)
    resize = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF44_resize)
    insert = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF44_insert)
    reserve = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF44_reserve)
    capacity = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF44_capacity)
    __swig_destroy__ = _itkImageRTKPython.delete_vectoritkImageVF44

# Register vectoritkImageVF44 in _itkImageRTKPython:
_itkImageRTKPython.vectoritkImageVF44_swigregister(vectoritkImageVF44)

class vectoritkImageCVF44(object):
    r"""Proxy of C++ std::vector< itkImageCVF44_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF44_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF44___nonzero__)
    __bool__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF44___bool__)
    __len__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF44___len__)
    __getslice__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF44___getslice__)
    __setslice__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF44___setslice__)
    __delslice__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF44___delslice__)
    __delitem__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF44___delitem__)
    __getitem__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF44___getitem__)
    __setitem__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF44___setitem__)
    pop = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF44_pop)
    append = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF44_append)
    empty = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF44_empty)
    size = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF44_size)
    swap = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF44_swap)
    begin = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF44_begin)
    end = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF44_end)
    rbegin = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF44_rbegin)
    rend = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF44_rend)
    clear = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF44_clear)
    get_allocator = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF44_get_allocator)
    pop_back = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF44_pop_back)
    erase = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF44_erase)

    def __init__(self, *args):
        r"""
        __init__(vectoritkImageCVF44 self) -> vectoritkImageCVF44
        __init__(vectoritkImageCVF44 self, vectoritkImageCVF44 other) -> vectoritkImageCVF44
        __init__(vectoritkImageCVF44 self, std::vector< itkImageCVF44_Pointer >::size_type size) -> vectoritkImageCVF44
        __init__(vectoritkImageCVF44 self, std::vector< itkImageCVF44_Pointer >::size_type size, std::vector< itkImageCVF44_Pointer >::value_type const & value) -> vectoritkImageCVF44
        """
        _itkImageRTKPython.vectoritkImageCVF44_swiginit(self, _itkImageRTKPython.new_vectoritkImageCVF44(*args))
    push_back = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF44_push_back)
    front = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF44_front)
    back = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF44_back)
    assign = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF44_assign)
    resize = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF44_resize)
    insert = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF44_insert)
    reserve = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF44_reserve)
    capacity = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF44_capacity)
    __swig_destroy__ = _itkImageRTKPython.delete_vectoritkImageCVF44

# Register vectoritkImageCVF44 in _itkImageRTKPython:
_itkImageRTKPython.vectoritkImageCVF44_swigregister(vectoritkImageCVF44)

class vectoritkImageCVD53(object):
    r"""Proxy of C++ std::vector< itkImageCVD53_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVD53_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVD53___nonzero__)
    __bool__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVD53___bool__)
    __len__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVD53___len__)
    __getslice__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVD53___getslice__)
    __setslice__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVD53___setslice__)
    __delslice__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVD53___delslice__)
    __delitem__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVD53___delitem__)
    __getitem__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVD53___getitem__)
    __setitem__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVD53___setitem__)
    pop = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVD53_pop)
    append = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVD53_append)
    empty = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVD53_empty)
    size = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVD53_size)
    swap = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVD53_swap)
    begin = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVD53_begin)
    end = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVD53_end)
    rbegin = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVD53_rbegin)
    rend = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVD53_rend)
    clear = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVD53_clear)
    get_allocator = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVD53_get_allocator)
    pop_back = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVD53_pop_back)
    erase = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVD53_erase)

    def __init__(self, *args):
        r"""
        __init__(vectoritkImageCVD53 self) -> vectoritkImageCVD53
        __init__(vectoritkImageCVD53 self, vectoritkImageCVD53 other) -> vectoritkImageCVD53
        __init__(vectoritkImageCVD53 self, std::vector< itkImageCVD53_Pointer >::size_type size) -> vectoritkImageCVD53
        __init__(vectoritkImageCVD53 self, std::vector< itkImageCVD53_Pointer >::size_type size, std::vector< itkImageCVD53_Pointer >::value_type const & value) -> vectoritkImageCVD53
        """
        _itkImageRTKPython.vectoritkImageCVD53_swiginit(self, _itkImageRTKPython.new_vectoritkImageCVD53(*args))
    push_back = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVD53_push_back)
    front = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVD53_front)
    back = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVD53_back)
    assign = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVD53_assign)
    resize = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVD53_resize)
    insert = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVD53_insert)
    reserve = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVD53_reserve)
    capacity = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVD53_capacity)
    __swig_destroy__ = _itkImageRTKPython.delete_vectoritkImageCVD53

# Register vectoritkImageCVD53 in _itkImageRTKPython:
_itkImageRTKPython.vectoritkImageCVD53_swigregister(vectoritkImageCVD53)


def itkImageCVD53_New():
    return itkImageCVD53.New()

class itkImageCVD53(itk.itkImagePython.itkImageBase3):
    r"""Proxy of C++ itkImageCVD53 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageRTKPython.itkImageCVD53___New_orig__)
    Clone = _swig_new_instance_method(_itkImageRTKPython.itkImageCVD53_Clone)
    Allocate = _swig_new_instance_method(_itkImageRTKPython.itkImageCVD53_Allocate)
    FillBuffer = _swig_new_instance_method(_itkImageRTKPython.itkImageCVD53_FillBuffer)
    SetPixel = _swig_new_instance_method(_itkImageRTKPython.itkImageCVD53_SetPixel)
    GetPixel = _swig_new_instance_method(_itkImageRTKPython.itkImageCVD53_GetPixel)
    GetBufferPointer = _swig_new_instance_method(_itkImageRTKPython.itkImageCVD53_GetBufferPointer)
    GetPixelContainer = _swig_new_instance_method(_itkImageRTKPython.itkImageCVD53_GetPixelContainer)
    SetPixelContainer = _swig_new_instance_method(_itkImageRTKPython.itkImageCVD53_SetPixelContainer)
    Graft = _swig_new_instance_method(_itkImageRTKPython.itkImageCVD53_Graft)
    GetPixelAccessor = _swig_new_instance_method(_itkImageRTKPython.itkImageCVD53_GetPixelAccessor)
    GetNeighborhoodAccessor = _swig_new_instance_method(_itkImageRTKPython.itkImageCVD53_GetNeighborhoodAccessor)
    __swig_destroy__ = _itkImageRTKPython.delete_itkImageCVD53
    cast = _swig_new_static_method(_itkImageRTKPython.itkImageCVD53_cast)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageCVD53

        Create a new object of the class itkImageCVD53 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageCVD53.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageCVD53.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageCVD53.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageCVD53 in _itkImageRTKPython:
_itkImageRTKPython.itkImageCVD53_swigregister(itkImageCVD53)
itkImageCVD53___New_orig__ = _itkImageRTKPython.itkImageCVD53___New_orig__
itkImageCVD53_cast = _itkImageRTKPython.itkImageCVD53_cast


def itkImageCVF24_New():
    return itkImageCVF24.New()

class itkImageCVF24(itk.itkImagePython.itkImageBase4):
    r"""Proxy of C++ itkImageCVF24 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageRTKPython.itkImageCVF24___New_orig__)
    Clone = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF24_Clone)
    Allocate = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF24_Allocate)
    FillBuffer = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF24_FillBuffer)
    SetPixel = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF24_SetPixel)
    GetPixel = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF24_GetPixel)
    GetBufferPointer = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF24_GetBufferPointer)
    GetPixelContainer = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF24_GetPixelContainer)
    SetPixelContainer = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF24_SetPixelContainer)
    Graft = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF24_Graft)
    GetPixelAccessor = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF24_GetPixelAccessor)
    GetNeighborhoodAccessor = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF24_GetNeighborhoodAccessor)
    __swig_destroy__ = _itkImageRTKPython.delete_itkImageCVF24
    cast = _swig_new_static_method(_itkImageRTKPython.itkImageCVF24_cast)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageCVF24

        Create a new object of the class itkImageCVF24 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageCVF24.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageCVF24.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageCVF24.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageCVF24 in _itkImageRTKPython:
_itkImageRTKPython.itkImageCVF24_swigregister(itkImageCVF24)
itkImageCVF24___New_orig__ = _itkImageRTKPython.itkImageCVF24___New_orig__
itkImageCVF24_cast = _itkImageRTKPython.itkImageCVF24_cast

class itkImageCVF24_ConstPointer(object):
    r"""Proxy of C++ itkImageCVF24_ConstPointer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(itkImageCVF24_ConstPointer self) -> itkImageCVF24_ConstPointer
        __init__(itkImageCVF24_ConstPointer self, itkImageCVF24_ConstPointer p) -> itkImageCVF24_ConstPointer
        __init__(itkImageCVF24_ConstPointer self, itkImageCVF24 p) -> itkImageCVF24_ConstPointer
        """
        _itkImageRTKPython.itkImageCVF24_ConstPointer_swiginit(self, _itkImageRTKPython.new_itkImageCVF24_ConstPointer(*args))
    __swig_destroy__ = _itkImageRTKPython.delete_itkImageCVF24_ConstPointer
    __deref__ = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF24_ConstPointer___deref__)
    __ref__ = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF24_ConstPointer___ref__)
    IsNotNull = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF24_ConstPointer_IsNotNull)
    IsNull = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF24_ConstPointer_IsNull)
    GetPointer = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF24_ConstPointer_GetPointer)
    Print = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF24_ConstPointer_Print)
    Swap = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF24_ConstPointer_Swap)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)

    Clone = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF24_ConstPointer_Clone)
    GetBufferPointer = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF24_ConstPointer_GetBufferPointer)
    GetPixelContainer = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF24_ConstPointer_GetPixelContainer)
    GetPixelAccessor = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF24_ConstPointer_GetPixelAccessor)
    GetNeighborhoodAccessor = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF24_ConstPointer_GetNeighborhoodAccessor)
    GetDirection = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF24_ConstPointer_GetDirection)
    GetInverseDirection = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF24_ConstPointer_GetInverseDirection)
    GetSpacing = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF24_ConstPointer_GetSpacing)
    GetOrigin = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF24_ConstPointer_GetOrigin)
    __GetLargestPossibleRegion_orig__ = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF24_ConstPointer___GetLargestPossibleRegion_orig__)
    __GetBufferedRegion_orig__ = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF24_ConstPointer___GetBufferedRegion_orig__)
    __GetRequestedRegion_orig__ = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF24_ConstPointer___GetRequestedRegion_orig__)
    GetOffsetTable = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF24_ConstPointer_GetOffsetTable)
    ComputeOffset = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF24_ConstPointer_ComputeOffset)
    ComputeIndex = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF24_ConstPointer_ComputeIndex)
    GetNumberOfComponentsPerPixel = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF24_ConstPointer_GetNumberOfComponentsPerPixel)
    GetSource = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF24_ConstPointer_GetSource)
    GetSourceOutputName = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF24_ConstPointer_GetSourceOutputName)
    GetSourceOutputIndex = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF24_ConstPointer_GetSourceOutputIndex)
    GetReleaseDataFlag = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF24_ConstPointer_GetReleaseDataFlag)
    ShouldIReleaseData = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF24_ConstPointer_ShouldIReleaseData)
    GetDataReleased = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF24_ConstPointer_GetDataReleased)
    GetPipelineMTime = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF24_ConstPointer_GetPipelineMTime)
    GetUpdateMTime = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF24_ConstPointer_GetUpdateMTime)
    GetRealTimeStamp = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF24_ConstPointer_GetRealTimeStamp)
    DebugOn = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF24_ConstPointer_DebugOn)
    DebugOff = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF24_ConstPointer_DebugOff)
    GetDebug = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF24_ConstPointer_GetDebug)
    SetDebug = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF24_ConstPointer_SetDebug)
    GetMTime = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF24_ConstPointer_GetMTime)
    GetTimeStamp = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF24_ConstPointer_GetTimeStamp)
    Modified = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF24_ConstPointer_Modified)

    def AddObserver(self, *args) -> "unsigned long":
        r"""
        AddObserver(itkImageCVF24_ConstPointer self, itkEventObject event, itkCommand arg1) -> unsigned long
        AddObserver(itkImageCVF24_ConstPointer self, itkEventObject event, itkCommand arg1) -> unsigned long
        Allow people to
        add/remove/invoke observers (callbacks) to any ITK object. This is an
        implementation of the subject/observer design pattern. An observer is
        added by specifying an event to respond to and an itk::Command to
        execute. It returns an unsigned long tag which can be used later to
        remove the event or retrieve the command. The memory for the Command
        becomes the responsibility of this object, so don't pass the same
        instance of a command to two different objects 
        """

        import itk
        if len(args) == 3 and not issubclass(args[2].__class__, itk.Command) and callable(args[2]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[2] )
            args[2] = pycommand
            args = tuple(args)
        elif len(args) == 2 and not issubclass(args[1].__class__, itk.Command) and callable(args[1]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[1] )
            args[1] = pycommand
            args = tuple(args)


        return _itkImageRTKPython.itkImageCVF24_ConstPointer_AddObserver(self, *args)

    InvokeEvent = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF24_ConstPointer_InvokeEvent)
    HasObserver = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF24_ConstPointer_HasObserver)
    GetMetaDataDictionary = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF24_ConstPointer_GetMetaDataDictionary)
    GetObjectName = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF24_ConstPointer_GetObjectName)
    CreateAnother = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF24_ConstPointer_CreateAnother)
    GetNameOfClass = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF24_ConstPointer_GetNameOfClass)
    GetReferenceCount = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF24_ConstPointer_GetReferenceCount)

# Register itkImageCVF24_ConstPointer in _itkImageRTKPython:
_itkImageRTKPython.itkImageCVF24_ConstPointer_swigregister(itkImageCVF24_ConstPointer)


def itkImageCVF34_New():
    return itkImageCVF34.New()

class itkImageCVF34(itk.itkImagePython.itkImageBase4):
    r"""Proxy of C++ itkImageCVF34 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageRTKPython.itkImageCVF34___New_orig__)
    Clone = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF34_Clone)
    Allocate = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF34_Allocate)
    FillBuffer = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF34_FillBuffer)
    SetPixel = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF34_SetPixel)
    GetPixel = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF34_GetPixel)
    GetBufferPointer = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF34_GetBufferPointer)
    GetPixelContainer = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF34_GetPixelContainer)
    SetPixelContainer = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF34_SetPixelContainer)
    Graft = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF34_Graft)
    GetPixelAccessor = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF34_GetPixelAccessor)
    GetNeighborhoodAccessor = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF34_GetNeighborhoodAccessor)
    __swig_destroy__ = _itkImageRTKPython.delete_itkImageCVF34
    cast = _swig_new_static_method(_itkImageRTKPython.itkImageCVF34_cast)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageCVF34

        Create a new object of the class itkImageCVF34 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageCVF34.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageCVF34.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageCVF34.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageCVF34 in _itkImageRTKPython:
_itkImageRTKPython.itkImageCVF34_swigregister(itkImageCVF34)
itkImageCVF34___New_orig__ = _itkImageRTKPython.itkImageCVF34___New_orig__
itkImageCVF34_cast = _itkImageRTKPython.itkImageCVF34_cast

class itkImageCVF34_ConstPointer(object):
    r"""Proxy of C++ itkImageCVF34_ConstPointer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(itkImageCVF34_ConstPointer self) -> itkImageCVF34_ConstPointer
        __init__(itkImageCVF34_ConstPointer self, itkImageCVF34_ConstPointer p) -> itkImageCVF34_ConstPointer
        __init__(itkImageCVF34_ConstPointer self, itkImageCVF34 p) -> itkImageCVF34_ConstPointer
        """
        _itkImageRTKPython.itkImageCVF34_ConstPointer_swiginit(self, _itkImageRTKPython.new_itkImageCVF34_ConstPointer(*args))
    __swig_destroy__ = _itkImageRTKPython.delete_itkImageCVF34_ConstPointer
    __deref__ = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF34_ConstPointer___deref__)
    __ref__ = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF34_ConstPointer___ref__)
    IsNotNull = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF34_ConstPointer_IsNotNull)
    IsNull = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF34_ConstPointer_IsNull)
    GetPointer = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF34_ConstPointer_GetPointer)
    Print = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF34_ConstPointer_Print)
    Swap = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF34_ConstPointer_Swap)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)

    Clone = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF34_ConstPointer_Clone)
    GetBufferPointer = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF34_ConstPointer_GetBufferPointer)
    GetPixelContainer = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF34_ConstPointer_GetPixelContainer)
    GetPixelAccessor = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF34_ConstPointer_GetPixelAccessor)
    GetNeighborhoodAccessor = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF34_ConstPointer_GetNeighborhoodAccessor)
    GetDirection = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF34_ConstPointer_GetDirection)
    GetInverseDirection = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF34_ConstPointer_GetInverseDirection)
    GetSpacing = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF34_ConstPointer_GetSpacing)
    GetOrigin = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF34_ConstPointer_GetOrigin)
    __GetLargestPossibleRegion_orig__ = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF34_ConstPointer___GetLargestPossibleRegion_orig__)
    __GetBufferedRegion_orig__ = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF34_ConstPointer___GetBufferedRegion_orig__)
    __GetRequestedRegion_orig__ = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF34_ConstPointer___GetRequestedRegion_orig__)
    GetOffsetTable = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF34_ConstPointer_GetOffsetTable)
    ComputeOffset = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF34_ConstPointer_ComputeOffset)
    ComputeIndex = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF34_ConstPointer_ComputeIndex)
    GetNumberOfComponentsPerPixel = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF34_ConstPointer_GetNumberOfComponentsPerPixel)
    GetSource = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF34_ConstPointer_GetSource)
    GetSourceOutputName = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF34_ConstPointer_GetSourceOutputName)
    GetSourceOutputIndex = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF34_ConstPointer_GetSourceOutputIndex)
    GetReleaseDataFlag = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF34_ConstPointer_GetReleaseDataFlag)
    ShouldIReleaseData = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF34_ConstPointer_ShouldIReleaseData)
    GetDataReleased = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF34_ConstPointer_GetDataReleased)
    GetPipelineMTime = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF34_ConstPointer_GetPipelineMTime)
    GetUpdateMTime = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF34_ConstPointer_GetUpdateMTime)
    GetRealTimeStamp = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF34_ConstPointer_GetRealTimeStamp)
    DebugOn = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF34_ConstPointer_DebugOn)
    DebugOff = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF34_ConstPointer_DebugOff)
    GetDebug = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF34_ConstPointer_GetDebug)
    SetDebug = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF34_ConstPointer_SetDebug)
    GetMTime = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF34_ConstPointer_GetMTime)
    GetTimeStamp = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF34_ConstPointer_GetTimeStamp)
    Modified = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF34_ConstPointer_Modified)

    def AddObserver(self, *args) -> "unsigned long":
        r"""
        AddObserver(itkImageCVF34_ConstPointer self, itkEventObject event, itkCommand arg1) -> unsigned long
        AddObserver(itkImageCVF34_ConstPointer self, itkEventObject event, itkCommand arg1) -> unsigned long
        Allow people to
        add/remove/invoke observers (callbacks) to any ITK object. This is an
        implementation of the subject/observer design pattern. An observer is
        added by specifying an event to respond to and an itk::Command to
        execute. It returns an unsigned long tag which can be used later to
        remove the event or retrieve the command. The memory for the Command
        becomes the responsibility of this object, so don't pass the same
        instance of a command to two different objects 
        """

        import itk
        if len(args) == 3 and not issubclass(args[2].__class__, itk.Command) and callable(args[2]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[2] )
            args[2] = pycommand
            args = tuple(args)
        elif len(args) == 2 and not issubclass(args[1].__class__, itk.Command) and callable(args[1]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[1] )
            args[1] = pycommand
            args = tuple(args)


        return _itkImageRTKPython.itkImageCVF34_ConstPointer_AddObserver(self, *args)

    InvokeEvent = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF34_ConstPointer_InvokeEvent)
    HasObserver = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF34_ConstPointer_HasObserver)
    GetMetaDataDictionary = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF34_ConstPointer_GetMetaDataDictionary)
    GetObjectName = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF34_ConstPointer_GetObjectName)
    CreateAnother = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF34_ConstPointer_CreateAnother)
    GetNameOfClass = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF34_ConstPointer_GetNameOfClass)
    GetReferenceCount = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF34_ConstPointer_GetReferenceCount)

# Register itkImageCVF34_ConstPointer in _itkImageRTKPython:
_itkImageRTKPython.itkImageCVF34_ConstPointer_swigregister(itkImageCVF34_ConstPointer)


def itkImageCVF44_New():
    return itkImageCVF44.New()

class itkImageCVF44(itk.itkImagePython.itkImageBase4):
    r"""Proxy of C++ itkImageCVF44 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageRTKPython.itkImageCVF44___New_orig__)
    Clone = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF44_Clone)
    Allocate = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF44_Allocate)
    FillBuffer = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF44_FillBuffer)
    SetPixel = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF44_SetPixel)
    GetPixel = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF44_GetPixel)
    GetBufferPointer = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF44_GetBufferPointer)
    GetPixelContainer = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF44_GetPixelContainer)
    SetPixelContainer = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF44_SetPixelContainer)
    Graft = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF44_Graft)
    GetPixelAccessor = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF44_GetPixelAccessor)
    GetNeighborhoodAccessor = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF44_GetNeighborhoodAccessor)
    __swig_destroy__ = _itkImageRTKPython.delete_itkImageCVF44
    cast = _swig_new_static_method(_itkImageRTKPython.itkImageCVF44_cast)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageCVF44

        Create a new object of the class itkImageCVF44 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageCVF44.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageCVF44.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageCVF44.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageCVF44 in _itkImageRTKPython:
_itkImageRTKPython.itkImageCVF44_swigregister(itkImageCVF44)
itkImageCVF44___New_orig__ = _itkImageRTKPython.itkImageCVF44___New_orig__
itkImageCVF44_cast = _itkImageRTKPython.itkImageCVF44_cast

class itkImageCVF44_ConstPointer(object):
    r"""Proxy of C++ itkImageCVF44_ConstPointer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(itkImageCVF44_ConstPointer self) -> itkImageCVF44_ConstPointer
        __init__(itkImageCVF44_ConstPointer self, itkImageCVF44_ConstPointer p) -> itkImageCVF44_ConstPointer
        __init__(itkImageCVF44_ConstPointer self, itkImageCVF44 p) -> itkImageCVF44_ConstPointer
        """
        _itkImageRTKPython.itkImageCVF44_ConstPointer_swiginit(self, _itkImageRTKPython.new_itkImageCVF44_ConstPointer(*args))
    __swig_destroy__ = _itkImageRTKPython.delete_itkImageCVF44_ConstPointer
    __deref__ = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF44_ConstPointer___deref__)
    __ref__ = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF44_ConstPointer___ref__)
    IsNotNull = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF44_ConstPointer_IsNotNull)
    IsNull = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF44_ConstPointer_IsNull)
    GetPointer = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF44_ConstPointer_GetPointer)
    Print = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF44_ConstPointer_Print)
    Swap = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF44_ConstPointer_Swap)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)

    Clone = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF44_ConstPointer_Clone)
    GetBufferPointer = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF44_ConstPointer_GetBufferPointer)
    GetPixelContainer = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF44_ConstPointer_GetPixelContainer)
    GetPixelAccessor = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF44_ConstPointer_GetPixelAccessor)
    GetNeighborhoodAccessor = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF44_ConstPointer_GetNeighborhoodAccessor)
    GetDirection = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF44_ConstPointer_GetDirection)
    GetInverseDirection = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF44_ConstPointer_GetInverseDirection)
    GetSpacing = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF44_ConstPointer_GetSpacing)
    GetOrigin = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF44_ConstPointer_GetOrigin)
    __GetLargestPossibleRegion_orig__ = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF44_ConstPointer___GetLargestPossibleRegion_orig__)
    __GetBufferedRegion_orig__ = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF44_ConstPointer___GetBufferedRegion_orig__)
    __GetRequestedRegion_orig__ = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF44_ConstPointer___GetRequestedRegion_orig__)
    GetOffsetTable = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF44_ConstPointer_GetOffsetTable)
    ComputeOffset = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF44_ConstPointer_ComputeOffset)
    ComputeIndex = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF44_ConstPointer_ComputeIndex)
    GetNumberOfComponentsPerPixel = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF44_ConstPointer_GetNumberOfComponentsPerPixel)
    GetSource = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF44_ConstPointer_GetSource)
    GetSourceOutputName = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF44_ConstPointer_GetSourceOutputName)
    GetSourceOutputIndex = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF44_ConstPointer_GetSourceOutputIndex)
    GetReleaseDataFlag = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF44_ConstPointer_GetReleaseDataFlag)
    ShouldIReleaseData = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF44_ConstPointer_ShouldIReleaseData)
    GetDataReleased = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF44_ConstPointer_GetDataReleased)
    GetPipelineMTime = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF44_ConstPointer_GetPipelineMTime)
    GetUpdateMTime = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF44_ConstPointer_GetUpdateMTime)
    GetRealTimeStamp = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF44_ConstPointer_GetRealTimeStamp)
    DebugOn = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF44_ConstPointer_DebugOn)
    DebugOff = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF44_ConstPointer_DebugOff)
    GetDebug = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF44_ConstPointer_GetDebug)
    SetDebug = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF44_ConstPointer_SetDebug)
    GetMTime = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF44_ConstPointer_GetMTime)
    GetTimeStamp = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF44_ConstPointer_GetTimeStamp)
    Modified = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF44_ConstPointer_Modified)

    def AddObserver(self, *args) -> "unsigned long":
        r"""
        AddObserver(itkImageCVF44_ConstPointer self, itkEventObject event, itkCommand arg1) -> unsigned long
        AddObserver(itkImageCVF44_ConstPointer self, itkEventObject event, itkCommand arg1) -> unsigned long
        Allow people to
        add/remove/invoke observers (callbacks) to any ITK object. This is an
        implementation of the subject/observer design pattern. An observer is
        added by specifying an event to respond to and an itk::Command to
        execute. It returns an unsigned long tag which can be used later to
        remove the event or retrieve the command. The memory for the Command
        becomes the responsibility of this object, so don't pass the same
        instance of a command to two different objects 
        """

        import itk
        if len(args) == 3 and not issubclass(args[2].__class__, itk.Command) and callable(args[2]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[2] )
            args[2] = pycommand
            args = tuple(args)
        elif len(args) == 2 and not issubclass(args[1].__class__, itk.Command) and callable(args[1]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[1] )
            args[1] = pycommand
            args = tuple(args)


        return _itkImageRTKPython.itkImageCVF44_ConstPointer_AddObserver(self, *args)

    InvokeEvent = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF44_ConstPointer_InvokeEvent)
    HasObserver = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF44_ConstPointer_HasObserver)
    GetMetaDataDictionary = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF44_ConstPointer_GetMetaDataDictionary)
    GetObjectName = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF44_ConstPointer_GetObjectName)
    CreateAnother = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF44_ConstPointer_CreateAnother)
    GetNameOfClass = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF44_ConstPointer_GetNameOfClass)
    GetReferenceCount = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF44_ConstPointer_GetReferenceCount)

# Register itkImageCVF44_ConstPointer in _itkImageRTKPython:
_itkImageRTKPython.itkImageCVF44_ConstPointer_swigregister(itkImageCVF44_ConstPointer)


def itkImageCVF52_New():
    return itkImageCVF52.New()

class itkImageCVF52(itk.itkImagePython.itkImageBase2):
    r"""Proxy of C++ itkImageCVF52 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageRTKPython.itkImageCVF52___New_orig__)
    Clone = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF52_Clone)
    Allocate = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF52_Allocate)
    FillBuffer = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF52_FillBuffer)
    SetPixel = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF52_SetPixel)
    GetPixel = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF52_GetPixel)
    GetBufferPointer = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF52_GetBufferPointer)
    GetPixelContainer = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF52_GetPixelContainer)
    SetPixelContainer = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF52_SetPixelContainer)
    Graft = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF52_Graft)
    GetPixelAccessor = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF52_GetPixelAccessor)
    GetNeighborhoodAccessor = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF52_GetNeighborhoodAccessor)
    __swig_destroy__ = _itkImageRTKPython.delete_itkImageCVF52
    cast = _swig_new_static_method(_itkImageRTKPython.itkImageCVF52_cast)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageCVF52

        Create a new object of the class itkImageCVF52 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageCVF52.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageCVF52.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageCVF52.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageCVF52 in _itkImageRTKPython:
_itkImageRTKPython.itkImageCVF52_swigregister(itkImageCVF52)
itkImageCVF52___New_orig__ = _itkImageRTKPython.itkImageCVF52___New_orig__
itkImageCVF52_cast = _itkImageRTKPython.itkImageCVF52_cast


def itkImageCVF53_New():
    return itkImageCVF53.New()

class itkImageCVF53(itk.itkImagePython.itkImageBase3):
    r"""Proxy of C++ itkImageCVF53 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageRTKPython.itkImageCVF53___New_orig__)
    Clone = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF53_Clone)
    Allocate = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF53_Allocate)
    FillBuffer = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF53_FillBuffer)
    SetPixel = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF53_SetPixel)
    GetPixel = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF53_GetPixel)
    GetBufferPointer = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF53_GetBufferPointer)
    GetPixelContainer = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF53_GetPixelContainer)
    SetPixelContainer = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF53_SetPixelContainer)
    Graft = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF53_Graft)
    GetPixelAccessor = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF53_GetPixelAccessor)
    GetNeighborhoodAccessor = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF53_GetNeighborhoodAccessor)
    __swig_destroy__ = _itkImageRTKPython.delete_itkImageCVF53
    cast = _swig_new_static_method(_itkImageRTKPython.itkImageCVF53_cast)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageCVF53

        Create a new object of the class itkImageCVF53 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageCVF53.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageCVF53.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageCVF53.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageCVF53 in _itkImageRTKPython:
_itkImageRTKPython.itkImageCVF53_swigregister(itkImageCVF53)
itkImageCVF53___New_orig__ = _itkImageRTKPython.itkImageCVF53___New_orig__
itkImageCVF53_cast = _itkImageRTKPython.itkImageCVF53_cast


def itkImageCVF54_New():
    return itkImageCVF54.New()

class itkImageCVF54(itk.itkImagePython.itkImageBase4):
    r"""Proxy of C++ itkImageCVF54 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageRTKPython.itkImageCVF54___New_orig__)
    Clone = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_Clone)
    Allocate = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_Allocate)
    FillBuffer = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_FillBuffer)
    SetPixel = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_SetPixel)
    GetPixel = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_GetPixel)
    GetBufferPointer = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_GetBufferPointer)
    GetPixelContainer = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_GetPixelContainer)
    SetPixelContainer = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_SetPixelContainer)
    Graft = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_Graft)
    GetPixelAccessor = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_GetPixelAccessor)
    GetNeighborhoodAccessor = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_GetNeighborhoodAccessor)
    __swig_destroy__ = _itkImageRTKPython.delete_itkImageCVF54
    cast = _swig_new_static_method(_itkImageRTKPython.itkImageCVF54_cast)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageCVF54

        Create a new object of the class itkImageCVF54 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageCVF54.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageCVF54.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageCVF54.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageCVF54 in _itkImageRTKPython:
_itkImageRTKPython.itkImageCVF54_swigregister(itkImageCVF54)
itkImageCVF54___New_orig__ = _itkImageRTKPython.itkImageCVF54___New_orig__
itkImageCVF54_cast = _itkImageRTKPython.itkImageCVF54_cast

class itkImageCVF54_ConstPointer(object):
    r"""Proxy of C++ itkImageCVF54_ConstPointer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(itkImageCVF54_ConstPointer self) -> itkImageCVF54_ConstPointer
        __init__(itkImageCVF54_ConstPointer self, itkImageCVF54_ConstPointer p) -> itkImageCVF54_ConstPointer
        __init__(itkImageCVF54_ConstPointer self, itkImageCVF54 p) -> itkImageCVF54_ConstPointer
        """
        _itkImageRTKPython.itkImageCVF54_ConstPointer_swiginit(self, _itkImageRTKPython.new_itkImageCVF54_ConstPointer(*args))
    __swig_destroy__ = _itkImageRTKPython.delete_itkImageCVF54_ConstPointer
    __deref__ = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_ConstPointer___deref__)
    __ref__ = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_ConstPointer___ref__)
    IsNotNull = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_ConstPointer_IsNotNull)
    IsNull = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_ConstPointer_IsNull)
    GetPointer = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_ConstPointer_GetPointer)
    Print = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_ConstPointer_Print)
    Swap = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_ConstPointer_Swap)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)

    Clone = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_ConstPointer_Clone)
    GetBufferPointer = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_ConstPointer_GetBufferPointer)
    GetPixelContainer = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_ConstPointer_GetPixelContainer)
    GetPixelAccessor = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_ConstPointer_GetPixelAccessor)
    GetNeighborhoodAccessor = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_ConstPointer_GetNeighborhoodAccessor)
    GetDirection = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_ConstPointer_GetDirection)
    GetInverseDirection = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_ConstPointer_GetInverseDirection)
    GetSpacing = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_ConstPointer_GetSpacing)
    GetOrigin = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_ConstPointer_GetOrigin)
    __GetLargestPossibleRegion_orig__ = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_ConstPointer___GetLargestPossibleRegion_orig__)
    __GetBufferedRegion_orig__ = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_ConstPointer___GetBufferedRegion_orig__)
    __GetRequestedRegion_orig__ = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_ConstPointer___GetRequestedRegion_orig__)
    GetOffsetTable = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_ConstPointer_GetOffsetTable)
    ComputeOffset = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_ConstPointer_ComputeOffset)
    ComputeIndex = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_ConstPointer_ComputeIndex)
    GetNumberOfComponentsPerPixel = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_ConstPointer_GetNumberOfComponentsPerPixel)
    GetSource = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_ConstPointer_GetSource)
    GetSourceOutputName = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_ConstPointer_GetSourceOutputName)
    GetSourceOutputIndex = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_ConstPointer_GetSourceOutputIndex)
    GetReleaseDataFlag = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_ConstPointer_GetReleaseDataFlag)
    ShouldIReleaseData = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_ConstPointer_ShouldIReleaseData)
    GetDataReleased = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_ConstPointer_GetDataReleased)
    GetPipelineMTime = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_ConstPointer_GetPipelineMTime)
    GetUpdateMTime = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_ConstPointer_GetUpdateMTime)
    GetRealTimeStamp = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_ConstPointer_GetRealTimeStamp)
    DebugOn = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_ConstPointer_DebugOn)
    DebugOff = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_ConstPointer_DebugOff)
    GetDebug = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_ConstPointer_GetDebug)
    SetDebug = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_ConstPointer_SetDebug)
    GetMTime = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_ConstPointer_GetMTime)
    GetTimeStamp = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_ConstPointer_GetTimeStamp)
    Modified = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_ConstPointer_Modified)

    def AddObserver(self, *args) -> "unsigned long":
        r"""
        AddObserver(itkImageCVF54_ConstPointer self, itkEventObject event, itkCommand arg1) -> unsigned long
        AddObserver(itkImageCVF54_ConstPointer self, itkEventObject event, itkCommand arg1) -> unsigned long
        Allow people to
        add/remove/invoke observers (callbacks) to any ITK object. This is an
        implementation of the subject/observer design pattern. An observer is
        added by specifying an event to respond to and an itk::Command to
        execute. It returns an unsigned long tag which can be used later to
        remove the event or retrieve the command. The memory for the Command
        becomes the responsibility of this object, so don't pass the same
        instance of a command to two different objects 
        """

        import itk
        if len(args) == 3 and not issubclass(args[2].__class__, itk.Command) and callable(args[2]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[2] )
            args[2] = pycommand
            args = tuple(args)
        elif len(args) == 2 and not issubclass(args[1].__class__, itk.Command) and callable(args[1]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[1] )
            args[1] = pycommand
            args = tuple(args)


        return _itkImageRTKPython.itkImageCVF54_ConstPointer_AddObserver(self, *args)

    InvokeEvent = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_ConstPointer_InvokeEvent)
    HasObserver = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_ConstPointer_HasObserver)
    GetMetaDataDictionary = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_ConstPointer_GetMetaDataDictionary)
    GetObjectName = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_ConstPointer_GetObjectName)
    CreateAnother = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_ConstPointer_CreateAnother)
    GetNameOfClass = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_ConstPointer_GetNameOfClass)
    GetReferenceCount = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_ConstPointer_GetReferenceCount)

# Register itkImageCVF54_ConstPointer in _itkImageRTKPython:
_itkImageRTKPython.itkImageCVF54_ConstPointer_swigregister(itkImageCVF54_ConstPointer)


def itkImageD1_New():
    return itkImageD1.New()

class itkImageD1(itk.itkImageBaseRTKPython.itkImageBase1):
    r"""Proxy of C++ itkImageD1 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageRTKPython.itkImageD1___New_orig__)
    Clone = _swig_new_instance_method(_itkImageRTKPython.itkImageD1_Clone)
    Allocate = _swig_new_instance_method(_itkImageRTKPython.itkImageD1_Allocate)
    FillBuffer = _swig_new_instance_method(_itkImageRTKPython.itkImageD1_FillBuffer)
    SetPixel = _swig_new_instance_method(_itkImageRTKPython.itkImageD1_SetPixel)
    GetPixel = _swig_new_instance_method(_itkImageRTKPython.itkImageD1_GetPixel)
    GetBufferPointer = _swig_new_instance_method(_itkImageRTKPython.itkImageD1_GetBufferPointer)
    GetPixelContainer = _swig_new_instance_method(_itkImageRTKPython.itkImageD1_GetPixelContainer)
    SetPixelContainer = _swig_new_instance_method(_itkImageRTKPython.itkImageD1_SetPixelContainer)
    Graft = _swig_new_instance_method(_itkImageRTKPython.itkImageD1_Graft)
    GetPixelAccessor = _swig_new_instance_method(_itkImageRTKPython.itkImageD1_GetPixelAccessor)
    GetNeighborhoodAccessor = _swig_new_instance_method(_itkImageRTKPython.itkImageD1_GetNeighborhoodAccessor)
    __swig_destroy__ = _itkImageRTKPython.delete_itkImageD1
    cast = _swig_new_static_method(_itkImageRTKPython.itkImageD1_cast)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageD1

        Create a new object of the class itkImageD1 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageD1.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageD1.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageD1.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageD1 in _itkImageRTKPython:
_itkImageRTKPython.itkImageD1_swigregister(itkImageD1)
itkImageD1___New_orig__ = _itkImageRTKPython.itkImageD1___New_orig__
itkImageD1_cast = _itkImageRTKPython.itkImageD1_cast

class itkImageD3_ConstPointer(object):
    r"""Proxy of C++ itkImageD3_ConstPointer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(itkImageD3_ConstPointer self) -> itkImageD3_ConstPointer
        __init__(itkImageD3_ConstPointer self, itkImageD3_ConstPointer p) -> itkImageD3_ConstPointer
        __init__(itkImageD3_ConstPointer self, itkImageD3 p) -> itkImageD3_ConstPointer
        """
        _itkImageRTKPython.itkImageD3_ConstPointer_swiginit(self, _itkImageRTKPython.new_itkImageD3_ConstPointer(*args))
    __swig_destroy__ = _itkImageRTKPython.delete_itkImageD3_ConstPointer
    __deref__ = _swig_new_instance_method(_itkImageRTKPython.itkImageD3_ConstPointer___deref__)
    __ref__ = _swig_new_instance_method(_itkImageRTKPython.itkImageD3_ConstPointer___ref__)
    IsNotNull = _swig_new_instance_method(_itkImageRTKPython.itkImageD3_ConstPointer_IsNotNull)
    IsNull = _swig_new_instance_method(_itkImageRTKPython.itkImageD3_ConstPointer_IsNull)
    GetPointer = _swig_new_instance_method(_itkImageRTKPython.itkImageD3_ConstPointer_GetPointer)
    Print = _swig_new_instance_method(_itkImageRTKPython.itkImageD3_ConstPointer_Print)
    Swap = _swig_new_instance_method(_itkImageRTKPython.itkImageD3_ConstPointer_Swap)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)

    Clone = _swig_new_instance_method(_itkImageRTKPython.itkImageD3_ConstPointer_Clone)
    GetBufferPointer = _swig_new_instance_method(_itkImageRTKPython.itkImageD3_ConstPointer_GetBufferPointer)
    GetPixelContainer = _swig_new_instance_method(_itkImageRTKPython.itkImageD3_ConstPointer_GetPixelContainer)
    GetPixelAccessor = _swig_new_instance_method(_itkImageRTKPython.itkImageD3_ConstPointer_GetPixelAccessor)
    GetNeighborhoodAccessor = _swig_new_instance_method(_itkImageRTKPython.itkImageD3_ConstPointer_GetNeighborhoodAccessor)
    GetDirection = _swig_new_instance_method(_itkImageRTKPython.itkImageD3_ConstPointer_GetDirection)
    GetInverseDirection = _swig_new_instance_method(_itkImageRTKPython.itkImageD3_ConstPointer_GetInverseDirection)
    GetSpacing = _swig_new_instance_method(_itkImageRTKPython.itkImageD3_ConstPointer_GetSpacing)
    GetOrigin = _swig_new_instance_method(_itkImageRTKPython.itkImageD3_ConstPointer_GetOrigin)
    __GetLargestPossibleRegion_orig__ = _swig_new_instance_method(_itkImageRTKPython.itkImageD3_ConstPointer___GetLargestPossibleRegion_orig__)
    __GetBufferedRegion_orig__ = _swig_new_instance_method(_itkImageRTKPython.itkImageD3_ConstPointer___GetBufferedRegion_orig__)
    __GetRequestedRegion_orig__ = _swig_new_instance_method(_itkImageRTKPython.itkImageD3_ConstPointer___GetRequestedRegion_orig__)
    GetOffsetTable = _swig_new_instance_method(_itkImageRTKPython.itkImageD3_ConstPointer_GetOffsetTable)
    ComputeOffset = _swig_new_instance_method(_itkImageRTKPython.itkImageD3_ConstPointer_ComputeOffset)
    ComputeIndex = _swig_new_instance_method(_itkImageRTKPython.itkImageD3_ConstPointer_ComputeIndex)
    GetNumberOfComponentsPerPixel = _swig_new_instance_method(_itkImageRTKPython.itkImageD3_ConstPointer_GetNumberOfComponentsPerPixel)
    GetSource = _swig_new_instance_method(_itkImageRTKPython.itkImageD3_ConstPointer_GetSource)
    GetSourceOutputName = _swig_new_instance_method(_itkImageRTKPython.itkImageD3_ConstPointer_GetSourceOutputName)
    GetSourceOutputIndex = _swig_new_instance_method(_itkImageRTKPython.itkImageD3_ConstPointer_GetSourceOutputIndex)
    GetReleaseDataFlag = _swig_new_instance_method(_itkImageRTKPython.itkImageD3_ConstPointer_GetReleaseDataFlag)
    ShouldIReleaseData = _swig_new_instance_method(_itkImageRTKPython.itkImageD3_ConstPointer_ShouldIReleaseData)
    GetDataReleased = _swig_new_instance_method(_itkImageRTKPython.itkImageD3_ConstPointer_GetDataReleased)
    GetPipelineMTime = _swig_new_instance_method(_itkImageRTKPython.itkImageD3_ConstPointer_GetPipelineMTime)
    GetUpdateMTime = _swig_new_instance_method(_itkImageRTKPython.itkImageD3_ConstPointer_GetUpdateMTime)
    GetRealTimeStamp = _swig_new_instance_method(_itkImageRTKPython.itkImageD3_ConstPointer_GetRealTimeStamp)
    DebugOn = _swig_new_instance_method(_itkImageRTKPython.itkImageD3_ConstPointer_DebugOn)
    DebugOff = _swig_new_instance_method(_itkImageRTKPython.itkImageD3_ConstPointer_DebugOff)
    GetDebug = _swig_new_instance_method(_itkImageRTKPython.itkImageD3_ConstPointer_GetDebug)
    SetDebug = _swig_new_instance_method(_itkImageRTKPython.itkImageD3_ConstPointer_SetDebug)
    GetMTime = _swig_new_instance_method(_itkImageRTKPython.itkImageD3_ConstPointer_GetMTime)
    GetTimeStamp = _swig_new_instance_method(_itkImageRTKPython.itkImageD3_ConstPointer_GetTimeStamp)
    Modified = _swig_new_instance_method(_itkImageRTKPython.itkImageD3_ConstPointer_Modified)

    def AddObserver(self, *args) -> "unsigned long":
        r"""
        AddObserver(itkImageD3_ConstPointer self, itkEventObject event, itkCommand arg1) -> unsigned long
        AddObserver(itkImageD3_ConstPointer self, itkEventObject event, itkCommand arg1) -> unsigned long
        Allow people to
        add/remove/invoke observers (callbacks) to any ITK object. This is an
        implementation of the subject/observer design pattern. An observer is
        added by specifying an event to respond to and an itk::Command to
        execute. It returns an unsigned long tag which can be used later to
        remove the event or retrieve the command. The memory for the Command
        becomes the responsibility of this object, so don't pass the same
        instance of a command to two different objects 
        """

        import itk
        if len(args) == 3 and not issubclass(args[2].__class__, itk.Command) and callable(args[2]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[2] )
            args[2] = pycommand
            args = tuple(args)
        elif len(args) == 2 and not issubclass(args[1].__class__, itk.Command) and callable(args[1]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[1] )
            args[1] = pycommand
            args = tuple(args)


        return _itkImageRTKPython.itkImageD3_ConstPointer_AddObserver(self, *args)

    InvokeEvent = _swig_new_instance_method(_itkImageRTKPython.itkImageD3_ConstPointer_InvokeEvent)
    HasObserver = _swig_new_instance_method(_itkImageRTKPython.itkImageD3_ConstPointer_HasObserver)
    GetMetaDataDictionary = _swig_new_instance_method(_itkImageRTKPython.itkImageD3_ConstPointer_GetMetaDataDictionary)
    GetObjectName = _swig_new_instance_method(_itkImageRTKPython.itkImageD3_ConstPointer_GetObjectName)
    CreateAnother = _swig_new_instance_method(_itkImageRTKPython.itkImageD3_ConstPointer_CreateAnother)
    GetNameOfClass = _swig_new_instance_method(_itkImageRTKPython.itkImageD3_ConstPointer_GetNameOfClass)
    GetReferenceCount = _swig_new_instance_method(_itkImageRTKPython.itkImageD3_ConstPointer_GetReferenceCount)

# Register itkImageD3_ConstPointer in _itkImageRTKPython:
_itkImageRTKPython.itkImageD3_ConstPointer_swigregister(itkImageD3_ConstPointer)


def itkImageD4_New():
    return itkImageD4.New()

class itkImageD4(itk.itkImagePython.itkImageBase4):
    r"""Proxy of C++ itkImageD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageRTKPython.itkImageD4___New_orig__)
    Clone = _swig_new_instance_method(_itkImageRTKPython.itkImageD4_Clone)
    Allocate = _swig_new_instance_method(_itkImageRTKPython.itkImageD4_Allocate)
    FillBuffer = _swig_new_instance_method(_itkImageRTKPython.itkImageD4_FillBuffer)
    SetPixel = _swig_new_instance_method(_itkImageRTKPython.itkImageD4_SetPixel)
    GetPixel = _swig_new_instance_method(_itkImageRTKPython.itkImageD4_GetPixel)
    GetBufferPointer = _swig_new_instance_method(_itkImageRTKPython.itkImageD4_GetBufferPointer)
    GetPixelContainer = _swig_new_instance_method(_itkImageRTKPython.itkImageD4_GetPixelContainer)
    SetPixelContainer = _swig_new_instance_method(_itkImageRTKPython.itkImageD4_SetPixelContainer)
    Graft = _swig_new_instance_method(_itkImageRTKPython.itkImageD4_Graft)
    GetPixelAccessor = _swig_new_instance_method(_itkImageRTKPython.itkImageD4_GetPixelAccessor)
    GetNeighborhoodAccessor = _swig_new_instance_method(_itkImageRTKPython.itkImageD4_GetNeighborhoodAccessor)
    __swig_destroy__ = _itkImageRTKPython.delete_itkImageD4
    cast = _swig_new_static_method(_itkImageRTKPython.itkImageD4_cast)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageD4

        Create a new object of the class itkImageD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageD4.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageD4 in _itkImageRTKPython:
_itkImageRTKPython.itkImageD4_swigregister(itkImageD4)
itkImageD4___New_orig__ = _itkImageRTKPython.itkImageD4___New_orig__
itkImageD4_cast = _itkImageRTKPython.itkImageD4_cast

class itkImageD4_ConstPointer(object):
    r"""Proxy of C++ itkImageD4_ConstPointer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(itkImageD4_ConstPointer self) -> itkImageD4_ConstPointer
        __init__(itkImageD4_ConstPointer self, itkImageD4_ConstPointer p) -> itkImageD4_ConstPointer
        __init__(itkImageD4_ConstPointer self, itkImageD4 p) -> itkImageD4_ConstPointer
        """
        _itkImageRTKPython.itkImageD4_ConstPointer_swiginit(self, _itkImageRTKPython.new_itkImageD4_ConstPointer(*args))
    __swig_destroy__ = _itkImageRTKPython.delete_itkImageD4_ConstPointer
    __deref__ = _swig_new_instance_method(_itkImageRTKPython.itkImageD4_ConstPointer___deref__)
    __ref__ = _swig_new_instance_method(_itkImageRTKPython.itkImageD4_ConstPointer___ref__)
    IsNotNull = _swig_new_instance_method(_itkImageRTKPython.itkImageD4_ConstPointer_IsNotNull)
    IsNull = _swig_new_instance_method(_itkImageRTKPython.itkImageD4_ConstPointer_IsNull)
    GetPointer = _swig_new_instance_method(_itkImageRTKPython.itkImageD4_ConstPointer_GetPointer)
    Print = _swig_new_instance_method(_itkImageRTKPython.itkImageD4_ConstPointer_Print)
    Swap = _swig_new_instance_method(_itkImageRTKPython.itkImageD4_ConstPointer_Swap)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)

    Clone = _swig_new_instance_method(_itkImageRTKPython.itkImageD4_ConstPointer_Clone)
    GetBufferPointer = _swig_new_instance_method(_itkImageRTKPython.itkImageD4_ConstPointer_GetBufferPointer)
    GetPixelContainer = _swig_new_instance_method(_itkImageRTKPython.itkImageD4_ConstPointer_GetPixelContainer)
    GetPixelAccessor = _swig_new_instance_method(_itkImageRTKPython.itkImageD4_ConstPointer_GetPixelAccessor)
    GetNeighborhoodAccessor = _swig_new_instance_method(_itkImageRTKPython.itkImageD4_ConstPointer_GetNeighborhoodAccessor)
    GetDirection = _swig_new_instance_method(_itkImageRTKPython.itkImageD4_ConstPointer_GetDirection)
    GetInverseDirection = _swig_new_instance_method(_itkImageRTKPython.itkImageD4_ConstPointer_GetInverseDirection)
    GetSpacing = _swig_new_instance_method(_itkImageRTKPython.itkImageD4_ConstPointer_GetSpacing)
    GetOrigin = _swig_new_instance_method(_itkImageRTKPython.itkImageD4_ConstPointer_GetOrigin)
    __GetLargestPossibleRegion_orig__ = _swig_new_instance_method(_itkImageRTKPython.itkImageD4_ConstPointer___GetLargestPossibleRegion_orig__)
    __GetBufferedRegion_orig__ = _swig_new_instance_method(_itkImageRTKPython.itkImageD4_ConstPointer___GetBufferedRegion_orig__)
    __GetRequestedRegion_orig__ = _swig_new_instance_method(_itkImageRTKPython.itkImageD4_ConstPointer___GetRequestedRegion_orig__)
    GetOffsetTable = _swig_new_instance_method(_itkImageRTKPython.itkImageD4_ConstPointer_GetOffsetTable)
    ComputeOffset = _swig_new_instance_method(_itkImageRTKPython.itkImageD4_ConstPointer_ComputeOffset)
    ComputeIndex = _swig_new_instance_method(_itkImageRTKPython.itkImageD4_ConstPointer_ComputeIndex)
    GetNumberOfComponentsPerPixel = _swig_new_instance_method(_itkImageRTKPython.itkImageD4_ConstPointer_GetNumberOfComponentsPerPixel)
    GetSource = _swig_new_instance_method(_itkImageRTKPython.itkImageD4_ConstPointer_GetSource)
    GetSourceOutputName = _swig_new_instance_method(_itkImageRTKPython.itkImageD4_ConstPointer_GetSourceOutputName)
    GetSourceOutputIndex = _swig_new_instance_method(_itkImageRTKPython.itkImageD4_ConstPointer_GetSourceOutputIndex)
    GetReleaseDataFlag = _swig_new_instance_method(_itkImageRTKPython.itkImageD4_ConstPointer_GetReleaseDataFlag)
    ShouldIReleaseData = _swig_new_instance_method(_itkImageRTKPython.itkImageD4_ConstPointer_ShouldIReleaseData)
    GetDataReleased = _swig_new_instance_method(_itkImageRTKPython.itkImageD4_ConstPointer_GetDataReleased)
    GetPipelineMTime = _swig_new_instance_method(_itkImageRTKPython.itkImageD4_ConstPointer_GetPipelineMTime)
    GetUpdateMTime = _swig_new_instance_method(_itkImageRTKPython.itkImageD4_ConstPointer_GetUpdateMTime)
    GetRealTimeStamp = _swig_new_instance_method(_itkImageRTKPython.itkImageD4_ConstPointer_GetRealTimeStamp)
    DebugOn = _swig_new_instance_method(_itkImageRTKPython.itkImageD4_ConstPointer_DebugOn)
    DebugOff = _swig_new_instance_method(_itkImageRTKPython.itkImageD4_ConstPointer_DebugOff)
    GetDebug = _swig_new_instance_method(_itkImageRTKPython.itkImageD4_ConstPointer_GetDebug)
    SetDebug = _swig_new_instance_method(_itkImageRTKPython.itkImageD4_ConstPointer_SetDebug)
    GetMTime = _swig_new_instance_method(_itkImageRTKPython.itkImageD4_ConstPointer_GetMTime)
    GetTimeStamp = _swig_new_instance_method(_itkImageRTKPython.itkImageD4_ConstPointer_GetTimeStamp)
    Modified = _swig_new_instance_method(_itkImageRTKPython.itkImageD4_ConstPointer_Modified)

    def AddObserver(self, *args) -> "unsigned long":
        r"""
        AddObserver(itkImageD4_ConstPointer self, itkEventObject event, itkCommand arg1) -> unsigned long
        AddObserver(itkImageD4_ConstPointer self, itkEventObject event, itkCommand arg1) -> unsigned long
        Allow people to
        add/remove/invoke observers (callbacks) to any ITK object. This is an
        implementation of the subject/observer design pattern. An observer is
        added by specifying an event to respond to and an itk::Command to
        execute. It returns an unsigned long tag which can be used later to
        remove the event or retrieve the command. The memory for the Command
        becomes the responsibility of this object, so don't pass the same
        instance of a command to two different objects 
        """

        import itk
        if len(args) == 3 and not issubclass(args[2].__class__, itk.Command) and callable(args[2]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[2] )
            args[2] = pycommand
            args = tuple(args)
        elif len(args) == 2 and not issubclass(args[1].__class__, itk.Command) and callable(args[1]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[1] )
            args[1] = pycommand
            args = tuple(args)


        return _itkImageRTKPython.itkImageD4_ConstPointer_AddObserver(self, *args)

    InvokeEvent = _swig_new_instance_method(_itkImageRTKPython.itkImageD4_ConstPointer_InvokeEvent)
    HasObserver = _swig_new_instance_method(_itkImageRTKPython.itkImageD4_ConstPointer_HasObserver)
    GetMetaDataDictionary = _swig_new_instance_method(_itkImageRTKPython.itkImageD4_ConstPointer_GetMetaDataDictionary)
    GetObjectName = _swig_new_instance_method(_itkImageRTKPython.itkImageD4_ConstPointer_GetObjectName)
    CreateAnother = _swig_new_instance_method(_itkImageRTKPython.itkImageD4_ConstPointer_CreateAnother)
    GetNameOfClass = _swig_new_instance_method(_itkImageRTKPython.itkImageD4_ConstPointer_GetNameOfClass)
    GetReferenceCount = _swig_new_instance_method(_itkImageRTKPython.itkImageD4_ConstPointer_GetReferenceCount)

# Register itkImageD4_ConstPointer in _itkImageRTKPython:
_itkImageRTKPython.itkImageD4_ConstPointer_swigregister(itkImageD4_ConstPointer)


def itkImageF1_New():
    return itkImageF1.New()

class itkImageF1(itk.itkImageBaseRTKPython.itkImageBase1):
    r"""Proxy of C++ itkImageF1 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageRTKPython.itkImageF1___New_orig__)
    Clone = _swig_new_instance_method(_itkImageRTKPython.itkImageF1_Clone)
    Allocate = _swig_new_instance_method(_itkImageRTKPython.itkImageF1_Allocate)
    FillBuffer = _swig_new_instance_method(_itkImageRTKPython.itkImageF1_FillBuffer)
    SetPixel = _swig_new_instance_method(_itkImageRTKPython.itkImageF1_SetPixel)
    GetPixel = _swig_new_instance_method(_itkImageRTKPython.itkImageF1_GetPixel)
    GetBufferPointer = _swig_new_instance_method(_itkImageRTKPython.itkImageF1_GetBufferPointer)
    GetPixelContainer = _swig_new_instance_method(_itkImageRTKPython.itkImageF1_GetPixelContainer)
    SetPixelContainer = _swig_new_instance_method(_itkImageRTKPython.itkImageF1_SetPixelContainer)
    Graft = _swig_new_instance_method(_itkImageRTKPython.itkImageF1_Graft)
    GetPixelAccessor = _swig_new_instance_method(_itkImageRTKPython.itkImageF1_GetPixelAccessor)
    GetNeighborhoodAccessor = _swig_new_instance_method(_itkImageRTKPython.itkImageF1_GetNeighborhoodAccessor)
    __swig_destroy__ = _itkImageRTKPython.delete_itkImageF1
    cast = _swig_new_static_method(_itkImageRTKPython.itkImageF1_cast)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageF1

        Create a new object of the class itkImageF1 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageF1.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageF1.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageF1.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageF1 in _itkImageRTKPython:
_itkImageRTKPython.itkImageF1_swigregister(itkImageF1)
itkImageF1___New_orig__ = _itkImageRTKPython.itkImageF1___New_orig__
itkImageF1_cast = _itkImageRTKPython.itkImageF1_cast

class itkImageF2_ConstPointer(object):
    r"""Proxy of C++ itkImageF2_ConstPointer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(itkImageF2_ConstPointer self) -> itkImageF2_ConstPointer
        __init__(itkImageF2_ConstPointer self, itkImageF2_ConstPointer p) -> itkImageF2_ConstPointer
        __init__(itkImageF2_ConstPointer self, itkImageF2 p) -> itkImageF2_ConstPointer
        """
        _itkImageRTKPython.itkImageF2_ConstPointer_swiginit(self, _itkImageRTKPython.new_itkImageF2_ConstPointer(*args))
    __swig_destroy__ = _itkImageRTKPython.delete_itkImageF2_ConstPointer
    __deref__ = _swig_new_instance_method(_itkImageRTKPython.itkImageF2_ConstPointer___deref__)
    __ref__ = _swig_new_instance_method(_itkImageRTKPython.itkImageF2_ConstPointer___ref__)
    IsNotNull = _swig_new_instance_method(_itkImageRTKPython.itkImageF2_ConstPointer_IsNotNull)
    IsNull = _swig_new_instance_method(_itkImageRTKPython.itkImageF2_ConstPointer_IsNull)
    GetPointer = _swig_new_instance_method(_itkImageRTKPython.itkImageF2_ConstPointer_GetPointer)
    Print = _swig_new_instance_method(_itkImageRTKPython.itkImageF2_ConstPointer_Print)
    Swap = _swig_new_instance_method(_itkImageRTKPython.itkImageF2_ConstPointer_Swap)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)

    Clone = _swig_new_instance_method(_itkImageRTKPython.itkImageF2_ConstPointer_Clone)
    GetBufferPointer = _swig_new_instance_method(_itkImageRTKPython.itkImageF2_ConstPointer_GetBufferPointer)
    GetPixelContainer = _swig_new_instance_method(_itkImageRTKPython.itkImageF2_ConstPointer_GetPixelContainer)
    GetPixelAccessor = _swig_new_instance_method(_itkImageRTKPython.itkImageF2_ConstPointer_GetPixelAccessor)
    GetNeighborhoodAccessor = _swig_new_instance_method(_itkImageRTKPython.itkImageF2_ConstPointer_GetNeighborhoodAccessor)
    GetDirection = _swig_new_instance_method(_itkImageRTKPython.itkImageF2_ConstPointer_GetDirection)
    GetInverseDirection = _swig_new_instance_method(_itkImageRTKPython.itkImageF2_ConstPointer_GetInverseDirection)
    GetSpacing = _swig_new_instance_method(_itkImageRTKPython.itkImageF2_ConstPointer_GetSpacing)
    GetOrigin = _swig_new_instance_method(_itkImageRTKPython.itkImageF2_ConstPointer_GetOrigin)
    __GetLargestPossibleRegion_orig__ = _swig_new_instance_method(_itkImageRTKPython.itkImageF2_ConstPointer___GetLargestPossibleRegion_orig__)
    __GetBufferedRegion_orig__ = _swig_new_instance_method(_itkImageRTKPython.itkImageF2_ConstPointer___GetBufferedRegion_orig__)
    __GetRequestedRegion_orig__ = _swig_new_instance_method(_itkImageRTKPython.itkImageF2_ConstPointer___GetRequestedRegion_orig__)
    GetOffsetTable = _swig_new_instance_method(_itkImageRTKPython.itkImageF2_ConstPointer_GetOffsetTable)
    ComputeOffset = _swig_new_instance_method(_itkImageRTKPython.itkImageF2_ConstPointer_ComputeOffset)
    ComputeIndex = _swig_new_instance_method(_itkImageRTKPython.itkImageF2_ConstPointer_ComputeIndex)
    GetNumberOfComponentsPerPixel = _swig_new_instance_method(_itkImageRTKPython.itkImageF2_ConstPointer_GetNumberOfComponentsPerPixel)
    GetSource = _swig_new_instance_method(_itkImageRTKPython.itkImageF2_ConstPointer_GetSource)
    GetSourceOutputName = _swig_new_instance_method(_itkImageRTKPython.itkImageF2_ConstPointer_GetSourceOutputName)
    GetSourceOutputIndex = _swig_new_instance_method(_itkImageRTKPython.itkImageF2_ConstPointer_GetSourceOutputIndex)
    GetReleaseDataFlag = _swig_new_instance_method(_itkImageRTKPython.itkImageF2_ConstPointer_GetReleaseDataFlag)
    ShouldIReleaseData = _swig_new_instance_method(_itkImageRTKPython.itkImageF2_ConstPointer_ShouldIReleaseData)
    GetDataReleased = _swig_new_instance_method(_itkImageRTKPython.itkImageF2_ConstPointer_GetDataReleased)
    GetPipelineMTime = _swig_new_instance_method(_itkImageRTKPython.itkImageF2_ConstPointer_GetPipelineMTime)
    GetUpdateMTime = _swig_new_instance_method(_itkImageRTKPython.itkImageF2_ConstPointer_GetUpdateMTime)
    GetRealTimeStamp = _swig_new_instance_method(_itkImageRTKPython.itkImageF2_ConstPointer_GetRealTimeStamp)
    DebugOn = _swig_new_instance_method(_itkImageRTKPython.itkImageF2_ConstPointer_DebugOn)
    DebugOff = _swig_new_instance_method(_itkImageRTKPython.itkImageF2_ConstPointer_DebugOff)
    GetDebug = _swig_new_instance_method(_itkImageRTKPython.itkImageF2_ConstPointer_GetDebug)
    SetDebug = _swig_new_instance_method(_itkImageRTKPython.itkImageF2_ConstPointer_SetDebug)
    GetMTime = _swig_new_instance_method(_itkImageRTKPython.itkImageF2_ConstPointer_GetMTime)
    GetTimeStamp = _swig_new_instance_method(_itkImageRTKPython.itkImageF2_ConstPointer_GetTimeStamp)
    Modified = _swig_new_instance_method(_itkImageRTKPython.itkImageF2_ConstPointer_Modified)

    def AddObserver(self, *args) -> "unsigned long":
        r"""
        AddObserver(itkImageF2_ConstPointer self, itkEventObject event, itkCommand arg1) -> unsigned long
        AddObserver(itkImageF2_ConstPointer self, itkEventObject event, itkCommand arg1) -> unsigned long
        Allow people to
        add/remove/invoke observers (callbacks) to any ITK object. This is an
        implementation of the subject/observer design pattern. An observer is
        added by specifying an event to respond to and an itk::Command to
        execute. It returns an unsigned long tag which can be used later to
        remove the event or retrieve the command. The memory for the Command
        becomes the responsibility of this object, so don't pass the same
        instance of a command to two different objects 
        """

        import itk
        if len(args) == 3 and not issubclass(args[2].__class__, itk.Command) and callable(args[2]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[2] )
            args[2] = pycommand
            args = tuple(args)
        elif len(args) == 2 and not issubclass(args[1].__class__, itk.Command) and callable(args[1]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[1] )
            args[1] = pycommand
            args = tuple(args)


        return _itkImageRTKPython.itkImageF2_ConstPointer_AddObserver(self, *args)

    InvokeEvent = _swig_new_instance_method(_itkImageRTKPython.itkImageF2_ConstPointer_InvokeEvent)
    HasObserver = _swig_new_instance_method(_itkImageRTKPython.itkImageF2_ConstPointer_HasObserver)
    GetMetaDataDictionary = _swig_new_instance_method(_itkImageRTKPython.itkImageF2_ConstPointer_GetMetaDataDictionary)
    GetObjectName = _swig_new_instance_method(_itkImageRTKPython.itkImageF2_ConstPointer_GetObjectName)
    CreateAnother = _swig_new_instance_method(_itkImageRTKPython.itkImageF2_ConstPointer_CreateAnother)
    GetNameOfClass = _swig_new_instance_method(_itkImageRTKPython.itkImageF2_ConstPointer_GetNameOfClass)
    GetReferenceCount = _swig_new_instance_method(_itkImageRTKPython.itkImageF2_ConstPointer_GetReferenceCount)

# Register itkImageF2_ConstPointer in _itkImageRTKPython:
_itkImageRTKPython.itkImageF2_ConstPointer_swigregister(itkImageF2_ConstPointer)

class itkImageF3_ConstPointer(object):
    r"""Proxy of C++ itkImageF3_ConstPointer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(itkImageF3_ConstPointer self) -> itkImageF3_ConstPointer
        __init__(itkImageF3_ConstPointer self, itkImageF3_ConstPointer p) -> itkImageF3_ConstPointer
        __init__(itkImageF3_ConstPointer self, itkImageF3 p) -> itkImageF3_ConstPointer
        """
        _itkImageRTKPython.itkImageF3_ConstPointer_swiginit(self, _itkImageRTKPython.new_itkImageF3_ConstPointer(*args))
    __swig_destroy__ = _itkImageRTKPython.delete_itkImageF3_ConstPointer
    __deref__ = _swig_new_instance_method(_itkImageRTKPython.itkImageF3_ConstPointer___deref__)
    __ref__ = _swig_new_instance_method(_itkImageRTKPython.itkImageF3_ConstPointer___ref__)
    IsNotNull = _swig_new_instance_method(_itkImageRTKPython.itkImageF3_ConstPointer_IsNotNull)
    IsNull = _swig_new_instance_method(_itkImageRTKPython.itkImageF3_ConstPointer_IsNull)
    GetPointer = _swig_new_instance_method(_itkImageRTKPython.itkImageF3_ConstPointer_GetPointer)
    Print = _swig_new_instance_method(_itkImageRTKPython.itkImageF3_ConstPointer_Print)
    Swap = _swig_new_instance_method(_itkImageRTKPython.itkImageF3_ConstPointer_Swap)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)

    Clone = _swig_new_instance_method(_itkImageRTKPython.itkImageF3_ConstPointer_Clone)
    GetBufferPointer = _swig_new_instance_method(_itkImageRTKPython.itkImageF3_ConstPointer_GetBufferPointer)
    GetPixelContainer = _swig_new_instance_method(_itkImageRTKPython.itkImageF3_ConstPointer_GetPixelContainer)
    GetPixelAccessor = _swig_new_instance_method(_itkImageRTKPython.itkImageF3_ConstPointer_GetPixelAccessor)
    GetNeighborhoodAccessor = _swig_new_instance_method(_itkImageRTKPython.itkImageF3_ConstPointer_GetNeighborhoodAccessor)
    GetDirection = _swig_new_instance_method(_itkImageRTKPython.itkImageF3_ConstPointer_GetDirection)
    GetInverseDirection = _swig_new_instance_method(_itkImageRTKPython.itkImageF3_ConstPointer_GetInverseDirection)
    GetSpacing = _swig_new_instance_method(_itkImageRTKPython.itkImageF3_ConstPointer_GetSpacing)
    GetOrigin = _swig_new_instance_method(_itkImageRTKPython.itkImageF3_ConstPointer_GetOrigin)
    __GetLargestPossibleRegion_orig__ = _swig_new_instance_method(_itkImageRTKPython.itkImageF3_ConstPointer___GetLargestPossibleRegion_orig__)
    __GetBufferedRegion_orig__ = _swig_new_instance_method(_itkImageRTKPython.itkImageF3_ConstPointer___GetBufferedRegion_orig__)
    __GetRequestedRegion_orig__ = _swig_new_instance_method(_itkImageRTKPython.itkImageF3_ConstPointer___GetRequestedRegion_orig__)
    GetOffsetTable = _swig_new_instance_method(_itkImageRTKPython.itkImageF3_ConstPointer_GetOffsetTable)
    ComputeOffset = _swig_new_instance_method(_itkImageRTKPython.itkImageF3_ConstPointer_ComputeOffset)
    ComputeIndex = _swig_new_instance_method(_itkImageRTKPython.itkImageF3_ConstPointer_ComputeIndex)
    GetNumberOfComponentsPerPixel = _swig_new_instance_method(_itkImageRTKPython.itkImageF3_ConstPointer_GetNumberOfComponentsPerPixel)
    GetSource = _swig_new_instance_method(_itkImageRTKPython.itkImageF3_ConstPointer_GetSource)
    GetSourceOutputName = _swig_new_instance_method(_itkImageRTKPython.itkImageF3_ConstPointer_GetSourceOutputName)
    GetSourceOutputIndex = _swig_new_instance_method(_itkImageRTKPython.itkImageF3_ConstPointer_GetSourceOutputIndex)
    GetReleaseDataFlag = _swig_new_instance_method(_itkImageRTKPython.itkImageF3_ConstPointer_GetReleaseDataFlag)
    ShouldIReleaseData = _swig_new_instance_method(_itkImageRTKPython.itkImageF3_ConstPointer_ShouldIReleaseData)
    GetDataReleased = _swig_new_instance_method(_itkImageRTKPython.itkImageF3_ConstPointer_GetDataReleased)
    GetPipelineMTime = _swig_new_instance_method(_itkImageRTKPython.itkImageF3_ConstPointer_GetPipelineMTime)
    GetUpdateMTime = _swig_new_instance_method(_itkImageRTKPython.itkImageF3_ConstPointer_GetUpdateMTime)
    GetRealTimeStamp = _swig_new_instance_method(_itkImageRTKPython.itkImageF3_ConstPointer_GetRealTimeStamp)
    DebugOn = _swig_new_instance_method(_itkImageRTKPython.itkImageF3_ConstPointer_DebugOn)
    DebugOff = _swig_new_instance_method(_itkImageRTKPython.itkImageF3_ConstPointer_DebugOff)
    GetDebug = _swig_new_instance_method(_itkImageRTKPython.itkImageF3_ConstPointer_GetDebug)
    SetDebug = _swig_new_instance_method(_itkImageRTKPython.itkImageF3_ConstPointer_SetDebug)
    GetMTime = _swig_new_instance_method(_itkImageRTKPython.itkImageF3_ConstPointer_GetMTime)
    GetTimeStamp = _swig_new_instance_method(_itkImageRTKPython.itkImageF3_ConstPointer_GetTimeStamp)
    Modified = _swig_new_instance_method(_itkImageRTKPython.itkImageF3_ConstPointer_Modified)

    def AddObserver(self, *args) -> "unsigned long":
        r"""
        AddObserver(itkImageF3_ConstPointer self, itkEventObject event, itkCommand arg1) -> unsigned long
        AddObserver(itkImageF3_ConstPointer self, itkEventObject event, itkCommand arg1) -> unsigned long
        Allow people to
        add/remove/invoke observers (callbacks) to any ITK object. This is an
        implementation of the subject/observer design pattern. An observer is
        added by specifying an event to respond to and an itk::Command to
        execute. It returns an unsigned long tag which can be used later to
        remove the event or retrieve the command. The memory for the Command
        becomes the responsibility of this object, so don't pass the same
        instance of a command to two different objects 
        """

        import itk
        if len(args) == 3 and not issubclass(args[2].__class__, itk.Command) and callable(args[2]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[2] )
            args[2] = pycommand
            args = tuple(args)
        elif len(args) == 2 and not issubclass(args[1].__class__, itk.Command) and callable(args[1]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[1] )
            args[1] = pycommand
            args = tuple(args)


        return _itkImageRTKPython.itkImageF3_ConstPointer_AddObserver(self, *args)

    InvokeEvent = _swig_new_instance_method(_itkImageRTKPython.itkImageF3_ConstPointer_InvokeEvent)
    HasObserver = _swig_new_instance_method(_itkImageRTKPython.itkImageF3_ConstPointer_HasObserver)
    GetMetaDataDictionary = _swig_new_instance_method(_itkImageRTKPython.itkImageF3_ConstPointer_GetMetaDataDictionary)
    GetObjectName = _swig_new_instance_method(_itkImageRTKPython.itkImageF3_ConstPointer_GetObjectName)
    CreateAnother = _swig_new_instance_method(_itkImageRTKPython.itkImageF3_ConstPointer_CreateAnother)
    GetNameOfClass = _swig_new_instance_method(_itkImageRTKPython.itkImageF3_ConstPointer_GetNameOfClass)
    GetReferenceCount = _swig_new_instance_method(_itkImageRTKPython.itkImageF3_ConstPointer_GetReferenceCount)

# Register itkImageF3_ConstPointer in _itkImageRTKPython:
_itkImageRTKPython.itkImageF3_ConstPointer_swigregister(itkImageF3_ConstPointer)


def itkImageF4_New():
    return itkImageF4.New()

class itkImageF4(itk.itkImagePython.itkImageBase4):
    r"""Proxy of C++ itkImageF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageRTKPython.itkImageF4___New_orig__)
    Clone = _swig_new_instance_method(_itkImageRTKPython.itkImageF4_Clone)
    Allocate = _swig_new_instance_method(_itkImageRTKPython.itkImageF4_Allocate)
    FillBuffer = _swig_new_instance_method(_itkImageRTKPython.itkImageF4_FillBuffer)
    SetPixel = _swig_new_instance_method(_itkImageRTKPython.itkImageF4_SetPixel)
    GetPixel = _swig_new_instance_method(_itkImageRTKPython.itkImageF4_GetPixel)
    GetBufferPointer = _swig_new_instance_method(_itkImageRTKPython.itkImageF4_GetBufferPointer)
    GetPixelContainer = _swig_new_instance_method(_itkImageRTKPython.itkImageF4_GetPixelContainer)
    SetPixelContainer = _swig_new_instance_method(_itkImageRTKPython.itkImageF4_SetPixelContainer)
    Graft = _swig_new_instance_method(_itkImageRTKPython.itkImageF4_Graft)
    GetPixelAccessor = _swig_new_instance_method(_itkImageRTKPython.itkImageF4_GetPixelAccessor)
    GetNeighborhoodAccessor = _swig_new_instance_method(_itkImageRTKPython.itkImageF4_GetNeighborhoodAccessor)
    __swig_destroy__ = _itkImageRTKPython.delete_itkImageF4
    cast = _swig_new_static_method(_itkImageRTKPython.itkImageF4_cast)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageF4

        Create a new object of the class itkImageF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageF4.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageF4 in _itkImageRTKPython:
_itkImageRTKPython.itkImageF4_swigregister(itkImageF4)
itkImageF4___New_orig__ = _itkImageRTKPython.itkImageF4___New_orig__
itkImageF4_cast = _itkImageRTKPython.itkImageF4_cast

class itkImageF4_ConstPointer(object):
    r"""Proxy of C++ itkImageF4_ConstPointer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(itkImageF4_ConstPointer self) -> itkImageF4_ConstPointer
        __init__(itkImageF4_ConstPointer self, itkImageF4_ConstPointer p) -> itkImageF4_ConstPointer
        __init__(itkImageF4_ConstPointer self, itkImageF4 p) -> itkImageF4_ConstPointer
        """
        _itkImageRTKPython.itkImageF4_ConstPointer_swiginit(self, _itkImageRTKPython.new_itkImageF4_ConstPointer(*args))
    __swig_destroy__ = _itkImageRTKPython.delete_itkImageF4_ConstPointer
    __deref__ = _swig_new_instance_method(_itkImageRTKPython.itkImageF4_ConstPointer___deref__)
    __ref__ = _swig_new_instance_method(_itkImageRTKPython.itkImageF4_ConstPointer___ref__)
    IsNotNull = _swig_new_instance_method(_itkImageRTKPython.itkImageF4_ConstPointer_IsNotNull)
    IsNull = _swig_new_instance_method(_itkImageRTKPython.itkImageF4_ConstPointer_IsNull)
    GetPointer = _swig_new_instance_method(_itkImageRTKPython.itkImageF4_ConstPointer_GetPointer)
    Print = _swig_new_instance_method(_itkImageRTKPython.itkImageF4_ConstPointer_Print)
    Swap = _swig_new_instance_method(_itkImageRTKPython.itkImageF4_ConstPointer_Swap)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)

    Clone = _swig_new_instance_method(_itkImageRTKPython.itkImageF4_ConstPointer_Clone)
    GetBufferPointer = _swig_new_instance_method(_itkImageRTKPython.itkImageF4_ConstPointer_GetBufferPointer)
    GetPixelContainer = _swig_new_instance_method(_itkImageRTKPython.itkImageF4_ConstPointer_GetPixelContainer)
    GetPixelAccessor = _swig_new_instance_method(_itkImageRTKPython.itkImageF4_ConstPointer_GetPixelAccessor)
    GetNeighborhoodAccessor = _swig_new_instance_method(_itkImageRTKPython.itkImageF4_ConstPointer_GetNeighborhoodAccessor)
    GetDirection = _swig_new_instance_method(_itkImageRTKPython.itkImageF4_ConstPointer_GetDirection)
    GetInverseDirection = _swig_new_instance_method(_itkImageRTKPython.itkImageF4_ConstPointer_GetInverseDirection)
    GetSpacing = _swig_new_instance_method(_itkImageRTKPython.itkImageF4_ConstPointer_GetSpacing)
    GetOrigin = _swig_new_instance_method(_itkImageRTKPython.itkImageF4_ConstPointer_GetOrigin)
    __GetLargestPossibleRegion_orig__ = _swig_new_instance_method(_itkImageRTKPython.itkImageF4_ConstPointer___GetLargestPossibleRegion_orig__)
    __GetBufferedRegion_orig__ = _swig_new_instance_method(_itkImageRTKPython.itkImageF4_ConstPointer___GetBufferedRegion_orig__)
    __GetRequestedRegion_orig__ = _swig_new_instance_method(_itkImageRTKPython.itkImageF4_ConstPointer___GetRequestedRegion_orig__)
    GetOffsetTable = _swig_new_instance_method(_itkImageRTKPython.itkImageF4_ConstPointer_GetOffsetTable)
    ComputeOffset = _swig_new_instance_method(_itkImageRTKPython.itkImageF4_ConstPointer_ComputeOffset)
    ComputeIndex = _swig_new_instance_method(_itkImageRTKPython.itkImageF4_ConstPointer_ComputeIndex)
    GetNumberOfComponentsPerPixel = _swig_new_instance_method(_itkImageRTKPython.itkImageF4_ConstPointer_GetNumberOfComponentsPerPixel)
    GetSource = _swig_new_instance_method(_itkImageRTKPython.itkImageF4_ConstPointer_GetSource)
    GetSourceOutputName = _swig_new_instance_method(_itkImageRTKPython.itkImageF4_ConstPointer_GetSourceOutputName)
    GetSourceOutputIndex = _swig_new_instance_method(_itkImageRTKPython.itkImageF4_ConstPointer_GetSourceOutputIndex)
    GetReleaseDataFlag = _swig_new_instance_method(_itkImageRTKPython.itkImageF4_ConstPointer_GetReleaseDataFlag)
    ShouldIReleaseData = _swig_new_instance_method(_itkImageRTKPython.itkImageF4_ConstPointer_ShouldIReleaseData)
    GetDataReleased = _swig_new_instance_method(_itkImageRTKPython.itkImageF4_ConstPointer_GetDataReleased)
    GetPipelineMTime = _swig_new_instance_method(_itkImageRTKPython.itkImageF4_ConstPointer_GetPipelineMTime)
    GetUpdateMTime = _swig_new_instance_method(_itkImageRTKPython.itkImageF4_ConstPointer_GetUpdateMTime)
    GetRealTimeStamp = _swig_new_instance_method(_itkImageRTKPython.itkImageF4_ConstPointer_GetRealTimeStamp)
    DebugOn = _swig_new_instance_method(_itkImageRTKPython.itkImageF4_ConstPointer_DebugOn)
    DebugOff = _swig_new_instance_method(_itkImageRTKPython.itkImageF4_ConstPointer_DebugOff)
    GetDebug = _swig_new_instance_method(_itkImageRTKPython.itkImageF4_ConstPointer_GetDebug)
    SetDebug = _swig_new_instance_method(_itkImageRTKPython.itkImageF4_ConstPointer_SetDebug)
    GetMTime = _swig_new_instance_method(_itkImageRTKPython.itkImageF4_ConstPointer_GetMTime)
    GetTimeStamp = _swig_new_instance_method(_itkImageRTKPython.itkImageF4_ConstPointer_GetTimeStamp)
    Modified = _swig_new_instance_method(_itkImageRTKPython.itkImageF4_ConstPointer_Modified)

    def AddObserver(self, *args) -> "unsigned long":
        r"""
        AddObserver(itkImageF4_ConstPointer self, itkEventObject event, itkCommand arg1) -> unsigned long
        AddObserver(itkImageF4_ConstPointer self, itkEventObject event, itkCommand arg1) -> unsigned long
        Allow people to
        add/remove/invoke observers (callbacks) to any ITK object. This is an
        implementation of the subject/observer design pattern. An observer is
        added by specifying an event to respond to and an itk::Command to
        execute. It returns an unsigned long tag which can be used later to
        remove the event or retrieve the command. The memory for the Command
        becomes the responsibility of this object, so don't pass the same
        instance of a command to two different objects 
        """

        import itk
        if len(args) == 3 and not issubclass(args[2].__class__, itk.Command) and callable(args[2]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[2] )
            args[2] = pycommand
            args = tuple(args)
        elif len(args) == 2 and not issubclass(args[1].__class__, itk.Command) and callable(args[1]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[1] )
            args[1] = pycommand
            args = tuple(args)


        return _itkImageRTKPython.itkImageF4_ConstPointer_AddObserver(self, *args)

    InvokeEvent = _swig_new_instance_method(_itkImageRTKPython.itkImageF4_ConstPointer_InvokeEvent)
    HasObserver = _swig_new_instance_method(_itkImageRTKPython.itkImageF4_ConstPointer_HasObserver)
    GetMetaDataDictionary = _swig_new_instance_method(_itkImageRTKPython.itkImageF4_ConstPointer_GetMetaDataDictionary)
    GetObjectName = _swig_new_instance_method(_itkImageRTKPython.itkImageF4_ConstPointer_GetObjectName)
    CreateAnother = _swig_new_instance_method(_itkImageRTKPython.itkImageF4_ConstPointer_CreateAnother)
    GetNameOfClass = _swig_new_instance_method(_itkImageRTKPython.itkImageF4_ConstPointer_GetNameOfClass)
    GetReferenceCount = _swig_new_instance_method(_itkImageRTKPython.itkImageF4_ConstPointer_GetReferenceCount)

# Register itkImageF4_ConstPointer in _itkImageRTKPython:
_itkImageRTKPython.itkImageF4_ConstPointer_swigregister(itkImageF4_ConstPointer)


def itkImageUC1_New():
    return itkImageUC1.New()

class itkImageUC1(itk.itkImageBaseRTKPython.itkImageBase1):
    r"""Proxy of C++ itkImageUC1 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageRTKPython.itkImageUC1___New_orig__)
    Clone = _swig_new_instance_method(_itkImageRTKPython.itkImageUC1_Clone)
    Allocate = _swig_new_instance_method(_itkImageRTKPython.itkImageUC1_Allocate)
    FillBuffer = _swig_new_instance_method(_itkImageRTKPython.itkImageUC1_FillBuffer)
    SetPixel = _swig_new_instance_method(_itkImageRTKPython.itkImageUC1_SetPixel)
    GetPixel = _swig_new_instance_method(_itkImageRTKPython.itkImageUC1_GetPixel)
    GetBufferPointer = _swig_new_instance_method(_itkImageRTKPython.itkImageUC1_GetBufferPointer)
    GetPixelContainer = _swig_new_instance_method(_itkImageRTKPython.itkImageUC1_GetPixelContainer)
    SetPixelContainer = _swig_new_instance_method(_itkImageRTKPython.itkImageUC1_SetPixelContainer)
    Graft = _swig_new_instance_method(_itkImageRTKPython.itkImageUC1_Graft)
    GetPixelAccessor = _swig_new_instance_method(_itkImageRTKPython.itkImageUC1_GetPixelAccessor)
    GetNeighborhoodAccessor = _swig_new_instance_method(_itkImageRTKPython.itkImageUC1_GetNeighborhoodAccessor)
    __swig_destroy__ = _itkImageRTKPython.delete_itkImageUC1
    cast = _swig_new_static_method(_itkImageRTKPython.itkImageUC1_cast)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageUC1

        Create a new object of the class itkImageUC1 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageUC1.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageUC1.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageUC1.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageUC1 in _itkImageRTKPython:
_itkImageRTKPython.itkImageUC1_swigregister(itkImageUC1)
itkImageUC1___New_orig__ = _itkImageRTKPython.itkImageUC1___New_orig__
itkImageUC1_cast = _itkImageRTKPython.itkImageUC1_cast


def itkImageUI2_New():
    return itkImageUI2.New()

class itkImageUI2(itk.itkImagePython.itkImageBase2):
    r"""Proxy of C++ itkImageUI2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageRTKPython.itkImageUI2___New_orig__)
    Clone = _swig_new_instance_method(_itkImageRTKPython.itkImageUI2_Clone)
    Allocate = _swig_new_instance_method(_itkImageRTKPython.itkImageUI2_Allocate)
    FillBuffer = _swig_new_instance_method(_itkImageRTKPython.itkImageUI2_FillBuffer)
    SetPixel = _swig_new_instance_method(_itkImageRTKPython.itkImageUI2_SetPixel)
    GetPixel = _swig_new_instance_method(_itkImageRTKPython.itkImageUI2_GetPixel)
    GetBufferPointer = _swig_new_instance_method(_itkImageRTKPython.itkImageUI2_GetBufferPointer)
    GetPixelContainer = _swig_new_instance_method(_itkImageRTKPython.itkImageUI2_GetPixelContainer)
    SetPixelContainer = _swig_new_instance_method(_itkImageRTKPython.itkImageUI2_SetPixelContainer)
    Graft = _swig_new_instance_method(_itkImageRTKPython.itkImageUI2_Graft)
    GetPixelAccessor = _swig_new_instance_method(_itkImageRTKPython.itkImageUI2_GetPixelAccessor)
    GetNeighborhoodAccessor = _swig_new_instance_method(_itkImageRTKPython.itkImageUI2_GetNeighborhoodAccessor)
    __swig_destroy__ = _itkImageRTKPython.delete_itkImageUI2
    cast = _swig_new_static_method(_itkImageRTKPython.itkImageUI2_cast)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageUI2

        Create a new object of the class itkImageUI2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageUI2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageUI2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageUI2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageUI2 in _itkImageRTKPython:
_itkImageRTKPython.itkImageUI2_swigregister(itkImageUI2)
itkImageUI2___New_orig__ = _itkImageRTKPython.itkImageUI2___New_orig__
itkImageUI2_cast = _itkImageRTKPython.itkImageUI2_cast


def itkImageUI3_New():
    return itkImageUI3.New()

class itkImageUI3(itk.itkImagePython.itkImageBase3):
    r"""Proxy of C++ itkImageUI3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageRTKPython.itkImageUI3___New_orig__)
    Clone = _swig_new_instance_method(_itkImageRTKPython.itkImageUI3_Clone)
    Allocate = _swig_new_instance_method(_itkImageRTKPython.itkImageUI3_Allocate)
    FillBuffer = _swig_new_instance_method(_itkImageRTKPython.itkImageUI3_FillBuffer)
    SetPixel = _swig_new_instance_method(_itkImageRTKPython.itkImageUI3_SetPixel)
    GetPixel = _swig_new_instance_method(_itkImageRTKPython.itkImageUI3_GetPixel)
    GetBufferPointer = _swig_new_instance_method(_itkImageRTKPython.itkImageUI3_GetBufferPointer)
    GetPixelContainer = _swig_new_instance_method(_itkImageRTKPython.itkImageUI3_GetPixelContainer)
    SetPixelContainer = _swig_new_instance_method(_itkImageRTKPython.itkImageUI3_SetPixelContainer)
    Graft = _swig_new_instance_method(_itkImageRTKPython.itkImageUI3_Graft)
    GetPixelAccessor = _swig_new_instance_method(_itkImageRTKPython.itkImageUI3_GetPixelAccessor)
    GetNeighborhoodAccessor = _swig_new_instance_method(_itkImageRTKPython.itkImageUI3_GetNeighborhoodAccessor)
    __swig_destroy__ = _itkImageRTKPython.delete_itkImageUI3
    cast = _swig_new_static_method(_itkImageRTKPython.itkImageUI3_cast)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageUI3

        Create a new object of the class itkImageUI3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageUI3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageUI3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageUI3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageUI3 in _itkImageRTKPython:
_itkImageRTKPython.itkImageUI3_swigregister(itkImageUI3)
itkImageUI3___New_orig__ = _itkImageRTKPython.itkImageUI3___New_orig__
itkImageUI3_cast = _itkImageRTKPython.itkImageUI3_cast


def itkImageUS1_New():
    return itkImageUS1.New()

class itkImageUS1(itk.itkImageBaseRTKPython.itkImageBase1):
    r"""Proxy of C++ itkImageUS1 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageRTKPython.itkImageUS1___New_orig__)
    Clone = _swig_new_instance_method(_itkImageRTKPython.itkImageUS1_Clone)
    Allocate = _swig_new_instance_method(_itkImageRTKPython.itkImageUS1_Allocate)
    FillBuffer = _swig_new_instance_method(_itkImageRTKPython.itkImageUS1_FillBuffer)
    SetPixel = _swig_new_instance_method(_itkImageRTKPython.itkImageUS1_SetPixel)
    GetPixel = _swig_new_instance_method(_itkImageRTKPython.itkImageUS1_GetPixel)
    GetBufferPointer = _swig_new_instance_method(_itkImageRTKPython.itkImageUS1_GetBufferPointer)
    GetPixelContainer = _swig_new_instance_method(_itkImageRTKPython.itkImageUS1_GetPixelContainer)
    SetPixelContainer = _swig_new_instance_method(_itkImageRTKPython.itkImageUS1_SetPixelContainer)
    Graft = _swig_new_instance_method(_itkImageRTKPython.itkImageUS1_Graft)
    GetPixelAccessor = _swig_new_instance_method(_itkImageRTKPython.itkImageUS1_GetPixelAccessor)
    GetNeighborhoodAccessor = _swig_new_instance_method(_itkImageRTKPython.itkImageUS1_GetNeighborhoodAccessor)
    __swig_destroy__ = _itkImageRTKPython.delete_itkImageUS1
    cast = _swig_new_static_method(_itkImageRTKPython.itkImageUS1_cast)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageUS1

        Create a new object of the class itkImageUS1 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageUS1.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageUS1.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageUS1.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageUS1 in _itkImageRTKPython:
_itkImageRTKPython.itkImageUS1_swigregister(itkImageUS1)
itkImageUS1___New_orig__ = _itkImageRTKPython.itkImageUS1___New_orig__
itkImageUS1_cast = _itkImageRTKPython.itkImageUS1_cast


def itkImageUS4_New():
    return itkImageUS4.New()

class itkImageUS4(itk.itkImagePython.itkImageBase4):
    r"""Proxy of C++ itkImageUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageRTKPython.itkImageUS4___New_orig__)
    Clone = _swig_new_instance_method(_itkImageRTKPython.itkImageUS4_Clone)
    Allocate = _swig_new_instance_method(_itkImageRTKPython.itkImageUS4_Allocate)
    FillBuffer = _swig_new_instance_method(_itkImageRTKPython.itkImageUS4_FillBuffer)
    SetPixel = _swig_new_instance_method(_itkImageRTKPython.itkImageUS4_SetPixel)
    GetPixel = _swig_new_instance_method(_itkImageRTKPython.itkImageUS4_GetPixel)
    GetBufferPointer = _swig_new_instance_method(_itkImageRTKPython.itkImageUS4_GetBufferPointer)
    GetPixelContainer = _swig_new_instance_method(_itkImageRTKPython.itkImageUS4_GetPixelContainer)
    SetPixelContainer = _swig_new_instance_method(_itkImageRTKPython.itkImageUS4_SetPixelContainer)
    Graft = _swig_new_instance_method(_itkImageRTKPython.itkImageUS4_Graft)
    GetPixelAccessor = _swig_new_instance_method(_itkImageRTKPython.itkImageUS4_GetPixelAccessor)
    GetNeighborhoodAccessor = _swig_new_instance_method(_itkImageRTKPython.itkImageUS4_GetNeighborhoodAccessor)
    __swig_destroy__ = _itkImageRTKPython.delete_itkImageUS4
    cast = _swig_new_static_method(_itkImageRTKPython.itkImageUS4_cast)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageUS4

        Create a new object of the class itkImageUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageUS4.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageUS4 in _itkImageRTKPython:
_itkImageRTKPython.itkImageUS4_swigregister(itkImageUS4)
itkImageUS4___New_orig__ = _itkImageRTKPython.itkImageUS4___New_orig__
itkImageUS4_cast = _itkImageRTKPython.itkImageUS4_cast


def itkImageVF24_New():
    return itkImageVF24.New()

class itkImageVF24(itk.itkImagePython.itkImageBase4):
    r"""Proxy of C++ itkImageVF24 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageRTKPython.itkImageVF24___New_orig__)
    Clone = _swig_new_instance_method(_itkImageRTKPython.itkImageVF24_Clone)
    Allocate = _swig_new_instance_method(_itkImageRTKPython.itkImageVF24_Allocate)
    FillBuffer = _swig_new_instance_method(_itkImageRTKPython.itkImageVF24_FillBuffer)
    SetPixel = _swig_new_instance_method(_itkImageRTKPython.itkImageVF24_SetPixel)
    GetPixel = _swig_new_instance_method(_itkImageRTKPython.itkImageVF24_GetPixel)
    GetBufferPointer = _swig_new_instance_method(_itkImageRTKPython.itkImageVF24_GetBufferPointer)
    GetPixelContainer = _swig_new_instance_method(_itkImageRTKPython.itkImageVF24_GetPixelContainer)
    SetPixelContainer = _swig_new_instance_method(_itkImageRTKPython.itkImageVF24_SetPixelContainer)
    Graft = _swig_new_instance_method(_itkImageRTKPython.itkImageVF24_Graft)
    GetPixelAccessor = _swig_new_instance_method(_itkImageRTKPython.itkImageVF24_GetPixelAccessor)
    GetNeighborhoodAccessor = _swig_new_instance_method(_itkImageRTKPython.itkImageVF24_GetNeighborhoodAccessor)
    __swig_destroy__ = _itkImageRTKPython.delete_itkImageVF24
    cast = _swig_new_static_method(_itkImageRTKPython.itkImageVF24_cast)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageVF24

        Create a new object of the class itkImageVF24 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageVF24.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageVF24.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageVF24.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageVF24 in _itkImageRTKPython:
_itkImageRTKPython.itkImageVF24_swigregister(itkImageVF24)
itkImageVF24___New_orig__ = _itkImageRTKPython.itkImageVF24___New_orig__
itkImageVF24_cast = _itkImageRTKPython.itkImageVF24_cast


def itkImageVF34_New():
    return itkImageVF34.New()

class itkImageVF34(itk.itkImagePython.itkImageBase4):
    r"""Proxy of C++ itkImageVF34 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageRTKPython.itkImageVF34___New_orig__)
    Clone = _swig_new_instance_method(_itkImageRTKPython.itkImageVF34_Clone)
    Allocate = _swig_new_instance_method(_itkImageRTKPython.itkImageVF34_Allocate)
    FillBuffer = _swig_new_instance_method(_itkImageRTKPython.itkImageVF34_FillBuffer)
    SetPixel = _swig_new_instance_method(_itkImageRTKPython.itkImageVF34_SetPixel)
    GetPixel = _swig_new_instance_method(_itkImageRTKPython.itkImageVF34_GetPixel)
    GetBufferPointer = _swig_new_instance_method(_itkImageRTKPython.itkImageVF34_GetBufferPointer)
    GetPixelContainer = _swig_new_instance_method(_itkImageRTKPython.itkImageVF34_GetPixelContainer)
    SetPixelContainer = _swig_new_instance_method(_itkImageRTKPython.itkImageVF34_SetPixelContainer)
    Graft = _swig_new_instance_method(_itkImageRTKPython.itkImageVF34_Graft)
    GetPixelAccessor = _swig_new_instance_method(_itkImageRTKPython.itkImageVF34_GetPixelAccessor)
    GetNeighborhoodAccessor = _swig_new_instance_method(_itkImageRTKPython.itkImageVF34_GetNeighborhoodAccessor)
    __swig_destroy__ = _itkImageRTKPython.delete_itkImageVF34
    cast = _swig_new_static_method(_itkImageRTKPython.itkImageVF34_cast)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageVF34

        Create a new object of the class itkImageVF34 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageVF34.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageVF34.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageVF34.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageVF34 in _itkImageRTKPython:
_itkImageRTKPython.itkImageVF34_swigregister(itkImageVF34)
itkImageVF34___New_orig__ = _itkImageRTKPython.itkImageVF34___New_orig__
itkImageVF34_cast = _itkImageRTKPython.itkImageVF34_cast


def itkImageVF44_New():
    return itkImageVF44.New()

class itkImageVF44(itk.itkImagePython.itkImageBase4):
    r"""Proxy of C++ itkImageVF44 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageRTKPython.itkImageVF44___New_orig__)
    Clone = _swig_new_instance_method(_itkImageRTKPython.itkImageVF44_Clone)
    Allocate = _swig_new_instance_method(_itkImageRTKPython.itkImageVF44_Allocate)
    FillBuffer = _swig_new_instance_method(_itkImageRTKPython.itkImageVF44_FillBuffer)
    SetPixel = _swig_new_instance_method(_itkImageRTKPython.itkImageVF44_SetPixel)
    GetPixel = _swig_new_instance_method(_itkImageRTKPython.itkImageVF44_GetPixel)
    GetBufferPointer = _swig_new_instance_method(_itkImageRTKPython.itkImageVF44_GetBufferPointer)
    GetPixelContainer = _swig_new_instance_method(_itkImageRTKPython.itkImageVF44_GetPixelContainer)
    SetPixelContainer = _swig_new_instance_method(_itkImageRTKPython.itkImageVF44_SetPixelContainer)
    Graft = _swig_new_instance_method(_itkImageRTKPython.itkImageVF44_Graft)
    GetPixelAccessor = _swig_new_instance_method(_itkImageRTKPython.itkImageVF44_GetPixelAccessor)
    GetNeighborhoodAccessor = _swig_new_instance_method(_itkImageRTKPython.itkImageVF44_GetNeighborhoodAccessor)
    __swig_destroy__ = _itkImageRTKPython.delete_itkImageVF44
    cast = _swig_new_static_method(_itkImageRTKPython.itkImageVF44_cast)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageVF44

        Create a new object of the class itkImageVF44 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageVF44.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageVF44.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageVF44.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageVF44 in _itkImageRTKPython:
_itkImageRTKPython.itkImageVF44_swigregister(itkImageVF44)
itkImageVF44___New_orig__ = _itkImageRTKPython.itkImageVF44___New_orig__
itkImageVF44_cast = _itkImageRTKPython.itkImageVF44_cast


def itkImageVF52_New():
    return itkImageVF52.New()

class itkImageVF52(itk.itkImagePython.itkImageBase2):
    r"""Proxy of C++ itkImageVF52 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageRTKPython.itkImageVF52___New_orig__)
    Clone = _swig_new_instance_method(_itkImageRTKPython.itkImageVF52_Clone)
    Allocate = _swig_new_instance_method(_itkImageRTKPython.itkImageVF52_Allocate)
    FillBuffer = _swig_new_instance_method(_itkImageRTKPython.itkImageVF52_FillBuffer)
    SetPixel = _swig_new_instance_method(_itkImageRTKPython.itkImageVF52_SetPixel)
    GetPixel = _swig_new_instance_method(_itkImageRTKPython.itkImageVF52_GetPixel)
    GetBufferPointer = _swig_new_instance_method(_itkImageRTKPython.itkImageVF52_GetBufferPointer)
    GetPixelContainer = _swig_new_instance_method(_itkImageRTKPython.itkImageVF52_GetPixelContainer)
    SetPixelContainer = _swig_new_instance_method(_itkImageRTKPython.itkImageVF52_SetPixelContainer)
    Graft = _swig_new_instance_method(_itkImageRTKPython.itkImageVF52_Graft)
    GetPixelAccessor = _swig_new_instance_method(_itkImageRTKPython.itkImageVF52_GetPixelAccessor)
    GetNeighborhoodAccessor = _swig_new_instance_method(_itkImageRTKPython.itkImageVF52_GetNeighborhoodAccessor)
    __swig_destroy__ = _itkImageRTKPython.delete_itkImageVF52
    cast = _swig_new_static_method(_itkImageRTKPython.itkImageVF52_cast)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageVF52

        Create a new object of the class itkImageVF52 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageVF52.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageVF52.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageVF52.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageVF52 in _itkImageRTKPython:
_itkImageRTKPython.itkImageVF52_swigregister(itkImageVF52)
itkImageVF52___New_orig__ = _itkImageRTKPython.itkImageVF52___New_orig__
itkImageVF52_cast = _itkImageRTKPython.itkImageVF52_cast


def itkImageVF53_New():
    return itkImageVF53.New()

class itkImageVF53(itk.itkImagePython.itkImageBase3):
    r"""Proxy of C++ itkImageVF53 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageRTKPython.itkImageVF53___New_orig__)
    Clone = _swig_new_instance_method(_itkImageRTKPython.itkImageVF53_Clone)
    Allocate = _swig_new_instance_method(_itkImageRTKPython.itkImageVF53_Allocate)
    FillBuffer = _swig_new_instance_method(_itkImageRTKPython.itkImageVF53_FillBuffer)
    SetPixel = _swig_new_instance_method(_itkImageRTKPython.itkImageVF53_SetPixel)
    GetPixel = _swig_new_instance_method(_itkImageRTKPython.itkImageVF53_GetPixel)
    GetBufferPointer = _swig_new_instance_method(_itkImageRTKPython.itkImageVF53_GetBufferPointer)
    GetPixelContainer = _swig_new_instance_method(_itkImageRTKPython.itkImageVF53_GetPixelContainer)
    SetPixelContainer = _swig_new_instance_method(_itkImageRTKPython.itkImageVF53_SetPixelContainer)
    Graft = _swig_new_instance_method(_itkImageRTKPython.itkImageVF53_Graft)
    GetPixelAccessor = _swig_new_instance_method(_itkImageRTKPython.itkImageVF53_GetPixelAccessor)
    GetNeighborhoodAccessor = _swig_new_instance_method(_itkImageRTKPython.itkImageVF53_GetNeighborhoodAccessor)
    __swig_destroy__ = _itkImageRTKPython.delete_itkImageVF53
    cast = _swig_new_static_method(_itkImageRTKPython.itkImageVF53_cast)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageVF53

        Create a new object of the class itkImageVF53 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageVF53.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageVF53.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageVF53.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageVF53 in _itkImageRTKPython:
_itkImageRTKPython.itkImageVF53_swigregister(itkImageVF53)
itkImageVF53___New_orig__ = _itkImageRTKPython.itkImageVF53___New_orig__
itkImageVF53_cast = _itkImageRTKPython.itkImageVF53_cast


def itkImageVF54_New():
    return itkImageVF54.New()

class itkImageVF54(itk.itkImagePython.itkImageBase4):
    r"""Proxy of C++ itkImageVF54 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageRTKPython.itkImageVF54___New_orig__)
    Clone = _swig_new_instance_method(_itkImageRTKPython.itkImageVF54_Clone)
    Allocate = _swig_new_instance_method(_itkImageRTKPython.itkImageVF54_Allocate)
    FillBuffer = _swig_new_instance_method(_itkImageRTKPython.itkImageVF54_FillBuffer)
    SetPixel = _swig_new_instance_method(_itkImageRTKPython.itkImageVF54_SetPixel)
    GetPixel = _swig_new_instance_method(_itkImageRTKPython.itkImageVF54_GetPixel)
    GetBufferPointer = _swig_new_instance_method(_itkImageRTKPython.itkImageVF54_GetBufferPointer)
    GetPixelContainer = _swig_new_instance_method(_itkImageRTKPython.itkImageVF54_GetPixelContainer)
    SetPixelContainer = _swig_new_instance_method(_itkImageRTKPython.itkImageVF54_SetPixelContainer)
    Graft = _swig_new_instance_method(_itkImageRTKPython.itkImageVF54_Graft)
    GetPixelAccessor = _swig_new_instance_method(_itkImageRTKPython.itkImageVF54_GetPixelAccessor)
    GetNeighborhoodAccessor = _swig_new_instance_method(_itkImageRTKPython.itkImageVF54_GetNeighborhoodAccessor)
    __swig_destroy__ = _itkImageRTKPython.delete_itkImageVF54
    cast = _swig_new_static_method(_itkImageRTKPython.itkImageVF54_cast)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageVF54

        Create a new object of the class itkImageVF54 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageVF54.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageVF54.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageVF54.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageVF54 in _itkImageRTKPython:
_itkImageRTKPython.itkImageVF54_swigregister(itkImageVF54)
itkImageVF54___New_orig__ = _itkImageRTKPython.itkImageVF54___New_orig__
itkImageVF54_cast = _itkImageRTKPython.itkImageVF54_cast



