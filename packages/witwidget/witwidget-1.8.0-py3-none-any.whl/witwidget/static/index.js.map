{"version":3,"sources":["webpack:///webpack/bootstrap 35a024d06f29b6f0a2ff","webpack:///./lib/index.js","webpack:///./lib/wit.js","webpack:///external \"@jupyter-widgets/base\""],"names":[],"mappings":";QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,KAAK;QACL;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;QAEA;QACA;;;;;;;AC7DA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,iBAAiB,mBAAO,CAAC,CAAU;;;;;;;ACpBnC;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,cAAc,mBAAO,CAAC,CAAuB;;AAE7C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,6BAA6B,YAAY;AACzC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA,iCAAiC,YAAY;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,wCAAwC,sBAAsB;AAC9D;AACA,KAAK;AACL;AACA,2CAA2C,sBAAsB;AACjE;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA,SAAS;AACT;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,mBAAmB,wBAAwB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,CAAC;;AAED;AACA;AACA;;;;;;;AC9VA,+C","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 35a024d06f29b6f0a2ff","/* Copyright 2018 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\nwindow.__nbextension_path__ =\n  (document.querySelector('body').getAttribute('data-base-url') || '/') +\n  'nbextensions/wit-widget/';\n\n// Export widget models and views.\nmodule.exports = require('./wit.js');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/index.js\n// module id = 0\n// module chunks = 0","/* Copyright 2018 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\nvar widgets = require('@jupyter-widgets/base');\n\n// What-If Tool View. Renders the tool and provides communication with the\n// python backend.\nvar WITView = widgets.DOMWidgetView.extend({\n  render: function() {\n    this.setupComplete = false;\n    // Load up the WIT polymer element.\n    this.loadAndCreateWhatIfToolElement();\n\n    // Add listeners for changes from python.\n    this.model.on('change:examples_batch', this.appendStagedExamples, this);\n    this.model.on('change:config', this.configChanged, this);\n    this.model.on('change:inferences_batch', this.appendStagedInferences, this);\n    this.model.on(\n      'change:eligible_features',\n      this.eligibleFeaturesChanged,\n      this\n    );\n    this.model.on('change:mutant_charts', this.mutantChartsChanged, this);\n    this.model.on('change:sprite', this.spriteChanged, this);\n    this.model.on('change:error', this.backendError, this);\n    this.model.on(\n      'change:custom_distance_dict',\n      this.customDistanceComputed,\n      this\n    );\n  },\n\n  /**\n   * Loads up the WIT element.\n   */\n  loadAndCreateWhatIfToolElement: function() {\n    this.height =\n      parseInt(this.model.attributes.layout.attributes.height, 10) - 20;\n    const iframe = document.createElement('iframe');\n\n    const witHtmlLocation = window.__nbextension_path__ + 'wit_jupyter.html';\n\n    iframe.frameBorder = '0';\n    iframe.style.width = '100%';\n    iframe.style.height = `${this.height}px`;\n    iframe.src = witHtmlLocation;\n    this.el.appendChild(iframe);\n    this.iframe = iframe;\n\n    this.stagedExamples = [];\n    this.stagedInferences = {};\n    // Invoke change listeners for initial settings.\n    this.configChanged();\n    this.spriteChanged();\n  },\n\n  /**\n   * Returns whether or not WIT is ready for calls to be made on it.\n   */\n  isViewReady: function() {\n    // Checks if the iframe has been created, WIT has been created in the iframe\n    // and WIT has completed setup and its methods are created.\n    return (\n      this.iframe.contentDocument &&\n      this.iframe.contentDocument.getElementById('wit') &&\n      this.iframe.contentDocument.getElementById('wit').updateExampleContents\n    );\n  },\n\n  /**\n   * Creates and configure the WIT polymer element.\n   */\n  setupView: function() {\n    this.view_ = this.iframe.contentDocument.getElementById('wit');\n    this.view_.style.height = `${this.height}px`;\n    // Add listeners for changes from WIT Polymer element. Passes changes\n    // along to python.\n    this.view_.addEventListener('infer-examples', (e) => {\n      let i = this.model.get('infer') + 1;\n      this.model.set('infer', i);\n      this.touch();\n    });\n    this.view_.addEventListener('delete-example', (e) => {\n      this.model.set('delete_example', {index: e.detail.index});\n      this.touch();\n    });\n    this.view_.addEventListener('duplicate-example', (e) => {\n      this.model.set('duplicate_example', {index: e.detail.index});\n      this.touch();\n    });\n    this.view_.addEventListener('update-example', (e) => {\n      this.model.set('update_example', {\n        index: e.detail.index,\n        example: e.detail.example,\n      });\n      this.touch();\n    });\n    this.view_.addEventListener('get-eligible-features', (e) => {\n      let i = this.model.get('get_eligible_features') + 1;\n      this.model.set('get_eligible_features', i);\n      this.touch();\n    });\n    this.view_.addEventListener('sort-eligible-features', (e) => {\n      this.model.set('sort_eligible_features', e.detail);\n      this.touch();\n    });\n    this.inferMutantsCounter = 0;\n    this.view_.addEventListener('infer-mutants', (e) => {\n      this.model.set(\n        'infer_mutants',\n        Object.assign({}, e.detail, {\n          infer_mutants_counter_for_busting_cache: this.inferMutantsCounter++,\n        })\n      );\n      this.mutantFeature = e.detail.feature_name;\n      this.touch();\n    });\n    this.computeDistanceCounter = 0;\n    this.view_.addEventListener('compute-custom-distance', (e) => {\n      this.model.set(\n        'compute_custom_distance',\n        Object.assign({}, e.detail, {\n          compute_distance_counter_for_busting_cache: this\n            .computeDistanceCounter++,\n        })\n      );\n      this.touch();\n    });\n    this.setupComplete = true;\n    // Notify backend that setup is complete by incrementing the frontend_ready\n    // counter traitlet.\n    const frontendReady = this.model.get('frontend_ready');\n    this.model.set('frontend_ready', frontendReady + 1);\n    this.touch();\n  },\n\n  // Callback functions for when changes made on python side.\n  appendStagedExamples: function() {\n    if (!this.setupComplete) {\n      if (this.isViewReady()) {\n        this.setupView();\n      }\n      requestAnimationFrame(() => this.appendStagedExamples());\n      return;\n    }\n    const i = this.model.get('examples_batch_id')\n    // Add examples\n    const examples = this.model.get('examples_batch');\n    this.stagedExamples.push(...examples);\n    // Request the next batch\n    this.model.set('examples_batch_id', i - 1);\n    this.touch();\n    // If batch number is 0, it means the transfer is complete.\n    if (i == 0) {\n      this.examplesChanged();\n      // Reset staged examples at the end of the transfer.\n      this.stagedExamples = []\n    }\n  },\n  examplesChanged: function() {\n    if (!this.setupComplete) {\n      if (this.isViewReady()) {\n        this.setupView();\n      }\n      requestAnimationFrame(() => this.examplesChanged());\n      return;\n    }\n    const examples = this.stagedExamples;\n    if (examples && examples.length > 0) {\n      this.view_.updateExampleContents(examples, false);\n    }\n  },\n  appendStagedInferences: function() {\n    if (!this.setupComplete) {\n      if (this.isViewReady()) {\n        this.setupView();\n      }\n      requestAnimationFrame(() => this.appendStagedInferences());\n      return;\n    }\n\n    // Add inferences\n    const res = this.model.get('inferences_batch');\n\n    // If starting a new set of data, reset the staged results.\n    if (Object.keys(this.stagedInferences).length === 0) {\n      this.stagedInferences = res.inferences;\n    }\n\n    for (let i = 0; i < res.results.length; i++) {\n      if (this.view_.modelType == 'classification') {\n        this.stagedInferences.inferences.results[i].classificationResult\n            .classifications.push(...res.results[i]);\n      }\n      else {\n        this.stagedInferences.inferences.results[i].regressionResult\n            .regressions.push(...res.results[i]);\n      }\n      const extras = res.extra[i];\n      for (let key of Object.keys(extras)) {\n        this.stagedInferences.extra_outputs[i][key].push(...extras[key]);\n      }\n    }\n    this.stagedInferences.inferences.indices.push(...res.indices);\n\n    // Request the next batch\n    const batch_id = this.model.get('inferences_batch_id')\n    this.model.set('inferences_batch_id', batch_id - 1);\n    this.touch();\n    // If batch number is 0, it means the transfer is complete.\n    if (batch_id == 0) {\n      this.inferencesChanged();\n      // Reset staged inferences at the end of the transfer.\n      this.stagedInferences = {}\n    }\n  },\n  inferencesChanged: function() {\n    if (!this.setupComplete) {\n      if (this.isViewReady()) {\n        this.setupView();\n      }\n      requestAnimationFrame(() => this.inferencesChanged());\n      return;\n    }\n    const inferences = this.stagedInferences;\n    this.view_.labelVocab = inferences['label_vocab'];\n    this.view_.inferences = inferences['inferences'];\n    this.view_.extraOutputs = {\n      indices: this.view_.inferences.indices,\n      extra: inferences['extra_outputs'],\n    };\n  },\n  eligibleFeaturesChanged: function() {\n    if (!this.setupComplete) {\n      if (this.isViewReady()) {\n        this.setupView();\n      }\n      requestAnimationFrame(() => this.eligibleFeaturesChanged());\n      return;\n    }\n    const features = this.model.get('eligible_features');\n    this.view_.partialDepPlotEligibleFeatures = features;\n  },\n  mutantChartsChanged: function() {\n    if (!this.setupComplete) {\n      if (this.isViewReady()) {\n        this.setupView();\n      }\n      requestAnimationFrame(() => this.mutantChartsChanged());\n      return;\n    }\n    const chartInfo = this.model.get('mutant_charts');\n    this.view_.makeChartForFeature(\n      chartInfo.chartType,\n      this.mutantFeature,\n      chartInfo.data\n    );\n  },\n  configChanged: function() {\n    if (!this.setupComplete) {\n      if (this.isViewReady()) {\n        this.setupView();\n      }\n      requestAnimationFrame(() => this.configChanged());\n      return;\n    }\n    const config = this.model.get('config');\n    if (config == null) {\n      return;\n    }\n    if ('inference_address' in config) {\n      let addresses = config['inference_address'];\n      if ('inference_address_2' in config) {\n        addresses += ',' + config['inference_address_2'];\n      }\n      this.view_.inferenceAddress = addresses;\n    }\n    if ('model_name' in config) {\n      let names = config['model_name'];\n      if ('model_name_2' in config) {\n        names += ',' + config['model_name_2'];\n      }\n      this.view_.modelName = names;\n    }\n    if ('model_type' in config) {\n      this.view_.modelType = config['model_type'];\n    }\n    if ('are_sequence_examples' in config) {\n      this.view_.sequenceExamples = config['are_sequence_examples'];\n    }\n    if ('max_classes' in config) {\n      this.view_.maxInferenceEntriesPerRun = config['max_classes'];\n    }\n    if ('multiclass' in config) {\n      this.view_.multiClass = config['multiclass'];\n    }\n    this.view_.updateNumberOfModels();\n    if ('target_feature' in config) {\n      this.view_.selectedLabelFeature = config['target_feature'];\n    }\n    if ('uses_custom_distance_fn' in config) {\n      this.view_.customDistanceFunctionSet = true;\n    } else {\n      this.view_.customDistanceFunctionSet = false;\n    }\n  },\n  spriteChanged: function() {\n    if (!this.setupComplete) {\n      if (this.isViewReady()) {\n        this.setupView();\n      }\n      requestAnimationFrame(() => this.spriteChanged());\n      return;\n    }\n    const spriteUrl = this.model.get('sprite');\n    this.view_.hasSprite = true;\n    this.view_.localAtlasUrl = spriteUrl;\n    this.view_.updateSprite();\n  },\n  backendError: function() {\n    const error = this.model.get('error');\n    this.view_.handleError(error['msg']);\n  },\n  customDistanceComputed: function() {\n    if (!this.setupComplete) {\n      if (this.isViewReady()) {\n        this.setupView();\n      }\n      requestAnimationFrame(() => this.customDistanceComputed());\n      return;\n    }\n    const customDistanceDict = this.model.get('custom_distance_dict');\n    this.view_.invokeCustomDistanceCallback(customDistanceDict);\n  },\n});\n\nmodule.exports = {\n  WITView: WITView,\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/wit.js\n// module id = 1\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_2__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"@jupyter-widgets/base\"\n// module id = 2\n// module chunks = 0"],"sourceRoot":""}