"""
Copyright 2019 Goldman Sachs.
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
"""

import deprecation
import datetime
from typing import Mapping, Tuple, Union
from enum import Enum
from gs_quant.base import Base, EnumBase, InstrumentBase, Priceable, Scenario, camel_case_translate, get_enum_value


class AssetClass(EnumBase, Enum):    
    
    """Asset classification of security. Assets are classified into broad groups which
       exhibit similar characteristics and behave in a consistent way under
       different market conditions"""

    Cash = 'Cash'
    Commod = 'Commod'
    Credit = 'Credit'
    Cross_Asset = 'Cross Asset'
    Econ = 'Econ'
    Equity = 'Equity'
    Fund = 'Fund'
    FX = 'FX'
    Mortgage = 'Mortgage'
    Rates = 'Rates'
    Loan = 'Loan'
    Social = 'Social'
    Cryptocurrency = 'Cryptocurrency'
    
    def __repr__(self):
        return self.value


class AssetType(EnumBase, Enum):    
    
    """Asset type differentiates the product categorization or contract type"""

    Access = 'Access'
    AssetSwapFxdFlt = 'AssetSwapFxdFlt'
    Any = 'Any'
    AveragePriceOption = 'AveragePriceOption'
    Basis = 'Basis'
    BasisSwap = 'BasisSwap'
    Benchmark = 'Benchmark'
    Benchmark_Rate = 'Benchmark Rate'
    Binary = 'Binary'
    Bond = 'Bond'
    BondFuture = 'BondFuture'
    BondFutureOption = 'BondFutureOption'
    BondOption = 'BondOption'
    Calendar_Spread = 'Calendar Spread'
    Cap = 'Cap'
    Cash = 'Cash'
    Certificate = 'Certificate'
    CD = 'CD'
    Cliquet = 'Cliquet'
    CMSOption = 'CMSOption'
    CMSOptionStrip = 'CMSOptionStrip'
    CMSSpreadOption = 'CMSSpreadOption'
    CMSSpreadOptionStrip = 'CMSSpreadOptionStrip'
    Commodity = 'Commodity'
    CommodityReferencePrice = 'CommodityReferencePrice'
    CommodVarianceSwap = 'CommodVarianceSwap'
    CommodityPowerNode = 'CommodityPowerNode'
    CommodityPowerAggregatedNodes = 'CommodityPowerAggregatedNodes'
    CommodityEUNaturalGasHub = 'CommodityEUNaturalGasHub'
    CommodityNaturalGasHub = 'CommodityNaturalGasHub'
    Company = 'Company'
    Convertible = 'Convertible'
    Credit_Basket = 'Credit Basket'
    Cross = 'Cross'
    CSL = 'CSL'
    Currency = 'Currency'
    Custom_Basket = 'Custom Basket'
    Cryptocurrency = 'Cryptocurrency'
    Default_Swap = 'Default Swap'
    Economic = 'Economic'
    Endowment = 'Endowment'
    Equity_Basket = 'Equity Basket'
    ETF = 'ETF'
    ETN = 'ETN'
    Event = 'Event'
    FRA = 'FRA'
    FixedLeg = 'FixedLeg'
    Fixing = 'Fixing'
    FloatLeg = 'FloatLeg'
    Floor = 'Floor'
    Forward = 'Forward'
    Fund = 'Fund'
    Future = 'Future'
    FutureContract = 'FutureContract'
    FutureMarket = 'FutureMarket'
    FutureOption = 'FutureOption'
    FutureStrategy = 'FutureStrategy'
    Hedge_Fund = 'Hedge Fund'
    Index = 'Index'
    InflationSwap = 'InflationSwap'
    Inter_Commodity_Spread = 'Inter-Commodity Spread'
    InvoiceSpread = 'InvoiceSpread'
    Market_Location = 'Market Location'
    MLF = 'MLF'
    Multi_Asset_Allocation = 'Multi-Asset Allocation'
    MultiCrossBinary = 'MultiCrossBinary'
    MultiCrossBinaryLeg = 'MultiCrossBinaryLeg'
    Mutual_Fund = 'Mutual Fund'
    Note = 'Note'
    Option = 'Option'
    OptionLeg = 'OptionLeg'
    OptionStrategy = 'OptionStrategy'
    Pension_Fund = 'Pension Fund'
    Preferred_Stock = 'Preferred Stock'
    Physical = 'Physical'
    Precious_Metal = 'Precious Metal'
    Precious_Metal_Swap = 'Precious Metal Swap'
    Precious_Metal_RFQ = 'Precious Metal RFQ'
    Reference_Entity = 'Reference Entity'
    Research_Basket = 'Research Basket'
    Rate = 'Rate'
    Risk_Premia = 'Risk Premia'
    Roll = 'Roll'
    Securities_Lending_Loan = 'Securities Lending Loan'
    Share_Class = 'Share Class'
    Single_Stock = 'Single Stock'
    Swap = 'Swap'
    SwapLeg = 'SwapLeg'
    SwapStrategy = 'SwapStrategy'
    Swaption = 'Swaption'
    Synthetic = 'Synthetic'
    Systematic_Hedging = 'Systematic Hedging'
    VarianceSwap = 'VarianceSwap'
    VolatilitySwap = 'VolatilitySwap'
    WeatherIndex = 'WeatherIndex'
    XccySwap = 'XccySwap'
    XccySwapFixFix = 'XccySwapFixFix'
    XccySwapFixFlt = 'XccySwapFixFlt'
    XccySwapMTM = 'XccySwapMTM'
    
    def __repr__(self):
        return self.value


class AswType(EnumBase, Enum):    
    
    """Asset Swap Type"""

    Par = 'Par'
    Proceeds = 'Proceeds'
    
    def __repr__(self):
        return self.value


class BasketAction(EnumBase, Enum):    
    
    """Indicates what was the action taken on basket - create/edit/rebalance"""

    Create = 'Create'
    Edit = 'Edit'
    Rebalance = 'Rebalance'
    
    def __repr__(self):
        return self.value


class BondStrikeType(EnumBase, Enum):    
    
    """The type of the bond strike - price, yield etc"""

    Price = 'Price'
    Yield = 'Yield'
    
    def __repr__(self):
        return self.value


class BusinessDayConvention(EnumBase, Enum):    
    
    """Business Day Convention"""

    Following = 'Following'
    Modified_Following = 'Modified Following'
    Previous = 'Previous'
    Unadjusted = 'Unadjusted'
    
    def __repr__(self):
        return self.value


class BuySell(EnumBase, Enum):    
    
    """Buy or Sell side of contract"""

    Buy = 'Buy'
    Sell = 'Sell'
    
    def __repr__(self):
        return self.value


class CommodMeanRule(EnumBase, Enum):    
    
    """Commodity mean rule"""

    Do_Not_Remove = 'Do Not Remove'
    Remove_Calculated = 'Remove Calculated'
    Remove_Fixed = 'Remove Fixed'
    
    def __repr__(self):
        return self.value


class CommodUnit(EnumBase, Enum):    
    
    """A coding scheme value to identify the unit of measure (e.g. Therms) in which the
       undelryer is denominated."""

    Lot = 'Lot'
    MegaWattHour = 'MegaWattHour'
    Metric_Ton = 'Metric Ton'
    Million_British_Thermal_Units = 'Million British Thermal Units'
    Oil_Barrel = 'Oil Barrel'
    Troy_Pound = 'Troy Pound'
    US_Gallon = 'US Gallon'
    
    def __repr__(self):
        return self.value


class CountryCode(EnumBase, Enum):    
    
    """ISO Country code"""

    AU = 'AU'
    CX = 'CX'
    CC = 'CC'
    HM = 'HM'
    NF = 'NF'
    NZ = 'NZ'
    CK = 'CK'
    NU = 'NU'
    TK = 'TK'
    JP = 'JP'
    JN = 'JN'
    EU = 'EU'
    ER = 'ER'
    EZ = 'EZ'
    AT = 'AT'
    BE = 'BE'
    FI = 'FI'
    FR = 'FR'
    GF = 'GF'
    PF = 'PF'
    TF = 'TF'
    GP = 'GP'
    MQ = 'MQ'
    YT = 'YT'
    NC = 'NC'
    RE = 'RE'
    SH = 'SH'
    PM = 'PM'
    WF = 'WF'
    DE = 'DE'
    GE = 'GE'
    GR = 'GR'
    IE = 'IE'
    IT = 'IT'
    LU = 'LU'
    NL = 'NL'
    AW = 'AW'
    AN = 'AN'
    PT = 'PT'
    ES = 'ES'
    BY = 'BY'
    CH = 'CH'
    SE = 'SE'
    SW = 'SW'
    DK = 'DK'
    FO = 'FO'
    NO = 'NO'
    BV = 'BV'
    SJ = 'SJ'
    LI = 'LI'
    GB = 'GB'
    UK = 'UK'
    AI = 'AI'
    IO = 'IO'
    KY = 'KY'
    FK = 'FK'
    GI = 'GI'
    MS = 'MS'
    PN = 'PN'
    GS = 'GS'
    TC = 'TC'
    VG = 'VG'
    JE = 'JE'
    _02 = '02'
    US = 'US'
    AS = 'AS'
    GU = 'GU'
    MP = 'MP'
    PR = 'PR'
    UM = 'UM'
    VI = 'VI'
    CA = 'CA'
    AR = 'AR'
    BA = 'BA'
    BD = 'BD'
    BG = 'BG'
    BS = 'BS'
    BM = 'BM'
    BO = 'BO'
    BR = 'BR'
    CL = 'CL'
    CN = 'CN'
    CO = 'CO'
    CR = 'CR'
    CZ = 'CZ'
    DO = 'DO'
    EC = 'EC'
    EG = 'EG'
    GA = 'GA'
    GT = 'GT'
    HK = 'HK'
    HR = 'HR'
    HU = 'HU'
    IL = 'IL'
    IM = 'IM'
    IR = 'IR'
    IS = 'IS'
    JO = 'JO'
    KE = 'KE'
    KR = 'KR'
    KZ = 'KZ'
    LB = 'LB'
    LK = 'LK'
    LT = 'LT'
    MA = 'MA'
    MH = 'MH'
    ML = 'ML'
    MO = 'MO'
    MT = 'MT'
    MX = 'MX'
    MY = 'MY'
    NI = 'NI'
    OM = 'OM'
    PA = 'PA'
    PD = 'PD'
    PE = 'PE'
    PH = 'PH'
    PK = 'PK'
    PL = 'PL'
    QA = 'QA'
    RO = 'RO'
    RU = 'RU'
    SA = 'SA'
    SG = 'SG'
    SI = 'SI'
    SK = 'SK'
    SV = 'SV'
    TH = 'TH'
    TN = 'TN'
    TP = 'TP'
    TR = 'TR'
    TW = 'TW'
    UA = 'UA'
    UY = 'UY'
    VE = 'VE'
    VN = 'VN'
    ZA = 'ZA'
    BH = 'BH'
    EE = 'EE'
    GH = 'GH'
    ME = 'ME'
    RS = 'RS'
    ZM = 'ZM'
    ZW = 'ZW'
    TT = 'TT'
    AE = 'AE'
    KW = 'KW'
    BB = 'BB'
    LV = 'LV'
    GG = 'GG'
    CY = 'CY'
    CI = 'CI'
    MU = 'MU'
    PY = 'PY'
    HN = 'HN'
    BZ = 'BZ'
    NA = 'NA'
    FJ = 'FJ'
    BW = 'BW'
    DZ = 'DZ'
    MN = 'MN'
    SN = 'SN'
    TZ = 'TZ'
    AD = 'AD'
    AG = 'AG'
    AL = 'AL'
    AM = 'AM'
    AO = 'AO'
    AZ = 'AZ'
    BF = 'BF'
    BI = 'BI'
    BJ = 'BJ'
    BN = 'BN'
    BT = 'BT'
    CD = 'CD'
    CF = 'CF'
    CG = 'CG'
    CM = 'CM'
    CU = 'CU'
    CV = 'CV'
    CS = 'CS'
    DJ = 'DJ'
    DM = 'DM'
    EH = 'EH'
    ET = 'ET'
    FM = 'FM'
    GD = 'GD'
    GL = 'GL'
    GM = 'GM'
    GN = 'GN'
    GQ = 'GQ'
    GW = 'GW'
    GY = 'GY'
    HT = 'HT'
    ID = 'ID'
    IN = 'IN'
    IQ = 'IQ'
    JM = 'JM'
    KG = 'KG'
    KH = 'KH'
    KI = 'KI'
    KM = 'KM'
    KN = 'KN'
    KP = 'KP'
    LA = 'LA'
    LC = 'LC'
    LR = 'LR'
    LS = 'LS'
    LY = 'LY'
    MC = 'MC'
    MD = 'MD'
    MG = 'MG'
    MK = 'MK'
    MM = 'MM'
    MR = 'MR'
    MV = 'MV'
    MW = 'MW'
    MZ = 'MZ'
    NE = 'NE'
    NG = 'NG'
    NP = 'NP'
    NR = 'NR'
    PG = 'PG'
    PW = 'PW'
    RW = 'RW'
    SB = 'SB'
    SC = 'SC'
    SD = 'SD'
    SL = 'SL'
    SM = 'SM'
    SO = 'SO'
    SR = 'SR'
    ST = 'ST'
    SY = 'SY'
    SZ = 'SZ'
    TD = 'TD'
    TG = 'TG'
    TJ = 'TJ'
    TL = 'TL'
    TM = 'TM'
    TO = 'TO'
    TV = 'TV'
    UG = 'UG'
    UZ = 'UZ'
    VA = 'VA'
    VC = 'VC'
    VU = 'VU'
    WS = 'WS'
    YE = 'YE'
    
    def __repr__(self):
        return self.value


class CreditOptionStrikeType(EnumBase, Enum):    
    
    Spread_Adj = 'Spread Adj'
    Delta = 'Delta'
    
    def __repr__(self):
        return self.value


class CreditOptionType(EnumBase, Enum):    
    
    Payer = 'Payer'
    Receiver = 'Receiver'
    
    def __repr__(self):
        return self.value


class Currency(EnumBase, Enum):    
    
    """Currency, ISO 4217 currency code or exchange quote modifier (e.g. GBP vs GBp)"""

    _ = ''
    ACU = 'ACU'
    ADP = 'ADP'
    AED = 'AED'
    AFA = 'AFA'
    ALL = 'ALL'
    AMD = 'AMD'
    ANG = 'ANG'
    AOA = 'AOA'
    AOK = 'AOK'
    AON = 'AON'
    ARA = 'ARA'
    ARS = 'ARS'
    ARZ = 'ARZ'
    ATS = 'ATS'
    AUD = 'AUD'
    AUZ = 'AUZ'
    AZM = 'AZM'
    B03 = 'B03'
    BAD = 'BAD'
    BAK = 'BAK'
    BAM = 'BAM'
    BBD = 'BBD'
    BDN = 'BDN'
    BDT = 'BDT'
    BEF = 'BEF'
    BGL = 'BGL'
    BGN = 'BGN'
    BHD = 'BHD'
    BIF = 'BIF'
    BMD = 'BMD'
    BND = 'BND'
    BR6 = 'BR6'
    BRE = 'BRE'
    BRF = 'BRF'
    BRL = 'BRL'
    BRR = 'BRR'
    BSD = 'BSD'
    BTC = 'BTC'
    BTN = 'BTN'
    BTR = 'BTR'
    BWP = 'BWP'
    BYR = 'BYR'
    BZD = 'BZD'
    C23 = 'C23'
    CAC = 'CAC'
    CAD = 'CAD'
    CAZ = 'CAZ'
    CCI = 'CCI'
    CDF = 'CDF'
    CFA = 'CFA'
    CHF = 'CHF'
    CHZ = 'CHZ'
    CLF = 'CLF'
    CLP = 'CLP'
    CLZ = 'CLZ'
    CNH = 'CNH'
    CNO = 'CNO'
    CNY = 'CNY'
    CNZ = 'CNZ'
    COP = 'COP'
    COZ = 'COZ'
    CPB = 'CPB'
    CPI = 'CPI'
    CRC = 'CRC'
    CUP = 'CUP'
    CVE = 'CVE'
    CYP = 'CYP'
    CZH = 'CZH'
    CZK = 'CZK'
    DAX = 'DAX'
    DEM = 'DEM'
    DIJ = 'DIJ'
    DJF = 'DJF'
    DKK = 'DKK'
    DOP = 'DOP'
    DZD = 'DZD'
    E51 = 'E51'
    E52 = 'E52'
    E53 = 'E53'
    E54 = 'E54'
    ECI = 'ECI'
    ECS = 'ECS'
    ECU = 'ECU'
    EEK = 'EEK'
    EF0 = 'EF0'
    EGP = 'EGP'
    ESP = 'ESP'
    ETB = 'ETB'
    EUR = 'EUR'
    EUZ = 'EUZ'
    F06 = 'F06'
    FED = 'FED'
    FIM = 'FIM'
    FJD = 'FJD'
    FKP = 'FKP'
    FRF = 'FRF'
    FT1 = 'FT1'
    GBP = 'GBP'
    GBZ = 'GBZ'
    GEK = 'GEK'
    GHC = 'GHC'
    GHS = 'GHS'
    GHY = 'GHY'
    GIP = 'GIP'
    GLR = 'GLR'
    GMD = 'GMD'
    GNF = 'GNF'
    GQE = 'GQE'
    GRD = 'GRD'
    GTQ = 'GTQ'
    GWP = 'GWP'
    GYD = 'GYD'
    HKB = 'HKB'
    HKD = 'HKD'
    HNL = 'HNL'
    HRK = 'HRK'
    HSI = 'HSI'
    HTG = 'HTG'
    HUF = 'HUF'
    IDB = 'IDB'
    IDO = 'IDO'
    IDR = 'IDR'
    IEP = 'IEP'
    IGP = 'IGP'
    ILS = 'ILS'
    INO = 'INO'
    INP = 'INP'
    INR = 'INR'
    IPA = 'IPA'
    IPX = 'IPX'
    IQD = 'IQD'
    IRR = 'IRR'
    IRS = 'IRS'
    ISI = 'ISI'
    ISK = 'ISK'
    ISO = 'ISO'
    ITL = 'ITL'
    J05 = 'J05'
    JMD = 'JMD'
    JNI = 'JNI'
    JOD = 'JOD'
    JPY = 'JPY'
    JPZ = 'JPZ'
    JZ9 = 'JZ9'
    KES = 'KES'
    KGS = 'KGS'
    KHR = 'KHR'
    KMF = 'KMF'
    KOR = 'KOR'
    KPW = 'KPW'
    KRW = 'KRW'
    KWD = 'KWD'
    KYD = 'KYD'
    KZT = 'KZT'
    LAK = 'LAK'
    LBA = 'LBA'
    LBP = 'LBP'
    LHY = 'LHY'
    LKR = 'LKR'
    LRD = 'LRD'
    LSL = 'LSL'
    LSM = 'LSM'
    LTL = 'LTL'
    LUF = 'LUF'
    LVL = 'LVL'
    LYD = 'LYD'
    MAD = 'MAD'
    MDL = 'MDL'
    MGF = 'MGF'
    MKD = 'MKD'
    MMK = 'MMK'
    MNT = 'MNT'
    MOP = 'MOP'
    MRO = 'MRO'
    MTP = 'MTP'
    MUR = 'MUR'
    MVR = 'MVR'
    MWK = 'MWK'
    MXB = 'MXB'
    MXN = 'MXN'
    MXP = 'MXP'
    MXW = 'MXW'
    MXZ = 'MXZ'
    MYO = 'MYO'
    MYR = 'MYR'
    MZM = 'MZM'
    MZN = 'MZN'
    NAD = 'NAD'
    ND3 = 'ND3'
    NGF = 'NGF'
    NGI = 'NGI'
    NGN = 'NGN'
    NIC = 'NIC'
    NLG = 'NLG'
    NOK = 'NOK'
    NOZ = 'NOZ'
    NPR = 'NPR'
    NZD = 'NZD'
    NZZ = 'NZZ'
    O08 = 'O08'
    OMR = 'OMR'
    PAB = 'PAB'
    PEI = 'PEI'
    PEN = 'PEN'
    PEZ = 'PEZ'
    PGK = 'PGK'
    PHP = 'PHP'
    PKR = 'PKR'
    PLN = 'PLN'
    PLZ = 'PLZ'
    PSI = 'PSI'
    PTE = 'PTE'
    PYG = 'PYG'
    QAR = 'QAR'
    R2K = 'R2K'
    ROL = 'ROL'
    RON = 'RON'
    RSD = 'RSD'
    RUB = 'RUB'
    RUF = 'RUF'
    RUR = 'RUR'
    RWF = 'RWF'
    SAR = 'SAR'
    SBD = 'SBD'
    SCR = 'SCR'
    SDP = 'SDP'
    SDR = 'SDR'
    SEK = 'SEK'
    SET = 'SET'
    SGD = 'SGD'
    SGS = 'SGS'
    SHP = 'SHP'
    SKK = 'SKK'
    SLL = 'SLL'
    SRG = 'SRG'
    SSI = 'SSI'
    STD = 'STD'
    SUR = 'SUR'
    SVC = 'SVC'
    SVT = 'SVT'
    SYP = 'SYP'
    SZL = 'SZL'
    T21 = 'T21'
    T51 = 'T51'
    T52 = 'T52'
    T53 = 'T53'
    T54 = 'T54'
    T55 = 'T55'
    T71 = 'T71'
    TE0 = 'TE0'
    TED = 'TED'
    TF9 = 'TF9'
    THB = 'THB'
    THO = 'THO'
    TMM = 'TMM'
    TND = 'TND'
    TNT = 'TNT'
    TOP = 'TOP'
    TPE = 'TPE'
    TPX = 'TPX'
    TRB = 'TRB'
    TRL = 'TRL'
    TRY = 'TRY'
    TRZ = 'TRZ'
    TTD = 'TTD'
    TWD = 'TWD'
    TZS = 'TZS'
    UAH = 'UAH'
    UCB = 'UCB'
    UDI = 'UDI'
    UFC = 'UFC'
    UFZ = 'UFZ'
    UGS = 'UGS'
    UGX = 'UGX'
    USB = 'USB'
    USD = 'USD'
    UVR = 'UVR'
    UYP = 'UYP'
    UYU = 'UYU'
    VAC = 'VAC'
    VEB = 'VEB'
    VEF = 'VEF'
    VES = 'VES'
    VND = 'VND'
    VUV = 'VUV'
    WST = 'WST'
    XAF = 'XAF'
    XAG = 'XAG'
    XAU = 'XAU'
    XPD = 'XPD'
    XPT = 'XPT'
    XCD = 'XCD'
    XDR = 'XDR'
    XEU = 'XEU'
    XOF = 'XOF'
    XPF = 'XPF'
    YDD = 'YDD'
    YER = 'YER'
    YUD = 'YUD'
    YUN = 'YUN'
    ZAL = 'ZAL'
    ZAR = 'ZAR'
    ZAZ = 'ZAZ'
    ZMK = 'ZMK'
    ZMW = 'ZMW'
    ZRN = 'ZRN'
    ZRZ = 'ZRZ'
    ZWD = 'ZWD'
    AUd = 'AUd'
    BWp = 'BWp'
    EUr = 'EUr'
    GBp = 'GBp'
    ILs = 'ILs'
    KWd = 'KWd'
    MWk = 'MWk'
    SGd = 'SGd'
    SZl = 'SZl'
    USd = 'USd'
    ZAr = 'ZAr'
    
    def __repr__(self):
        return self.value


class CurrencyName(EnumBase, Enum):    
    
    """Currency Names"""

    _ = ''
    United_States_Dollar = 'United States Dollar'
    Australian_Dollar = 'Australian Dollar'
    Canadian_Dollar = 'Canadian Dollar'
    Swiss_Franc = 'Swiss Franc'
    Yuan_Renminbi_Hong_Kong = 'Yuan Renminbi (Hong Kong)'
    Czech_Republic_Koruna = 'Czech Republic Koruna'
    Euro = 'Euro'
    Pound_Sterling = 'Pound Sterling'
    Japanese_Yen = 'Japanese Yen'
    South_Korean_Won = 'South Korean Won'
    Malasyan_Ringgit = 'Malasyan Ringgit'
    Norwegian_Krone = 'Norwegian Krone'
    New_Zealand_Dollar = 'New Zealand Dollar'
    Polish_Zloty = 'Polish Zloty'
    Russian_Rouble = 'Russian Rouble'
    Swedish_Krona = 'Swedish Krona'
    South_African_Rand = 'South African Rand'
    Yuan_Renminbi_Onshore = 'Yuan Renminbi (Onshore)'
    
    def __repr__(self):
        return self.value


class DayCountFraction(EnumBase, Enum):    
    
    """Day Count Fraction"""

    ACT_OVER_360 = 'ACT/360'
    ACT_OVER_360_ISDA = 'ACT/360 ISDA'
    ACT_OVER_365_Fixed = 'ACT/365 (Fixed)'
    ACT_OVER_365_Fixed_ISDA = 'ACT/365 Fixed ISDA'
    ACT_OVER_365L_ISDA = 'ACT/365L ISDA'
    ACT_OVER_ACT_ISDA = 'ACT/ACT ISDA'
    ACT_OVER_ACT_ISMA = 'ACT/ACT ISMA'
    _30_OVER_360 = '30/360'
    _30E_OVER_360 = '30E/360'
    
    def __repr__(self):
        return self.value


class Field(EnumBase, Enum):    
    
    """Field to be returned"""

    investmentRate = 'investmentRate'
    startingEmmaLegalEntityId = 'startingEmmaLegalEntityId'
    mdapiClass = 'mdapiClass'
    totalNotionalUSD = 'totalNotionalUSD'
    bidUnadjusted = 'bidUnadjusted'
    aggressiveFillsPercentage = 'aggressiveFillsPercentage'
    future10yrMarketCap = 'future10yrMarketCap'
    vehicleType = 'vehicleType'
    totalFatalitiesByState = 'totalFatalitiesByState'
    newActive = 'newActive'
    dailyRisk = 'dailyRisk'
    energy = 'energy'
    sunshineDailyForecast = 'sunshineDailyForecast'
    sentimentScore = 'sentimentScore'
    _0 = '0'
    _1 = '1'
    _2 = '2'
    _3 = '3'
    correlation = 'correlation'
    exposure = 'exposure'
    size = 'size'
    _4 = '4'
    _5 = '5'
    _6 = '6'
    _7 = '7'
    marketDataAsset = 'marketDataAsset'
    _8 = '8'
    _9 = '9'
    buy75cents = 'buy75cents'
    unadjustedHigh = 'unadjustedHigh'
    sourceImportance = 'sourceImportance'
    closingYield = 'closingYield'
    wind = 'wind'
    sc16 = 'sc16'
    sc15 = 'sc15'
    sc12 = 'sc12'
    sc11 = 'sc11'
    primaryVwapInLimitUnrealizedBps = 'primaryVwapInLimitUnrealizedBps'
    displayName = 'displayName'
    minutesToTrade100Pct = 'minutesToTrade100Pct'
    sc14 = 'sc14'
    cumulativeVolumeInShares = 'cumulativeVolumeInShares'
    sc13 = 'sc13'
    newFatalities = 'newFatalities'
    buy50bps = 'buy50bps'
    numStaffedBeds = 'numStaffedBeds'
    upfrontPayment = 'upfrontPayment'
    arrivalMidRealizedCash = 'arrivalMidRealizedCash'
    sc10 = 'sc10'
    sc05 = 'sc05'
    a = 'a'
    sc04 = 'sc04'
    b = 'b'
    sc07 = 'sc07'
    c = 'c'
    yieldToMaturity = 'yieldToMaturity'
    sc06 = 'sc06'
    address = 'address'
    sc01 = 'sc01'
    leg2PaymentFrequency = 'leg2PaymentFrequency'
    sc03 = 'sc03'
    sc02 = 'sc02'
    geographyName = 'geographyName'
    borrower = 'borrower'
    shareClassType = 'shareClassType'
    settlePrice = 'settlePrice'
    performanceContribution = 'performanceContribution'
    sc09 = 'sc09'
    mktClass = 'mktClass'
    sc08 = 'sc08'
    collateralization = 'collateralization'
    futureMonthU26 = 'futureMonthU26'
    futureMonthU25 = 'futureMonthU25'
    futureMonthU24 = 'futureMonthU24'
    futureMonthU23 = 'futureMonthU23'
    futureMonthU22 = 'futureMonthU22'
    statementId = 'statementId'
    futureMonthU21 = 'futureMonthU21'
    modifiedDuration = 'modifiedDuration'
    vol180d = 'vol180d'
    shortRatesContribution = 'shortRatesContribution'
    impliedNormalVolatility = 'impliedNormalVolatility'
    solarGeneration = 'solarGeneration'
    mtmPrice = 'mtmPrice'
    swapSpreadChange = 'swapSpreadChange'
    realizedArrivalPerformanceUSD = 'realizedArrivalPerformanceUSD'
    portfolioAssets = 'portfolioAssets'
    pricingdate = 'pricingdate'
    tcmCostHorizon3Hour = 'tcmCostHorizon3Hour'
    exchangeRate = 'exchangeRate'
    potentialBedCapInc = 'potentialBedCapInc'
    numberCovered = 'numberCovered'
    numberOfPositions = 'numberOfPositions'
    openUnadjusted = 'openUnadjusted'
    strikeTime = 'strikeTime'
    askPrice = 'askPrice'
    eventId = 'eventId'
    sectors = 'sectors'
    additionalPriceNotationType = 'additionalPriceNotationType'
    grossInvestmentQtd = 'grossInvestmentQtd'
    annualizedRisk = 'annualizedRisk'
    estimatedHoldingTimeShort = 'estimatedHoldingTimeShort'
    midcurvePremium = 'midcurvePremium'
    volumeComposite = 'volumeComposite'
    sharpeQtd = 'sharpeQtd'
    clearingExceptionOrExemptionIndicator = 'clearingExceptionOrExemptionIndicator'
    estimatedHoldingTimeLong = 'estimatedHoldingTimeLong'
    external = 'external'
    trackerName = 'trackerName'
    sell50cents = 'sell50cents'
    tradePrice = 'tradePrice'
    cleared = 'cleared'
    primeIdNumeric = 'primeIdNumeric'
    buy8bps = 'buy8bps'
    totalNotionalLocal = 'totalNotionalLocal'
    cid = 'cid'
    totalConfirmedSeniorHome = 'totalConfirmedSeniorHome'
    ctdFwdPrice = 'ctdFwdPrice'
    sinkFactor = 'sinkFactor'
    temperatureForecast = 'temperatureForecast'
    primaryAssetClass = 'primaryAssetClass'
    bidHigh = 'bidHigh'
    pnlQtd = 'pnlQtd'
    buy50cents = 'buy50cents'
    sell4bps = 'sell4bps'
    receiverDayCountFraction = 'receiverDayCountFraction'
    auctionClosePercentage = 'auctionClosePercentage'
    targetPrice = 'targetPrice'
    bosInBpsDescription = 'bosInBpsDescription'
    lowPrice = 'lowPrice'
    adv22DayPct = 'adv22DayPct'
    gateType = 'gateType'
    matchedMaturitySwapSpread12m = 'matchedMaturitySwapSpread12m'
    priceRangeInTicksLabel = 'priceRangeInTicksLabel'
    ticker = 'ticker'
    notionalUnit = 'notionalUnit'
    tcmCostHorizon1Day = 'tcmCostHorizon1Day'
    approval = 'approval'
    testMeasure = 'testMeasure'
    optionLockOutPeriod = 'optionLockOutPeriod'
    executionTime = 'executionTime'
    sourceValueForecast = 'sourceValueForecast'
    leg2Spread = 'leg2Spread'
    shortConvictionLarge = 'shortConvictionLarge'
    leg1FloatingRateIndex = 'leg1FloatingRateIndex'
    ccgName = 'ccgName'
    dollarExcessReturn = 'dollarExcessReturn'
    gsn = 'gsn'
    tradeEndDate = 'tradeEndDate'
    receiverRateOption = 'receiverRateOption'
    gss = 'gss'
    percentOfMediandv1m = 'percentOfMediandv1m'
    lendables = 'lendables'
    sell75cents = 'sell75cents'
    optionAdjustedSpread = 'optionAdjustedSpread'
    optionAdjustedSwapSpread = 'optionAdjustedSwapSpread'
    bosInTicksLabel = 'bosInTicksLabel'
    positionSourceId = 'positionSourceId'
    buy1bps = 'buy1bps'
    buy3point5bps = 'buy3point5bps'
    gsSustainRegion = 'gsSustainRegion'
    absoluteReturnWtd = 'absoluteReturnWtd'
    deploymentId = 'deploymentId'
    assetParametersSeniority = 'assetParametersSeniority'
    askSpread = 'askSpread'
    flow = 'flow'
    futureMonthH26 = 'futureMonthH26'
    loanRebate = 'loanRebate'
    futureMonthH25 = 'futureMonthH25'
    period = 'period'
    indexCreateSource = 'indexCreateSource'
    futureMonthH24 = 'futureMonthH24'
    futureMonthH23 = 'futureMonthH23'
    futureMonthH22 = 'futureMonthH22'
    futureMonthH21 = 'futureMonthH21'
    nonUsdOis = 'nonUsdOis'
    realTWIContribution = 'realTWIContribution'
    mktAsset = 'mktAsset'
    leg2IndexLocation = 'leg2IndexLocation'
    twapUnrealizedBps = 'twapUnrealizedBps'
    quantityUnitOfMeasure = 'quantityUnitOfMeasure'
    lastUpdatedMessage = 'lastUpdatedMessage'
    loanValue = 'loanValue'
    optionAdjustedOISSpread = 'optionAdjustedOISSpread'
    totalReturnPrice = 'totalReturnPrice'
    valueCurrency = 'valueCurrency'
    weightedPercentInModel = 'weightedPercentInModel'
    initLoanSpreadRequired = 'initLoanSpreadRequired'
    electionPeriod = 'electionPeriod'
    fundingAskPrice = 'fundingAskPrice'
    historicalBeta = 'historicalBeta'
    bondRiskPremiumIndex = 'bondRiskPremiumIndex'
    hitRateYtd = 'hitRateYtd'
    girGsdeerGsfeer = 'girGsdeerGsfeer'
    numUnits = 'numUnits'
    assetParametersReceiverFrequency = 'assetParametersReceiverFrequency'
    expenseRatioGrossBps = 'expenseRatioGrossBps'
    relativePayoffWtd = 'relativePayoffWtd'
    ctdPrice = 'ctdPrice'
    paceOfRollNow = 'paceOfRollNow'
    product = 'product'
    leg2ReturnType = 'leg2ReturnType'
    agentLenderFee = 'agentLenderFee'
    disseminationId = 'disseminationId'
    optionStrikePrice = 'optionStrikePrice'
    precipitationType = 'precipitationType'
    lowerBound = 'lowerBound'
    active1yrMarketCap = 'active1yrMarketCap'
    arrivalMidNormalized = 'arrivalMidNormalized'
    underlyingAsset2 = 'underlyingAsset2'
    underlyingAsset1 = 'underlyingAsset1'
    legalEntity = 'legalEntity'
    performanceFee = 'performanceFee'
    orderState = 'orderState'
    actualDataQuality = 'actualDataQuality'
    indexRatio = 'indexRatio'
    queueInLotsLabel = 'queueInLotsLabel'
    adv10DayPct = 'adv10DayPct'
    longConvictionMedium = 'longConvictionMedium'
    relativeHitRateWtd = 'relativeHitRateWtd'
    dailyTrackingError = 'dailyTrackingError'
    sell140cents = 'sell140cents'
    sell10bps = 'sell10bps'
    aggressiveOffsetFromLast = 'aggressiveOffsetFromLast'
    longitude = 'longitude'
    newIcu = 'newIcu'
    marketCap = 'marketCap'
    weightedAverageMid = 'weightedAverageMid'
    clusterRegion = 'clusterRegion'
    valoren = 'valoren'
    indexName = 'indexName'
    averageExecutionPrice = 'averageExecutionPrice'
    proceedsAssetOISSwapSpread1m = 'proceedsAssetOISSwapSpread1m'
    payoffWtd = 'payoffWtd'
    basis = 'basis'
    investmentRateTrend = 'investmentRateTrend'
    grossInvestmentMtd = 'grossInvestmentMtd'
    _200 = '200'
    hedgeId = 'hedgeId'
    _201 = '201'
    sharpeMtd = 'sharpeMtd'
    _202 = '202'
    _203 = '203'
    tcmCostHorizon8Day = 'tcmCostHorizon8Day'
    _204 = '204'
    residualVariance = 'residualVariance'
    _205 = '205'
    restrictInternalDerivedData = 'restrictInternalDerivedData'
    _206 = '206'
    _207 = '207'
    _208 = '208'
    adv5DayPct = 'adv5DayPct'
    _209 = '209'
    midpointFillsPercentage = 'midpointFillsPercentage'
    openInterest = 'openInterest'
    turnoverCompositeUnadjusted = 'turnoverCompositeUnadjusted'
    fwdPoints = 'fwdPoints'
    relativeReturnWtd = 'relativeReturnWtd'
    units = 'units'
    payerRateOption = 'payerRateOption'
    assetClassificationsRiskCountryName = 'assetClassificationsRiskCountryName'
    extMktPoint3 = 'extMktPoint3'
    _210 = '210'
    _211 = '211'
    matchedMaturitySwapSpread = 'matchedMaturitySwapSpread'
    _212 = '212'
    cityName = 'cityName'
    _213 = '213'
    hourlyBucket = 'hourlyBucket'
    _214 = '214'
    averageImpliedVolatility = 'averageImpliedVolatility'
    totalHospitalizedWithSymptoms = 'totalHospitalizedWithSymptoms'
    _215 = '215'
    _216 = '216'
    _217 = '217'
    daysOpenRealizedCash = 'daysOpenRealizedCash'
    _218 = '218'
    _219 = '219'
    adjustedHighPrice = 'adjustedHighPrice'
    proceedsAssetOISSwapSpread = 'proceedsAssetOISSwapSpread'
    extMktPoint1 = 'extMktPoint1'
    direction = 'direction'
    extMktPoint2 = 'extMktPoint2'
    subRegionCode = 'subRegionCode'
    assetParametersFixedRate = 'assetParametersFixedRate'
    isEstimatedReturn = 'isEstimatedReturn'
    valueForecast = 'valueForecast'
    totalIcu = 'totalIcu'
    positionSourceType = 'positionSourceType'
    previousCloseUnrealizedCash = 'previousCloseUnrealizedCash'
    minimumDenomination = 'minimumDenomination'
    futureValueNotional = 'futureValueNotional'
    participationRate = 'participationRate'
    obfr = 'obfr'
    _220 = '220'
    _221 = '221'
    _222 = '222'
    buy9point5bps = 'buy9point5bps'
    _223 = '223'
    _224 = '224'
    _225 = '225'
    optionLockPeriod = 'optionLockPeriod'
    _226 = '226'
    esMomentumPercentile = 'esMomentumPercentile'
    _227 = '227'
    _228 = '228'
    advPercentage = 'advPercentage'
    _229 = '229'
    leg1AveragingMethod = 'leg1AveragingMethod'
    turnoverComposite = 'turnoverComposite'
    forecastDate = 'forecastDate'
    internalIndexCalcRegion = 'internalIndexCalcRegion'
    positionType = 'positionType'
    subAssetClass = 'subAssetClass'
    shortInterest = 'shortInterest'
    referencePeriod = 'referencePeriod'
    adjustedVolume = 'adjustedVolume'
    underlyingAssetIdType = 'underlyingAssetIdType'
    ctdFwdYield = 'ctdFwdYield'
    secDB = 'secDB'
    memoryUsed = 'memoryUsed'
    bpeQualityStars = 'bpeQualityStars'
    _230 = '230'
    _231 = '231'
    _232 = '232'
    ctd = 'ctd'
    _233 = '233'
    _234 = '234'
    _235 = '235'
    _236 = '236'
    _237 = '237'
    _238 = '238'
    _239 = '239'
    intendedParticipationRate = 'intendedParticipationRate'
    leg1PaymentType = 'leg1PaymentType'
    tradingPnl = 'tradingPnl'
    collateralValueRequired = 'collateralValueRequired'
    buy45bps = 'buy45bps'
    freeFloatMarketCapRatio = 'freeFloatMarketCapRatio'
    priceToEarningsPositive = 'priceToEarningsPositive'
    forecast = 'forecast'
    forecastValue = 'forecastValue'
    _240 = '240'
    pnl = 'pnl'
    _241 = '241'
    _242 = '242'
    _243 = '243'
    volumeInLimit = 'volumeInLimit'
    _244 = '244'
    isTerritory = 'isTerritory'
    _245 = '245'
    leg2DeliveryPoint = 'leg2DeliveryPoint'
    _246 = '246'
    _247 = '247'
    _248 = '248'
    _249 = '249'
    tcmCostHorizon4Day = 'tcmCostHorizon4Day'
    styles = 'styles'
    shortName = 'shortName'
    resetFrequency1 = 'resetFrequency1'
    buy4bps = 'buy4bps'
    resetFrequency2 = 'resetFrequency2'
    otherPriceTerm = 'otherPriceTerm'
    bidGspread = 'bidGspread'
    openPrice = 'openPrice'
    psId = 'psId'
    hitRateMtd = 'hitRateMtd'
    fairVolatility = 'fairVolatility'
    dollarCross = 'dollarCross'
    portfolioType = 'portfolioType'
    currency = 'currency'
    clusterClass = 'clusterClass'
    sell50bps = 'sell50bps'
    futureMonthM21 = 'futureMonthM21'
    bidSize = 'bidSize'
    arrivalMid = 'arrivalMid'
    assetParametersExchangeCurrency = 'assetParametersExchangeCurrency'
    candidateName = 'candidateName'
    impliedLognormalVolatility = 'impliedLognormalVolatility'
    vwapInLimitUnrealizedCash = 'vwapInLimitUnrealizedCash'
    ratingMoodys = 'ratingMoodys'
    futureMonthM26 = 'futureMonthM26'
    futureMonthM25 = 'futureMonthM25'
    futureMonthM24 = 'futureMonthM24'
    futureMonthM23 = 'futureMonthM23'
    developmentStatus = 'developmentStatus'
    futureMonthM22 = 'futureMonthM22'
    flowPct = 'flowPct'
    source = 'source'
    assetClassificationsCountryCode = 'assetClassificationsCountryCode'
    settleDrop = 'settleDrop'
    dataSetSubCategory = 'dataSetSubCategory'
    sell9point5bps = 'sell9point5bps'
    quantityBucket = 'quantityBucket'
    optionStyleSDR = 'optionStyleSDR'
    oeName = 'oeName'
    given = 'given'
    leg2DayCountConvention = 'leg2DayCountConvention'
    liquidityScoreSell = 'liquidityScoreSell'
    delistingDate = 'delistingDate'
    weight = 'weight'
    accruedInterest = 'accruedInterest'
    businessScope = 'businessScope'
    wtdDegreeDays = 'wtdDegreeDays'
    absoluteWeight = 'absoluteWeight'
    measure = 'measure'
    return30d = 'return30d'
    temperatureHourlyForecast = 'temperatureHourlyForecast'
    icebergTipRateType = 'icebergTipRateType'
    sharpeYtd = 'sharpeYtd'
    windSpeedForecast = 'windSpeedForecast'
    grossInvestmentYtd = 'grossInvestmentYtd'
    yieldPrice = 'yieldPrice'
    paymentFrequencyPeriodMultiplier2 = 'paymentFrequencyPeriodMultiplier2'
    paymentFrequencyPeriodMultiplier1 = 'paymentFrequencyPeriodMultiplier1'
    leg1TotalNotionalUnit = 'leg1TotalNotionalUnit'
    absoluteAttribution = 'absoluteAttribution'
    issuePrice = 'issuePrice'
    askHigh = 'askHigh'
    expectedDataQuality = 'expectedDataQuality'
    regionName = 'regionName'
    valueRevised = 'valueRevised'
    discretionUpperBound = 'discretionUpperBound'
    adjustedTradePrice = 'adjustedTradePrice'
    forecastTime = 'forecastTime'
    isoSubdivisionCodeAlpha2 = 'isoSubdivisionCodeAlpha2'
    ctdConversionFactor = 'ctdConversionFactor'
    proceedsAssetSwapSpread = 'proceedsAssetSwapSpread'
    isADR = 'isADR'
    issueDate = 'issueDate'
    serviceId = 'serviceId'
    yes = 'yes'
    gScore = 'gScore'
    marketValue = 'marketValue'
    entityId = 'entityId'
    notionalCurrency1 = 'notionalCurrency1'
    netDebtToEbitda = 'netDebtToEbitda'
    numUnitsUpper = 'numUnitsUpper'
    notionalCurrency2 = 'notionalCurrency2'
    inLimitParticipationRate = 'inLimitParticipationRate'
    pressureForecast = 'pressureForecast'
    paid = 'paid'
    fixedRate = 'fixedRate'
    short = 'short'
    time = 'time'
    buy4point5bps = 'buy4point5bps'
    sell30cents = 'sell30cents'
    eventEndDateTime = 'eventEndDateTime'
    leg1PaymentFrequency = 'leg1PaymentFrequency'
    cmId = 'cmId'
    taxonomy = 'taxonomy'
    buy45cents = 'buy45cents'
    measures = 'measures'
    seasonalAdjustment = 'seasonalAdjustment'
    rankWtd = 'rankWtd'
    underlyer = 'underlyer'
    createdTime = 'createdTime'
    return1yr = 'return1yr'
    identifier = 'identifier'
    priceUnit = 'priceUnit'
    tradeReportRefId = 'tradeReportRefId'
    subdivisionId = 'subdivisionId'
    unadjustedLow = 'unadjustedLow'
    buy160cents = 'buy160cents'
    portfolioId = 'portfolioId'
    zSpread = 'zSpread'
    floatingRateResetFrequencyPeriod2 = 'floatingRateResetFrequencyPeriod2'
    capFloorAtmFwdRate = 'capFloorAtmFwdRate'
    esPercentile = 'esPercentile'
    tdapi = 'tdapi'
    floatingRateResetFrequencyPeriod1 = 'floatingRateResetFrequencyPeriod1'
    locationCode = 'locationCode'
    rcic = 'rcic'
    nameRaw = 'nameRaw'
    simonAssetTags = 'simonAssetTags'
    hitRateQtd = 'hitRateQtd'
    primaryVolumeInLimit = 'primaryVolumeInLimit'
    precipitationDailyForecastPercent = 'precipitationDailyForecastPercent'
    aumEnd = 'aumEnd'
    premium = 'premium'
    low = 'low'
    crossGroup = 'crossGroup'
    reportRunTime = 'reportRunTime'
    fiveDayPriceChangeBps = 'fiveDayPriceChangeBps'
    holdings = 'holdings'
    precipitationDailyForecast = 'precipitationDailyForecast'
    fixedRecoveryCDSFinalPrice = 'fixedRecoveryCDSFinalPrice'
    priceMethod = 'priceMethod'
    assetParametersFixedRateFrequency = 'assetParametersFixedRateFrequency'
    oisXccy = 'oisXccy'
    daysOpen = 'daysOpen'
    buy110cents = 'buy110cents'
    averageSpreadBps = 'averageSpreadBps'
    buy55cents = 'buy55cents'
    underlyingAssetIdSDR = 'underlyingAssetIdSDR'
    futureMonthQ26 = 'futureMonthQ26'
    issueSize = 'issueSize'
    futureMonthQ25 = 'futureMonthQ25'
    futureMonthQ24 = 'futureMonthQ24'
    futureMonthQ23 = 'futureMonthQ23'
    futureMonthQ22 = 'futureMonthQ22'
    pendingLoanCount = 'pendingLoanCount'
    futureMonthQ21 = 'futureMonthQ21'
    priceSpotStopLossUnit = 'priceSpotStopLossUnit'
    priceRangeInTicksDescription = 'priceRangeInTicksDescription'
    tradeVolume = 'tradeVolume'
    primaryCountryRic = 'primaryCountryRic'
    optionExpirationFrequency = 'optionExpirationFrequency'
    isActive = 'isActive'
    useMachineLearning = 'useMachineLearning'
    growthScore = 'growthScore'
    bufferThreshold = 'bufferThreshold'
    buy120cents = 'buy120cents'
    matchedMaturitySwapRate = 'matchedMaturitySwapRate'
    underlyingAssetName = 'underlyingAssetName'
    primaryVwap = 'primaryVwap'
    exchangeTypeId = 'exchangeTypeId'
    basisSwapRate = 'basisSwapRate'
    exchangeCode = 'exchangeCode'
    group = 'group'
    assetParametersTerminationDate = 'assetParametersTerminationDate'
    estimatedSpread = 'estimatedSpread'
    yieldChangeOnDay = 'yieldChangeOnDay'
    created = 'created'
    autoTags = 'autoTags'
    tcmCost = 'tcmCost'
    sustainJapan = 'sustainJapan'
    historyStartDate = 'historyStartDate'
    bidSpread = 'bidSpread'
    percentageComplete = 'percentageComplete'
    hedgeTrackingError = 'hedgeTrackingError'
    termStatus = 'termStatus'
    windSpeedType = 'windSpeedType'
    strikePrice = 'strikePrice'
    parAssetSwapSpread12m = 'parAssetSwapSpread12m'
    tradeReportId = 'tradeReportId'
    adjustedOpenPrice = 'adjustedOpenPrice'
    countryId = 'countryId'
    point = 'point'
    pnlMtd = 'pnlMtd'
    totalReturns = 'totalReturns'
    lender = 'lender'
    annReturn1Year = 'annReturn1Year'
    ctdFwdDv01 = 'ctdFwdDv01'
    effYield7Day = 'effYield7Day'
    meetingDate = 'meetingDate'
    calendarSpreadMispricing = 'calendarSpreadMispricing'
    buy140cents = 'buy140cents'
    priceNotation2Type = 'priceNotation2Type'
    fundFocus = 'fundFocus'
    relativeStrike = 'relativeStrike'
    flagship = 'flagship'
    additionalPriceNotation = 'additionalPriceNotation'
    factorCategory = 'factorCategory'
    equityDelta = 'equityDelta'
    grossWeight = 'grossWeight'
    listed = 'listed'
    sell7bps = 'sell7bps'
    earningsRecordType = 'earningsRecordType'
    mean = 'mean'
    askYield = 'askYield'
    shockStyle = 'shockStyle'
    methodology = 'methodology'
    buy25cents = 'buy25cents'
    amountOutstanding = 'amountOutstanding'
    marketPnl = 'marketPnl'
    sustainAsiaExJapan = 'sustainAsiaExJapan'
    sell6point5bps = 'sell6point5bps'
    neighbourAssetId = 'neighbourAssetId'
    countIdeasYtd = 'countIdeasYtd'
    simonIntlAssetTags = 'simonIntlAssetTags'
    path = 'path'
    vwapUnrealizedCash = 'vwapUnrealizedCash'
    payoffMtd = 'payoffMtd'
    spread2 = 'spread2'
    bosInBpsLabel = 'bosInBpsLabel'
    spread1 = 'spread1'
    bosInBps = 'bosInBps'
    pointClass = 'pointClass'
    fxSpot = 'fxSpot'
    restrictNamedIndividuals = 'restrictNamedIndividuals'
    hedgeVolatility = 'hedgeVolatility'
    tags = 'tags'
    population = 'population'
    underlyingAssetId = 'underlyingAssetId'
    realLongRatesContribution = 'realLongRatesContribution'
    pctprices_return = 'pctprices_return'
    domain = 'domain'
    buy80cents = 'buy80cents'
    forwardTenor = 'forwardTenor'
    averagePrice = 'averagePrice'
    targetPriceRealizedBps = 'targetPriceRealizedBps'
    leg2FixedRate = 'leg2FixedRate'
    shareClassAssets = 'shareClassAssets'
    annuity = 'annuity'
    totalCount = 'totalCount'
    quoteType = 'quoteType'
    corporateActionStatus = 'corporateActionStatus'
    peggedTipSize = 'peggedTipSize'
    uid = 'uid'
    esPolicyPercentile = 'esPolicyPercentile'
    usdOis = 'usdOis'
    term = 'term'
    restrictInternalGsNtk = 'restrictInternalGsNtk'
    tcmCostParticipationRate100Pct = 'tcmCostParticipationRate100Pct'
    relativeUniverse = 'relativeUniverse'
    measureIdx = 'measureIdx'
    fredId = 'fredId'
    twiContribution = 'twiContribution'
    cloudCoverType = 'cloudCoverType'
    delisted = 'delisted'
    regionalFocus = 'regionalFocus'
    volumePrimary = 'volumePrimary'
    assetParametersPayerDesignatedMaturity = 'assetParametersPayerDesignatedMaturity'
    buy30cents = 'buy30cents'
    fundingBidPrice = 'fundingBidPrice'
    series = 'series'
    sell3bps = 'sell3bps'
    settlementPrice = 'settlementPrice'
    quarter = 'quarter'
    sell18bps = 'sell18bps'
    assetParametersFloatingRateOption = 'assetParametersFloatingRateOption'
    realizedVwapPerformanceBps = 'realizedVwapPerformanceBps'
    voteShare = 'voteShare'
    servicingCostShortPnl = 'servicingCostShortPnl'
    totalConfirmed = 'totalConfirmed'
    economicForecast = 'economicForecast'
    plotId = 'plotId'
    clusterDescription = 'clusterDescription'
    concentrationLimit = 'concentrationLimit'
    windSpeed = 'windSpeed'
    observationHour = 'observationHour'
    signal = 'signal'
    borrowerId = 'borrowerId'
    dataProduct = 'dataProduct'
    buy7point5bps = 'buy7point5bps'
    limitPrice = 'limitPrice'
    bmPrimeId = 'bmPrimeId'
    dataType = 'dataType'
    count = 'count'
    conviction = 'conviction'
    rfqstate = 'rfqstate'
    benchmarkMaturity = 'benchmarkMaturity'
    grossFlowNormalized = 'grossFlowNormalized'
    buy14bps = 'buy14bps'
    factorId = 'factorId'
    futureMonthV26 = 'futureMonthV26'
    stsFxCurrency = 'stsFxCurrency'
    futureMonthV25 = 'futureMonthV25'
    bidChange = 'bidChange'
    month = 'month'
    futureMonthV24 = 'futureMonthV24'
    investmentWtd = 'investmentWtd'
    futureMonthV23 = 'futureMonthV23'
    futureMonthV22 = 'futureMonthV22'
    futureMonthV21 = 'futureMonthV21'
    expiration = 'expiration'
    leg2ResetFrequency = 'leg2ResetFrequency'
    controversyScore = 'controversyScore'
    proceedAssetSwapSpread = 'proceedAssetSwapSpread'
    concentrationLevel = 'concentrationLevel'
    importance = 'importance'
    assetClassificationsGicsSector = 'assetClassificationsGicsSector'
    stsAssetName = 'stsAssetName'
    netExposureClassification = 'netExposureClassification'
    settlementMethod = 'settlementMethod'
    receiverDesignatedMaturity = 'receiverDesignatedMaturity'
    title = 'title'
    xRefTypeId = 'xRefTypeId'
    duration = 'duration'
    load = 'load'
    alpha = 'alpha'
    company = 'company'
    settlementFrequency = 'settlementFrequency'
    distAvg7Day = 'distAvg7Day'
    inRiskModel = 'inRiskModel'
    dailyNetShareholderFlowsPercent = 'dailyNetShareholderFlowsPercent'
    filledNotionalLocal = 'filledNotionalLocal'
    everHospitalized = 'everHospitalized'
    meetingNumber = 'meetingNumber'
    midGspread = 'midGspread'
    daysOpenUnrealizedBps = 'daysOpenUnrealizedBps'
    longLevel = 'longLevel'
    dataDescription = 'dataDescription'
    temperatureType = 'temperatureType'
    gsideid = 'gsideid'
    repoRate = 'repoRate'
    division = 'division'
    cloudCoverDailyForecast = 'cloudCoverDailyForecast'
    windSpeedDailyForecast = 'windSpeedDailyForecast'
    executionVenueType = 'executionVenueType'
    assetParametersFloatingRateDayCountFraction = 'assetParametersFloatingRateDayCountFraction'
    tradeAction = 'tradeAction'
    action = 'action'
    ctdYield = 'ctdYield'
    arrivalHaircutVwapNormalized = 'arrivalHaircutVwapNormalized'
    priceComponent = 'priceComponent'
    queueClockTimeDescription = 'queueClockTimeDescription'
    assetParametersReceiverDayCountFraction = 'assetParametersReceiverDayCountFraction'
    percentMidExecutionQuantity = 'percentMidExecutionQuantity'
    deltaStrike = 'deltaStrike'
    cloudCover = 'cloudCover'
    assetParametersNotionalCurrency = 'assetParametersNotionalCurrency'
    buy18bps = 'buy18bps'
    valueActual = 'valueActual'
    upi = 'upi'
    fixedRate1 = 'fixedRate1'
    collateralCurrency = 'collateralCurrency'
    originalCountry = 'originalCountry'
    fixedRate2 = 'fixedRate2'
    field = 'field'
    geographicFocus = 'geographicFocus'
    daysOpenRealizedBps = 'daysOpenRealizedBps'
    fxRiskPremiumIndex = 'fxRiskPremiumIndex'
    skew = 'skew'
    status = 'status'
    notionalCurrency = 'notionalCurrency'
    sustainEmergingMarkets = 'sustainEmergingMarkets'
    eventDateTime = 'eventDateTime'
    leg1DesignatedMaturity = 'leg1DesignatedMaturity'
    totalPrice = 'totalPrice'
    onBehalfOf = 'onBehalfOf'
    testType = 'testType'
    accruedInterestStandard = 'accruedInterestStandard'
    futureMonthZ26 = 'futureMonthZ26'
    futureMonthZ25 = 'futureMonthZ25'
    ccgCode = 'ccgCode'
    shortExposure = 'shortExposure'
    leg1FixedPaymentCurrency = 'leg1FixedPaymentCurrency'
    map = 'map'
    arrivalHaircutVwap = 'arrivalHaircutVwap'
    executionDays = 'executionDays'
    recallDueDate = 'recallDueDate'
    forward = 'forward'
    strike = 'strike'
    spreadLimit = 'spreadLimit'
    sopr = 'sopr'
    otherPaymentAmount = 'otherPaymentAmount'
    productScope = 'productScope'
    redemptionPeriod = 'redemptionPeriod'
    assetParametersIssuerType = 'assetParametersIssuerType'
    currency1 = 'currency1'
    currency2 = 'currency2'
    previousCloseRealizedBps = 'previousCloseRealizedBps'
    daysSinceReported = 'daysSinceReported'
    eventStatus = 'eventStatus'
    vwapInLimit = 'vwapInLimit'
    fwdDuration = 'fwdDuration'
    _return = 'return'
    isPairBasket = 'isPairBasket'
    notionalAmount = 'notionalAmount'
    optionPremiumAmount = 'optionPremiumAmount'
    payOrReceive = 'payOrReceive'
    totalSevere = 'totalSevere'
    unexecutedNotionalUSD = 'unexecutedNotionalUSD'
    expectedResidualPercentage = 'expectedResidualPercentage'
    maturityDate = 'maturityDate'
    traceAdvSell = 'traceAdvSell'
    eventName = 'eventName'
    addressLine2 = 'addressLine2'
    indicationOfOtherPriceAffectingTerm = 'indicationOfOtherPriceAffectingTerm'
    unadjustedBid = 'unadjustedBid'
    backtestType = 'backtestType'
    gsdeer = 'gsdeer'
    assetParametersIssuer = 'assetParametersIssuer'
    gRegionalPercentile = 'gRegionalPercentile'
    coverageChecked = 'coverageChecked'
    oisXccyExSpike = 'oisXccyExSpike'
    totalRisk = 'totalRisk'
    mnav = 'mnav'
    marketVolume = 'marketVolume'
    swapAnnuity = 'swapAnnuity'
    parAssetSwapSpread = 'parAssetSwapSpread'
    currYield7Day = 'currYield7Day'
    pressure = 'pressure'
    shortDescription = 'shortDescription'
    futureMonthZ24 = 'futureMonthZ24'
    feed = 'feed'
    futureMonthZ23 = 'futureMonthZ23'
    mktPoint1 = 'mktPoint1'
    futureMonthZ22 = 'futureMonthZ22'
    futureMonthZ21 = 'futureMonthZ21'
    futureMonthZ20 = 'futureMonthZ20'
    assetParametersCommoditySector = 'assetParametersCommoditySector'
    priceNotation2 = 'priceNotation2'
    marketBufferThreshold = 'marketBufferThreshold'
    priceNotation3 = 'priceNotation3'
    mktPoint3 = 'mktPoint3'
    mktPoint2 = 'mktPoint2'
    leg2Type = 'leg2Type'
    mktPoint4 = 'mktPoint4'
    degreeDaysType = 'degreeDaysType'
    sentiment = 'sentiment'
    investmentIncome = 'investmentIncome'
    groupType = 'groupType'
    forwardPointImm = 'forwardPointImm'
    twap = 'twap'
    clientShortName = 'clientShortName'
    groupCategory = 'groupCategory'
    bidPlusAsk = 'bidPlusAsk'
    foreignCcyRate = 'foreignCcyRate'
    electionOdds = 'electionOdds'
    windDirectionForecast = 'windDirectionForecast'
    requireAnonClientName = 'requireAnonClientName'
    pricingLocation = 'pricingLocation'
    beta = 'beta'
    lastReturnsEndDate = 'lastReturnsEndDate'
    upfrontPaymentDate = 'upfrontPaymentDate'
    sell1point5bps = 'sell1point5bps'
    longExposure = 'longExposure'
    sell4point5bps = 'sell4point5bps'
    tcmCostParticipationRate20Pct = 'tcmCostParticipationRate20Pct'
    venueType = 'venueType'
    currentActivityIndicator = 'currentActivityIndicator'
    multiAssetClassSwap = 'multiAssetClassSwap'
    deltaChangeId = 'deltaChangeId'
    implementationId = 'implementationId'
    leg1FixedPayment = 'leg1FixedPayment'
    esNumericScore = 'esNumericScore'
    inBenchmark = 'inBenchmark'
    actionSDR = 'actionSDR'
    quantityFrequency = 'quantityFrequency'
    countIdeasQtd = 'countIdeasQtd'
    knockOutPrice = 'knockOutPrice'
    spreadCurrency1 = 'spreadCurrency1'
    spreadCurrency2 = 'spreadCurrency2'
    currentSupply = 'currentSupply'
    ctdAssetId = 'ctdAssetId'
    buy10bps = 'buy10bps'
    precipitation = 'precipitation'
    valueType = 'valueType'
    betaAdjustedNetExposure = 'betaAdjustedNetExposure'
    estimatedRodVolume = 'estimatedRodVolume'
    sell14bps = 'sell14bps'
    _10 = '10'
    _11 = '11'
    _12 = '12'
    _13 = '13'
    excessReturnPrice = 'excessReturnPrice'
    _14 = '14'
    _15 = '15'
    _16 = '16'
    _17 = '17'
    _18 = '18'
    _19 = '19'
    fxPnl = 'fxPnl'
    leg2FloatingRateIndex = 'leg2FloatingRateIndex'
    assetClassificationsGicsIndustryGroup = 'assetClassificationsGicsIndustryGroup'
    indexConstituents = 'indexConstituents'
    lendingSecId = 'lendingSecId'
    dollarDuration = 'dollarDuration'
    equityTheta = 'equityTheta'
    dv01 = 'dv01'
    startDate = 'startDate'
    _20 = '20'
    _21 = '21'
    _22 = '22'
    _23 = '23'
    mixedSwap = 'mixedSwap'
    swaptionPremium = 'swaptionPremium'
    _24 = '24'
    _25 = '25'
    _26 = '26'
    snowfall = 'snowfall'
    liquidityBucketBuy = 'liquidityBucketBuy'
    dayOpen = 'dayOpen'
    _27 = '27'
    mic = 'mic'
    hurdleType = 'hurdleType'
    _28 = '28'
    latitude = 'latitude'
    _29 = '29'
    mid = 'mid'
    impliedRepo = 'impliedRepo'
    long = 'long'
    firstExecutionTime = 'firstExecutionTime'
    coveredBond = 'coveredBond'
    regionCode = 'regionCode'
    buy20cents = 'buy20cents'
    longWeight = 'longWeight'
    calculationTime = 'calculationTime'
    liquidityBucketSell = 'liquidityBucketSell'
    daysOpenUnrealizedCash = 'daysOpenUnrealizedCash'
    temperature = 'temperature'
    averageRealizedVariance = 'averageRealizedVariance'
    leg1CommodityUnderlyerId = 'leg1CommodityUnderlyerId'
    ratingFitch = 'ratingFitch'
    financialReturnsScore = 'financialReturnsScore'
    yearOrQuarter = 'yearOrQuarter'
    _30 = '30'
    _31 = '31'
    _32 = '32'
    nonSymbolDimensions = 'nonSymbolDimensions'
    _33 = '33'
    commoditiesForecast = 'commoditiesForecast'
    _34 = '34'
    _35 = '35'
    covid19ByState = 'covid19ByState'
    _36 = '36'
    _37 = '37'
    _38 = '38'
    _39 = '39'
    percentageExpectedResidual = 'percentageExpectedResidual'
    hospitalName = 'hospitalName'
    buy90cents = 'buy90cents'
    periodType = 'periodType'
    assetClassificationsCountryName = 'assetClassificationsCountryName'
    totalHospitalized = 'totalHospitalized'
    peggedRefillInterval = 'peggedRefillInterval'
    fatalitiesProbable = 'fatalitiesProbable'
    _40 = '40'
    administrativeRegion = 'administrativeRegion'
    _41 = '41'
    open = 'open'
    _42 = '42'
    _43 = '43'
    _44 = '44'
    _45 = '45'
    cusip = 'cusip'
    totalConfirmedByState = 'totalConfirmedByState'
    _46 = '46'
    ideaActivityTime = 'ideaActivityTime'
    _47 = '47'
    _48 = '48'
    _49 = '49'
    windAttribute = 'windAttribute'
    spreadOptionAtmFwdRate = 'spreadOptionAtmFwdRate'
    netExposure = 'netExposure'
    optionEntitlement = 'optionEntitlement'
    isLegacyPairBasket = 'isLegacyPairBasket'
    issuerType = 'issuerType'
    buy70cents = 'buy70cents'
    strikeReference = 'strikeReference'
    assetCount = 'assetCount'
    _50 = '50'
    _51 = '51'
    isOrderInLimit = 'isOrderInLimit'
    _52 = '52'
    _53 = '53'
    _54 = '54'
    fundamentalMetric = 'fundamentalMetric'
    _55 = '55'
    _56 = '56'
    quoteStatusId = 'quoteStatusId'
    _57 = '57'
    absoluteValue = 'absoluteValue'
    closingReport = 'closingReport'
    redemptionNoticePeriod = 'redemptionNoticePeriod'
    _58 = '58'
    previousTotalConfirmed = 'previousTotalConfirmed'
    _59 = '59'
    longTenor = 'longTenor'
    multiplier = 'multiplier'
    buy40cents = 'buy40cents'
    assetCountPriced = 'assetCountPriced'
    voteDirection = 'voteDirection'
    impliedRepoRate = 'impliedRepoRate'
    settlementCurrency = 'settlementCurrency'
    wtdDegreeDaysForecast = 'wtdDegreeDaysForecast'
    indicationOfCollateralization = 'indicationOfCollateralization'
    futureMonthN26 = 'futureMonthN26'
    _60 = '60'
    lendingPartnerFee = 'lendingPartnerFee'
    futureMonthN25 = 'futureMonthN25'
    _61 = '61'
    futureMonthN24 = 'futureMonthN24'
    _62 = '62'
    primaryVwapRealizedBps = 'primaryVwapRealizedBps'
    futureMonthN23 = 'futureMonthN23'
    _63 = '63'
    futureMonthN22 = 'futureMonthN22'
    _64 = '64'
    futureMonthN21 = 'futureMonthN21'
    _65 = '65'
    _66 = '66'
    _67 = '67'
    _68 = '68'
    _69 = '69'
    breakEvenInflation = 'breakEvenInflation'
    pnlYtd = 'pnlYtd'
    leg1ReturnType = 'leg1ReturnType'
    tenor2 = 'tenor2'
    resetFrequency = 'resetFrequency'
    assetParametersPayerFrequency = 'assetParametersPayerFrequency'
    degreeDaysForecast = 'degreeDaysForecast'
    isManuallySilenced = 'isManuallySilenced'
    buy3bps = 'buy3bps'
    lastUpdatedById = 'lastUpdatedById'
    legalEntityAcct = 'legalEntityAcct'
    targetShareholderMeetingDate = 'targetShareholderMeetingDate'
    _70 = '70'
    _71 = '71'
    _72 = '72'
    paceOfRollp0 = 'paceOfRollp0'
    _73 = '73'
    _74 = '74'
    controversyPercentile = 'controversyPercentile'
    leg1NotionalCurrency = 'leg1NotionalCurrency'
    _75 = '75'
    complianceEffectiveTime = 'complianceEffectiveTime'
    expirationDate = 'expirationDate'
    _76 = '76'
    _77 = '77'
    _78 = '78'
    _79 = '79'
    floatingRateDayCountFraction = 'floatingRateDayCountFraction'
    callLastDate = 'callLastDate'
    factorReturn = 'factorReturn'
    passiveFlowRatio = 'passiveFlowRatio'
    composite5DayAdv = 'composite5DayAdv'
    marginalContributionToRisk = 'marginalContributionToRisk'
    closeDate = 'closeDate'
    temperatureHourForecast = 'temperatureHourForecast'
    newIdeasWtd = 'newIdeasWtd'
    assetClassSDR = 'assetClassSDR'
    yieldToWorst = 'yieldToWorst'
    _80 = '80'
    closingPrice = 'closingPrice'
    _81 = '81'
    turnoverCompositeAdjusted = 'turnoverCompositeAdjusted'
    comment = 'comment'
    sourceSymbol = 'sourceSymbol'
    _82 = '82'
    _83 = '83'
    _84 = '84'
    askUnadjusted = 'askUnadjusted'
    _85 = '85'
    _86 = '86'
    restrictExternalDerivedData = 'restrictExternalDerivedData'
    _87 = '87'
    _88 = '88'
    _89 = '89'
    askChange = 'askChange'
    countIdeasMtd = 'countIdeasMtd'
    endDate = 'endDate'
    sunshine = 'sunshine'
    contractType = 'contractType'
    momentumType = 'momentumType'
    specificRisk = 'specificRisk'
    freeFloatMarketCap = 'freeFloatMarketCap'
    mdapi = 'mdapi'
    payoffQtd = 'payoffQtd'
    loss = 'loss'
    midcurveVol = 'midcurveVol'
    sell6bps = 'sell6bps'
    tradingCostPnl = 'tradingCostPnl'
    priceNotationType = 'priceNotationType'
    price = 'price'
    paymentQuantity = 'paymentQuantity'
    _90 = '90'
    _91 = '91'
    _92 = '92'
    _93 = '93'
    _94 = '94'
    _95 = '95'
    _96 = '96'
    _97 = '97'
    _98 = '98'
    redemptionDate = 'redemptionDate'
    _99 = '99'
    leg2NotionalCurrency = 'leg2NotionalCurrency'
    subRegion = 'subRegion'
    productId = 'productId'
    benchmark = 'benchmark'
    nvtAdj = 'nvtAdj'
    tcmCostParticipationRate15Pct = 'tcmCostParticipationRate15Pct'
    fiscalYear = 'fiscalYear'
    recallDate = 'recallDate'
    internal = 'internal'
    gender = 'gender'
    assetClassificationsGicsIndustry = 'assetClassificationsGicsIndustry'
    adjustedBidPrice = 'adjustedBidPrice'
    lowUnadjusted = 'lowUnadjusted'
    MACSSecondaryAssetClass = 'MACSSecondaryAssetClass'
    confirmedPerMillion = 'confirmedPerMillion'
    exchangeRateBasis = 'exchangeRateBasis'
    dataSourceId = 'dataSourceId'
    integratedScore = 'integratedScore'
    buy7bps = 'buy7bps'
    arrivalMidUnrealizedCash = 'arrivalMidUnrealizedCash'
    knockInPrice = 'knockInPrice'
    event = 'event'
    isIntradayAuction = 'isIntradayAuction'
    locationName = 'locationName'
    coupon = 'coupon'
    percentageAuctionExecutedQuantity = 'percentageAuctionExecutedQuantity'
    avgYield7Day = 'avgYield7Day'
    referenceRateEur = 'referenceRateEur'
    originalDisseminationId = 'originalDisseminationId'
    totalOnVent = 'totalOnVent'
    twapUnrealizedCash = 'twapUnrealizedCash'
    stsCreditMarket = 'stsCreditMarket'
    onsCode = 'onsCode'
    passiveTouchFillsPercentage = 'passiveTouchFillsPercentage'
    seniority = 'seniority'
    leg1Index = 'leg1Index'
    highUnadjusted = 'highUnadjusted'
    submissionEvent = 'submissionEvent'
    TVProductMnemonic = 'TVProductMnemonic'
    avgTradeRateLabel = 'avgTradeRateLabel'
    lastActivityDate = 'lastActivityDate'
    disseminationTime = 'disseminationTime'
    priceToCash = 'priceToCash'
    buy10cents = 'buy10cents'
    realizedMarketCapRatio = 'realizedMarketCapRatio'
    navSpread = 'navSpread'
    venueMIC = 'venueMIC'
    dollarTotalReturn = 'dollarTotalReturn'
    blockUnit = 'blockUnit'
    midSpread = 'midSpread'
    istatProvinceCode = 'istatProvinceCode'
    totalRecoveredByState = 'totalRecoveredByState'
    repurchaseRate = 'repurchaseRate'
    dataSource = 'dataSource'
    totalBeingTested = 'totalBeingTested'
    clearedOrBilateral = 'clearedOrBilateral'
    metricName = 'metricName'
    askGspread = 'askGspread'
    forecastHour = 'forecastHour'
    leg2PaymentType = 'leg2PaymentType'
    calSpreadMisPricing = 'calSpreadMisPricing'
    totalTestedNegative = 'totalTestedNegative'
    rate366 = 'rate366'
    platform = 'platform'
    rate365 = 'rate365'
    fixedRateFrequency = 'fixedRateFrequency'
    rate360 = 'rate360'
    notionalQuantity2 = 'notionalQuantity2'
    notionalQuantity1 = 'notionalQuantity1'
    isContinuous = 'isContinuous'
    value = 'value'
    payerDesignatedMaturity = 'payerDesignatedMaturity'
    productType = 'productType'
    mdv22Day = 'mdv22Day'
    nvtAdjFf90 = 'nvtAdjFf90'
    twapRealizedBps = 'twapRealizedBps'
    testMeasureLabel = 'testMeasureLabel'
    quantity = 'quantity'
    reportId = 'reportId'
    indexWeight = 'indexWeight'
    MACSPrimaryAssetClass = 'MACSPrimaryAssetClass'
    trader = 'trader'
    leg2PriceType = 'leg2PriceType'
    floatingRateResetFrequencyPeriodMultiplier2 = 'floatingRateResetFrequencyPeriodMultiplier2'
    totalActive = 'totalActive'
    floatingRateResetFrequencyPeriodMultiplier1 = 'floatingRateResetFrequencyPeriodMultiplier1'
    gsid2 = 'gsid2'
    matchedMaturityOISSwapSpread = 'matchedMaturityOISSwapSpread'
    valuationDate = 'valuationDate'
    restrictGsFederation = 'restrictGsFederation'
    positionSource = 'positionSource'
    tcmCostHorizon6Hour = 'tcmCostHorizon6Hour'
    buy200cents = 'buy200cents'
    vwapUnrealizedBps = 'vwapUnrealizedBps'
    priceToBook = 'priceToBook'
    isin = 'isin'
    plId = 'plId'
    lastReturnsStartDate = 'lastReturnsStartDate'
    collateralValueVariance = 'collateralValueVariance'
    year = 'year'
    forecastPeriod = 'forecastPeriod'
    callFirstDate = 'callFirstDate'
    dataSetIds = 'dataSetIds'
    economicTermsHash = 'economicTermsHash'
    numBeds = 'numBeds'
    sell20bps = 'sell20bps'
    clientType = 'clientType'
    percentageCloseExecutedQuantity = 'percentageCloseExecutedQuantity'
    macaulayDuration = 'macaulayDuration'
    availableInventory = 'availableInventory'
    est1DayCompletePct = 'est1DayCompletePct'
    relativeHitRateYtd = 'relativeHitRateYtd'
    createdById = 'createdById'
    marketDataType = 'marketDataType'
    realShortRatesContribution = 'realShortRatesContribution'
    metricCategory = 'metricCategory'
    annualizedCarry = 'annualizedCarry'
    valuePrevious = 'valuePrevious'
    transmissionClassification = 'transmissionClassification'
    avgTradeRate = 'avgTradeRate'
    shortLevel = 'shortLevel'
    version = 'version'
    categoryType = 'categoryType'
    policyRateExpectation = 'policyRateExpectation'
    uploadDate = 'uploadDate'
    blockOffFacility = 'blockOffFacility'
    unrealizedVwapPerformanceUSD = 'unrealizedVwapPerformanceUSD'
    paceOfRollp75 = 'paceOfRollp75'
    earningsPerSharePositive = 'earningsPerSharePositive'
    numIcuBeds = 'numIcuBeds'
    bucketVolumeInPercentage = 'bucketVolumeInPercentage'
    estimatedTradingCost = 'estimatedTradingCost'
    eid = 'eid'
    relativeReturnQtd = 'relativeReturnQtd'
    assessedTestMeasure = 'assessedTestMeasure'
    mktQuotingStyle = 'mktQuotingStyle'
    expirationTenor = 'expirationTenor'
    priceLimit = 'priceLimit'
    marketModelId = 'marketModelId'
    receiverFrequency = 'receiverFrequency'
    realizedCorrelation = 'realizedCorrelation'
    issueStatus = 'issueStatus'
    collateralValueActual = 'collateralValueActual'
    atmFwdRate = 'atmFwdRate'
    tcmCostParticipationRate75Pct = 'tcmCostParticipationRate75Pct'
    close = 'close'
    vol30d = 'vol30d'
    esProductImpactScore = 'esProductImpactScore'
    equityVega = 'equityVega'
    executedFillQuantity = 'executedFillQuantity'
    lenderPayment = 'lenderPayment'
    fiveDayMove = 'fiveDayMove'
    realizedMarketCap = 'realizedMarketCap'
    valueFormat = 'valueFormat'
    windChillForecast = 'windChillForecast'
    targetNotional = 'targetNotional'
    fillLegId = 'fillLegId'
    rationale = 'rationale'
    realizedTwapPerformanceBps = 'realizedTwapPerformanceBps'
    lastUpdatedSince = 'lastUpdatedSince'
    totalTests = 'totalTests'
    equitiesContribution = 'equitiesContribution'
    simonId = 'simonId'
    congestion = 'congestion'
    leg2CommodityInstrumentId = 'leg2CommodityInstrumentId'
    notes = 'notes'
    totalProbableSeniorHome = 'totalProbableSeniorHome'
    eventCategory = 'eventCategory'
    averageFillRate = 'averageFillRate'
    cins = 'cins'
    unadjustedOpen = 'unadjustedOpen'
    criticality = 'criticality'
    bidAskSpread = 'bidAskSpread'
    arrivalMidUnrealizedBps = 'arrivalMidUnrealizedBps'
    optionType = 'optionType'
    terminationDate = 'terminationDate'
    queriesPerSecond = 'queriesPerSecond'
    liquidityType = 'liquidityType'
    creditLimit = 'creditLimit'
    rankQtd = 'rankQtd'
    combinedKey = 'combinedKey'
    girFxForecast = 'girFxForecast'
    effectiveTenor = 'effectiveTenor'
    girCommoditiesForecast = 'girCommoditiesForecast'
    relativeHumidityDailyForecast = 'relativeHumidityDailyForecast'
    std30DaysSubsidizedYield = 'std30DaysSubsidizedYield'
    annualizedTrackingError = 'annualizedTrackingError'
    futureMonthF26 = 'futureMonthF26'
    futureMonthF25 = 'futureMonthF25'
    volSwap = 'volSwap'
    futureMonthF24 = 'futureMonthF24'
    heatIndexDailyForecast = 'heatIndexDailyForecast'
    futureMonthF23 = 'futureMonthF23'
    realFCI = 'realFCI'
    blockTradesAndLargeNotionalOffFacilitySwaps = 'blockTradesAndLargeNotionalOffFacilitySwaps'
    futureMonthF22 = 'futureMonthF22'
    buy1point5bps = 'buy1point5bps'
    futureMonthF21 = 'futureMonthF21'
    expirationSettlementDate = 'expirationSettlementDate'
    absoluteReturnQtd = 'absoluteReturnQtd'
    grossExposure = 'grossExposure'
    volume = 'volume'
    adv = 'adv'
    shortConvictionMedium = 'shortConvictionMedium'
    completeTestMeasure = 'completeTestMeasure'
    exchange = 'exchange'
    esPolicyScore = 'esPolicyScore'
    rollVolumeStd = 'rollVolumeStd'
    temperatureDailyForecast = 'temperatureDailyForecast'
    relativePayoffQtd = 'relativePayoffQtd'
    onLoanPercentage = 'onLoanPercentage'
    twapRemainingSlices = 'twapRemainingSlices'
    fairVariance = 'fairVariance'
    hitRateWtd = 'hitRateWtd'
    previousCloseRealizedCash = 'previousCloseRealizedCash'
    realizedVolatility = 'realizedVolatility'
    unexecutedQuantity = 'unexecutedQuantity'
    proceedsAssetSwapSpread1m = 'proceedsAssetSwapSpread1m'
    cloneParentId = 'cloneParentId'
    windSpeedHourlyForecast = 'windSpeedHourlyForecast'
    etfFlowRatio = 'etfFlowRatio'
    assetParametersReceiverRateOption = 'assetParametersReceiverRateOption'
    buy60cents = 'buy60cents'
    securitySubTypeId = 'securitySubTypeId'
    message = 'message'
    stsRatesCountry = 'stsRatesCountry'
    sell65cents = 'sell65cents'
    horizon = 'horizon'
    wouldIfGoodLevel = 'wouldIfGoodLevel'
    bufferThresholdRequired = 'bufferThresholdRequired'
    faceValue = 'faceValue'
    rollVolumeHist = 'rollVolumeHist'
    counterPartyStatus = 'counterPartyStatus'
    composite22DayAdv = 'composite22DayAdv'
    percentageFarExecutedQuantity = 'percentageFarExecutedQuantity'
    loanSpreadRequired = 'loanSpreadRequired'
    assetClass = 'assetClass'
    sovereignSpreadContribution = 'sovereignSpreadContribution'
    ric = 'ric'
    bucketEndTime = 'bucketEndTime'
    rateType = 'rateType'
    totalFatalitiesSeniorHome = 'totalFatalitiesSeniorHome'
    loanStatus = 'loanStatus'
    shortWeight = 'shortWeight'
    geographyId = 'geographyId'
    sell7point5bps = 'sell7point5bps'
    nav = 'nav'
    fiscalQuarter = 'fiscalQuarter'
    versionString = 'versionString'
    payoffYtd = 'payoffYtd'
    marketImpact = 'marketImpact'
    eventType = 'eventType'
    fillPrice = 'fillPrice'
    assetCountLong = 'assetCountLong'
    sell180cents = 'sell180cents'
    spot = 'spot'
    applicationId = 'applicationId'
    indicativeClosePrice = 'indicativeClosePrice'
    swapSpread = 'swapSpread'
    tradingRestriction = 'tradingRestriction'
    assetParametersPayOrReceive = 'assetParametersPayOrReceive'
    priceSpotEntryUnit = 'priceSpotEntryUnit'
    unrealizedArrivalPerformanceBps = 'unrealizedArrivalPerformanceBps'
    city = 'city'
    pnlWtd = 'pnlWtd'
    covariance = 'covariance'
    bucketVolumeInShares = 'bucketVolumeInShares'
    commodityForecast = 'commodityForecast'
    valid = 'valid'
    stsCommodity = 'stsCommodity'
    initialPricingDate = 'initialPricingDate'
    indicationOfEndUserException = 'indicationOfEndUserException'
    windDirectionHourlyForecast = 'windDirectionHourlyForecast'
    esScore = 'esScore'
    _yield = 'yield'
    fatalitiesUnderlyingConditionsPresent = 'fatalitiesUnderlyingConditionsPresent'
    priceRangeInTicks = 'priceRangeInTicks'
    paceOfRollp25 = 'paceOfRollp25'
    dayCloseRealizedUSD = 'dayCloseRealizedUSD'
    pctChange = 'pctChange'
    brightnessType = 'brightnessType'
    futureMonth3M = 'futureMonth3M'
    numberOfRolls = 'numberOfRolls'
    isoCountryCodeNumeric = 'isoCountryCodeNumeric'
    priceType = 'priceType'
    realizedVwapPerformanceUSD = 'realizedVwapPerformanceUSD'
    fuelType = 'fuelType'
    bbid = 'bbid'
    vegaNotionalAmount = 'vegaNotionalAmount'
    fatalitiesUnderlyingConditionsAbsent = 'fatalitiesUnderlyingConditionsAbsent'
    effectiveDate = 'effectiveDate'
    capped = 'capped'
    rating = 'rating'
    optionCurrency = 'optionCurrency'
    isCloseAuction = 'isCloseAuction'
    volatility = 'volatility'
    avgVentUtil = 'avgVentUtil'
    underlyingAssetIds = 'underlyingAssetIds'
    buy6point5bps = 'buy6point5bps'
    vwapInLimitRealizedCash = 'vwapInLimitRealizedCash'
    estimatedClosingAuctionVolume = 'estimatedClosingAuctionVolume'
    sell2bps = 'sell2bps'
    annualRisk = 'annualRisk'
    eti = 'eti'
    vwapInLimitRealizedBps = 'vwapInLimitRealizedBps'
    rankMtd = 'rankMtd'
    marketBuffer = 'marketBuffer'
    futureMonthJ24 = 'futureMonthJ24'
    lastUploadedTime = 'lastUploadedTime'
    futureMonthJ23 = 'futureMonthJ23'
    oeId = 'oeId'
    futureMonthJ22 = 'futureMonthJ22'
    futureMonthJ21 = 'futureMonthJ21'
    bbidEquivalent = 'bbidEquivalent'
    initBufferThresholdRequired = 'initBufferThresholdRequired'
    leg2DesignatedMaturity = 'leg2DesignatedMaturity'
    matchedMaturityOISSwapRate = 'matchedMaturityOISSwapRate'
    fairPrice = 'fairPrice'
    participationRateInLimit = 'participationRateInLimit'
    extMktClass = 'extMktClass'
    priceCurrency = 'priceCurrency'
    failedCount = 'failedCount'
    leg1IndexLocation = 'leg1IndexLocation'
    supraStrategy = 'supraStrategy'
    dayCountConvention = 'dayCountConvention'
    roundedNotionalAmount1 = 'roundedNotionalAmount1'
    roundedNotionalAmount2 = 'roundedNotionalAmount2'
    factorSource = 'factorSource'
    futureMonthJ26 = 'futureMonthJ26'
    lendingSecType = 'lendingSecType'
    futureMonthJ25 = 'futureMonthJ25'
    leverage = 'leverage'
    forecastDay = 'forecastDay'
    optionFamily = 'optionFamily'
    generatorOutput = 'generatorOutput'
    priceSpotStopLossValue = 'priceSpotStopLossValue'
    kpiId = 'kpiId'
    windGeneration = 'windGeneration'
    percentageMidExecutedQuantity = 'percentageMidExecutedQuantity'
    borrowCost = 'borrowCost'
    knockOutDirection = 'knockOutDirection'
    riskModel = 'riskModel'
    assetParametersVendor = 'assetParametersVendor'
    fairValue = 'fairValue'
    openTime = 'openTime'
    pressureHourlyForecast = 'pressureHourlyForecast'
    localCcyRate = 'localCcyRate'
    endUserException = 'endUserException'
    sell90cents = 'sell90cents'
    executionVenue = 'executionVenue'
    nonStandardizedPricingIndicator = 'nonStandardizedPricingIndicator'
    primaryVwapInLimitRealizedBps = 'primaryVwapInLimitRealizedBps'
    approveRebalance = 'approveRebalance'
    adjustedClosePrice = 'adjustedClosePrice'
    lmsId = 'lmsId'
    rebateRate = 'rebateRate'
    sell130cents = 'sell130cents'
    priceUnitOfMeasure1 = 'priceUnitOfMeasure1'
    sell32bps = 'sell32bps'
    paceOfRollp50 = 'paceOfRollp50'
    priceMoveVsArrival = 'priceMoveVsArrival'
    strikeRelative = 'strikeRelative'
    pressureType = 'pressureType'
    buy40bps = 'buy40bps'
    priceNotation = 'priceNotation'
    strategy = 'strategy'
    priceUnitOfMeasure2 = 'priceUnitOfMeasure2'
    issueStatusDate = 'issueStatusDate'
    lenderIncome = 'lenderIncome'
    pbClientId = 'pbClientId'
    istatRegionCode = 'istatRegionCode'
    sell9bps = 'sell9bps'
    ownerId = 'ownerId'
    composite10DayAdv = 'composite10DayAdv'
    maxLoanBalance = 'maxLoanBalance'
    ideaActivityType = 'ideaActivityType'
    sell60cents = 'sell60cents'
    ideaSource = 'ideaSource'
    everOnVent = 'everOnVent'
    buy15cents = 'buy15cents'
    unadjustedAsk = 'unadjustedAsk'
    contributionName = 'contributionName'
    givenPlusPaid = 'givenPlusPaid'
    lastFillPrice = 'lastFillPrice'
    soprOut = 'soprOut'
    shortConvictionSmall = 'shortConvictionSmall'
    upfrontPaymentCurrency = 'upfrontPaymentCurrency'
    spotSettlementDate = 'spotSettlementDate'
    matrixOrder = 'matrixOrder'
    dayClose = 'dayClose'
    dateIndex = 'dateIndex'
    payerDayCountFraction = 'payerDayCountFraction'
    assetClassificationsIsPrimary = 'assetClassificationsIsPrimary'
    breakEvenInflationChange = 'breakEvenInflationChange'
    buy130cents = 'buy130cents'
    dwiContribution = 'dwiContribution'
    asset2Id = 'asset2Id'
    economicForecasts = 'economicForecasts'
    averageFillPrice = 'averageFillPrice'
    depthSpreadScore = 'depthSpreadScore'
    sell10cents = 'sell10cents'
    subAccount = 'subAccount'
    buy65cents = 'buy65cents'
    bondCdsBasis = 'bondCdsBasis'
    vendor = 'vendor'
    dataSet = 'dataSet'
    totalNotionalQuantity2 = 'totalNotionalQuantity2'
    totalNotionalQuantity1 = 'totalNotionalQuantity1'
    notionalAmount2 = 'notionalAmount2'
    notionalAmount1 = 'notionalAmount1'
    queueingTime = 'queueingTime'
    annReturn5Year = 'annReturn5Year'
    volumeStartOfDay = 'volumeStartOfDay'
    priceNotation3Type = 'priceNotation3Type'
    assetParametersFloatingRateDesignatedMaturity = 'assetParametersFloatingRateDesignatedMaturity'
    executedNotionalLocal = 'executedNotionalLocal'
    businessSponsor = 'businessSponsor'
    unexplained = 'unexplained'
    seasonalAdjustmentShort = 'seasonalAdjustmentShort'
    metric = 'metric'
    ask = 'ask'
    closePrice = 'closePrice'
    endTime = 'endTime'
    sell100cents = 'sell100cents'
    executionTimestamp = 'executionTimestamp'
    buy180cents = 'buy180cents'
    absoluteStrike = 'absoluteStrike'
    sell3point5bps = 'sell3point5bps'
    liquidityScoreBuy = 'liquidityScoreBuy'
    paymentFrequency = 'paymentFrequency'
    expenseRatioNetBps = 'expenseRatioNetBps'
    metricType = 'metricType'
    rankYtd = 'rankYtd'
    leg1Spread = 'leg1Spread'
    coverageRegion = 'coverageRegion'
    absoluteReturnYtd = 'absoluteReturnYtd'
    dayCountConvention2 = 'dayCountConvention2'
    fwdtier = 'fwdtier'
    degreeDays = 'degreeDays'
    turnoverAdjusted = 'turnoverAdjusted'
    priceSpotTargetValue = 'priceSpotTargetValue'
    marketDataPoint = 'marketDataPoint'
    numOfFunds = 'numOfFunds'
    tradeTime = 'tradeTime'
    executionId = 'executionId'
    turnoverUnadjusted = 'turnoverUnadjusted'
    leg1FloatingIndex = 'leg1FloatingIndex'
    hedgeAnnualizedVolatility = 'hedgeAnnualizedVolatility'
    benchmarkCurrency = 'benchmarkCurrency'
    futuresContract = 'futuresContract'
    name = 'name'
    aum = 'aum'
    leg1DayCountConvention = 'leg1DayCountConvention'
    cbsCode = 'cbsCode'
    folderName = 'folderName'
    apiUsage = 'apiUsage'
    twapInterval = 'twapInterval'
    paymentFrequencyPeriod1 = 'paymentFrequencyPeriod1'
    uniqueId = 'uniqueId'
    optionExpirationDate = 'optionExpirationDate'
    paymentFrequencyPeriod2 = 'paymentFrequencyPeriod2'
    swaptionAtmFwdRate = 'swaptionAtmFwdRate'
    liveDate = 'liveDate'
    corporateActionType = 'corporateActionType'
    primeId = 'primeId'
    description = 'description'
    assetClassificationsIsCountryPrimary = 'assetClassificationsIsCountryPrimary'
    rebateRateLimit = 'rebateRateLimit'
    factor = 'factor'
    daysOnLoan = 'daysOnLoan'
    longConvictionSmall = 'longConvictionSmall'
    sell40cents = 'sell40cents'
    relativePayoffYtd = 'relativePayoffYtd'
    gsfeer = 'gsfeer'
    relativeHitRateQtd = 'relativeHitRateQtd'
    wam = 'wam'
    wal = 'wal'
    quantityccy = 'quantityccy'
    backtestId = 'backtestId'
    dirtyPrice = 'dirtyPrice'
    corporateSpreadContribution = 'corporateSpreadContribution'
    relativeHumidityHourlyForecast = 'relativeHumidityHourlyForecast'
    multipleScore = 'multipleScore'
    betaAdjustedExposure = 'betaAdjustedExposure'
    isAnnualized = 'isAnnualized'
    dividendPoints = 'dividendPoints'
    brightness = 'brightness'
    assetParametersReceiverDesignatedMaturity = 'assetParametersReceiverDesignatedMaturity'
    bosInTicksDescription = 'bosInTicksDescription'
    testId = 'testId'
    impliedCorrelation = 'impliedCorrelation'
    normalizedPerformance = 'normalizedPerformance'
    overnightNewsEndTime = 'overnightNewsEndTime'
    bytesConsumed = 'bytesConsumed'
    swaptionVol = 'swaptionVol'
    estimatedClosingVolume = 'estimatedClosingVolume'
    issuer = 'issuer'
    dividendYield = 'dividendYield'
    marketType = 'marketType'
    numUnitsLower = 'numUnitsLower'
    sourceOrigin = 'sourceOrigin'
    proceedsAssetSwapSpread3m = 'proceedsAssetSwapSpread3m'
    totalQuantity = 'totalQuantity'
    internalUser = 'internalUser'
    sell40bps = 'sell40bps'
    redemptionOption = 'redemptionOption'
    notionalUnit2 = 'notionalUnit2'
    notionalUnit1 = 'notionalUnit1'
    sedol = 'sedol'
    roundingCostPnl = 'roundingCostPnl'
    midYield = 'midYield'
    unexecutedNotionalLocal = 'unexecutedNotionalLocal'
    sustainGlobal = 'sustainGlobal'
    endingDate = 'endingDate'
    proceedsAssetSwapSpread12m = 'proceedsAssetSwapSpread12m'
    rvtAdj90 = 'rvtAdj90'
    grossInvestmentWtd = 'grossInvestmentWtd'
    annReturn3Year = 'annReturn3Year'
    sharpeWtd = 'sharpeWtd'
    discountFactor = 'discountFactor'
    relativeReturnMtd = 'relativeReturnMtd'
    priceChangeOnDay = 'priceChangeOnDay'
    buy100cents = 'buy100cents'
    forwardPoint = 'forwardPoint'
    fci = 'fci'
    recallQuantity = 'recallQuantity'
    strikePriceCurrency = 'strikePriceCurrency'
    fxPositioning = 'fxPositioning'
    gsidEquivalent = 'gsidEquivalent'
    categories = 'categories'
    extMktAsset = 'extMktAsset'
    quotingStyle = 'quotingStyle'
    errorMessage = 'errorMessage'
    midPrice = 'midPrice'
    proceedsAssetSwapSpread6m = 'proceedsAssetSwapSpread6m'
    stsEmDm = 'stsEmDm'
    embeddedOption = 'embeddedOption'
    tcmCostHorizon2Day = 'tcmCostHorizon2Day'
    ageBand = 'ageBand'
    returnsEnabled = 'returnsEnabled'
    runId = 'runId'
    queueInLots = 'queueInLots'
    tenderOfferExpirationDate = 'tenderOfferExpirationDate'
    midcurveAnnuity = 'midcurveAnnuity'
    lendingFundNavTrend = 'lendingFundNavTrend'
    cloudCoverForecast = 'cloudCoverForecast'
    tcmCostParticipationRate5Pct = 'tcmCostParticipationRate5Pct'
    defaultBackcast = 'defaultBackcast'
    lockup = 'lockup'
    lockupType = 'lockupType'
    newsOnIntensity = 'newsOnIntensity'
    priceFormingContinuationData = 'priceFormingContinuationData'
    adjustedShortInterest = 'adjustedShortInterest'
    newHospitalized = 'newHospitalized'
    assetParametersStrike = 'assetParametersStrike'
    buy35cents = 'buy35cents'
    leg2TotalNotional = 'leg2TotalNotional'
    assetParametersEffectiveDate = 'assetParametersEffectiveDate'
    annReturn10Year = 'annReturn10Year'
    numAdultIcuBeds = 'numAdultIcuBeds'
    daysToExpiration = 'daysToExpiration'
    continuationEvent = 'continuationEvent'
    leg2CommodityUnderlyerId = 'leg2CommodityUnderlyerId'
    wiId = 'wiId'
    marketCapCategory = 'marketCapCategory'
    historicalVolume = 'historicalVolume'
    buy5cents = 'buy5cents'
    eventStartDate = 'eventStartDate'
    leg1FixedRate = 'leg1FixedRate'
    equityGamma = 'equityGamma'
    rptId = 'rptId'
    grossIncome = 'grossIncome'
    emId = 'emId'
    assetCountInModel = 'assetCountInModel'
    stsCreditRegion = 'stsCreditRegion'
    minTemperature = 'minTemperature'
    bucketStartTime = 'bucketStartTime'
    fillType = 'fillType'
    closeTime = 'closeTime'
    failPct = 'failPct'
    isoCountryCodeAlpha2 = 'isoCountryCodeAlpha2'
    isoCountryCodeAlpha3 = 'isoCountryCodeAlpha3'
    amount = 'amount'
    lendingFundAcct = 'lendingFundAcct'
    rebate = 'rebate'
    electionType = 'electionType'
    relativeHitRateMtd = 'relativeHitRateMtd'
    impliedVolatility = 'impliedVolatility'
    spread = 'spread'
    variance = 'variance'
    wtdDegreeDaysDailyForecast = 'wtdDegreeDaysDailyForecast'
    swaptionAnnuity = 'swaptionAnnuity'
    buy6bps = 'buy6bps'
    g10Currency = 'g10Currency'
    humidityForecast = 'humidityForecast'
    relativePeriod = 'relativePeriod'
    user = 'user'
    customer = 'customer'
    leg1ResetFrequency = 'leg1ResetFrequency'
    queueClockTimeLabel = 'queueClockTimeLabel'
    paceOfRollp100 = 'paceOfRollp100'
    assetClassificationsGicsSubIndustry = 'assetClassificationsGicsSubIndustry'
    dewPointHourlyForecast = 'dewPointHourlyForecast'
    locationType = 'locationType'
    facetDivisionalReportingGroupId = 'facetDivisionalReportingGroupId'
    realizedTwapPerformanceUSD = 'realizedTwapPerformanceUSD'
    swapRate = 'swapRate'
    algoExecutionStyle = 'algoExecutionStyle'
    clientContact = 'clientContact'
    minTemperatureHour = 'minTemperatureHour'
    tradingCurrency = 'tradingCurrency'
    totalByOnset = 'totalByOnset'
    agencySwapSpread = 'agencySwapSpread'
    rank = 'rank'
    mixedSwapOtherReportedSDR = 'mixedSwapOtherReportedSDR'
    humidity = 'humidity'
    dataSetCategory = 'dataSetCategory'
    vwapRealizedBps = 'vwapRealizedBps'
    buy9bps = 'buy9bps'
    totalTested = 'totalTested'
    fatalitiesConfirmed = 'fatalitiesConfirmed'
    universeId1 = 'universeId1'
    assetParametersPayerDayCountFraction = 'assetParametersPayerDayCountFraction'
    universeId2 = 'universeId2'
    bidLow = 'bidLow'
    bucketizePrice = 'bucketizePrice'
    fairVarianceVolatility = 'fairVarianceVolatility'
    covid19 = 'covid19'
    clientExposure = 'clientExposure'
    leg2TotalNotionalUnit = 'leg2TotalNotionalUnit'
    sell45cents = 'sell45cents'
    gsSustainSubSector = 'gsSustainSubSector'
    sinkable = 'sinkable'
    isReal = 'isReal'
    maxTemperatureHour = 'maxTemperatureHour'
    leg2AveragingMethod = 'leg2AveragingMethod'
    jsn = 'jsn'
    sell160cents = 'sell160cents'
    firstExerciseDate = 'firstExerciseDate'
    knockInDirection = 'knockInDirection'
    dayCloseUnrealizedUSD = 'dayCloseUnrealizedUSD'
    tenor = 'tenor'
    pricingConvention = 'pricingConvention'
    popularity = 'popularity'
    floatingRateOption = 'floatingRateOption'
    hedgeValueType = 'hedgeValueType'
    assetParametersClearingHouse = 'assetParametersClearingHouse'
    disclaimer = 'disclaimer'
    payerFrequency = 'payerFrequency'
    loanFee = 'loanFee'
    deploymentVersion = 'deploymentVersion'
    buy16bps = 'buy16bps'
    tradeDayCount = 'tradeDayCount'
    transactionType = 'transactionType'
    priceToSales = 'priceToSales'
    newIdeasQtd = 'newIdeasQtd'
    subdivisionName = 'subdivisionName'
    adjustedAskPrice = 'adjustedAskPrice'
    factorUniverse = 'factorUniverse'
    arrivalRt = 'arrivalRt'
    internalIndexCalcAgent = 'internalIndexCalcAgent'
    excessMarginValue = 'excessMarginValue'
    transactionCost = 'transactionCost'
    centralBankSwapRate = 'centralBankSwapRate'
    previousNewConfirmed = 'previousNewConfirmed'
    unrealizedVwapPerformanceBps = 'unrealizedVwapPerformanceBps'
    degreeDaysDailyForecast = 'degreeDaysDailyForecast'
    positionAmount = 'positionAmount'
    heatIndexHourlyForecast = 'heatIndexHourlyForecast'
    maRank = 'maRank'
    fxPositioningSource = 'fxPositioningSource'
    vol60d = 'vol60d'
    eventStartDateTime = 'eventStartDateTime'
    impliedVolatilityByDeltaStrike = 'impliedVolatilityByDeltaStrike'
    mqSymbol = 'mqSymbol'
    numTotalUnits = 'numTotalUnits'
    corporateAction = 'corporateAction'
    leg1PriceType = 'leg1PriceType'
    assetParametersPayerRateOption = 'assetParametersPayerRateOption'
    sell20cents = 'sell20cents'
    leg2FixedPaymentCurrency = 'leg2FixedPaymentCurrency'
    gRegionalScore = 'gRegionalScore'
    hardToBorrow = 'hardToBorrow'
    sell5bps = 'sell5bps'
    rollVwap = 'rollVwap'
    wpk = 'wpk'
    bespokeSwap = 'bespokeSwap'
    assetParametersExpirationDate = 'assetParametersExpirationDate'
    countryName = 'countryName'
    carry = 'carry'
    startingDate = 'startingDate'
    loanId = 'loanId'
    onboarded = 'onboarded'
    liquidityScore = 'liquidityScore'
    longRatesContribution = 'longRatesContribution'
    sourceDateSpan = 'sourceDateSpan'
    annYield6Month = 'annYield6Month'
    underlyingDataSetId = 'underlyingDataSetId'
    closeUnadjusted = 'closeUnadjusted'
    valueUnit = 'valueUnit'
    quantityUnit = 'quantityUnit'
    adjustedLowPrice = 'adjustedLowPrice'
    isMomentum = 'isMomentum'
    longConvictionLarge = 'longConvictionLarge'
    oad = 'oad'
    rate = 'rate'
    couponType = 'couponType'
    client = 'client'
    esgDetailedMetric = 'esgDetailedMetric'
    convictionList = 'convictionList'
    passiveEtfRatio = 'passiveEtfRatio'
    futureMonthG26 = 'futureMonthG26'
    futureMonthG25 = 'futureMonthG25'
    futureMonthG24 = 'futureMonthG24'
    futureMonthG23 = 'futureMonthG23'
    typeOfReturn = 'typeOfReturn'
    futureMonthG22 = 'futureMonthG22'
    servicingCostLongPnl = 'servicingCostLongPnl'
    excessMarginPercentage = 'excessMarginPercentage'
    futureMonthG21 = 'futureMonthG21'
    totalMild = 'totalMild'
    realizedArrivalPerformanceBps = 'realizedArrivalPerformanceBps'
    precipitationDailyForecastInches = 'precipitationDailyForecastInches'
    exchangeId = 'exchangeId'
    leg2FixedPayment = 'leg2FixedPayment'
    tcmCostHorizon20Day = 'tcmCostHorizon20Day'
    realm = 'realm'
    gate = 'gate'
    bid = 'bid'
    hedgeValue = 'hedgeValue'
    isSeasonallyAdjusted = 'isSeasonallyAdjusted'
    orderStartTime = 'orderStartTime'
    isAggressive = 'isAggressive'
    floatingRateDesignatedMaturity = 'floatingRateDesignatedMaturity'
    percentageNearExecutedQuantity = 'percentageNearExecutedQuantity'
    orderId = 'orderId'
    hospitalType = 'hospitalType'
    dayCloseRealizedBps = 'dayCloseRealizedBps'
    precipitationHourlyForecast = 'precipitationHourlyForecast'
    marketCapUSD = 'marketCapUSD'
    auctionFillsPercentage = 'auctionFillsPercentage'
    highPrice = 'highPrice'
    absoluteShares = 'absoluteShares'
    fixedRateDayCountFraction = 'fixedRateDayCountFraction'
    model = 'model'
    unrealizedTwapPerformanceUSD = 'unrealizedTwapPerformanceUSD'
    id = 'id'
    maturity = 'maturity'
    deltaChange = 'deltaChange'
    index = 'index'
    unrealizedArrivalPerformanceUSD = 'unrealizedArrivalPerformanceUSD'
    icebergSlippage = 'icebergSlippage'
    sell120cents = 'sell120cents'
    futureMonthX26 = 'futureMonthX26'
    assetTypes = 'assetTypes'
    futureMonthX25 = 'futureMonthX25'
    bcid = 'bcid'
    mktPoint = 'mktPoint'
    futureMonthX24 = 'futureMonthX24'
    restrictionStartDate = 'restrictionStartDate'
    touchLiquidityScore = 'touchLiquidityScore'
    futureMonthX23 = 'futureMonthX23'
    futureMonthX22 = 'futureMonthX22'
    factorCategoryId = 'factorCategoryId'
    securityTypeId = 'securityTypeId'
    futureMonthX21 = 'futureMonthX21'
    investmentYtd = 'investmentYtd'
    leg2Notional = 'leg2Notional'
    sell1bps = 'sell1bps'
    sell200cents = 'sell200cents'
    expectedCompletionDate = 'expectedCompletionDate'
    spreadOptionVol = 'spreadOptionVol'
    sell80cents = 'sell80cents'
    inflationSwapRate = 'inflationSwapRate'
    activeQueries = 'activeQueries'
    sell45bps = 'sell45bps'
    embededOption = 'embededOption'
    eventSource = 'eventSource'
    qisPermNo = 'qisPermNo'
    settlement = 'settlement'
    shareclassId = 'shareclassId'
    feature2 = 'feature2'
    feature3 = 'feature3'
    settlementCurrency2 = 'settlementCurrency2'
    stsCommoditySector = 'stsCommoditySector'
    exceptionStatus = 'exceptionStatus'
    overnightNewsIntensity = 'overnightNewsIntensity'
    salesCoverage = 'salesCoverage'
    feature1 = 'feature1'
    tcmCostParticipationRate10Pct = 'tcmCostParticipationRate10Pct'
    eventTime = 'eventTime'
    positionSourceName = 'positionSourceName'
    deliveryDate = 'deliveryDate'
    settlementCurrency1 = 'settlementCurrency1'
    interestRate = 'interestRate'
    side = 'side'
    dynamicHybridAggressiveStyle = 'dynamicHybridAggressiveStyle'
    complianceRestrictedStatus = 'complianceRestrictedStatus'
    borrowFee = 'borrowFee'
    everIcu = 'everIcu'
    noWorseThanLevel = 'noWorseThanLevel'
    updateTime = 'updateTime'
    loanSpread = 'loanSpread'
    tcmCostHorizon12Hour = 'tcmCostHorizon12Hour'
    dewPoint = 'dewPoint'
    researchCommission = 'researchCommission'
    buy2bps = 'buy2bps'
    assetClassificationsRiskCountryCode = 'assetClassificationsRiskCountryCode'
    newIdeasMtd = 'newIdeasMtd'
    varSwapByExpiry = 'varSwapByExpiry'
    sellDate = 'sellDate'
    aumStart = 'aumStart'
    assetParametersSettlement = 'assetParametersSettlement'
    maxTemperature = 'maxTemperature'
    acquirerShareholderMeetingDate = 'acquirerShareholderMeetingDate'
    countIdeasWtd = 'countIdeasWtd'
    arrivalRtNormalized = 'arrivalRtNormalized'
    reportType = 'reportType'
    sourceURL = 'sourceURL'
    estimatedReturn = 'estimatedReturn'
    high = 'high'
    sourceLastUpdate = 'sourceLastUpdate'
    sunshineForecast = 'sunshineForecast'
    quantityMW = 'quantityMW'
    sell70cents = 'sell70cents'
    sell110cents = 'sell110cents'
    pnodeId = 'pnodeId'
    price1 = 'price1'
    price2 = 'price2'
    referenceRate = 'referenceRate'
    humidityType = 'humidityType'
    prevCloseAsk = 'prevCloseAsk'
    level = 'level'
    impliedVolatilityByExpiration = 'impliedVolatilityByExpiration'
    hurdle = 'hurdle'
    assetParametersFixedRateDayCountFraction = 'assetParametersFixedRateDayCountFraction'
    esMomentumScore = 'esMomentumScore'
    leg1CommodityInstrumentId = 'leg1CommodityInstrumentId'
    leg2Index = 'leg2Index'
    netWeight = 'netWeight'
    portfolioManagers = 'portfolioManagers'
    bosInTicks = 'bosInTicks'
    assetParametersCouponType = 'assetParametersCouponType'
    expectedResidualQuantity = 'expectedResidualQuantity'
    rollDate = 'rollDate'
    dynamicHybridSpeed = 'dynamicHybridSpeed'
    capFloorVol = 'capFloorVol'
    targetQuantity = 'targetQuantity'
    submitter = 'submitter'
    no = 'no'
    notional = 'notional'
    esDisclosurePercentage = 'esDisclosurePercentage'
    closeExecutedQuantityPercentage = 'closeExecutedQuantityPercentage'
    twapRealizedCash = 'twapRealizedCash'
    isOpenAuction = 'isOpenAuction'
    leg1Type = 'leg1Type'
    wetBulbTempHourlyForecast = 'wetBulbTempHourlyForecast'
    cleanupPrice = 'cleanupPrice'
    total = 'total'
    filledNotionalUSD = 'filledNotionalUSD'
    assetId = 'assetId'
    blockTradeElectionIndicator = 'blockTradeElectionIndicator'
    testStatus = 'testStatus'
    mktType = 'mktType'
    lastUpdatedTime = 'lastUpdatedTime'
    yield30Day = 'yield30Day'
    buy28bps = 'buy28bps'
    proportionOfRisk = 'proportionOfRisk'
    futureMonthK23 = 'futureMonthK23'
    futureMonthK22 = 'futureMonthK22'
    futureMonthK21 = 'futureMonthK21'
    primaryEntityId = 'primaryEntityId'
    cross = 'cross'
    ideaStatus = 'ideaStatus'
    contractSubtype = 'contractSubtype'
    sri = 'sri'
    fxForecast = 'fxForecast'
    fixingTimeLabel = 'fixingTimeLabel'
    isETF = 'isETF'
    _100 = '100'
    _101 = '101'
    _102 = '102'
    _103 = '103'
    _104 = '104'
    fillId = 'fillId'
    excessReturns = 'excessReturns'
    _105 = '105'
    _106 = '106'
    dollarReturn = 'dollarReturn'
    orderInLimit = 'orderInLimit'
    expiryTime = 'expiryTime'
    _107 = '107'
    returnOnEquity = 'returnOnEquity'
    _108 = '108'
    _109 = '109'
    futureMonthK26 = 'futureMonthK26'
    futureMonthK25 = 'futureMonthK25'
    futureMonthK24 = 'futureMonthK24'
    restrictionEndDate = 'restrictionEndDate'
    queueInLotsDescription = 'queueInLotsDescription'
    volumeLimit = 'volumeLimit'
    objective = 'objective'
    navPrice = 'navPrice'
    leg1UnderlyingAsset = 'leg1UnderlyingAsset'
    _110 = '110'
    bbgid = 'bbgid'
    _111 = '111'
    _112 = '112'
    _113 = '113'
    privatePlacementType = 'privatePlacementType'
    _114 = '114'
    hedgeNotional = 'hedgeNotional'
    _115 = '115'
    _116 = '116'
    askLow = 'askLow'
    intendedPRate = 'intendedPRate'
    _117 = '117'
    _118 = '118'
    _119 = '119'
    expiry = 'expiry'
    avgMonthlyYield = 'avgMonthlyYield'
    periodDirection = 'periodDirection'
    prevRptId = 'prevRptId'
    earningsPerShare = 'earningsPerShare'
    strikePercentage = 'strikePercentage'
    esProductImpactPercentile = 'esProductImpactPercentile'
    vwapRealizedCash = 'vwapRealizedCash'
    parAssetSwapSpread1m = 'parAssetSwapSpread1m'
    prevCloseBid = 'prevCloseBid'
    minimumIncrement = 'minimumIncrement'
    tcmCostHorizon16Day = 'tcmCostHorizon16Day'
    investmentMtd = 'investmentMtd'
    settlementDate = 'settlementDate'
    weightedAverageMidNormalized = 'weightedAverageMidNormalized'
    _120 = '120'
    _121 = '121'
    _122 = '122'
    salesPerShare = 'salesPerShare'
    _123 = '123'
    _124 = '124'
    _125 = '125'
    unadjustedClose = 'unadjustedClose'
    _126 = '126'
    _127 = '127'
    _128 = '128'
    _129 = '129'
    loanDate = 'loanDate'
    matchedMaturitySwapSpread1m = 'matchedMaturitySwapSpread1m'
    collateralPercentageActual = 'collateralPercentageActual'
    vwapInLimitUnrealizedBps = 'vwapInLimitUnrealizedBps'
    metricValue = 'metricValue'
    autoExecState = 'autoExecState'
    totalRecovered = 'totalRecovered'
    relativeReturnYtd = 'relativeReturnYtd'
    _130 = '130'
    tickServer = 'tickServer'
    _131 = '131'
    _132 = '132'
    _133 = '133'
    _134 = '134'
    cumulativeVolumeInPercentage = 'cumulativeVolumeInPercentage'
    _135 = '135'
    _136 = '136'
    _137 = '137'
    _138 = '138'
    _139 = '139'
    realTimeRestrictionStatus = 'realTimeRestrictionStatus'
    tradeType = 'tradeType'
    settlementType = 'settlementType'
    netChange = 'netChange'
    numberOfUnderliers = 'numberOfUnderliers'
    swapType = 'swapType'
    forecastType = 'forecastType'
    leg1Notional = 'leg1Notional'
    sellSettleDate = 'sellSettleDate'
    _140 = '140'
    _141 = '141'
    _142 = '142'
    _143 = '143'
    _144 = '144'
    _145 = '145'
    _146 = '146'
    _147 = '147'
    newIdeasYtd = 'newIdeasYtd'
    managementFee = 'managementFee'
    _148 = '148'
    _149 = '149'
    parAssetSwapSpread3m = 'parAssetSwapSpread3m'
    sell36bps = 'sell36bps'
    matchedMaturitySwapSpread3m = 'matchedMaturitySwapSpread3m'
    sourceId = 'sourceId'
    country = 'country'
    optionPremiumCurrency = 'optionPremiumCurrency'
    vwap = 'vwap'
    touchSpreadScore = 'touchSpreadScore'
    ratingSecondHighest = 'ratingSecondHighest'
    sell24bps = 'sell24bps'
    _150 = '150'
    _151 = '151'
    _152 = '152'
    frequency = 'frequency'
    _153 = '153'
    _154 = '154'
    activityId = 'activityId'
    _155 = '155'
    estimatedImpact = 'estimatedImpact'
    sell35cents = 'sell35cents'
    _156 = '156'
    loanSpreadBucket = 'loanSpreadBucket'
    _157 = '157'
    _158 = '158'
    coronavirusGlobalActivityTracker = 'coronavirusGlobalActivityTracker'
    _159 = '159'
    underlyers = 'underlyers'
    assetParametersPricingLocation = 'assetParametersPricingLocation'
    eventDescription = 'eventDescription'
    icebergMaxSize = 'icebergMaxSize'
    assetParametersCoupon = 'assetParametersCoupon'
    details = 'details'
    sector = 'sector'
    avgBedUtilRate = 'avgBedUtilRate'
    buy20bps = 'buy20bps'
    indexLevel = 'indexLevel'
    epidemic = 'epidemic'
    mctr = 'mctr'
    exchangeTime = 'exchangeTime'
    historicalClose = 'historicalClose'
    fipsCode = 'fipsCode'
    _160 = '160'
    _161 = '161'
    buy32bps = 'buy32bps'
    _162 = '162'
    _163 = '163'
    ideaId = 'ideaId'
    commentStatus = 'commentStatus'
    marginalCost = 'marginalCost'
    _164 = '164'
    _165 = '165'
    _166 = '166'
    _167 = '167'
    _168 = '168'
    clientWeight = 'clientWeight'
    _169 = '169'
    leg1DeliveryPoint = 'leg1DeliveryPoint'
    sell5cents = 'sell5cents'
    liqWkly = 'liqWkly'
    unrealizedTwapPerformanceBps = 'unrealizedTwapPerformanceBps'
    region = 'region'
    temperatureHour = 'temperatureHour'
    upperBound = 'upperBound'
    sell55cents = 'sell55cents'
    _170 = '170'
    _171 = '171'
    numPediIcuBeds = 'numPediIcuBeds'
    _172 = '172'
    bidYield = 'bidYield'
    _173 = '173'
    _174 = '174'
    expectedResidual = 'expectedResidual'
    _175 = '175'
    _176 = '176'
    optionPremium = 'optionPremium'
    _177 = '177'
    _178 = '178'
    _179 = '179'
    ownerName = 'ownerName'
    parAssetSwapSpread6m = 'parAssetSwapSpread6m'
    zScore = 'zScore'
    sell12bps = 'sell12bps'
    eventStartTime = 'eventStartTime'
    matchedMaturitySwapSpread6m = 'matchedMaturitySwapSpread6m'
    turnover = 'turnover'
    priceSpotTargetUnit = 'priceSpotTargetUnit'
    coverage = 'coverage'
    gPercentile = 'gPercentile'
    _180 = '180'
    rvtAdj = 'rvtAdj'
    _181 = '181'
    _182 = '182'
    cloudCoverHourlyForecast = 'cloudCoverHourlyForecast'
    _183 = '183'
    _184 = '184'
    lendingFundNav = 'lendingFundNav'
    sourceOriginalCategory = 'sourceOriginalCategory'
    percentCloseExecutionQuantity = 'percentCloseExecutionQuantity'
    _185 = '185'
    latestExecutionTime = 'latestExecutionTime'
    _186 = '186'
    _187 = '187'
    arrivalMidRealizedBps = 'arrivalMidRealizedBps'
    _188 = '188'
    _189 = '189'
    location = 'location'
    scenarioId = 'scenarioId'
    terminationTenor = 'terminationTenor'
    queueClockTime = 'queueClockTime'
    discretionLowerBound = 'discretionLowerBound'
    tcmCostParticipationRate50Pct = 'tcmCostParticipationRate50Pct'
    ratingLinear = 'ratingLinear'
    previousCloseUnrealizedBps = 'previousCloseUnrealizedBps'
    _190 = '190'
    _191 = '191'
    subAssetClassForOtherCommodity = 'subAssetClassForOtherCommodity'
    _192 = '192'
    forwardPrice = 'forwardPrice'
    _193 = '193'
    type = 'type'
    _194 = '194'
    strikeRef = 'strikeRef'
    _195 = '195'
    _196 = '196'
    _197 = '197'
    cumulativePnl = 'cumulativePnl'
    _198 = '198'
    shortTenor = 'shortTenor'
    sell28bps = 'sell28bps'
    fundClass = 'fundClass'
    _199 = '199'
    unadjustedVolume = 'unadjustedVolume'
    buy36bps = 'buy36bps'
    positionIdx = 'positionIdx'
    windChillHourlyForecast = 'windChillHourlyForecast'
    secName = 'secName'
    impliedVolatilityByRelativeStrike = 'impliedVolatilityByRelativeStrike'
    percentADV = 'percentADV'
    referenceRateUSD = 'referenceRateUSD'
    leg1TotalNotional = 'leg1TotalNotional'
    contract = 'contract'
    nvtAdj90 = 'nvtAdj90'
    paymentFrequency1 = 'paymentFrequency1'
    paymentFrequency2 = 'paymentFrequency2'
    bespoke = 'bespoke'
    repoTenor = 'repoTenor'
    sell15cents = 'sell15cents'
    investmentQtd = 'investmentQtd'
    heatIndexForecast = 'heatIndexForecast'
    ratingStandardAndPoors = 'ratingStandardAndPoors'
    qualityStars = 'qualityStars'
    leg2FloatingIndex = 'leg2FloatingIndex'
    sourceTicker = 'sourceTicker'
    primaryVwapUnrealizedBps = 'primaryVwapUnrealizedBps'
    gsid = 'gsid'
    lendingFund = 'lendingFund'
    sensitivity = 'sensitivity'
    embeddedOptionType = 'embeddedOptionType'
    dayCount = 'dayCount'
    sell16bps = 'sell16bps'
    relativeBreakEvenInflationChange = 'relativeBreakEvenInflationChange'
    sell25cents = 'sell25cents'
    varSwap = 'varSwap'
    buy5point5bps = 'buy5point5bps'
    blockLargeNotional = 'blockLargeNotional'
    sell2point5bps = 'sell2point5bps'
    capacity = 'capacity'
    sectorsRaw = 'sectorsRaw'
    primaryVwapInLimit = 'primaryVwapInLimit'
    shareclassPrice = 'shareclassPrice'
    tradeSize = 'tradeSize'
    priceSpotEntryValue = 'priceSpotEntryValue'
    buy8point5bps = 'buy8point5bps'
    symbolDimensions = 'symbolDimensions'
    buy24bps = 'buy24bps'
    sidePocket = 'sidePocket'
    observation = 'observation'
    optionTypeSDR = 'optionTypeSDR'
    scenarioGroupId = 'scenarioGroupId'
    averageImpliedVariance = 'averageImpliedVariance'
    avgTradeRateDescription = 'avgTradeRateDescription'
    fraction = 'fraction'
    assetCountShort = 'assetCountShort'
    collateralPercentageRequired = 'collateralPercentageRequired'
    sell5point5bps = 'sell5point5bps'
    date = 'date'
    zipCode = 'zipCode'
    totalStdReturnSinceInception = 'totalStdReturnSinceInception'
    sourceCategory = 'sourceCategory'
    volumeUnadjusted = 'volumeUnadjusted'
    passiveRatio = 'passiveRatio'
    priceToEarnings = 'priceToEarnings'
    orderDepth = 'orderDepth'
    annYield3Month = 'annYield3Month'
    netFlowStd = 'netFlowStd'
    encodedStats = 'encodedStats'
    buy5bps = 'buy5bps'
    runTime = 'runTime'
    askSize = 'askSize'
    absoluteReturnMtd = 'absoluteReturnMtd'
    std30DaysUnsubsidizedYield = 'std30DaysUnsubsidizedYield'
    resource = 'resource'
    averageRealizedVolatility = 'averageRealizedVolatility'
    traceAdvBuy = 'traceAdvBuy'
    newConfirmed = 'newConfirmed'
    sell8bps = 'sell8bps'
    bidPrice = 'bidPrice'
    sell8point5bps = 'sell8point5bps'
    targetPriceUnrealizedBps = 'targetPriceUnrealizedBps'
    esNumericPercentile = 'esNumericPercentile'
    leg2UnderlyingAsset = 'leg2UnderlyingAsset'
    csaTerms = 'csaTerms'
    relativePayoffMtd = 'relativePayoffMtd'
    dailyNetShareholderFlows = 'dailyNetShareholderFlows'
    buy2point5bps = 'buy2point5bps'
    cai = 'cai'
    executedNotionalUSD = 'executedNotionalUSD'
    systemTime = 'systemTime'
    totalHomeIsolation = 'totalHomeIsolation'
    stationName = 'stationName'
    passPct = 'passPct'
    openingReport = 'openingReport'
    eventTimestamp = 'eventTimestamp'
    midcurveAtmFwdRate = 'midcurveAtmFwdRate'
    precipitationForecast = 'precipitationForecast'
    equityRiskPremiumIndex = 'equityRiskPremiumIndex'
    fatalitiesUnderlyingConditionsUnknown = 'fatalitiesUnderlyingConditionsUnknown'
    buy12bps = 'buy12bps'
    clearingHouse = 'clearingHouse'
    dayCloseUnrealizedBps = 'dayCloseUnrealizedBps'
    stsRatesMaturity = 'stsRatesMaturity'
    liqDly = 'liqDly'
    contributorRole = 'contributorRole'
    totalFatalities = 'totalFatalities'
    adjustedClose = 'adjustedClose'
    averageValue = 'averageValue'
    avgInterestRate = 'avgInterestRate'
    basisDuration = 'basisDuration'
    bestMonthDate = 'bestMonthDate'
    bloombergTicker = 'bloombergTicker'
    capexDepreciation = 'capexDepreciation'
    capexSales = 'capexSales'
    cashConversion = 'cashConversion'
    category = 'category'
    convexity = 'convexity'
    countryCode = 'countryCode'
    croci = 'croci'
    currentValue = 'currentValue'
    dacf = 'dacf'
    dailyVolatility = 'dailyVolatility'
    divYield = 'divYield'
    dpsGrowth = 'dpsGrowth'
    drawdownOverReturn = 'drawdownOverReturn'
    ebitdaGrowth = 'ebitdaGrowth'
    ebitdaMargin = 'ebitdaMargin'
    ebitGrowth = 'ebitGrowth'
    ebitMargin = 'ebitMargin'
    evGci = 'evGci'
    fcfConversion = 'fcfConversion'
    fcfYield = 'fcfYield'
    gci = 'gci'
    grossProfTotAssets = 'grossProfTotAssets'
    historicCPR = 'historicCPR'
    incrementalMargin = 'incrementalMargin'
    industry = 'industry'
    informationRatio = 'informationRatio'
    interestCover = 'interestCover'
    lastChange = 'lastChange'
    lastChangePct = 'lastChangePct'
    lastDate = 'lastDate'
    lastValue = 'lastValue'
    liborMatchedMaturitySwap = 'liborMatchedMaturitySwap'
    liborOAS = 'liborOAS'
    liborProceedsASW = 'liborProceedsASW'
    liborzSpread = 'liborzSpread'
    manEarningGrowthMeas = 'manEarningGrowthMeas'
    marginalRiskContribution = 'marginalRiskContribution'
    maxDrawdown = 'maxDrawdown'
    netDebtEbitda = 'netDebtEbitda'
    netDebtEquity = 'netDebtEquity'
    niGrowth = 'niGrowth'
    niMargin = 'niMargin'
    oisMatchedMaturitySwap = 'oisMatchedMaturitySwap'
    oisProceedsASW = 'oisProceedsASW'
    oiszSpread = 'oiszSpread'
    optionStyle = 'optionStyle'
    payup = 'payup'
    positionDate = 'positionDate'
    preTaxProfitGrowth = 'preTaxProfitGrowth'
    riskPremiaStyles = 'riskPremiaStyles'
    roce = 'roce'
    rolldown = 'rolldown'
    salesGrowth = 'salesGrowth'
    sharpeRatio = 'sharpeRatio'
    totalDebtCapital = 'totalDebtCapital'
    totalDebtTotalAsset = 'totalDebtTotalAsset'
    totalReturn = 'totalReturn'
    unleveredFcfYield = 'unleveredFcfYield'
    worstMonthDate = 'worstMonthDate'
    
    def __repr__(self):
        return self.value


class Format(EnumBase, Enum):    
    
    """Alternative format for data to be returned in"""

    Json = 'Json'
    Excel = 'Excel'
    MessagePack = 'MessagePack'
    Pdf = 'Pdf'
    
    def __repr__(self):
        return self.value


class IndexNotTradingReasons(EnumBase, Enum):    
    
    """Reasons the index was not traded"""

    Cost = 'Cost'
    Client_does_not_like_the_construction = 'Client does not like the construction'
    Basket_created_prematurely = 'Basket created prematurely'
    Economics_of_the_basket_changed__client_no_longer_interested_in_trading = 'Economics of the basket changed: client no longer interested in trading'
    GS_booking_OVER_operational_issues = 'GS booking/operational issues'
    _ = ''
    
    def __repr__(self):
        return self.value


class LiquidityMeasure(EnumBase, Enum):    
    
    """A list of the different liquidity measures to choose from."""

    Summary = 'Summary'
    Constituent_Transaction_Costs = 'Constituent Transaction Costs'
    Constituents = 'Constituents'
    Largest_Holdings_By_Weight = 'Largest Holdings By Weight'
    Least_Liquid_Holdings = 'Least Liquid Holdings'
    ADV_Percent_Buckets = 'ADV Percent Buckets'
    Market_Cap_Buckets = 'Market Cap Buckets'
    Region_Buckets = 'Region Buckets'
    Country_Buckets = 'Country Buckets'
    Sector_Buckets = 'Sector Buckets'
    Industry_Buckets = 'Industry Buckets'
    Risk_Buckets = 'Risk Buckets'
    Factor_Risk_Buckets = 'Factor Risk Buckets'
    Exposure_Buckets = 'Exposure Buckets'
    Factor_Exposure_Buckets = 'Factor Exposure Buckets'
    Percent_Of_Trade_Complete_Over_Time = 'Percent Of Trade Complete Over Time'
    Execution_Cost_With_Different_Time_Horizons = 'Execution Cost With Different Time Horizons'
    Participation_Rate_With_Different_Time_Horizons = 'Participation Rate With Different Time Horizons'
    Risk_With_Different_Time_Horizons = 'Risk With Different Time Horizons'
    Historical_ADV_Percent_Curve = 'Historical ADV Percent Curve'
    Time_Series_Data = 'Time Series Data'
    
    def __repr__(self):
        return self.value


class MarketDataFrequency(EnumBase, Enum):    
    
    Real_Time = 'Real Time'
    End_Of_Day = 'End Of Day'
    
    def __repr__(self):
        return self.value


class MarketDataShockType(EnumBase, Enum):    
    
    """Market data shock type"""

    Absolute = 'Absolute'
    Proportional = 'Proportional'
    Invalid = 'Invalid'
    Override = 'Override'
    StdDev = 'StdDev'
    AutoDefault = 'AutoDefault'
    CSWFFR = 'CSWFFR'
    StdVolFactor = 'StdVolFactor'
    StdVolFactorProportional = 'StdVolFactorProportional'
    
    def __repr__(self):
        return self.value


class MarketDataVendor(EnumBase, Enum):    
    
    Goldman_Sachs = 'Goldman Sachs'
    Thomson_Reuters = 'Thomson Reuters'
    Solactive = 'Solactive'
    Bloomberg = 'Bloomberg'
    Axioma = 'Axioma'
    Goldman_Sachs_Prime_Services = 'Goldman Sachs Prime Services'
    Goldman_Sachs_Global_Investment_Research = 'Goldman Sachs Global Investment Research'
    National_Weather_Service = 'National Weather Service'
    WM = 'WM'
    Hedge_Fund_Research__Inc_ = 'Hedge Fund Research, Inc.'
    London_Stock_Exchange = 'London Stock Exchange'
    Goldman_Sachs_MDFarm = 'Goldman Sachs MDFarm'
    PredictIt = 'PredictIt'
    Iowa_Electronic_Markets = 'Iowa Electronic Markets'
    RealClearPolitics = 'RealClearPolitics'
    _538 = '538'
    FiveThirtyEight = 'FiveThirtyEight'
    Opinium = 'Opinium'
    YouGov = 'YouGov'
    MorningStar = 'MorningStar'
    Survation = 'Survation'
    Survation__YouGov = 'Survation, YouGov'
    European_Centre_for_Disease_Prevention_and_Control = 'European Centre for Disease Prevention and Control'
    Centers_for_Disease_Control_and_Prevention = 'Centers for Disease Control and Prevention'
    Johns_Hopkins_University = 'Johns Hopkins University'
    Google = 'Google'
    National_Health_Service = 'National Health Service'
    World_Health_Organization = 'World Health Organization'
    Wikipedia = 'Wikipedia'
    StarSchema = 'StarSchema'
    Covid_Working_Group = 'Covid Working Group'
    CovidTracking = 'CovidTracking'
    Bing = 'Bing'
    FRED = 'FRED'
    Institute_for_Health_Metrics_and_Evaluation = 'Institute for Health Metrics and Evaluation'
    Refinitiv = 'Refinitiv'
    Goldman_Sachs_Global_Investment_Research__Refinitiv = 'Goldman Sachs Global Investment Research, Refinitiv'
    EPFR = 'EPFR'
    
    def __repr__(self):
        return self.value


class OptionExpiryType(EnumBase, Enum):    
    
    _1m = '1m'
    _2m = '2m'
    _3m = '3m'
    _4m = '4m'
    _5m = '5m'
    _6m = '6m'
    
    def __repr__(self):
        return self.value


class OptionSettlementMethod(EnumBase, Enum):    
    
    """How the option is settled (e.g. Cash, Physical)"""

    Cash = 'Cash'
    Physical = 'Physical'
    
    def __repr__(self):
        return self.value


class OptionStrikeType(EnumBase, Enum):    
    
    Relative = 'Relative'
    Delta = 'Delta'
    
    def __repr__(self):
        return self.value


class OptionStyle(EnumBase, Enum):    
    
    """Option Exercise Style"""

    European = 'European'
    American = 'American'
    Bermudan = 'Bermudan'
    
    def __repr__(self):
        return self.value


class OptionType(EnumBase, Enum):    
    
    """Option Type"""

    Call = 'Call'
    Put = 'Put'
    Binary_Call = 'Binary Call'
    Binary_Put = 'Binary Put'
    
    def __repr__(self):
        return self.value


class PCOCurrencyType(EnumBase, Enum):    
    
    """Currency Type Options for PCO"""

    Exposure = 'Exposure'
    Base = 'Base'
    Local = 'Local'
    
    def __repr__(self):
        return self.value


class PCOFundCalendar(EnumBase, Enum):    
    
    """Fund Calendar Options for PCO"""

    New_York = 'New York'
    London = 'London'
    Hong_Kong = 'Hong Kong'
    Singapore = 'Singapore'
    
    def __repr__(self):
        return self.value


class PayReceive(EnumBase, Enum):    
    
    """Pay or receive fixed"""

    Pay = 'Pay'
    Receive = 'Receive'
    Straddle = 'Straddle'
    
    def __repr__(self):
        return self.value


class Period(EnumBase, Enum):    
    
    """A coding scheme to define a period corresponding to a quantity amount"""

    Month = 'Month'
    Quarter = 'Quarter'
    Hour = 'Hour'
    Day = 'Day'
    BusinessDay = 'BusinessDay'
    
    def __repr__(self):
        return self.value


class PricingLocation(EnumBase, Enum):    
    
    """Based on the location of the exchange. Called 'Native Region' in SecDB"""

    NYC = 'NYC'
    LDN = 'LDN'
    TKO = 'TKO'
    HKG = 'HKG'
    
    def __repr__(self):
        return self.value


class PrincipalExchange(EnumBase, Enum):    
    
    """How principal is exchanged"""

    _None = 'None'
    Both = 'Both'
    First = 'First'
    Last = 'Last'
    
    def __repr__(self):
        return self.value


class ProductCode(EnumBase, Enum):    
    
    """Override the clearing destination/symbol"""

    CME__BB = 'CME::BB'
    CME__BK = 'CME::BK'
    CME__BY = 'CME::BY'
    CME__BZ = 'CME::BZ'
    CME__CL = 'CME::CL'
    CME__CL_BZ = 'CME::CL-BZ'
    CME__CS = 'CME::CS'
    CME__CY = 'CME::CY'
    CME__HK = 'CME::HK'
    CME__HO = 'CME::HO'
    CME__HOB = 'CME::HOB'
    CME__HO_CL = 'CME::HO-CL'
    CME__MP = 'CME::MP'
    CME__NG = 'CME::NG'
    CME__NLS = 'CME::NLS'
    CME__RB = 'CME::RB'
    CME__RBB = 'CME::RBB'
    CME__RB_BZ = 'CME::RB-BZ'
    CME__RB_CL = 'CME::RB-CL'
    CME__RH = 'CME::RH'
    CME__RL = 'CME::RL'
    CME__RM = 'CME::RM'
    CME__WS = 'CME::WS'
    CME_ICE__RB_B = 'CME-ICE::RB-B'
    ICE__B = 'ICE::B'
    ICE__BNB = 'ICE::BNB'
    ICE__BTD = 'ICE::BTD'
    ICE__G = 'ICE::G'
    ICE__G_B = 'ICE::G-B'
    ICE__HBT = 'ICE::HBT'
    ICE__HNG = 'ICE::HNG'
    ICE__HOF = 'ICE::HOF'
    ICE__I = 'ICE::I'
    ICE__N = 'ICE::N'
    ICE__N_B = 'ICE::N-B'
    ICE__O = 'ICE::O'
    ICE__O_B = 'ICE::O-B'
    ICE__R = 'ICE::R'
    ICE__RBR = 'ICE::RBR'
    ICE__T = 'ICE::T'
    ICE__T_B = 'ICE::T-B'
    ICE__ULA = 'ICE::ULA'
    ICE__ULC = 'ICE::ULC'
    ICE__ULD = 'ICE::ULD'
    ICE__ULM = 'ICE::ULM'
    ICE__WTB = 'ICE::WTB'
    LME__MAL = 'LME::MAL'
    LME__MNI = 'LME::MNI'
    LME__MPB = 'LME::MPB'
    LME__MZN = 'LME::MZN'
    OTC__BRT = 'OTC::BRT'
    OTC__GO = 'OTC::GO'
    OTC__GO_BRT = 'OTC::GO-BRT'
    OTC__HO = 'OTC::HO'
    OTC__HO_BRT = 'OTC::HO-BRT'
    OTC__HO_GO = 'OTC::HO-GO'
    OTC__HO_WTI = 'OTC::HO-WTI'
    OTC__MAL = 'OTC::MAL'
    OTC__MNI = 'OTC::MNI'
    OTC__MPB = 'OTC::MPB'
    OTC__MZN = 'OTC::MZN'
    OTC__NG = 'OTC::NG'
    OTC__RB = 'OTC::RB'
    OTC__RB_BRT = 'OTC::RB-BRT'
    OTC__RB_HO = 'OTC::RB-HO'
    OTC__RB_WTI = 'OTC::RB-WTI'
    OTC__WTI = 'OTC::WTI'
    OTC__WTI_BRT = 'OTC::WTI-BRT'
    
    def __repr__(self):
        return self.value


class Region(EnumBase, Enum):    
    
    """Regional classification for the asset"""

    _ = ''
    Americas = 'Americas'
    Asia = 'Asia'
    EM = 'EM'
    Europe = 'Europe'
    Global = 'Global'
    
    def __repr__(self):
        return self.value


class ReportJobPriority(EnumBase, Enum):    
    
    """Report job priority."""

    High = 'High'
    Normal = 'Normal'
    
    def __repr__(self):
        return self.value


class RiskMeasureType(EnumBase, Enum):    
    
    """The type of measure to perform risk on. e.g. Greeks"""

    Annual_ATM_Implied_Volatility = 'Annual ATM Implied Volatility'
    Annual_ATMF_Implied_Volatility = 'Annual ATMF Implied Volatility'
    Annual_Implied_Volatility = 'Annual Implied Volatility'
    AnnuityLocalCcy = 'AnnuityLocalCcy'
    BaseCPI = 'BaseCPI'
    Basis = 'Basis'
    BSPrice = 'BSPrice'
    CRIF_IRCurve = 'CRIF IRCurve'
    Cashflows = 'Cashflows'
    Daily_Implied_Volatility = 'Daily Implied Volatility'
    Delta = 'Delta'
    DeltaLocalCcy = 'DeltaLocalCcy'
    Description = 'Description'
    Dollar_Price = 'Dollar Price'
    DV01 = 'DV01'
    Fair_Price = 'Fair Price'
    FairVarStrike = 'FairVarStrike'
    FairVolStrike = 'FairVolStrike'
    Forward_Price = 'Forward Price'
    Forward_Rate = 'Forward Rate'
    Price = 'Price'
    Gamma = 'Gamma'
    GammaLocalCcy = 'GammaLocalCcy'
    InflationDelta = 'InflationDelta'
    Local_Currency_Accrual_in_Cents = 'Local Currency Accrual in Cents'
    Local_Currency_Annuity = 'Local Currency Annuity'
    Market_Data = 'Market Data'
    Market_Data_Assets = 'Market Data Assets'
    MV = 'MV'
    OAS = 'OAS'
    ParallelBasis = 'ParallelBasis'
    ParallelDelta = 'ParallelDelta'
    ParallelDeltaLocalCcy = 'ParallelDeltaLocalCcy'
    ParallelDiscountDelta = 'ParallelDiscountDelta'
    ParallelDiscountDeltaLocalCcy = 'ParallelDiscountDeltaLocalCcy'
    ParallelInflationDelta = 'ParallelInflationDelta'
    ParallelIndexDelta = 'ParallelIndexDelta'
    ParallelIndexDeltaLocalCcy = 'ParallelIndexDeltaLocalCcy'
    ParallelInflationDeltaLocalCcy = 'ParallelInflationDeltaLocalCcy'
    ParallelXccyDelta = 'ParallelXccyDelta'
    ParallelXccyDeltaLocalCcy = 'ParallelXccyDeltaLocalCcy'
    ParallelGamma = 'ParallelGamma'
    ParallelGammaLocalCcy = 'ParallelGammaLocalCcy'
    ParallelVega = 'ParallelVega'
    ParallelVegaLocalCcy = 'ParallelVegaLocalCcy'
    Premium_In_Cents = 'Premium In Cents'
    Premium = 'Premium'
    Resolved_Instrument_Values = 'Resolved Instrument Values'
    PNL = 'PNL'
    PnlExplain = 'PnlExplain'
    PnlExplainLocalCcy = 'PnlExplainLocalCcy'
    PnlPredict = 'PnlPredict'
    PV = 'PV'
    QuotedDelta = 'QuotedDelta'
    Spot = 'Spot'
    Spot_Rate = 'Spot Rate'
    Strike = 'Strike'
    Theta = 'Theta'
    Vanna = 'Vanna'
    Vega = 'Vega'
    VegaLocalCcy = 'VegaLocalCcy'
    Volga = 'Volga'
    Volatility = 'Volatility'
    XccyDelta = 'XccyDelta'
    
    def __repr__(self):
        return self.value


class RiskMeasureUnit(EnumBase, Enum):    
    
    """The unit of change of underlying in the risk computation."""

    Percent = 'Percent'
    Dollar = 'Dollar'
    BPS = 'BPS'
    
    def __repr__(self):
        return self.value


class ScenarioType(EnumBase, Enum):    
    
    """Type of Scenario"""

    Spot_Vol = 'Spot Vol'
    Greeks = 'Greeks'
    
    def __repr__(self):
        return self.value


class SettlementType(EnumBase, Enum):    
    
    """Settlement Type"""

    Cash = 'Cash'
    Physical = 'Physical'
    
    def __repr__(self):
        return self.value


class StrikeMethodType(EnumBase, Enum):    
    
    Spread = 'Spread'
    Delta = 'Delta'
    Percentage_of_Price = 'Percentage of Price'
    Fixed = 'Fixed'
    
    def __repr__(self):
        return self.value


class SwapClearingHouse(EnumBase, Enum):    
    
    """Swap Clearing House"""

    LCH = 'LCH'
    EUREX = 'EUREX'
    JSCC = 'JSCC'
    CME = 'CME'
    NONE = 'NONE'
    
    def __repr__(self):
        return self.value


class SwapSettlement(EnumBase, Enum):    
    
    """Swap Settlement Type"""

    Phys_CLEARED = 'Phys.CLEARED'
    Physical = 'Physical'
    Cash_CollatCash = 'Cash.CollatCash'
    Cash_PYU = 'Cash.PYU'
    
    def __repr__(self):
        return self.value


class TradeAs(EnumBase, Enum):    
    
    """Option trade as (i.e. listed, otc, lookalike etc)"""

    Listed = 'Listed'
    Listed_Look_alike_OTC = 'Listed Look alike OTC'
    Flex = 'Flex'
    OTC = 'OTC'
    
    def __repr__(self):
        return self.value


class TradeType(EnumBase, Enum):    
    
    """Direction"""

    Buy = 'Buy'
    Sell = 'Sell'
    
    def __repr__(self):
        return self.value


class UnderlierType(EnumBase, Enum):    
    
    """Type of underlyer"""

    BBID = 'BBID'
    CUSIP = 'CUSIP'
    ISIN = 'ISIN'
    SEDOL = 'SEDOL'
    RIC = 'RIC'
    Ticker = 'Ticker'
    
    def __repr__(self):
        return self.value


class ValuationTime(EnumBase, Enum):    
    
    """The time of valuation, e.g. for an option"""

    MktClose = 'MktClose'
    MktOpen = 'MktOpen'
    SQ = 'SQ'
    
    def __repr__(self):
        return self.value


class VarianceConvention(EnumBase, Enum):    
    
    """Specifies whether the variance is Annualized or Total"""

    Annualized = 'Annualized'
    Total = 'Total'
    
    def __repr__(self):
        return self.value


class AssetIdPriceable(Priceable):
        
    """An object to hold assetId when it can't be passed as a string."""

    @camel_case_translate
    def __init__(
        self,
        asset_id: str = None,
        name: str = None
    ):        
        super().__init__()
        self.asset_id = asset_id
        self.name = name

    @property
    def asset_id(self) -> str:
        """Marquee unique asset identifier."""
        return self.__asset_id

    @asset_id.setter
    def asset_id(self, value: str):
        self._property_changed('asset_id')
        self.__asset_id = value        


class CSLDate(Base):
        
    """A date"""

    @camel_case_translate
    def __init__(
        self,
        date_value: datetime.date = None,
        name: str = None
    ):        
        super().__init__()
        self.date_value = date_value
        self.name = name

    @property
    def date_value(self) -> datetime.date:
        """ISO 8601-formatted date"""
        return self.__date_value

    @date_value.setter
    def date_value(self, value: datetime.date):
        self._property_changed('date_value')
        self.__date_value = value        


class CSLDouble(Base):
        
    """A double"""

    @camel_case_translate
    def __init__(
        self,
        double_value: float = None,
        name: str = None
    ):        
        super().__init__()
        self.double_value = double_value
        self.name = name

    @property
    def double_value(self) -> float:
        """The value"""
        return self.__double_value

    @double_value.setter
    def double_value(self, value: float):
        self._property_changed('double_value')
        self.__double_value = value        


class CSLFXCross(Base):
        
    """An FX cross"""

    @camel_case_translate
    def __init__(
        self,
        string_value: str = None,
        name: str = None
    ):        
        super().__init__()
        self.string_value = string_value
        self.name = name

    @property
    def string_value(self) -> str:
        """Currency pair"""
        return self.__string_value

    @string_value.setter
    def string_value(self, value: str):
        self._property_changed('string_value')
        self.__string_value = value        


class CSLIndex(Base):
        
    """An index"""

    @camel_case_translate
    def __init__(
        self,
        string_value: str = None,
        name: str = None
    ):        
        super().__init__()
        self.string_value = string_value
        self.name = name

    @property
    def string_value(self) -> str:
        """Display name of the asset"""
        return self.__string_value

    @string_value.setter
    def string_value(self, value: str):
        self._property_changed('string_value')
        self.__string_value = value        


class CSLSimpleSchedule(Base):
        
    """A fixing date, settlement date pair"""

    @camel_case_translate
    def __init__(
        self,
        fixing_date: datetime.date = None,
        settlement_date: datetime.date = None,
        name: str = None
    ):        
        super().__init__()
        self.fixing_date = fixing_date
        self.settlement_date = settlement_date
        self.name = name

    @property
    def fixing_date(self) -> datetime.date:
        """ISO 8601-formatted date"""
        return self.__fixing_date

    @fixing_date.setter
    def fixing_date(self, value: datetime.date):
        self._property_changed('fixing_date')
        self.__fixing_date = value        

    @property
    def settlement_date(self) -> datetime.date:
        """ISO 8601-formatted date"""
        return self.__settlement_date

    @settlement_date.setter
    def settlement_date(self, value: datetime.date):
        self._property_changed('settlement_date')
        self.__settlement_date = value        


class CSLStock(Base):
        
    """A stock"""

    @camel_case_translate
    def __init__(
        self,
        string_value: str = None,
        name: str = None
    ):        
        super().__init__()
        self.string_value = string_value
        self.name = name

    @property
    def string_value(self) -> str:
        """Display name of the asset"""
        return self.__string_value

    @string_value.setter
    def string_value(self, value: str):
        self._property_changed('string_value')
        self.__string_value = value        


class CSLString(Base):
        
    """A string"""

    @camel_case_translate
    def __init__(
        self,
        string_value: str = None,
        name: str = None
    ):        
        super().__init__()
        self.string_value = string_value
        self.name = name

    @property
    def string_value(self) -> str:
        """The value"""
        return self.__string_value

    @string_value.setter
    def string_value(self, value: str):
        self._property_changed('string_value')
        self.__string_value = value        


class CSLSymCaseNamedParam(Base):
        
    """A named case-sensitive string."""

    @camel_case_translate
    def __init__(
        self,
        sym_case_value: str = None,
        name: str = None
    ):        
        super().__init__()
        self.sym_case_value = sym_case_value
        self.name = name

    @property
    def sym_case_value(self) -> str:
        """A case-sensitive string"""
        return self.__sym_case_value

    @sym_case_value.setter
    def sym_case_value(self, value: str):
        self._property_changed('sym_case_value')
        self.__sym_case_value = value        

    @property
    def name(self) -> str:
        """A name for the symbol"""
        return self.__name

    @name.setter
    def name(self, value: str):
        self._property_changed('name')
        self.__name = value        


class CompositeScenario(Base):
        
    """A scenario for composing scenarios"""

    @camel_case_translate
    def __init__(
        self,
        scenarios: tuple = None,
        name: str = None
    ):        
        super().__init__()
        self.scenarios = scenarios
        self.name = name

    @property
    def scenario_type(self) -> str:
        """CompositeScenario"""
        return 'CompositeScenario'        

    @property
    def scenarios(self) -> tuple:
        """The scenarios, in order"""
        return self.__scenarios

    @scenarios.setter
    def scenarios(self, value: tuple):
        self._property_changed('scenarios')
        self.__scenarios = value        


class ISelectNewUnit(Base):
        
    @camel_case_translate
    def __init__(
        self,
        id_: str,
        new_units: float = None,
        name: str = None
    ):        
        super().__init__()
        self.__id = id_
        self.new_units = new_units
        self.name = name

    @property
    def id(self) -> str:
        return self.__id

    @id.setter
    def id(self, value: str):
        self._property_changed('id')
        self.__id = value        

    @property
    def new_units(self) -> float:
        return self.__new_units

    @new_units.setter
    def new_units(self, value: float):
        self._property_changed('new_units')
        self.__new_units = value        


class ISelectNewWeight(Base):
        
    @camel_case_translate
    def __init__(
        self,
        id_: str,
        new_weight: float = None,
        name: str = None
    ):        
        super().__init__()
        self.__id = id_
        self.new_weight = new_weight
        self.name = name

    @property
    def id(self) -> str:
        return self.__id

    @id.setter
    def id(self, value: str):
        self._property_changed('id')
        self.__id = value        

    @property
    def new_weight(self) -> float:
        return self.__new_weight

    @new_weight.setter
    def new_weight(self, value: float):
        self._property_changed('new_weight')
        self.__new_weight = value        


class Identifier(Base):
        
    @camel_case_translate
    def __init__(
        self,
        type_: str = None,
        value: str = None,
        name: str = None
    ):        
        super().__init__()
        self.__type = type_
        self.value = value
        self.name = name

    @property
    def type(self) -> str:
        """Identifier type code"""
        return self.__type

    @type.setter
    def type(self, value: str):
        self._property_changed('type')
        self.__type = value        

    @property
    def value(self) -> str:
        """Identifier value"""
        return self.__value

    @value.setter
    def value(self, value: str):
        self._property_changed('value')
        self.__value = value        


class LiborFallbackScenario(Scenario):
        
    """A scenario to change the libor rate to RFR + Spread after Dec2021 in the index
       curve"""

    @camel_case_translate
    def __init__(
        self,
        date: datetime.date = None,
        fallback_type: str = 'RFR',
        discounting: bool = False,
        cash_flows: bool = True,
        name: str = None
    ):        
        super().__init__()
        self.date = date
        self.fallback_type = fallback_type
        self.discounting = discounting
        self.cash_flows = cash_flows
        self.name = name

    @property
    def scenario_type(self) -> str:
        """LiborFallbackScenario"""
        return 'LiborFallbackScenario'        

    @property
    def date(self) -> datetime.date:
        """Announce Date For the Libor Fallback"""
        return self.__date

    @date.setter
    def date(self, value: datetime.date):
        self._property_changed('date')
        self.__date = value        

    @property
    def fallback_type(self) -> str:
        """Different Rules for Libor Fallback"""
        return self.__fallback_type

    @fallback_type.setter
    def fallback_type(self, value: str):
        self._property_changed('fallback_type')
        self.__fallback_type = value        

    @property
    def discounting(self) -> bool:
        """If True, use RFR Discounting, otherwise continue to use libor discounting"""
        return self.__discounting

    @discounting.setter
    def discounting(self, value: bool):
        self._property_changed('discounting')
        self.__discounting = value        

    @property
    def cash_flows(self) -> bool:
        """If True, use RFR + Spread when projecting cash flows, otherwise continue to use
           libor"""
        return self.__cash_flows

    @cash_flows.setter
    def cash_flows(self, value: bool):
        self._property_changed('cash_flows')
        self.__cash_flows = value        


class Link(Base):
        
    """Hyperlink"""

    @camel_case_translate
    def __init__(
        self,
        title: str = None,
        source: str = None,
        name: str = None
    ):        
        super().__init__()
        self.title = title
        self.source = source
        self.name = name

    @property
    def title(self) -> str:
        """display text"""
        return self.__title

    @title.setter
    def title(self, value: str):
        self._property_changed('title')
        self.__title = value        

    @property
    def source(self) -> str:
        """link"""
        return self.__source

    @source.setter
    def source(self, value: str):
        self._property_changed('source')
        self.__source = value        


class LiquidityReportParameters(Base):
        
    """Parameters to be used on liquidity reports"""

    @camel_case_translate
    def __init__(
        self,
        title: str = None,
        email: str = None,
        trading_desk: str = None,
        name: str = None
    ):        
        super().__init__()
        self.title = title
        self.email = email
        self.trading_desk = trading_desk
        self.name = name

    @property
    def title(self) -> str:
        """Report title"""
        return self.__title

    @title.setter
    def title(self, value: str):
        self._property_changed('title')
        self.__title = value        

    @property
    def email(self) -> str:
        return self.__email

    @email.setter
    def email(self, value: str):
        self._property_changed('email')
        self.__email = value        

    @property
    def trading_desk(self) -> str:
        return self.__trading_desk

    @trading_desk.setter
    def trading_desk(self, value: str):
        self._property_changed('trading_desk')
        self.__trading_desk = value        


class MarketDataCoordinate(Base):
        
    """Object representation of a market data coordinate"""

    @camel_case_translate
    def __init__(
        self,
        mkt_type: str = None,
        mkt_asset: str = None,
        mkt_class: str = None,
        mkt_point: Tuple[str, ...] = None,
        mkt_quoting_style: str = None,
        name: str = None
    ):        
        super().__init__()
        self.mkt_type = mkt_type
        self.mkt_asset = mkt_asset
        self.mkt_class = mkt_class
        self.mkt_point = mkt_point
        self.mkt_quoting_style = mkt_quoting_style
        self.name = name

    @property
    def mkt_type(self) -> str:
        """The MDAPI Type, e.g. IR, IR BASIS, FX, FX Vol"""
        return self.__mkt_type

    @mkt_type.setter
    def mkt_type(self, value: str):
        self._property_changed('mkt_type')
        self.__mkt_type = value        

    @property
    def mkt_asset(self) -> str:
        """The MDAPI Asset, e.g. USD, EUR-EURIBOR-Telerate, WTI"""
        return self.__mkt_asset

    @mkt_asset.setter
    def mkt_asset(self, value: str):
        self._property_changed('mkt_asset')
        self.__mkt_asset = value        

    @property
    def mkt_class(self) -> str:
        """The MDAPI Class, e.g. Swap, Cash."""
        return self.__mkt_class

    @mkt_class.setter
    def mkt_class(self, value: str):
        self._property_changed('mkt_class')
        self.__mkt_class = value        

    @property
    def mkt_point(self) -> Tuple[str, ...]:
        """The MDAPI Point, e.g. 3m, 10y, 11y, Dec19"""
        return self.__mkt_point

    @mkt_point.setter
    def mkt_point(self, value: Tuple[str, ...]):
        self._property_changed('mkt_point')
        self.__mkt_point = value        

    @property
    def mkt_quoting_style(self) -> str:
        return self.__mkt_quoting_style

    @mkt_quoting_style.setter
    def mkt_quoting_style(self, value: str):
        self._property_changed('mkt_quoting_style')
        self.__mkt_quoting_style = value        


class Op(Base):
        
    """Operations for searches."""

    @camel_case_translate
    def __init__(
        self,
        gte: Union[datetime.date, float] = None,
        lte: Union[datetime.date, float] = None,
        lt: Union[datetime.date, float] = None,
        gt: Union[datetime.date, float] = None,
        name: str = None
    ):        
        super().__init__()
        self.gte = gte
        self.lte = lte
        self.lt = lt
        self.gt = gt
        self.name = name

    @property
    def gte(self) -> Union[datetime.date, float]:
        """search for values greater than or equal."""
        return self.__gte

    @gte.setter
    def gte(self, value: Union[datetime.date, float]):
        self._property_changed('gte')
        self.__gte = value        

    @property
    def lte(self) -> Union[datetime.date, float]:
        """search for values less than or equal to."""
        return self.__lte

    @lte.setter
    def lte(self, value: Union[datetime.date, float]):
        self._property_changed('lte')
        self.__lte = value        

    @property
    def lt(self) -> Union[datetime.date, float]:
        """search for values less than."""
        return self.__lt

    @lt.setter
    def lt(self, value: Union[datetime.date, float]):
        self._property_changed('lt')
        self.__lt = value        

    @property
    def gt(self) -> Union[datetime.date, float]:
        """search for values greater than."""
        return self.__gt

    @gt.setter
    def gt(self, value: Union[datetime.date, float]):
        self._property_changed('gt')
        self.__gt = value        


class PCOBenchmarkOptions(Base):
        
    """Parameters required for PCO Benchmark"""

    @camel_case_translate
    def __init__(
        self,
        name: str = None,
        target_ratio: str = None
    ):        
        super().__init__()
        self.name = name
        self.target_ratio = target_ratio

    @property
    def name(self) -> str:
        """Benchmark name"""
        return self.__name

    @name.setter
    def name(self, value: str):
        self._property_changed('name')
        self.__name = value        

    @property
    def target_ratio(self) -> str:
        return self.__target_ratio

    @target_ratio.setter
    def target_ratio(self, value: str):
        self._property_changed('target_ratio')
        self.__target_ratio = value        


class PCOExposureAdjustments(Base):
        
    """Parameters required for PCO Exposure Adjustments"""

    @camel_case_translate
    def __init__(
        self,
        pco_number_as_string: str = None,
        net_subscription_redemption: str = None,
        net_subscription_redemption_limits: Tuple[str, ...] = None,
        adjustment_vs_subscription_redemption: str = None,
        adjustment_vs_subscription_redemption_limits: Tuple[str, ...] = None,
        name: str = None
    ):        
        super().__init__()
        self.pco_number_as_string = pco_number_as_string
        self.net_subscription_redemption = net_subscription_redemption
        self.net_subscription_redemption_limits = net_subscription_redemption_limits
        self.adjustment_vs_subscription_redemption = adjustment_vs_subscription_redemption
        self.adjustment_vs_subscription_redemption_limits = adjustment_vs_subscription_redemption_limits
        self.name = name

    @property
    def pco_number_as_string(self) -> str:
        return self.__pco_number_as_string

    @pco_number_as_string.setter
    def pco_number_as_string(self, value: str):
        self._property_changed('pco_number_as_string')
        self.__pco_number_as_string = value        

    @property
    def net_subscription_redemption(self) -> str:
        """net subscription and redemption"""
        return self.__net_subscription_redemption

    @net_subscription_redemption.setter
    def net_subscription_redemption(self, value: str):
        self._property_changed('net_subscription_redemption')
        self.__net_subscription_redemption = value        

    @property
    def net_subscription_redemption_limits(self) -> Tuple[str, ...]:
        """Upper and lower limit of subscription and redemption adjustment"""
        return self.__net_subscription_redemption_limits

    @net_subscription_redemption_limits.setter
    def net_subscription_redemption_limits(self, value: Tuple[str, ...]):
        self._property_changed('net_subscription_redemption_limits')
        self.__net_subscription_redemption_limits = value        

    @property
    def adjustment_vs_subscription_redemption(self) -> str:
        """subscription and redemption adjustment"""
        return self.__adjustment_vs_subscription_redemption

    @adjustment_vs_subscription_redemption.setter
    def adjustment_vs_subscription_redemption(self, value: str):
        self._property_changed('adjustment_vs_subscription_redemption')
        self.__adjustment_vs_subscription_redemption = value        

    @property
    def adjustment_vs_subscription_redemption_limits(self) -> Tuple[str, ...]:
        """Upper and lower limit of subscription and redemption adjustment"""
        return self.__adjustment_vs_subscription_redemption_limits

    @adjustment_vs_subscription_redemption_limits.setter
    def adjustment_vs_subscription_redemption_limits(self, value: Tuple[str, ...]):
        self._property_changed('adjustment_vs_subscription_redemption_limits')
        self.__adjustment_vs_subscription_redemption_limits = value        


class PCOMtMHistoricalData(Base):
        
    """Parameters required for PCO Unrealised Mark to Market Historical Data"""

    @camel_case_translate
    def __init__(
        self,
        value: str = None,
        timestamp: datetime.datetime = None,
        name: str = None
    ):        
        super().__init__()
        self.value = value
        self.timestamp = timestamp
        self.name = name

    @property
    def value(self) -> str:
        """Indicative unrealised mark to market value"""
        return self.__value

    @value.setter
    def value(self, value: str):
        self._property_changed('value')
        self.__value = value        

    @property
    def timestamp(self) -> datetime.datetime:
        """Timestamp of unrealised mark to market of open trade for a currency"""
        return self.__timestamp

    @timestamp.setter
    def timestamp(self, value: datetime.datetime):
        self._property_changed('timestamp')
        self.__timestamp = value        


class PCOSettlementsData(Base):
        
    """Parameters required for a PCO Settlement"""

    @camel_case_translate
    def __init__(
        self,
        timestamp: datetime.datetime = None,
        settlement: str = None,
        name: str = None
    ):        
        super().__init__()
        self.timestamp = timestamp
        self.settlement = settlement
        self.name = name

    @property
    def timestamp(self) -> datetime.datetime:
        """Timestamp of settlement"""
        return self.__timestamp

    @timestamp.setter
    def timestamp(self, value: datetime.datetime):
        self._property_changed('timestamp')
        self.__timestamp = value        

    @property
    def settlement(self) -> str:
        """Settlement value"""
        return self.__settlement

    @settlement.setter
    def settlement(self, value: str):
        self._property_changed('settlement')
        self.__settlement = value        


class PCOTargetDeviationData(Base):
        
    """Parameters required for a Target Deviation data"""

    @camel_case_translate
    def __init__(
        self,
        value: str = None,
        timestamp: datetime.datetime = None,
        name: str = None
    ):        
        super().__init__()
        self.value = value
        self.timestamp = timestamp
        self.name = name

    @property
    def value(self) -> str:
        """Target deviation  value"""
        return self.__value

    @value.setter
    def value(self, value: str):
        self._property_changed('value')
        self.__value = value        

    @property
    def timestamp(self) -> datetime.datetime:
        """Timestamp"""
        return self.__timestamp

    @timestamp.setter
    def timestamp(self, value: datetime.datetime):
        self._property_changed('timestamp')
        self.__timestamp = value        


class PerformanceStats(Base):
        
    """Performance statistics."""

    @camel_case_translate
    def __init__(
        self,
        alpha: float = None,
        annualized_return: float = None,
        annualized_volatility: float = None,
        average_return: float = None,
        average_value: float = None,
        average_volume_last_month: float = None,
        best_month: float = None,
        best_month_date: datetime.date = None,
        beta: float = None,
        close_price: float = None,
        correlation: float = None,
        current_value: float = None,
        drawdown_over_return: float = None,
        high: float = None,
        high_eod: float = None,
        last_change: float = None,
        last_change_pct: float = None,
        last_date: datetime.date = None,
        last_value: float = None,
        low: float = None,
        low_eod: float = None,
        max_draw_down: float = None,
        max_draw_down_duration: int = None,
        open_price: float = None,
        positive_months: float = None,
        sharpe_ratio: float = None,
        sortino_ratio: float = None,
        worst_month: float = None,
        worst_month_date: datetime.date = None,
        total_return: float = None,
        volume: float = None,
        name: str = None
    ):        
        super().__init__()
        self.alpha = alpha
        self.annualized_return = annualized_return
        self.annualized_volatility = annualized_volatility
        self.average_return = average_return
        self.average_value = average_value
        self.average_volume_last_month = average_volume_last_month
        self.best_month = best_month
        self.best_month_date = best_month_date
        self.beta = beta
        self.close_price = close_price
        self.correlation = correlation
        self.current_value = current_value
        self.drawdown_over_return = drawdown_over_return
        self.high = high
        self.high_eod = high_eod
        self.last_change = last_change
        self.last_change_pct = last_change_pct
        self.last_date = last_date
        self.last_value = last_value
        self.low = low
        self.low_eod = low_eod
        self.max_draw_down = max_draw_down
        self.max_draw_down_duration = max_draw_down_duration
        self.open_price = open_price
        self.positive_months = positive_months
        self.sharpe_ratio = sharpe_ratio
        self.sortino_ratio = sortino_ratio
        self.worst_month = worst_month
        self.worst_month_date = worst_month_date
        self.total_return = total_return
        self.volume = volume
        self.name = name

    @property
    def alpha(self) -> float:
        """Measure of performance compared to a market benchmark."""
        return self.__alpha

    @alpha.setter
    def alpha(self, value: float):
        self._property_changed('alpha')
        self.__alpha = value        

    @property
    def annualized_return(self) -> float:
        """Compounded Annual Growth Rate (CAGR)."""
        return self.__annualized_return

    @annualized_return.setter
    def annualized_return(self, value: float):
        self._property_changed('annualized_return')
        self.__annualized_return = value        

    @property
    def annualized_volatility(self) -> float:
        """Standard deviation of daily returns, annualized."""
        return self.__annualized_volatility

    @annualized_volatility.setter
    def annualized_volatility(self, value: float):
        self._property_changed('annualized_volatility')
        self.__annualized_volatility = value        

    @property
    def average_return(self) -> float:
        """Average of the performance returns."""
        return self.__average_return

    @average_return.setter
    def average_return(self, value: float):
        self._property_changed('average_return')
        self.__average_return = value        

    @property
    def average_value(self) -> float:
        """Average value."""
        return self.__average_value

    @average_value.setter
    def average_value(self, value: float):
        self._property_changed('average_value')
        self.__average_value = value        

    @property
    def average_volume_last_month(self) -> float:
        """30 day average volume."""
        return self.__average_volume_last_month

    @average_volume_last_month.setter
    def average_volume_last_month(self, value: float):
        self._property_changed('average_volume_last_month')
        self.__average_volume_last_month = value        

    @property
    def best_month(self) -> float:
        """Best monthly return (first to last day of month)."""
        return self.__best_month

    @best_month.setter
    def best_month(self, value: float):
        self._property_changed('best_month')
        self.__best_month = value        

    @property
    def best_month_date(self) -> datetime.date:
        """Best monthly return date (first to last day of month)."""
        return self.__best_month_date

    @best_month_date.setter
    def best_month_date(self, value: datetime.date):
        self._property_changed('best_month_date')
        self.__best_month_date = value        

    @property
    def beta(self) -> float:
        """Measure of volatility compared to a market benchmark."""
        return self.__beta

    @beta.setter
    def beta(self, value: float):
        self._property_changed('beta')
        self.__beta = value        

    @property
    def close_price(self) -> float:
        """previous close price."""
        return self.__close_price

    @close_price.setter
    def close_price(self, value: float):
        self._property_changed('close_price')
        self.__close_price = value        

    @property
    def correlation(self) -> float:
        """Pearson correlation."""
        return self.__correlation

    @correlation.setter
    def correlation(self, value: float):
        self._property_changed('correlation')
        self.__correlation = value        

    @property
    def current_value(self) -> float:
        """Current value."""
        return self.__current_value

    @current_value.setter
    def current_value(self, value: float):
        self._property_changed('current_value')
        self.__current_value = value        

    @property
    def drawdown_over_return(self) -> float:
        """Maximum drawdown divided by annualized return."""
        return self.__drawdown_over_return

    @drawdown_over_return.setter
    def drawdown_over_return(self, value: float):
        self._property_changed('drawdown_over_return')
        self.__drawdown_over_return = value        

    @property
    def high(self) -> float:
        """Highest real time price for the previous 24 hours."""
        return self.__high

    @high.setter
    def high(self, value: float):
        self._property_changed('high')
        self.__high = value        

    @property
    def high_eod(self) -> float:
        """Highest end of day price."""
        return self.__high_eod

    @high_eod.setter
    def high_eod(self, value: float):
        self._property_changed('high_eod')
        self.__high_eod = value        

    @property
    def last_change(self) -> float:
        """Last published value."""
        return self.__last_change

    @last_change.setter
    def last_change(self, value: float):
        self._property_changed('last_change')
        self.__last_change = value        

    @property
    def last_change_pct(self) -> float:
        """Last change in percent."""
        return self.__last_change_pct

    @last_change_pct.setter
    def last_change_pct(self, value: float):
        self._property_changed('last_change_pct')
        self.__last_change_pct = value        

    @property
    def last_date(self) -> datetime.date:
        """Last publication date."""
        return self.__last_date

    @last_date.setter
    def last_date(self, value: datetime.date):
        self._property_changed('last_date')
        self.__last_date = value        

    @property
    def last_value(self) -> float:
        """Last published value."""
        return self.__last_value

    @last_value.setter
    def last_value(self, value: float):
        self._property_changed('last_value')
        self.__last_value = value        

    @property
    def low(self) -> float:
        """Lowest real time price for the previous 24 hours."""
        return self.__low

    @low.setter
    def low(self, value: float):
        self._property_changed('low')
        self.__low = value        

    @property
    def low_eod(self) -> float:
        """Lowest end of day price."""
        return self.__low_eod

    @low_eod.setter
    def low_eod(self, value: float):
        self._property_changed('low_eod')
        self.__low_eod = value        

    @property
    def max_draw_down(self) -> float:
        """Maximum peak to trough percentage drawdown."""
        return self.__max_draw_down

    @max_draw_down.setter
    def max_draw_down(self, value: float):
        self._property_changed('max_draw_down')
        self.__max_draw_down = value        

    @property
    def max_draw_down_duration(self) -> int:
        """Amount of time in days between beginning and end of drawdown."""
        return self.__max_draw_down_duration

    @max_draw_down_duration.setter
    def max_draw_down_duration(self, value: int):
        self._property_changed('max_draw_down_duration')
        self.__max_draw_down_duration = value        

    @property
    def open_price(self) -> float:
        """Open price."""
        return self.__open_price

    @open_price.setter
    def open_price(self, value: float):
        self._property_changed('open_price')
        self.__open_price = value        

    @property
    def positive_months(self) -> float:
        """Percentage of months that performed positively."""
        return self.__positive_months

    @positive_months.setter
    def positive_months(self, value: float):
        self._property_changed('positive_months')
        self.__positive_months = value        

    @property
    def sharpe_ratio(self) -> float:
        """Annualized return of the series minus risk free rate (accrued daily) divided by
           annual volatility."""
        return self.__sharpe_ratio

    @sharpe_ratio.setter
    def sharpe_ratio(self, value: float):
        self._property_changed('sharpe_ratio')
        self.__sharpe_ratio = value        

    @property
    def sortino_ratio(self) -> float:
        """Annualized return of the series minus risk free rate (accrued daily) divided by
           annual volatility of negative returns."""
        return self.__sortino_ratio

    @sortino_ratio.setter
    def sortino_ratio(self, value: float):
        self._property_changed('sortino_ratio')
        self.__sortino_ratio = value        

    @property
    def worst_month(self) -> float:
        """Worst monthly return (first to last day of month)."""
        return self.__worst_month

    @worst_month.setter
    def worst_month(self, value: float):
        self._property_changed('worst_month')
        self.__worst_month = value        

    @property
    def worst_month_date(self) -> datetime.date:
        """Worst monthly return date (first to last day of month)."""
        return self.__worst_month_date

    @worst_month_date.setter
    def worst_month_date(self, value: datetime.date):
        self._property_changed('worst_month_date')
        self.__worst_month_date = value        

    @property
    def total_return(self) -> float:
        """Total return."""
        return self.__total_return

    @total_return.setter
    def total_return(self, value: float):
        self._property_changed('total_return')
        self.__total_return = value        

    @property
    def volume(self) -> float:
        """volume."""
        return self.__volume

    @volume.setter
    def volume(self, value: float):
        self._property_changed('volume')
        self.__volume = value        


class RiskRequestParameters(Base):
        
    """Parameters for the risk request"""

    @camel_case_translate
    def __init__(
        self,
        csa_term: str = None,
        raw_results: bool = False,
        use_historical_diddles_only: bool = False,
        name: str = None
    ):        
        super().__init__()
        self.csa_term = csa_term
        self.raw_results = raw_results
        self.use_historical_diddles_only = use_historical_diddles_only
        self.name = name

    @property
    def csa_term(self) -> str:
        """The CSA Term for CSA specific discounting, e.g. EUR-1"""
        return self.__csa_term

    @csa_term.setter
    def csa_term(self, value: str):
        self._property_changed('csa_term')
        self.__csa_term = value        

    @property
    def raw_results(self) -> bool:
        return self.__raw_results

    @raw_results.setter
    def raw_results(self, value: bool):
        self._property_changed('raw_results')
        self.__raw_results = value        

    @property
    def use_historical_diddles_only(self) -> bool:
        """Enables a backward compatible pricing mode"""
        return self.__use_historical_diddles_only

    @use_historical_diddles_only.setter
    def use_historical_diddles_only(self, value: bool):
        self._property_changed('use_historical_diddles_only')
        self.__use_historical_diddles_only = value        


class SimpleParty(Base):
        
    @camel_case_translate
    def __init__(
        self,
        party_type: str = None,
        party_name: str = None,
        party_book: str = None,
        name: str = None
    ):        
        super().__init__()
        self.party_type = party_type
        self.party_name = party_name
        self.party_book = party_book
        self.name = name

    @property
    def party_type(self) -> str:
        return self.__party_type

    @party_type.setter
    def party_type(self, value: str):
        self._property_changed('party_type')
        self.__party_type = value        

    @property
    def party_name(self) -> str:
        return self.__party_name

    @party_name.setter
    def party_name(self, value: str):
        self._property_changed('party_name')
        self.__party_name = value        

    @property
    def party_book(self) -> str:
        return self.__party_book

    @party_book.setter
    def party_book(self, value: str):
        self._property_changed('party_book')
        self.__party_book = value        


class TimeFilter(Base):
        
    """Filter to restrict data to a range of hours per day."""

    @camel_case_translate
    def __init__(
        self,
        start_hours: str,
        end_hours: str,
        time_zone: str,
        name: str = None
    ):        
        super().__init__()
        self.start_hours = start_hours
        self.end_hours = end_hours
        self.time_zone = time_zone
        self.name = name

    @property
    def start_hours(self) -> str:
        """Start hours in the format HH::MM::SS after which the data will be shown. Data is
           inclusive of the startHours value."""
        return self.__start_hours

    @start_hours.setter
    def start_hours(self, value: str):
        self._property_changed('start_hours')
        self.__start_hours = value        

    @property
    def end_hours(self) -> str:
        """End hours in the format HH::MM::SS up to which the data will be shown. Data is
           exclusive of the endHours value with a precision of 1 second."""
        return self.__end_hours

    @end_hours.setter
    def end_hours(self, value: str):
        self._property_changed('end_hours')
        self.__end_hours = value        

    @property
    def time_zone(self) -> str:
        """The time zone with respect to which the start and end hours will be applied
           (must be a valid IANA TimeZone identifier)."""
        return self.__time_zone

    @time_zone.setter
    def time_zone(self, value: str):
        self._property_changed('time_zone')
        self.__time_zone = value        


class WeightedPosition(Base):
        
    @camel_case_translate
    def __init__(
        self,
        asset_id: str,
        weight: float,
        name: str = None
    ):        
        super().__init__()
        self.asset_id = asset_id
        self.weight = weight
        self.name = name

    @property
    def asset_id(self) -> str:
        """Marquee unique identifier"""
        return self.__asset_id

    @asset_id.setter
    def asset_id(self, value: str):
        self._property_changed('asset_id')
        self.__asset_id = value        

    @property
    def weight(self) -> float:
        """Relative net weight of the given position"""
        return self.__weight

    @weight.setter
    def weight(self, value: float):
        self._property_changed('weight')
        self.__weight = value        


class XRef(Priceable):
        
    @camel_case_translate
    def __init__(
        self,
        ric: str = None,
        rcic: str = None,
        eid: str = None,
        gsideid: str = None,
        gsid: str = None,
        gsid_equivalent: str = None,
        cid: str = None,
        bbid: str = None,
        bcid: str = None,
        delisted: str = None,
        bbid_equivalent: str = None,
        cusip: str = None,
        gss: str = None,
        isin: str = None,
        jsn: str = None,
        prime_id: str = None,
        sedol: str = None,
        ticker: str = None,
        valoren: str = None,
        wpk: str = None,
        gsn: str = None,
        sec_name: str = None,
        cross: str = None,
        simon_id: str = None,
        em_id: str = None,
        cm_id: str = None,
        lms_id: str = None,
        tdapi: str = None,
        mdapi: str = None,
        mdapi_class: str = None,
        mic: str = None,
        sf_id: str = None,
        dollar_cross: str = None,
        mq_symbol: str = None,
        primary_country_ric: str = None,
        pnode_id: str = None,
        wi_id: str = None,
        ps_id: str = None,
        pl_id: str = None,
        exchange_code: str = None,
        plot_id: str = None,
        cins: str = None,
        bbgid: str = None,
        name: str = None
    ):        
        super().__init__()
        self.ric = ric
        self.rcic = rcic
        self.eid = eid
        self.gsideid = gsideid
        self.gsid = gsid
        self.gsid_equivalent = gsid_equivalent
        self.cid = cid
        self.bbid = bbid
        self.bcid = bcid
        self.delisted = delisted
        self.bbid_equivalent = bbid_equivalent
        self.cusip = cusip
        self.gss = gss
        self.isin = isin
        self.jsn = jsn
        self.prime_id = prime_id
        self.sedol = sedol
        self.ticker = ticker
        self.valoren = valoren
        self.wpk = wpk
        self.gsn = gsn
        self.sec_name = sec_name
        self.cross = cross
        self.simon_id = simon_id
        self.em_id = em_id
        self.cm_id = cm_id
        self.lms_id = lms_id
        self.tdapi = tdapi
        self.mdapi = mdapi
        self.mdapi_class = mdapi_class
        self.mic = mic
        self.sf_id = sf_id
        self.dollar_cross = dollar_cross
        self.mq_symbol = mq_symbol
        self.primary_country_ric = primary_country_ric
        self.pnode_id = pnode_id
        self.wi_id = wi_id
        self.ps_id = ps_id
        self.pl_id = pl_id
        self.exchange_code = exchange_code
        self.plot_id = plot_id
        self.cins = cins
        self.bbgid = bbgid
        self.name = name

    @property
    def ric(self) -> str:
        """Reuters Instrument Code identifier"""
        return self.__ric

    @ric.setter
    def ric(self, value: str):
        self._property_changed('ric')
        self.__ric = value        

    @property
    def rcic(self) -> str:
        """Reuters Composite Instrument Code Identifier"""
        return self.__rcic

    @rcic.setter
    def rcic(self, value: str):
        self._property_changed('rcic')
        self.__rcic = value        

    @property
    def eid(self) -> str:
        """EID Identifier"""
        return self.__eid

    @eid.setter
    def eid(self, value: str):
        self._property_changed('eid')
        self.__eid = value        

    @property
    def gsideid(self) -> str:
        """GSID_EID Identifier"""
        return self.__gsideid

    @gsideid.setter
    def gsideid(self, value: str):
        self._property_changed('gsideid')
        self.__gsideid = value        

    @property
    def gsid(self) -> str:
        """GSID Identifier"""
        return self.__gsid

    @gsid.setter
    def gsid(self, value: str):
        self._property_changed('gsid')
        self.__gsid = value        

    @property
    def gsid_equivalent(self) -> str:
        """GSID Equivalent Identifier"""
        return self.__gsid_equivalent

    @gsid_equivalent.setter
    def gsid_equivalent(self, value: str):
        self._property_changed('gsid_equivalent')
        self.__gsid_equivalent = value        

    @property
    def cid(self) -> str:
        """Company Id Identifier"""
        return self.__cid

    @cid.setter
    def cid(self, value: str):
        self._property_changed('cid')
        self.__cid = value        

    @property
    def bbid(self) -> str:
        """Bloomberg Id Identifier"""
        return self.__bbid

    @bbid.setter
    def bbid(self, value: str):
        self._property_changed('bbid')
        self.__bbid = value        

    @property
    def bcid(self) -> str:
        """Bloomberg Composite Identifier"""
        return self.__bcid

    @bcid.setter
    def bcid(self, value: str):
        self._property_changed('bcid')
        self.__bcid = value        

    @property
    def delisted(self) -> str:
        """Whether an asset has been delisted"""
        return self.__delisted

    @delisted.setter
    def delisted(self, value: str):
        self._property_changed('delisted')
        self.__delisted = value        

    @property
    def bbid_equivalent(self) -> str:
        """Bloomberg Equivalent Identifier"""
        return self.__bbid_equivalent

    @bbid_equivalent.setter
    def bbid_equivalent(self, value: str):
        self._property_changed('bbid_equivalent')
        self.__bbid_equivalent = value        

    @property
    def cusip(self) -> str:
        """Cusip Identifier"""
        return self.__cusip

    @cusip.setter
    def cusip(self, value: str):
        self._property_changed('cusip')
        self.__cusip = value        

    @property
    def gss(self) -> str:
        """GS Symbol identifier"""
        return self.__gss

    @gss.setter
    def gss(self, value: str):
        self._property_changed('gss')
        self.__gss = value        

    @property
    def isin(self) -> str:
        """International Security Number"""
        return self.__isin

    @isin.setter
    def isin(self, value: str):
        self._property_changed('isin')
        self.__isin = value        

    @property
    def jsn(self) -> str:
        """Japan Security Number"""
        return self.__jsn

    @jsn.setter
    def jsn(self, value: str):
        self._property_changed('jsn')
        self.__jsn = value        

    @property
    def prime_id(self) -> str:
        """PrimeID Identifier"""
        return self.__prime_id

    @prime_id.setter
    def prime_id(self, value: str):
        self._property_changed('prime_id')
        self.__prime_id = value        

    @property
    def sedol(self) -> str:
        """Sedol Identifier"""
        return self.__sedol

    @sedol.setter
    def sedol(self, value: str):
        self._property_changed('sedol')
        self.__sedol = value        

    @property
    def ticker(self) -> str:
        """Ticker Identifier"""
        return self.__ticker

    @ticker.setter
    def ticker(self, value: str):
        self._property_changed('ticker')
        self.__ticker = value        

    @property
    def valoren(self) -> str:
        """Valoren Identifier"""
        return self.__valoren

    @valoren.setter
    def valoren(self, value: str):
        self._property_changed('valoren')
        self.__valoren = value        

    @property
    def wpk(self) -> str:
        """Wertpapier Kenn-Nummer"""
        return self.__wpk

    @wpk.setter
    def wpk(self, value: str):
        self._property_changed('wpk')
        self.__wpk = value        

    @property
    def gsn(self) -> str:
        """Goldman Sachs internal product number"""
        return self.__gsn

    @gsn.setter
    def gsn(self, value: str):
        self._property_changed('gsn')
        self.__gsn = value        

    @property
    def sec_name(self) -> str:
        """Internal Goldman Sachs security name"""
        return self.__sec_name

    @sec_name.setter
    def sec_name(self, value: str):
        self._property_changed('sec_name')
        self.__sec_name = value        

    @property
    def cross(self) -> str:
        """Cross identifier"""
        return self.__cross

    @cross.setter
    def cross(self, value: str):
        self._property_changed('cross')
        self.__cross = value        

    @property
    def simon_id(self) -> str:
        """SIMON product identifier"""
        return self.__simon_id

    @simon_id.setter
    def simon_id(self, value: str):
        self._property_changed('simon_id')
        self.__simon_id = value        

    @property
    def em_id(self) -> str:
        """Entity Master Identifier"""
        return self.__em_id

    @em_id.setter
    def em_id(self, value: str):
        self._property_changed('em_id')
        self.__em_id = value        

    @property
    def cm_id(self) -> str:
        """Client Master Party Id"""
        return self.__cm_id

    @cm_id.setter
    def cm_id(self, value: str):
        self._property_changed('cm_id')
        self.__cm_id = value        

    @property
    def lms_id(self) -> str:
        """Listed Market Symbol"""
        return self.__lms_id

    @lms_id.setter
    def lms_id(self, value: str):
        self._property_changed('lms_id')
        self.__lms_id = value        

    @property
    def tdapi(self) -> str:
        """TDAPI Description"""
        return self.__tdapi

    @tdapi.setter
    def tdapi(self, value: str):
        self._property_changed('tdapi')
        self.__tdapi = value        

    @property
    def mdapi(self) -> str:
        """MDAPI Asset"""
        return self.__mdapi

    @mdapi.setter
    def mdapi(self, value: str):
        self._property_changed('mdapi')
        self.__mdapi = value        

    @property
    def mdapi_class(self) -> str:
        """MDAPI Asset Class"""
        return self.__mdapi_class

    @mdapi_class.setter
    def mdapi_class(self, value: str):
        self._property_changed('mdapi_class')
        self.__mdapi_class = value        

    @property
    def mic(self) -> str:
        """Market Identifier Code"""
        return self.__mic

    @mic.setter
    def mic(self, value: str):
        self._property_changed('mic')
        self.__mic = value        

    @property
    def sf_id(self) -> str:
        """SalesForce ID"""
        return self.__sf_id

    @sf_id.setter
    def sf_id(self, value: str):
        self._property_changed('sf_id')
        self.__sf_id = value        

    @property
    def dollar_cross(self) -> str:
        """USD cross identifier for a particular currency"""
        return self.__dollar_cross

    @dollar_cross.setter
    def dollar_cross(self, value: str):
        self._property_changed('dollar_cross')
        self.__dollar_cross = value        

    @property
    def mq_symbol(self) -> str:
        """Marquee Symbol for generic MQ entities"""
        return self.__mq_symbol

    @mq_symbol.setter
    def mq_symbol(self, value: str):
        self._property_changed('mq_symbol')
        self.__mq_symbol = value        

    @property
    def primary_country_ric(self) -> str:
        """Reuters Primary Country Instrument Code Identifier"""
        return self.__primary_country_ric

    @primary_country_ric.setter
    def primary_country_ric(self, value: str):
        self._property_changed('primary_country_ric')
        self.__primary_country_ric = value        

    @property
    def pnode_id(self) -> str:
        """Pricing node identifier sourced from Morningstar"""
        return self.__pnode_id

    @pnode_id.setter
    def pnode_id(self, value: str):
        self._property_changed('pnode_id')
        self.__pnode_id = value        

    @property
    def wi_id(self) -> str:
        """Weather Index Identifier"""
        return self.__wi_id

    @wi_id.setter
    def wi_id(self, value: str):
        self._property_changed('wi_id')
        self.__wi_id = value        

    @property
    def ps_id(self) -> str:
        """Platts Symbol"""
        return self.__ps_id

    @ps_id.setter
    def ps_id(self, value: str):
        self._property_changed('ps_id')
        self.__ps_id = value        

    @property
    def pl_id(self) -> str:
        """Platts Symbol Name"""
        return self.__pl_id

    @pl_id.setter
    def pl_id(self, value: str):
        self._property_changed('pl_id')
        self.__pl_id = value        

    @property
    def exchange_code(self) -> str:
        """EEX Exchange Code"""
        return self.__exchange_code

    @exchange_code.setter
    def exchange_code(self, value: str):
        self._property_changed('exchange_code')
        self.__exchange_code = value        

    @property
    def plot_id(self) -> str:
        """Plot Identifier"""
        return self.__plot_id

    @plot_id.setter
    def plot_id(self, value: str):
        self._property_changed('plot_id')
        self.__plot_id = value        

    @property
    def cins(self) -> str:
        """Cins Identifier"""
        return self.__cins

    @cins.setter
    def cins(self, value: str):
        self._property_changed('cins')
        self.__cins = value        

    @property
    def bbgid(self) -> str:
        """Bloomberg Global Identifier"""
        return self.__bbgid

    @bbgid.setter
    def bbgid(self, value: str):
        self._property_changed('bbgid')
        self.__bbgid = value        


class CSLCurrency(Base):
        
    """A currency"""

    @camel_case_translate
    def __init__(
        self,
        string_value: Union[Currency, str] = None,
        name: str = None
    ):        
        super().__init__()
        self.string_value = string_value
        self.name = name

    @property
    def string_value(self) -> Union[Currency, str]:
        """Currency, ISO 4217 currency code or exchange quote modifier (e.g. GBP vs GBp)"""
        return self.__string_value

    @string_value.setter
    def string_value(self, value: Union[Currency, str]):
        self._property_changed('string_value')
        self.__string_value = get_enum_value(Currency, value)        


class CSLDateArray(Base):
        
    """An array of dates"""

    @camel_case_translate
    def __init__(
        self,
        date_values: Tuple[CSLDate, ...] = None,
        name: str = None
    ):        
        super().__init__()
        self.date_values = date_values
        self.name = name

    @property
    def date_values(self) -> Tuple[CSLDate, ...]:
        """A date"""
        return self.__date_values

    @date_values.setter
    def date_values(self, value: Tuple[CSLDate, ...]):
        self._property_changed('date_values')
        self.__date_values = value        


class CSLDateArrayNamedParam(Base):
        
    """A named array of dates"""

    @camel_case_translate
    def __init__(
        self,
        date_values: Tuple[CSLDate, ...] = None,
        name: str = None
    ):        
        super().__init__()
        self.date_values = date_values
        self.name = name

    @property
    def date_values(self) -> Tuple[CSLDate, ...]:
        """A date"""
        return self.__date_values

    @date_values.setter
    def date_values(self, value: Tuple[CSLDate, ...]):
        self._property_changed('date_values')
        self.__date_values = value        

    @property
    def name(self) -> str:
        """A name for the array"""
        return self.__name

    @name.setter
    def name(self, value: str):
        self._property_changed('name')
        self.__name = value        


class CSLDoubleArray(Base):
        
    """An array of doubles"""

    @camel_case_translate
    def __init__(
        self,
        double_values: Tuple[CSLDouble, ...] = None,
        name: str = None
    ):        
        super().__init__()
        self.double_values = double_values
        self.name = name

    @property
    def double_values(self) -> Tuple[CSLDouble, ...]:
        """A double"""
        return self.__double_values

    @double_values.setter
    def double_values(self, value: Tuple[CSLDouble, ...]):
        self._property_changed('double_values')
        self.__double_values = value        


class CSLFXCrossArray(Base):
        
    """An array of FX crosses"""

    @camel_case_translate
    def __init__(
        self,
        fx_cross_values: Tuple[CSLFXCross, ...] = None,
        name: str = None
    ):        
        super().__init__()
        self.fx_cross_values = fx_cross_values
        self.name = name

    @property
    def fx_cross_values(self) -> Tuple[CSLFXCross, ...]:
        """An FX cross"""
        return self.__fx_cross_values

    @fx_cross_values.setter
    def fx_cross_values(self, value: Tuple[CSLFXCross, ...]):
        self._property_changed('fx_cross_values')
        self.__fx_cross_values = value        


class CSLIndexArray(Base):
        
    """An array of indices"""

    @camel_case_translate
    def __init__(
        self,
        index_values: Tuple[CSLIndex, ...] = None,
        name: str = None
    ):        
        super().__init__()
        self.index_values = index_values
        self.name = name

    @property
    def index_values(self) -> Tuple[CSLIndex, ...]:
        """An index"""
        return self.__index_values

    @index_values.setter
    def index_values(self, value: Tuple[CSLIndex, ...]):
        self._property_changed('index_values')
        self.__index_values = value        


class CSLSimpleScheduleArray(Base):
        
    """An array of simple schedules"""

    @camel_case_translate
    def __init__(
        self,
        simple_schedule_values: Tuple[CSLSimpleSchedule, ...] = None,
        name: str = None
    ):        
        super().__init__()
        self.simple_schedule_values = simple_schedule_values
        self.name = name

    @property
    def simple_schedule_values(self) -> Tuple[CSLSimpleSchedule, ...]:
        """A fixing date, settlement date pair"""
        return self.__simple_schedule_values

    @simple_schedule_values.setter
    def simple_schedule_values(self, value: Tuple[CSLSimpleSchedule, ...]):
        self._property_changed('simple_schedule_values')
        self.__simple_schedule_values = value        


class CSLStockArray(Base):
        
    """An array of stocks"""

    @camel_case_translate
    def __init__(
        self,
        stock_values: Tuple[CSLStock, ...] = None,
        name: str = None
    ):        
        super().__init__()
        self.stock_values = stock_values
        self.name = name

    @property
    def stock_values(self) -> Tuple[CSLStock, ...]:
        """A stock"""
        return self.__stock_values

    @stock_values.setter
    def stock_values(self, value: Tuple[CSLStock, ...]):
        self._property_changed('stock_values')
        self.__stock_values = value        


class CSLStringArray(Base):
        
    """An array of strings"""

    @camel_case_translate
    def __init__(
        self,
        string_values: Tuple[CSLString, ...] = None,
        name: str = None
    ):        
        super().__init__()
        self.string_values = string_values
        self.name = name

    @property
    def string_values(self) -> Tuple[CSLString, ...]:
        """A string"""
        return self.__string_values

    @string_values.setter
    def string_values(self, value: Tuple[CSLString, ...]):
        self._property_changed('string_values')
        self.__string_values = value        


class CarryScenario(Scenario):
        
    """A scenario to manipulate time along the forward curve"""

    @deprecation.deprecated(deprecated_in='0.8.216', removed_in='1.0.0', details='CarryScenario is now deprecated, please use RollFwd instead. CarryScenario will not be supported in all versions of gs-quant starting 2021.')
    @camel_case_translate
    def __init__(
        self,
        date: Union[datetime.date, str] = None,
        time_shift: int = None,
        roll_to_fwds: bool = True,
        holiday_calendar: Union[PricingLocation, str] = None,
        name: str = None
    ):        
        super().__init__()
        self.date = date
        self.time_shift = time_shift
        self.roll_to_fwds = roll_to_fwds
        self.holiday_calendar = holiday_calendar
        self.name = name

    @property
    def scenario_type(self) -> str:
        """CarryScenario"""
        return 'CarryScenario'        

    @property
    def date(self) -> Union[datetime.date, str]:
        """Date to shift markets to (absolute or relative)"""
        return self.__date

    @date.setter
    def date(self, value: Union[datetime.date, str]):
        self._property_changed('date')
        self.__date = value        

    @property
    def time_shift(self) -> int:
        """Number of days to shift market (in days)"""
        return self.__time_shift

    @time_shift.setter
    def time_shift(self, value: int):
        self._property_changed('time_shift')
        self.__time_shift = value        

    @property
    def roll_to_fwds(self) -> bool:
        """Roll along the forward curve or roll in spot space"""
        return self.__roll_to_fwds

    @roll_to_fwds.setter
    def roll_to_fwds(self, value: bool):
        self._property_changed('roll_to_fwds')
        self.__roll_to_fwds = value        

    @property
    def holiday_calendar(self) -> Union[PricingLocation, str]:
        """Calendar to use for relative dates"""
        return self.__holiday_calendar

    @holiday_calendar.setter
    def holiday_calendar(self, value: Union[PricingLocation, str]):
        self._property_changed('holiday_calendar')
        self.__holiday_calendar = get_enum_value(PricingLocation, value)        


class CloseMarket(Base):
        
    """Close market"""

    @camel_case_translate
    def __init__(
        self,
        date: datetime.date,
        location: Union[PricingLocation, str],
        name: str = None
    ):        
        super().__init__()
        self.date = date
        self.location = location
        self.name = name

    @property
    def market_type(self) -> str:
        """CloseMarket"""
        return 'CloseMarket'        

    @property
    def date(self) -> datetime.date:
        """Date for the market data"""
        return self.__date

    @date.setter
    def date(self, value: datetime.date):
        self._property_changed('date')
        self.__date = value        

    @property
    def location(self) -> Union[PricingLocation, str]:
        """Location for the market data"""
        return self.__location

    @location.setter
    def location(self, value: Union[PricingLocation, str]):
        self._property_changed('location')
        self.__location = get_enum_value(PricingLocation, value)        


class CommodPrice(Base):
        
    """Commodity price in units and currency, used for quoting strike, premium, fixed
       price"""

    @camel_case_translate
    def __init__(
        self,
        price: Union[float, str] = None,
        unit: Union[CommodUnit, str] = None,
        currency: Union[CurrencyName, str] = None,
        name: str = None
    ):        
        super().__init__()
        self.price = price
        self.unit = unit
        self.currency = currency
        self.name = name

    @property
    def price(self) -> Union[float, str]:
        """price"""
        return self.__price

    @price.setter
    def price(self, value: Union[float, str]):
        self._property_changed('price')
        self.__price = value        

    @property
    def unit(self) -> Union[CommodUnit, str]:
        """A coding scheme value to identify the unit of measure (e.g. Therms) in which the
           undelryer is denominated."""
        return self.__unit

    @unit.setter
    def unit(self, value: Union[CommodUnit, str]):
        self._property_changed('unit')
        self.__unit = get_enum_value(CommodUnit, value)        

    @property
    def currency(self) -> Union[CurrencyName, str]:
        """Currency Names"""
        return self.__currency

    @currency.setter
    def currency(self, value: Union[CurrencyName, str]):
        self._property_changed('currency')
        self.__currency = get_enum_value(CurrencyName, value)        


class EntitlementExclusions(Base):
        
    """Defines the exclusion entitlements of a given resource."""

    @camel_case_translate
    def __init__(
        self,
        view: Tuple[Tuple[str, ...], ...] = None,
        edit: Tuple[Tuple[str, ...], ...] = None,
        admin: Tuple[Tuple[str, ...], ...] = None,
        rebalance: Tuple[Tuple[str, ...], ...] = None,
        execute: Tuple[Tuple[str, ...], ...] = None,
        trade: Tuple[Tuple[str, ...], ...] = None,
        upload: Tuple[Tuple[str, ...], ...] = None,
        query: Tuple[Tuple[str, ...], ...] = None,
        performance_details: Tuple[Tuple[str, ...], ...] = None,
        plot: Tuple[Tuple[str, ...], ...] = None,
        delete: Tuple[Tuple[str, ...], ...] = None,
        name: str = None
    ):        
        super().__init__()
        self.view = view
        self.edit = edit
        self.admin = admin
        self.rebalance = rebalance
        self.execute = execute
        self.trade = trade
        self.upload = upload
        self.query = query
        self.performance_details = performance_details
        self.plot = plot
        self.delete = delete
        self.name = name

    @property
    def view(self) -> Tuple[Tuple[str, ...], ...]:
        return self.__view

    @view.setter
    def view(self, value: Tuple[Tuple[str, ...], ...]):
        self._property_changed('view')
        self.__view = value        

    @property
    def edit(self) -> Tuple[Tuple[str, ...], ...]:
        return self.__edit

    @edit.setter
    def edit(self, value: Tuple[Tuple[str, ...], ...]):
        self._property_changed('edit')
        self.__edit = value        

    @property
    def admin(self) -> Tuple[Tuple[str, ...], ...]:
        return self.__admin

    @admin.setter
    def admin(self, value: Tuple[Tuple[str, ...], ...]):
        self._property_changed('admin')
        self.__admin = value        

    @property
    def rebalance(self) -> Tuple[Tuple[str, ...], ...]:
        return self.__rebalance

    @rebalance.setter
    def rebalance(self, value: Tuple[Tuple[str, ...], ...]):
        self._property_changed('rebalance')
        self.__rebalance = value        

    @property
    def execute(self) -> Tuple[Tuple[str, ...], ...]:
        return self.__execute

    @execute.setter
    def execute(self, value: Tuple[Tuple[str, ...], ...]):
        self._property_changed('execute')
        self.__execute = value        

    @property
    def trade(self) -> Tuple[Tuple[str, ...], ...]:
        return self.__trade

    @trade.setter
    def trade(self, value: Tuple[Tuple[str, ...], ...]):
        self._property_changed('trade')
        self.__trade = value        

    @property
    def upload(self) -> Tuple[Tuple[str, ...], ...]:
        return self.__upload

    @upload.setter
    def upload(self, value: Tuple[Tuple[str, ...], ...]):
        self._property_changed('upload')
        self.__upload = value        

    @property
    def query(self) -> Tuple[Tuple[str, ...], ...]:
        return self.__query

    @query.setter
    def query(self, value: Tuple[Tuple[str, ...], ...]):
        self._property_changed('query')
        self.__query = value        

    @property
    def performance_details(self) -> Tuple[Tuple[str, ...], ...]:
        return self.__performance_details

    @performance_details.setter
    def performance_details(self, value: Tuple[Tuple[str, ...], ...]):
        self._property_changed('performance_details')
        self.__performance_details = value        

    @property
    def plot(self) -> Tuple[Tuple[str, ...], ...]:
        return self.__plot

    @plot.setter
    def plot(self, value: Tuple[Tuple[str, ...], ...]):
        self._property_changed('plot')
        self.__plot = value        

    @property
    def delete(self) -> Tuple[Tuple[str, ...], ...]:
        return self.__delete

    @delete.setter
    def delete(self, value: Tuple[Tuple[str, ...], ...]):
        self._property_changed('delete')
        self.__delete = value        


class Entitlements(Base):
        
    """Defines the entitlements of a given resource."""

    @camel_case_translate
    def __init__(
        self,
        view: Tuple[str, ...] = None,
        edit: Tuple[str, ...] = None,
        admin: Tuple[str, ...] = None,
        rebalance: Tuple[str, ...] = None,
        execute: Tuple[str, ...] = None,
        trade: Tuple[str, ...] = None,
        upload: Tuple[str, ...] = None,
        query: Tuple[str, ...] = None,
        performance_details: Tuple[str, ...] = None,
        plot: Tuple[str, ...] = None,
        delete: Tuple[str, ...] = None,
        display: Tuple[str, ...] = None,
        name: str = None
    ):        
        super().__init__()
        self.view = view
        self.edit = edit
        self.admin = admin
        self.rebalance = rebalance
        self.execute = execute
        self.trade = trade
        self.upload = upload
        self.query = query
        self.performance_details = performance_details
        self.plot = plot
        self.delete = delete
        self.display = display
        self.name = name

    @property
    def view(self) -> Tuple[str, ...]:
        """Permission to view the resource and its contents"""
        return self.__view

    @view.setter
    def view(self, value: Tuple[str, ...]):
        self._property_changed('view')
        self.__view = value        

    @property
    def edit(self) -> Tuple[str, ...]:
        """Permission to edit details about the resource content, excluding entitlements.
           Can also delete the resource"""
        return self.__edit

    @edit.setter
    def edit(self, value: Tuple[str, ...]):
        self._property_changed('edit')
        self.__edit = value        

    @property
    def admin(self) -> Tuple[str, ...]:
        """Permission to edit all details of the resource, including entitlements. Can also
           delete the resource"""
        return self.__admin

    @admin.setter
    def admin(self, value: Tuple[str, ...]):
        self._property_changed('admin')
        self.__admin = value        

    @property
    def rebalance(self) -> Tuple[str, ...]:
        """Permission to rebalance the constituent weights of the resource"""
        return self.__rebalance

    @rebalance.setter
    def rebalance(self, value: Tuple[str, ...]):
        self._property_changed('rebalance')
        self.__rebalance = value        

    @property
    def execute(self) -> Tuple[str, ...]:
        """Permission to execute functions and/or reports with the resource"""
        return self.__execute

    @execute.setter
    def execute(self, value: Tuple[str, ...]):
        self._property_changed('execute')
        self.__execute = value        

    @property
    def trade(self) -> Tuple[str, ...]:
        """Permission to trade the resource"""
        return self.__trade

    @trade.setter
    def trade(self, value: Tuple[str, ...]):
        self._property_changed('trade')
        self.__trade = value        

    @property
    def upload(self) -> Tuple[str, ...]:
        """Permission to upload data to the given resource"""
        return self.__upload

    @upload.setter
    def upload(self, value: Tuple[str, ...]):
        self._property_changed('upload')
        self.__upload = value        

    @property
    def query(self) -> Tuple[str, ...]:
        """Permission to query data from the given resource"""
        return self.__query

    @query.setter
    def query(self, value: Tuple[str, ...]):
        self._property_changed('query')
        self.__query = value        

    @property
    def performance_details(self) -> Tuple[str, ...]:
        """Permission to view the resource, it's entire contents, and related data"""
        return self.__performance_details

    @performance_details.setter
    def performance_details(self, value: Tuple[str, ...]):
        self._property_changed('performance_details')
        self.__performance_details = value        

    @property
    def plot(self) -> Tuple[str, ...]:
        """Permission to plot data from the given resource"""
        return self.__plot

    @plot.setter
    def plot(self, value: Tuple[str, ...]):
        self._property_changed('plot')
        self.__plot = value        

    @property
    def delete(self) -> Tuple[str, ...]:
        """Permission to delete the resource"""
        return self.__delete

    @delete.setter
    def delete(self, value: Tuple[str, ...]):
        self._property_changed('delete')
        self.__delete = value        

    @property
    def display(self) -> Tuple[str, ...]:
        """Permission to query data for web router request so that it can prevent
           programmatic access (api access) to the licensed data."""
        return self.__display

    @display.setter
    def display(self, value: Tuple[str, ...]):
        self._property_changed('display')
        self.__display = value        


class GIRDomain(Base):
        
    @camel_case_translate
    def __init__(
        self,
        document_links: Tuple[Link, ...] = None,
        name: str = None
    ):        
        super().__init__()
        self.document_links = document_links
        self.name = name

    @property
    def document_links(self) -> Tuple[Link, ...]:
        """Documents related to this asset"""
        return self.__document_links

    @document_links.setter
    def document_links(self, value: Tuple[Link, ...]):
        self._property_changed('document_links')
        self.__document_links = value        


class ISelectNewParameter(Base):
        
    @camel_case_translate
    def __init__(
        self,
        early_unwind_after: float = None,
        early_unwind_applicable: str = None,
        expiry_date_rule: str = None,
        option_target_expiry_parameter: float = None,
        option_early_unwind_days: float = None,
        in_alpha: bool = None,
        is_fsr_target_factor: bool = None,
        fsr_max_ratio: float = None,
        fsr_min_ratio: float = None,
        module_enabled: bool = None,
        module_name: str = None,
        target_strike: float = None,
        strike_method: Union[StrikeMethodType, str] = None,
        option_expiry: Union[OptionExpiryType, str] = None,
        bloomberg_id: str = None,
        stock_id: str = None,
        ric: str = None,
        new_weight: float = None,
        notional: float = None,
        leverage: float = None,
        option_type: Union[OptionType, str] = None,
        option_strike_type: Union[OptionStrikeType, str] = None,
        credit_option_type: Union[CreditOptionType, str] = None,
        credit_option_strike_type: Union[CreditOptionStrikeType, str] = None,
        strike_relative: float = None,
        trade_type: Union[TradeType, str] = None,
        signal: float = None,
        new_signal: float = None,
        new_min_weight: float = None,
        new_max_weight: float = None,
        min_weight: float = None,
        max_weight: float = None,
        election: str = None,
        base_date: str = None,
        commodity: str = None,
        component_weight: float = None,
        contract_nearby_number: float = None,
        expiration_schedule: str = None,
        fixing_type: str = None,
        last_eligible_date: float = None,
        num_roll_days: float = None,
        roll_end: float = None,
        roll_start: float = None,
        roll_type: str = None,
        valid_contract_expiry: str = None,
        name: str = None
    ):        
        super().__init__()
        self.early_unwind_after = early_unwind_after
        self.early_unwind_applicable = early_unwind_applicable
        self.expiry_date_rule = expiry_date_rule
        self.option_target_expiry_parameter = option_target_expiry_parameter
        self.option_early_unwind_days = option_early_unwind_days
        self.in_alpha = in_alpha
        self.is_fsr_target_factor = is_fsr_target_factor
        self.fsr_max_ratio = fsr_max_ratio
        self.fsr_min_ratio = fsr_min_ratio
        self.module_enabled = module_enabled
        self.module_name = module_name
        self.target_strike = target_strike
        self.strike_method = strike_method
        self.option_expiry = option_expiry
        self.bloomberg_id = bloomberg_id
        self.stock_id = stock_id
        self.ric = ric
        self.new_weight = new_weight
        self.notional = notional
        self.leverage = leverage
        self.option_type = option_type
        self.option_strike_type = option_strike_type
        self.credit_option_type = credit_option_type
        self.credit_option_strike_type = credit_option_strike_type
        self.strike_relative = strike_relative
        self.trade_type = trade_type
        self.signal = signal
        self.new_signal = new_signal
        self.new_min_weight = new_min_weight
        self.new_max_weight = new_max_weight
        self.min_weight = min_weight
        self.max_weight = max_weight
        self.election = election
        self.base_date = base_date
        self.commodity = commodity
        self.component_weight = component_weight
        self.contract_nearby_number = contract_nearby_number
        self.expiration_schedule = expiration_schedule
        self.fixing_type = fixing_type
        self.last_eligible_date = last_eligible_date
        self.num_roll_days = num_roll_days
        self.roll_end = roll_end
        self.roll_start = roll_start
        self.roll_type = roll_type
        self.valid_contract_expiry = valid_contract_expiry
        self.name = name

    @property
    def early_unwind_after(self) -> float:
        return self.__early_unwind_after

    @early_unwind_after.setter
    def early_unwind_after(self, value: float):
        self._property_changed('early_unwind_after')
        self.__early_unwind_after = value        

    @property
    def early_unwind_applicable(self) -> str:
        """Indicates whether the module can be unwinded early"""
        return self.__early_unwind_applicable

    @early_unwind_applicable.setter
    def early_unwind_applicable(self, value: str):
        self._property_changed('early_unwind_applicable')
        self.__early_unwind_applicable = value        

    @property
    def expiry_date_rule(self) -> str:
        """Free text description of asset. Description provided will be indexed in the
           search service for free text relevance match"""
        return self.__expiry_date_rule

    @expiry_date_rule.setter
    def expiry_date_rule(self, value: str):
        self._property_changed('expiry_date_rule')
        self.__expiry_date_rule = value        

    @property
    def option_target_expiry_parameter(self) -> float:
        return self.__option_target_expiry_parameter

    @option_target_expiry_parameter.setter
    def option_target_expiry_parameter(self, value: float):
        self._property_changed('option_target_expiry_parameter')
        self.__option_target_expiry_parameter = value        

    @property
    def option_early_unwind_days(self) -> float:
        return self.__option_early_unwind_days

    @option_early_unwind_days.setter
    def option_early_unwind_days(self, value: float):
        self._property_changed('option_early_unwind_days')
        self.__option_early_unwind_days = value        

    @property
    def in_alpha(self) -> bool:
        return self.__in_alpha

    @in_alpha.setter
    def in_alpha(self, value: bool):
        self._property_changed('in_alpha')
        self.__in_alpha = value        

    @property
    def is_fsr_target_factor(self) -> bool:
        return self.__is_fsr_target_factor

    @is_fsr_target_factor.setter
    def is_fsr_target_factor(self, value: bool):
        self._property_changed('is_fsr_target_factor')
        self.__is_fsr_target_factor = value        

    @property
    def fsr_max_ratio(self) -> float:
        return self.__fsr_max_ratio

    @fsr_max_ratio.setter
    def fsr_max_ratio(self, value: float):
        self._property_changed('fsr_max_ratio')
        self.__fsr_max_ratio = value        

    @property
    def fsr_min_ratio(self) -> float:
        return self.__fsr_min_ratio

    @fsr_min_ratio.setter
    def fsr_min_ratio(self, value: float):
        self._property_changed('fsr_min_ratio')
        self.__fsr_min_ratio = value        

    @property
    def module_enabled(self) -> bool:
        """Enable to disable the module"""
        return self.__module_enabled

    @module_enabled.setter
    def module_enabled(self, value: bool):
        self._property_changed('module_enabled')
        self.__module_enabled = value        

    @property
    def module_name(self) -> str:
        """Free text description of asset. Description provided will be indexed in the
           search service for free text relevance match"""
        return self.__module_name

    @module_name.setter
    def module_name(self, value: str):
        self._property_changed('module_name')
        self.__module_name = value        

    @property
    def target_strike(self) -> float:
        return self.__target_strike

    @target_strike.setter
    def target_strike(self, value: float):
        self._property_changed('target_strike')
        self.__target_strike = value        

    @property
    def strike_method(self) -> Union[StrikeMethodType, str]:
        return self.__strike_method

    @strike_method.setter
    def strike_method(self, value: Union[StrikeMethodType, str]):
        self._property_changed('strike_method')
        self.__strike_method = get_enum_value(StrikeMethodType, value)        

    @property
    def option_expiry(self) -> Union[OptionExpiryType, str]:
        return self.__option_expiry

    @option_expiry.setter
    def option_expiry(self, value: Union[OptionExpiryType, str]):
        self._property_changed('option_expiry')
        self.__option_expiry = get_enum_value(OptionExpiryType, value)        

    @property
    def bloomberg_id(self) -> str:
        return self.__bloomberg_id

    @bloomberg_id.setter
    def bloomberg_id(self, value: str):
        self._property_changed('bloomberg_id')
        self.__bloomberg_id = value        

    @property
    def stock_id(self) -> str:
        return self.__stock_id

    @stock_id.setter
    def stock_id(self, value: str):
        self._property_changed('stock_id')
        self.__stock_id = value        

    @property
    def ric(self) -> str:
        return self.__ric

    @ric.setter
    def ric(self, value: str):
        self._property_changed('ric')
        self.__ric = value        

    @property
    def new_weight(self) -> float:
        return self.__new_weight

    @new_weight.setter
    def new_weight(self, value: float):
        self._property_changed('new_weight')
        self.__new_weight = value        

    @property
    def notional(self) -> float:
        return self.__notional

    @notional.setter
    def notional(self, value: float):
        self._property_changed('notional')
        self.__notional = value        

    @property
    def leverage(self) -> float:
        return self.__leverage

    @leverage.setter
    def leverage(self, value: float):
        self._property_changed('leverage')
        self.__leverage = value        

    @property
    def option_type(self) -> Union[OptionType, str]:
        """Option Type"""
        return self.__option_type

    @option_type.setter
    def option_type(self, value: Union[OptionType, str]):
        self._property_changed('option_type')
        self.__option_type = get_enum_value(OptionType, value)        

    @property
    def option_strike_type(self) -> Union[OptionStrikeType, str]:
        return self.__option_strike_type

    @option_strike_type.setter
    def option_strike_type(self, value: Union[OptionStrikeType, str]):
        self._property_changed('option_strike_type')
        self.__option_strike_type = get_enum_value(OptionStrikeType, value)        

    @property
    def credit_option_type(self) -> Union[CreditOptionType, str]:
        return self.__credit_option_type

    @credit_option_type.setter
    def credit_option_type(self, value: Union[CreditOptionType, str]):
        self._property_changed('credit_option_type')
        self.__credit_option_type = get_enum_value(CreditOptionType, value)        

    @property
    def credit_option_strike_type(self) -> Union[CreditOptionStrikeType, str]:
        return self.__credit_option_strike_type

    @credit_option_strike_type.setter
    def credit_option_strike_type(self, value: Union[CreditOptionStrikeType, str]):
        self._property_changed('credit_option_strike_type')
        self.__credit_option_strike_type = get_enum_value(CreditOptionStrikeType, value)        

    @property
    def strike_relative(self) -> float:
        return self.__strike_relative

    @strike_relative.setter
    def strike_relative(self, value: float):
        self._property_changed('strike_relative')
        self.__strike_relative = value        

    @property
    def trade_type(self) -> Union[TradeType, str]:
        """Direction"""
        return self.__trade_type

    @trade_type.setter
    def trade_type(self, value: Union[TradeType, str]):
        self._property_changed('trade_type')
        self.__trade_type = get_enum_value(TradeType, value)        

    @property
    def signal(self) -> float:
        return self.__signal

    @signal.setter
    def signal(self, value: float):
        self._property_changed('signal')
        self.__signal = value        

    @property
    def new_signal(self) -> float:
        return self.__new_signal

    @new_signal.setter
    def new_signal(self, value: float):
        self._property_changed('new_signal')
        self.__new_signal = value        

    @property
    def new_min_weight(self) -> float:
        return self.__new_min_weight

    @new_min_weight.setter
    def new_min_weight(self, value: float):
        self._property_changed('new_min_weight')
        self.__new_min_weight = value        

    @property
    def new_max_weight(self) -> float:
        return self.__new_max_weight

    @new_max_weight.setter
    def new_max_weight(self, value: float):
        self._property_changed('new_max_weight')
        self.__new_max_weight = value        

    @property
    def min_weight(self) -> float:
        return self.__min_weight

    @min_weight.setter
    def min_weight(self, value: float):
        self._property_changed('min_weight')
        self.__min_weight = value        

    @property
    def max_weight(self) -> float:
        return self.__max_weight

    @max_weight.setter
    def max_weight(self, value: float):
        self._property_changed('max_weight')
        self.__max_weight = value        

    @property
    def election(self) -> str:
        return self.__election

    @election.setter
    def election(self, value: str):
        self._property_changed('election')
        self.__election = value        

    @property
    def base_date(self) -> str:
        """The base date type to use for the nearby contract roll"""
        return self.__base_date

    @base_date.setter
    def base_date(self, value: str):
        self._property_changed('base_date')
        self.__base_date = value        

    @property
    def commodity(self) -> str:
        """The commodity symbol for the module"""
        return self.__commodity

    @commodity.setter
    def commodity(self, value: str):
        self._property_changed('commodity')
        self.__commodity = value        

    @property
    def component_weight(self) -> float:
        """The weight allocated to the specified module"""
        return self.__component_weight

    @component_weight.setter
    def component_weight(self, value: float):
        self._property_changed('component_weight')
        self.__component_weight = value        

    @property
    def contract_nearby_number(self) -> float:
        """The nearby contract to roll into"""
        return self.__contract_nearby_number

    @contract_nearby_number.setter
    def contract_nearby_number(self, value: float):
        self._property_changed('contract_nearby_number')
        self.__contract_nearby_number = value        

    @property
    def expiration_schedule(self) -> str:
        """The contract expiration schedule to be used"""
        return self.__expiration_schedule

    @expiration_schedule.setter
    def expiration_schedule(self, value: str):
        self._property_changed('expiration_schedule')
        self.__expiration_schedule = value        

    @property
    def fixing_type(self) -> str:
        """Type of fixing used to determine the price"""
        return self.__fixing_type

    @fixing_type.setter
    def fixing_type(self, value: str):
        self._property_changed('fixing_type')
        self.__fixing_type = value        

    @property
    def last_eligible_date(self) -> float:
        """The last eligible date for the roll"""
        return self.__last_eligible_date

    @last_eligible_date.setter
    def last_eligible_date(self, value: float):
        self._property_changed('last_eligible_date')
        self.__last_eligible_date = value        

    @property
    def num_roll_days(self) -> float:
        """The number of days over which the roll is spread"""
        return self.__num_roll_days

    @num_roll_days.setter
    def num_roll_days(self, value: float):
        self._property_changed('num_roll_days')
        self.__num_roll_days = value        

    @property
    def roll_end(self) -> float:
        """Day on which to end the roll"""
        return self.__roll_end

    @roll_end.setter
    def roll_end(self, value: float):
        self._property_changed('roll_end')
        self.__roll_end = value        

    @property
    def roll_start(self) -> float:
        """Day on which to start the roll"""
        return self.__roll_start

    @roll_start.setter
    def roll_start(self, value: float):
        self._property_changed('roll_start')
        self.__roll_start = value        

    @property
    def roll_type(self) -> str:
        """Type of contract roll"""
        return self.__roll_type

    @roll_type.setter
    def roll_type(self, value: str):
        self._property_changed('roll_type')
        self.__roll_type = value        

    @property
    def valid_contract_expiry(self) -> str:
        """The valid contract expiry months"""
        return self.__valid_contract_expiry

    @valid_contract_expiry.setter
    def valid_contract_expiry(self, value: str):
        self._property_changed('valid_contract_expiry')
        self.__valid_contract_expiry = value        


class LiveMarket(Base):
        
    """Live market"""

    @camel_case_translate
    def __init__(
        self,
        location: Union[PricingLocation, str],
        name: str = None
    ):        
        super().__init__()
        self.location = location
        self.name = name

    @property
    def market_type(self) -> str:
        """LiveMarket"""
        return 'LiveMarket'        

    @property
    def location(self) -> Union[PricingLocation, str]:
        """Location for the market data"""
        return self.__location

    @location.setter
    def location(self, value: Union[PricingLocation, str]):
        self._property_changed('location')
        self.__location = get_enum_value(PricingLocation, value)        


class MarketDataCoordinateValue(Base):
        
    """Market data coordinate and value"""

    @camel_case_translate
    def __init__(
        self,
        coordinate: MarketDataCoordinate,
        value: float,
        name: str = None
    ):        
        super().__init__()
        self.coordinate = coordinate
        self.value = value
        self.name = name

    @property
    def coordinate(self) -> MarketDataCoordinate:
        """Market data coordinate"""
        return self.__coordinate

    @coordinate.setter
    def coordinate(self, value: MarketDataCoordinate):
        self._property_changed('coordinate')
        self.__coordinate = value        

    @property
    def value(self) -> float:
        """Value for the coordinate"""
        return self.__value

    @value.setter
    def value(self, value: float):
        self._property_changed('value')
        self.__value = value        


class MarketDataPattern(Base):
        
    """A pattern used to match market coordinates"""

    @camel_case_translate
    def __init__(
        self,
        mkt_type: str = None,
        mkt_asset: str = None,
        mkt_class: str = None,
        mkt_point: Tuple[str, ...] = None,
        mkt_quoting_style: str = None,
        is_active: bool = None,
        is_investment_grade: bool = None,
        currency: Union[Currency, str] = None,
        country_code: Union[CountryCode, str] = None,
        gics_sector: str = None,
        gics_industry_group: str = None,
        gics_industry: str = None,
        gics_sub_industry: str = None,
        name: str = None
    ):        
        super().__init__()
        self.mkt_type = mkt_type
        self.mkt_asset = mkt_asset
        self.mkt_class = mkt_class
        self.mkt_point = mkt_point
        self.mkt_quoting_style = mkt_quoting_style
        self.is_active = is_active
        self.is_investment_grade = is_investment_grade
        self.currency = currency
        self.country_code = country_code
        self.gics_sector = gics_sector
        self.gics_industry_group = gics_industry_group
        self.gics_industry = gics_industry
        self.gics_sub_industry = gics_sub_industry
        self.name = name

    @property
    def mkt_type(self) -> str:
        """The Market Data Type, e.g. IR, IR_BASIS, FX, FX_Vol"""
        return self.__mkt_type

    @mkt_type.setter
    def mkt_type(self, value: str):
        self._property_changed('mkt_type')
        self.__mkt_type = value        

    @property
    def mkt_asset(self) -> str:
        """The specific point, e.g. 3m, 10y, 11y, Dec19"""
        return self.__mkt_asset

    @mkt_asset.setter
    def mkt_asset(self, value: str):
        self._property_changed('mkt_asset')
        self.__mkt_asset = value        

    @property
    def mkt_class(self) -> str:
        """The market data pointClass, e.g. Swap, Cash."""
        return self.__mkt_class

    @mkt_class.setter
    def mkt_class(self, value: str):
        self._property_changed('mkt_class')
        self.__mkt_class = value        

    @property
    def mkt_point(self) -> Tuple[str, ...]:
        """The specific point, e.g. 3m, 10y, 11y, Dec19"""
        return self.__mkt_point

    @mkt_point.setter
    def mkt_point(self, value: Tuple[str, ...]):
        self._property_changed('mkt_point')
        self.__mkt_point = value        

    @property
    def mkt_quoting_style(self) -> str:
        return self.__mkt_quoting_style

    @mkt_quoting_style.setter
    def mkt_quoting_style(self, value: str):
        self._property_changed('mkt_quoting_style')
        self.__mkt_quoting_style = value        

    @property
    def is_active(self) -> bool:
        """Is the asset active"""
        return self.__is_active

    @is_active.setter
    def is_active(self, value: bool):
        self._property_changed('is_active')
        self.__is_active = value        

    @property
    def is_investment_grade(self) -> bool:
        """Is the asset investment grade"""
        return self.__is_investment_grade

    @is_investment_grade.setter
    def is_investment_grade(self, value: bool):
        self._property_changed('is_investment_grade')
        self.__is_investment_grade = value        

    @property
    def currency(self) -> Union[Currency, str]:
        """Currency, ISO 4217 currency code or exchange quote modifier (e.g. GBP vs GBp)"""
        return self.__currency

    @currency.setter
    def currency(self, value: Union[Currency, str]):
        self._property_changed('currency')
        self.__currency = get_enum_value(Currency, value)        

    @property
    def country_code(self) -> Union[CountryCode, str]:
        """ISO Country code"""
        return self.__country_code

    @country_code.setter
    def country_code(self, value: Union[CountryCode, str]):
        self._property_changed('country_code')
        self.__country_code = get_enum_value(CountryCode, value)        

    @property
    def gics_sector(self) -> str:
        """GICS Sector classification (level 1)"""
        return self.__gics_sector

    @gics_sector.setter
    def gics_sector(self, value: str):
        self._property_changed('gics_sector')
        self.__gics_sector = value        

    @property
    def gics_industry_group(self) -> str:
        """GICS Industry Group classification (level 2)"""
        return self.__gics_industry_group

    @gics_industry_group.setter
    def gics_industry_group(self, value: str):
        self._property_changed('gics_industry_group')
        self.__gics_industry_group = value        

    @property
    def gics_industry(self) -> str:
        """GICS Industry classification (level 3)"""
        return self.__gics_industry

    @gics_industry.setter
    def gics_industry(self, value: str):
        self._property_changed('gics_industry')
        self.__gics_industry = value        

    @property
    def gics_sub_industry(self) -> str:
        """GICS Sub Industry classification (level 4)"""
        return self.__gics_sub_industry

    @gics_sub_industry.setter
    def gics_sub_industry(self, value: str):
        self._property_changed('gics_sub_industry')
        self.__gics_sub_industry = value        


class MarketDataShock(Base):
        
    """A shock to apply to market coordinate values"""

    @camel_case_translate
    def __init__(
        self,
        shock_type: Union[MarketDataShockType, str],
        value: float,
        precision: float = None,
        cap: float = None,
        floor: float = None,
        coordinate_cap: float = None,
        coordinate_floor: float = None,
        name: str = None
    ):        
        super().__init__()
        self.shock_type = shock_type
        self.value = value
        self.precision = precision
        self.cap = cap
        self.floor = floor
        self.coordinate_cap = coordinate_cap
        self.coordinate_floor = coordinate_floor
        self.name = name

    @property
    def shock_type(self) -> Union[MarketDataShockType, str]:
        """Market data shock type"""
        return self.__shock_type

    @shock_type.setter
    def shock_type(self, value: Union[MarketDataShockType, str]):
        self._property_changed('shock_type')
        self.__shock_type = get_enum_value(MarketDataShockType, value)        

    @property
    def value(self) -> float:
        """The amount by which to shock matching coordinates"""
        return self.__value

    @value.setter
    def value(self, value: float):
        self._property_changed('value')
        self.__value = value        

    @property
    def precision(self) -> float:
        """The precision to which the shock will be rounded"""
        return self.__precision

    @precision.setter
    def precision(self, value: float):
        self._property_changed('precision')
        self.__precision = value        

    @property
    def cap(self) -> float:
        """Upper bound on the shocked value"""
        return self.__cap

    @cap.setter
    def cap(self, value: float):
        self._property_changed('cap')
        self.__cap = value        

    @property
    def floor(self) -> float:
        """Lower bound on the shocked value"""
        return self.__floor

    @floor.setter
    def floor(self, value: float):
        self._property_changed('floor')
        self.__floor = value        

    @property
    def coordinate_cap(self) -> float:
        """Upper bound on the pre-shocked value of matching coordinates"""
        return self.__coordinate_cap

    @coordinate_cap.setter
    def coordinate_cap(self, value: float):
        self._property_changed('coordinate_cap')
        self.__coordinate_cap = value        

    @property
    def coordinate_floor(self) -> float:
        """Lower bound on the pre-shocked value of matching coordinates"""
        return self.__coordinate_floor

    @coordinate_floor.setter
    def coordinate_floor(self, value: float):
        self._property_changed('coordinate_floor')
        self.__coordinate_floor = value        


class PCOBenchmark(Base):
        
    """Parameters required for PCO Benchmark"""

    @camel_case_translate
    def __init__(
        self,
        selected: str = None,
        options: Tuple[PCOBenchmarkOptions, ...] = None,
        name: str = None
    ):        
        super().__init__()
        self.selected = selected
        self.options = options
        self.name = name

    @property
    def selected(self) -> str:
        return self.__selected

    @selected.setter
    def selected(self, value: str):
        self._property_changed('selected')
        self.__selected = value        

    @property
    def options(self) -> Tuple[PCOBenchmarkOptions, ...]:
        """Parameters required for PCO Benchmark"""
        return self.__options

    @options.setter
    def options(self, value: Tuple[PCOBenchmarkOptions, ...]):
        self._property_changed('options')
        self.__options = value        


class PCOCashBalance(Base):
        
    """Parameters required for PCO Cash Balance"""

    @camel_case_translate
    def __init__(
        self,
        local_currency: Union[Currency, str] = None,
        cash_balance_limits: Tuple[str, ...] = None,
        cash_reserve: str = None,
        long_threshold: str = None,
        short_threshold: str = None,
        name: str = None
    ):        
        super().__init__()
        self.local_currency = local_currency
        self.cash_balance_limits = cash_balance_limits
        self.cash_reserve = cash_reserve
        self.long_threshold = long_threshold
        self.short_threshold = short_threshold
        self.name = name

    @property
    def local_currency(self) -> Union[Currency, str]:
        """Local currency"""
        return self.__local_currency

    @local_currency.setter
    def local_currency(self, value: Union[Currency, str]):
        self._property_changed('local_currency')
        self.__local_currency = get_enum_value(Currency, value)        

    @property
    def cash_balance_limits(self) -> Tuple[str, ...]:
        """Upper and lower limits for cash balance"""
        return self.__cash_balance_limits

    @cash_balance_limits.setter
    def cash_balance_limits(self, value: Tuple[str, ...]):
        self._property_changed('cash_balance_limits')
        self.__cash_balance_limits = value        

    @property
    def cash_reserve(self) -> str:
        """Target cash reserve"""
        return self.__cash_reserve

    @cash_reserve.setter
    def cash_reserve(self, value: str):
        self._property_changed('cash_reserve')
        self.__cash_reserve = value        

    @property
    def long_threshold(self) -> str:
        """Long cash threshold"""
        return self.__long_threshold

    @long_threshold.setter
    def long_threshold(self, value: str):
        self._property_changed('long_threshold')
        self.__long_threshold = value        

    @property
    def short_threshold(self) -> str:
        """Short cash threshold"""
        return self.__short_threshold

    @short_threshold.setter
    def short_threshold(self, value: str):
        self._property_changed('short_threshold')
        self.__short_threshold = value        


class PCOParameterValues(Base):
        
    """Parameters required for a PCO Generic Value"""

    @camel_case_translate
    def __init__(
        self,
        currency: Union[Currency, str] = None,
        value: Union[float, str] = None,
        name: str = None
    ):        
        super().__init__()
        self.currency = currency
        self.value = value
        self.name = name

    @property
    def currency(self) -> Union[Currency, str]:
        """Currency"""
        return self.__currency

    @currency.setter
    def currency(self, value: Union[Currency, str]):
        self._property_changed('currency')
        self.__currency = get_enum_value(Currency, value)        

    @property
    def value(self) -> Union[float, str]:
        """Generic value for a PCO parameter"""
        return self.__value

    @value.setter
    def value(self, value: Union[float, str]):
        self._property_changed('value')
        self.__value = value        


class PCOSettlements(Base):
        
    """Parameters required for a PCO Settlement"""

    @camel_case_translate
    def __init__(
        self,
        currency: Union[Currency, str] = None,
        data: Tuple[PCOSettlementsData, ...] = None,
        name: str = None
    ):        
        super().__init__()
        self.currency = currency
        self.data = data
        self.name = name

    @property
    def currency(self) -> Union[Currency, str]:
        """Currency"""
        return self.__currency

    @currency.setter
    def currency(self, value: Union[Currency, str]):
        self._property_changed('currency')
        self.__currency = get_enum_value(Currency, value)        

    @property
    def data(self) -> Tuple[PCOSettlementsData, ...]:
        """Parameters required for a PCO Settlement"""
        return self.__data

    @data.setter
    def data(self, value: Tuple[PCOSettlementsData, ...]):
        self._property_changed('data')
        self.__data = value        


class PCOTargetDeviation(Base):
        
    """Parameters required for a Target Deviation"""

    @camel_case_translate
    def __init__(
        self,
        currency: Union[Currency, str] = None,
        data: Tuple[PCOTargetDeviationData, ...] = None,
        name: str = None
    ):        
        super().__init__()
        self.currency = currency
        self.data = data
        self.name = name

    @property
    def currency(self) -> Union[Currency, str]:
        """Currency"""
        return self.__currency

    @currency.setter
    def currency(self, value: Union[Currency, str]):
        self._property_changed('currency')
        self.__currency = get_enum_value(Currency, value)        

    @property
    def data(self) -> Tuple[PCOTargetDeviationData, ...]:
        """Parameters required for a Target Deviation data"""
        return self.__data

    @data.setter
    def data(self, value: Tuple[PCOTargetDeviationData, ...]):
        self._property_changed('data')
        self.__data = value        


class PCOUnrealisedMarkToMarket(Base):
        
    """Parameters required for a Unrealised mark to market."""

    @camel_case_translate
    def __init__(
        self,
        total: str = None,
        next_settlement_date: datetime.datetime = None,
        next_settlement: str = None,
        next_roll_date: datetime.datetime = None,
        historical_data: Tuple[PCOMtMHistoricalData, ...] = None,
        name: str = None
    ):        
        super().__init__()
        self.total = total
        self.next_settlement_date = next_settlement_date
        self.next_settlement = next_settlement
        self.next_roll_date = next_roll_date
        self.historical_data = historical_data
        self.name = name

    @property
    def total(self) -> str:
        """Total indicative unrealised mark to market value"""
        return self.__total

    @total.setter
    def total(self, value: str):
        self._property_changed('total')
        self.__total = value        

    @property
    def next_settlement_date(self) -> datetime.datetime:
        """Next settlement date"""
        return self.__next_settlement_date

    @next_settlement_date.setter
    def next_settlement_date(self, value: datetime.datetime):
        self._property_changed('next_settlement_date')
        self.__next_settlement_date = value        

    @property
    def next_settlement(self) -> str:
        """Next settlement value"""
        return self.__next_settlement

    @next_settlement.setter
    def next_settlement(self, value: str):
        self._property_changed('next_settlement')
        self.__next_settlement = value        

    @property
    def next_roll_date(self) -> datetime.datetime:
        """Next roll date"""
        return self.__next_roll_date

    @next_roll_date.setter
    def next_roll_date(self, value: datetime.datetime):
        self._property_changed('next_roll_date')
        self.__next_roll_date = value        

    @property
    def historical_data(self) -> Tuple[PCOMtMHistoricalData, ...]:
        """History of unrealised mark to market of open trades"""
        return self.__historical_data

    @historical_data.setter
    def historical_data(self, value: Tuple[PCOMtMHistoricalData, ...]):
        self._property_changed('historical_data')
        self.__historical_data = value        


class RiskMeasure(Base):
        
    """The measure to perform risk on. Each risk measure consists of an asset class, a
       measure type, and a unit."""

    @camel_case_translate
    def __init__(
        self,
        asset_class: Union[AssetClass, str] = None,
        measure_type: Union[RiskMeasureType, str] = None,
        unit: Union[RiskMeasureUnit, str] = None,
        value: Union[float, str] = None,
        name: str = None
    ):        
        super().__init__()
        self.asset_class = asset_class
        self.measure_type = measure_type
        self.unit = unit
        self.value = value
        self.name = name

    @property
    def asset_class(self) -> Union[AssetClass, str]:
        """Asset classification of security. Assets are classified into broad groups which
           exhibit similar characteristics and behave in a consistent way under
           different market conditions"""
        return self.__asset_class

    @asset_class.setter
    def asset_class(self, value: Union[AssetClass, str]):
        self._property_changed('asset_class')
        self.__asset_class = get_enum_value(AssetClass, value)        

    @property
    def measure_type(self) -> Union[RiskMeasureType, str]:
        """The type of measure to perform risk on. e.g. Greeks"""
        return self.__measure_type

    @measure_type.setter
    def measure_type(self, value: Union[RiskMeasureType, str]):
        self._property_changed('measure_type')
        self.__measure_type = get_enum_value(RiskMeasureType, value)        

    @property
    def unit(self) -> Union[RiskMeasureUnit, str]:
        """The unit of change of underlying in the risk computation."""
        return self.__unit

    @unit.setter
    def unit(self, value: Union[RiskMeasureUnit, str]):
        self._property_changed('unit')
        self.__unit = get_enum_value(RiskMeasureUnit, value)        

    @property
    def value(self) -> Union[float, str]:
        """Value of this measure"""
        return self.__value

    @value.setter
    def value(self, value: Union[float, str]):
        self._property_changed('value')
        self.__value = value        


class RollFwd(Scenario):
        
    """A scenario to manipulate time along the forward curve"""

    @camel_case_translate
    def __init__(
        self,
        date: Union[datetime.date, str] = None,
        realise_fwd: bool = True,
        holiday_calendar: Union[PricingLocation, str] = None,
        name: str = None
    ):        
        super().__init__()
        self.date = date
        self.realise_fwd = realise_fwd
        self.holiday_calendar = holiday_calendar
        self.name = name

    @property
    def scenario_type(self) -> str:
        """RollFwd"""
        return 'RollFwd'        

    @property
    def date(self) -> Union[datetime.date, str]:
        """Absolute or Relative Date to shift markets to"""
        return self.__date

    @date.setter
    def date(self, value: Union[datetime.date, str]):
        self._property_changed('date')
        self.__date = value        

    @property
    def realise_fwd(self) -> bool:
        """Roll along the forward curve or roll in spot space"""
        return self.__realise_fwd

    @realise_fwd.setter
    def realise_fwd(self, value: bool):
        self._property_changed('realise_fwd')
        self.__realise_fwd = value        

    @property
    def holiday_calendar(self) -> Union[PricingLocation, str]:
        """Calendar to use for relative dates"""
        return self.__holiday_calendar

    @holiday_calendar.setter
    def holiday_calendar(self, value: Union[PricingLocation, str]):
        self._property_changed('holiday_calendar')
        self.__holiday_calendar = get_enum_value(PricingLocation, value)        


class TimestampedMarket(Base):
        
    """Timestamped market"""

    @camel_case_translate
    def __init__(
        self,
        location: Union[PricingLocation, str],
        timestamp: datetime.datetime = None,
        name: str = None
    ):        
        super().__init__()
        self.timestamp = timestamp
        self.location = location
        self.name = name

    @property
    def market_type(self) -> str:
        """TimestampedMarket"""
        return 'TimestampedMarket'        

    @property
    def timestamp(self) -> datetime.datetime:
        """Timestamp for the market data"""
        return self.__timestamp

    @timestamp.setter
    def timestamp(self, value: datetime.datetime):
        self._property_changed('timestamp')
        self.__timestamp = value        

    @property
    def location(self) -> Union[PricingLocation, str]:
        """Location for the market data"""
        return self.__location

    @location.setter
    def location(self, value: Union[PricingLocation, str]):
        self._property_changed('location')
        self.__location = get_enum_value(PricingLocation, value)        


class CSLCurrencyArray(Base):
        
    """An array of currencies"""

    @camel_case_translate
    def __init__(
        self,
        currency_values: Tuple[CSLCurrency, ...] = None,
        name: str = None
    ):        
        super().__init__()
        self.currency_values = currency_values
        self.name = name

    @property
    def currency_values(self) -> Tuple[CSLCurrency, ...]:
        """A currency"""
        return self.__currency_values

    @currency_values.setter
    def currency_values(self, value: Tuple[CSLCurrency, ...]):
        self._property_changed('currency_values')
        self.__currency_values = value        


class CSLSchedule(Base):
        
    """A schedule"""

    @camel_case_translate
    def __init__(
        self,
        first_date: datetime.date = None,
        last_date: datetime.date = None,
        calendar_name: str = None,
        period: str = None,
        delay: str = None,
        business_day_convention: str = None,
        day_count_convention: str = None,
        days_per_term: str = None,
        delay_business_day_convention: str = None,
        delay_calendar_name: str = None,
        has_reset_date: bool = None,
        term_formula: str = None,
        extra_dates: Tuple[CSLDateArrayNamedParam, ...] = None,
        extra_dates_by_offset: Tuple[CSLSymCaseNamedParam, ...] = None,
        name: str = None
    ):        
        super().__init__()
        self.first_date = first_date
        self.last_date = last_date
        self.calendar_name = calendar_name
        self.period = period
        self.delay = delay
        self.business_day_convention = business_day_convention
        self.day_count_convention = day_count_convention
        self.days_per_term = days_per_term
        self.delay_business_day_convention = delay_business_day_convention
        self.delay_calendar_name = delay_calendar_name
        self.has_reset_date = has_reset_date
        self.term_formula = term_formula
        self.extra_dates = extra_dates
        self.extra_dates_by_offset = extra_dates_by_offset
        self.name = name

    @property
    def first_date(self) -> datetime.date:
        """ISO 8601-formatted date"""
        return self.__first_date

    @first_date.setter
    def first_date(self, value: datetime.date):
        self._property_changed('first_date')
        self.__first_date = value        

    @property
    def last_date(self) -> datetime.date:
        """ISO 8601-formatted date"""
        return self.__last_date

    @last_date.setter
    def last_date(self, value: datetime.date):
        self._property_changed('last_date')
        self.__last_date = value        

    @property
    def calendar_name(self) -> str:
        """The name of the holiday calendar"""
        return self.__calendar_name

    @calendar_name.setter
    def calendar_name(self, value: str):
        self._property_changed('calendar_name')
        self.__calendar_name = value        

    @property
    def period(self) -> str:
        """Tenor"""
        return self.__period

    @period.setter
    def period(self, value: str):
        self._property_changed('period')
        self.__period = value        

    @property
    def delay(self) -> str:
        """The delay"""
        return self.__delay

    @delay.setter
    def delay(self, value: str):
        self._property_changed('delay')
        self.__delay = value        

    @property
    def business_day_convention(self) -> str:
        return self.__business_day_convention

    @business_day_convention.setter
    def business_day_convention(self, value: str):
        self._property_changed('business_day_convention')
        self.__business_day_convention = value        

    @property
    def day_count_convention(self) -> str:
        return self.__day_count_convention

    @day_count_convention.setter
    def day_count_convention(self, value: str):
        self._property_changed('day_count_convention')
        self.__day_count_convention = value        

    @property
    def days_per_term(self) -> str:
        return self.__days_per_term

    @days_per_term.setter
    def days_per_term(self, value: str):
        self._property_changed('days_per_term')
        self.__days_per_term = value        

    @property
    def delay_business_day_convention(self) -> str:
        return self.__delay_business_day_convention

    @delay_business_day_convention.setter
    def delay_business_day_convention(self, value: str):
        self._property_changed('delay_business_day_convention')
        self.__delay_business_day_convention = value        

    @property
    def delay_calendar_name(self) -> str:
        """The name of the holiday calendar"""
        return self.__delay_calendar_name

    @delay_calendar_name.setter
    def delay_calendar_name(self, value: str):
        self._property_changed('delay_calendar_name')
        self.__delay_calendar_name = value        

    @property
    def has_reset_date(self) -> bool:
        return self.__has_reset_date

    @has_reset_date.setter
    def has_reset_date(self, value: bool):
        self._property_changed('has_reset_date')
        self.__has_reset_date = value        

    @property
    def term_formula(self) -> str:
        return self.__term_formula

    @term_formula.setter
    def term_formula(self, value: str):
        self._property_changed('term_formula')
        self.__term_formula = value        

    @property
    def extra_dates(self) -> Tuple[CSLDateArrayNamedParam, ...]:
        """A named array of dates"""
        return self.__extra_dates

    @extra_dates.setter
    def extra_dates(self, value: Tuple[CSLDateArrayNamedParam, ...]):
        self._property_changed('extra_dates')
        self.__extra_dates = value        

    @property
    def extra_dates_by_offset(self) -> Tuple[CSLSymCaseNamedParam, ...]:
        """A named case-sensitive string."""
        return self.__extra_dates_by_offset

    @extra_dates_by_offset.setter
    def extra_dates_by_offset(self, value: Tuple[CSLSymCaseNamedParam, ...]):
        self._property_changed('extra_dates_by_offset')
        self.__extra_dates_by_offset = value        


class CurveScenario(Scenario):
        
    """A scenario to manipulate curve shape"""

    @camel_case_translate
    def __init__(
        self,
        market_data_pattern: MarketDataPattern = None,
        parallel_shift: float = None,
        curve_shift: float = None,
        pivot_point: float = None,
        tenor_start: float = None,
        tenor_end: float = None,
        name: str = None
    ):        
        super().__init__()
        self.market_data_pattern = market_data_pattern
        self.parallel_shift = parallel_shift
        self.curve_shift = curve_shift
        self.pivot_point = pivot_point
        self.tenor_start = tenor_start
        self.tenor_end = tenor_end
        self.name = name

    @property
    def scenario_type(self) -> str:
        """CurveScenario"""
        return 'CurveScenario'        

    @property
    def market_data_pattern(self) -> MarketDataPattern:
        """Market pattern for matching curve assets"""
        return self.__market_data_pattern

    @market_data_pattern.setter
    def market_data_pattern(self, value: MarketDataPattern):
        self._property_changed('market_data_pattern')
        self.__market_data_pattern = value        

    @property
    def parallel_shift(self) -> float:
        """A constant (X bps) which shifts all points by the same amount"""
        return self.__parallel_shift

    @parallel_shift.setter
    def parallel_shift(self, value: float):
        self._property_changed('parallel_shift')
        self.__parallel_shift = value        

    @property
    def curve_shift(self) -> float:
        """A double which represents the net rate change (X bps) between tenorStart and
           tenorEnd"""
        return self.__curve_shift

    @curve_shift.setter
    def curve_shift(self, value: float):
        self._property_changed('curve_shift')
        self.__curve_shift = value        

    @property
    def pivot_point(self) -> float:
        """The tenor at which there is zero rate change, which is between tenorStart and
           tenorEnd inclusive, informing the type of curve shift"""
        return self.__pivot_point

    @pivot_point.setter
    def pivot_point(self, value: float):
        self._property_changed('pivot_point')
        self.__pivot_point = value        

    @property
    def tenor_start(self) -> float:
        """The tenor, in years, which is the starting point of the curve shift"""
        return self.__tenor_start

    @tenor_start.setter
    def tenor_start(self, value: float):
        self._property_changed('tenor_start')
        self.__tenor_start = value        

    @property
    def tenor_end(self) -> float:
        """The tenor, in years, which is the end point of the curve shift"""
        return self.__tenor_end

    @tenor_end.setter
    def tenor_end(self, value: float):
        self._property_changed('tenor_end')
        self.__tenor_end = value        


class DataSetFieldMap(Base):
        
    """The mapping between data set field and risk measure type"""

    @camel_case_translate
    def __init__(
        self,
        data_set_id: str,
        field: str,
        results_field: str,
        risk_measure: RiskMeasure,
        name: str = None
    ):        
        super().__init__()
        self.data_set_id = data_set_id
        self.field = field
        self.results_field = results_field
        self.risk_measure = risk_measure
        self.name = name

    @property
    def data_set_id(self) -> str:
        """Unique id of dataset."""
        return self.__data_set_id

    @data_set_id.setter
    def data_set_id(self, value: str):
        self._property_changed('data_set_id')
        self.__data_set_id = value        

    @property
    def field(self) -> str:
        """The field for data set, e.g. rate"""
        return self.__field

    @field.setter
    def field(self, value: str):
        self._property_changed('field')
        self.__field = value        

    @property
    def results_field(self) -> str:
        """The source field in the results, e.g. value or fixedRate"""
        return self.__results_field

    @results_field.setter
    def results_field(self, value: str):
        self._property_changed('results_field')
        self.__results_field = value        

    @property
    def risk_measure(self) -> RiskMeasure:
        """The measure to perform risk on. Each risk measure consists of an asset class, a
           measure type, and a unit."""
        return self.__risk_measure

    @risk_measure.setter
    def risk_measure(self, value: RiskMeasure):
        self._property_changed('risk_measure')
        self.__risk_measure = value        


class FieldValueMap(Base):
        
    @camel_case_translate
    def __init__(
        self,
        **kwargs
    ):        
        super().__init__()
        self.investment_rate = kwargs.get('investment_rate')
        self.starting_emma_legal_entity_id = kwargs.get('starting_emma_legal_entity_id')
        self.mdapi_class = kwargs.get('mdapi_class')
        self.total_notional_usd = kwargs.get('total_notional_usd')
        self.bid_unadjusted = kwargs.get('bid_unadjusted')
        self.aggressive_fills_percentage = kwargs.get('aggressive_fills_percentage')
        self.future10yr_market_cap = kwargs.get('future10yr_market_cap')
        self.vehicle_type = kwargs.get('vehicle_type')
        self.total_fatalities_by_state = kwargs.get('total_fatalities_by_state')
        self.new_active = kwargs.get('new_active')
        self.daily_risk = kwargs.get('daily_risk')
        self.energy = kwargs.get('energy')
        self.sunshine_daily_forecast = kwargs.get('sunshine_daily_forecast')
        self.sentiment_score = kwargs.get('sentiment_score')
        self.correlation = kwargs.get('correlation')
        self.exposure = kwargs.get('exposure')
        self.size = kwargs.get('size')
        self.market_data_asset = kwargs.get('market_data_asset')
        self.buy75cents = kwargs.get('buy75cents')
        self.unadjusted_high = kwargs.get('unadjusted_high')
        self.source_importance = kwargs.get('source_importance')
        self.closing_yield = kwargs.get('closing_yield')
        self.wind = kwargs.get('wind')
        self.sc16 = kwargs.get('sc16')
        self.sc15 = kwargs.get('sc15')
        self.sc12 = kwargs.get('sc12')
        self.sc11 = kwargs.get('sc11')
        self.primary_vwap_in_limit_unrealized_bps = kwargs.get('primary_vwap_in_limit_unrealized_bps')
        self.display_name = kwargs.get('display_name')
        self.minutes_to_trade100_pct = kwargs.get('minutes_to_trade100_pct')
        self.sc14 = kwargs.get('sc14')
        self.cumulative_volume_in_shares = kwargs.get('cumulative_volume_in_shares')
        self.sc13 = kwargs.get('sc13')
        self.new_fatalities = kwargs.get('new_fatalities')
        self.buy50bps = kwargs.get('buy50bps')
        self.num_staffed_beds = kwargs.get('num_staffed_beds')
        self.upfront_payment = kwargs.get('upfront_payment')
        self.arrival_mid_realized_cash = kwargs.get('arrival_mid_realized_cash')
        self.sc10 = kwargs.get('sc10')
        self.sc05 = kwargs.get('sc05')
        self.a = kwargs.get('a')
        self.sc04 = kwargs.get('sc04')
        self.b = kwargs.get('b')
        self.sc07 = kwargs.get('sc07')
        self.c = kwargs.get('c')
        self.yield_to_maturity = kwargs.get('yield_to_maturity')
        self.sc06 = kwargs.get('sc06')
        self.address = kwargs.get('address')
        self.sc01 = kwargs.get('sc01')
        self.leg2_payment_frequency = kwargs.get('leg2_payment_frequency')
        self.sc03 = kwargs.get('sc03')
        self.sc02 = kwargs.get('sc02')
        self.geography_name = kwargs.get('geography_name')
        self.borrower = kwargs.get('borrower')
        self.share_class_type = kwargs.get('share_class_type')
        self.settle_price = kwargs.get('settle_price')
        self.performance_contribution = kwargs.get('performance_contribution')
        self.sc09 = kwargs.get('sc09')
        self.mkt_class = kwargs.get('mkt_class')
        self.sc08 = kwargs.get('sc08')
        self.collateralization = kwargs.get('collateralization')
        self.future_month_u26 = kwargs.get('future_month_u26')
        self.future_month_u25 = kwargs.get('future_month_u25')
        self.future_month_u24 = kwargs.get('future_month_u24')
        self.future_month_u23 = kwargs.get('future_month_u23')
        self.future_month_u22 = kwargs.get('future_month_u22')
        self.statement_id = kwargs.get('statement_id')
        self.future_month_u21 = kwargs.get('future_month_u21')
        self.modified_duration = kwargs.get('modified_duration')
        self.vol180d = kwargs.get('vol180d')
        self.short_rates_contribution = kwargs.get('short_rates_contribution')
        self.implied_normal_volatility = kwargs.get('implied_normal_volatility')
        self.solar_generation = kwargs.get('solar_generation')
        self.mtm_price = kwargs.get('mtm_price')
        self.swap_spread_change = kwargs.get('swap_spread_change')
        self.realized_arrival_performance_usd = kwargs.get('realized_arrival_performance_usd')
        self.portfolio_assets = kwargs.get('portfolio_assets')
        self.pricingdate = kwargs.get('pricingdate')
        self.tcm_cost_horizon3_hour = kwargs.get('tcm_cost_horizon3_hour')
        self.exchange_rate = kwargs.get('exchange_rate')
        self.potential_bed_cap_inc = kwargs.get('potential_bed_cap_inc')
        self.number_covered = kwargs.get('number_covered')
        self.number_of_positions = kwargs.get('number_of_positions')
        self.open_unadjusted = kwargs.get('open_unadjusted')
        self.strike_time = kwargs.get('strike_time')
        self.ask_price = kwargs.get('ask_price')
        self.event_id = kwargs.get('event_id')
        self.sectors = kwargs.get('sectors')
        self.additional_price_notation_type = kwargs.get('additional_price_notation_type')
        self.gross_investment_qtd = kwargs.get('gross_investment_qtd')
        self.annualized_risk = kwargs.get('annualized_risk')
        self.estimated_holding_time_short = kwargs.get('estimated_holding_time_short')
        self.midcurve_premium = kwargs.get('midcurve_premium')
        self.volume_composite = kwargs.get('volume_composite')
        self.sharpe_qtd = kwargs.get('sharpe_qtd')
        self.clearing_exception_or_exemption_indicator = kwargs.get('clearing_exception_or_exemption_indicator')
        self.estimated_holding_time_long = kwargs.get('estimated_holding_time_long')
        self.external = kwargs.get('external')
        self.tracker_name = kwargs.get('tracker_name')
        self.sell50cents = kwargs.get('sell50cents')
        self.trade_price = kwargs.get('trade_price')
        self.cleared = kwargs.get('cleared')
        self.prime_id_numeric = kwargs.get('prime_id_numeric')
        self.buy8bps = kwargs.get('buy8bps')
        self.total_notional_local = kwargs.get('total_notional_local')
        self.cid = kwargs.get('cid')
        self.total_confirmed_senior_home = kwargs.get('total_confirmed_senior_home')
        self.ctd_fwd_price = kwargs.get('ctd_fwd_price')
        self.sink_factor = kwargs.get('sink_factor')
        self.temperature_forecast = kwargs.get('temperature_forecast')
        self.primary_asset_class = kwargs.get('primary_asset_class')
        self.bid_high = kwargs.get('bid_high')
        self.pnl_qtd = kwargs.get('pnl_qtd')
        self.buy50cents = kwargs.get('buy50cents')
        self.sell4bps = kwargs.get('sell4bps')
        self.receiver_day_count_fraction = kwargs.get('receiver_day_count_fraction')
        self.auction_close_percentage = kwargs.get('auction_close_percentage')
        self.target_price = kwargs.get('target_price')
        self.bos_in_bps_description = kwargs.get('bos_in_bps_description')
        self.low_price = kwargs.get('low_price')
        self.adv22_day_pct = kwargs.get('adv22_day_pct')
        self.gate_type = kwargs.get('gate_type')
        self.matched_maturity_swap_spread12m = kwargs.get('matched_maturity_swap_spread12m')
        self.price_range_in_ticks_label = kwargs.get('price_range_in_ticks_label')
        self.ticker = kwargs.get('ticker')
        self.notional_unit = kwargs.get('notional_unit')
        self.tcm_cost_horizon1_day = kwargs.get('tcm_cost_horizon1_day')
        self.approval = kwargs.get('approval')
        self.test_measure = kwargs.get('test_measure')
        self.option_lock_out_period = kwargs.get('option_lock_out_period')
        self.execution_time = kwargs.get('execution_time')
        self.source_value_forecast = kwargs.get('source_value_forecast')
        self.leg2_spread = kwargs.get('leg2_spread')
        self.short_conviction_large = kwargs.get('short_conviction_large')
        self.leg1_floating_rate_index = kwargs.get('leg1_floating_rate_index')
        self.ccg_name = kwargs.get('ccg_name')
        self.dollar_excess_return = kwargs.get('dollar_excess_return')
        self.gsn = kwargs.get('gsn')
        self.trade_end_date = kwargs.get('trade_end_date')
        self.receiver_rate_option = kwargs.get('receiver_rate_option')
        self.gss = kwargs.get('gss')
        self.percent_of_mediandv1m = kwargs.get('percent_of_mediandv1m')
        self.lendables = kwargs.get('lendables')
        self.sell75cents = kwargs.get('sell75cents')
        self.option_adjusted_spread = kwargs.get('option_adjusted_spread')
        self.option_adjusted_swap_spread = kwargs.get('option_adjusted_swap_spread')
        self.bos_in_ticks_label = kwargs.get('bos_in_ticks_label')
        self.position_source_id = kwargs.get('position_source_id')
        self.buy1bps = kwargs.get('buy1bps')
        self.buy3point5bps = kwargs.get('buy3point5bps')
        self.gs_sustain_region = kwargs.get('gs_sustain_region')
        self.absolute_return_wtd = kwargs.get('absolute_return_wtd')
        self.deployment_id = kwargs.get('deployment_id')
        self.asset_parameters_seniority = kwargs.get('asset_parameters_seniority')
        self.ask_spread = kwargs.get('ask_spread')
        self.flow = kwargs.get('flow')
        self.future_month_h26 = kwargs.get('future_month_h26')
        self.loan_rebate = kwargs.get('loan_rebate')
        self.future_month_h25 = kwargs.get('future_month_h25')
        self.period = kwargs.get('period')
        self.index_create_source = kwargs.get('index_create_source')
        self.future_month_h24 = kwargs.get('future_month_h24')
        self.future_month_h23 = kwargs.get('future_month_h23')
        self.future_month_h22 = kwargs.get('future_month_h22')
        self.future_month_h21 = kwargs.get('future_month_h21')
        self.non_usd_ois = kwargs.get('non_usd_ois')
        self.real_twi_contribution = kwargs.get('real_twi_contribution')
        self.mkt_asset = kwargs.get('mkt_asset')
        self.leg2_index_location = kwargs.get('leg2_index_location')
        self.twap_unrealized_bps = kwargs.get('twap_unrealized_bps')
        self.quantity_unit_of_measure = kwargs.get('quantity_unit_of_measure')
        self.last_updated_message = kwargs.get('last_updated_message')
        self.loan_value = kwargs.get('loan_value')
        self.option_adjusted_ois_spread = kwargs.get('option_adjusted_ois_spread')
        self.total_return_price = kwargs.get('total_return_price')
        self.value_currency = kwargs.get('value_currency')
        self.weighted_percent_in_model = kwargs.get('weighted_percent_in_model')
        self.init_loan_spread_required = kwargs.get('init_loan_spread_required')
        self.election_period = kwargs.get('election_period')
        self.funding_ask_price = kwargs.get('funding_ask_price')
        self.historical_beta = kwargs.get('historical_beta')
        self.bond_risk_premium_index = kwargs.get('bond_risk_premium_index')
        self.hit_rate_ytd = kwargs.get('hit_rate_ytd')
        self.gir_gsdeer_gsfeer = kwargs.get('gir_gsdeer_gsfeer')
        self.num_units = kwargs.get('num_units')
        self.asset_parameters_receiver_frequency = kwargs.get('asset_parameters_receiver_frequency')
        self.expense_ratio_gross_bps = kwargs.get('expense_ratio_gross_bps')
        self.relative_payoff_wtd = kwargs.get('relative_payoff_wtd')
        self.ctd_price = kwargs.get('ctd_price')
        self.pace_of_roll_now = kwargs.get('pace_of_roll_now')
        self.product = kwargs.get('product')
        self.leg2_return_type = kwargs.get('leg2_return_type')
        self.agent_lender_fee = kwargs.get('agent_lender_fee')
        self.dissemination_id = kwargs.get('dissemination_id')
        self.option_strike_price = kwargs.get('option_strike_price')
        self.precipitation_type = kwargs.get('precipitation_type')
        self.lower_bound = kwargs.get('lower_bound')
        self.active1yr_market_cap = kwargs.get('active1yr_market_cap')
        self.arrival_mid_normalized = kwargs.get('arrival_mid_normalized')
        self.underlying_asset2 = kwargs.get('underlying_asset2')
        self.underlying_asset1 = kwargs.get('underlying_asset1')
        self.legal_entity = kwargs.get('legal_entity')
        self.performance_fee = kwargs.get('performance_fee')
        self.order_state = kwargs.get('order_state')
        self.actual_data_quality = kwargs.get('actual_data_quality')
        self.index_ratio = kwargs.get('index_ratio')
        self.queue_in_lots_label = kwargs.get('queue_in_lots_label')
        self.adv10_day_pct = kwargs.get('adv10_day_pct')
        self.long_conviction_medium = kwargs.get('long_conviction_medium')
        self.relative_hit_rate_wtd = kwargs.get('relative_hit_rate_wtd')
        self.daily_tracking_error = kwargs.get('daily_tracking_error')
        self.sell140cents = kwargs.get('sell140cents')
        self.sell10bps = kwargs.get('sell10bps')
        self.aggressive_offset_from_last = kwargs.get('aggressive_offset_from_last')
        self.longitude = kwargs.get('longitude')
        self.new_icu = kwargs.get('new_icu')
        self.market_cap = kwargs.get('market_cap')
        self.weighted_average_mid = kwargs.get('weighted_average_mid')
        self.cluster_region = kwargs.get('cluster_region')
        self.valoren = kwargs.get('valoren')
        self.index_name = kwargs.get('index_name')
        self.average_execution_price = kwargs.get('average_execution_price')
        self.proceeds_asset_ois_swap_spread1m = kwargs.get('proceeds_asset_ois_swap_spread1m')
        self.payoff_wtd = kwargs.get('payoff_wtd')
        self.basis = kwargs.get('basis')
        self.investment_rate_trend = kwargs.get('investment_rate_trend')
        self.gross_investment_mtd = kwargs.get('gross_investment_mtd')
        self.hedge_id = kwargs.get('hedge_id')
        self.sharpe_mtd = kwargs.get('sharpe_mtd')
        self.tcm_cost_horizon8_day = kwargs.get('tcm_cost_horizon8_day')
        self.residual_variance = kwargs.get('residual_variance')
        self.restrict_internal_derived_data = kwargs.get('restrict_internal_derived_data')
        self.adv5_day_pct = kwargs.get('adv5_day_pct')
        self.midpoint_fills_percentage = kwargs.get('midpoint_fills_percentage')
        self.open_interest = kwargs.get('open_interest')
        self.turnover_composite_unadjusted = kwargs.get('turnover_composite_unadjusted')
        self.fwd_points = kwargs.get('fwd_points')
        self.relative_return_wtd = kwargs.get('relative_return_wtd')
        self.units = kwargs.get('units')
        self.payer_rate_option = kwargs.get('payer_rate_option')
        self.asset_classifications_risk_country_name = kwargs.get('asset_classifications_risk_country_name')
        self.ext_mkt_point3 = kwargs.get('ext_mkt_point3')
        self.matched_maturity_swap_spread = kwargs.get('matched_maturity_swap_spread')
        self.city_name = kwargs.get('city_name')
        self.hourly_bucket = kwargs.get('hourly_bucket')
        self.average_implied_volatility = kwargs.get('average_implied_volatility')
        self.total_hospitalized_with_symptoms = kwargs.get('total_hospitalized_with_symptoms')
        self.days_open_realized_cash = kwargs.get('days_open_realized_cash')
        self.adjusted_high_price = kwargs.get('adjusted_high_price')
        self.proceeds_asset_ois_swap_spread = kwargs.get('proceeds_asset_ois_swap_spread')
        self.ext_mkt_point1 = kwargs.get('ext_mkt_point1')
        self.direction = kwargs.get('direction')
        self.ext_mkt_point2 = kwargs.get('ext_mkt_point2')
        self.sub_region_code = kwargs.get('sub_region_code')
        self.asset_parameters_fixed_rate = kwargs.get('asset_parameters_fixed_rate')
        self.is_estimated_return = kwargs.get('is_estimated_return')
        self.value_forecast = kwargs.get('value_forecast')
        self.total_icu = kwargs.get('total_icu')
        self.position_source_type = kwargs.get('position_source_type')
        self.previous_close_unrealized_cash = kwargs.get('previous_close_unrealized_cash')
        self.minimum_denomination = kwargs.get('minimum_denomination')
        self.future_value_notional = kwargs.get('future_value_notional')
        self.participation_rate = kwargs.get('participation_rate')
        self.obfr = kwargs.get('obfr')
        self.buy9point5bps = kwargs.get('buy9point5bps')
        self.option_lock_period = kwargs.get('option_lock_period')
        self.es_momentum_percentile = kwargs.get('es_momentum_percentile')
        self.adv_percentage = kwargs.get('adv_percentage')
        self.leg1_averaging_method = kwargs.get('leg1_averaging_method')
        self.turnover_composite = kwargs.get('turnover_composite')
        self.forecast_date = kwargs.get('forecast_date')
        self.internal_index_calc_region = kwargs.get('internal_index_calc_region')
        self.position_type = kwargs.get('position_type')
        self.sub_asset_class = kwargs.get('sub_asset_class')
        self.short_interest = kwargs.get('short_interest')
        self.reference_period = kwargs.get('reference_period')
        self.adjusted_volume = kwargs.get('adjusted_volume')
        self.underlying_asset_id_type = kwargs.get('underlying_asset_id_type')
        self.ctd_fwd_yield = kwargs.get('ctd_fwd_yield')
        self.sec_db = kwargs.get('sec_db')
        self.memory_used = kwargs.get('memory_used')
        self.bpe_quality_stars = kwargs.get('bpe_quality_stars')
        self.ctd = kwargs.get('ctd')
        self.intended_participation_rate = kwargs.get('intended_participation_rate')
        self.leg1_payment_type = kwargs.get('leg1_payment_type')
        self.trading_pnl = kwargs.get('trading_pnl')
        self.collateral_value_required = kwargs.get('collateral_value_required')
        self.buy45bps = kwargs.get('buy45bps')
        self.free_float_market_cap_ratio = kwargs.get('free_float_market_cap_ratio')
        self.price_to_earnings_positive = kwargs.get('price_to_earnings_positive')
        self.forecast = kwargs.get('forecast')
        self.forecast_value = kwargs.get('forecast_value')
        self.pnl = kwargs.get('pnl')
        self.volume_in_limit = kwargs.get('volume_in_limit')
        self.is_territory = kwargs.get('is_territory')
        self.leg2_delivery_point = kwargs.get('leg2_delivery_point')
        self.tcm_cost_horizon4_day = kwargs.get('tcm_cost_horizon4_day')
        self.styles = kwargs.get('styles')
        self.short_name = kwargs.get('short_name')
        self.reset_frequency1 = kwargs.get('reset_frequency1')
        self.buy4bps = kwargs.get('buy4bps')
        self.reset_frequency2 = kwargs.get('reset_frequency2')
        self.other_price_term = kwargs.get('other_price_term')
        self.bid_gspread = kwargs.get('bid_gspread')
        self.open_price = kwargs.get('open_price')
        self.ps_id = kwargs.get('ps_id')
        self.hit_rate_mtd = kwargs.get('hit_rate_mtd')
        self.fair_volatility = kwargs.get('fair_volatility')
        self.dollar_cross = kwargs.get('dollar_cross')
        self.portfolio_type = kwargs.get('portfolio_type')
        self.currency = kwargs.get('currency')
        self.cluster_class = kwargs.get('cluster_class')
        self.sell50bps = kwargs.get('sell50bps')
        self.future_month_m21 = kwargs.get('future_month_m21')
        self.bid_size = kwargs.get('bid_size')
        self.arrival_mid = kwargs.get('arrival_mid')
        self.asset_parameters_exchange_currency = kwargs.get('asset_parameters_exchange_currency')
        self.candidate_name = kwargs.get('candidate_name')
        self.implied_lognormal_volatility = kwargs.get('implied_lognormal_volatility')
        self.vwap_in_limit_unrealized_cash = kwargs.get('vwap_in_limit_unrealized_cash')
        self.rating_moodys = kwargs.get('rating_moodys')
        self.future_month_m26 = kwargs.get('future_month_m26')
        self.future_month_m25 = kwargs.get('future_month_m25')
        self.future_month_m24 = kwargs.get('future_month_m24')
        self.future_month_m23 = kwargs.get('future_month_m23')
        self.development_status = kwargs.get('development_status')
        self.future_month_m22 = kwargs.get('future_month_m22')
        self.flow_pct = kwargs.get('flow_pct')
        self.source = kwargs.get('source')
        self.asset_classifications_country_code = kwargs.get('asset_classifications_country_code')
        self.settle_drop = kwargs.get('settle_drop')
        self.data_set_sub_category = kwargs.get('data_set_sub_category')
        self.sell9point5bps = kwargs.get('sell9point5bps')
        self.quantity_bucket = kwargs.get('quantity_bucket')
        self.option_style_sdr = kwargs.get('option_style_sdr')
        self.oe_name = kwargs.get('oe_name')
        self.given = kwargs.get('given')
        self.leg2_day_count_convention = kwargs.get('leg2_day_count_convention')
        self.liquidity_score_sell = kwargs.get('liquidity_score_sell')
        self.delisting_date = kwargs.get('delisting_date')
        self.weight = kwargs.get('weight')
        self.accrued_interest = kwargs.get('accrued_interest')
        self.business_scope = kwargs.get('business_scope')
        self.wtd_degree_days = kwargs.get('wtd_degree_days')
        self.absolute_weight = kwargs.get('absolute_weight')
        self.measure = kwargs.get('measure')
        self.return30d = kwargs.get('return30d')
        self.temperature_hourly_forecast = kwargs.get('temperature_hourly_forecast')
        self.iceberg_tip_rate_type = kwargs.get('iceberg_tip_rate_type')
        self.sharpe_ytd = kwargs.get('sharpe_ytd')
        self.wind_speed_forecast = kwargs.get('wind_speed_forecast')
        self.gross_investment_ytd = kwargs.get('gross_investment_ytd')
        self.yield_price = kwargs.get('yield_price')
        self.payment_frequency_period_multiplier2 = kwargs.get('payment_frequency_period_multiplier2')
        self.payment_frequency_period_multiplier1 = kwargs.get('payment_frequency_period_multiplier1')
        self.leg1_total_notional_unit = kwargs.get('leg1_total_notional_unit')
        self.absolute_attribution = kwargs.get('absolute_attribution')
        self.issue_price = kwargs.get('issue_price')
        self.ask_high = kwargs.get('ask_high')
        self.expected_data_quality = kwargs.get('expected_data_quality')
        self.region_name = kwargs.get('region_name')
        self.value_revised = kwargs.get('value_revised')
        self.discretion_upper_bound = kwargs.get('discretion_upper_bound')
        self.adjusted_trade_price = kwargs.get('adjusted_trade_price')
        self.forecast_time = kwargs.get('forecast_time')
        self.iso_subdivision_code_alpha2 = kwargs.get('iso_subdivision_code_alpha2')
        self.ctd_conversion_factor = kwargs.get('ctd_conversion_factor')
        self.proceeds_asset_swap_spread = kwargs.get('proceeds_asset_swap_spread')
        self.is_adr = kwargs.get('is_adr')
        self.issue_date = kwargs.get('issue_date')
        self.service_id = kwargs.get('service_id')
        self.yes = kwargs.get('yes')
        self.g_score = kwargs.get('g_score')
        self.market_value = kwargs.get('market_value')
        self.entity_id = kwargs.get('entity_id')
        self.notional_currency1 = kwargs.get('notional_currency1')
        self.net_debt_to_ebitda = kwargs.get('net_debt_to_ebitda')
        self.num_units_upper = kwargs.get('num_units_upper')
        self.notional_currency2 = kwargs.get('notional_currency2')
        self.in_limit_participation_rate = kwargs.get('in_limit_participation_rate')
        self.pressure_forecast = kwargs.get('pressure_forecast')
        self.paid = kwargs.get('paid')
        self.fixed_rate = kwargs.get('fixed_rate')
        self.short = kwargs.get('short')
        self.time = kwargs.get('time')
        self.buy4point5bps = kwargs.get('buy4point5bps')
        self.sell30cents = kwargs.get('sell30cents')
        self.event_end_date_time = kwargs.get('event_end_date_time')
        self.leg1_payment_frequency = kwargs.get('leg1_payment_frequency')
        self.cm_id = kwargs.get('cm_id')
        self.taxonomy = kwargs.get('taxonomy')
        self.buy45cents = kwargs.get('buy45cents')
        self.measures = kwargs.get('measures')
        self.seasonal_adjustment = kwargs.get('seasonal_adjustment')
        self.rank_wtd = kwargs.get('rank_wtd')
        self.underlyer = kwargs.get('underlyer')
        self.created_time = kwargs.get('created_time')
        self.return1yr = kwargs.get('return1yr')
        self.identifier = kwargs.get('identifier')
        self.price_unit = kwargs.get('price_unit')
        self.trade_report_ref_id = kwargs.get('trade_report_ref_id')
        self.subdivision_id = kwargs.get('subdivision_id')
        self.unadjusted_low = kwargs.get('unadjusted_low')
        self.buy160cents = kwargs.get('buy160cents')
        self.portfolio_id = kwargs.get('portfolio_id')
        self.z_spread = kwargs.get('z_spread')
        self.floating_rate_reset_frequency_period2 = kwargs.get('floating_rate_reset_frequency_period2')
        self.cap_floor_atm_fwd_rate = kwargs.get('cap_floor_atm_fwd_rate')
        self.es_percentile = kwargs.get('es_percentile')
        self.tdapi = kwargs.get('tdapi')
        self.floating_rate_reset_frequency_period1 = kwargs.get('floating_rate_reset_frequency_period1')
        self.location_code = kwargs.get('location_code')
        self.rcic = kwargs.get('rcic')
        self.name_raw = kwargs.get('name_raw')
        self.simon_asset_tags = kwargs.get('simon_asset_tags')
        self.hit_rate_qtd = kwargs.get('hit_rate_qtd')
        self.primary_volume_in_limit = kwargs.get('primary_volume_in_limit')
        self.precipitation_daily_forecast_percent = kwargs.get('precipitation_daily_forecast_percent')
        self.aum_end = kwargs.get('aum_end')
        self.premium = kwargs.get('premium')
        self.low = kwargs.get('low')
        self.cross_group = kwargs.get('cross_group')
        self.report_run_time = kwargs.get('report_run_time')
        self.five_day_price_change_bps = kwargs.get('five_day_price_change_bps')
        self.holdings = kwargs.get('holdings')
        self.precipitation_daily_forecast = kwargs.get('precipitation_daily_forecast')
        self.fixed_recovery_cds_final_price = kwargs.get('fixed_recovery_cds_final_price')
        self.price_method = kwargs.get('price_method')
        self.asset_parameters_fixed_rate_frequency = kwargs.get('asset_parameters_fixed_rate_frequency')
        self.ois_xccy = kwargs.get('ois_xccy')
        self.days_open = kwargs.get('days_open')
        self.buy110cents = kwargs.get('buy110cents')
        self.average_spread_bps = kwargs.get('average_spread_bps')
        self.buy55cents = kwargs.get('buy55cents')
        self.underlying_asset_id_sdr = kwargs.get('underlying_asset_id_sdr')
        self.future_month_q26 = kwargs.get('future_month_q26')
        self.issue_size = kwargs.get('issue_size')
        self.future_month_q25 = kwargs.get('future_month_q25')
        self.future_month_q24 = kwargs.get('future_month_q24')
        self.future_month_q23 = kwargs.get('future_month_q23')
        self.future_month_q22 = kwargs.get('future_month_q22')
        self.pending_loan_count = kwargs.get('pending_loan_count')
        self.future_month_q21 = kwargs.get('future_month_q21')
        self.price_spot_stop_loss_unit = kwargs.get('price_spot_stop_loss_unit')
        self.price_range_in_ticks_description = kwargs.get('price_range_in_ticks_description')
        self.trade_volume = kwargs.get('trade_volume')
        self.primary_country_ric = kwargs.get('primary_country_ric')
        self.option_expiration_frequency = kwargs.get('option_expiration_frequency')
        self.is_active = kwargs.get('is_active')
        self.use_machine_learning = kwargs.get('use_machine_learning')
        self.growth_score = kwargs.get('growth_score')
        self.buffer_threshold = kwargs.get('buffer_threshold')
        self.buy120cents = kwargs.get('buy120cents')
        self.matched_maturity_swap_rate = kwargs.get('matched_maturity_swap_rate')
        self.underlying_asset_name = kwargs.get('underlying_asset_name')
        self.primary_vwap = kwargs.get('primary_vwap')
        self.exchange_type_id = kwargs.get('exchange_type_id')
        self.basis_swap_rate = kwargs.get('basis_swap_rate')
        self.exchange_code = kwargs.get('exchange_code')
        self.group = kwargs.get('group')
        self.asset_parameters_termination_date = kwargs.get('asset_parameters_termination_date')
        self.estimated_spread = kwargs.get('estimated_spread')
        self.yield_change_on_day = kwargs.get('yield_change_on_day')
        self.created = kwargs.get('created')
        self.auto_tags = kwargs.get('auto_tags')
        self.tcm_cost = kwargs.get('tcm_cost')
        self.sustain_japan = kwargs.get('sustain_japan')
        self.history_start_date = kwargs.get('history_start_date')
        self.bid_spread = kwargs.get('bid_spread')
        self.percentage_complete = kwargs.get('percentage_complete')
        self.hedge_tracking_error = kwargs.get('hedge_tracking_error')
        self.term_status = kwargs.get('term_status')
        self.wind_speed_type = kwargs.get('wind_speed_type')
        self.strike_price = kwargs.get('strike_price')
        self.par_asset_swap_spread12m = kwargs.get('par_asset_swap_spread12m')
        self.trade_report_id = kwargs.get('trade_report_id')
        self.adjusted_open_price = kwargs.get('adjusted_open_price')
        self.country_id = kwargs.get('country_id')
        self.point = kwargs.get('point')
        self.pnl_mtd = kwargs.get('pnl_mtd')
        self.total_returns = kwargs.get('total_returns')
        self.lender = kwargs.get('lender')
        self.ann_return1_year = kwargs.get('ann_return1_year')
        self.ctd_fwd_dv01 = kwargs.get('ctd_fwd_dv01')
        self.eff_yield7_day = kwargs.get('eff_yield7_day')
        self.meeting_date = kwargs.get('meeting_date')
        self.calendar_spread_mispricing = kwargs.get('calendar_spread_mispricing')
        self.buy140cents = kwargs.get('buy140cents')
        self.price_notation2_type = kwargs.get('price_notation2_type')
        self.fund_focus = kwargs.get('fund_focus')
        self.relative_strike = kwargs.get('relative_strike')
        self.flagship = kwargs.get('flagship')
        self.additional_price_notation = kwargs.get('additional_price_notation')
        self.factor_category = kwargs.get('factor_category')
        self.equity_delta = kwargs.get('equity_delta')
        self.gross_weight = kwargs.get('gross_weight')
        self.listed = kwargs.get('listed')
        self.sell7bps = kwargs.get('sell7bps')
        self.earnings_record_type = kwargs.get('earnings_record_type')
        self.mean = kwargs.get('mean')
        self.ask_yield = kwargs.get('ask_yield')
        self.shock_style = kwargs.get('shock_style')
        self.methodology = kwargs.get('methodology')
        self.buy25cents = kwargs.get('buy25cents')
        self.amount_outstanding = kwargs.get('amount_outstanding')
        self.market_pnl = kwargs.get('market_pnl')
        self.sustain_asia_ex_japan = kwargs.get('sustain_asia_ex_japan')
        self.sell6point5bps = kwargs.get('sell6point5bps')
        self.neighbour_asset_id = kwargs.get('neighbour_asset_id')
        self.count_ideas_ytd = kwargs.get('count_ideas_ytd')
        self.simon_intl_asset_tags = kwargs.get('simon_intl_asset_tags')
        self.path = kwargs.get('path')
        self.vwap_unrealized_cash = kwargs.get('vwap_unrealized_cash')
        self.payoff_mtd = kwargs.get('payoff_mtd')
        self.spread2 = kwargs.get('spread2')
        self.bos_in_bps_label = kwargs.get('bos_in_bps_label')
        self.spread1 = kwargs.get('spread1')
        self.bos_in_bps = kwargs.get('bos_in_bps')
        self.point_class = kwargs.get('point_class')
        self.fx_spot = kwargs.get('fx_spot')
        self.restrict_named_individuals = kwargs.get('restrict_named_individuals')
        self.hedge_volatility = kwargs.get('hedge_volatility')
        self.tags = kwargs.get('tags')
        self.population = kwargs.get('population')
        self.underlying_asset_id = kwargs.get('underlying_asset_id')
        self.real_long_rates_contribution = kwargs.get('real_long_rates_contribution')
        self.pctprices_return = kwargs.get('pctprices_return')
        self.domain = kwargs.get('domain')
        self.buy80cents = kwargs.get('buy80cents')
        self.forward_tenor = kwargs.get('forward_tenor')
        self.average_price = kwargs.get('average_price')
        self.target_price_realized_bps = kwargs.get('target_price_realized_bps')
        self.leg2_fixed_rate = kwargs.get('leg2_fixed_rate')
        self.share_class_assets = kwargs.get('share_class_assets')
        self.annuity = kwargs.get('annuity')
        self.total_count = kwargs.get('total_count')
        self.quote_type = kwargs.get('quote_type')
        self.corporate_action_status = kwargs.get('corporate_action_status')
        self.pegged_tip_size = kwargs.get('pegged_tip_size')
        self.uid = kwargs.get('uid')
        self.es_policy_percentile = kwargs.get('es_policy_percentile')
        self.usd_ois = kwargs.get('usd_ois')
        self.term = kwargs.get('term')
        self.restrict_internal_gs_ntk = kwargs.get('restrict_internal_gs_ntk')
        self.tcm_cost_participation_rate100_pct = kwargs.get('tcm_cost_participation_rate100_pct')
        self.relative_universe = kwargs.get('relative_universe')
        self.measure_idx = kwargs.get('measure_idx')
        self.fred_id = kwargs.get('fred_id')
        self.twi_contribution = kwargs.get('twi_contribution')
        self.cloud_cover_type = kwargs.get('cloud_cover_type')
        self.delisted = kwargs.get('delisted')
        self.regional_focus = kwargs.get('regional_focus')
        self.volume_primary = kwargs.get('volume_primary')
        self.asset_parameters_payer_designated_maturity = kwargs.get('asset_parameters_payer_designated_maturity')
        self.buy30cents = kwargs.get('buy30cents')
        self.funding_bid_price = kwargs.get('funding_bid_price')
        self.series = kwargs.get('series')
        self.sell3bps = kwargs.get('sell3bps')
        self.settlement_price = kwargs.get('settlement_price')
        self.quarter = kwargs.get('quarter')
        self.sell18bps = kwargs.get('sell18bps')
        self.asset_parameters_floating_rate_option = kwargs.get('asset_parameters_floating_rate_option')
        self.realized_vwap_performance_bps = kwargs.get('realized_vwap_performance_bps')
        self.vote_share = kwargs.get('vote_share')
        self.servicing_cost_short_pnl = kwargs.get('servicing_cost_short_pnl')
        self.total_confirmed = kwargs.get('total_confirmed')
        self.economic_forecast = kwargs.get('economic_forecast')
        self.plot_id = kwargs.get('plot_id')
        self.cluster_description = kwargs.get('cluster_description')
        self.concentration_limit = kwargs.get('concentration_limit')
        self.wind_speed = kwargs.get('wind_speed')
        self.observation_hour = kwargs.get('observation_hour')
        self.signal = kwargs.get('signal')
        self.borrower_id = kwargs.get('borrower_id')
        self.data_product = kwargs.get('data_product')
        self.buy7point5bps = kwargs.get('buy7point5bps')
        self.limit_price = kwargs.get('limit_price')
        self.bm_prime_id = kwargs.get('bm_prime_id')
        self.data_type = kwargs.get('data_type')
        self.count = kwargs.get('count')
        self.conviction = kwargs.get('conviction')
        self.rfqstate = kwargs.get('rfqstate')
        self.benchmark_maturity = kwargs.get('benchmark_maturity')
        self.gross_flow_normalized = kwargs.get('gross_flow_normalized')
        self.buy14bps = kwargs.get('buy14bps')
        self.factor_id = kwargs.get('factor_id')
        self.future_month_v26 = kwargs.get('future_month_v26')
        self.sts_fx_currency = kwargs.get('sts_fx_currency')
        self.future_month_v25 = kwargs.get('future_month_v25')
        self.bid_change = kwargs.get('bid_change')
        self.month = kwargs.get('month')
        self.future_month_v24 = kwargs.get('future_month_v24')
        self.investment_wtd = kwargs.get('investment_wtd')
        self.future_month_v23 = kwargs.get('future_month_v23')
        self.future_month_v22 = kwargs.get('future_month_v22')
        self.future_month_v21 = kwargs.get('future_month_v21')
        self.expiration = kwargs.get('expiration')
        self.leg2_reset_frequency = kwargs.get('leg2_reset_frequency')
        self.controversy_score = kwargs.get('controversy_score')
        self.proceed_asset_swap_spread = kwargs.get('proceed_asset_swap_spread')
        self.concentration_level = kwargs.get('concentration_level')
        self.importance = kwargs.get('importance')
        self.asset_classifications_gics_sector = kwargs.get('asset_classifications_gics_sector')
        self.sts_asset_name = kwargs.get('sts_asset_name')
        self.net_exposure_classification = kwargs.get('net_exposure_classification')
        self.settlement_method = kwargs.get('settlement_method')
        self.receiver_designated_maturity = kwargs.get('receiver_designated_maturity')
        self.title = kwargs.get('title')
        self.x_ref_type_id = kwargs.get('x_ref_type_id')
        self.duration = kwargs.get('duration')
        self.load = kwargs.get('load')
        self.alpha = kwargs.get('alpha')
        self.company = kwargs.get('company')
        self.settlement_frequency = kwargs.get('settlement_frequency')
        self.dist_avg7_day = kwargs.get('dist_avg7_day')
        self.in_risk_model = kwargs.get('in_risk_model')
        self.daily_net_shareholder_flows_percent = kwargs.get('daily_net_shareholder_flows_percent')
        self.filled_notional_local = kwargs.get('filled_notional_local')
        self.ever_hospitalized = kwargs.get('ever_hospitalized')
        self.meeting_number = kwargs.get('meeting_number')
        self.mid_gspread = kwargs.get('mid_gspread')
        self.days_open_unrealized_bps = kwargs.get('days_open_unrealized_bps')
        self.long_level = kwargs.get('long_level')
        self.data_description = kwargs.get('data_description')
        self.temperature_type = kwargs.get('temperature_type')
        self.gsideid = kwargs.get('gsideid')
        self.repo_rate = kwargs.get('repo_rate')
        self.division = kwargs.get('division')
        self.cloud_cover_daily_forecast = kwargs.get('cloud_cover_daily_forecast')
        self.wind_speed_daily_forecast = kwargs.get('wind_speed_daily_forecast')
        self.execution_venue_type = kwargs.get('execution_venue_type')
        self.asset_parameters_floating_rate_day_count_fraction = kwargs.get(
            'asset_parameters_floating_rate_day_count_fraction')
        self.trade_action = kwargs.get('trade_action')
        self.action = kwargs.get('action')
        self.ctd_yield = kwargs.get('ctd_yield')
        self.arrival_haircut_vwap_normalized = kwargs.get('arrival_haircut_vwap_normalized')
        self.price_component = kwargs.get('price_component')
        self.queue_clock_time_description = kwargs.get('queue_clock_time_description')
        self.asset_parameters_receiver_day_count_fraction = kwargs.get('asset_parameters_receiver_day_count_fraction')
        self.percent_mid_execution_quantity = kwargs.get('percent_mid_execution_quantity')
        self.delta_strike = kwargs.get('delta_strike')
        self.cloud_cover = kwargs.get('cloud_cover')
        self.asset_parameters_notional_currency = kwargs.get('asset_parameters_notional_currency')
        self.buy18bps = kwargs.get('buy18bps')
        self.value_actual = kwargs.get('value_actual')
        self.upi = kwargs.get('upi')
        self.fixed_rate1 = kwargs.get('fixed_rate1')
        self.collateral_currency = kwargs.get('collateral_currency')
        self.original_country = kwargs.get('original_country')
        self.fixed_rate2 = kwargs.get('fixed_rate2')
        self.field = kwargs.get('field')
        self.geographic_focus = kwargs.get('geographic_focus')
        self.days_open_realized_bps = kwargs.get('days_open_realized_bps')
        self.fx_risk_premium_index = kwargs.get('fx_risk_premium_index')
        self.skew = kwargs.get('skew')
        self.status = kwargs.get('status')
        self.notional_currency = kwargs.get('notional_currency')
        self.sustain_emerging_markets = kwargs.get('sustain_emerging_markets')
        self.event_date_time = kwargs.get('event_date_time')
        self.leg1_designated_maturity = kwargs.get('leg1_designated_maturity')
        self.total_price = kwargs.get('total_price')
        self.on_behalf_of = kwargs.get('on_behalf_of')
        self.test_type = kwargs.get('test_type')
        self.accrued_interest_standard = kwargs.get('accrued_interest_standard')
        self.future_month_z26 = kwargs.get('future_month_z26')
        self.future_month_z25 = kwargs.get('future_month_z25')
        self.ccg_code = kwargs.get('ccg_code')
        self.short_exposure = kwargs.get('short_exposure')
        self.leg1_fixed_payment_currency = kwargs.get('leg1_fixed_payment_currency')
        self.__map = kwargs.get('map_')
        self.arrival_haircut_vwap = kwargs.get('arrival_haircut_vwap')
        self.execution_days = kwargs.get('execution_days')
        self.recall_due_date = kwargs.get('recall_due_date')
        self.forward = kwargs.get('forward')
        self.strike = kwargs.get('strike')
        self.spread_limit = kwargs.get('spread_limit')
        self.sopr = kwargs.get('sopr')
        self.other_payment_amount = kwargs.get('other_payment_amount')
        self.product_scope = kwargs.get('product_scope')
        self.redemption_period = kwargs.get('redemption_period')
        self.asset_parameters_issuer_type = kwargs.get('asset_parameters_issuer_type')
        self.currency1 = kwargs.get('currency1')
        self.currency2 = kwargs.get('currency2')
        self.previous_close_realized_bps = kwargs.get('previous_close_realized_bps')
        self.days_since_reported = kwargs.get('days_since_reported')
        self.event_status = kwargs.get('event_status')
        self.vwap_in_limit = kwargs.get('vwap_in_limit')
        self.fwd_duration = kwargs.get('fwd_duration')
        self.__return = kwargs.get('return_')
        self.is_pair_basket = kwargs.get('is_pair_basket')
        self.notional_amount = kwargs.get('notional_amount')
        self.option_premium_amount = kwargs.get('option_premium_amount')
        self.pay_or_receive = kwargs.get('pay_or_receive')
        self.total_severe = kwargs.get('total_severe')
        self.unexecuted_notional_usd = kwargs.get('unexecuted_notional_usd')
        self.expected_residual_percentage = kwargs.get('expected_residual_percentage')
        self.maturity_date = kwargs.get('maturity_date')
        self.trace_adv_sell = kwargs.get('trace_adv_sell')
        self.event_name = kwargs.get('event_name')
        self.address_line2 = kwargs.get('address_line2')
        self.indication_of_other_price_affecting_term = kwargs.get('indication_of_other_price_affecting_term')
        self.unadjusted_bid = kwargs.get('unadjusted_bid')
        self.backtest_type = kwargs.get('backtest_type')
        self.gsdeer = kwargs.get('gsdeer')
        self.asset_parameters_issuer = kwargs.get('asset_parameters_issuer')
        self.g_regional_percentile = kwargs.get('g_regional_percentile')
        self.coverage_checked = kwargs.get('coverage_checked')
        self.ois_xccy_ex_spike = kwargs.get('ois_xccy_ex_spike')
        self.total_risk = kwargs.get('total_risk')
        self.mnav = kwargs.get('mnav')
        self.market_volume = kwargs.get('market_volume')
        self.swap_annuity = kwargs.get('swap_annuity')
        self.par_asset_swap_spread = kwargs.get('par_asset_swap_spread')
        self.curr_yield7_day = kwargs.get('curr_yield7_day')
        self.pressure = kwargs.get('pressure')
        self.short_description = kwargs.get('short_description')
        self.future_month_z24 = kwargs.get('future_month_z24')
        self.feed = kwargs.get('feed')
        self.future_month_z23 = kwargs.get('future_month_z23')
        self.mkt_point1 = kwargs.get('mkt_point1')
        self.future_month_z22 = kwargs.get('future_month_z22')
        self.future_month_z21 = kwargs.get('future_month_z21')
        self.future_month_z20 = kwargs.get('future_month_z20')
        self.asset_parameters_commodity_sector = kwargs.get('asset_parameters_commodity_sector')
        self.price_notation2 = kwargs.get('price_notation2')
        self.market_buffer_threshold = kwargs.get('market_buffer_threshold')
        self.price_notation3 = kwargs.get('price_notation3')
        self.mkt_point3 = kwargs.get('mkt_point3')
        self.mkt_point2 = kwargs.get('mkt_point2')
        self.leg2_type = kwargs.get('leg2_type')
        self.mkt_point4 = kwargs.get('mkt_point4')
        self.degree_days_type = kwargs.get('degree_days_type')
        self.sentiment = kwargs.get('sentiment')
        self.investment_income = kwargs.get('investment_income')
        self.group_type = kwargs.get('group_type')
        self.forward_point_imm = kwargs.get('forward_point_imm')
        self.twap = kwargs.get('twap')
        self.client_short_name = kwargs.get('client_short_name')
        self.group_category = kwargs.get('group_category')
        self.bid_plus_ask = kwargs.get('bid_plus_ask')
        self.foreign_ccy_rate = kwargs.get('foreign_ccy_rate')
        self.election_odds = kwargs.get('election_odds')
        self.wind_direction_forecast = kwargs.get('wind_direction_forecast')
        self.require_anon_client_name = kwargs.get('require_anon_client_name')
        self.pricing_location = kwargs.get('pricing_location')
        self.beta = kwargs.get('beta')
        self.last_returns_end_date = kwargs.get('last_returns_end_date')
        self.upfront_payment_date = kwargs.get('upfront_payment_date')
        self.sell1point5bps = kwargs.get('sell1point5bps')
        self.long_exposure = kwargs.get('long_exposure')
        self.sell4point5bps = kwargs.get('sell4point5bps')
        self.tcm_cost_participation_rate20_pct = kwargs.get('tcm_cost_participation_rate20_pct')
        self.venue_type = kwargs.get('venue_type')
        self.current_activity_indicator = kwargs.get('current_activity_indicator')
        self.multi_asset_class_swap = kwargs.get('multi_asset_class_swap')
        self.delta_change_id = kwargs.get('delta_change_id')
        self.implementation_id = kwargs.get('implementation_id')
        self.leg1_fixed_payment = kwargs.get('leg1_fixed_payment')
        self.es_numeric_score = kwargs.get('es_numeric_score')
        self.in_benchmark = kwargs.get('in_benchmark')
        self.action_sdr = kwargs.get('action_sdr')
        self.quantity_frequency = kwargs.get('quantity_frequency')
        self.count_ideas_qtd = kwargs.get('count_ideas_qtd')
        self.knock_out_price = kwargs.get('knock_out_price')
        self.spread_currency1 = kwargs.get('spread_currency1')
        self.spread_currency2 = kwargs.get('spread_currency2')
        self.current_supply = kwargs.get('current_supply')
        self.ctd_asset_id = kwargs.get('ctd_asset_id')
        self.buy10bps = kwargs.get('buy10bps')
        self.precipitation = kwargs.get('precipitation')
        self.value_type = kwargs.get('value_type')
        self.beta_adjusted_net_exposure = kwargs.get('beta_adjusted_net_exposure')
        self.estimated_rod_volume = kwargs.get('estimated_rod_volume')
        self.sell14bps = kwargs.get('sell14bps')
        self.excess_return_price = kwargs.get('excess_return_price')
        self.fx_pnl = kwargs.get('fx_pnl')
        self.leg2_floating_rate_index = kwargs.get('leg2_floating_rate_index')
        self.asset_classifications_gics_industry_group = kwargs.get('asset_classifications_gics_industry_group')
        self.index_constituents = kwargs.get('index_constituents')
        self.lending_sec_id = kwargs.get('lending_sec_id')
        self.dollar_duration = kwargs.get('dollar_duration')
        self.equity_theta = kwargs.get('equity_theta')
        self.dv01 = kwargs.get('dv01')
        self.start_date = kwargs.get('start_date')
        self.mixed_swap = kwargs.get('mixed_swap')
        self.swaption_premium = kwargs.get('swaption_premium')
        self.snowfall = kwargs.get('snowfall')
        self.liquidity_bucket_buy = kwargs.get('liquidity_bucket_buy')
        self.day_open = kwargs.get('day_open')
        self.mic = kwargs.get('mic')
        self.hurdle_type = kwargs.get('hurdle_type')
        self.latitude = kwargs.get('latitude')
        self.mid = kwargs.get('mid')
        self.implied_repo = kwargs.get('implied_repo')
        self.long = kwargs.get('long')
        self.first_execution_time = kwargs.get('first_execution_time')
        self.covered_bond = kwargs.get('covered_bond')
        self.region_code = kwargs.get('region_code')
        self.buy20cents = kwargs.get('buy20cents')
        self.long_weight = kwargs.get('long_weight')
        self.calculation_time = kwargs.get('calculation_time')
        self.liquidity_bucket_sell = kwargs.get('liquidity_bucket_sell')
        self.days_open_unrealized_cash = kwargs.get('days_open_unrealized_cash')
        self.temperature = kwargs.get('temperature')
        self.average_realized_variance = kwargs.get('average_realized_variance')
        self.leg1_commodity_underlyer_id = kwargs.get('leg1_commodity_underlyer_id')
        self.rating_fitch = kwargs.get('rating_fitch')
        self.financial_returns_score = kwargs.get('financial_returns_score')
        self.year_or_quarter = kwargs.get('year_or_quarter')
        self.non_symbol_dimensions = kwargs.get('non_symbol_dimensions')
        self.commodities_forecast = kwargs.get('commodities_forecast')
        self.covid19_by_state = kwargs.get('covid19_by_state')
        self.percentage_expected_residual = kwargs.get('percentage_expected_residual')
        self.hospital_name = kwargs.get('hospital_name')
        self.buy90cents = kwargs.get('buy90cents')
        self.period_type = kwargs.get('period_type')
        self.asset_classifications_country_name = kwargs.get('asset_classifications_country_name')
        self.total_hospitalized = kwargs.get('total_hospitalized')
        self.pegged_refill_interval = kwargs.get('pegged_refill_interval')
        self.fatalities_probable = kwargs.get('fatalities_probable')
        self.administrative_region = kwargs.get('administrative_region')
        self.__open = kwargs.get('open_')
        self.cusip = kwargs.get('cusip')
        self.total_confirmed_by_state = kwargs.get('total_confirmed_by_state')
        self.idea_activity_time = kwargs.get('idea_activity_time')
        self.wind_attribute = kwargs.get('wind_attribute')
        self.spread_option_atm_fwd_rate = kwargs.get('spread_option_atm_fwd_rate')
        self.net_exposure = kwargs.get('net_exposure')
        self.option_entitlement = kwargs.get('option_entitlement')
        self.is_legacy_pair_basket = kwargs.get('is_legacy_pair_basket')
        self.issuer_type = kwargs.get('issuer_type')
        self.buy70cents = kwargs.get('buy70cents')
        self.strike_reference = kwargs.get('strike_reference')
        self.asset_count = kwargs.get('asset_count')
        self.is_order_in_limit = kwargs.get('is_order_in_limit')
        self.fundamental_metric = kwargs.get('fundamental_metric')
        self.quote_status_id = kwargs.get('quote_status_id')
        self.absolute_value = kwargs.get('absolute_value')
        self.closing_report = kwargs.get('closing_report')
        self.redemption_notice_period = kwargs.get('redemption_notice_period')
        self.previous_total_confirmed = kwargs.get('previous_total_confirmed')
        self.long_tenor = kwargs.get('long_tenor')
        self.multiplier = kwargs.get('multiplier')
        self.buy40cents = kwargs.get('buy40cents')
        self.asset_count_priced = kwargs.get('asset_count_priced')
        self.vote_direction = kwargs.get('vote_direction')
        self.implied_repo_rate = kwargs.get('implied_repo_rate')
        self.settlement_currency = kwargs.get('settlement_currency')
        self.wtd_degree_days_forecast = kwargs.get('wtd_degree_days_forecast')
        self.indication_of_collateralization = kwargs.get('indication_of_collateralization')
        self.future_month_n26 = kwargs.get('future_month_n26')
        self.lending_partner_fee = kwargs.get('lending_partner_fee')
        self.future_month_n25 = kwargs.get('future_month_n25')
        self.future_month_n24 = kwargs.get('future_month_n24')
        self.primary_vwap_realized_bps = kwargs.get('primary_vwap_realized_bps')
        self.future_month_n23 = kwargs.get('future_month_n23')
        self.future_month_n22 = kwargs.get('future_month_n22')
        self.future_month_n21 = kwargs.get('future_month_n21')
        self.break_even_inflation = kwargs.get('break_even_inflation')
        self.pnl_ytd = kwargs.get('pnl_ytd')
        self.leg1_return_type = kwargs.get('leg1_return_type')
        self.tenor2 = kwargs.get('tenor2')
        self.reset_frequency = kwargs.get('reset_frequency')
        self.asset_parameters_payer_frequency = kwargs.get('asset_parameters_payer_frequency')
        self.degree_days_forecast = kwargs.get('degree_days_forecast')
        self.is_manually_silenced = kwargs.get('is_manually_silenced')
        self.buy3bps = kwargs.get('buy3bps')
        self.last_updated_by_id = kwargs.get('last_updated_by_id')
        self.legal_entity_acct = kwargs.get('legal_entity_acct')
        self.target_shareholder_meeting_date = kwargs.get('target_shareholder_meeting_date')
        self.pace_of_rollp0 = kwargs.get('pace_of_rollp0')
        self.controversy_percentile = kwargs.get('controversy_percentile')
        self.leg1_notional_currency = kwargs.get('leg1_notional_currency')
        self.compliance_effective_time = kwargs.get('compliance_effective_time')
        self.expiration_date = kwargs.get('expiration_date')
        self.floating_rate_day_count_fraction = kwargs.get('floating_rate_day_count_fraction')
        self.call_last_date = kwargs.get('call_last_date')
        self.factor_return = kwargs.get('factor_return')
        self.passive_flow_ratio = kwargs.get('passive_flow_ratio')
        self.composite5_day_adv = kwargs.get('composite5_day_adv')
        self.marginal_contribution_to_risk = kwargs.get('marginal_contribution_to_risk')
        self.close_date = kwargs.get('close_date')
        self.temperature_hour_forecast = kwargs.get('temperature_hour_forecast')
        self.new_ideas_wtd = kwargs.get('new_ideas_wtd')
        self.asset_class_sdr = kwargs.get('asset_class_sdr')
        self.yield_to_worst = kwargs.get('yield_to_worst')
        self.closing_price = kwargs.get('closing_price')
        self.turnover_composite_adjusted = kwargs.get('turnover_composite_adjusted')
        self.comment = kwargs.get('comment')
        self.source_symbol = kwargs.get('source_symbol')
        self.ask_unadjusted = kwargs.get('ask_unadjusted')
        self.restrict_external_derived_data = kwargs.get('restrict_external_derived_data')
        self.ask_change = kwargs.get('ask_change')
        self.count_ideas_mtd = kwargs.get('count_ideas_mtd')
        self.end_date = kwargs.get('end_date')
        self.sunshine = kwargs.get('sunshine')
        self.contract_type = kwargs.get('contract_type')
        self.momentum_type = kwargs.get('momentum_type')
        self.specific_risk = kwargs.get('specific_risk')
        self.free_float_market_cap = kwargs.get('free_float_market_cap')
        self.mdapi = kwargs.get('mdapi')
        self.payoff_qtd = kwargs.get('payoff_qtd')
        self.loss = kwargs.get('loss')
        self.midcurve_vol = kwargs.get('midcurve_vol')
        self.sell6bps = kwargs.get('sell6bps')
        self.trading_cost_pnl = kwargs.get('trading_cost_pnl')
        self.price_notation_type = kwargs.get('price_notation_type')
        self.price = kwargs.get('price')
        self.payment_quantity = kwargs.get('payment_quantity')
        self.redemption_date = kwargs.get('redemption_date')
        self.leg2_notional_currency = kwargs.get('leg2_notional_currency')
        self.sub_region = kwargs.get('sub_region')
        self.product_id = kwargs.get('product_id')
        self.benchmark = kwargs.get('benchmark')
        self.nvt_adj = kwargs.get('nvt_adj')
        self.tcm_cost_participation_rate15_pct = kwargs.get('tcm_cost_participation_rate15_pct')
        self.fiscal_year = kwargs.get('fiscal_year')
        self.recall_date = kwargs.get('recall_date')
        self.internal = kwargs.get('internal')
        self.gender = kwargs.get('gender')
        self.asset_classifications_gics_industry = kwargs.get('asset_classifications_gics_industry')
        self.adjusted_bid_price = kwargs.get('adjusted_bid_price')
        self.low_unadjusted = kwargs.get('low_unadjusted')
        self.macs_secondary_asset_class = kwargs.get('macs_secondary_asset_class')
        self.confirmed_per_million = kwargs.get('confirmed_per_million')
        self.exchange_rate_basis = kwargs.get('exchange_rate_basis')
        self.data_source_id = kwargs.get('data_source_id')
        self.integrated_score = kwargs.get('integrated_score')
        self.buy7bps = kwargs.get('buy7bps')
        self.arrival_mid_unrealized_cash = kwargs.get('arrival_mid_unrealized_cash')
        self.knock_in_price = kwargs.get('knock_in_price')
        self.event = kwargs.get('event')
        self.is_intraday_auction = kwargs.get('is_intraday_auction')
        self.location_name = kwargs.get('location_name')
        self.coupon = kwargs.get('coupon')
        self.percentage_auction_executed_quantity = kwargs.get('percentage_auction_executed_quantity')
        self.avg_yield7_day = kwargs.get('avg_yield7_day')
        self.reference_rate_eur = kwargs.get('reference_rate_eur')
        self.original_dissemination_id = kwargs.get('original_dissemination_id')
        self.total_on_vent = kwargs.get('total_on_vent')
        self.twap_unrealized_cash = kwargs.get('twap_unrealized_cash')
        self.sts_credit_market = kwargs.get('sts_credit_market')
        self.ons_code = kwargs.get('ons_code')
        self.passive_touch_fills_percentage = kwargs.get('passive_touch_fills_percentage')
        self.seniority = kwargs.get('seniority')
        self.leg1_index = kwargs.get('leg1_index')
        self.high_unadjusted = kwargs.get('high_unadjusted')
        self.submission_event = kwargs.get('submission_event')
        self.tv_product_mnemonic = kwargs.get('tv_product_mnemonic')
        self.avg_trade_rate_label = kwargs.get('avg_trade_rate_label')
        self.last_activity_date = kwargs.get('last_activity_date')
        self.dissemination_time = kwargs.get('dissemination_time')
        self.price_to_cash = kwargs.get('price_to_cash')
        self.buy10cents = kwargs.get('buy10cents')
        self.realized_market_cap_ratio = kwargs.get('realized_market_cap_ratio')
        self.nav_spread = kwargs.get('nav_spread')
        self.venue_mic = kwargs.get('venue_mic')
        self.dollar_total_return = kwargs.get('dollar_total_return')
        self.block_unit = kwargs.get('block_unit')
        self.mid_spread = kwargs.get('mid_spread')
        self.istat_province_code = kwargs.get('istat_province_code')
        self.total_recovered_by_state = kwargs.get('total_recovered_by_state')
        self.repurchase_rate = kwargs.get('repurchase_rate')
        self.data_source = kwargs.get('data_source')
        self.total_being_tested = kwargs.get('total_being_tested')
        self.cleared_or_bilateral = kwargs.get('cleared_or_bilateral')
        self.metric_name = kwargs.get('metric_name')
        self.ask_gspread = kwargs.get('ask_gspread')
        self.forecast_hour = kwargs.get('forecast_hour')
        self.leg2_payment_type = kwargs.get('leg2_payment_type')
        self.cal_spread_mis_pricing = kwargs.get('cal_spread_mis_pricing')
        self.total_tested_negative = kwargs.get('total_tested_negative')
        self.rate366 = kwargs.get('rate366')
        self.platform = kwargs.get('platform')
        self.rate365 = kwargs.get('rate365')
        self.fixed_rate_frequency = kwargs.get('fixed_rate_frequency')
        self.rate360 = kwargs.get('rate360')
        self.notional_quantity2 = kwargs.get('notional_quantity2')
        self.notional_quantity1 = kwargs.get('notional_quantity1')
        self.is_continuous = kwargs.get('is_continuous')
        self.value = kwargs.get('value')
        self.payer_designated_maturity = kwargs.get('payer_designated_maturity')
        self.product_type = kwargs.get('product_type')
        self.mdv22_day = kwargs.get('mdv22_day')
        self.nvt_adj_ff90 = kwargs.get('nvt_adj_ff90')
        self.twap_realized_bps = kwargs.get('twap_realized_bps')
        self.test_measure_label = kwargs.get('test_measure_label')
        self.quantity = kwargs.get('quantity')
        self.report_id = kwargs.get('report_id')
        self.index_weight = kwargs.get('index_weight')
        self.macs_primary_asset_class = kwargs.get('macs_primary_asset_class')
        self.trader = kwargs.get('trader')
        self.leg2_price_type = kwargs.get('leg2_price_type')
        self.floating_rate_reset_frequency_period_multiplier2 = kwargs.get(
            'floating_rate_reset_frequency_period_multiplier2')
        self.total_active = kwargs.get('total_active')
        self.floating_rate_reset_frequency_period_multiplier1 = kwargs.get(
            'floating_rate_reset_frequency_period_multiplier1')
        self.gsid2 = kwargs.get('gsid2')
        self.matched_maturity_ois_swap_spread = kwargs.get('matched_maturity_ois_swap_spread')
        self.valuation_date = kwargs.get('valuation_date')
        self.restrict_gs_federation = kwargs.get('restrict_gs_federation')
        self.position_source = kwargs.get('position_source')
        self.tcm_cost_horizon6_hour = kwargs.get('tcm_cost_horizon6_hour')
        self.buy200cents = kwargs.get('buy200cents')
        self.vwap_unrealized_bps = kwargs.get('vwap_unrealized_bps')
        self.price_to_book = kwargs.get('price_to_book')
        self.isin = kwargs.get('isin')
        self.pl_id = kwargs.get('pl_id')
        self.last_returns_start_date = kwargs.get('last_returns_start_date')
        self.collateral_value_variance = kwargs.get('collateral_value_variance')
        self.year = kwargs.get('year')
        self.forecast_period = kwargs.get('forecast_period')
        self.call_first_date = kwargs.get('call_first_date')
        self.data_set_ids = kwargs.get('data_set_ids')
        self.economic_terms_hash = kwargs.get('economic_terms_hash')
        self.num_beds = kwargs.get('num_beds')
        self.sell20bps = kwargs.get('sell20bps')
        self.client_type = kwargs.get('client_type')
        self.percentage_close_executed_quantity = kwargs.get('percentage_close_executed_quantity')
        self.macaulay_duration = kwargs.get('macaulay_duration')
        self.available_inventory = kwargs.get('available_inventory')
        self.est1_day_complete_pct = kwargs.get('est1_day_complete_pct')
        self.relative_hit_rate_ytd = kwargs.get('relative_hit_rate_ytd')
        self.created_by_id = kwargs.get('created_by_id')
        self.market_data_type = kwargs.get('market_data_type')
        self.real_short_rates_contribution = kwargs.get('real_short_rates_contribution')
        self.metric_category = kwargs.get('metric_category')
        self.annualized_carry = kwargs.get('annualized_carry')
        self.value_previous = kwargs.get('value_previous')
        self.transmission_classification = kwargs.get('transmission_classification')
        self.avg_trade_rate = kwargs.get('avg_trade_rate')
        self.short_level = kwargs.get('short_level')
        self.version = kwargs.get('version')
        self.category_type = kwargs.get('category_type')
        self.policy_rate_expectation = kwargs.get('policy_rate_expectation')
        self.upload_date = kwargs.get('upload_date')
        self.block_off_facility = kwargs.get('block_off_facility')
        self.unrealized_vwap_performance_usd = kwargs.get('unrealized_vwap_performance_usd')
        self.pace_of_rollp75 = kwargs.get('pace_of_rollp75')
        self.earnings_per_share_positive = kwargs.get('earnings_per_share_positive')
        self.num_icu_beds = kwargs.get('num_icu_beds')
        self.bucket_volume_in_percentage = kwargs.get('bucket_volume_in_percentage')
        self.estimated_trading_cost = kwargs.get('estimated_trading_cost')
        self.eid = kwargs.get('eid')
        self.relative_return_qtd = kwargs.get('relative_return_qtd')
        self.assessed_test_measure = kwargs.get('assessed_test_measure')
        self.mkt_quoting_style = kwargs.get('mkt_quoting_style')
        self.expiration_tenor = kwargs.get('expiration_tenor')
        self.price_limit = kwargs.get('price_limit')
        self.market_model_id = kwargs.get('market_model_id')
        self.receiver_frequency = kwargs.get('receiver_frequency')
        self.realized_correlation = kwargs.get('realized_correlation')
        self.issue_status = kwargs.get('issue_status')
        self.collateral_value_actual = kwargs.get('collateral_value_actual')
        self.atm_fwd_rate = kwargs.get('atm_fwd_rate')
        self.tcm_cost_participation_rate75_pct = kwargs.get('tcm_cost_participation_rate75_pct')
        self.close = kwargs.get('close')
        self.vol30d = kwargs.get('vol30d')
        self.es_product_impact_score = kwargs.get('es_product_impact_score')
        self.equity_vega = kwargs.get('equity_vega')
        self.executed_fill_quantity = kwargs.get('executed_fill_quantity')
        self.lender_payment = kwargs.get('lender_payment')
        self.five_day_move = kwargs.get('five_day_move')
        self.realized_market_cap = kwargs.get('realized_market_cap')
        self.value_format = kwargs.get('value_format')
        self.wind_chill_forecast = kwargs.get('wind_chill_forecast')
        self.target_notional = kwargs.get('target_notional')
        self.fill_leg_id = kwargs.get('fill_leg_id')
        self.rationale = kwargs.get('rationale')
        self.realized_twap_performance_bps = kwargs.get('realized_twap_performance_bps')
        self.last_updated_since = kwargs.get('last_updated_since')
        self.total_tests = kwargs.get('total_tests')
        self.equities_contribution = kwargs.get('equities_contribution')
        self.simon_id = kwargs.get('simon_id')
        self.congestion = kwargs.get('congestion')
        self.leg2_commodity_instrument_id = kwargs.get('leg2_commodity_instrument_id')
        self.notes = kwargs.get('notes')
        self.total_probable_senior_home = kwargs.get('total_probable_senior_home')
        self.event_category = kwargs.get('event_category')
        self.average_fill_rate = kwargs.get('average_fill_rate')
        self.cins = kwargs.get('cins')
        self.unadjusted_open = kwargs.get('unadjusted_open')
        self.criticality = kwargs.get('criticality')
        self.bid_ask_spread = kwargs.get('bid_ask_spread')
        self.arrival_mid_unrealized_bps = kwargs.get('arrival_mid_unrealized_bps')
        self.option_type = kwargs.get('option_type')
        self.termination_date = kwargs.get('termination_date')
        self.queries_per_second = kwargs.get('queries_per_second')
        self.liquidity_type = kwargs.get('liquidity_type')
        self.credit_limit = kwargs.get('credit_limit')
        self.rank_qtd = kwargs.get('rank_qtd')
        self.combined_key = kwargs.get('combined_key')
        self.gir_fx_forecast = kwargs.get('gir_fx_forecast')
        self.effective_tenor = kwargs.get('effective_tenor')
        self.gir_commodities_forecast = kwargs.get('gir_commodities_forecast')
        self.relative_humidity_daily_forecast = kwargs.get('relative_humidity_daily_forecast')
        self.std30_days_subsidized_yield = kwargs.get('std30_days_subsidized_yield')
        self.annualized_tracking_error = kwargs.get('annualized_tracking_error')
        self.future_month_f26 = kwargs.get('future_month_f26')
        self.future_month_f25 = kwargs.get('future_month_f25')
        self.vol_swap = kwargs.get('vol_swap')
        self.future_month_f24 = kwargs.get('future_month_f24')
        self.heat_index_daily_forecast = kwargs.get('heat_index_daily_forecast')
        self.future_month_f23 = kwargs.get('future_month_f23')
        self.real_fci = kwargs.get('real_fci')
        self.block_trades_and_large_notional_off_facility_swaps = kwargs.get(
            'block_trades_and_large_notional_off_facility_swaps')
        self.future_month_f22 = kwargs.get('future_month_f22')
        self.buy1point5bps = kwargs.get('buy1point5bps')
        self.future_month_f21 = kwargs.get('future_month_f21')
        self.expiration_settlement_date = kwargs.get('expiration_settlement_date')
        self.absolute_return_qtd = kwargs.get('absolute_return_qtd')
        self.gross_exposure = kwargs.get('gross_exposure')
        self.volume = kwargs.get('volume')
        self.adv = kwargs.get('adv')
        self.short_conviction_medium = kwargs.get('short_conviction_medium')
        self.complete_test_measure = kwargs.get('complete_test_measure')
        self.exchange = kwargs.get('exchange')
        self.es_policy_score = kwargs.get('es_policy_score')
        self.roll_volume_std = kwargs.get('roll_volume_std')
        self.temperature_daily_forecast = kwargs.get('temperature_daily_forecast')
        self.relative_payoff_qtd = kwargs.get('relative_payoff_qtd')
        self.on_loan_percentage = kwargs.get('on_loan_percentage')
        self.twap_remaining_slices = kwargs.get('twap_remaining_slices')
        self.fair_variance = kwargs.get('fair_variance')
        self.hit_rate_wtd = kwargs.get('hit_rate_wtd')
        self.previous_close_realized_cash = kwargs.get('previous_close_realized_cash')
        self.realized_volatility = kwargs.get('realized_volatility')
        self.unexecuted_quantity = kwargs.get('unexecuted_quantity')
        self.proceeds_asset_swap_spread1m = kwargs.get('proceeds_asset_swap_spread1m')
        self.clone_parent_id = kwargs.get('clone_parent_id')
        self.wind_speed_hourly_forecast = kwargs.get('wind_speed_hourly_forecast')
        self.etf_flow_ratio = kwargs.get('etf_flow_ratio')
        self.asset_parameters_receiver_rate_option = kwargs.get('asset_parameters_receiver_rate_option')
        self.buy60cents = kwargs.get('buy60cents')
        self.security_sub_type_id = kwargs.get('security_sub_type_id')
        self.message = kwargs.get('message')
        self.sts_rates_country = kwargs.get('sts_rates_country')
        self.sell65cents = kwargs.get('sell65cents')
        self.horizon = kwargs.get('horizon')
        self.would_if_good_level = kwargs.get('would_if_good_level')
        self.buffer_threshold_required = kwargs.get('buffer_threshold_required')
        self.face_value = kwargs.get('face_value')
        self.roll_volume_hist = kwargs.get('roll_volume_hist')
        self.counter_party_status = kwargs.get('counter_party_status')
        self.composite22_day_adv = kwargs.get('composite22_day_adv')
        self.percentage_far_executed_quantity = kwargs.get('percentage_far_executed_quantity')
        self.loan_spread_required = kwargs.get('loan_spread_required')
        self.asset_class = kwargs.get('asset_class')
        self.sovereign_spread_contribution = kwargs.get('sovereign_spread_contribution')
        self.ric = kwargs.get('ric')
        self.bucket_end_time = kwargs.get('bucket_end_time')
        self.rate_type = kwargs.get('rate_type')
        self.total_fatalities_senior_home = kwargs.get('total_fatalities_senior_home')
        self.loan_status = kwargs.get('loan_status')
        self.short_weight = kwargs.get('short_weight')
        self.geography_id = kwargs.get('geography_id')
        self.sell7point5bps = kwargs.get('sell7point5bps')
        self.nav = kwargs.get('nav')
        self.fiscal_quarter = kwargs.get('fiscal_quarter')
        self.version_string = kwargs.get('version_string')
        self.payoff_ytd = kwargs.get('payoff_ytd')
        self.market_impact = kwargs.get('market_impact')
        self.event_type = kwargs.get('event_type')
        self.fill_price = kwargs.get('fill_price')
        self.asset_count_long = kwargs.get('asset_count_long')
        self.sell180cents = kwargs.get('sell180cents')
        self.spot = kwargs.get('spot')
        self.application_id = kwargs.get('application_id')
        self.indicative_close_price = kwargs.get('indicative_close_price')
        self.swap_spread = kwargs.get('swap_spread')
        self.trading_restriction = kwargs.get('trading_restriction')
        self.asset_parameters_pay_or_receive = kwargs.get('asset_parameters_pay_or_receive')
        self.price_spot_entry_unit = kwargs.get('price_spot_entry_unit')
        self.unrealized_arrival_performance_bps = kwargs.get('unrealized_arrival_performance_bps')
        self.city = kwargs.get('city')
        self.pnl_wtd = kwargs.get('pnl_wtd')
        self.covariance = kwargs.get('covariance')
        self.bucket_volume_in_shares = kwargs.get('bucket_volume_in_shares')
        self.commodity_forecast = kwargs.get('commodity_forecast')
        self.valid = kwargs.get('valid')
        self.sts_commodity = kwargs.get('sts_commodity')
        self.initial_pricing_date = kwargs.get('initial_pricing_date')
        self.indication_of_end_user_exception = kwargs.get('indication_of_end_user_exception')
        self.wind_direction_hourly_forecast = kwargs.get('wind_direction_hourly_forecast')
        self.es_score = kwargs.get('es_score')
        self.__yield = kwargs.get('yield_')
        self.fatalities_underlying_conditions_present = kwargs.get('fatalities_underlying_conditions_present')
        self.price_range_in_ticks = kwargs.get('price_range_in_ticks')
        self.pace_of_rollp25 = kwargs.get('pace_of_rollp25')
        self.day_close_realized_usd = kwargs.get('day_close_realized_usd')
        self.pct_change = kwargs.get('pct_change')
        self.brightness_type = kwargs.get('brightness_type')
        self.future_month3_m = kwargs.get('future_month3_m')
        self.number_of_rolls = kwargs.get('number_of_rolls')
        self.iso_country_code_numeric = kwargs.get('iso_country_code_numeric')
        self.price_type = kwargs.get('price_type')
        self.realized_vwap_performance_usd = kwargs.get('realized_vwap_performance_usd')
        self.fuel_type = kwargs.get('fuel_type')
        self.bbid = kwargs.get('bbid')
        self.vega_notional_amount = kwargs.get('vega_notional_amount')
        self.fatalities_underlying_conditions_absent = kwargs.get('fatalities_underlying_conditions_absent')
        self.effective_date = kwargs.get('effective_date')
        self.capped = kwargs.get('capped')
        self.rating = kwargs.get('rating')
        self.option_currency = kwargs.get('option_currency')
        self.is_close_auction = kwargs.get('is_close_auction')
        self.volatility = kwargs.get('volatility')
        self.avg_vent_util = kwargs.get('avg_vent_util')
        self.underlying_asset_ids = kwargs.get('underlying_asset_ids')
        self.buy6point5bps = kwargs.get('buy6point5bps')
        self.vwap_in_limit_realized_cash = kwargs.get('vwap_in_limit_realized_cash')
        self.estimated_closing_auction_volume = kwargs.get('estimated_closing_auction_volume')
        self.sell2bps = kwargs.get('sell2bps')
        self.annual_risk = kwargs.get('annual_risk')
        self.eti = kwargs.get('eti')
        self.vwap_in_limit_realized_bps = kwargs.get('vwap_in_limit_realized_bps')
        self.rank_mtd = kwargs.get('rank_mtd')
        self.market_buffer = kwargs.get('market_buffer')
        self.future_month_j24 = kwargs.get('future_month_j24')
        self.last_uploaded_time = kwargs.get('last_uploaded_time')
        self.future_month_j23 = kwargs.get('future_month_j23')
        self.oe_id = kwargs.get('oe_id')
        self.future_month_j22 = kwargs.get('future_month_j22')
        self.future_month_j21 = kwargs.get('future_month_j21')
        self.bbid_equivalent = kwargs.get('bbid_equivalent')
        self.init_buffer_threshold_required = kwargs.get('init_buffer_threshold_required')
        self.leg2_designated_maturity = kwargs.get('leg2_designated_maturity')
        self.matched_maturity_ois_swap_rate = kwargs.get('matched_maturity_ois_swap_rate')
        self.fair_price = kwargs.get('fair_price')
        self.participation_rate_in_limit = kwargs.get('participation_rate_in_limit')
        self.ext_mkt_class = kwargs.get('ext_mkt_class')
        self.price_currency = kwargs.get('price_currency')
        self.failed_count = kwargs.get('failed_count')
        self.leg1_index_location = kwargs.get('leg1_index_location')
        self.supra_strategy = kwargs.get('supra_strategy')
        self.day_count_convention = kwargs.get('day_count_convention')
        self.rounded_notional_amount1 = kwargs.get('rounded_notional_amount1')
        self.rounded_notional_amount2 = kwargs.get('rounded_notional_amount2')
        self.factor_source = kwargs.get('factor_source')
        self.future_month_j26 = kwargs.get('future_month_j26')
        self.lending_sec_type = kwargs.get('lending_sec_type')
        self.future_month_j25 = kwargs.get('future_month_j25')
        self.leverage = kwargs.get('leverage')
        self.forecast_day = kwargs.get('forecast_day')
        self.option_family = kwargs.get('option_family')
        self.generator_output = kwargs.get('generator_output')
        self.price_spot_stop_loss_value = kwargs.get('price_spot_stop_loss_value')
        self.kpi_id = kwargs.get('kpi_id')
        self.wind_generation = kwargs.get('wind_generation')
        self.percentage_mid_executed_quantity = kwargs.get('percentage_mid_executed_quantity')
        self.borrow_cost = kwargs.get('borrow_cost')
        self.knock_out_direction = kwargs.get('knock_out_direction')
        self.risk_model = kwargs.get('risk_model')
        self.asset_parameters_vendor = kwargs.get('asset_parameters_vendor')
        self.fair_value = kwargs.get('fair_value')
        self.open_time = kwargs.get('open_time')
        self.pressure_hourly_forecast = kwargs.get('pressure_hourly_forecast')
        self.local_ccy_rate = kwargs.get('local_ccy_rate')
        self.end_user_exception = kwargs.get('end_user_exception')
        self.sell90cents = kwargs.get('sell90cents')
        self.execution_venue = kwargs.get('execution_venue')
        self.non_standardized_pricing_indicator = kwargs.get('non_standardized_pricing_indicator')
        self.primary_vwap_in_limit_realized_bps = kwargs.get('primary_vwap_in_limit_realized_bps')
        self.approve_rebalance = kwargs.get('approve_rebalance')
        self.adjusted_close_price = kwargs.get('adjusted_close_price')
        self.lms_id = kwargs.get('lms_id')
        self.rebate_rate = kwargs.get('rebate_rate')
        self.sell130cents = kwargs.get('sell130cents')
        self.price_unit_of_measure1 = kwargs.get('price_unit_of_measure1')
        self.sell32bps = kwargs.get('sell32bps')
        self.pace_of_rollp50 = kwargs.get('pace_of_rollp50')
        self.price_move_vs_arrival = kwargs.get('price_move_vs_arrival')
        self.strike_relative = kwargs.get('strike_relative')
        self.pressure_type = kwargs.get('pressure_type')
        self.buy40bps = kwargs.get('buy40bps')
        self.price_notation = kwargs.get('price_notation')
        self.strategy = kwargs.get('strategy')
        self.price_unit_of_measure2 = kwargs.get('price_unit_of_measure2')
        self.issue_status_date = kwargs.get('issue_status_date')
        self.lender_income = kwargs.get('lender_income')
        self.pb_client_id = kwargs.get('pb_client_id')
        self.istat_region_code = kwargs.get('istat_region_code')
        self.sell9bps = kwargs.get('sell9bps')
        self.owner_id = kwargs.get('owner_id')
        self.composite10_day_adv = kwargs.get('composite10_day_adv')
        self.max_loan_balance = kwargs.get('max_loan_balance')
        self.idea_activity_type = kwargs.get('idea_activity_type')
        self.sell60cents = kwargs.get('sell60cents')
        self.idea_source = kwargs.get('idea_source')
        self.ever_on_vent = kwargs.get('ever_on_vent')
        self.buy15cents = kwargs.get('buy15cents')
        self.unadjusted_ask = kwargs.get('unadjusted_ask')
        self.contribution_name = kwargs.get('contribution_name')
        self.given_plus_paid = kwargs.get('given_plus_paid')
        self.last_fill_price = kwargs.get('last_fill_price')
        self.sopr_out = kwargs.get('sopr_out')
        self.short_conviction_small = kwargs.get('short_conviction_small')
        self.upfront_payment_currency = kwargs.get('upfront_payment_currency')
        self.spot_settlement_date = kwargs.get('spot_settlement_date')
        self.matrix_order = kwargs.get('matrix_order')
        self.day_close = kwargs.get('day_close')
        self.date_index = kwargs.get('date_index')
        self.payer_day_count_fraction = kwargs.get('payer_day_count_fraction')
        self.asset_classifications_is_primary = kwargs.get('asset_classifications_is_primary')
        self.break_even_inflation_change = kwargs.get('break_even_inflation_change')
        self.buy130cents = kwargs.get('buy130cents')
        self.dwi_contribution = kwargs.get('dwi_contribution')
        self.asset2_id = kwargs.get('asset2_id')
        self.economic_forecasts = kwargs.get('economic_forecasts')
        self.average_fill_price = kwargs.get('average_fill_price')
        self.depth_spread_score = kwargs.get('depth_spread_score')
        self.sell10cents = kwargs.get('sell10cents')
        self.sub_account = kwargs.get('sub_account')
        self.buy65cents = kwargs.get('buy65cents')
        self.bond_cds_basis = kwargs.get('bond_cds_basis')
        self.vendor = kwargs.get('vendor')
        self.data_set = kwargs.get('data_set')
        self.total_notional_quantity2 = kwargs.get('total_notional_quantity2')
        self.total_notional_quantity1 = kwargs.get('total_notional_quantity1')
        self.notional_amount2 = kwargs.get('notional_amount2')
        self.notional_amount1 = kwargs.get('notional_amount1')
        self.queueing_time = kwargs.get('queueing_time')
        self.ann_return5_year = kwargs.get('ann_return5_year')
        self.volume_start_of_day = kwargs.get('volume_start_of_day')
        self.price_notation3_type = kwargs.get('price_notation3_type')
        self.asset_parameters_floating_rate_designated_maturity = kwargs.get(
            'asset_parameters_floating_rate_designated_maturity')
        self.executed_notional_local = kwargs.get('executed_notional_local')
        self.business_sponsor = kwargs.get('business_sponsor')
        self.unexplained = kwargs.get('unexplained')
        self.seasonal_adjustment_short = kwargs.get('seasonal_adjustment_short')
        self.metric = kwargs.get('metric')
        self.ask = kwargs.get('ask')
        self.close_price = kwargs.get('close_price')
        self.end_time = kwargs.get('end_time')
        self.sell100cents = kwargs.get('sell100cents')
        self.execution_timestamp = kwargs.get('execution_timestamp')
        self.buy180cents = kwargs.get('buy180cents')
        self.absolute_strike = kwargs.get('absolute_strike')
        self.sell3point5bps = kwargs.get('sell3point5bps')
        self.liquidity_score_buy = kwargs.get('liquidity_score_buy')
        self.payment_frequency = kwargs.get('payment_frequency')
        self.expense_ratio_net_bps = kwargs.get('expense_ratio_net_bps')
        self.metric_type = kwargs.get('metric_type')
        self.rank_ytd = kwargs.get('rank_ytd')
        self.leg1_spread = kwargs.get('leg1_spread')
        self.coverage_region = kwargs.get('coverage_region')
        self.absolute_return_ytd = kwargs.get('absolute_return_ytd')
        self.day_count_convention2 = kwargs.get('day_count_convention2')
        self.fwdtier = kwargs.get('fwdtier')
        self.degree_days = kwargs.get('degree_days')
        self.turnover_adjusted = kwargs.get('turnover_adjusted')
        self.price_spot_target_value = kwargs.get('price_spot_target_value')
        self.market_data_point = kwargs.get('market_data_point')
        self.num_of_funds = kwargs.get('num_of_funds')
        self.trade_time = kwargs.get('trade_time')
        self.execution_id = kwargs.get('execution_id')
        self.turnover_unadjusted = kwargs.get('turnover_unadjusted')
        self.leg1_floating_index = kwargs.get('leg1_floating_index')
        self.hedge_annualized_volatility = kwargs.get('hedge_annualized_volatility')
        self.benchmark_currency = kwargs.get('benchmark_currency')
        self.futures_contract = kwargs.get('futures_contract')
        self.name = kwargs.get('name')
        self.aum = kwargs.get('aum')
        self.leg1_day_count_convention = kwargs.get('leg1_day_count_convention')
        self.cbs_code = kwargs.get('cbs_code')
        self.folder_name = kwargs.get('folder_name')
        self.api_usage = kwargs.get('api_usage')
        self.twap_interval = kwargs.get('twap_interval')
        self.payment_frequency_period1 = kwargs.get('payment_frequency_period1')
        self.unique_id = kwargs.get('unique_id')
        self.option_expiration_date = kwargs.get('option_expiration_date')
        self.payment_frequency_period2 = kwargs.get('payment_frequency_period2')
        self.swaption_atm_fwd_rate = kwargs.get('swaption_atm_fwd_rate')
        self.live_date = kwargs.get('live_date')
        self.corporate_action_type = kwargs.get('corporate_action_type')
        self.prime_id = kwargs.get('prime_id')
        self.description = kwargs.get('description')
        self.asset_classifications_is_country_primary = kwargs.get('asset_classifications_is_country_primary')
        self.rebate_rate_limit = kwargs.get('rebate_rate_limit')
        self.factor = kwargs.get('factor')
        self.days_on_loan = kwargs.get('days_on_loan')
        self.long_conviction_small = kwargs.get('long_conviction_small')
        self.sell40cents = kwargs.get('sell40cents')
        self.relative_payoff_ytd = kwargs.get('relative_payoff_ytd')
        self.gsfeer = kwargs.get('gsfeer')
        self.relative_hit_rate_qtd = kwargs.get('relative_hit_rate_qtd')
        self.wam = kwargs.get('wam')
        self.wal = kwargs.get('wal')
        self.quantityccy = kwargs.get('quantityccy')
        self.backtest_id = kwargs.get('backtest_id')
        self.dirty_price = kwargs.get('dirty_price')
        self.corporate_spread_contribution = kwargs.get('corporate_spread_contribution')
        self.relative_humidity_hourly_forecast = kwargs.get('relative_humidity_hourly_forecast')
        self.multiple_score = kwargs.get('multiple_score')
        self.beta_adjusted_exposure = kwargs.get('beta_adjusted_exposure')
        self.is_annualized = kwargs.get('is_annualized')
        self.dividend_points = kwargs.get('dividend_points')
        self.brightness = kwargs.get('brightness')
        self.asset_parameters_receiver_designated_maturity = kwargs.get(
            'asset_parameters_receiver_designated_maturity')
        self.bos_in_ticks_description = kwargs.get('bos_in_ticks_description')
        self.test_id = kwargs.get('test_id')
        self.implied_correlation = kwargs.get('implied_correlation')
        self.normalized_performance = kwargs.get('normalized_performance')
        self.overnight_news_end_time = kwargs.get('overnight_news_end_time')
        self.bytes_consumed = kwargs.get('bytes_consumed')
        self.swaption_vol = kwargs.get('swaption_vol')
        self.estimated_closing_volume = kwargs.get('estimated_closing_volume')
        self.issuer = kwargs.get('issuer')
        self.dividend_yield = kwargs.get('dividend_yield')
        self.market_type = kwargs.get('market_type')
        self.num_units_lower = kwargs.get('num_units_lower')
        self.source_origin = kwargs.get('source_origin')
        self.proceeds_asset_swap_spread3m = kwargs.get('proceeds_asset_swap_spread3m')
        self.total_quantity = kwargs.get('total_quantity')
        self.internal_user = kwargs.get('internal_user')
        self.sell40bps = kwargs.get('sell40bps')
        self.redemption_option = kwargs.get('redemption_option')
        self.notional_unit2 = kwargs.get('notional_unit2')
        self.notional_unit1 = kwargs.get('notional_unit1')
        self.sedol = kwargs.get('sedol')
        self.rounding_cost_pnl = kwargs.get('rounding_cost_pnl')
        self.mid_yield = kwargs.get('mid_yield')
        self.unexecuted_notional_local = kwargs.get('unexecuted_notional_local')
        self.sustain_global = kwargs.get('sustain_global')
        self.ending_date = kwargs.get('ending_date')
        self.proceeds_asset_swap_spread12m = kwargs.get('proceeds_asset_swap_spread12m')
        self.rvt_adj90 = kwargs.get('rvt_adj90')
        self.gross_investment_wtd = kwargs.get('gross_investment_wtd')
        self.ann_return3_year = kwargs.get('ann_return3_year')
        self.sharpe_wtd = kwargs.get('sharpe_wtd')
        self.discount_factor = kwargs.get('discount_factor')
        self.relative_return_mtd = kwargs.get('relative_return_mtd')
        self.price_change_on_day = kwargs.get('price_change_on_day')
        self.buy100cents = kwargs.get('buy100cents')
        self.forward_point = kwargs.get('forward_point')
        self.fci = kwargs.get('fci')
        self.recall_quantity = kwargs.get('recall_quantity')
        self.strike_price_currency = kwargs.get('strike_price_currency')
        self.fx_positioning = kwargs.get('fx_positioning')
        self.gsid_equivalent = kwargs.get('gsid_equivalent')
        self.categories = kwargs.get('categories')
        self.ext_mkt_asset = kwargs.get('ext_mkt_asset')
        self.quoting_style = kwargs.get('quoting_style')
        self.error_message = kwargs.get('error_message')
        self.mid_price = kwargs.get('mid_price')
        self.proceeds_asset_swap_spread6m = kwargs.get('proceeds_asset_swap_spread6m')
        self.sts_em_dm = kwargs.get('sts_em_dm')
        self.embedded_option = kwargs.get('embedded_option')
        self.tcm_cost_horizon2_day = kwargs.get('tcm_cost_horizon2_day')
        self.age_band = kwargs.get('age_band')
        self.returns_enabled = kwargs.get('returns_enabled')
        self.run_id = kwargs.get('run_id')
        self.queue_in_lots = kwargs.get('queue_in_lots')
        self.tender_offer_expiration_date = kwargs.get('tender_offer_expiration_date')
        self.midcurve_annuity = kwargs.get('midcurve_annuity')
        self.lending_fund_nav_trend = kwargs.get('lending_fund_nav_trend')
        self.cloud_cover_forecast = kwargs.get('cloud_cover_forecast')
        self.tcm_cost_participation_rate5_pct = kwargs.get('tcm_cost_participation_rate5_pct')
        self.default_backcast = kwargs.get('default_backcast')
        self.lockup = kwargs.get('lockup')
        self.lockup_type = kwargs.get('lockup_type')
        self.news_on_intensity = kwargs.get('news_on_intensity')
        self.price_forming_continuation_data = kwargs.get('price_forming_continuation_data')
        self.adjusted_short_interest = kwargs.get('adjusted_short_interest')
        self.new_hospitalized = kwargs.get('new_hospitalized')
        self.asset_parameters_strike = kwargs.get('asset_parameters_strike')
        self.buy35cents = kwargs.get('buy35cents')
        self.leg2_total_notional = kwargs.get('leg2_total_notional')
        self.asset_parameters_effective_date = kwargs.get('asset_parameters_effective_date')
        self.ann_return10_year = kwargs.get('ann_return10_year')
        self.num_adult_icu_beds = kwargs.get('num_adult_icu_beds')
        self.days_to_expiration = kwargs.get('days_to_expiration')
        self.continuation_event = kwargs.get('continuation_event')
        self.leg2_commodity_underlyer_id = kwargs.get('leg2_commodity_underlyer_id')
        self.wi_id = kwargs.get('wi_id')
        self.market_cap_category = kwargs.get('market_cap_category')
        self.historical_volume = kwargs.get('historical_volume')
        self.buy5cents = kwargs.get('buy5cents')
        self.event_start_date = kwargs.get('event_start_date')
        self.leg1_fixed_rate = kwargs.get('leg1_fixed_rate')
        self.equity_gamma = kwargs.get('equity_gamma')
        self.rpt_id = kwargs.get('rpt_id')
        self.gross_income = kwargs.get('gross_income')
        self.em_id = kwargs.get('em_id')
        self.asset_count_in_model = kwargs.get('asset_count_in_model')
        self.sts_credit_region = kwargs.get('sts_credit_region')
        self.min_temperature = kwargs.get('min_temperature')
        self.bucket_start_time = kwargs.get('bucket_start_time')
        self.fill_type = kwargs.get('fill_type')
        self.close_time = kwargs.get('close_time')
        self.fail_pct = kwargs.get('fail_pct')
        self.iso_country_code_alpha2 = kwargs.get('iso_country_code_alpha2')
        self.iso_country_code_alpha3 = kwargs.get('iso_country_code_alpha3')
        self.amount = kwargs.get('amount')
        self.lending_fund_acct = kwargs.get('lending_fund_acct')
        self.rebate = kwargs.get('rebate')
        self.election_type = kwargs.get('election_type')
        self.relative_hit_rate_mtd = kwargs.get('relative_hit_rate_mtd')
        self.implied_volatility = kwargs.get('implied_volatility')
        self.spread = kwargs.get('spread')
        self.variance = kwargs.get('variance')
        self.wtd_degree_days_daily_forecast = kwargs.get('wtd_degree_days_daily_forecast')
        self.swaption_annuity = kwargs.get('swaption_annuity')
        self.buy6bps = kwargs.get('buy6bps')
        self.g10_currency = kwargs.get('g10_currency')
        self.humidity_forecast = kwargs.get('humidity_forecast')
        self.relative_period = kwargs.get('relative_period')
        self.user = kwargs.get('user')
        self.customer = kwargs.get('customer')
        self.leg1_reset_frequency = kwargs.get('leg1_reset_frequency')
        self.queue_clock_time_label = kwargs.get('queue_clock_time_label')
        self.pace_of_rollp100 = kwargs.get('pace_of_rollp100')
        self.asset_classifications_gics_sub_industry = kwargs.get('asset_classifications_gics_sub_industry')
        self.dew_point_hourly_forecast = kwargs.get('dew_point_hourly_forecast')
        self.location_type = kwargs.get('location_type')
        self.facet_divisional_reporting_group_id = kwargs.get('facet_divisional_reporting_group_id')
        self.realized_twap_performance_usd = kwargs.get('realized_twap_performance_usd')
        self.swap_rate = kwargs.get('swap_rate')
        self.algo_execution_style = kwargs.get('algo_execution_style')
        self.client_contact = kwargs.get('client_contact')
        self.min_temperature_hour = kwargs.get('min_temperature_hour')
        self.trading_currency = kwargs.get('trading_currency')
        self.total_by_onset = kwargs.get('total_by_onset')
        self.agency_swap_spread = kwargs.get('agency_swap_spread')
        self.rank = kwargs.get('rank')
        self.mixed_swap_other_reported_sdr = kwargs.get('mixed_swap_other_reported_sdr')
        self.humidity = kwargs.get('humidity')
        self.data_set_category = kwargs.get('data_set_category')
        self.vwap_realized_bps = kwargs.get('vwap_realized_bps')
        self.buy9bps = kwargs.get('buy9bps')
        self.total_tested = kwargs.get('total_tested')
        self.fatalities_confirmed = kwargs.get('fatalities_confirmed')
        self.universe_id1 = kwargs.get('universe_id1')
        self.asset_parameters_payer_day_count_fraction = kwargs.get('asset_parameters_payer_day_count_fraction')
        self.universe_id2 = kwargs.get('universe_id2')
        self.bid_low = kwargs.get('bid_low')
        self.bucketize_price = kwargs.get('bucketize_price')
        self.fair_variance_volatility = kwargs.get('fair_variance_volatility')
        self.covid19 = kwargs.get('covid19')
        self.client_exposure = kwargs.get('client_exposure')
        self.leg2_total_notional_unit = kwargs.get('leg2_total_notional_unit')
        self.sell45cents = kwargs.get('sell45cents')
        self.gs_sustain_sub_sector = kwargs.get('gs_sustain_sub_sector')
        self.sinkable = kwargs.get('sinkable')
        self.is_real = kwargs.get('is_real')
        self.max_temperature_hour = kwargs.get('max_temperature_hour')
        self.leg2_averaging_method = kwargs.get('leg2_averaging_method')
        self.jsn = kwargs.get('jsn')
        self.sell160cents = kwargs.get('sell160cents')
        self.first_exercise_date = kwargs.get('first_exercise_date')
        self.knock_in_direction = kwargs.get('knock_in_direction')
        self.day_close_unrealized_usd = kwargs.get('day_close_unrealized_usd')
        self.tenor = kwargs.get('tenor')
        self.pricing_convention = kwargs.get('pricing_convention')
        self.popularity = kwargs.get('popularity')
        self.floating_rate_option = kwargs.get('floating_rate_option')
        self.hedge_value_type = kwargs.get('hedge_value_type')
        self.asset_parameters_clearing_house = kwargs.get('asset_parameters_clearing_house')
        self.disclaimer = kwargs.get('disclaimer')
        self.payer_frequency = kwargs.get('payer_frequency')
        self.loan_fee = kwargs.get('loan_fee')
        self.deployment_version = kwargs.get('deployment_version')
        self.buy16bps = kwargs.get('buy16bps')
        self.trade_day_count = kwargs.get('trade_day_count')
        self.transaction_type = kwargs.get('transaction_type')
        self.price_to_sales = kwargs.get('price_to_sales')
        self.new_ideas_qtd = kwargs.get('new_ideas_qtd')
        self.subdivision_name = kwargs.get('subdivision_name')
        self.adjusted_ask_price = kwargs.get('adjusted_ask_price')
        self.factor_universe = kwargs.get('factor_universe')
        self.arrival_rt = kwargs.get('arrival_rt')
        self.internal_index_calc_agent = kwargs.get('internal_index_calc_agent')
        self.excess_margin_value = kwargs.get('excess_margin_value')
        self.transaction_cost = kwargs.get('transaction_cost')
        self.central_bank_swap_rate = kwargs.get('central_bank_swap_rate')
        self.previous_new_confirmed = kwargs.get('previous_new_confirmed')
        self.unrealized_vwap_performance_bps = kwargs.get('unrealized_vwap_performance_bps')
        self.degree_days_daily_forecast = kwargs.get('degree_days_daily_forecast')
        self.position_amount = kwargs.get('position_amount')
        self.heat_index_hourly_forecast = kwargs.get('heat_index_hourly_forecast')
        self.ma_rank = kwargs.get('ma_rank')
        self.fx_positioning_source = kwargs.get('fx_positioning_source')
        self.vol60d = kwargs.get('vol60d')
        self.event_start_date_time = kwargs.get('event_start_date_time')
        self.implied_volatility_by_delta_strike = kwargs.get('implied_volatility_by_delta_strike')
        self.mq_symbol = kwargs.get('mq_symbol')
        self.num_total_units = kwargs.get('num_total_units')
        self.corporate_action = kwargs.get('corporate_action')
        self.leg1_price_type = kwargs.get('leg1_price_type')
        self.asset_parameters_payer_rate_option = kwargs.get('asset_parameters_payer_rate_option')
        self.sell20cents = kwargs.get('sell20cents')
        self.leg2_fixed_payment_currency = kwargs.get('leg2_fixed_payment_currency')
        self.g_regional_score = kwargs.get('g_regional_score')
        self.hard_to_borrow = kwargs.get('hard_to_borrow')
        self.sell5bps = kwargs.get('sell5bps')
        self.roll_vwap = kwargs.get('roll_vwap')
        self.wpk = kwargs.get('wpk')
        self.bespoke_swap = kwargs.get('bespoke_swap')
        self.asset_parameters_expiration_date = kwargs.get('asset_parameters_expiration_date')
        self.country_name = kwargs.get('country_name')
        self.carry = kwargs.get('carry')
        self.starting_date = kwargs.get('starting_date')
        self.loan_id = kwargs.get('loan_id')
        self.onboarded = kwargs.get('onboarded')
        self.liquidity_score = kwargs.get('liquidity_score')
        self.long_rates_contribution = kwargs.get('long_rates_contribution')
        self.source_date_span = kwargs.get('source_date_span')
        self.ann_yield6_month = kwargs.get('ann_yield6_month')
        self.underlying_data_set_id = kwargs.get('underlying_data_set_id')
        self.close_unadjusted = kwargs.get('close_unadjusted')
        self.value_unit = kwargs.get('value_unit')
        self.quantity_unit = kwargs.get('quantity_unit')
        self.adjusted_low_price = kwargs.get('adjusted_low_price')
        self.is_momentum = kwargs.get('is_momentum')
        self.long_conviction_large = kwargs.get('long_conviction_large')
        self.oad = kwargs.get('oad')
        self.rate = kwargs.get('rate')
        self.coupon_type = kwargs.get('coupon_type')
        self.client = kwargs.get('client')
        self.esg_detailed_metric = kwargs.get('esg_detailed_metric')
        self.conviction_list = kwargs.get('conviction_list')
        self.passive_etf_ratio = kwargs.get('passive_etf_ratio')
        self.future_month_g26 = kwargs.get('future_month_g26')
        self.future_month_g25 = kwargs.get('future_month_g25')
        self.future_month_g24 = kwargs.get('future_month_g24')
        self.future_month_g23 = kwargs.get('future_month_g23')
        self.type_of_return = kwargs.get('type_of_return')
        self.future_month_g22 = kwargs.get('future_month_g22')
        self.servicing_cost_long_pnl = kwargs.get('servicing_cost_long_pnl')
        self.excess_margin_percentage = kwargs.get('excess_margin_percentage')
        self.future_month_g21 = kwargs.get('future_month_g21')
        self.total_mild = kwargs.get('total_mild')
        self.realized_arrival_performance_bps = kwargs.get('realized_arrival_performance_bps')
        self.precipitation_daily_forecast_inches = kwargs.get('precipitation_daily_forecast_inches')
        self.exchange_id = kwargs.get('exchange_id')
        self.leg2_fixed_payment = kwargs.get('leg2_fixed_payment')
        self.tcm_cost_horizon20_day = kwargs.get('tcm_cost_horizon20_day')
        self.realm = kwargs.get('realm')
        self.gate = kwargs.get('gate')
        self.bid = kwargs.get('bid')
        self.hedge_value = kwargs.get('hedge_value')
        self.is_seasonally_adjusted = kwargs.get('is_seasonally_adjusted')
        self.order_start_time = kwargs.get('order_start_time')
        self.is_aggressive = kwargs.get('is_aggressive')
        self.floating_rate_designated_maturity = kwargs.get('floating_rate_designated_maturity')
        self.percentage_near_executed_quantity = kwargs.get('percentage_near_executed_quantity')
        self.order_id = kwargs.get('order_id')
        self.hospital_type = kwargs.get('hospital_type')
        self.day_close_realized_bps = kwargs.get('day_close_realized_bps')
        self.precipitation_hourly_forecast = kwargs.get('precipitation_hourly_forecast')
        self.market_cap_usd = kwargs.get('market_cap_usd')
        self.auction_fills_percentage = kwargs.get('auction_fills_percentage')
        self.high_price = kwargs.get('high_price')
        self.absolute_shares = kwargs.get('absolute_shares')
        self.fixed_rate_day_count_fraction = kwargs.get('fixed_rate_day_count_fraction')
        self.model = kwargs.get('model')
        self.unrealized_twap_performance_usd = kwargs.get('unrealized_twap_performance_usd')
        self.__id = kwargs.get('id_')
        self.maturity = kwargs.get('maturity')
        self.delta_change = kwargs.get('delta_change')
        self.index = kwargs.get('index')
        self.unrealized_arrival_performance_usd = kwargs.get('unrealized_arrival_performance_usd')
        self.iceberg_slippage = kwargs.get('iceberg_slippage')
        self.sell120cents = kwargs.get('sell120cents')
        self.future_month_x26 = kwargs.get('future_month_x26')
        self.asset_types = kwargs.get('asset_types')
        self.future_month_x25 = kwargs.get('future_month_x25')
        self.bcid = kwargs.get('bcid')
        self.mkt_point = kwargs.get('mkt_point')
        self.future_month_x24 = kwargs.get('future_month_x24')
        self.restriction_start_date = kwargs.get('restriction_start_date')
        self.touch_liquidity_score = kwargs.get('touch_liquidity_score')
        self.future_month_x23 = kwargs.get('future_month_x23')
        self.future_month_x22 = kwargs.get('future_month_x22')
        self.factor_category_id = kwargs.get('factor_category_id')
        self.security_type_id = kwargs.get('security_type_id')
        self.future_month_x21 = kwargs.get('future_month_x21')
        self.investment_ytd = kwargs.get('investment_ytd')
        self.leg2_notional = kwargs.get('leg2_notional')
        self.sell1bps = kwargs.get('sell1bps')
        self.sell200cents = kwargs.get('sell200cents')
        self.expected_completion_date = kwargs.get('expected_completion_date')
        self.spread_option_vol = kwargs.get('spread_option_vol')
        self.sell80cents = kwargs.get('sell80cents')
        self.inflation_swap_rate = kwargs.get('inflation_swap_rate')
        self.active_queries = kwargs.get('active_queries')
        self.sell45bps = kwargs.get('sell45bps')
        self.embeded_option = kwargs.get('embeded_option')
        self.event_source = kwargs.get('event_source')
        self.qis_perm_no = kwargs.get('qis_perm_no')
        self.settlement = kwargs.get('settlement')
        self.shareclass_id = kwargs.get('shareclass_id')
        self.feature2 = kwargs.get('feature2')
        self.feature3 = kwargs.get('feature3')
        self.settlement_currency2 = kwargs.get('settlement_currency2')
        self.sts_commodity_sector = kwargs.get('sts_commodity_sector')
        self.exception_status = kwargs.get('exception_status')
        self.overnight_news_intensity = kwargs.get('overnight_news_intensity')
        self.sales_coverage = kwargs.get('sales_coverage')
        self.feature1 = kwargs.get('feature1')
        self.tcm_cost_participation_rate10_pct = kwargs.get('tcm_cost_participation_rate10_pct')
        self.event_time = kwargs.get('event_time')
        self.position_source_name = kwargs.get('position_source_name')
        self.delivery_date = kwargs.get('delivery_date')
        self.settlement_currency1 = kwargs.get('settlement_currency1')
        self.interest_rate = kwargs.get('interest_rate')
        self.side = kwargs.get('side')
        self.dynamic_hybrid_aggressive_style = kwargs.get('dynamic_hybrid_aggressive_style')
        self.compliance_restricted_status = kwargs.get('compliance_restricted_status')
        self.borrow_fee = kwargs.get('borrow_fee')
        self.ever_icu = kwargs.get('ever_icu')
        self.no_worse_than_level = kwargs.get('no_worse_than_level')
        self.update_time = kwargs.get('update_time')
        self.loan_spread = kwargs.get('loan_spread')
        self.tcm_cost_horizon12_hour = kwargs.get('tcm_cost_horizon12_hour')
        self.dew_point = kwargs.get('dew_point')
        self.research_commission = kwargs.get('research_commission')
        self.buy2bps = kwargs.get('buy2bps')
        self.asset_classifications_risk_country_code = kwargs.get('asset_classifications_risk_country_code')
        self.new_ideas_mtd = kwargs.get('new_ideas_mtd')
        self.var_swap_by_expiry = kwargs.get('var_swap_by_expiry')
        self.sell_date = kwargs.get('sell_date')
        self.aum_start = kwargs.get('aum_start')
        self.asset_parameters_settlement = kwargs.get('asset_parameters_settlement')
        self.max_temperature = kwargs.get('max_temperature')
        self.acquirer_shareholder_meeting_date = kwargs.get('acquirer_shareholder_meeting_date')
        self.count_ideas_wtd = kwargs.get('count_ideas_wtd')
        self.arrival_rt_normalized = kwargs.get('arrival_rt_normalized')
        self.report_type = kwargs.get('report_type')
        self.source_url = kwargs.get('source_url')
        self.estimated_return = kwargs.get('estimated_return')
        self.high = kwargs.get('high')
        self.source_last_update = kwargs.get('source_last_update')
        self.sunshine_forecast = kwargs.get('sunshine_forecast')
        self.quantity_mw = kwargs.get('quantity_mw')
        self.sell70cents = kwargs.get('sell70cents')
        self.sell110cents = kwargs.get('sell110cents')
        self.pnode_id = kwargs.get('pnode_id')
        self.price1 = kwargs.get('price1')
        self.price2 = kwargs.get('price2')
        self.reference_rate = kwargs.get('reference_rate')
        self.humidity_type = kwargs.get('humidity_type')
        self.prev_close_ask = kwargs.get('prev_close_ask')
        self.level = kwargs.get('level')
        self.implied_volatility_by_expiration = kwargs.get('implied_volatility_by_expiration')
        self.hurdle = kwargs.get('hurdle')
        self.asset_parameters_fixed_rate_day_count_fraction = kwargs.get(
            'asset_parameters_fixed_rate_day_count_fraction')
        self.es_momentum_score = kwargs.get('es_momentum_score')
        self.leg1_commodity_instrument_id = kwargs.get('leg1_commodity_instrument_id')
        self.leg2_index = kwargs.get('leg2_index')
        self.net_weight = kwargs.get('net_weight')
        self.portfolio_managers = kwargs.get('portfolio_managers')
        self.bos_in_ticks = kwargs.get('bos_in_ticks')
        self.asset_parameters_coupon_type = kwargs.get('asset_parameters_coupon_type')
        self.expected_residual_quantity = kwargs.get('expected_residual_quantity')
        self.roll_date = kwargs.get('roll_date')
        self.dynamic_hybrid_speed = kwargs.get('dynamic_hybrid_speed')
        self.cap_floor_vol = kwargs.get('cap_floor_vol')
        self.target_quantity = kwargs.get('target_quantity')
        self.submitter = kwargs.get('submitter')
        self.no = kwargs.get('no')
        self.notional = kwargs.get('notional')
        self.es_disclosure_percentage = kwargs.get('es_disclosure_percentage')
        self.close_executed_quantity_percentage = kwargs.get('close_executed_quantity_percentage')
        self.twap_realized_cash = kwargs.get('twap_realized_cash')
        self.is_open_auction = kwargs.get('is_open_auction')
        self.leg1_type = kwargs.get('leg1_type')
        self.wet_bulb_temp_hourly_forecast = kwargs.get('wet_bulb_temp_hourly_forecast')
        self.cleanup_price = kwargs.get('cleanup_price')
        self.total = kwargs.get('total')
        self.filled_notional_usd = kwargs.get('filled_notional_usd')
        self.asset_id = kwargs.get('asset_id')
        self.block_trade_election_indicator = kwargs.get('block_trade_election_indicator')
        self.test_status = kwargs.get('test_status')
        self.mkt_type = kwargs.get('mkt_type')
        self.last_updated_time = kwargs.get('last_updated_time')
        self.yield30_day = kwargs.get('yield30_day')
        self.buy28bps = kwargs.get('buy28bps')
        self.proportion_of_risk = kwargs.get('proportion_of_risk')
        self.future_month_k23 = kwargs.get('future_month_k23')
        self.future_month_k22 = kwargs.get('future_month_k22')
        self.future_month_k21 = kwargs.get('future_month_k21')
        self.primary_entity_id = kwargs.get('primary_entity_id')
        self.cross = kwargs.get('cross')
        self.idea_status = kwargs.get('idea_status')
        self.contract_subtype = kwargs.get('contract_subtype')
        self.sri = kwargs.get('sri')
        self.fx_forecast = kwargs.get('fx_forecast')
        self.fixing_time_label = kwargs.get('fixing_time_label')
        self.is_etf = kwargs.get('is_etf')
        self.fill_id = kwargs.get('fill_id')
        self.excess_returns = kwargs.get('excess_returns')
        self.dollar_return = kwargs.get('dollar_return')
        self.order_in_limit = kwargs.get('order_in_limit')
        self.expiry_time = kwargs.get('expiry_time')
        self.return_on_equity = kwargs.get('return_on_equity')
        self.future_month_k26 = kwargs.get('future_month_k26')
        self.future_month_k25 = kwargs.get('future_month_k25')
        self.future_month_k24 = kwargs.get('future_month_k24')
        self.restriction_end_date = kwargs.get('restriction_end_date')
        self.queue_in_lots_description = kwargs.get('queue_in_lots_description')
        self.volume_limit = kwargs.get('volume_limit')
        self.objective = kwargs.get('objective')
        self.nav_price = kwargs.get('nav_price')
        self.leg1_underlying_asset = kwargs.get('leg1_underlying_asset')
        self.bbgid = kwargs.get('bbgid')
        self.private_placement_type = kwargs.get('private_placement_type')
        self.hedge_notional = kwargs.get('hedge_notional')
        self.ask_low = kwargs.get('ask_low')
        self.intended_p_rate = kwargs.get('intended_p_rate')
        self.expiry = kwargs.get('expiry')
        self.avg_monthly_yield = kwargs.get('avg_monthly_yield')
        self.period_direction = kwargs.get('period_direction')
        self.prev_rpt_id = kwargs.get('prev_rpt_id')
        self.earnings_per_share = kwargs.get('earnings_per_share')
        self.strike_percentage = kwargs.get('strike_percentage')
        self.es_product_impact_percentile = kwargs.get('es_product_impact_percentile')
        self.vwap_realized_cash = kwargs.get('vwap_realized_cash')
        self.par_asset_swap_spread1m = kwargs.get('par_asset_swap_spread1m')
        self.prev_close_bid = kwargs.get('prev_close_bid')
        self.minimum_increment = kwargs.get('minimum_increment')
        self.tcm_cost_horizon16_day = kwargs.get('tcm_cost_horizon16_day')
        self.investment_mtd = kwargs.get('investment_mtd')
        self.settlement_date = kwargs.get('settlement_date')
        self.weighted_average_mid_normalized = kwargs.get('weighted_average_mid_normalized')
        self.sales_per_share = kwargs.get('sales_per_share')
        self.unadjusted_close = kwargs.get('unadjusted_close')
        self.loan_date = kwargs.get('loan_date')
        self.matched_maturity_swap_spread1m = kwargs.get('matched_maturity_swap_spread1m')
        self.collateral_percentage_actual = kwargs.get('collateral_percentage_actual')
        self.vwap_in_limit_unrealized_bps = kwargs.get('vwap_in_limit_unrealized_bps')
        self.metric_value = kwargs.get('metric_value')
        self.auto_exec_state = kwargs.get('auto_exec_state')
        self.total_recovered = kwargs.get('total_recovered')
        self.relative_return_ytd = kwargs.get('relative_return_ytd')
        self.tick_server = kwargs.get('tick_server')
        self.cumulative_volume_in_percentage = kwargs.get('cumulative_volume_in_percentage')
        self.real_time_restriction_status = kwargs.get('real_time_restriction_status')
        self.trade_type = kwargs.get('trade_type')
        self.settlement_type = kwargs.get('settlement_type')
        self.net_change = kwargs.get('net_change')
        self.number_of_underliers = kwargs.get('number_of_underliers')
        self.swap_type = kwargs.get('swap_type')
        self.forecast_type = kwargs.get('forecast_type')
        self.leg1_notional = kwargs.get('leg1_notional')
        self.sell_settle_date = kwargs.get('sell_settle_date')
        self.new_ideas_ytd = kwargs.get('new_ideas_ytd')
        self.management_fee = kwargs.get('management_fee')
        self.par_asset_swap_spread3m = kwargs.get('par_asset_swap_spread3m')
        self.sell36bps = kwargs.get('sell36bps')
        self.matched_maturity_swap_spread3m = kwargs.get('matched_maturity_swap_spread3m')
        self.source_id = kwargs.get('source_id')
        self.country = kwargs.get('country')
        self.option_premium_currency = kwargs.get('option_premium_currency')
        self.vwap = kwargs.get('vwap')
        self.touch_spread_score = kwargs.get('touch_spread_score')
        self.rating_second_highest = kwargs.get('rating_second_highest')
        self.sell24bps = kwargs.get('sell24bps')
        self.frequency = kwargs.get('frequency')
        self.activity_id = kwargs.get('activity_id')
        self.estimated_impact = kwargs.get('estimated_impact')
        self.sell35cents = kwargs.get('sell35cents')
        self.loan_spread_bucket = kwargs.get('loan_spread_bucket')
        self.coronavirus_global_activity_tracker = kwargs.get('coronavirus_global_activity_tracker')
        self.underlyers = kwargs.get('underlyers')
        self.asset_parameters_pricing_location = kwargs.get('asset_parameters_pricing_location')
        self.event_description = kwargs.get('event_description')
        self.iceberg_max_size = kwargs.get('iceberg_max_size')
        self.asset_parameters_coupon = kwargs.get('asset_parameters_coupon')
        self.details = kwargs.get('details')
        self.sector = kwargs.get('sector')
        self.avg_bed_util_rate = kwargs.get('avg_bed_util_rate')
        self.buy20bps = kwargs.get('buy20bps')
        self.index_level = kwargs.get('index_level')
        self.epidemic = kwargs.get('epidemic')
        self.mctr = kwargs.get('mctr')
        self.exchange_time = kwargs.get('exchange_time')
        self.historical_close = kwargs.get('historical_close')
        self.fips_code = kwargs.get('fips_code')
        self.buy32bps = kwargs.get('buy32bps')
        self.idea_id = kwargs.get('idea_id')
        self.comment_status = kwargs.get('comment_status')
        self.marginal_cost = kwargs.get('marginal_cost')
        self.client_weight = kwargs.get('client_weight')
        self.leg1_delivery_point = kwargs.get('leg1_delivery_point')
        self.sell5cents = kwargs.get('sell5cents')
        self.liq_wkly = kwargs.get('liq_wkly')
        self.unrealized_twap_performance_bps = kwargs.get('unrealized_twap_performance_bps')
        self.region = kwargs.get('region')
        self.temperature_hour = kwargs.get('temperature_hour')
        self.upper_bound = kwargs.get('upper_bound')
        self.sell55cents = kwargs.get('sell55cents')
        self.num_pedi_icu_beds = kwargs.get('num_pedi_icu_beds')
        self.bid_yield = kwargs.get('bid_yield')
        self.expected_residual = kwargs.get('expected_residual')
        self.option_premium = kwargs.get('option_premium')
        self.owner_name = kwargs.get('owner_name')
        self.par_asset_swap_spread6m = kwargs.get('par_asset_swap_spread6m')
        self.z_score = kwargs.get('z_score')
        self.sell12bps = kwargs.get('sell12bps')
        self.event_start_time = kwargs.get('event_start_time')
        self.matched_maturity_swap_spread6m = kwargs.get('matched_maturity_swap_spread6m')
        self.turnover = kwargs.get('turnover')
        self.price_spot_target_unit = kwargs.get('price_spot_target_unit')
        self.coverage = kwargs.get('coverage')
        self.g_percentile = kwargs.get('g_percentile')
        self.rvt_adj = kwargs.get('rvt_adj')
        self.cloud_cover_hourly_forecast = kwargs.get('cloud_cover_hourly_forecast')
        self.lending_fund_nav = kwargs.get('lending_fund_nav')
        self.source_original_category = kwargs.get('source_original_category')
        self.percent_close_execution_quantity = kwargs.get('percent_close_execution_quantity')
        self.latest_execution_time = kwargs.get('latest_execution_time')
        self.arrival_mid_realized_bps = kwargs.get('arrival_mid_realized_bps')
        self.location = kwargs.get('location')
        self.scenario_id = kwargs.get('scenario_id')
        self.termination_tenor = kwargs.get('termination_tenor')
        self.queue_clock_time = kwargs.get('queue_clock_time')
        self.discretion_lower_bound = kwargs.get('discretion_lower_bound')
        self.tcm_cost_participation_rate50_pct = kwargs.get('tcm_cost_participation_rate50_pct')
        self.rating_linear = kwargs.get('rating_linear')
        self.previous_close_unrealized_bps = kwargs.get('previous_close_unrealized_bps')
        self.sub_asset_class_for_other_commodity = kwargs.get('sub_asset_class_for_other_commodity')
        self.forward_price = kwargs.get('forward_price')
        self.__type = kwargs.get('type_')
        self.strike_ref = kwargs.get('strike_ref')
        self.cumulative_pnl = kwargs.get('cumulative_pnl')
        self.short_tenor = kwargs.get('short_tenor')
        self.sell28bps = kwargs.get('sell28bps')
        self.fund_class = kwargs.get('fund_class')
        self.unadjusted_volume = kwargs.get('unadjusted_volume')
        self.buy36bps = kwargs.get('buy36bps')
        self.position_idx = kwargs.get('position_idx')
        self.wind_chill_hourly_forecast = kwargs.get('wind_chill_hourly_forecast')
        self.sec_name = kwargs.get('sec_name')
        self.implied_volatility_by_relative_strike = kwargs.get('implied_volatility_by_relative_strike')
        self.percent_adv = kwargs.get('percent_adv')
        self.reference_rate_usd = kwargs.get('reference_rate_usd')
        self.leg1_total_notional = kwargs.get('leg1_total_notional')
        self.contract = kwargs.get('contract')
        self.nvt_adj90 = kwargs.get('nvt_adj90')
        self.payment_frequency1 = kwargs.get('payment_frequency1')
        self.payment_frequency2 = kwargs.get('payment_frequency2')
        self.bespoke = kwargs.get('bespoke')
        self.repo_tenor = kwargs.get('repo_tenor')
        self.sell15cents = kwargs.get('sell15cents')
        self.investment_qtd = kwargs.get('investment_qtd')
        self.heat_index_forecast = kwargs.get('heat_index_forecast')
        self.rating_standard_and_poors = kwargs.get('rating_standard_and_poors')
        self.quality_stars = kwargs.get('quality_stars')
        self.leg2_floating_index = kwargs.get('leg2_floating_index')
        self.source_ticker = kwargs.get('source_ticker')
        self.primary_vwap_unrealized_bps = kwargs.get('primary_vwap_unrealized_bps')
        self.gsid = kwargs.get('gsid')
        self.lending_fund = kwargs.get('lending_fund')
        self.sensitivity = kwargs.get('sensitivity')
        self.embedded_option_type = kwargs.get('embedded_option_type')
        self.day_count = kwargs.get('day_count')
        self.sell16bps = kwargs.get('sell16bps')
        self.relative_break_even_inflation_change = kwargs.get('relative_break_even_inflation_change')
        self.sell25cents = kwargs.get('sell25cents')
        self.var_swap = kwargs.get('var_swap')
        self.buy5point5bps = kwargs.get('buy5point5bps')
        self.block_large_notional = kwargs.get('block_large_notional')
        self.sell2point5bps = kwargs.get('sell2point5bps')
        self.capacity = kwargs.get('capacity')
        self.sectors_raw = kwargs.get('sectors_raw')
        self.primary_vwap_in_limit = kwargs.get('primary_vwap_in_limit')
        self.shareclass_price = kwargs.get('shareclass_price')
        self.trade_size = kwargs.get('trade_size')
        self.price_spot_entry_value = kwargs.get('price_spot_entry_value')
        self.buy8point5bps = kwargs.get('buy8point5bps')
        self.symbol_dimensions = kwargs.get('symbol_dimensions')
        self.buy24bps = kwargs.get('buy24bps')
        self.side_pocket = kwargs.get('side_pocket')
        self.observation = kwargs.get('observation')
        self.option_type_sdr = kwargs.get('option_type_sdr')
        self.scenario_group_id = kwargs.get('scenario_group_id')
        self.average_implied_variance = kwargs.get('average_implied_variance')
        self.avg_trade_rate_description = kwargs.get('avg_trade_rate_description')
        self.fraction = kwargs.get('fraction')
        self.asset_count_short = kwargs.get('asset_count_short')
        self.collateral_percentage_required = kwargs.get('collateral_percentage_required')
        self.sell5point5bps = kwargs.get('sell5point5bps')
        self.date = kwargs.get('date')
        self.zip_code = kwargs.get('zip_code')
        self.total_std_return_since_inception = kwargs.get('total_std_return_since_inception')
        self.source_category = kwargs.get('source_category')
        self.volume_unadjusted = kwargs.get('volume_unadjusted')
        self.passive_ratio = kwargs.get('passive_ratio')
        self.price_to_earnings = kwargs.get('price_to_earnings')
        self.order_depth = kwargs.get('order_depth')
        self.ann_yield3_month = kwargs.get('ann_yield3_month')
        self.net_flow_std = kwargs.get('net_flow_std')
        self.encoded_stats = kwargs.get('encoded_stats')
        self.buy5bps = kwargs.get('buy5bps')
        self.run_time = kwargs.get('run_time')
        self.ask_size = kwargs.get('ask_size')
        self.absolute_return_mtd = kwargs.get('absolute_return_mtd')
        self.std30_days_unsubsidized_yield = kwargs.get('std30_days_unsubsidized_yield')
        self.resource = kwargs.get('resource')
        self.average_realized_volatility = kwargs.get('average_realized_volatility')
        self.trace_adv_buy = kwargs.get('trace_adv_buy')
        self.new_confirmed = kwargs.get('new_confirmed')
        self.sell8bps = kwargs.get('sell8bps')
        self.bid_price = kwargs.get('bid_price')
        self.sell8point5bps = kwargs.get('sell8point5bps')
        self.target_price_unrealized_bps = kwargs.get('target_price_unrealized_bps')
        self.es_numeric_percentile = kwargs.get('es_numeric_percentile')
        self.leg2_underlying_asset = kwargs.get('leg2_underlying_asset')
        self.csa_terms = kwargs.get('csa_terms')
        self.relative_payoff_mtd = kwargs.get('relative_payoff_mtd')
        self.daily_net_shareholder_flows = kwargs.get('daily_net_shareholder_flows')
        self.buy2point5bps = kwargs.get('buy2point5bps')
        self.cai = kwargs.get('cai')
        self.executed_notional_usd = kwargs.get('executed_notional_usd')
        self.system_time = kwargs.get('system_time')
        self.total_home_isolation = kwargs.get('total_home_isolation')
        self.station_name = kwargs.get('station_name')
        self.pass_pct = kwargs.get('pass_pct')
        self.opening_report = kwargs.get('opening_report')
        self.event_timestamp = kwargs.get('event_timestamp')
        self.midcurve_atm_fwd_rate = kwargs.get('midcurve_atm_fwd_rate')
        self.precipitation_forecast = kwargs.get('precipitation_forecast')
        self.equity_risk_premium_index = kwargs.get('equity_risk_premium_index')
        self.fatalities_underlying_conditions_unknown = kwargs.get('fatalities_underlying_conditions_unknown')
        self.buy12bps = kwargs.get('buy12bps')
        self.clearing_house = kwargs.get('clearing_house')
        self.day_close_unrealized_bps = kwargs.get('day_close_unrealized_bps')
        self.sts_rates_maturity = kwargs.get('sts_rates_maturity')
        self.liq_dly = kwargs.get('liq_dly')
        self.contributor_role = kwargs.get('contributor_role')
        self.total_fatalities = kwargs.get('total_fatalities')

    @property
    def investment_rate(self) -> float:
        """The rate of return on an investment.  In the context of securities lending, it
           is the rate being earned on the reinvested collateral received from
           the borrower."""
        return self.__investment_rate

    @investment_rate.setter
    def investment_rate(self, value: float):
        self._property_changed('investment_rate')
        self.__investment_rate = value        

    @property
    def starting_emma_legal_entity_id(self) -> str:
        """Starting EMMA Legal Entity ID (LE) for which the SCR client agreement was
           signed."""
        return self.__starting_emma_legal_entity_id

    @starting_emma_legal_entity_id.setter
    def starting_emma_legal_entity_id(self, value: str):
        self._property_changed('starting_emma_legal_entity_id')
        self.__starting_emma_legal_entity_id = value        

    @property
    def mdapi_class(self) -> str:
        """MDAPI Asset Class."""
        return self.__mdapi_class

    @mdapi_class.setter
    def mdapi_class(self, value: str):
        self._property_changed('mdapi_class')
        self.__mdapi_class = value        

    @property
    def total_notional_usd(self) -> float:
        """Total notional on order in dollars."""
        return self.__total_notional_usd

    @total_notional_usd.setter
    def total_notional_usd(self, value: float):
        self._property_changed('total_notional_usd')
        self.__total_notional_usd = value        

    @property
    def bid_unadjusted(self) -> float:
        """Unadjusted bid level of an asset based on official exchange fixing or
           calculation agent marked level."""
        return self.__bid_unadjusted

    @bid_unadjusted.setter
    def bid_unadjusted(self, value: float):
        self._property_changed('bid_unadjusted')
        self.__bid_unadjusted = value        

    @property
    def aggressive_fills_percentage(self) -> float:
        """Percent of total order filled at aggressive touch."""
        return self.__aggressive_fills_percentage

    @aggressive_fills_percentage.setter
    def aggressive_fills_percentage(self, value: float):
        self._property_changed('aggressive_fills_percentage')
        self.__aggressive_fills_percentage = value        

    @property
    def future10yr_market_cap(self) -> float:
        """The sum USD value of all native units counting the current supply and including
           those that will be issued over the next 10 years if the current known
           issuance schedule is followed."""
        return self.__future10yr_market_cap

    @future10yr_market_cap.setter
    def future10yr_market_cap(self, value: float):
        self._property_changed('future10yr_market_cap')
        self.__future10yr_market_cap = value        

    @property
    def vehicle_type(self) -> str:
        """Type of investment vehicle. Only viewable after having been granted additional
           access to asset information."""
        return self.__vehicle_type

    @vehicle_type.setter
    def vehicle_type(self, value: str):
        self._property_changed('vehicle_type')
        self.__vehicle_type = value        

    @property
    def total_fatalities_by_state(self) -> float:
        """Total number of fatalities by state."""
        return self.__total_fatalities_by_state

    @total_fatalities_by_state.setter
    def total_fatalities_by_state(self, value: float):
        self._property_changed('total_fatalities_by_state')
        self.__total_fatalities_by_state = value        

    @property
    def new_active(self) -> float:
        """Change in number of active cases from previous day."""
        return self.__new_active

    @new_active.setter
    def new_active(self, value: float):
        self._property_changed('new_active')
        self.__new_active = value        

    @property
    def daily_risk(self) -> float:
        """Daily Risk Value."""
        return self.__daily_risk

    @daily_risk.setter
    def daily_risk(self, value: float):
        self._property_changed('daily_risk')
        self.__daily_risk = value        

    @property
    def energy(self) -> float:
        """Energy price component."""
        return self.__energy

    @energy.setter
    def energy(self, value: float):
        self._property_changed('energy')
        self.__energy = value        

    @property
    def sunshine_daily_forecast(self) -> float:
        """The forecast value for sunshine in percent."""
        return self.__sunshine_daily_forecast

    @sunshine_daily_forecast.setter
    def sunshine_daily_forecast(self, value: float):
        self._property_changed('sunshine_daily_forecast')
        self.__sunshine_daily_forecast = value        

    @property
    def sentiment_score(self) -> float:
        """A value representing a sentiment indicator."""
        return self.__sentiment_score

    @sentiment_score.setter
    def sentiment_score(self, value: float):
        self._property_changed('sentiment_score')
        self.__sentiment_score = value        

    @property
    def correlation(self) -> float:
        """Market implied correlation between two tenors."""
        return self.__correlation

    @correlation.setter
    def correlation(self, value: float):
        self._property_changed('correlation')
        self.__correlation = value        

    @property
    def exposure(self) -> float:
        """Exposure of a given asset or portfolio in the denominated currency of the asset
           or portfolio."""
        return self.__exposure

    @exposure.setter
    def exposure(self, value: float):
        self._property_changed('exposure')
        self.__exposure = value        

    @property
    def size(self) -> float:
        """Size of market execution."""
        return self.__size

    @size.setter
    def size(self, value: float):
        self._property_changed('size')
        self.__size = value        

    @property
    def market_data_asset(self) -> str:
        """The market data asset (e.g. USD, USD/EUR)."""
        return self.__market_data_asset

    @market_data_asset.setter
    def market_data_asset(self, value: str):
        self._property_changed('market_data_asset')
        self.__market_data_asset = value        

    @property
    def buy75cents(self) -> float:
        """The amount GS would buy for 75 cents charge."""
        return self.__buy75cents

    @buy75cents.setter
    def buy75cents(self, value: float):
        self._property_changed('buy75cents')
        self.__buy75cents = value        

    @property
    def unadjusted_high(self) -> float:
        """Unadjusted high level of an asset based on official exchange fixing or
           calculation agent marked level."""
        return self.__unadjusted_high

    @unadjusted_high.setter
    def unadjusted_high(self, value: float):
        self._property_changed('unadjusted_high')
        self.__unadjusted_high = value        

    @property
    def source_importance(self) -> float:
        """Source importance."""
        return self.__source_importance

    @source_importance.setter
    def source_importance(self, value: float):
        self._property_changed('source_importance')
        self.__source_importance = value        

    @property
    def closing_yield(self) -> float:
        """Closing yield."""
        return self.__closing_yield

    @closing_yield.setter
    def closing_yield(self, value: float):
        self._property_changed('closing_yield')
        self.__closing_yield = value        

    @property
    def wind(self) -> float:
        """Value of the wind attribute selected."""
        return self.__wind

    @wind.setter
    def wind(self, value: float):
        self._property_changed('wind')
        self.__wind = value        

    @property
    def sc16(self) -> bool:
        """Document Ongoing SCR Compliance."""
        return self.__sc16

    @sc16.setter
    def sc16(self, value: bool):
        self._property_changed('sc16')
        self.__sc16 = value        

    @property
    def sc15(self) -> bool:
        """Restrict Access To Specified Named Personnel."""
        return self.__sc15

    @sc15.setter
    def sc15(self, value: bool):
        self._property_changed('sc15')
        self.__sc15 = value        

    @property
    def sc12(self) -> bool:
        """Exclude From Indications Of Interest."""
        return self.__sc12

    @sc12.setter
    def sc12(self, value: bool):
        self._property_changed('sc12')
        self.__sc12 = value        

    @property
    def sc11(self) -> bool:
        """Replace Client True Name With Alias Name."""
        return self.__sc11

    @sc11.setter
    def sc11(self, value: bool):
        self._property_changed('sc11')
        self.__sc11 = value        

    @property
    def primary_vwap_in_limit_unrealized_bps(self) -> float:
        """Unrealised performance vs Primary VWAP In Limit, in bps."""
        return self.__primary_vwap_in_limit_unrealized_bps

    @primary_vwap_in_limit_unrealized_bps.setter
    def primary_vwap_in_limit_unrealized_bps(self, value: float):
        self._property_changed('primary_vwap_in_limit_unrealized_bps')
        self.__primary_vwap_in_limit_unrealized_bps = value        

    @property
    def display_name(self) -> str:
        """Display Name."""
        return self.__display_name

    @display_name.setter
    def display_name(self, value: str):
        self._property_changed('display_name')
        self.__display_name = value        

    @property
    def minutes_to_trade100_pct(self) -> float:
        """Minutes to trade 100 percent."""
        return self.__minutes_to_trade100_pct

    @minutes_to_trade100_pct.setter
    def minutes_to_trade100_pct(self, value: float):
        self._property_changed('minutes_to_trade100_pct')
        self.__minutes_to_trade100_pct = value        

    @property
    def sc14(self) -> bool:
        """Notify Strat Supervisors Of Personnel Assignment Limitation."""
        return self.__sc14

    @sc14.setter
    def sc14(self, value: bool):
        self._property_changed('sc14')
        self.__sc14 = value        

    @property
    def cumulative_volume_in_shares(self) -> float:
        """Forecast of the cumulative volume of shares from start of day up to the end of
           the bucket interval."""
        return self.__cumulative_volume_in_shares

    @cumulative_volume_in_shares.setter
    def cumulative_volume_in_shares(self, value: float):
        self._property_changed('cumulative_volume_in_shares')
        self.__cumulative_volume_in_shares = value        

    @property
    def sc13(self) -> bool:
        """Restrict Access In Client Relationship Management Platforms To Sales Personnel
           Covering Client."""
        return self.__sc13

    @sc13.setter
    def sc13(self, value: bool):
        self._property_changed('sc13')
        self.__sc13 = value        

    @property
    def new_fatalities(self) -> float:
        """New fatal cases."""
        return self.__new_fatalities

    @new_fatalities.setter
    def new_fatalities(self, value: float):
        self._property_changed('new_fatalities')
        self.__new_fatalities = value        

    @property
    def buy50bps(self) -> float:
        """The amount GS would buy for 50 bps charge."""
        return self.__buy50bps

    @buy50bps.setter
    def buy50bps(self, value: float):
        self._property_changed('buy50bps')
        self.__buy50bps = value        

    @property
    def num_staffed_beds(self) -> float:
        """Number of adult bed, pediatric bed, birthing room, or newborn ICU bed (excluding
           newborn bassinets) maintained in a patient care area for lodging
           patients in acute, long term, or domiciliary areas of the hospital."""
        return self.__num_staffed_beds

    @num_staffed_beds.setter
    def num_staffed_beds(self, value: float):
        self._property_changed('num_staffed_beds')
        self.__num_staffed_beds = value        

    @property
    def upfront_payment(self) -> float:
        """Upfront payment fee."""
        return self.__upfront_payment

    @upfront_payment.setter
    def upfront_payment(self, value: float):
        self._property_changed('upfront_payment')
        self.__upfront_payment = value        

    @property
    def arrival_mid_realized_cash(self) -> float:
        """Consolidated realised performance vs Arrival Mid, in USD."""
        return self.__arrival_mid_realized_cash

    @arrival_mid_realized_cash.setter
    def arrival_mid_realized_cash(self, value: float):
        self._property_changed('arrival_mid_realized_cash')
        self.__arrival_mid_realized_cash = value        

    @property
    def sc10(self) -> bool:
        """Exclude From Calibration And Research."""
        return self.__sc10

    @sc10.setter
    def sc10(self, value: bool):
        self._property_changed('sc10')
        self.__sc10 = value        

    @property
    def sc05(self) -> bool:
        """Restrict Access To Trade Execution Mandate Personnel."""
        return self.__sc05

    @sc05.setter
    def sc05(self, value: bool):
        self._property_changed('sc05')
        self.__sc05 = value        

    @property
    def a(self) -> float:
        """Stock specific coefficient."""
        return self.__a

    @a.setter
    def a(self, value: float):
        self._property_changed('a')
        self.__a = value        

    @property
    def sc04(self) -> bool:
        """Restrict Access To Sales Personnel Covering Both Client And Executed Product."""
        return self.__sc04

    @sc04.setter
    def sc04(self, value: bool):
        self._property_changed('sc04')
        self.__sc04 = value        

    @property
    def b(self) -> float:
        """Stock specific coefficient."""
        return self.__b

    @b.setter
    def b(self, value: float):
        self._property_changed('b')
        self.__b = value        

    @property
    def sc07(self) -> bool:
        """Exclude From Market Share Survey Submissions."""
        return self.__sc07

    @sc07.setter
    def sc07(self, value: bool):
        self._property_changed('sc07')
        self.__sc07 = value        

    @property
    def c(self) -> float:
        """Stock specific coefficient."""
        return self.__c

    @c.setter
    def c(self, value: float):
        self._property_changed('c')
        self.__c = value        

    @property
    def yield_to_maturity(self) -> float:
        """The return an investor realizes on a bond sold at the mid price at maturity."""
        return self.__yield_to_maturity

    @yield_to_maturity.setter
    def yield_to_maturity(self, value: float):
        self._property_changed('yield_to_maturity')
        self.__yield_to_maturity = value        

    @property
    def sc06(self) -> bool:
        """Restrict Access To Agency Personnel."""
        return self.__sc06

    @sc06.setter
    def sc06(self, value: bool):
        self._property_changed('sc06')
        self.__sc06 = value        

    @property
    def address(self) -> str:
        """Street address."""
        return self.__address

    @address.setter
    def address(self, value: str):
        self._property_changed('address')
        self.__address = value        

    @property
    def sc01(self) -> bool:
        """Define Information Barriers Policy."""
        return self.__sc01

    @sc01.setter
    def sc01(self, value: bool):
        self._property_changed('sc01')
        self.__sc01 = value        

    @property
    def leg2_payment_frequency(self) -> str:
        """Same as Leg 1 Payment Frequency."""
        return self.__leg2_payment_frequency

    @leg2_payment_frequency.setter
    def leg2_payment_frequency(self, value: str):
        self._property_changed('leg2_payment_frequency')
        self.__leg2_payment_frequency = value        

    @property
    def sc03(self) -> bool:
        """Educate Sales And Traders About SCR Agreements."""
        return self.__sc03

    @sc03.setter
    def sc03(self, value: bool):
        self._property_changed('sc03')
        self.__sc03 = value        

    @property
    def sc02(self) -> bool:
        """Train On Information Barriers Policy."""
        return self.__sc02

    @sc02.setter
    def sc02(self, value: bool):
        self._property_changed('sc02')
        self.__sc02 = value        

    @property
    def geography_name(self) -> str:
        """Name of the country or region for which metric is calculated."""
        return self.__geography_name

    @geography_name.setter
    def geography_name(self, value: str):
        self._property_changed('geography_name')
        self.__geography_name = value        

    @property
    def borrower(self) -> str:
        """Name of the borrowing entity on a securities lending agreement."""
        return self.__borrower

    @borrower.setter
    def borrower(self, value: str):
        self._property_changed('borrower')
        self.__borrower = value        

    @property
    def share_class_type(self) -> str:
        """Share class type."""
        return self.__share_class_type

    @share_class_type.setter
    def share_class_type(self, value: str):
        self._property_changed('share_class_type')
        self.__share_class_type = value        

    @property
    def settle_price(self) -> float:
        """Settling level of an asset based on official exchange fixing or calculation
           agent marked level."""
        return self.__settle_price

    @settle_price.setter
    def settle_price(self, value: float):
        self._property_changed('settle_price')
        self.__settle_price = value        

    @property
    def performance_contribution(self) -> float:
        """The contribution of an underlying asset to the overall performance."""
        return self.__performance_contribution

    @performance_contribution.setter
    def performance_contribution(self, value: float):
        self._property_changed('performance_contribution')
        self.__performance_contribution = value        

    @property
    def sc09(self) -> bool:
        """Exclude From Market Color Commentary By Sales And Trading."""
        return self.__sc09

    @sc09.setter
    def sc09(self, value: bool):
        self._property_changed('sc09')
        self.__sc09 = value        

    @property
    def mkt_class(self) -> str:
        """The MDAPI Class (e.g. Swap, Cash)."""
        return self.__mkt_class

    @mkt_class.setter
    def mkt_class(self, value: str):
        self._property_changed('mkt_class')
        self.__mkt_class = value        

    @property
    def sc08(self) -> bool:
        """Exclude From Systematic Market Color Reporting And Advertised Volumes."""
        return self.__sc08

    @sc08.setter
    def sc08(self, value: bool):
        self._property_changed('sc08')
        self.__sc08 = value        

    @property
    def collateralization(self) -> str:
        """If an SB swap is not cleared, an indication of whether a swap is
           Uncollateralized (UC), Partially Collateralized (PC), One-Way
           Collateralized (OC), or Fully Collateralized (FC)."""
        return self.__collateralization

    @collateralization.setter
    def collateralization(self, value: str):
        self._property_changed('collateralization')
        self.__collateralization = value        

    @property
    def future_month_u26(self) -> float:
        """Commods future month code."""
        return self.__future_month_u26

    @future_month_u26.setter
    def future_month_u26(self, value: float):
        self._property_changed('future_month_u26')
        self.__future_month_u26 = value        

    @property
    def future_month_u25(self) -> float:
        """Commods future month code."""
        return self.__future_month_u25

    @future_month_u25.setter
    def future_month_u25(self, value: float):
        self._property_changed('future_month_u25')
        self.__future_month_u25 = value        

    @property
    def future_month_u24(self) -> float:
        """Commods future month code."""
        return self.__future_month_u24

    @future_month_u24.setter
    def future_month_u24(self, value: float):
        self._property_changed('future_month_u24')
        self.__future_month_u24 = value        

    @property
    def future_month_u23(self) -> float:
        """Commods future month code."""
        return self.__future_month_u23

    @future_month_u23.setter
    def future_month_u23(self, value: float):
        self._property_changed('future_month_u23')
        self.__future_month_u23 = value        

    @property
    def future_month_u22(self) -> float:
        """Commods future month code."""
        return self.__future_month_u22

    @future_month_u22.setter
    def future_month_u22(self, value: float):
        self._property_changed('future_month_u22')
        self.__future_month_u22 = value        

    @property
    def statement_id(self) -> str:
        """Statement UUID."""
        return self.__statement_id

    @statement_id.setter
    def statement_id(self, value: str):
        self._property_changed('statement_id')
        self.__statement_id = value        

    @property
    def future_month_u21(self) -> float:
        """Commods future month code."""
        return self.__future_month_u21

    @future_month_u21.setter
    def future_month_u21(self, value: float):
        self._property_changed('future_month_u21')
        self.__future_month_u21 = value        

    @property
    def modified_duration(self) -> float:
        """Measure of a bond's price sensitivity to changes in interest rates."""
        return self.__modified_duration

    @modified_duration.setter
    def modified_duration(self, value: float):
        self._property_changed('modified_duration')
        self.__modified_duration = value        

    @property
    def vol180d(self) -> float:
        """D-180 D volatility."""
        return self.__vol180d

    @vol180d.setter
    def vol180d(self, value: float):
        self._property_changed('vol180d')
        self.__vol180d = value        

    @property
    def short_rates_contribution(self) -> float:
        """Contribution of short rate component to FCI."""
        return self.__short_rates_contribution

    @short_rates_contribution.setter
    def short_rates_contribution(self, value: float):
        self._property_changed('short_rates_contribution')
        self.__short_rates_contribution = value        

    @property
    def implied_normal_volatility(self) -> float:
        """Market implied volatility measured using a normal model in bps/day."""
        return self.__implied_normal_volatility

    @implied_normal_volatility.setter
    def implied_normal_volatility(self, value: float):
        self._property_changed('implied_normal_volatility')
        self.__implied_normal_volatility = value        

    @property
    def solar_generation(self) -> float:
        """Solar generation value provided by source."""
        return self.__solar_generation

    @solar_generation.setter
    def solar_generation(self, value: float):
        self._property_changed('solar_generation')
        self.__solar_generation = value        

    @property
    def mtm_price(self) -> float:
        """Amount of profit or loss realized over statement period."""
        return self.__mtm_price

    @mtm_price.setter
    def mtm_price(self, value: float):
        self._property_changed('mtm_price')
        self.__mtm_price = value        

    @property
    def swap_spread_change(self) -> float:
        """Swap spread change."""
        return self.__swap_spread_change

    @swap_spread_change.setter
    def swap_spread_change(self, value: float):
        self._property_changed('swap_spread_change')
        self.__swap_spread_change = value        

    @property
    def realized_arrival_performance_usd(self) -> float:
        """Average execution price vs Consolidated Arrival (in limit) since order inception
           ??? realized in $."""
        return self.__realized_arrival_performance_usd

    @realized_arrival_performance_usd.setter
    def realized_arrival_performance_usd(self, value: float):
        self._property_changed('realized_arrival_performance_usd')
        self.__realized_arrival_performance_usd = value        

    @property
    def portfolio_assets(self) -> float:
        """Total amount of assets under management across all share classes."""
        return self.__portfolio_assets

    @portfolio_assets.setter
    def portfolio_assets(self, value: float):
        self._property_changed('portfolio_assets')
        self.__portfolio_assets = value        

    @property
    def pricingdate(self) -> str:
        """Pricing Date."""
        return self.__pricingdate

    @pricingdate.setter
    def pricingdate(self, value: str):
        self._property_changed('pricingdate')
        self.__pricingdate = value        

    @property
    def tcm_cost_horizon3_hour(self) -> float:
        """TCM cost with a 3 hour time horizon."""
        return self.__tcm_cost_horizon3_hour

    @tcm_cost_horizon3_hour.setter
    def tcm_cost_horizon3_hour(self, value: float):
        self._property_changed('tcm_cost_horizon3_hour')
        self.__tcm_cost_horizon3_hour = value        

    @property
    def exchange_rate(self) -> float:
        """Amount that an exchange charges in fees, in mils. Negative numbers denote
           rebates."""
        return self.__exchange_rate

    @exchange_rate.setter
    def exchange_rate(self, value: float):
        self._property_changed('exchange_rate')
        self.__exchange_rate = value        

    @property
    def potential_bed_cap_inc(self) -> float:
        """The number of beds by which a hospital can increase bed capacity, derived from
           the difference between number of allowed licensed beds and number of
           currently staffed beds."""
        return self.__potential_bed_cap_inc

    @potential_bed_cap_inc.setter
    def potential_bed_cap_inc(self, value: float):
        self._property_changed('potential_bed_cap_inc')
        self.__potential_bed_cap_inc = value        

    @property
    def number_covered(self) -> float:
        """Number of underlyers covered by risk model."""
        return self.__number_covered

    @number_covered.setter
    def number_covered(self, value: float):
        self._property_changed('number_covered')
        self.__number_covered = value        

    @property
    def number_of_positions(self) -> float:
        """Number of positions."""
        return self.__number_of_positions

    @number_of_positions.setter
    def number_of_positions(self, value: float):
        self._property_changed('number_of_positions')
        self.__number_of_positions = value        

    @property
    def open_unadjusted(self) -> float:
        """Unadjusted open level of an asset based on official exchange fixing or
           calculation agent marked level."""
        return self.__open_unadjusted

    @open_unadjusted.setter
    def open_unadjusted(self, value: float):
        self._property_changed('open_unadjusted')
        self.__open_unadjusted = value        

    @property
    def strike_time(self) -> datetime.datetime:
        """Time at which order began executing."""
        return self.__strike_time

    @strike_time.setter
    def strike_time(self, value: datetime.datetime):
        self._property_changed('strike_time')
        self.__strike_time = value        

    @property
    def ask_price(self) -> float:
        """Latest Ask Price (price offering to sell)."""
        return self.__ask_price

    @ask_price.setter
    def ask_price(self, value: float):
        self._property_changed('ask_price')
        self.__ask_price = value        

    @property
    def event_id(self) -> str:
        """Goldman Sachs internal event identifier."""
        return self.__event_id

    @event_id.setter
    def event_id(self, value: str):
        self._property_changed('event_id')
        self.__event_id = value        

    @property
    def sectors(self) -> Tuple[str, ...]:
        """Sector classifications of an asset."""
        return self.__sectors

    @sectors.setter
    def sectors(self, value: Tuple[str, ...]):
        self._property_changed('sectors')
        self.__sectors = value        

    @property
    def additional_price_notation_type(self) -> str:
        """Basis points, Price, Yield, Spread, Coupon, etc., depending on the type of SB
           swap, which is calculated at affirmation."""
        return self.__additional_price_notation_type

    @additional_price_notation_type.setter
    def additional_price_notation_type(self, value: str):
        self._property_changed('additional_price_notation_type')
        self.__additional_price_notation_type = value        

    @property
    def gross_investment_qtd(self) -> float:
        """Total gross investment Quarter to date."""
        return self.__gross_investment_qtd

    @gross_investment_qtd.setter
    def gross_investment_qtd(self, value: float):
        self._property_changed('gross_investment_qtd')
        self.__gross_investment_qtd = value        

    @property
    def annualized_risk(self) -> float:
        """Annualized risk."""
        return self.__annualized_risk

    @annualized_risk.setter
    def annualized_risk(self, value: float):
        self._property_changed('annualized_risk')
        self.__annualized_risk = value        

    @property
    def estimated_holding_time_short(self) -> float:
        """The estimated holding time for a short position."""
        return self.__estimated_holding_time_short

    @estimated_holding_time_short.setter
    def estimated_holding_time_short(self, value: float):
        self._property_changed('estimated_holding_time_short')
        self.__estimated_holding_time_short = value        

    @property
    def midcurve_premium(self) -> float:
        """Midcurve premium."""
        return self.__midcurve_premium

    @midcurve_premium.setter
    def midcurve_premium(self, value: float):
        self._property_changed('midcurve_premium')
        self.__midcurve_premium = value        

    @property
    def volume_composite(self) -> float:
        """Accumulated number of shares, lots or contracts traded according to the market
           convention at all exchanges."""
        return self.__volume_composite

    @volume_composite.setter
    def volume_composite(self, value: float):
        self._property_changed('volume_composite')
        self.__volume_composite = value        

    @property
    def sharpe_qtd(self) -> float:
        """Sharpe ratio Quarter to date."""
        return self.__sharpe_qtd

    @sharpe_qtd.setter
    def sharpe_qtd(self, value: float):
        self._property_changed('sharpe_qtd')
        self.__sharpe_qtd = value        

    @property
    def clearing_exception_or_exemption_indicator(self) -> str:
        """If buyer or seller or both is electing the End User Exception."""
        return self.__clearing_exception_or_exemption_indicator

    @clearing_exception_or_exemption_indicator.setter
    def clearing_exception_or_exemption_indicator(self, value: str):
        self._property_changed('clearing_exception_or_exemption_indicator')
        self.__clearing_exception_or_exemption_indicator = value        

    @property
    def estimated_holding_time_long(self) -> float:
        """The estimated holding time for a long position."""
        return self.__estimated_holding_time_long

    @estimated_holding_time_long.setter
    def estimated_holding_time_long(self, value: float):
        self._property_changed('estimated_holding_time_long')
        self.__estimated_holding_time_long = value        

    @property
    def external(self) -> bool:
        """Whether entity was created by an external user."""
        return self.__external

    @external.setter
    def external(self, value: bool):
        self._property_changed('external')
        self.__external = value        

    @property
    def tracker_name(self) -> str:
        """Name of the tracker."""
        return self.__tracker_name

    @tracker_name.setter
    def tracker_name(self, value: str):
        self._property_changed('tracker_name')
        self.__tracker_name = value        

    @property
    def sell50cents(self) -> float:
        """The amount GS would sell for 50 cents charge."""
        return self.__sell50cents

    @sell50cents.setter
    def sell50cents(self, value: float):
        self._property_changed('sell50cents')
        self.__sell50cents = value        

    @property
    def trade_price(self) -> float:
        """Last trade price or value."""
        return self.__trade_price

    @trade_price.setter
    def trade_price(self, value: float):
        self._property_changed('trade_price')
        self.__trade_price = value        

    @property
    def cleared(self) -> str:
        """An indication of whether or not an SB swap transaction is going to be cleared by
           a derivatives clearing organization."""
        return self.__cleared

    @cleared.setter
    def cleared(self, value: str):
        self._property_changed('cleared')
        self.__cleared = value        

    @property
    def prime_id_numeric(self) -> float:
        """Prime ID as a number."""
        return self.__prime_id_numeric

    @prime_id_numeric.setter
    def prime_id_numeric(self, value: float):
        self._property_changed('prime_id_numeric')
        self.__prime_id_numeric = value        

    @property
    def buy8bps(self) -> float:
        """The amount GS would buy for 8 bps charge."""
        return self.__buy8bps

    @buy8bps.setter
    def buy8bps(self, value: float):
        self._property_changed('buy8bps')
        self.__buy8bps = value        

    @property
    def total_notional_local(self) -> float:
        """Total notional on order in local currency."""
        return self.__total_notional_local

    @total_notional_local.setter
    def total_notional_local(self, value: float):
        self._property_changed('total_notional_local')
        self.__total_notional_local = value        

    @property
    def cid(self) -> str:
        """Goldman Sachs internal company identifier."""
        return self.__cid

    @cid.setter
    def cid(self, value: str):
        self._property_changed('cid')
        self.__cid = value        

    @property
    def total_confirmed_senior_home(self) -> float:
        """Confirmed cases in Senior homes and care facilities."""
        return self.__total_confirmed_senior_home

    @total_confirmed_senior_home.setter
    def total_confirmed_senior_home(self, value: float):
        self._property_changed('total_confirmed_senior_home')
        self.__total_confirmed_senior_home = value        

    @property
    def ctd_fwd_price(self) -> float:
        """Cheapest to deliver bond fwd price."""
        return self.__ctd_fwd_price

    @ctd_fwd_price.setter
    def ctd_fwd_price(self, value: float):
        self._property_changed('ctd_fwd_price')
        self.__ctd_fwd_price = value        

    @property
    def sink_factor(self) -> float:
        """The level to which a sinkable bond has currently sunk."""
        return self.__sink_factor

    @sink_factor.setter
    def sink_factor(self, value: float):
        self._property_changed('sink_factor')
        self.__sink_factor = value        

    @property
    def temperature_forecast(self) -> float:
        """The forecast temperature of diff types of given units."""
        return self.__temperature_forecast

    @temperature_forecast.setter
    def temperature_forecast(self, value: float):
        self._property_changed('temperature_forecast')
        self.__temperature_forecast = value        

    @property
    def primary_asset_class(self) -> str:
        """An indication of one of the broad categories."""
        return self.__primary_asset_class

    @primary_asset_class.setter
    def primary_asset_class(self, value: str):
        self._property_changed('primary_asset_class')
        self.__primary_asset_class = value        

    @property
    def bid_high(self) -> float:
        """The highest bid (price willing to buy)."""
        return self.__bid_high

    @bid_high.setter
    def bid_high(self, value: float):
        self._property_changed('bid_high')
        self.__bid_high = value        

    @property
    def pnl_qtd(self) -> float:
        """Total PnL Quarter to date."""
        return self.__pnl_qtd

    @pnl_qtd.setter
    def pnl_qtd(self, value: float):
        self._property_changed('pnl_qtd')
        self.__pnl_qtd = value        

    @property
    def buy50cents(self) -> float:
        """The amount GS would buy for 50 cents charge."""
        return self.__buy50cents

    @buy50cents.setter
    def buy50cents(self, value: float):
        self._property_changed('buy50cents')
        self.__buy50cents = value        

    @property
    def sell4bps(self) -> float:
        """The amount GS would sell for 4 bps charge."""
        return self.__sell4bps

    @sell4bps.setter
    def sell4bps(self, value: float):
        self._property_changed('sell4bps')
        self.__sell4bps = value        

    @property
    def receiver_day_count_fraction(self) -> str:
        """Day Count Fraction"""
        return self.__receiver_day_count_fraction

    @receiver_day_count_fraction.setter
    def receiver_day_count_fraction(self, value: str):
        self._property_changed('receiver_day_count_fraction')
        self.__receiver_day_count_fraction = value        

    @property
    def auction_close_percentage(self) -> float:
        """Percentage of total order being reserved for the Closing Auction."""
        return self.__auction_close_percentage

    @auction_close_percentage.setter
    def auction_close_percentage(self, value: float):
        self._property_changed('auction_close_percentage')
        self.__auction_close_percentage = value        

    @property
    def target_price(self) -> float:
        """Target Price."""
        return self.__target_price

    @target_price.setter
    def target_price(self, value: float):
        self._property_changed('target_price')
        self.__target_price = value        

    @property
    def bos_in_bps_description(self) -> str:
        """Description of the Stock's Bid-Offer Spread in Basis points on the particular
           date."""
        return self.__bos_in_bps_description

    @bos_in_bps_description.setter
    def bos_in_bps_description(self, value: str):
        self._property_changed('bos_in_bps_description')
        self.__bos_in_bps_description = value        

    @property
    def low_price(self) -> float:
        """Low level of an asset based on official exchange fixing or calculation agent
           marked level."""
        return self.__low_price

    @low_price.setter
    def low_price(self, value: float):
        self._property_changed('low_price')
        self.__low_price = value        

    @property
    def adv22_day_pct(self) -> float:
        """Median number of shares or units of a given asset traded over a 21 day period."""
        return self.__adv22_day_pct

    @adv22_day_pct.setter
    def adv22_day_pct(self, value: float):
        self._property_changed('adv22_day_pct')
        self.__adv22_day_pct = value        

    @property
    def gate_type(self) -> str:
        """Gate type."""
        return self.__gate_type

    @gate_type.setter
    def gate_type(self, value: str):
        self._property_changed('gate_type')
        self.__gate_type = value        

    @property
    def matched_maturity_swap_spread12m(self) -> float:
        """Matched maturity swap spread vs 12m tenor."""
        return self.__matched_maturity_swap_spread12m

    @matched_maturity_swap_spread12m.setter
    def matched_maturity_swap_spread12m(self, value: float):
        self._property_changed('matched_maturity_swap_spread12m')
        self.__matched_maturity_swap_spread12m = value        

    @property
    def price_range_in_ticks_label(self):
        return self.__price_range_in_ticks_label

    @price_range_in_ticks_label.setter
    def price_range_in_ticks_label(self, value):
        self._property_changed('price_range_in_ticks_label')
        self.__price_range_in_ticks_label = value        

    @property
    def ticker(self) -> str:
        """Ticker."""
        return self.__ticker

    @ticker.setter
    def ticker(self, value: str):
        self._property_changed('ticker')
        self.__ticker = value        

    @property
    def notional_unit(self) -> str:
        """Unit of reported notional price."""
        return self.__notional_unit

    @notional_unit.setter
    def notional_unit(self, value: str):
        self._property_changed('notional_unit')
        self.__notional_unit = value        

    @property
    def tcm_cost_horizon1_day(self) -> float:
        """TCM cost with a 1 day time horizon."""
        return self.__tcm_cost_horizon1_day

    @tcm_cost_horizon1_day.setter
    def tcm_cost_horizon1_day(self, value: float):
        self._property_changed('tcm_cost_horizon1_day')
        self.__tcm_cost_horizon1_day = value        

    @property
    def approval(self) -> float:
        """Approval rating."""
        return self.__approval

    @approval.setter
    def approval(self, value: float):
        self._property_changed('approval')
        self.__approval = value        

    @property
    def test_measure(self) -> float:
        """Generic field to hold aggregatable numeric measure for test result. For e.g
           delay for timeliness or variance for correctness."""
        return self.__test_measure

    @test_measure.setter
    def test_measure(self, value: float):
        self._property_changed('test_measure')
        self.__test_measure = value        

    @property
    def option_lock_out_period(self) -> str:
        """An indication of the first allowable exercise date of the option."""
        return self.__option_lock_out_period

    @option_lock_out_period.setter
    def option_lock_out_period(self, value: str):
        self._property_changed('option_lock_out_period')
        self.__option_lock_out_period = value        

    @property
    def execution_time(self) -> datetime.datetime:
        """Arrival execution time in seconds from the epoch."""
        return self.__execution_time

    @execution_time.setter
    def execution_time(self, value: datetime.datetime):
        self._property_changed('execution_time')
        self.__execution_time = value        

    @property
    def source_value_forecast(self) -> str:
        """TE own projections."""
        return self.__source_value_forecast

    @source_value_forecast.setter
    def source_value_forecast(self, value: str):
        self._property_changed('source_value_forecast')
        self.__source_value_forecast = value        

    @property
    def leg2_spread(self) -> float:
        """Spread of leg."""
        return self.__leg2_spread

    @leg2_spread.setter
    def leg2_spread(self, value: float):
        self._property_changed('leg2_spread')
        self.__leg2_spread = value        

    @property
    def short_conviction_large(self) -> float:
        """The count of short ideas with large conviction."""
        return self.__short_conviction_large

    @short_conviction_large.setter
    def short_conviction_large(self, value: float):
        self._property_changed('short_conviction_large')
        self.__short_conviction_large = value        

    @property
    def leg1_floating_rate_index(self) -> str:
        """If floating rate index leg, the index."""
        return self.__leg1_floating_rate_index

    @leg1_floating_rate_index.setter
    def leg1_floating_rate_index(self, value: str):
        self._property_changed('leg1_floating_rate_index')
        self.__leg1_floating_rate_index = value        

    @property
    def ccg_name(self) -> str:
        """Name of the clinical commissioning group."""
        return self.__ccg_name

    @ccg_name.setter
    def ccg_name(self, value: str):
        self._property_changed('ccg_name')
        self.__ccg_name = value        

    @property
    def dollar_excess_return(self) -> float:
        """The dollar excess return of an instrument."""
        return self.__dollar_excess_return

    @dollar_excess_return.setter
    def dollar_excess_return(self, value: float):
        self._property_changed('dollar_excess_return')
        self.__dollar_excess_return = value        

    @property
    def gsn(self) -> str:
        """Goldman Sachs internal product number."""
        return self.__gsn

    @gsn.setter
    def gsn(self, value: str):
        self._property_changed('gsn')
        self.__gsn = value        

    @property
    def trade_end_date(self) -> datetime.date:
        """End date of the trade."""
        return self.__trade_end_date

    @trade_end_date.setter
    def trade_end_date(self, value: datetime.date):
        self._property_changed('trade_end_date')
        self.__trade_end_date = value        

    @property
    def receiver_rate_option(self) -> str:
        """The underlying benchmark for the payer, e.g. USD-LIBOR-BBA, EUR-EURIBOR-
           TELERATE."""
        return self.__receiver_rate_option

    @receiver_rate_option.setter
    def receiver_rate_option(self, value: str):
        self._property_changed('receiver_rate_option')
        self.__receiver_rate_option = value        

    @property
    def gss(self) -> str:
        """Goldman Sachs internal product symbol."""
        return self.__gss

    @gss.setter
    def gss(self, value: str):
        self._property_changed('gss')
        self.__gss = value        

    @property
    def percent_of_mediandv1m(self) -> float:
        """Percentage of median daily volume calculated using 1 month period (last 22
           trading days)."""
        return self.__percent_of_mediandv1m

    @percent_of_mediandv1m.setter
    def percent_of_mediandv1m(self, value: float):
        self._property_changed('percent_of_mediandv1m')
        self.__percent_of_mediandv1m = value        

    @property
    def lendables(self) -> float:
        """Market value of holdings available to a securities lending program for lending."""
        return self.__lendables

    @lendables.setter
    def lendables(self, value: float):
        self._property_changed('lendables')
        self.__lendables = value        

    @property
    def sell75cents(self) -> float:
        """The amount GS would sell for 75 cents charge."""
        return self.__sell75cents

    @sell75cents.setter
    def sell75cents(self, value: float):
        self._property_changed('sell75cents')
        self.__sell75cents = value        

    @property
    def option_adjusted_spread(self) -> float:
        """Spread of a fixed-income security rate and the risk-free rate of return, which
           is then adjusted to take into account an embedded option."""
        return self.__option_adjusted_spread

    @option_adjusted_spread.setter
    def option_adjusted_spread(self, value: float):
        self._property_changed('option_adjusted_spread')
        self.__option_adjusted_spread = value        

    @property
    def option_adjusted_swap_spread(self) -> float:
        """Callability Option Adjusted Spread to yield curve."""
        return self.__option_adjusted_swap_spread

    @option_adjusted_swap_spread.setter
    def option_adjusted_swap_spread(self, value: float):
        self._property_changed('option_adjusted_swap_spread')
        self.__option_adjusted_swap_spread = value        

    @property
    def bos_in_ticks_label(self):
        return self.__bos_in_ticks_label

    @bos_in_ticks_label.setter
    def bos_in_ticks_label(self, value):
        self._property_changed('bos_in_ticks_label')
        self.__bos_in_ticks_label = value        

    @property
    def position_source_id(self) -> str:
        """Marquee unique identifier"""
        return self.__position_source_id

    @position_source_id.setter
    def position_source_id(self, value: str):
        self._property_changed('position_source_id')
        self.__position_source_id = value        

    @property
    def buy1bps(self) -> float:
        """The amount GS would buy for 1 bps charge."""
        return self.__buy1bps

    @buy1bps.setter
    def buy1bps(self, value: float):
        self._property_changed('buy1bps')
        self.__buy1bps = value        

    @property
    def buy3point5bps(self) -> float:
        """The amount GS would buy for 3.5 bps charge."""
        return self.__buy3point5bps

    @buy3point5bps.setter
    def buy3point5bps(self, value: float):
        self._property_changed('buy3point5bps')
        self.__buy3point5bps = value        

    @property
    def gs_sustain_region(self) -> str:
        """Region assigned by GIR ESG SUSTAIN team."""
        return self.__gs_sustain_region

    @gs_sustain_region.setter
    def gs_sustain_region(self, value: str):
        self._property_changed('gs_sustain_region')
        self.__gs_sustain_region = value        

    @property
    def absolute_return_wtd(self) -> float:
        """Absolute Return Week to Date."""
        return self.__absolute_return_wtd

    @absolute_return_wtd.setter
    def absolute_return_wtd(self, value: float):
        self._property_changed('absolute_return_wtd')
        self.__absolute_return_wtd = value        

    @property
    def deployment_id(self) -> float:
        """Deployment ID."""
        return self.__deployment_id

    @deployment_id.setter
    def deployment_id(self, value: float):
        self._property_changed('deployment_id')
        self.__deployment_id = value        

    @property
    def asset_parameters_seniority(self) -> str:
        """The seniority of the bond."""
        return self.__asset_parameters_seniority

    @asset_parameters_seniority.setter
    def asset_parameters_seniority(self, value: str):
        self._property_changed('asset_parameters_seniority')
        self.__asset_parameters_seniority = value        

    @property
    def ask_spread(self) -> float:
        """Spread between the yields of a debt security and its benchmark when both are
           purchased at ask price."""
        return self.__ask_spread

    @ask_spread.setter
    def ask_spread(self, value: float):
        self._property_changed('ask_spread')
        self.__ask_spread = value        

    @property
    def flow(self) -> float:
        """Flow of the fund."""
        return self.__flow

    @flow.setter
    def flow(self, value: float):
        self._property_changed('flow')
        self.__flow = value        

    @property
    def future_month_h26(self) -> float:
        """Commods future month code."""
        return self.__future_month_h26

    @future_month_h26.setter
    def future_month_h26(self, value: float):
        self._property_changed('future_month_h26')
        self.__future_month_h26 = value        

    @property
    def loan_rebate(self) -> float:
        """Rebate paid back to a securities lending borrower."""
        return self.__loan_rebate

    @loan_rebate.setter
    def loan_rebate(self, value: float):
        self._property_changed('loan_rebate')
        self.__loan_rebate = value        

    @property
    def future_month_h25(self) -> float:
        """Commods future month code."""
        return self.__future_month_h25

    @future_month_h25.setter
    def future_month_h25(self, value: float):
        self._property_changed('future_month_h25')
        self.__future_month_h25 = value        

    @property
    def period(self) -> str:
        """Period for the relevant metric, such as 1y (1 year)."""
        return self.__period

    @period.setter
    def period(self, value: str):
        self._property_changed('period')
        self.__period = value        

    @property
    def index_create_source(self) -> str:
        """Source of basket creation"""
        return self.__index_create_source

    @index_create_source.setter
    def index_create_source(self, value: str):
        self._property_changed('index_create_source')
        self.__index_create_source = value        

    @property
    def future_month_h24(self) -> float:
        """Commods future month code."""
        return self.__future_month_h24

    @future_month_h24.setter
    def future_month_h24(self, value: float):
        self._property_changed('future_month_h24')
        self.__future_month_h24 = value        

    @property
    def future_month_h23(self) -> float:
        """Commods future month code."""
        return self.__future_month_h23

    @future_month_h23.setter
    def future_month_h23(self, value: float):
        self._property_changed('future_month_h23')
        self.__future_month_h23 = value        

    @property
    def future_month_h22(self) -> float:
        """Commods future month code."""
        return self.__future_month_h22

    @future_month_h22.setter
    def future_month_h22(self, value: float):
        self._property_changed('future_month_h22')
        self.__future_month_h22 = value        

    @property
    def future_month_h21(self) -> float:
        """Commods future month code."""
        return self.__future_month_h21

    @future_month_h21.setter
    def future_month_h21(self, value: float):
        self._property_changed('future_month_h21')
        self.__future_month_h21 = value        

    @property
    def non_usd_ois(self) -> float:
        """Non USD Currency Ois rate. Feature applied only to Xccy curves."""
        return self.__non_usd_ois

    @non_usd_ois.setter
    def non_usd_ois(self, value: float):
        self._property_changed('non_usd_ois')
        self.__non_usd_ois = value        

    @property
    def real_twi_contribution(self) -> float:
        """Contribution of real trade weighted exchange rate index component to real FCI."""
        return self.__real_twi_contribution

    @real_twi_contribution.setter
    def real_twi_contribution(self, value: float):
        self._property_changed('real_twi_contribution')
        self.__real_twi_contribution = value        

    @property
    def mkt_asset(self) -> str:
        """The MDAPI Asset (e.g. USD, USD/EUR)."""
        return self.__mkt_asset

    @mkt_asset.setter
    def mkt_asset(self, value: str):
        self._property_changed('mkt_asset')
        self.__mkt_asset = value        

    @property
    def leg2_index_location(self) -> str:
        """Location of leg."""
        return self.__leg2_index_location

    @leg2_index_location.setter
    def leg2_index_location(self, value: str):
        self._property_changed('leg2_index_location')
        self.__leg2_index_location = value        

    @property
    def twap_unrealized_bps(self) -> float:
        """Consolidated unrealised performance vs TWAP In Limit, in bps."""
        return self.__twap_unrealized_bps

    @twap_unrealized_bps.setter
    def twap_unrealized_bps(self, value: float):
        self._property_changed('twap_unrealized_bps')
        self.__twap_unrealized_bps = value        

    @property
    def quantity_unit_of_measure(self) -> str:
        """For each leg of the transaction, where applicable, unit of measure in which the
           total notional quantity and notional quantity are expressed."""
        return self.__quantity_unit_of_measure

    @quantity_unit_of_measure.setter
    def quantity_unit_of_measure(self, value: str):
        self._property_changed('quantity_unit_of_measure')
        self.__quantity_unit_of_measure = value        

    @property
    def last_updated_message(self) -> str:
        """Last Updated Message."""
        return self.__last_updated_message

    @last_updated_message.setter
    def last_updated_message(self, value: str):
        self._property_changed('last_updated_message')
        self.__last_updated_message = value        

    @property
    def loan_value(self) -> float:
        """The value of the securities or cash delivered by a borrower to a lender to
           support a loan of securities."""
        return self.__loan_value

    @loan_value.setter
    def loan_value(self, value: float):
        self._property_changed('loan_value')
        self.__loan_value = value        

    @property
    def option_adjusted_ois_spread(self) -> float:
        """Option adjusted OIS spread."""
        return self.__option_adjusted_ois_spread

    @option_adjusted_ois_spread.setter
    def option_adjusted_ois_spread(self, value: float):
        self._property_changed('option_adjusted_ois_spread')
        self.__option_adjusted_ois_spread = value        

    @property
    def total_return_price(self) -> float:
        """The total return price of an instrument."""
        return self.__total_return_price

    @total_return_price.setter
    def total_return_price(self, value: float):
        self._property_changed('total_return_price')
        self.__total_return_price = value        

    @property
    def value_currency(self) -> str:
        """Value currency."""
        return self.__value_currency

    @value_currency.setter
    def value_currency(self, value: str):
        self._property_changed('value_currency')
        self.__value_currency = value        

    @property
    def weighted_percent_in_model(self) -> float:
        """Weighted percent of constituent in risk model."""
        return self.__weighted_percent_in_model

    @weighted_percent_in_model.setter
    def weighted_percent_in_model(self, value: float):
        self._property_changed('weighted_percent_in_model')
        self.__weighted_percent_in_model = value        

    @property
    def init_loan_spread_required(self) -> float:
        """The minimum spread requirement for a securities lending loan on the day of loan
           initiation."""
        return self.__init_loan_spread_required

    @init_loan_spread_required.setter
    def init_loan_spread_required(self, value: float):
        self._property_changed('init_loan_spread_required')
        self.__init_loan_spread_required = value        

    @property
    def election_period(self) -> str:
        """Period of election."""
        return self.__election_period

    @election_period.setter
    def election_period(self, value: str):
        self._property_changed('election_period')
        self.__election_period = value        

    @property
    def funding_ask_price(self) -> float:
        """Latest Ask Price (price offering to sell)."""
        return self.__funding_ask_price

    @funding_ask_price.setter
    def funding_ask_price(self, value: float):
        self._property_changed('funding_ask_price')
        self.__funding_ask_price = value        

    @property
    def historical_beta(self) -> float:
        """Historical beta."""
        return self.__historical_beta

    @historical_beta.setter
    def historical_beta(self, value: float):
        self._property_changed('historical_beta')
        self.__historical_beta = value        

    @property
    def bond_risk_premium_index(self) -> float:
        """Bond risk premium index: difference between growth rate forecast and 10y
           treasury yield."""
        return self.__bond_risk_premium_index

    @bond_risk_premium_index.setter
    def bond_risk_premium_index(self, value: float):
        self._property_changed('bond_risk_premium_index')
        self.__bond_risk_premium_index = value        

    @property
    def hit_rate_ytd(self) -> float:
        """Hit Rate Ratio Year to Date."""
        return self.__hit_rate_ytd

    @hit_rate_ytd.setter
    def hit_rate_ytd(self, value: float):
        self._property_changed('hit_rate_ytd')
        self.__hit_rate_ytd = value        

    @property
    def gir_gsdeer_gsfeer(self) -> float:
        """GSDEER and GSFEER quarterly estimates for currency fair values made by Global
           Investment Research (GIR) macro analysts."""
        return self.__gir_gsdeer_gsfeer

    @gir_gsdeer_gsfeer.setter
    def gir_gsdeer_gsfeer(self, value: float):
        self._property_changed('gir_gsdeer_gsfeer')
        self.__gir_gsdeer_gsfeer = value        

    @property
    def num_units(self) -> float:
        """Units."""
        return self.__num_units

    @num_units.setter
    def num_units(self, value: float):
        self._property_changed('num_units')
        self.__num_units = value        

    @property
    def asset_parameters_receiver_frequency(self) -> str:
        """Tenor"""
        return self.__asset_parameters_receiver_frequency

    @asset_parameters_receiver_frequency.setter
    def asset_parameters_receiver_frequency(self, value: str):
        self._property_changed('asset_parameters_receiver_frequency')
        self.__asset_parameters_receiver_frequency = value        

    @property
    def expense_ratio_gross_bps(self) -> float:
        """Gives basis point measure of management fee."""
        return self.__expense_ratio_gross_bps

    @expense_ratio_gross_bps.setter
    def expense_ratio_gross_bps(self, value: float):
        self._property_changed('expense_ratio_gross_bps')
        self.__expense_ratio_gross_bps = value        

    @property
    def relative_payoff_wtd(self) -> float:
        """Total win divided by total loss Week to date."""
        return self.__relative_payoff_wtd

    @relative_payoff_wtd.setter
    def relative_payoff_wtd(self, value: float):
        self._property_changed('relative_payoff_wtd')
        self.__relative_payoff_wtd = value        

    @property
    def ctd_price(self) -> float:
        """Price of cheapest to deliver bond."""
        return self.__ctd_price

    @ctd_price.setter
    def ctd_price(self, value: float):
        self._property_changed('ctd_price')
        self.__ctd_price = value        

    @property
    def pace_of_roll_now(self) -> float:
        """The pace of the roll as of the pricing date."""
        return self.__pace_of_roll_now

    @pace_of_roll_now.setter
    def pace_of_roll_now(self, value: float):
        self._property_changed('pace_of_roll_now')
        self.__pace_of_roll_now = value        

    @property
    def product(self) -> str:
        """The asset, reference asset, or reference obligation for payments of a party???s
           obligations under the SB swap transaction reference."""
        return self.__product

    @product.setter
    def product(self, value: str):
        self._property_changed('product')
        self.__product = value        

    @property
    def leg2_return_type(self) -> str:
        """Indication if return of leg 2 is total."""
        return self.__leg2_return_type

    @leg2_return_type.setter
    def leg2_return_type(self, value: str):
        self._property_changed('leg2_return_type')
        self.__leg2_return_type = value        

    @property
    def agent_lender_fee(self) -> float:
        """Fee earned by the Agent Lender for facilitating a securities lending agreement."""
        return self.__agent_lender_fee

    @agent_lender_fee.setter
    def agent_lender_fee(self, value: float):
        self._property_changed('agent_lender_fee')
        self.__agent_lender_fee = value        

    @property
    def dissemination_id(self) -> str:
        """DDR generated unique and random ID for reconciliation purpose."""
        return self.__dissemination_id

    @dissemination_id.setter
    def dissemination_id(self, value: str):
        self._property_changed('dissemination_id')
        self.__dissemination_id = value        

    @property
    def option_strike_price(self) -> float:
        """Strike price of the option. Also called option level."""
        return self.__option_strike_price

    @option_strike_price.setter
    def option_strike_price(self, value: float):
        self._property_changed('option_strike_price')
        self.__option_strike_price = value        

    @property
    def precipitation_type(self) -> str:
        """The type of precipitation required: Rain or snow etc."""
        return self.__precipitation_type

    @precipitation_type.setter
    def precipitation_type(self, value: str):
        self._property_changed('precipitation_type')
        self.__precipitation_type = value        

    @property
    def lower_bound(self) -> float:
        """Lower bound value."""
        return self.__lower_bound

    @lower_bound.setter
    def lower_bound(self, value: float):
        self._property_changed('lower_bound')
        self.__lower_bound = value        

    @property
    def active1yr_market_cap(self) -> float:
        """The sum USD value of all active native units in the last year."""
        return self.__active1yr_market_cap

    @active1yr_market_cap.setter
    def active1yr_market_cap(self, value: float):
        self._property_changed('active1yr_market_cap')
        self.__active1yr_market_cap = value        

    @property
    def arrival_mid_normalized(self) -> float:
        """Performance against Benchmark in pip."""
        return self.__arrival_mid_normalized

    @arrival_mid_normalized.setter
    def arrival_mid_normalized(self, value: float):
        self._property_changed('arrival_mid_normalized')
        self.__arrival_mid_normalized = value        

    @property
    def underlying_asset2(self) -> str:
        """Same as Underlying Asset 1 if populated."""
        return self.__underlying_asset2

    @underlying_asset2.setter
    def underlying_asset2(self, value: str):
        self._property_changed('underlying_asset2')
        self.__underlying_asset2 = value        

    @property
    def underlying_asset1(self) -> str:
        """The asset, reference asset, or reference obligation for payments of a party???s
           obligations under the SB swap transaction reference."""
        return self.__underlying_asset1

    @underlying_asset1.setter
    def underlying_asset1(self, value: str):
        self._property_changed('underlying_asset1')
        self.__underlying_asset1 = value        

    @property
    def legal_entity(self) -> str:
        """Entity that has legal rights to the fund."""
        return self.__legal_entity

    @legal_entity.setter
    def legal_entity(self, value: str):
        self._property_changed('legal_entity')
        self.__legal_entity = value        

    @property
    def performance_fee(self) -> Union[Op, float]:
        return self.__performance_fee

    @performance_fee.setter
    def performance_fee(self, value: Union[Op, float]):
        self._property_changed('performance_fee')
        self.__performance_fee = value        

    @property
    def order_state(self) -> str:
        """State of an order."""
        return self.__order_state

    @order_state.setter
    def order_state(self, value: str):
        self._property_changed('order_state')
        self.__order_state = value        

    @property
    def actual_data_quality(self) -> float:
        """Actual data quality level."""
        return self.__actual_data_quality

    @actual_data_quality.setter
    def actual_data_quality(self, value: float):
        self._property_changed('actual_data_quality')
        self.__actual_data_quality = value        

    @property
    def index_ratio(self) -> float:
        """Latest Bid Price (price willing to buy)."""
        return self.__index_ratio

    @index_ratio.setter
    def index_ratio(self, value: float):
        self._property_changed('index_ratio')
        self.__index_ratio = value        

    @property
    def queue_in_lots_label(self):
        return self.__queue_in_lots_label

    @queue_in_lots_label.setter
    def queue_in_lots_label(self, value):
        self._property_changed('queue_in_lots_label')
        self.__queue_in_lots_label = value        

    @property
    def adv10_day_pct(self) -> float:
        """Median number of shares or units of a given asset traded over a 10 day period."""
        return self.__adv10_day_pct

    @adv10_day_pct.setter
    def adv10_day_pct(self, value: float):
        self._property_changed('adv10_day_pct')
        self.__adv10_day_pct = value        

    @property
    def long_conviction_medium(self) -> float:
        """The count of long ideas with medium conviction."""
        return self.__long_conviction_medium

    @long_conviction_medium.setter
    def long_conviction_medium(self, value: float):
        self._property_changed('long_conviction_medium')
        self.__long_conviction_medium = value        

    @property
    def relative_hit_rate_wtd(self) -> float:
        """Hit Rate Ratio Week to Date."""
        return self.__relative_hit_rate_wtd

    @relative_hit_rate_wtd.setter
    def relative_hit_rate_wtd(self, value: float):
        self._property_changed('relative_hit_rate_wtd')
        self.__relative_hit_rate_wtd = value        

    @property
    def daily_tracking_error(self) -> float:
        """Daily tracking error."""
        return self.__daily_tracking_error

    @daily_tracking_error.setter
    def daily_tracking_error(self, value: float):
        self._property_changed('daily_tracking_error')
        self.__daily_tracking_error = value        

    @property
    def sell140cents(self) -> float:
        """The amount GS would sell for 140 cents charge."""
        return self.__sell140cents

    @sell140cents.setter
    def sell140cents(self, value: float):
        self._property_changed('sell140cents')
        self.__sell140cents = value        

    @property
    def sell10bps(self) -> float:
        """The amount GS would sell for 10 bps charge."""
        return self.__sell10bps

    @sell10bps.setter
    def sell10bps(self, value: float):
        self._property_changed('sell10bps')
        self.__sell10bps = value        

    @property
    def aggressive_offset_from_last(self) -> float:
        """TBD."""
        return self.__aggressive_offset_from_last

    @aggressive_offset_from_last.setter
    def aggressive_offset_from_last(self, value: float):
        self._property_changed('aggressive_offset_from_last')
        self.__aggressive_offset_from_last = value        

    @property
    def longitude(self) -> float:
        """Longitude."""
        return self.__longitude

    @longitude.setter
    def longitude(self, value: float):
        self._property_changed('longitude')
        self.__longitude = value        

    @property
    def new_icu(self) -> float:
        """Number of new patients hospitalized in ICU."""
        return self.__new_icu

    @new_icu.setter
    def new_icu(self, value: float):
        self._property_changed('new_icu')
        self.__new_icu = value        

    @property
    def market_cap(self) -> float:
        """Market capitalization of a given asset in denominated currency."""
        return self.__market_cap

    @market_cap.setter
    def market_cap(self, value: float):
        self._property_changed('market_cap')
        self.__market_cap = value        

    @property
    def weighted_average_mid(self) -> float:
        """Weighted Average Mid."""
        return self.__weighted_average_mid

    @weighted_average_mid.setter
    def weighted_average_mid(self, value: float):
        self._property_changed('weighted_average_mid')
        self.__weighted_average_mid = value        

    @property
    def cluster_region(self):
        return self.__cluster_region

    @cluster_region.setter
    def cluster_region(self, value):
        self._property_changed('cluster_region')
        self.__cluster_region = value        

    @property
    def valoren(self) -> str:
        """Valoren or VALOR number, Swiss primary security identifier (subject to
           licensing)."""
        return self.__valoren

    @valoren.setter
    def valoren(self, value: str):
        self._property_changed('valoren')
        self.__valoren = value        

    @property
    def index_name(self) -> str:
        """Name of the index."""
        return self.__index_name

    @index_name.setter
    def index_name(self, value: str):
        self._property_changed('index_name')
        self.__index_name = value        

    @property
    def average_execution_price(self) -> float:
        """The average execution price of the order."""
        return self.__average_execution_price

    @average_execution_price.setter
    def average_execution_price(self, value: float):
        self._property_changed('average_execution_price')
        self.__average_execution_price = value        

    @property
    def proceeds_asset_ois_swap_spread1m(self) -> float:
        """Proceeds Asset OIS Swap Spread 1m."""
        return self.__proceeds_asset_ois_swap_spread1m

    @proceeds_asset_ois_swap_spread1m.setter
    def proceeds_asset_ois_swap_spread1m(self, value: float):
        self._property_changed('proceeds_asset_ois_swap_spread1m')
        self.__proceeds_asset_ois_swap_spread1m = value        

    @property
    def payoff_wtd(self) -> float:
        """Total win divided by total loss Week to date."""
        return self.__payoff_wtd

    @payoff_wtd.setter
    def payoff_wtd(self, value: float):
        self._property_changed('payoff_wtd')
        self.__payoff_wtd = value        

    @property
    def basis(self) -> float:
        """Spread to be added to the shorter tenor leg for the swap to be ATM."""
        return self.__basis

    @basis.setter
    def basis(self, value: float):
        self._property_changed('basis')
        self.__basis = value        

    @property
    def investment_rate_trend(self) -> float:
        """The day over day trend of the rate of return on an investment."""
        return self.__investment_rate_trend

    @investment_rate_trend.setter
    def investment_rate_trend(self, value: float):
        self._property_changed('investment_rate_trend')
        self.__investment_rate_trend = value        

    @property
    def gross_investment_mtd(self) -> float:
        """Total gross investment Month to date."""
        return self.__gross_investment_mtd

    @gross_investment_mtd.setter
    def gross_investment_mtd(self, value: float):
        self._property_changed('gross_investment_mtd')
        self.__gross_investment_mtd = value        

    @property
    def hedge_id(self) -> str:
        """Marquee unique identifier for a hedge."""
        return self.__hedge_id

    @hedge_id.setter
    def hedge_id(self, value: str):
        self._property_changed('hedge_id')
        self.__hedge_id = value        

    @property
    def sharpe_mtd(self) -> float:
        """Sharpe ratio Month to date."""
        return self.__sharpe_mtd

    @sharpe_mtd.setter
    def sharpe_mtd(self, value: float):
        self._property_changed('sharpe_mtd')
        self.__sharpe_mtd = value        

    @property
    def tcm_cost_horizon8_day(self) -> float:
        """TCM cost with a 8 day time horizon."""
        return self.__tcm_cost_horizon8_day

    @tcm_cost_horizon8_day.setter
    def tcm_cost_horizon8_day(self, value: float):
        self._property_changed('tcm_cost_horizon8_day')
        self.__tcm_cost_horizon8_day = value        

    @property
    def residual_variance(self) -> float:
        """Residual variance."""
        return self.__residual_variance

    @residual_variance.setter
    def residual_variance(self, value: float):
        self._property_changed('residual_variance')
        self.__residual_variance = value        

    @property
    def restrict_internal_derived_data(self) -> bool:
        """Restricts Ability to Use Internally as Part of Derived Data."""
        return self.__restrict_internal_derived_data

    @restrict_internal_derived_data.setter
    def restrict_internal_derived_data(self, value: bool):
        self._property_changed('restrict_internal_derived_data')
        self.__restrict_internal_derived_data = value        

    @property
    def adv5_day_pct(self) -> float:
        """Median number of shares or units of a given asset traded over a 5 day period."""
        return self.__adv5_day_pct

    @adv5_day_pct.setter
    def adv5_day_pct(self, value: float):
        self._property_changed('adv5_day_pct')
        self.__adv5_day_pct = value        

    @property
    def midpoint_fills_percentage(self) -> float:
        """Percent of total order filled at midpoint ."""
        return self.__midpoint_fills_percentage

    @midpoint_fills_percentage.setter
    def midpoint_fills_percentage(self, value: float):
        self._property_changed('midpoint_fills_percentage')
        self.__midpoint_fills_percentage = value        

    @property
    def open_interest(self) -> float:
        """Measure of level of activity in market."""
        return self.__open_interest

    @open_interest.setter
    def open_interest(self, value: float):
        self._property_changed('open_interest')
        self.__open_interest = value        

    @property
    def turnover_composite_unadjusted(self) -> float:
        """Turnover composite not adjusted for corporate actions."""
        return self.__turnover_composite_unadjusted

    @turnover_composite_unadjusted.setter
    def turnover_composite_unadjusted(self, value: float):
        self._property_changed('turnover_composite_unadjusted')
        self.__turnover_composite_unadjusted = value        

    @property
    def fwd_points(self) -> float:
        """Forward points."""
        return self.__fwd_points

    @fwd_points.setter
    def fwd_points(self, value: float):
        self._property_changed('fwd_points')
        self.__fwd_points = value        

    @property
    def relative_return_wtd(self) -> float:
        """Relative Return Week to Date."""
        return self.__relative_return_wtd

    @relative_return_wtd.setter
    def relative_return_wtd(self, value: float):
        self._property_changed('relative_return_wtd')
        self.__relative_return_wtd = value        

    @property
    def units(self) -> str:
        """Units for series."""
        return self.__units

    @units.setter
    def units(self, value: str):
        self._property_changed('units')
        self.__units = value        

    @property
    def payer_rate_option(self) -> str:
        """The underlying benchmark for the payer, e.g. USD-LIBOR-BBA, EUR-EURIBOR-
           TELERATE."""
        return self.__payer_rate_option

    @payer_rate_option.setter
    def payer_rate_option(self, value: str):
        self._property_changed('payer_rate_option')
        self.__payer_rate_option = value        

    @property
    def asset_classifications_risk_country_name(self) -> str:
        """Risk country."""
        return self.__asset_classifications_risk_country_name

    @asset_classifications_risk_country_name.setter
    def asset_classifications_risk_country_name(self, value: str):
        self._property_changed('asset_classifications_risk_country_name')
        self.__asset_classifications_risk_country_name = value        

    @property
    def ext_mkt_point3(self) -> str:
        """Third dimension of external MDAPI Point."""
        return self.__ext_mkt_point3

    @ext_mkt_point3.setter
    def ext_mkt_point3(self, value: str):
        self._property_changed('ext_mkt_point3')
        self.__ext_mkt_point3 = value        

    @property
    def matched_maturity_swap_spread(self) -> float:
        """Spread between a Matched Maturity Swap Rate and the yield of the bond."""
        return self.__matched_maturity_swap_spread

    @matched_maturity_swap_spread.setter
    def matched_maturity_swap_spread(self, value: float):
        self._property_changed('matched_maturity_swap_spread')
        self.__matched_maturity_swap_spread = value        

    @property
    def city_name(self) -> str:
        """Name of city."""
        return self.__city_name

    @city_name.setter
    def city_name(self, value: str):
        self._property_changed('city_name')
        self.__city_name = value        

    @property
    def hourly_bucket(self) -> str:
        """Bucket denoting hour of the day."""
        return self.__hourly_bucket

    @hourly_bucket.setter
    def hourly_bucket(self, value: str):
        self._property_changed('hourly_bucket')
        self.__hourly_bucket = value        

    @property
    def average_implied_volatility(self) -> float:
        """Average volatility of an asset implied by observations of market prices."""
        return self.__average_implied_volatility

    @average_implied_volatility.setter
    def average_implied_volatility(self, value: float):
        self._property_changed('average_implied_volatility')
        self.__average_implied_volatility = value        

    @property
    def total_hospitalized_with_symptoms(self) -> float:
        """Total number of hospitalized cases due to symptoms, but not in ICU."""
        return self.__total_hospitalized_with_symptoms

    @total_hospitalized_with_symptoms.setter
    def total_hospitalized_with_symptoms(self, value: float):
        self._property_changed('total_hospitalized_with_symptoms')
        self.__total_hospitalized_with_symptoms = value        

    @property
    def days_open_realized_cash(self) -> float:
        """Realised performance vs Day Open, in USD."""
        return self.__days_open_realized_cash

    @days_open_realized_cash.setter
    def days_open_realized_cash(self, value: float):
        self._property_changed('days_open_realized_cash')
        self.__days_open_realized_cash = value        

    @property
    def adjusted_high_price(self) -> float:
        """Adjusted high level of an asset based on official exchange fixing or calculation
           agent marked level."""
        return self.__adjusted_high_price

    @adjusted_high_price.setter
    def adjusted_high_price(self, value: float):
        self._property_changed('adjusted_high_price')
        self.__adjusted_high_price = value        

    @property
    def proceeds_asset_ois_swap_spread(self) -> float:
        """Proceeds asset OIS swap spread."""
        return self.__proceeds_asset_ois_swap_spread

    @proceeds_asset_ois_swap_spread.setter
    def proceeds_asset_ois_swap_spread(self, value: float):
        self._property_changed('proceeds_asset_ois_swap_spread')
        self.__proceeds_asset_ois_swap_spread = value        

    @property
    def ext_mkt_point1(self) -> str:
        """First dimension of external MDAPI Point."""
        return self.__ext_mkt_point1

    @ext_mkt_point1.setter
    def ext_mkt_point1(self, value: str):
        self._property_changed('ext_mkt_point1')
        self.__ext_mkt_point1 = value        

    @property
    def direction(self) -> str:
        """Indicates whether exposure of a given position is long or short."""
        return self.__direction

    @direction.setter
    def direction(self, value: str):
        self._property_changed('direction')
        self.__direction = value        

    @property
    def ext_mkt_point2(self) -> str:
        """Second dimension of external MDAPI Point."""
        return self.__ext_mkt_point2

    @ext_mkt_point2.setter
    def ext_mkt_point2(self, value: str):
        self._property_changed('ext_mkt_point2')
        self.__ext_mkt_point2 = value        

    @property
    def sub_region_code(self) -> str:
        """ISO 3166 Sub Region Code."""
        return self.__sub_region_code

    @sub_region_code.setter
    def sub_region_code(self, value: str):
        self._property_changed('sub_region_code')
        self.__sub_region_code = value        

    @property
    def asset_parameters_fixed_rate(self) -> Union[float, str]:
        """Strike as value, percent or at-the-money e.g. 62.5, 95%, ATM-25, ATMF, 10/vol,
           100k/pv, p=10000, p=10000USD, $200K/BP, or multiple strikes
           65.4/-45.8"""
        return self.__asset_parameters_fixed_rate

    @asset_parameters_fixed_rate.setter
    def asset_parameters_fixed_rate(self, value: Union[float, str]):
        self._property_changed('asset_parameters_fixed_rate')
        self.__asset_parameters_fixed_rate = value        

    @property
    def is_estimated_return(self) -> bool:
        """Whether the return of asset over a given period is an estimate or not."""
        return self.__is_estimated_return

    @is_estimated_return.setter
    def is_estimated_return(self, value: bool):
        self._property_changed('is_estimated_return')
        self.__is_estimated_return = value        

    @property
    def value_forecast(self) -> str:
        """Average forecast among a representative group of economists."""
        return self.__value_forecast

    @value_forecast.setter
    def value_forecast(self, value: str):
        self._property_changed('value_forecast')
        self.__value_forecast = value        

    @property
    def total_icu(self) -> float:
        """Total number of cases in intensive care."""
        return self.__total_icu

    @total_icu.setter
    def total_icu(self, value: float):
        self._property_changed('total_icu')
        self.__total_icu = value        

    @property
    def position_source_type(self) -> str:
        """Source object for position data"""
        return self.__position_source_type

    @position_source_type.setter
    def position_source_type(self, value: str):
        self._property_changed('position_source_type')
        self.__position_source_type = value        

    @property
    def previous_close_unrealized_cash(self) -> float:
        """Unrealised performance vs Previous Close, in USD."""
        return self.__previous_close_unrealized_cash

    @previous_close_unrealized_cash.setter
    def previous_close_unrealized_cash(self, value: float):
        self._property_changed('previous_close_unrealized_cash')
        self.__previous_close_unrealized_cash = value        

    @property
    def minimum_denomination(self) -> float:
        """The lowest denomination of an issue that can be purchased as authorized by the
           bond documents."""
        return self.__minimum_denomination

    @minimum_denomination.setter
    def minimum_denomination(self, value: float):
        self._property_changed('minimum_denomination')
        self.__minimum_denomination = value        

    @property
    def future_value_notional(self) -> float:
        """The future notional value of the asset."""
        return self.__future_value_notional

    @future_value_notional.setter
    def future_value_notional(self, value: float):
        self._property_changed('future_value_notional')
        self.__future_value_notional = value        

    @property
    def participation_rate(self) -> float:
        """Executed quantity over market volume (e.g. 5, 10, 20)."""
        return self.__participation_rate

    @participation_rate.setter
    def participation_rate(self, value: float):
        self._property_changed('participation_rate')
        self.__participation_rate = value        

    @property
    def obfr(self) -> float:
        """The overnight bank funding rate."""
        return self.__obfr

    @obfr.setter
    def obfr(self, value: float):
        self._property_changed('obfr')
        self.__obfr = value        

    @property
    def buy9point5bps(self) -> float:
        """The amount GS would buy for 9.5 bps charge."""
        return self.__buy9point5bps

    @buy9point5bps.setter
    def buy9point5bps(self, value: float):
        self._property_changed('buy9point5bps')
        self.__buy9point5bps = value        

    @property
    def option_lock_period(self) -> str:
        """An indication of the first allowable exercise date of the option."""
        return self.__option_lock_period

    @option_lock_period.setter
    def option_lock_period(self, value: str):
        self._property_changed('option_lock_period')
        self.__option_lock_period = value        

    @property
    def es_momentum_percentile(self) -> float:
        """A percentile that captures a company's E&S momentum ranking within its
           subsector."""
        return self.__es_momentum_percentile

    @es_momentum_percentile.setter
    def es_momentum_percentile(self, value: float):
        self._property_changed('es_momentum_percentile')
        self.__es_momentum_percentile = value        

    @property
    def adv_percentage(self) -> float:
        """Percentage of ADV."""
        return self.__adv_percentage

    @adv_percentage.setter
    def adv_percentage(self, value: float):
        self._property_changed('adv_percentage')
        self.__adv_percentage = value        

    @property
    def leg1_averaging_method(self) -> str:
        """Averaging method of leg."""
        return self.__leg1_averaging_method

    @leg1_averaging_method.setter
    def leg1_averaging_method(self, value: str):
        self._property_changed('leg1_averaging_method')
        self.__leg1_averaging_method = value        

    @property
    def turnover_composite(self) -> float:
        """Turnover composite."""
        return self.__turnover_composite

    @turnover_composite.setter
    def turnover_composite(self, value: float):
        self._property_changed('turnover_composite')
        self.__turnover_composite = value        

    @property
    def forecast_date(self) -> datetime.date:
        """Date of forecasted electricity loads."""
        return self.__forecast_date

    @forecast_date.setter
    def forecast_date(self, value: datetime.date):
        self._property_changed('forecast_date')
        self.__forecast_date = value        

    @property
    def internal_index_calc_region(self) -> str:
        """Classification for the asset based on index calculation region"""
        return self.__internal_index_calc_region

    @internal_index_calc_region.setter
    def internal_index_calc_region(self, value: str):
        self._property_changed('internal_index_calc_region')
        self.__internal_index_calc_region = value        

    @property
    def position_type(self) -> str:
        """Type of positions."""
        return self.__position_type

    @position_type.setter
    def position_type(self, value: str):
        self._property_changed('position_type')
        self.__position_type = value        

    @property
    def sub_asset_class(self) -> str:
        """An indication of the sub asset class."""
        return self.__sub_asset_class

    @sub_asset_class.setter
    def sub_asset_class(self, value: str):
        self._property_changed('sub_asset_class')
        self.__sub_asset_class = value        

    @property
    def short_interest(self) -> float:
        """Short interest value."""
        return self.__short_interest

    @short_interest.setter
    def short_interest(self, value: float):
        self._property_changed('short_interest')
        self.__short_interest = value        

    @property
    def reference_period(self) -> str:
        """The period for which released data refers to."""
        return self.__reference_period

    @reference_period.setter
    def reference_period(self, value: str):
        self._property_changed('reference_period')
        self.__reference_period = value        

    @property
    def adjusted_volume(self) -> float:
        """Accumulated number of shares, lots or contracts traded according to the market
           convention adjusted for corporate actions."""
        return self.__adjusted_volume

    @adjusted_volume.setter
    def adjusted_volume(self, value: float):
        self._property_changed('adjusted_volume')
        self.__adjusted_volume = value        

    @property
    def underlying_asset_id_type(self) -> str:
        """The type of underlying asset identifier."""
        return self.__underlying_asset_id_type

    @underlying_asset_id_type.setter
    def underlying_asset_id_type(self, value: str):
        self._property_changed('underlying_asset_id_type')
        self.__underlying_asset_id_type = value        

    @property
    def ctd_fwd_yield(self) -> float:
        """Cheapest to deliver bond fwd yield."""
        return self.__ctd_fwd_yield

    @ctd_fwd_yield.setter
    def ctd_fwd_yield(self, value: float):
        self._property_changed('ctd_fwd_yield')
        self.__ctd_fwd_yield = value        

    @property
    def sec_db(self) -> str:
        """Internal Goldman Sachs security database location for the asset."""
        return self.__sec_db

    @sec_db.setter
    def sec_db(self, value: str):
        self._property_changed('sec_db')
        self.__sec_db = value        

    @property
    def memory_used(self) -> float:
        """Total memory used by tickserver."""
        return self.__memory_used

    @memory_used.setter
    def memory_used(self, value: float):
        self._property_changed('memory_used')
        self.__memory_used = value        

    @property
    def bpe_quality_stars(self) -> float:
        """Confidence in the BPE."""
        return self.__bpe_quality_stars

    @bpe_quality_stars.setter
    def bpe_quality_stars(self, value: float):
        self._property_changed('bpe_quality_stars')
        self.__bpe_quality_stars = value        

    @property
    def ctd(self) -> str:
        """Description of cheapest to deliver bond."""
        return self.__ctd

    @ctd.setter
    def ctd(self, value: str):
        self._property_changed('ctd')
        self.__ctd = value        

    @property
    def intended_participation_rate(self) -> float:
        """Intended participation rate."""
        return self.__intended_participation_rate

    @intended_participation_rate.setter
    def intended_participation_rate(self, value: float):
        self._property_changed('intended_participation_rate')
        self.__intended_participation_rate = value        

    @property
    def leg1_payment_type(self) -> str:
        """Type of payment stream on leg 1."""
        return self.__leg1_payment_type

    @leg1_payment_type.setter
    def leg1_payment_type(self, value: str):
        self._property_changed('leg1_payment_type')
        self.__leg1_payment_type = value        

    @property
    def trading_pnl(self) -> float:
        """Trading Profit and Loss (PNL)."""
        return self.__trading_pnl

    @trading_pnl.setter
    def trading_pnl(self, value: float):
        self._property_changed('trading_pnl')
        self.__trading_pnl = value        

    @property
    def collateral_value_required(self) -> float:
        """Value of collateral required to cover a given position."""
        return self.__collateral_value_required

    @collateral_value_required.setter
    def collateral_value_required(self, value: float):
        self._property_changed('collateral_value_required')
        self.__collateral_value_required = value        

    @property
    def buy45bps(self) -> float:
        """The amount GS would buy for 45 bps charge."""
        return self.__buy45bps

    @buy45bps.setter
    def buy45bps(self, value: float):
        self._property_changed('buy45bps')
        self.__buy45bps = value        

    @property
    def free_float_market_cap_ratio(self) -> float:
        """The ratio of the free float market capitalization (CapMrktFFUSD) to the sum
           realized USD value of the current supply (realizedMarketCap)."""
        return self.__free_float_market_cap_ratio

    @free_float_market_cap_ratio.setter
    def free_float_market_cap_ratio(self, value: float):
        self._property_changed('free_float_market_cap_ratio')
        self.__free_float_market_cap_ratio = value        

    @property
    def price_to_earnings_positive(self) -> float:
        """Price to earnings positive."""
        return self.__price_to_earnings_positive

    @price_to_earnings_positive.setter
    def price_to_earnings_positive(self, value: float):
        self._property_changed('price_to_earnings_positive')
        self.__price_to_earnings_positive = value        

    @property
    def forecast(self) -> float:
        """Forward FX forecast."""
        return self.__forecast

    @forecast.setter
    def forecast(self, value: float):
        self._property_changed('forecast')
        self.__forecast = value        

    @property
    def forecast_value(self) -> float:
        """Forecast value."""
        return self.__forecast_value

    @forecast_value.setter
    def forecast_value(self, value: float):
        self._property_changed('forecast_value')
        self.__forecast_value = value        

    @property
    def pnl(self) -> float:
        """Profit and Loss."""
        return self.__pnl

    @pnl.setter
    def pnl(self, value: float):
        self._property_changed('pnl')
        self.__pnl = value        

    @property
    def volume_in_limit(self) -> float:
        """Consolidated Volume In Limit."""
        return self.__volume_in_limit

    @volume_in_limit.setter
    def volume_in_limit(self, value: float):
        self._property_changed('volume_in_limit')
        self.__volume_in_limit = value        

    @property
    def is_territory(self) -> bool:
        """Whether or not a territory."""
        return self.__is_territory

    @is_territory.setter
    def is_territory(self, value: bool):
        self._property_changed('is_territory')
        self.__is_territory = value        

    @property
    def leg2_delivery_point(self) -> str:
        """Delivery point of leg."""
        return self.__leg2_delivery_point

    @leg2_delivery_point.setter
    def leg2_delivery_point(self, value: str):
        self._property_changed('leg2_delivery_point')
        self.__leg2_delivery_point = value        

    @property
    def tcm_cost_horizon4_day(self) -> float:
        """TCM cost with a 4 day time horizon."""
        return self.__tcm_cost_horizon4_day

    @tcm_cost_horizon4_day.setter
    def tcm_cost_horizon4_day(self, value: float):
        self._property_changed('tcm_cost_horizon4_day')
        self.__tcm_cost_horizon4_day = value        

    @property
    def styles(self) -> Tuple[Tuple[str, ...], ...]:
        """Styles or themes associated with the asset (max 50)"""
        return self.__styles

    @styles.setter
    def styles(self, value: Tuple[Tuple[str, ...], ...]):
        self._property_changed('styles')
        self.__styles = value        

    @property
    def short_name(self) -> str:
        """Short name."""
        return self.__short_name

    @short_name.setter
    def short_name(self, value: str):
        self._property_changed('short_name')
        self.__short_name = value        

    @property
    def reset_frequency1(self) -> str:
        """An integer multiplier of a period describing how often the parties to an SB swap
           transaction shall evaluate and, when applicable, change the price
           used for the underlying assets of the swap transaction. Such reset
           frequency may be described as one letter preceded by an integer."""
        return self.__reset_frequency1

    @reset_frequency1.setter
    def reset_frequency1(self, value: str):
        self._property_changed('reset_frequency1')
        self.__reset_frequency1 = value        

    @property
    def buy4bps(self) -> float:
        """The amount GS would buy for 4 bps charge."""
        return self.__buy4bps

    @buy4bps.setter
    def buy4bps(self, value: float):
        self._property_changed('buy4bps')
        self.__buy4bps = value        

    @property
    def reset_frequency2(self) -> str:
        """Same as Reset Frequency 1."""
        return self.__reset_frequency2

    @reset_frequency2.setter
    def reset_frequency2(self, value: str):
        self._property_changed('reset_frequency2')
        self.__reset_frequency2 = value        

    @property
    def other_price_term(self) -> str:
        """An indication that the publicly reportable SB swap transaction has one or more
           additional term(s) or provision(s), other than those listed in the
           required real-time data fields, that materially affect(s) the price
           of the swap transaction."""
        return self.__other_price_term

    @other_price_term.setter
    def other_price_term(self, value: str):
        self._property_changed('other_price_term')
        self.__other_price_term = value        

    @property
    def bid_gspread(self) -> float:
        """Bid G spread."""
        return self.__bid_gspread

    @bid_gspread.setter
    def bid_gspread(self, value: float):
        self._property_changed('bid_gspread')
        self.__bid_gspread = value        

    @property
    def open_price(self) -> float:
        """Opening level of an asset based on official exchange fixing or calculation agent
           marked level."""
        return self.__open_price

    @open_price.setter
    def open_price(self, value: float):
        self._property_changed('open_price')
        self.__open_price = value        

    @property
    def ps_id(self) -> str:
        """Platts Symbol."""
        return self.__ps_id

    @ps_id.setter
    def ps_id(self, value: str):
        self._property_changed('ps_id')
        self.__ps_id = value        

    @property
    def hit_rate_mtd(self) -> float:
        """Hit Rate Ratio Month to Date."""
        return self.__hit_rate_mtd

    @hit_rate_mtd.setter
    def hit_rate_mtd(self, value: float):
        self._property_changed('hit_rate_mtd')
        self.__hit_rate_mtd = value        

    @property
    def fair_volatility(self) -> float:
        """Strike in volatility terms, calculated as square root of fair variance."""
        return self.__fair_volatility

    @fair_volatility.setter
    def fair_volatility(self, value: float):
        self._property_changed('fair_volatility')
        self.__fair_volatility = value        

    @property
    def dollar_cross(self) -> str:
        """USD cross symbol for a particular currency."""
        return self.__dollar_cross

    @dollar_cross.setter
    def dollar_cross(self, value: str):
        self._property_changed('dollar_cross')
        self.__dollar_cross = value        

    @property
    def portfolio_type(self) -> str:
        """Portfolio type differentiates the portfolio categorization"""
        return self.__portfolio_type

    @portfolio_type.setter
    def portfolio_type(self, value: str):
        self._property_changed('portfolio_type')
        self.__portfolio_type = value        

    @property
    def currency(self) -> str:
        """Currency, ISO 4217 currency code or exchange quote modifier (e.g. GBP vs GBp)"""
        return self.__currency

    @currency.setter
    def currency(self, value: str):
        self._property_changed('currency')
        self.__currency = value        

    @property
    def cluster_class(self) -> str:
        """The Cluster the stock belongs to on the particular date. The cluster class will
           be assigned to a value between 1 and 13 (inclusive)."""
        return self.__cluster_class

    @cluster_class.setter
    def cluster_class(self, value: str):
        self._property_changed('cluster_class')
        self.__cluster_class = value        

    @property
    def sell50bps(self) -> float:
        """The amount GS would sell for 50 bps charge."""
        return self.__sell50bps

    @sell50bps.setter
    def sell50bps(self, value: float):
        self._property_changed('sell50bps')
        self.__sell50bps = value        

    @property
    def future_month_m21(self) -> float:
        """Commods future month code."""
        return self.__future_month_m21

    @future_month_m21.setter
    def future_month_m21(self, value: float):
        self._property_changed('future_month_m21')
        self.__future_month_m21 = value        

    @property
    def bid_size(self) -> float:
        """The number of shares, lots, or contracts willing to buy at the Bid price."""
        return self.__bid_size

    @bid_size.setter
    def bid_size(self, value: float):
        self._property_changed('bid_size')
        self.__bid_size = value        

    @property
    def arrival_mid(self) -> float:
        """Arrival Mid Price."""
        return self.__arrival_mid

    @arrival_mid.setter
    def arrival_mid(self, value: float):
        self._property_changed('arrival_mid')
        self.__arrival_mid = value        

    @property
    def asset_parameters_exchange_currency(self) -> str:
        """Currency, ISO 4217 currency code or exchange quote modifier (e.g. GBP vs GBp)"""
        return self.__asset_parameters_exchange_currency

    @asset_parameters_exchange_currency.setter
    def asset_parameters_exchange_currency(self, value: str):
        self._property_changed('asset_parameters_exchange_currency')
        self.__asset_parameters_exchange_currency = value        

    @property
    def candidate_name(self) -> str:
        """Name of candidate in election."""
        return self.__candidate_name

    @candidate_name.setter
    def candidate_name(self, value: str):
        self._property_changed('candidate_name')
        self.__candidate_name = value        

    @property
    def implied_lognormal_volatility(self) -> float:
        """Market implied volatility measured using a lognormal model in percent/year."""
        return self.__implied_lognormal_volatility

    @implied_lognormal_volatility.setter
    def implied_lognormal_volatility(self, value: float):
        self._property_changed('implied_lognormal_volatility')
        self.__implied_lognormal_volatility = value        

    @property
    def vwap_in_limit_unrealized_cash(self) -> float:
        """Consolidated unrealised performance vs VWAP In Limit, in USD."""
        return self.__vwap_in_limit_unrealized_cash

    @vwap_in_limit_unrealized_cash.setter
    def vwap_in_limit_unrealized_cash(self, value: float):
        self._property_changed('vwap_in_limit_unrealized_cash')
        self.__vwap_in_limit_unrealized_cash = value        

    @property
    def rating_moodys(self) -> str:
        """Bond rating from Moody's."""
        return self.__rating_moodys

    @rating_moodys.setter
    def rating_moodys(self, value: str):
        self._property_changed('rating_moodys')
        self.__rating_moodys = value        

    @property
    def future_month_m26(self) -> float:
        """Commods future month code."""
        return self.__future_month_m26

    @future_month_m26.setter
    def future_month_m26(self, value: float):
        self._property_changed('future_month_m26')
        self.__future_month_m26 = value        

    @property
    def future_month_m25(self) -> float:
        """Commods future month code."""
        return self.__future_month_m25

    @future_month_m25.setter
    def future_month_m25(self, value: float):
        self._property_changed('future_month_m25')
        self.__future_month_m25 = value        

    @property
    def future_month_m24(self) -> float:
        """Commods future month code."""
        return self.__future_month_m24

    @future_month_m24.setter
    def future_month_m24(self, value: float):
        self._property_changed('future_month_m24')
        self.__future_month_m24 = value        

    @property
    def future_month_m23(self) -> float:
        """Commods future month code."""
        return self.__future_month_m23

    @future_month_m23.setter
    def future_month_m23(self, value: float):
        self._property_changed('future_month_m23')
        self.__future_month_m23 = value        

    @property
    def development_status(self) -> str:
        """The status of development of this dataset. Controls rate limit on query/upload."""
        return self.__development_status

    @development_status.setter
    def development_status(self, value: str):
        self._property_changed('development_status')
        self.__development_status = value        

    @property
    def future_month_m22(self) -> float:
        """Commods future month code."""
        return self.__future_month_m22

    @future_month_m22.setter
    def future_month_m22(self, value: float):
        self._property_changed('future_month_m22')
        self.__future_month_m22 = value        

    @property
    def flow_pct(self) -> float:
        """Percent of flow of the fund."""
        return self.__flow_pct

    @flow_pct.setter
    def flow_pct(self, value: float):
        self._property_changed('flow_pct')
        self.__flow_pct = value        

    @property
    def source(self) -> str:
        """Source of data."""
        return self.__source

    @source.setter
    def source(self, value: str):
        self._property_changed('source')
        self.__source = value        

    @property
    def asset_classifications_country_code(self) -> str:
        """Country code (ISO 3166)."""
        return self.__asset_classifications_country_code

    @asset_classifications_country_code.setter
    def asset_classifications_country_code(self, value: str):
        self._property_changed('asset_classifications_country_code')
        self.__asset_classifications_country_code = value        

    @property
    def settle_drop(self) -> float:
        """Latest Bid Price (price willing to buy)."""
        return self.__settle_drop

    @settle_drop.setter
    def settle_drop(self, value: float):
        self._property_changed('settle_drop')
        self.__settle_drop = value        

    @property
    def data_set_sub_category(self) -> str:
        """Second level grouping of dataset."""
        return self.__data_set_sub_category

    @data_set_sub_category.setter
    def data_set_sub_category(self, value: str):
        self._property_changed('data_set_sub_category')
        self.__data_set_sub_category = value        

    @property
    def sell9point5bps(self) -> float:
        """The amount GS would sell for 9.5 bps charge."""
        return self.__sell9point5bps

    @sell9point5bps.setter
    def sell9point5bps(self, value: float):
        self._property_changed('sell9point5bps')
        self.__sell9point5bps = value        

    @property
    def quantity_bucket(self) -> str:
        """Range of pricing hours."""
        return self.__quantity_bucket

    @quantity_bucket.setter
    def quantity_bucket(self, value: str):
        self._property_changed('quantity_bucket')
        self.__quantity_bucket = value        

    @property
    def option_style_sdr(self) -> str:
        """Style of the option."""
        return self.__option_style_sdr

    @option_style_sdr.setter
    def option_style_sdr(self, value: str):
        self._property_changed('option_style_sdr')
        self.__option_style_sdr = value        

    @property
    def oe_name(self) -> str:
        """Name of user's organization."""
        return self.__oe_name

    @oe_name.setter
    def oe_name(self, value: str):
        self._property_changed('oe_name')
        self.__oe_name = value        

    @property
    def given(self) -> float:
        """Number of trades given."""
        return self.__given

    @given.setter
    def given(self, value: float):
        self._property_changed('given')
        self.__given = value        

    @property
    def leg2_day_count_convention(self) -> str:
        """The determination of how interest accrues over time for the SB swap."""
        return self.__leg2_day_count_convention

    @leg2_day_count_convention.setter
    def leg2_day_count_convention(self, value: str):
        self._property_changed('leg2_day_count_convention')
        self.__leg2_day_count_convention = value        

    @property
    def liquidity_score_sell(self) -> float:
        """The liquidity score assigned to selling the bond."""
        return self.__liquidity_score_sell

    @liquidity_score_sell.setter
    def liquidity_score_sell(self, value: float):
        self._property_changed('liquidity_score_sell')
        self.__liquidity_score_sell = value        

    @property
    def delisting_date(self) -> str:
        """Date at which the entity is delisted."""
        return self.__delisting_date

    @delisting_date.setter
    def delisting_date(self, value: str):
        self._property_changed('delisting_date')
        self.__delisting_date = value        

    @property
    def weight(self) -> float:
        """Weight of a given position within a portfolio, by default calcualted as
           netWeight."""
        return self.__weight

    @weight.setter
    def weight(self, value: float):
        self._property_changed('weight')
        self.__weight = value        

    @property
    def accrued_interest(self) -> float:
        """The accrued interest paid on the bond."""
        return self.__accrued_interest

    @accrued_interest.setter
    def accrued_interest(self, value: float):
        self._property_changed('accrued_interest')
        self.__accrued_interest = value        

    @property
    def business_scope(self) -> str:
        """Business/Product Scope."""
        return self.__business_scope

    @business_scope.setter
    def business_scope(self, value: str):
        self._property_changed('business_scope')
        self.__business_scope = value        

    @property
    def wtd_degree_days(self) -> float:
        """The actual/forecast value for weighted degree days."""
        return self.__wtd_degree_days

    @wtd_degree_days.setter
    def wtd_degree_days(self, value: float):
        self._property_changed('wtd_degree_days')
        self.__wtd_degree_days = value        

    @property
    def absolute_weight(self) -> float:
        """Weight in terms of absolute notional."""
        return self.__absolute_weight

    @absolute_weight.setter
    def absolute_weight(self, value: float):
        self._property_changed('absolute_weight')
        self.__absolute_weight = value        

    @property
    def measure(self) -> str:
        """A calculated metric in the risk scenario."""
        return self.__measure

    @measure.setter
    def measure(self, value: str):
        self._property_changed('measure')
        self.__measure = value        

    @property
    def return30d(self) -> float:
        """T30 day return in USD."""
        return self.__return30d

    @return30d.setter
    def return30d(self, value: float):
        self._property_changed('return30d')
        self.__return30d = value        

    @property
    def temperature_hourly_forecast(self) -> float:
        """The hourly forecast value for temperature in Fahrenheit."""
        return self.__temperature_hourly_forecast

    @temperature_hourly_forecast.setter
    def temperature_hourly_forecast(self, value: float):
        self._property_changed('temperature_hourly_forecast')
        self.__temperature_hourly_forecast = value        

    @property
    def iceberg_tip_rate_type(self) -> str:
        """The unit associated with an Iceberg tip rate."""
        return self.__iceberg_tip_rate_type

    @iceberg_tip_rate_type.setter
    def iceberg_tip_rate_type(self, value: str):
        self._property_changed('iceberg_tip_rate_type')
        self.__iceberg_tip_rate_type = value        

    @property
    def sharpe_ytd(self) -> float:
        """Sharpe ratio Year to date."""
        return self.__sharpe_ytd

    @sharpe_ytd.setter
    def sharpe_ytd(self, value: float):
        self._property_changed('sharpe_ytd')
        self.__sharpe_ytd = value        

    @property
    def wind_speed_forecast(self) -> float:
        """The forecast value for wind speed."""
        return self.__wind_speed_forecast

    @wind_speed_forecast.setter
    def wind_speed_forecast(self, value: float):
        self._property_changed('wind_speed_forecast')
        self.__wind_speed_forecast = value        

    @property
    def gross_investment_ytd(self) -> float:
        """Total gross investment Year to date."""
        return self.__gross_investment_ytd

    @gross_investment_ytd.setter
    def gross_investment_ytd(self, value: float):
        self._property_changed('gross_investment_ytd')
        self.__gross_investment_ytd = value        

    @property
    def yield_price(self) -> float:
        """Yield price."""
        return self.__yield_price

    @yield_price.setter
    def yield_price(self, value: float):
        self._property_changed('yield_price')
        self.__yield_price = value        

    @property
    def payment_frequency_period_multiplier2(self) -> float:
        """The integer multiplier of a time period describing how often the parties to the
           SB swap transaction exchange payments associated with each party???s
           obligation. Such payment frequency may be described as one letter
           preceded by an integer."""
        return self.__payment_frequency_period_multiplier2

    @payment_frequency_period_multiplier2.setter
    def payment_frequency_period_multiplier2(self, value: float):
        self._property_changed('payment_frequency_period_multiplier2')
        self.__payment_frequency_period_multiplier2 = value        

    @property
    def payment_frequency_period_multiplier1(self) -> float:
        """The integer multiplier of a time period describing how often the parties to the
           SB swap transaction exchange payments associated with each party???s
           obligation. Such payment frequency may be described as one letter
           preceded by an integer."""
        return self.__payment_frequency_period_multiplier1

    @payment_frequency_period_multiplier1.setter
    def payment_frequency_period_multiplier1(self, value: float):
        self._property_changed('payment_frequency_period_multiplier1')
        self.__payment_frequency_period_multiplier1 = value        

    @property
    def leg1_total_notional_unit(self) -> str:
        """Unit of reported notional price."""
        return self.__leg1_total_notional_unit

    @leg1_total_notional_unit.setter
    def leg1_total_notional_unit(self, value: str):
        self._property_changed('leg1_total_notional_unit')
        self.__leg1_total_notional_unit = value        

    @property
    def absolute_attribution(self) -> float:
        """The absolute attribution of an underlying asset to the overall performance of
           the parent strategy in the currency of the parent strategy."""
        return self.__absolute_attribution

    @absolute_attribution.setter
    def absolute_attribution(self, value: float):
        self._property_changed('absolute_attribution')
        self.__absolute_attribution = value        

    @property
    def issue_price(self) -> float:
        """The price for which the instrument is issued."""
        return self.__issue_price

    @issue_price.setter
    def issue_price(self, value: float):
        self._property_changed('issue_price')
        self.__issue_price = value        

    @property
    def ask_high(self) -> float:
        """The highest Ask Price (price offering to sell)."""
        return self.__ask_high

    @ask_high.setter
    def ask_high(self, value: float):
        self._property_changed('ask_high')
        self.__ask_high = value        

    @property
    def expected_data_quality(self) -> float:
        """Expected data quality level."""
        return self.__expected_data_quality

    @expected_data_quality.setter
    def expected_data_quality(self, value: float):
        self._property_changed('expected_data_quality')
        self.__expected_data_quality = value        

    @property
    def region_name(self) -> str:
        """Name of the region for which FCI is calculated ??? Developed Markets, Emerging
           Markets, Euro Area, Global."""
        return self.__region_name

    @region_name.setter
    def region_name(self, value: str):
        self._property_changed('region_name')
        self.__region_name = value        

    @property
    def value_revised(self) -> str:
        """Revised value."""
        return self.__value_revised

    @value_revised.setter
    def value_revised(self, value: str):
        self._property_changed('value_revised')
        self.__value_revised = value        

    @property
    def discretion_upper_bound(self) -> float:
        """TThe upper bound of the discretion band as published from the algo."""
        return self.__discretion_upper_bound

    @discretion_upper_bound.setter
    def discretion_upper_bound(self, value: float):
        self._property_changed('discretion_upper_bound')
        self.__discretion_upper_bound = value        

    @property
    def adjusted_trade_price(self) -> float:
        """Last trade price or value adjusted for corporate actions."""
        return self.__adjusted_trade_price

    @adjusted_trade_price.setter
    def adjusted_trade_price(self, value: float):
        self._property_changed('adjusted_trade_price')
        self.__adjusted_trade_price = value        

    @property
    def forecast_time(self) -> datetime.datetime:
        """Time of forecasted electricity loads (in UTC)."""
        return self.__forecast_time

    @forecast_time.setter
    def forecast_time(self, value: datetime.datetime):
        self._property_changed('forecast_time')
        self.__forecast_time = value        

    @property
    def iso_subdivision_code_alpha2(self) -> str:
        """ISO 3166-2 code for identifying the principal subdivisions of all countries
           coded in ISO 3166-1 (up to three alphanumeric characters)."""
        return self.__iso_subdivision_code_alpha2

    @iso_subdivision_code_alpha2.setter
    def iso_subdivision_code_alpha2(self, value: str):
        self._property_changed('iso_subdivision_code_alpha2')
        self.__iso_subdivision_code_alpha2 = value        

    @property
    def ctd_conversion_factor(self) -> float:
        """Cheapest to deliver bond's conversion factor."""
        return self.__ctd_conversion_factor

    @ctd_conversion_factor.setter
    def ctd_conversion_factor(self, value: float):
        self._property_changed('ctd_conversion_factor')
        self.__ctd_conversion_factor = value        

    @property
    def proceeds_asset_swap_spread(self) -> float:
        """Proceeds asset swap spread."""
        return self.__proceeds_asset_swap_spread

    @proceeds_asset_swap_spread.setter
    def proceeds_asset_swap_spread(self, value: float):
        self._property_changed('proceeds_asset_swap_spread')
        self.__proceeds_asset_swap_spread = value        

    @property
    def is_adr(self) -> bool:
        """Is ADR or not."""
        return self.__is_adr

    @is_adr.setter
    def is_adr(self, value: bool):
        self._property_changed('is_adr')
        self.__is_adr = value        

    @property
    def issue_date(self) -> datetime.date:
        """ISO 8601-formatted date"""
        return self.__issue_date

    @issue_date.setter
    def issue_date(self, value: datetime.date):
        self._property_changed('issue_date')
        self.__issue_date = value        

    @property
    def service_id(self) -> str:
        """Service ID."""
        return self.__service_id

    @service_id.setter
    def service_id(self, value: str):
        self._property_changed('service_id')
        self.__service_id = value        

    @property
    def yes(self) -> float:
        """Price of yes contract."""
        return self.__yes

    @yes.setter
    def yes(self, value: float):
        self._property_changed('yes')
        self.__yes = value        

    @property
    def g_score(self) -> float:
        """A company's score for G metrics relative to the entire ESG universe."""
        return self.__g_score

    @g_score.setter
    def g_score(self, value: float):
        self._property_changed('g_score')
        self.__g_score = value        

    @property
    def market_value(self) -> float:
        """Marketable value of a given position, generally the market price for a given
           date."""
        return self.__market_value

    @market_value.setter
    def market_value(self, value: float):
        self._property_changed('market_value')
        self.__market_value = value        

    @property
    def entity_id(self) -> str:
        """Identifies an entity uniquely; in use for Data Quality Checker."""
        return self.__entity_id

    @entity_id.setter
    def entity_id(self, value: str):
        self._property_changed('entity_id')
        self.__entity_id = value        

    @property
    def notional_currency1(self) -> str:
        """An indication of the type of currency of the notional or principal amount."""
        return self.__notional_currency1

    @notional_currency1.setter
    def notional_currency1(self, value: str):
        self._property_changed('notional_currency1')
        self.__notional_currency1 = value        

    @property
    def net_debt_to_ebitda(self) -> float:
        """Net Debt to EBITDA."""
        return self.__net_debt_to_ebitda

    @net_debt_to_ebitda.setter
    def net_debt_to_ebitda(self, value: float):
        self._property_changed('net_debt_to_ebitda')
        self.__net_debt_to_ebitda = value        

    @property
    def num_units_upper(self) -> float:
        """Units Upper."""
        return self.__num_units_upper

    @num_units_upper.setter
    def num_units_upper(self, value: float):
        self._property_changed('num_units_upper')
        self.__num_units_upper = value        

    @property
    def notional_currency2(self) -> str:
        """Same as Notional Currency 1."""
        return self.__notional_currency2

    @notional_currency2.setter
    def notional_currency2(self, value: str):
        self._property_changed('notional_currency2')
        self.__notional_currency2 = value        

    @property
    def in_limit_participation_rate(self) -> float:
        """Average in-limit participation rate of the order, including principal fills."""
        return self.__in_limit_participation_rate

    @in_limit_participation_rate.setter
    def in_limit_participation_rate(self, value: float):
        self._property_changed('in_limit_participation_rate')
        self.__in_limit_participation_rate = value        

    @property
    def pressure_forecast(self) -> float:
        """The pressure forecast of a given unit."""
        return self.__pressure_forecast

    @pressure_forecast.setter
    def pressure_forecast(self, value: float):
        self._property_changed('pressure_forecast')
        self.__pressure_forecast = value        

    @property
    def paid(self) -> float:
        """Number of trades paid."""
        return self.__paid

    @paid.setter
    def paid(self, value: float):
        self._property_changed('paid')
        self.__paid = value        

    @property
    def fixed_rate(self) -> Union[float, str]:
        """Strike as value, percent or at-the-money e.g. 62.5, 95%, ATM-25, ATMF, 10/vol,
           100k/pv, p=10000, p=10000USD, $200K/BP, or multiple strikes
           65.4/-45.8"""
        return self.__fixed_rate

    @fixed_rate.setter
    def fixed_rate(self, value: Union[float, str]):
        self._property_changed('fixed_rate')
        self.__fixed_rate = value        

    @property
    def short(self) -> float:
        """Short exposure."""
        return self.__short

    @short.setter
    def short(self, value: float):
        self._property_changed('short')
        self.__short = value        

    @property
    def time(self) -> datetime.datetime:
        """ISO 8601 formatted date and time."""
        return self.__time

    @time.setter
    def time(self, value: datetime.datetime):
        self._property_changed('time')
        self.__time = value        

    @property
    def buy4point5bps(self) -> float:
        """The amount GS would buy for 4.5 bps charge."""
        return self.__buy4point5bps

    @buy4point5bps.setter
    def buy4point5bps(self, value: float):
        self._property_changed('buy4point5bps')
        self.__buy4point5bps = value        

    @property
    def sell30cents(self) -> float:
        """The amount GS would sell for 30 cents charge."""
        return self.__sell30cents

    @sell30cents.setter
    def sell30cents(self, value: float):
        self._property_changed('sell30cents')
        self.__sell30cents = value        

    @property
    def event_end_date_time(self) -> datetime.datetime:
        """The end time of the event if the event occurs during a time window and the event
           has a specific end time."""
        return self.__event_end_date_time

    @event_end_date_time.setter
    def event_end_date_time(self, value: datetime.datetime):
        self._property_changed('event_end_date_time')
        self.__event_end_date_time = value        

    @property
    def leg1_payment_frequency(self) -> str:
        """An integer multiplier of a time period describing how often the parties to the
           SB swap transaction exchange payments associated with each party???s
           obligation. Such payment frequency may be described as one letter
           preceded by an integer."""
        return self.__leg1_payment_frequency

    @leg1_payment_frequency.setter
    def leg1_payment_frequency(self, value: str):
        self._property_changed('leg1_payment_frequency')
        self.__leg1_payment_frequency = value        

    @property
    def cm_id(self) -> str:
        """Prime Client Master Party Id."""
        return self.__cm_id

    @cm_id.setter
    def cm_id(self, value: str):
        self._property_changed('cm_id')
        self.__cm_id = value        

    @property
    def taxonomy(self) -> str:
        """An indication of the product taxonomy."""
        return self.__taxonomy

    @taxonomy.setter
    def taxonomy(self, value: str):
        self._property_changed('taxonomy')
        self.__taxonomy = value        

    @property
    def buy45cents(self) -> float:
        """The amount GS would buy for 45 cents charge."""
        return self.__buy45cents

    @buy45cents.setter
    def buy45cents(self, value: float):
        self._property_changed('buy45cents')
        self.__buy45cents = value        

    @property
    def measures(self) -> Tuple[str, ...]:
        """Fields that are nullable."""
        return self.__measures

    @measures.setter
    def measures(self, value: Tuple[str, ...]):
        self._property_changed('measures')
        self.__measures = value        

    @property
    def seasonal_adjustment(self) -> str:
        """Indicates if and how the forecast is seasonally adjusted."""
        return self.__seasonal_adjustment

    @seasonal_adjustment.setter
    def seasonal_adjustment(self, value: str):
        self._property_changed('seasonal_adjustment')
        self.__seasonal_adjustment = value        

    @property
    def rank_wtd(self) -> float:
        """Rank of the Contributor Week to Date."""
        return self.__rank_wtd

    @rank_wtd.setter
    def rank_wtd(self, value: float):
        self._property_changed('rank_wtd')
        self.__rank_wtd = value        

    @property
    def underlyer(self) -> str:
        """The underlyer of the security. The cross for FX forwards, for example."""
        return self.__underlyer

    @underlyer.setter
    def underlyer(self, value: str):
        self._property_changed('underlyer')
        self.__underlyer = value        

    @property
    def created_time(self) -> datetime.datetime:
        """Time created. ISO 8601 formatted string."""
        return self.__created_time

    @created_time.setter
    def created_time(self, value: datetime.datetime):
        self._property_changed('created_time')
        self.__created_time = value        

    @property
    def return1yr(self) -> float:
        """One yr return."""
        return self.__return1yr

    @return1yr.setter
    def return1yr(self, value: float):
        self._property_changed('return1yr')
        self.__return1yr = value        

    @property
    def identifier(self) -> str:
        """Filter by any identifier of an asset like ticker, bloomberg id etc."""
        return self.__identifier

    @identifier.setter
    def identifier(self, value: str):
        self._property_changed('identifier')
        self.__identifier = value        

    @property
    def price_unit(self) -> str:
        """Unit of reported price."""
        return self.__price_unit

    @price_unit.setter
    def price_unit(self, value: str):
        self._property_changed('price_unit')
        self.__price_unit = value        

    @property
    def trade_report_ref_id(self) -> str:
        """On cancellations and corrections, this ID will hold the Dissemination ID of the
           originally published real-time message."""
        return self.__trade_report_ref_id

    @trade_report_ref_id.setter
    def trade_report_ref_id(self, value: str):
        self._property_changed('trade_report_ref_id')
        self.__trade_report_ref_id = value        

    @property
    def subdivision_id(self) -> str:
        """Marquee subdivision object identifier."""
        return self.__subdivision_id

    @subdivision_id.setter
    def subdivision_id(self, value: str):
        self._property_changed('subdivision_id')
        self.__subdivision_id = value        

    @property
    def unadjusted_low(self) -> float:
        """Unadjusted low level of an asset based on official exchange fixing or
           calculation agent marked level."""
        return self.__unadjusted_low

    @unadjusted_low.setter
    def unadjusted_low(self, value: float):
        self._property_changed('unadjusted_low')
        self.__unadjusted_low = value        

    @property
    def buy160cents(self) -> float:
        """The amount GS would buy for 160 cents charge."""
        return self.__buy160cents

    @buy160cents.setter
    def buy160cents(self, value: float):
        self._property_changed('buy160cents')
        self.__buy160cents = value        

    @property
    def portfolio_id(self) -> str:
        """Marquee unique identifier for a portfolio."""
        return self.__portfolio_id

    @portfolio_id.setter
    def portfolio_id(self, value: str):
        self._property_changed('portfolio_id')
        self.__portfolio_id = value        

    @property
    def z_spread(self) -> float:
        """Zero Volatility Spread to yield curve."""
        return self.__z_spread

    @z_spread.setter
    def z_spread(self, value: float):
        self._property_changed('z_spread')
        self.__z_spread = value        

    @property
    def floating_rate_reset_frequency_period2(self) -> str:
        """For leg 2, where applicable, time unit associated with the frequency of resets,
           e.g., day, week, month, year or term of the stream."""
        return self.__floating_rate_reset_frequency_period2

    @floating_rate_reset_frequency_period2.setter
    def floating_rate_reset_frequency_period2(self, value: str):
        self._property_changed('floating_rate_reset_frequency_period2')
        self.__floating_rate_reset_frequency_period2 = value        

    @property
    def cap_floor_atm_fwd_rate(self) -> float:
        """Cap Floor ATM forward rate."""
        return self.__cap_floor_atm_fwd_rate

    @cap_floor_atm_fwd_rate.setter
    def cap_floor_atm_fwd_rate(self, value: float):
        self._property_changed('cap_floor_atm_fwd_rate')
        self.__cap_floor_atm_fwd_rate = value        

    @property
    def es_percentile(self) -> float:
        """An aggregate percentile that captures a company's E&S ranking within its
           subsector."""
        return self.__es_percentile

    @es_percentile.setter
    def es_percentile(self, value: float):
        self._property_changed('es_percentile')
        self.__es_percentile = value        

    @property
    def tdapi(self) -> str:
        """TDAPI Description."""
        return self.__tdapi

    @tdapi.setter
    def tdapi(self, value: str):
        self._property_changed('tdapi')
        self.__tdapi = value        

    @property
    def floating_rate_reset_frequency_period1(self) -> str:
        """For leg 1, where applicable, time unit associated with the frequency of resets,
           e.g., day, week, month, year or term of the stream."""
        return self.__floating_rate_reset_frequency_period1

    @floating_rate_reset_frequency_period1.setter
    def floating_rate_reset_frequency_period1(self, value: str):
        self._property_changed('floating_rate_reset_frequency_period1')
        self.__floating_rate_reset_frequency_period1 = value        

    @property
    def location_code(self) -> str:
        """The unique government-designated code for locations (of varying granularity)."""
        return self.__location_code

    @location_code.setter
    def location_code(self, value: str):
        self._property_changed('location_code')
        self.__location_code = value        

    @property
    def rcic(self) -> str:
        """Reuters composite instrument code (subject to licensing)."""
        return self.__rcic

    @rcic.setter
    def rcic(self, value: str):
        self._property_changed('rcic')
        self.__rcic = value        

    @property
    def name_raw(self) -> str:
        """Legal or published name for the asset."""
        return self.__name_raw

    @name_raw.setter
    def name_raw(self, value: str):
        self._property_changed('name_raw')
        self.__name_raw = value        

    @property
    def simon_asset_tags(self) -> Tuple[str, ...]:
        """SIMON Asset Tags."""
        return self.__simon_asset_tags

    @simon_asset_tags.setter
    def simon_asset_tags(self, value: Tuple[str, ...]):
        self._property_changed('simon_asset_tags')
        self.__simon_asset_tags = value        

    @property
    def hit_rate_qtd(self) -> float:
        """Hit Rate Ratio Quarter to Date."""
        return self.__hit_rate_qtd

    @hit_rate_qtd.setter
    def hit_rate_qtd(self, value: float):
        self._property_changed('hit_rate_qtd')
        self.__hit_rate_qtd = value        

    @property
    def primary_volume_in_limit(self) -> float:
        """Primary volume in limit as specified on the order."""
        return self.__primary_volume_in_limit

    @primary_volume_in_limit.setter
    def primary_volume_in_limit(self, value: float):
        self._property_changed('primary_volume_in_limit')
        self.__primary_volume_in_limit = value        

    @property
    def precipitation_daily_forecast_percent(self) -> float:
        """The forecast value for precipitation in Percent."""
        return self.__precipitation_daily_forecast_percent

    @precipitation_daily_forecast_percent.setter
    def precipitation_daily_forecast_percent(self, value: float):
        self._property_changed('precipitation_daily_forecast_percent')
        self.__precipitation_daily_forecast_percent = value        

    @property
    def aum_end(self) -> float:
        """Assets under management at the end of the period."""
        return self.__aum_end

    @aum_end.setter
    def aum_end(self, value: float):
        self._property_changed('aum_end')
        self.__aum_end = value        

    @property
    def premium(self) -> float:
        """An indication of the market value at the time of execution."""
        return self.__premium

    @premium.setter
    def premium(self, value: float):
        self._property_changed('premium')
        self.__premium = value        

    @property
    def low(self) -> float:
        """Low level of an asset based on official exchange fixing or calculation agent
           marked level."""
        return self.__low

    @low.setter
    def low(self, value: float):
        self._property_changed('low')
        self.__low = value        

    @property
    def cross_group(self) -> str:
        """Economic cross groupings."""
        return self.__cross_group

    @cross_group.setter
    def cross_group(self, value: str):
        self._property_changed('cross_group')
        self.__cross_group = value        

    @property
    def report_run_time(self) -> datetime.datetime:
        """Time that the report was run."""
        return self.__report_run_time

    @report_run_time.setter
    def report_run_time(self, value: datetime.datetime):
        self._property_changed('report_run_time')
        self.__report_run_time = value        

    @property
    def five_day_price_change_bps(self) -> float:
        """The five day movement in price measured in basis points."""
        return self.__five_day_price_change_bps

    @five_day_price_change_bps.setter
    def five_day_price_change_bps(self, value: float):
        self._property_changed('five_day_price_change_bps')
        self.__five_day_price_change_bps = value        

    @property
    def holdings(self) -> float:
        """Number of units of a given asset held within a portfolio."""
        return self.__holdings

    @holdings.setter
    def holdings(self, value: float):
        self._property_changed('holdings')
        self.__holdings = value        

    @property
    def precipitation_daily_forecast(self) -> float:
        """The forecast value for precipitation."""
        return self.__precipitation_daily_forecast

    @precipitation_daily_forecast.setter
    def precipitation_daily_forecast(self, value: float):
        self._property_changed('precipitation_daily_forecast')
        self.__precipitation_daily_forecast = value        

    @property
    def fixed_recovery_cds_final_price(self) -> float:
        """A fixed recovery CDS eliminates the uncertainty on the recovery rate by fixing a
           specific recovery value for the CDS contract."""
        return self.__fixed_recovery_cds_final_price

    @fixed_recovery_cds_final_price.setter
    def fixed_recovery_cds_final_price(self, value: float):
        self._property_changed('fixed_recovery_cds_final_price')
        self.__fixed_recovery_cds_final_price = value        

    @property
    def price_method(self) -> str:
        """Method used to calculate net price."""
        return self.__price_method

    @price_method.setter
    def price_method(self, value: str):
        self._property_changed('price_method')
        self.__price_method = value        

    @property
    def asset_parameters_fixed_rate_frequency(self) -> str:
        """Tenor"""
        return self.__asset_parameters_fixed_rate_frequency

    @asset_parameters_fixed_rate_frequency.setter
    def asset_parameters_fixed_rate_frequency(self, value: str):
        self._property_changed('asset_parameters_fixed_rate_frequency')
        self.__asset_parameters_fixed_rate_frequency = value        

    @property
    def ois_xccy(self) -> float:
        """Xccy OIS Spread rate."""
        return self.__ois_xccy

    @ois_xccy.setter
    def ois_xccy(self, value: float):
        self._property_changed('ois_xccy')
        self.__ois_xccy = value        

    @property
    def days_open(self) -> float:
        """Day Open price."""
        return self.__days_open

    @days_open.setter
    def days_open(self, value: float):
        self._property_changed('days_open')
        self.__days_open = value        

    @property
    def buy110cents(self) -> float:
        """The amount GS would buy for 110 cents charge."""
        return self.__buy110cents

    @buy110cents.setter
    def buy110cents(self, value: float):
        self._property_changed('buy110cents')
        self.__buy110cents = value        

    @property
    def average_spread_bps(self) -> float:
        """Time-weighted average bid/ask spread during the life of the order."""
        return self.__average_spread_bps

    @average_spread_bps.setter
    def average_spread_bps(self, value: float):
        self._property_changed('average_spread_bps')
        self.__average_spread_bps = value        

    @property
    def buy55cents(self) -> float:
        """The amount GS would buy for 55 cents charge."""
        return self.__buy55cents

    @buy55cents.setter
    def buy55cents(self, value: float):
        self._property_changed('buy55cents')
        self.__buy55cents = value        

    @property
    def underlying_asset_id_sdr(self) -> str:
        """The underlying asset identifier for payments of a party's obligations under the
           SB swap transaction reference."""
        return self.__underlying_asset_id_sdr

    @underlying_asset_id_sdr.setter
    def underlying_asset_id_sdr(self, value: str):
        self._property_changed('underlying_asset_id_sdr')
        self.__underlying_asset_id_sdr = value        

    @property
    def future_month_q26(self) -> float:
        """Commods future month code."""
        return self.__future_month_q26

    @future_month_q26.setter
    def future_month_q26(self, value: float):
        self._property_changed('future_month_q26')
        self.__future_month_q26 = value        

    @property
    def issue_size(self) -> float:
        """The notional issue size of the bond."""
        return self.__issue_size

    @issue_size.setter
    def issue_size(self, value: float):
        self._property_changed('issue_size')
        self.__issue_size = value        

    @property
    def future_month_q25(self) -> float:
        """Commods future month code."""
        return self.__future_month_q25

    @future_month_q25.setter
    def future_month_q25(self, value: float):
        self._property_changed('future_month_q25')
        self.__future_month_q25 = value        

    @property
    def future_month_q24(self) -> float:
        """Commods future month code."""
        return self.__future_month_q24

    @future_month_q24.setter
    def future_month_q24(self, value: float):
        self._property_changed('future_month_q24')
        self.__future_month_q24 = value        

    @property
    def future_month_q23(self) -> float:
        """Commods future month code."""
        return self.__future_month_q23

    @future_month_q23.setter
    def future_month_q23(self, value: float):
        self._property_changed('future_month_q23')
        self.__future_month_q23 = value        

    @property
    def future_month_q22(self) -> float:
        """Commods future month code."""
        return self.__future_month_q22

    @future_month_q22.setter
    def future_month_q22(self, value: float):
        self._property_changed('future_month_q22')
        self.__future_month_q22 = value        

    @property
    def pending_loan_count(self) -> float:
        """The number of pending loans that exist on a given date."""
        return self.__pending_loan_count

    @pending_loan_count.setter
    def pending_loan_count(self, value: float):
        self._property_changed('pending_loan_count')
        self.__pending_loan_count = value        

    @property
    def future_month_q21(self) -> float:
        """Commods future month code."""
        return self.__future_month_q21

    @future_month_q21.setter
    def future_month_q21(self, value: float):
        self._property_changed('future_month_q21')
        self.__future_month_q21 = value        

    @property
    def price_spot_stop_loss_unit(self) -> str:
        """Unit in which the stop loss price is reported."""
        return self.__price_spot_stop_loss_unit

    @price_spot_stop_loss_unit.setter
    def price_spot_stop_loss_unit(self, value: str):
        self._property_changed('price_spot_stop_loss_unit')
        self.__price_spot_stop_loss_unit = value        

    @property
    def price_range_in_ticks_description(self) -> str:
        """Description of the Stock's Price Range in Ticks on the particular date."""
        return self.__price_range_in_ticks_description

    @price_range_in_ticks_description.setter
    def price_range_in_ticks_description(self, value: str):
        self._property_changed('price_range_in_ticks_description')
        self.__price_range_in_ticks_description = value        

    @property
    def trade_volume(self) -> float:
        """Market trade volume."""
        return self.__trade_volume

    @trade_volume.setter
    def trade_volume(self, value: float):
        self._property_changed('trade_volume')
        self.__trade_volume = value        

    @property
    def primary_country_ric(self) -> str:
        """Reuters primary country instrument code (subject to licensing)."""
        return self.__primary_country_ric

    @primary_country_ric.setter
    def primary_country_ric(self, value: str):
        self._property_changed('primary_country_ric')
        self.__primary_country_ric = value        

    @property
    def option_expiration_frequency(self) -> str:
        """Option Expiration Frequency provided by Participant (e.g., Daily, Monthly)."""
        return self.__option_expiration_frequency

    @option_expiration_frequency.setter
    def option_expiration_frequency(self, value: str):
        self._property_changed('option_expiration_frequency')
        self.__option_expiration_frequency = value        

    @property
    def is_active(self) -> bool:
        """Whether this entry is active."""
        return self.__is_active

    @is_active.setter
    def is_active(self, value: bool):
        self._property_changed('is_active')
        self.__is_active = value        

    @property
    def use_machine_learning(self) -> bool:
        """Use Machine learning."""
        return self.__use_machine_learning

    @use_machine_learning.setter
    def use_machine_learning(self, value: bool):
        self._property_changed('use_machine_learning')
        self.__use_machine_learning = value        

    @property
    def growth_score(self) -> float:
        """Growth percentile relative to Americas coverage universe (a higher score means
           faster growth)."""
        return self.__growth_score

    @growth_score.setter
    def growth_score(self, value: float):
        self._property_changed('growth_score')
        self.__growth_score = value        

    @property
    def buffer_threshold(self) -> float:
        """The buffer between holdings and on loan quantity for an asset."""
        return self.__buffer_threshold

    @buffer_threshold.setter
    def buffer_threshold(self, value: float):
        self._property_changed('buffer_threshold')
        self.__buffer_threshold = value        

    @property
    def buy120cents(self) -> float:
        """The amount GS would buy for 120 cents charge."""
        return self.__buy120cents

    @buy120cents.setter
    def buy120cents(self, value: float):
        self._property_changed('buy120cents')
        self.__buy120cents = value        

    @property
    def matched_maturity_swap_rate(self) -> float:
        """Matched maturity swap rate."""
        return self.__matched_maturity_swap_rate

    @matched_maturity_swap_rate.setter
    def matched_maturity_swap_rate(self, value: float):
        self._property_changed('matched_maturity_swap_rate')
        self.__matched_maturity_swap_rate = value        

    @property
    def underlying_asset_name(self) -> str:
        """The name of the underlying asset."""
        return self.__underlying_asset_name

    @underlying_asset_name.setter
    def underlying_asset_name(self, value: str):
        self._property_changed('underlying_asset_name')
        self.__underlying_asset_name = value        

    @property
    def primary_vwap(self) -> float:
        """Primary VWAP benchmark price."""
        return self.__primary_vwap

    @primary_vwap.setter
    def primary_vwap(self, value: float):
        self._property_changed('primary_vwap')
        self.__primary_vwap = value        

    @property
    def exchange_type_id(self) -> str:
        """PadMaster unique exchange type identifier."""
        return self.__exchange_type_id

    @exchange_type_id.setter
    def exchange_type_id(self, value: str):
        self._property_changed('exchange_type_id')
        self.__exchange_type_id = value        

    @property
    def basis_swap_rate(self) -> float:
        """Fixed spread or basis that equates the two floating legs of a basis swap at the
           time of the trade."""
        return self.__basis_swap_rate

    @basis_swap_rate.setter
    def basis_swap_rate(self, value: float):
        self._property_changed('basis_swap_rate')
        self.__basis_swap_rate = value        

    @property
    def exchange_code(self) -> str:
        """EEX Exchange Code."""
        return self.__exchange_code

    @exchange_code.setter
    def exchange_code(self, value: str):
        self._property_changed('exchange_code')
        self.__exchange_code = value        

    @property
    def group(self) -> str:
        """Region or sector following the MSCI Global Industry Classification Standard
           (GICS)."""
        return self.__group

    @group.setter
    def group(self, value: str):
        self._property_changed('group')
        self.__group = value        

    @property
    def asset_parameters_termination_date(self) -> str:
        """Relative termination date."""
        return self.__asset_parameters_termination_date

    @asset_parameters_termination_date.setter
    def asset_parameters_termination_date(self, value: str):
        self._property_changed('asset_parameters_termination_date')
        self.__asset_parameters_termination_date = value        

    @property
    def estimated_spread(self) -> float:
        """Average bid-ask quoted spread of the stock (bps) over the execution horizon (1
           day)."""
        return self.__estimated_spread

    @estimated_spread.setter
    def estimated_spread(self, value: float):
        self._property_changed('estimated_spread')
        self.__estimated_spread = value        

    @property
    def yield_change_on_day(self) -> float:
        """Yield change on day."""
        return self.__yield_change_on_day

    @yield_change_on_day.setter
    def yield_change_on_day(self, value: float):
        self._property_changed('yield_change_on_day')
        self.__yield_change_on_day = value        

    @property
    def created(self) -> datetime.datetime:
        """Created time."""
        return self.__created

    @created.setter
    def created(self, value: datetime.datetime):
        self._property_changed('created')
        self.__created = value        

    @property
    def auto_tags(self) -> Tuple[str, ...]:
        """Metadata associated with the object"""
        return self.__auto_tags

    @auto_tags.setter
    def auto_tags(self, value: Tuple[str, ...]):
        self._property_changed('auto_tags')
        self.__auto_tags = value        

    @property
    def tcm_cost(self) -> float:
        """Pretrade computation of trading out cost."""
        return self.__tcm_cost

    @tcm_cost.setter
    def tcm_cost(self, value: float):
        self._property_changed('tcm_cost')
        self.__tcm_cost = value        

    @property
    def sustain_japan(self) -> bool:
        """True if the stock is on the SUSTAIN Japan list as of the corresponding date.
           False if the stock is removed from the SUSTAIN Japan list on the
           corresponding date."""
        return self.__sustain_japan

    @sustain_japan.setter
    def sustain_japan(self, value: bool):
        self._property_changed('sustain_japan')
        self.__sustain_japan = value        

    @property
    def history_start_date(self) -> datetime.date:
        """Asset history start date."""
        return self.__history_start_date

    @history_start_date.setter
    def history_start_date(self, value: datetime.date):
        self._property_changed('history_start_date')
        self.__history_start_date = value        

    @property
    def bid_spread(self) -> float:
        """Spread between the yields of a debt security and its benchmark when both are
           purchased at bid price."""
        return self.__bid_spread

    @bid_spread.setter
    def bid_spread(self, value: float):
        self._property_changed('bid_spread')
        self.__bid_spread = value        

    @property
    def percentage_complete(self) -> float:
        """Percent Complete."""
        return self.__percentage_complete

    @percentage_complete.setter
    def percentage_complete(self, value: float):
        self._property_changed('percentage_complete')
        self.__percentage_complete = value        

    @property
    def hedge_tracking_error(self) -> float:
        """Standard deviation of the difference in the portfolio and benchmark returns over
           time."""
        return self.__hedge_tracking_error

    @hedge_tracking_error.setter
    def hedge_tracking_error(self, value: float):
        self._property_changed('hedge_tracking_error')
        self.__hedge_tracking_error = value        

    @property
    def term_status(self) -> str:
        """Denotes whether the share class is currently accepting new subscriptions."""
        return self.__term_status

    @term_status.setter
    def term_status(self, value: str):
        self._property_changed('term_status')
        self.__term_status = value        

    @property
    def wind_speed_type(self) -> str:
        """The hourly or average speed of wind."""
        return self.__wind_speed_type

    @wind_speed_type.setter
    def wind_speed_type(self, value: str):
        self._property_changed('wind_speed_type')
        self.__wind_speed_type = value        

    @property
    def strike_price(self) -> float:
        """Strike price."""
        return self.__strike_price

    @strike_price.setter
    def strike_price(self, value: float):
        self._property_changed('strike_price')
        self.__strike_price = value        

    @property
    def par_asset_swap_spread12m(self) -> float:
        """Par asset swap spread vs 12m tenor."""
        return self.__par_asset_swap_spread12m

    @par_asset_swap_spread12m.setter
    def par_asset_swap_spread12m(self, value: float):
        self._property_changed('par_asset_swap_spread12m')
        self.__par_asset_swap_spread12m = value        

    @property
    def trade_report_id(self) -> str:
        """DDR generated unique and random ID for reconciliation purpose."""
        return self.__trade_report_id

    @trade_report_id.setter
    def trade_report_id(self, value: str):
        self._property_changed('trade_report_id')
        self.__trade_report_id = value        

    @property
    def adjusted_open_price(self) -> float:
        """Opening level of an asset based on official exchange fixing or calculation agent
           marked level adjusted for corporate actions."""
        return self.__adjusted_open_price

    @adjusted_open_price.setter
    def adjusted_open_price(self, value: float):
        self._property_changed('adjusted_open_price')
        self.__adjusted_open_price = value        

    @property
    def country_id(self) -> str:
        """Marquee country object identifier."""
        return self.__country_id

    @country_id.setter
    def country_id(self, value: str):
        self._property_changed('country_id')
        self.__country_id = value        

    @property
    def point(self) -> str:
        """MDAPI point."""
        return self.__point

    @point.setter
    def point(self, value: str):
        self._property_changed('point')
        self.__point = value        

    @property
    def pnl_mtd(self) -> float:
        """Total PnL Month to date."""
        return self.__pnl_mtd

    @pnl_mtd.setter
    def pnl_mtd(self, value: float):
        self._property_changed('pnl_mtd')
        self.__pnl_mtd = value        

    @property
    def total_returns(self) -> float:
        """Total returns for backtest."""
        return self.__total_returns

    @total_returns.setter
    def total_returns(self, value: float):
        self._property_changed('total_returns')
        self.__total_returns = value        

    @property
    def lender(self) -> str:
        """Name of the lending entity on a securities lending agreement."""
        return self.__lender

    @lender.setter
    def lender(self, value: str):
        self._property_changed('lender')
        self.__lender = value        

    @property
    def ann_return1_year(self) -> float:
        """Total return representing past performance, used for GS Money Market onshore
           funds over one year."""
        return self.__ann_return1_year

    @ann_return1_year.setter
    def ann_return1_year(self, value: float):
        self._property_changed('ann_return1_year')
        self.__ann_return1_year = value        

    @property
    def ctd_fwd_dv01(self) -> float:
        """DV01 of cheapest to deliver bond."""
        return self.__ctd_fwd_dv01

    @ctd_fwd_dv01.setter
    def ctd_fwd_dv01(self, value: float):
        self._property_changed('ctd_fwd_dv01')
        self.__ctd_fwd_dv01 = value        

    @property
    def eff_yield7_day(self) -> float:
        """Average income return over the previous 7 days reduced by any capital gains that
           may have been included in rate calculation, assuming the rate stays
           the same for one year and that dividends are reinvested."""
        return self.__eff_yield7_day

    @eff_yield7_day.setter
    def eff_yield7_day(self, value: float):
        self._property_changed('eff_yield7_day')
        self.__eff_yield7_day = value        

    @property
    def meeting_date(self) -> str:
        """Date the Central bank Meeting took place."""
        return self.__meeting_date

    @meeting_date.setter
    def meeting_date(self, value: str):
        self._property_changed('meeting_date')
        self.__meeting_date = value        

    @property
    def calendar_spread_mispricing(self) -> float:
        """The richness/cheapness of the calendar spread relative to Libor."""
        return self.__calendar_spread_mispricing

    @calendar_spread_mispricing.setter
    def calendar_spread_mispricing(self, value: float):
        self._property_changed('calendar_spread_mispricing')
        self.__calendar_spread_mispricing = value        

    @property
    def buy140cents(self) -> float:
        """The amount GS would buy for 140 cents charge."""
        return self.__buy140cents

    @buy140cents.setter
    def buy140cents(self, value: float):
        self._property_changed('buy140cents')
        self.__buy140cents = value        

    @property
    def price_notation2_type(self) -> str:
        """Basis points, Price, Yield, Spread, Coupon, etc., depending on the type of SB
           swap, which is calculated at affirmation."""
        return self.__price_notation2_type

    @price_notation2_type.setter
    def price_notation2_type(self, value: str):
        self._property_changed('price_notation2_type')
        self.__price_notation2_type = value        

    @property
    def fund_focus(self) -> str:
        """Focus of the fund. For example whether it is ESG or Non-ESG."""
        return self.__fund_focus

    @fund_focus.setter
    def fund_focus(self, value: str):
        self._property_changed('fund_focus')
        self.__fund_focus = value        

    @property
    def relative_strike(self) -> float:
        """Strike relative to spot or forward level in terms of percent of either spot or
           forward level."""
        return self.__relative_strike

    @relative_strike.setter
    def relative_strike(self, value: float):
        self._property_changed('relative_strike')
        self.__relative_strike = value        

    @property
    def flagship(self) -> bool:
        """Whether or not it is a flagship basket."""
        return self.__flagship

    @flagship.setter
    def flagship(self, value: bool):
        self._property_changed('flagship')
        self.__flagship = value        

    @property
    def additional_price_notation(self) -> float:
        """The additional price notation value includes execution events, the presence of
           collateral, frontend payments, back-end payments, or other
           noneconomic characteristics (e.g. counterparty credit risk) not
           illustrated in the reporting field for pricing characteristic."""
        return self.__additional_price_notation

    @additional_price_notation.setter
    def additional_price_notation(self, value: float):
        self._property_changed('additional_price_notation')
        self.__additional_price_notation = value        

    @property
    def factor_category(self) -> str:
        """The text to display when representing a factor category. Must match the regex
           ^[\w -]{0,32}$."""
        return self.__factor_category

    @factor_category.setter
    def factor_category(self, value: str):
        self._property_changed('factor_category')
        self.__factor_category = value        

    @property
    def equity_delta(self) -> float:
        """Delta exposure to equity products."""
        return self.__equity_delta

    @equity_delta.setter
    def equity_delta(self, value: float):
        self._property_changed('equity_delta')
        self.__equity_delta = value        

    @property
    def gross_weight(self) -> float:
        """Sum of the absolute weight values, which equals the sum of absolute long and
           short weights. If you have IBM stock with shortWeight 0.2 and also
           IBM stock with longWeight 0.4, then the grossWeight would be 0.6
           (0.2+0.4)."""
        return self.__gross_weight

    @gross_weight.setter
    def gross_weight(self, value: float):
        self._property_changed('gross_weight')
        self.__gross_weight = value        

    @property
    def listed(self) -> bool:
        """Whether the asset is listed or not."""
        return self.__listed

    @listed.setter
    def listed(self, value: bool):
        self._property_changed('listed')
        self.__listed = value        

    @property
    def sell7bps(self) -> float:
        """The amount GS would sell for 7 bps charge."""
        return self.__sell7bps

    @sell7bps.setter
    def sell7bps(self, value: float):
        self._property_changed('sell7bps')
        self.__sell7bps = value        

    @property
    def earnings_record_type(self) -> str:
        """The violation status for this particular line item."""
        return self.__earnings_record_type

    @earnings_record_type.setter
    def earnings_record_type(self, value: str):
        self._property_changed('earnings_record_type')
        self.__earnings_record_type = value        

    @property
    def mean(self) -> float:
        """Calculated average."""
        return self.__mean

    @mean.setter
    def mean(self, value: float):
        self._property_changed('mean')
        self.__mean = value        

    @property
    def ask_yield(self) -> float:
        """The return an investor realizes on a bond sold at the ask price."""
        return self.__ask_yield

    @ask_yield.setter
    def ask_yield(self, value: float):
        self._property_changed('ask_yield')
        self.__ask_yield = value        

    @property
    def shock_style(self) -> str:
        """Style of shocks to be used."""
        return self.__shock_style

    @shock_style.setter
    def shock_style(self, value: str):
        self._property_changed('shock_style')
        self.__shock_style = value        

    @property
    def methodology(self) -> str:
        """Methodology of dataset."""
        return self.__methodology

    @methodology.setter
    def methodology(self, value: str):
        self._property_changed('methodology')
        self.__methodology = value        

    @property
    def buy25cents(self) -> float:
        """The amount GS would buy for 25 cents charge."""
        return self.__buy25cents

    @buy25cents.setter
    def buy25cents(self, value: float):
        self._property_changed('buy25cents')
        self.__buy25cents = value        

    @property
    def amount_outstanding(self) -> float:
        """The aggregate principal amount of the total number of bonds not redeemed or
           otherwise discharged."""
        return self.__amount_outstanding

    @amount_outstanding.setter
    def amount_outstanding(self, value: float):
        self._property_changed('amount_outstanding')
        self.__amount_outstanding = value        

    @property
    def market_pnl(self) -> float:
        """Market Profit and Loss (PNL)."""
        return self.__market_pnl

    @market_pnl.setter
    def market_pnl(self, value: float):
        self._property_changed('market_pnl')
        self.__market_pnl = value        

    @property
    def sustain_asia_ex_japan(self) -> bool:
        """True if the stock is on the SUSTAIN Asia Ex Japan list as of the corresponding
           date. False if the stock is removed from the SUSTAIN Asia Ex Japan
           list on the corresponding date."""
        return self.__sustain_asia_ex_japan

    @sustain_asia_ex_japan.setter
    def sustain_asia_ex_japan(self, value: bool):
        self._property_changed('sustain_asia_ex_japan')
        self.__sustain_asia_ex_japan = value        

    @property
    def sell6point5bps(self) -> float:
        """The amount GS would sell for 6.5 bps charge."""
        return self.__sell6point5bps

    @sell6point5bps.setter
    def sell6point5bps(self, value: float):
        self._property_changed('sell6point5bps')
        self.__sell6point5bps = value        

    @property
    def neighbour_asset_id(self) -> str:
        """Marquee identifier for the corresponding neighbour."""
        return self.__neighbour_asset_id

    @neighbour_asset_id.setter
    def neighbour_asset_id(self, value: str):
        self._property_changed('neighbour_asset_id')
        self.__neighbour_asset_id = value        

    @property
    def count_ideas_ytd(self) -> float:
        """Ideas alive at a time Year to date."""
        return self.__count_ideas_ytd

    @count_ideas_ytd.setter
    def count_ideas_ytd(self, value: float):
        self._property_changed('count_ideas_ytd')
        self.__count_ideas_ytd = value        

    @property
    def simon_intl_asset_tags(self) -> Tuple[str, ...]:
        """SIMON International Asset Tags."""
        return self.__simon_intl_asset_tags

    @simon_intl_asset_tags.setter
    def simon_intl_asset_tags(self, value: Tuple[str, ...]):
        self._property_changed('simon_intl_asset_tags')
        self.__simon_intl_asset_tags = value        

    @property
    def path(self) -> str:
        """Path to value."""
        return self.__path

    @path.setter
    def path(self, value: str):
        self._property_changed('path')
        self.__path = value        

    @property
    def vwap_unrealized_cash(self) -> float:
        """Consolidated unrealised performance vs VWAP, in USD."""
        return self.__vwap_unrealized_cash

    @vwap_unrealized_cash.setter
    def vwap_unrealized_cash(self, value: float):
        self._property_changed('vwap_unrealized_cash')
        self.__vwap_unrealized_cash = value        

    @property
    def payoff_mtd(self) -> float:
        """Total win divided by total loss Month to date."""
        return self.__payoff_mtd

    @payoff_mtd.setter
    def payoff_mtd(self, value: float):
        self._property_changed('payoff_mtd')
        self.__payoff_mtd = value        

    @property
    def spread2(self) -> float:
        """Spread of leg 2."""
        return self.__spread2

    @spread2.setter
    def spread2(self, value: float):
        self._property_changed('spread2')
        self.__spread2 = value        

    @property
    def bos_in_bps_label(self):
        return self.__bos_in_bps_label

    @bos_in_bps_label.setter
    def bos_in_bps_label(self, value):
        self._property_changed('bos_in_bps_label')
        self.__bos_in_bps_label = value        

    @property
    def spread1(self) -> float:
        """Spread of leg 1."""
        return self.__spread1

    @spread1.setter
    def spread1(self, value: float):
        self._property_changed('spread1')
        self.__spread1 = value        

    @property
    def bos_in_bps(self) -> float:
        """The Bid-Offer Spread of the stock in Basis points on the particular date."""
        return self.__bos_in_bps

    @bos_in_bps.setter
    def bos_in_bps(self, value: float):
        self._property_changed('bos_in_bps')
        self.__bos_in_bps = value        

    @property
    def point_class(self) -> str:
        """MDAPI Class."""
        return self.__point_class

    @point_class.setter
    def point_class(self, value: str):
        self._property_changed('point_class')
        self.__point_class = value        

    @property
    def fx_spot(self) -> float:
        """FX spot rate as determined by fixing source."""
        return self.__fx_spot

    @fx_spot.setter
    def fx_spot(self, value: float):
        self._property_changed('fx_spot')
        self.__fx_spot = value        

    @property
    def restrict_named_individuals(self) -> bool:
        """Restricts Visbility to Named Individuals."""
        return self.__restrict_named_individuals

    @restrict_named_individuals.setter
    def restrict_named_individuals(self, value: bool):
        self._property_changed('restrict_named_individuals')
        self.__restrict_named_individuals = value        

    @property
    def hedge_volatility(self) -> float:
        """Standard deviation of the annualized returns."""
        return self.__hedge_volatility

    @hedge_volatility.setter
    def hedge_volatility(self, value: float):
        self._property_changed('hedge_volatility')
        self.__hedge_volatility = value        

    @property
    def tags(self) -> Tuple[str, ...]:
        """Metadata associated with the object"""
        return self.__tags

    @tags.setter
    def tags(self, value: Tuple[str, ...]):
        self._property_changed('tags')
        self.__tags = value        

    @property
    def population(self) -> float:
        """Total population of a country, state or subdivision."""
        return self.__population

    @population.setter
    def population(self, value: float):
        self._property_changed('population')
        self.__population = value        

    @property
    def underlying_asset_id(self) -> str:
        """Marquee identifier for constituents of an index or portfolio."""
        return self.__underlying_asset_id

    @underlying_asset_id.setter
    def underlying_asset_id(self, value: str):
        self._property_changed('underlying_asset_id')
        self.__underlying_asset_id = value        

    @property
    def real_long_rates_contribution(self) -> float:
        """Contribution of long rate component to real FCI."""
        return self.__real_long_rates_contribution

    @real_long_rates_contribution.setter
    def real_long_rates_contribution(self, value: float):
        self._property_changed('real_long_rates_contribution')
        self.__real_long_rates_contribution = value        

    @property
    def pctprices_return(self) -> float:
        """The pctprices(return) function."""
        return self.__pctprices_return

    @pctprices_return.setter
    def pctprices_return(self, value: float):
        self._property_changed('pctprices_return')
        self.__pctprices_return = value        

    @property
    def domain(self) -> str:
        """Domain that request came from."""
        return self.__domain

    @domain.setter
    def domain(self, value: str):
        self._property_changed('domain')
        self.__domain = value        

    @property
    def buy80cents(self) -> float:
        """The amount GS would buy for 80 cents charge."""
        return self.__buy80cents

    @buy80cents.setter
    def buy80cents(self, value: float):
        self._property_changed('buy80cents')
        self.__buy80cents = value        

    @property
    def forward_tenor(self) -> str:
        """Start of swap after option expiry."""
        return self.__forward_tenor

    @forward_tenor.setter
    def forward_tenor(self, value: str):
        self._property_changed('forward_tenor')
        self.__forward_tenor = value        

    @property
    def average_price(self) -> float:
        """Average execution price."""
        return self.__average_price

    @average_price.setter
    def average_price(self, value: float):
        self._property_changed('average_price')
        self.__average_price = value        

    @property
    def target_price_realized_bps(self) -> float:
        """Realised performance vs Target Price, in bps."""
        return self.__target_price_realized_bps

    @target_price_realized_bps.setter
    def target_price_realized_bps(self, value: float):
        self._property_changed('target_price_realized_bps')
        self.__target_price_realized_bps = value        

    @property
    def leg2_fixed_rate(self) -> float:
        """If fixed rate leg, the fixed rate of leg 2."""
        return self.__leg2_fixed_rate

    @leg2_fixed_rate.setter
    def leg2_fixed_rate(self, value: float):
        self._property_changed('leg2_fixed_rate')
        self.__leg2_fixed_rate = value        

    @property
    def share_class_assets(self) -> float:
        """Total amount of assets under management in this shareclass."""
        return self.__share_class_assets

    @share_class_assets.setter
    def share_class_assets(self, value: float):
        self._property_changed('share_class_assets')
        self.__share_class_assets = value        

    @property
    def annuity(self) -> float:
        """Local currency annuity."""
        return self.__annuity

    @annuity.setter
    def annuity(self, value: float):
        self._property_changed('annuity')
        self.__annuity = value        

    @property
    def total_count(self) -> float:
        """Number of entities in the test."""
        return self.__total_count

    @total_count.setter
    def total_count(self, value: float):
        self._property_changed('total_count')
        self.__total_count = value        

    @property
    def quote_type(self) -> str:
        """Quote Type."""
        return self.__quote_type

    @quote_type.setter
    def quote_type(self, value: str):
        self._property_changed('quote_type')
        self.__quote_type = value        

    @property
    def corporate_action_status(self) -> str:
        """Different statuses for corporate actions from solactive"""
        return self.__corporate_action_status

    @corporate_action_status.setter
    def corporate_action_status(self, value: str):
        self._property_changed('corporate_action_status')
        self.__corporate_action_status = value        

    @property
    def pegged_tip_size(self) -> float:
        """Pegged order tip size in terms of the quantity unit."""
        return self.__pegged_tip_size

    @pegged_tip_size.setter
    def pegged_tip_size(self, value: float):
        self._property_changed('pegged_tip_size')
        self.__pegged_tip_size = value        

    @property
    def uid(self) -> str:
        """Two-digit code for countries and regions for which FCI numbers are represented.
           For countries it is the ISO 3166 2-digit country code. Regions are
           denoted as DM (Developed Markets), EM (Emerging Markets), EA (Euro
           Area) and GL (Global)."""
        return self.__uid

    @uid.setter
    def uid(self, value: str):
        self._property_changed('uid')
        self.__uid = value        

    @property
    def es_policy_percentile(self) -> float:
        """A percentile that captures a company's E&S policy ranking within its subsector."""
        return self.__es_policy_percentile

    @es_policy_percentile.setter
    def es_policy_percentile(self, value: float):
        self._property_changed('es_policy_percentile')
        self.__es_policy_percentile = value        

    @property
    def usd_ois(self) -> float:
        """USD Ois rate."""
        return self.__usd_ois

    @usd_ois.setter
    def usd_ois(self, value: float):
        self._property_changed('usd_ois')
        self.__usd_ois = value        

    @property
    def term(self) -> str:
        """Allowed risk model terms"""
        return self.__term

    @term.setter
    def term(self, value: str):
        self._property_changed('term')
        self.__term = value        

    @property
    def restrict_internal_gs_ntk(self) -> bool:
        """Restricts Internal Visibility to Data Beyond GS NTK."""
        return self.__restrict_internal_gs_ntk

    @restrict_internal_gs_ntk.setter
    def restrict_internal_gs_ntk(self, value: bool):
        self._property_changed('restrict_internal_gs_ntk')
        self.__restrict_internal_gs_ntk = value        

    @property
    def tcm_cost_participation_rate100_pct(self) -> float:
        """TCM cost with a 100 percent participation rate."""
        return self.__tcm_cost_participation_rate100_pct

    @tcm_cost_participation_rate100_pct.setter
    def tcm_cost_participation_rate100_pct(self, value: float):
        self._property_changed('tcm_cost_participation_rate100_pct')
        self.__tcm_cost_participation_rate100_pct = value        

    @property
    def relative_universe(self) -> str:
        """Universe relative to which the metric is computed."""
        return self.__relative_universe

    @relative_universe.setter
    def relative_universe(self, value: str):
        self._property_changed('relative_universe')
        self.__relative_universe = value        

    @property
    def measure_idx(self) -> int:
        """The index of the corresponding measure in the risk request."""
        return self.__measure_idx

    @measure_idx.setter
    def measure_idx(self, value: int):
        self._property_changed('measure_idx')
        self.__measure_idx = value        

    @property
    def fred_id(self) -> str:
        """FRED series identifier."""
        return self.__fred_id

    @fred_id.setter
    def fred_id(self, value: str):
        self._property_changed('fred_id')
        self.__fred_id = value        

    @property
    def twi_contribution(self) -> float:
        """Contribution of trade weighted exchange rate index component to FCI."""
        return self.__twi_contribution

    @twi_contribution.setter
    def twi_contribution(self, value: float):
        self._property_changed('twi_contribution')
        self.__twi_contribution = value        

    @property
    def cloud_cover_type(self) -> str:
        """The type of cloud cover: Average etc."""
        return self.__cloud_cover_type

    @cloud_cover_type.setter
    def cloud_cover_type(self, value: str):
        self._property_changed('cloud_cover_type')
        self.__cloud_cover_type = value        

    @property
    def delisted(self) -> str:
        """Whether the security has been delisted."""
        return self.__delisted

    @delisted.setter
    def delisted(self, value: str):
        self._property_changed('delisted')
        self.__delisted = value        

    @property
    def regional_focus(self) -> str:
        """Section of the world a fund is focused on from an investment perspective. Same
           view permissions as the asset."""
        return self.__regional_focus

    @regional_focus.setter
    def regional_focus(self, value: str):
        self._property_changed('regional_focus')
        self.__regional_focus = value        

    @property
    def volume_primary(self) -> float:
        """Accumulated number of shares, lots or contracts traded according to the market
           convention at the primary exchange."""
        return self.__volume_primary

    @volume_primary.setter
    def volume_primary(self, value: float):
        self._property_changed('volume_primary')
        self.__volume_primary = value        

    @property
    def asset_parameters_payer_designated_maturity(self) -> str:
        """Tenor"""
        return self.__asset_parameters_payer_designated_maturity

    @asset_parameters_payer_designated_maturity.setter
    def asset_parameters_payer_designated_maturity(self, value: str):
        self._property_changed('asset_parameters_payer_designated_maturity')
        self.__asset_parameters_payer_designated_maturity = value        

    @property
    def buy30cents(self) -> float:
        """The amount GS would buy for 30 cents charge."""
        return self.__buy30cents

    @buy30cents.setter
    def buy30cents(self, value: float):
        self._property_changed('buy30cents')
        self.__buy30cents = value        

    @property
    def funding_bid_price(self) -> float:
        """Latest Bid Price (price willing to buy)."""
        return self.__funding_bid_price

    @funding_bid_price.setter
    def funding_bid_price(self, value: float):
        self._property_changed('funding_bid_price')
        self.__funding_bid_price = value        

    @property
    def series(self) -> str:
        """Series."""
        return self.__series

    @series.setter
    def series(self, value: str):
        self._property_changed('series')
        self.__series = value        

    @property
    def sell3bps(self) -> float:
        """The amount GS would sell for 3 bps charge."""
        return self.__sell3bps

    @sell3bps.setter
    def sell3bps(self, value: float):
        self._property_changed('sell3bps')
        self.__sell3bps = value        

    @property
    def settlement_price(self) -> float:
        """Settlement Price."""
        return self.__settlement_price

    @settlement_price.setter
    def settlement_price(self, value: float):
        self._property_changed('settlement_price')
        self.__settlement_price = value        

    @property
    def quarter(self) -> str:
        """Quarter of forecast."""
        return self.__quarter

    @quarter.setter
    def quarter(self, value: str):
        self._property_changed('quarter')
        self.__quarter = value        

    @property
    def sell18bps(self) -> float:
        """The amount GS would sell for 18 bps charge."""
        return self.__sell18bps

    @sell18bps.setter
    def sell18bps(self, value: float):
        self._property_changed('sell18bps')
        self.__sell18bps = value        

    @property
    def asset_parameters_floating_rate_option(self) -> str:
        """The underlying benchmark for the floating rate, e.g. USD-LIBOR-BBA, EUR-EURIBOR-
           TELERATE."""
        return self.__asset_parameters_floating_rate_option

    @asset_parameters_floating_rate_option.setter
    def asset_parameters_floating_rate_option(self, value: str):
        self._property_changed('asset_parameters_floating_rate_option')
        self.__asset_parameters_floating_rate_option = value        

    @property
    def realized_vwap_performance_bps(self) -> float:
        """Average execution price vs Consolidated VWAP (in limit) since order inception
           ??? realized."""
        return self.__realized_vwap_performance_bps

    @realized_vwap_performance_bps.setter
    def realized_vwap_performance_bps(self, value: float):
        self._property_changed('realized_vwap_performance_bps')
        self.__realized_vwap_performance_bps = value        

    @property
    def vote_share(self) -> float:
        """Vote share (predicted) in election."""
        return self.__vote_share

    @vote_share.setter
    def vote_share(self, value: float):
        self._property_changed('vote_share')
        self.__vote_share = value        

    @property
    def servicing_cost_short_pnl(self) -> float:
        """Servicing Cost Short Profit and Loss."""
        return self.__servicing_cost_short_pnl

    @servicing_cost_short_pnl.setter
    def servicing_cost_short_pnl(self, value: float):
        self._property_changed('servicing_cost_short_pnl')
        self.__servicing_cost_short_pnl = value        

    @property
    def total_confirmed(self) -> float:
        """Total number of confirmed cases."""
        return self.__total_confirmed

    @total_confirmed.setter
    def total_confirmed(self, value: float):
        self._property_changed('total_confirmed')
        self.__total_confirmed = value        

    @property
    def economic_forecast(self) -> float:
        """Forecast value."""
        return self.__economic_forecast

    @economic_forecast.setter
    def economic_forecast(self, value: float):
        self._property_changed('economic_forecast')
        self.__economic_forecast = value        

    @property
    def plot_id(self) -> str:
        """Plot Identifier."""
        return self.__plot_id

    @plot_id.setter
    def plot_id(self, value: str):
        self._property_changed('plot_id')
        self.__plot_id = value        

    @property
    def cluster_description(self) -> str:
        """Description of the Cluster characteristics."""
        return self.__cluster_description

    @cluster_description.setter
    def cluster_description(self, value: str):
        self._property_changed('cluster_description')
        self.__cluster_description = value        

    @property
    def concentration_limit(self) -> float:
        """The allowable percentage of the outstanding loan balance of a lenders book that
           can be lent to/in a particular borrower/market/etc."""
        return self.__concentration_limit

    @concentration_limit.setter
    def concentration_limit(self, value: float):
        self._property_changed('concentration_limit')
        self.__concentration_limit = value        

    @property
    def wind_speed(self) -> float:
        """Average wind speed in knots."""
        return self.__wind_speed

    @wind_speed.setter
    def wind_speed(self, value: float):
        self._property_changed('wind_speed')
        self.__wind_speed = value        

    @property
    def observation_hour(self) -> str:
        """The observation hour for hourly weather forecast."""
        return self.__observation_hour

    @observation_hour.setter
    def observation_hour(self, value: str):
        self._property_changed('observation_hour')
        self.__observation_hour = value        

    @property
    def signal(self) -> float:
        """Signal."""
        return self.__signal

    @signal.setter
    def signal(self, value: float):
        self._property_changed('signal')
        self.__signal = value        

    @property
    def borrower_id(self) -> str:
        """Id of the borrowing entity on a securities lending agreement."""
        return self.__borrower_id

    @borrower_id.setter
    def borrower_id(self, value: str):
        self._property_changed('borrower_id')
        self.__borrower_id = value        

    @property
    def data_product(self) -> str:
        """Product that dataset belongs to."""
        return self.__data_product

    @data_product.setter
    def data_product(self, value: str):
        self._property_changed('data_product')
        self.__data_product = value        

    @property
    def buy7point5bps(self) -> float:
        """The amount GS would buy for 7.5 bps charge."""
        return self.__buy7point5bps

    @buy7point5bps.setter
    def buy7point5bps(self, value: float):
        self._property_changed('buy7point5bps')
        self.__buy7point5bps = value        

    @property
    def limit_price(self) -> float:
        """Limit price of the order."""
        return self.__limit_price

    @limit_price.setter
    def limit_price(self, value: float):
        self._property_changed('limit_price')
        self.__limit_price = value        

    @property
    def bm_prime_id(self) -> float:
        """Benchmark prime ID of the treasury."""
        return self.__bm_prime_id

    @bm_prime_id.setter
    def bm_prime_id(self, value: float):
        self._property_changed('bm_prime_id')
        self.__bm_prime_id = value        

    @property
    def data_type(self) -> str:
        """The type of data for Power or Load. Values may include Actual, Forecast."""
        return self.__data_type

    @data_type.setter
    def data_type(self, value: str):
        self._property_changed('data_type')
        self.__data_type = value        

    @property
    def count(self) -> float:
        """Total number of a collection."""
        return self.__count

    @count.setter
    def count(self, value: float):
        self._property_changed('count')
        self.__count = value        

    @property
    def conviction(self) -> str:
        """Confidence level in the trade idea."""
        return self.__conviction

    @conviction.setter
    def conviction(self, value: str):
        self._property_changed('conviction')
        self.__conviction = value        

    @property
    def rfqstate(self) -> str:
        """RFQ State."""
        return self.__rfqstate

    @rfqstate.setter
    def rfqstate(self, value: str):
        self._property_changed('rfqstate')
        self.__rfqstate = value        

    @property
    def benchmark_maturity(self) -> str:
        """The benchmark tenor."""
        return self.__benchmark_maturity

    @benchmark_maturity.setter
    def benchmark_maturity(self, value: str):
        self._property_changed('benchmark_maturity')
        self.__benchmark_maturity = value        

    @property
    def gross_flow_normalized(self) -> float:
        """Gross flow for the asset divided by average in defined history."""
        return self.__gross_flow_normalized

    @gross_flow_normalized.setter
    def gross_flow_normalized(self, value: float):
        self._property_changed('gross_flow_normalized')
        self.__gross_flow_normalized = value        

    @property
    def buy14bps(self) -> float:
        """The amount GS would buy for 14 bps charge."""
        return self.__buy14bps

    @buy14bps.setter
    def buy14bps(self, value: float):
        self._property_changed('buy14bps')
        self.__buy14bps = value        

    @property
    def factor_id(self) -> str:
        """Id for Factors."""
        return self.__factor_id

    @factor_id.setter
    def factor_id(self, value: str):
        self._property_changed('factor_id')
        self.__factor_id = value        

    @property
    def future_month_v26(self) -> float:
        """Commods future month code."""
        return self.__future_month_v26

    @future_month_v26.setter
    def future_month_v26(self, value: float):
        self._property_changed('future_month_v26')
        self.__future_month_v26 = value        

    @property
    def sts_fx_currency(self) -> str:
        """Currency of underlying FX risk for STS assets."""
        return self.__sts_fx_currency

    @sts_fx_currency.setter
    def sts_fx_currency(self, value: str):
        self._property_changed('sts_fx_currency')
        self.__sts_fx_currency = value        

    @property
    def future_month_v25(self) -> float:
        """Commods future month code."""
        return self.__future_month_v25

    @future_month_v25.setter
    def future_month_v25(self, value: float):
        self._property_changed('future_month_v25')
        self.__future_month_v25 = value        

    @property
    def bid_change(self) -> float:
        """Change in BID price."""
        return self.__bid_change

    @bid_change.setter
    def bid_change(self, value: float):
        self._property_changed('bid_change')
        self.__bid_change = value        

    @property
    def month(self) -> str:
        """Month in YYYYMM format."""
        return self.__month

    @month.setter
    def month(self, value: str):
        self._property_changed('month')
        self.__month = value        

    @property
    def future_month_v24(self) -> float:
        """Commods future month code."""
        return self.__future_month_v24

    @future_month_v24.setter
    def future_month_v24(self, value: float):
        self._property_changed('future_month_v24')
        self.__future_month_v24 = value        

    @property
    def investment_wtd(self) -> float:
        """Total net investment Week to date."""
        return self.__investment_wtd

    @investment_wtd.setter
    def investment_wtd(self, value: float):
        self._property_changed('investment_wtd')
        self.__investment_wtd = value        

    @property
    def future_month_v23(self) -> float:
        """Commods future month code."""
        return self.__future_month_v23

    @future_month_v23.setter
    def future_month_v23(self, value: float):
        self._property_changed('future_month_v23')
        self.__future_month_v23 = value        

    @property
    def future_month_v22(self) -> float:
        """Commods future month code."""
        return self.__future_month_v22

    @future_month_v22.setter
    def future_month_v22(self, value: float):
        self._property_changed('future_month_v22')
        self.__future_month_v22 = value        

    @property
    def future_month_v21(self) -> float:
        """Commods future month code."""
        return self.__future_month_v21

    @future_month_v21.setter
    def future_month_v21(self, value: float):
        self._property_changed('future_month_v21')
        self.__future_month_v21 = value        

    @property
    def expiration(self) -> str:
        """The expiration date of the associated contract and the last date it trades."""
        return self.__expiration

    @expiration.setter
    def expiration(self, value: str):
        self._property_changed('expiration')
        self.__expiration = value        

    @property
    def leg2_reset_frequency(self) -> str:
        """An integer multiplier of a period describing how often the parties to an SB swap
           transaction shall evaluate and, when applicable, change the price
           used for the underlying assets of the swap transaction (leg 2). Such
           reset frequency may be described as one letter preceded by an
           integer."""
        return self.__leg2_reset_frequency

    @leg2_reset_frequency.setter
    def leg2_reset_frequency(self, value: str):
        self._property_changed('leg2_reset_frequency')
        self.__leg2_reset_frequency = value        

    @property
    def controversy_score(self) -> float:
        """A company's score for controversy metrics."""
        return self.__controversy_score

    @controversy_score.setter
    def controversy_score(self, value: float):
        self._property_changed('controversy_score')
        self.__controversy_score = value        

    @property
    def proceed_asset_swap_spread(self) -> float:
        """Spread between a Proceed Swap Rate and the yield of the bond."""
        return self.__proceed_asset_swap_spread

    @proceed_asset_swap_spread.setter
    def proceed_asset_swap_spread(self, value: float):
        self._property_changed('proceed_asset_swap_spread')
        self.__proceed_asset_swap_spread = value        

    @property
    def concentration_level(self) -> float:
        """The percentage of the outstanding loan balance of a lenders book that is being
           lent to/in a particular borrower/market/etc."""
        return self.__concentration_level

    @concentration_level.setter
    def concentration_level(self, value: float):
        self._property_changed('concentration_level')
        self.__concentration_level = value        

    @property
    def importance(self) -> float:
        """Importance."""
        return self.__importance

    @importance.setter
    def importance(self, value: float):
        self._property_changed('importance')
        self.__importance = value        

    @property
    def asset_classifications_gics_sector(self) -> str:
        """GICS Sector classification (level 1)."""
        return self.__asset_classifications_gics_sector

    @asset_classifications_gics_sector.setter
    def asset_classifications_gics_sector(self, value: str):
        self._property_changed('asset_classifications_gics_sector')
        self.__asset_classifications_gics_sector = value        

    @property
    def sts_asset_name(self) -> str:
        """Name of risk asset for STS underliers."""
        return self.__sts_asset_name

    @sts_asset_name.setter
    def sts_asset_name(self, value: str):
        self._property_changed('sts_asset_name')
        self.__sts_asset_name = value        

    @property
    def net_exposure_classification(self) -> str:
        """Classification for net exposure of fund."""
        return self.__net_exposure_classification

    @net_exposure_classification.setter
    def net_exposure_classification(self, value: str):
        self._property_changed('net_exposure_classification')
        self.__net_exposure_classification = value        

    @property
    def settlement_method(self) -> str:
        """Settlement method of the swap."""
        return self.__settlement_method

    @settlement_method.setter
    def settlement_method(self, value: str):
        self._property_changed('settlement_method')
        self.__settlement_method = value        

    @property
    def receiver_designated_maturity(self) -> str:
        """Tenor"""
        return self.__receiver_designated_maturity

    @receiver_designated_maturity.setter
    def receiver_designated_maturity(self, value: str):
        self._property_changed('receiver_designated_maturity')
        self.__receiver_designated_maturity = value        

    @property
    def title(self) -> str:
        """Title of series."""
        return self.__title

    @title.setter
    def title(self, value: str):
        self._property_changed('title')
        self.__title = value        

    @property
    def x_ref_type_id(self) -> str:
        """PadMaster unique xref type identifier."""
        return self.__x_ref_type_id

    @x_ref_type_id.setter
    def x_ref_type_id(self, value: str):
        self._property_changed('x_ref_type_id')
        self.__x_ref_type_id = value        

    @property
    def duration(self) -> str:
        """Candle duration. Supported values are??1min, 1h, 1d etc."""
        return self.__duration

    @duration.setter
    def duration(self, value: str):
        self._property_changed('duration')
        self.__duration = value        

    @property
    def load(self) -> float:
        """Quantity of power in the electrical grid."""
        return self.__load

    @load.setter
    def load(self, value: float):
        self._property_changed('load')
        self.__load = value        

    @property
    def alpha(self) -> float:
        """Alpha."""
        return self.__alpha

    @alpha.setter
    def alpha(self, value: float):
        self._property_changed('alpha')
        self.__alpha = value        

    @property
    def company(self) -> str:
        """Activity user company."""
        return self.__company

    @company.setter
    def company(self, value: str):
        self._property_changed('company')
        self.__company = value        

    @property
    def settlement_frequency(self) -> str:
        """Settlement Frequency provided by Participant (e.g., Monthly, Daily)."""
        return self.__settlement_frequency

    @settlement_frequency.setter
    def settlement_frequency(self, value: str):
        self._property_changed('settlement_frequency')
        self.__settlement_frequency = value        

    @property
    def dist_avg7_day(self) -> float:
        """Goldman custom calculated value, only used for GS onshore Money Market Funds,
           assumes sum of the past 7 days divided by 7 and expressed as a
           percent."""
        return self.__dist_avg7_day

    @dist_avg7_day.setter
    def dist_avg7_day(self, value: float):
        self._property_changed('dist_avg7_day')
        self.__dist_avg7_day = value        

    @property
    def in_risk_model(self) -> bool:
        """Whether or not the asset is in the risk model universe."""
        return self.__in_risk_model

    @in_risk_model.setter
    def in_risk_model(self, value: bool):
        self._property_changed('in_risk_model')
        self.__in_risk_model = value        

    @property
    def daily_net_shareholder_flows_percent(self) -> float:
        """Percent of assets paid daily."""
        return self.__daily_net_shareholder_flows_percent

    @daily_net_shareholder_flows_percent.setter
    def daily_net_shareholder_flows_percent(self, value: float):
        self._property_changed('daily_net_shareholder_flows_percent')
        self.__daily_net_shareholder_flows_percent = value        

    @property
    def filled_notional_local(self) -> float:
        """Executed notional in Local."""
        return self.__filled_notional_local

    @filled_notional_local.setter
    def filled_notional_local(self, value: float):
        self._property_changed('filled_notional_local')
        self.__filled_notional_local = value        

    @property
    def ever_hospitalized(self) -> float:
        """The total number of patients ever hospitalized."""
        return self.__ever_hospitalized

    @ever_hospitalized.setter
    def ever_hospitalized(self, value: float):
        self._property_changed('ever_hospitalized')
        self.__ever_hospitalized = value        

    @property
    def meeting_number(self) -> float:
        """Central bank meeting number."""
        return self.__meeting_number

    @meeting_number.setter
    def meeting_number(self, value: float):
        self._property_changed('meeting_number')
        self.__meeting_number = value        

    @property
    def mid_gspread(self) -> float:
        """Mid G spread."""
        return self.__mid_gspread

    @mid_gspread.setter
    def mid_gspread(self, value: float):
        self._property_changed('mid_gspread')
        self.__mid_gspread = value        

    @property
    def days_open_unrealized_bps(self) -> float:
        """Unrealised performance vs Day Open, in BPS."""
        return self.__days_open_unrealized_bps

    @days_open_unrealized_bps.setter
    def days_open_unrealized_bps(self, value: float):
        self._property_changed('days_open_unrealized_bps')
        self.__days_open_unrealized_bps = value        

    @property
    def long_level(self) -> float:
        """Level of the 5-day normalized flow for long selling/buying."""
        return self.__long_level

    @long_level.setter
    def long_level(self, value: float):
        self._property_changed('long_level')
        self.__long_level = value        

    @property
    def data_description(self) -> str:
        """Description of data that client is requesting."""
        return self.__data_description

    @data_description.setter
    def data_description(self, value: str):
        self._property_changed('data_description')
        self.__data_description = value        

    @property
    def temperature_type(self) -> str:
        """The type of temperature required: max or min or average etc."""
        return self.__temperature_type

    @temperature_type.setter
    def temperature_type(self, value: str):
        self._property_changed('temperature_type')
        self.__temperature_type = value        

    @property
    def gsideid(self) -> str:
        """Goldman Sachs internal composite equity and exchange identifier."""
        return self.__gsideid

    @gsideid.setter
    def gsideid(self, value: str):
        self._property_changed('gsideid')
        self.__gsideid = value        

    @property
    def repo_rate(self) -> float:
        """Repurchase Rate."""
        return self.__repo_rate

    @repo_rate.setter
    def repo_rate(self, value: float):
        self._property_changed('repo_rate')
        self.__repo_rate = value        

    @property
    def division(self) -> str:
        """Division that owns the data."""
        return self.__division

    @division.setter
    def division(self, value: str):
        self._property_changed('division')
        self.__division = value        

    @property
    def cloud_cover_daily_forecast(self) -> float:
        """The forecast value for cloud cover in percentage."""
        return self.__cloud_cover_daily_forecast

    @cloud_cover_daily_forecast.setter
    def cloud_cover_daily_forecast(self, value: float):
        self._property_changed('cloud_cover_daily_forecast')
        self.__cloud_cover_daily_forecast = value        

    @property
    def wind_speed_daily_forecast(self) -> float:
        """The forecast value for wind speed in Miles per hour."""
        return self.__wind_speed_daily_forecast

    @wind_speed_daily_forecast.setter
    def wind_speed_daily_forecast(self, value: float):
        self._property_changed('wind_speed_daily_forecast')
        self.__wind_speed_daily_forecast = value        

    @property
    def execution_venue_type(self) -> str:
        """An indication of whether the SB swap transaction was executed on a registered
           swap execution facility or designated contract market or was executed
           as an off-facility swap."""
        return self.__execution_venue_type

    @execution_venue_type.setter
    def execution_venue_type(self, value: str):
        self._property_changed('execution_venue_type')
        self.__execution_venue_type = value        

    @property
    def asset_parameters_floating_rate_day_count_fraction(self) -> str:
        """Day Count Fraction"""
        return self.__asset_parameters_floating_rate_day_count_fraction

    @asset_parameters_floating_rate_day_count_fraction.setter
    def asset_parameters_floating_rate_day_count_fraction(self, value: str):
        self._property_changed('asset_parameters_floating_rate_day_count_fraction')
        self.__asset_parameters_floating_rate_day_count_fraction = value        

    @property
    def trade_action(self) -> str:
        """An indication that a publicly reportable securitybased (SB) swap transaction has
           been incorrectly or erroneously publicly disseminated and is canceled
           or corrected or a new transaction."""
        return self.__trade_action

    @trade_action.setter
    def trade_action(self, value: str):
        self._property_changed('trade_action')
        self.__trade_action = value        

    @property
    def action(self) -> str:
        """The activity action. For example: Viewed"""
        return self.__action

    @action.setter
    def action(self, value: str):
        self._property_changed('action')
        self.__action = value        

    @property
    def ctd_yield(self) -> float:
        """Yield of cheapest to deliver bond."""
        return self.__ctd_yield

    @ctd_yield.setter
    def ctd_yield(self, value: float):
        self._property_changed('ctd_yield')
        self.__ctd_yield = value        

    @property
    def arrival_haircut_vwap_normalized(self) -> float:
        """Performance against Benchmark in pip."""
        return self.__arrival_haircut_vwap_normalized

    @arrival_haircut_vwap_normalized.setter
    def arrival_haircut_vwap_normalized(self, value: float):
        self._property_changed('arrival_haircut_vwap_normalized')
        self.__arrival_haircut_vwap_normalized = value        

    @property
    def price_component(self) -> str:
        """Component of total price."""
        return self.__price_component

    @price_component.setter
    def price_component(self, value: str):
        self._property_changed('price_component')
        self.__price_component = value        

    @property
    def queue_clock_time_description(self) -> str:
        """Description of the Stock's Queue Clock Time on the particular date."""
        return self.__queue_clock_time_description

    @queue_clock_time_description.setter
    def queue_clock_time_description(self, value: str):
        self._property_changed('queue_clock_time_description')
        self.__queue_clock_time_description = value        

    @property
    def asset_parameters_receiver_day_count_fraction(self) -> str:
        """Day Count Fraction"""
        return self.__asset_parameters_receiver_day_count_fraction

    @asset_parameters_receiver_day_count_fraction.setter
    def asset_parameters_receiver_day_count_fraction(self, value: str):
        self._property_changed('asset_parameters_receiver_day_count_fraction')
        self.__asset_parameters_receiver_day_count_fraction = value        

    @property
    def percent_mid_execution_quantity(self) -> float:
        """Percentage of order filled at mid-touch."""
        return self.__percent_mid_execution_quantity

    @percent_mid_execution_quantity.setter
    def percent_mid_execution_quantity(self, value: float):
        self._property_changed('percent_mid_execution_quantity')
        self.__percent_mid_execution_quantity = value        

    @property
    def delta_strike(self) -> str:
        """Option strike price expressed in terms of delta * 100."""
        return self.__delta_strike

    @delta_strike.setter
    def delta_strike(self, value: str):
        self._property_changed('delta_strike')
        self.__delta_strike = value        

    @property
    def cloud_cover(self) -> float:
        """Value of the cloud cover for a given unit."""
        return self.__cloud_cover

    @cloud_cover.setter
    def cloud_cover(self, value: float):
        self._property_changed('cloud_cover')
        self.__cloud_cover = value        

    @property
    def asset_parameters_notional_currency(self) -> str:
        """Currency, ISO 4217 currency code or exchange quote modifier (e.g. GBP vs GBp)"""
        return self.__asset_parameters_notional_currency

    @asset_parameters_notional_currency.setter
    def asset_parameters_notional_currency(self, value: str):
        self._property_changed('asset_parameters_notional_currency')
        self.__asset_parameters_notional_currency = value        

    @property
    def buy18bps(self) -> float:
        """The amount GS would buy for 18 bps charge."""
        return self.__buy18bps

    @buy18bps.setter
    def buy18bps(self, value: float):
        self._property_changed('buy18bps')
        self.__buy18bps = value        

    @property
    def value_actual(self) -> str:
        """Latest released value."""
        return self.__value_actual

    @value_actual.setter
    def value_actual(self, value: str):
        self._property_changed('value_actual')
        self.__value_actual = value        

    @property
    def upi(self) -> str:
        """Unique product identifier for product."""
        return self.__upi

    @upi.setter
    def upi(self, value: str):
        self._property_changed('upi')
        self.__upi = value        

    @property
    def fixed_rate1(self) -> float:
        """If fixed rate leg, the fixed rate of leg 1."""
        return self.__fixed_rate1

    @fixed_rate1.setter
    def fixed_rate1(self, value: float):
        self._property_changed('fixed_rate1')
        self.__fixed_rate1 = value        

    @property
    def collateral_currency(self) -> str:
        """Currency, ISO 4217 currency code or exchange quote modifier (e.g. GBP vs GBp)"""
        return self.__collateral_currency

    @collateral_currency.setter
    def collateral_currency(self, value: str):
        self._property_changed('collateral_currency')
        self.__collateral_currency = value        

    @property
    def original_country(self) -> str:
        """Country in source dataset."""
        return self.__original_country

    @original_country.setter
    def original_country(self, value: str):
        self._property_changed('original_country')
        self.__original_country = value        

    @property
    def fixed_rate2(self) -> float:
        """If fixed rate leg, the fixed rate of leg 2."""
        return self.__fixed_rate2

    @fixed_rate2.setter
    def fixed_rate2(self, value: float):
        self._property_changed('fixed_rate2')
        self.__fixed_rate2 = value        

    @property
    def field(self) -> str:
        """The market data field (e.g. rate, price). This can be resolved into a dataset
           when combined with vendor and intraday=true/false."""
        return self.__field

    @field.setter
    def field(self, value: str):
        self._property_changed('field')
        self.__field = value        

    @property
    def geographic_focus(self) -> str:
        """Geographic region of focus."""
        return self.__geographic_focus

    @geographic_focus.setter
    def geographic_focus(self, value: str):
        self._property_changed('geographic_focus')
        self.__geographic_focus = value        

    @property
    def days_open_realized_bps(self) -> float:
        """Realised performance vs Day Open, in BPS."""
        return self.__days_open_realized_bps

    @days_open_realized_bps.setter
    def days_open_realized_bps(self, value: float):
        self._property_changed('days_open_realized_bps')
        self.__days_open_realized_bps = value        

    @property
    def fx_risk_premium_index(self) -> float:
        """FX risk premium index: percentage difference between average spot rate and OECD
           PPP exchange rate."""
        return self.__fx_risk_premium_index

    @fx_risk_premium_index.setter
    def fx_risk_premium_index(self, value: float):
        self._property_changed('fx_risk_premium_index')
        self.__fx_risk_premium_index = value        

    @property
    def skew(self) -> float:
        """Volatility skew."""
        return self.__skew

    @skew.setter
    def skew(self, value: float):
        self._property_changed('skew')
        self.__skew = value        

    @property
    def status(self) -> str:
        """Status of report run"""
        return self.__status

    @status.setter
    def status(self, value: str):
        self._property_changed('status')
        self.__status = value        

    @property
    def notional_currency(self) -> str:
        """An indication of the type of currency of the notional or principal amount."""
        return self.__notional_currency

    @notional_currency.setter
    def notional_currency(self, value: str):
        self._property_changed('notional_currency')
        self.__notional_currency = value        

    @property
    def sustain_emerging_markets(self) -> bool:
        """True if the stock is on the SUSTAIN Emerging Markets list as of the
           corresponding date. False if the stock is removed from the SUSTAIN
           Emerging Markets list on the corresponding date."""
        return self.__sustain_emerging_markets

    @sustain_emerging_markets.setter
    def sustain_emerging_markets(self, value: bool):
        self._property_changed('sustain_emerging_markets')
        self.__sustain_emerging_markets = value        

    @property
    def event_date_time(self) -> datetime.datetime:
        """The time of the event if the event has a specific time, using UTC convention, or
           the end time of the event if the event occurs during a time window
           (optional)."""
        return self.__event_date_time

    @event_date_time.setter
    def event_date_time(self, value: datetime.datetime):
        self._property_changed('event_date_time')
        self.__event_date_time = value        

    @property
    def leg1_designated_maturity(self) -> str:
        """Floating rate index designated maturity period of leg 1."""
        return self.__leg1_designated_maturity

    @leg1_designated_maturity.setter
    def leg1_designated_maturity(self, value: str):
        self._property_changed('leg1_designated_maturity')
        self.__leg1_designated_maturity = value        

    @property
    def total_price(self) -> float:
        """Net price of the asset."""
        return self.__total_price

    @total_price.setter
    def total_price(self, value: float):
        self._property_changed('total_price')
        self.__total_price = value        

    @property
    def on_behalf_of(self) -> str:
        """Marquee unique identifier"""
        return self.__on_behalf_of

    @on_behalf_of.setter
    def on_behalf_of(self, value: str):
        self._property_changed('on_behalf_of')
        self.__on_behalf_of = value        

    @property
    def test_type(self) -> str:
        """Semantic category that test belongs to e.g. Timeliness, Completeness etc."""
        return self.__test_type

    @test_type.setter
    def test_type(self, value: str):
        self._property_changed('test_type')
        self.__test_type = value        

    @property
    def accrued_interest_standard(self) -> float:
        """The accrued interest paid on the bond if it is settled two business days after
           the trade date."""
        return self.__accrued_interest_standard

    @accrued_interest_standard.setter
    def accrued_interest_standard(self, value: float):
        self._property_changed('accrued_interest_standard')
        self.__accrued_interest_standard = value        

    @property
    def future_month_z26(self) -> float:
        """Commods future month code."""
        return self.__future_month_z26

    @future_month_z26.setter
    def future_month_z26(self, value: float):
        self._property_changed('future_month_z26')
        self.__future_month_z26 = value        

    @property
    def future_month_z25(self) -> float:
        """Commods future month code."""
        return self.__future_month_z25

    @future_month_z25.setter
    def future_month_z25(self, value: float):
        self._property_changed('future_month_z25')
        self.__future_month_z25 = value        

    @property
    def ccg_code(self) -> str:
        """Derived CCG code based on location of the patient at the time of triage."""
        return self.__ccg_code

    @ccg_code.setter
    def ccg_code(self, value: str):
        self._property_changed('ccg_code')
        self.__ccg_code = value        

    @property
    def short_exposure(self) -> float:
        """Exposure of a given portfolio to securities which are short in direction. If you
           are $60 short and $40 long, shortExposure would be $60."""
        return self.__short_exposure

    @short_exposure.setter
    def short_exposure(self, value: float):
        self._property_changed('short_exposure')
        self.__short_exposure = value        

    @property
    def leg1_fixed_payment_currency(self) -> str:
        """If fixed payment leg, the unit of fixed payment."""
        return self.__leg1_fixed_payment_currency

    @leg1_fixed_payment_currency.setter
    def leg1_fixed_payment_currency(self, value: str):
        self._property_changed('leg1_fixed_payment_currency')
        self.__leg1_fixed_payment_currency = value        

    @property
    def map(self) -> float:
        """Macro-data Assessment Platform (MAP) surprise indices for economic indicators
           worldwide."""
        return self.__map

    @map.setter
    def map(self, value: float):
        self._property_changed('map')
        self.__map = value        

    @property
    def arrival_haircut_vwap(self) -> float:
        """Arrival Haircut VWAP."""
        return self.__arrival_haircut_vwap

    @arrival_haircut_vwap.setter
    def arrival_haircut_vwap(self, value: float):
        self._property_changed('arrival_haircut_vwap')
        self.__arrival_haircut_vwap = value        

    @property
    def execution_days(self) -> float:
        """Number of days to used to execute."""
        return self.__execution_days

    @execution_days.setter
    def execution_days(self, value: float):
        self._property_changed('execution_days')
        self.__execution_days = value        

    @property
    def recall_due_date(self) -> datetime.date:
        """Date in which the recall of securities in a stock loan recall activity must be
           complete."""
        return self.__recall_due_date

    @recall_due_date.setter
    def recall_due_date(self, value: datetime.date):
        self._property_changed('recall_due_date')
        self.__recall_due_date = value        

    @property
    def forward(self) -> float:
        """Forward value."""
        return self.__forward

    @forward.setter
    def forward(self, value: float):
        self._property_changed('forward')
        self.__forward = value        

    @property
    def strike(self) -> float:
        """Strike level relative to at the money in basis points."""
        return self.__strike

    @strike.setter
    def strike(self, value: float):
        self._property_changed('strike')
        self.__strike = value        

    @property
    def spread_limit(self) -> float:
        """Spread limit (in pips) for which order slices will be skipped."""
        return self.__spread_limit

    @spread_limit.setter
    def spread_limit(self, value: float):
        self._property_changed('spread_limit')
        self.__spread_limit = value        

    @property
    def sopr(self) -> float:
        """The ratio of the sum of spent value over the sum of creation value of all spent
           and created outputs for that interval."""
        return self.__sopr

    @sopr.setter
    def sopr(self, value: float):
        self._property_changed('sopr')
        self.__sopr = value        

    @property
    def other_payment_amount(self) -> float:
        """Payment amounts with corresponding payment types to accommodate requrements of
           transaction descriptions from different asset classes."""
        return self.__other_payment_amount

    @other_payment_amount.setter
    def other_payment_amount(self, value: float):
        self._property_changed('other_payment_amount')
        self.__other_payment_amount = value        

    @property
    def product_scope(self) -> str:
        """Asset Class(es) for which the restriction is required."""
        return self.__product_scope

    @product_scope.setter
    def product_scope(self, value: str):
        self._property_changed('product_scope')
        self.__product_scope = value        

    @property
    def redemption_period(self) -> str:
        """Redemption Period."""
        return self.__redemption_period

    @redemption_period.setter
    def redemption_period(self, value: str):
        self._property_changed('redemption_period')
        self.__redemption_period = value        

    @property
    def asset_parameters_issuer_type(self) -> str:
        """The type of the bond issuer."""
        return self.__asset_parameters_issuer_type

    @asset_parameters_issuer_type.setter
    def asset_parameters_issuer_type(self, value: str):
        self._property_changed('asset_parameters_issuer_type')
        self.__asset_parameters_issuer_type = value        

    @property
    def currency1(self) -> str:
        """An indication of the type of currency of the notional or principal amount."""
        return self.__currency1

    @currency1.setter
    def currency1(self, value: str):
        self._property_changed('currency1')
        self.__currency1 = value        

    @property
    def currency2(self) -> str:
        """Same as currency 1."""
        return self.__currency2

    @currency2.setter
    def currency2(self, value: str):
        self._property_changed('currency2')
        self.__currency2 = value        

    @property
    def previous_close_realized_bps(self) -> float:
        """Realised performance vs Previous Close, in bps."""
        return self.__previous_close_realized_bps

    @previous_close_realized_bps.setter
    def previous_close_realized_bps(self, value: float):
        self._property_changed('previous_close_realized_bps')
        self.__previous_close_realized_bps = value        

    @property
    def days_since_reported(self) -> float:
        """Days since last reported."""
        return self.__days_since_reported

    @days_since_reported.setter
    def days_since_reported(self, value: float):
        self._property_changed('days_since_reported')
        self.__days_since_reported = value        

    @property
    def event_status(self) -> str:
        """Included if there is additional information about an event, such as the event
           being cancelled."""
        return self.__event_status

    @event_status.setter
    def event_status(self, value: str):
        self._property_changed('event_status')
        self.__event_status = value        

    @property
    def vwap_in_limit(self) -> float:
        """VWAP In Limit benchmark price."""
        return self.__vwap_in_limit

    @vwap_in_limit.setter
    def vwap_in_limit(self, value: float):
        self._property_changed('vwap_in_limit')
        self.__vwap_in_limit = value        

    @property
    def fwd_duration(self) -> float:
        """Duration of the forward."""
        return self.__fwd_duration

    @fwd_duration.setter
    def fwd_duration(self, value: float):
        self._property_changed('fwd_duration')
        self.__fwd_duration = value        

    @property
    def return_(self) -> float:
        """Return of asset over a given period (e.g. close-to-close)."""
        return self.__return

    @return_.setter
    def return_(self, value: float):
        self._property_changed('return_')
        self.__return = value        

    @property
    def is_pair_basket(self) -> bool:
        """Whether or not it is a pair basket."""
        return self.__is_pair_basket

    @is_pair_basket.setter
    def is_pair_basket(self, value: bool):
        self._property_changed('is_pair_basket')
        self.__is_pair_basket = value        

    @property
    def notional_amount(self) -> float:
        """Only applicable on Commodity Index products."""
        return self.__notional_amount

    @notional_amount.setter
    def notional_amount(self, value: float):
        self._property_changed('notional_amount')
        self.__notional_amount = value        

    @property
    def option_premium_amount(self) -> float:
        """An indication of the market value of the option at the time of execution."""
        return self.__option_premium_amount

    @option_premium_amount.setter
    def option_premium_amount(self, value: float):
        self._property_changed('option_premium_amount')
        self.__option_premium_amount = value        

    @property
    def pay_or_receive(self) -> str:
        """Pay or receive fixed"""
        return self.__pay_or_receive

    @pay_or_receive.setter
    def pay_or_receive(self, value: str):
        self._property_changed('pay_or_receive')
        self.__pay_or_receive = value        

    @property
    def total_severe(self) -> float:
        """Total number of active cases with severe symptoms."""
        return self.__total_severe

    @total_severe.setter
    def total_severe(self, value: float):
        self._property_changed('total_severe')
        self.__total_severe = value        

    @property
    def unexecuted_notional_usd(self) -> float:
        """Notional that has not bee executed, in dollars."""
        return self.__unexecuted_notional_usd

    @unexecuted_notional_usd.setter
    def unexecuted_notional_usd(self, value: float):
        self._property_changed('unexecuted_notional_usd')
        self.__unexecuted_notional_usd = value        

    @property
    def expected_residual_percentage(self) -> float:
        """Percent of order that will be left as residual."""
        return self.__expected_residual_percentage

    @expected_residual_percentage.setter
    def expected_residual_percentage(self, value: float):
        self._property_changed('expected_residual_percentage')
        self.__expected_residual_percentage = value        

    @property
    def maturity_date(self) -> datetime.date:
        """The maturity, termination, or end date of the reportable SB swap transaction."""
        return self.__maturity_date

    @maturity_date.setter
    def maturity_date(self, value: datetime.date):
        self._property_changed('maturity_date')
        self.__maturity_date = value        

    @property
    def trace_adv_sell(self) -> float:
        """TRACE ADV for the sell side."""
        return self.__trace_adv_sell

    @trace_adv_sell.setter
    def trace_adv_sell(self, value: float):
        self._property_changed('trace_adv_sell')
        self.__trace_adv_sell = value        

    @property
    def event_name(self) -> str:
        """Event name."""
        return self.__event_name

    @event_name.setter
    def event_name(self, value: str):
        self._property_changed('event_name')
        self.__event_name = value        

    @property
    def address_line2(self) -> str:
        """Second line of the street address, typically reserved for apartment, suite or
           space number."""
        return self.__address_line2

    @address_line2.setter
    def address_line2(self, value: str):
        self._property_changed('address_line2')
        self.__address_line2 = value        

    @property
    def indication_of_other_price_affecting_term(self) -> str:
        """An indication that the publicly reportable SB swap transaction has one or more
           additional term(s) or provision(s), other than those listed in the
           required real-time data fields, that materially affect(s) the price
           of the swap transaction."""
        return self.__indication_of_other_price_affecting_term

    @indication_of_other_price_affecting_term.setter
    def indication_of_other_price_affecting_term(self, value: str):
        self._property_changed('indication_of_other_price_affecting_term')
        self.__indication_of_other_price_affecting_term = value        

    @property
    def unadjusted_bid(self) -> float:
        """Unadjusted bid level of an asset based on official exchange fixing or
           calculation agent marked level."""
        return self.__unadjusted_bid

    @unadjusted_bid.setter
    def unadjusted_bid(self, value: float):
        self._property_changed('unadjusted_bid')
        self.__unadjusted_bid = value        

    @property
    def backtest_type(self) -> str:
        """Backtest type differentiates the backtest type."""
        return self.__backtest_type

    @backtest_type.setter
    def backtest_type(self, value: str):
        self._property_changed('backtest_type')
        self.__backtest_type = value        

    @property
    def gsdeer(self) -> float:
        """Goldman Sachs Dynamic Equilibrium Exchange Rate."""
        return self.__gsdeer

    @gsdeer.setter
    def gsdeer(self, value: float):
        self._property_changed('gsdeer')
        self.__gsdeer = value        

    @property
    def asset_parameters_issuer(self) -> str:
        """The issuer of this bond."""
        return self.__asset_parameters_issuer

    @asset_parameters_issuer.setter
    def asset_parameters_issuer(self, value: str):
        self._property_changed('asset_parameters_issuer')
        self.__asset_parameters_issuer = value        

    @property
    def g_regional_percentile(self) -> float:
        """A percentile that captures a company's G ranking relative to its region."""
        return self.__g_regional_percentile

    @g_regional_percentile.setter
    def g_regional_percentile(self, value: float):
        self._property_changed('g_regional_percentile')
        self.__g_regional_percentile = value        

    @property
    def coverage_checked(self) -> float:
        """Number of entities checked in a run of the checker."""
        return self.__coverage_checked

    @coverage_checked.setter
    def coverage_checked(self, value: float):
        self._property_changed('coverage_checked')
        self.__coverage_checked = value        

    @property
    def ois_xccy_ex_spike(self) -> float:
        """Xccy OIS Spread rate excluding Xccy Spikes impacts."""
        return self.__ois_xccy_ex_spike

    @ois_xccy_ex_spike.setter
    def ois_xccy_ex_spike(self, value: float):
        self._property_changed('ois_xccy_ex_spike')
        self.__ois_xccy_ex_spike = value        

    @property
    def total_risk(self) -> float:
        """Total risk."""
        return self.__total_risk

    @total_risk.setter
    def total_risk(self, value: float):
        self._property_changed('total_risk')
        self.__total_risk = value        

    @property
    def mnav(self) -> float:
        """Net asset value, assets of a fund (ex dividend) divided by total number of
           shares."""
        return self.__mnav

    @mnav.setter
    def mnav(self, value: float):
        self._property_changed('mnav')
        self.__mnav = value        

    @property
    def market_volume(self) -> float:
        """Volume of the stock throughout the whole day across primaries and MTFs."""
        return self.__market_volume

    @market_volume.setter
    def market_volume(self, value: float):
        self._property_changed('market_volume')
        self.__market_volume = value        

    @property
    def swap_annuity(self) -> float:
        """Annuity for a benchmark tenor on a currency's fixed-floating swap curve."""
        return self.__swap_annuity

    @swap_annuity.setter
    def swap_annuity(self, value: float):
        self._property_changed('swap_annuity')
        self.__swap_annuity = value        

    @property
    def par_asset_swap_spread(self) -> float:
        """Spread between a Par Swap Rate and the yield of the bond."""
        return self.__par_asset_swap_spread

    @par_asset_swap_spread.setter
    def par_asset_swap_spread(self, value: float):
        self._property_changed('par_asset_swap_spread')
        self.__par_asset_swap_spread = value        

    @property
    def curr_yield7_day(self) -> float:
        """Average income return over previous 7 days reduced by any capital gains that may
           have been included in rate calculation, according to the current
           amount."""
        return self.__curr_yield7_day

    @curr_yield7_day.setter
    def curr_yield7_day(self, value: float):
        self._property_changed('curr_yield7_day')
        self.__curr_yield7_day = value        

    @property
    def pressure(self) -> float:
        """Average barometric pressure on a given day in inches of mercury."""
        return self.__pressure

    @pressure.setter
    def pressure(self, value: float):
        self._property_changed('pressure')
        self.__pressure = value        

    @property
    def short_description(self) -> str:
        """Short description of dataset."""
        return self.__short_description

    @short_description.setter
    def short_description(self, value: str):
        self._property_changed('short_description')
        self.__short_description = value        

    @property
    def future_month_z24(self) -> float:
        """Commods future month code."""
        return self.__future_month_z24

    @future_month_z24.setter
    def future_month_z24(self, value: float):
        self._property_changed('future_month_z24')
        self.__future_month_z24 = value        

    @property
    def feed(self) -> str:
        """Indicates the source feed of the data."""
        return self.__feed

    @feed.setter
    def feed(self, value: str):
        self._property_changed('feed')
        self.__feed = value        

    @property
    def future_month_z23(self) -> float:
        """Commods future month code."""
        return self.__future_month_z23

    @future_month_z23.setter
    def future_month_z23(self, value: float):
        self._property_changed('future_month_z23')
        self.__future_month_z23 = value        

    @property
    def mkt_point1(self) -> str:
        """The first dimension of Mkt Point, e.g. 3M, 11Y, DEC19."""
        return self.__mkt_point1

    @mkt_point1.setter
    def mkt_point1(self, value: str):
        self._property_changed('mkt_point1')
        self.__mkt_point1 = value        

    @property
    def future_month_z22(self) -> float:
        """Commods future month code."""
        return self.__future_month_z22

    @future_month_z22.setter
    def future_month_z22(self, value: float):
        self._property_changed('future_month_z22')
        self.__future_month_z22 = value        

    @property
    def future_month_z21(self) -> float:
        """Commods future month code."""
        return self.__future_month_z21

    @future_month_z21.setter
    def future_month_z21(self, value: float):
        self._property_changed('future_month_z21')
        self.__future_month_z21 = value        

    @property
    def future_month_z20(self) -> float:
        """Commods future month code."""
        return self.__future_month_z20

    @future_month_z20.setter
    def future_month_z20(self, value: float):
        self._property_changed('future_month_z20')
        self.__future_month_z20 = value        

    @property
    def asset_parameters_commodity_sector(self) -> str:
        """The sector of the commodity"""
        return self.__asset_parameters_commodity_sector

    @asset_parameters_commodity_sector.setter
    def asset_parameters_commodity_sector(self, value: str):
        self._property_changed('asset_parameters_commodity_sector')
        self.__asset_parameters_commodity_sector = value        

    @property
    def price_notation2(self) -> float:
        """The Basis points, Price, Yield, Spread, Coupon, etc., value depending on the
           type of SB swap, which is calculated at affirmation."""
        return self.__price_notation2

    @price_notation2.setter
    def price_notation2(self, value: float):
        self._property_changed('price_notation2')
        self.__price_notation2 = value        

    @property
    def market_buffer_threshold(self) -> float:
        """The required buffer between holdings and on loan quantity for a market."""
        return self.__market_buffer_threshold

    @market_buffer_threshold.setter
    def market_buffer_threshold(self, value: float):
        self._property_changed('market_buffer_threshold')
        self.__market_buffer_threshold = value        

    @property
    def price_notation3(self) -> float:
        """The Basis points, Price, Yield, Spread, Coupon, etc., value depending on the
           type of SB swap, which is calculated at affirmation."""
        return self.__price_notation3

    @price_notation3.setter
    def price_notation3(self, value: float):
        self._property_changed('price_notation3')
        self.__price_notation3 = value        

    @property
    def mkt_point3(self) -> str:
        """The third dimension of Mkt Point, e.g. 3M, 11Y, DEC19."""
        return self.__mkt_point3

    @mkt_point3.setter
    def mkt_point3(self, value: str):
        self._property_changed('mkt_point3')
        self.__mkt_point3 = value        

    @property
    def mkt_point2(self) -> str:
        """The second dimension of Mkt Point, e.g. 3M, 11Y, DEC19."""
        return self.__mkt_point2

    @mkt_point2.setter
    def mkt_point2(self, value: str):
        self._property_changed('mkt_point2')
        self.__mkt_point2 = value        

    @property
    def leg2_type(self) -> str:
        """Indication if leg 2 is fixed or floating or Physical."""
        return self.__leg2_type

    @leg2_type.setter
    def leg2_type(self, value: str):
        self._property_changed('leg2_type')
        self.__leg2_type = value        

    @property
    def mkt_point4(self) -> str:
        """The fourth dimension of Mkt Point, e.g. 3M, 11Y, DEC19."""
        return self.__mkt_point4

    @mkt_point4.setter
    def mkt_point4(self, value: str):
        self._property_changed('mkt_point4')
        self.__mkt_point4 = value        

    @property
    def degree_days_type(self) -> str:
        """The type of degree days required: Heating or Cooling etc."""
        return self.__degree_days_type

    @degree_days_type.setter
    def degree_days_type(self, value: str):
        self._property_changed('degree_days_type')
        self.__degree_days_type = value        

    @property
    def sentiment(self) -> float:
        """A measure of the overall sentiment of overnight news."""
        return self.__sentiment

    @sentiment.setter
    def sentiment(self, value: float):
        self._property_changed('sentiment')
        self.__sentiment = value        

    @property
    def investment_income(self) -> float:
        """The income earned by the reinvested collateral."""
        return self.__investment_income

    @investment_income.setter
    def investment_income(self, value: float):
        self._property_changed('investment_income')
        self.__investment_income = value        

    @property
    def group_type(self) -> str:
        """Type of the group."""
        return self.__group_type

    @group_type.setter
    def group_type(self, value: str):
        self._property_changed('group_type')
        self.__group_type = value        

    @property
    def forward_point_imm(self) -> float:
        """Immutable outright forward minus spot."""
        return self.__forward_point_imm

    @forward_point_imm.setter
    def forward_point_imm(self, value: float):
        self._property_changed('forward_point_imm')
        self.__forward_point_imm = value        

    @property
    def twap(self) -> float:
        """Time weighted average price."""
        return self.__twap

    @twap.setter
    def twap(self, value: float):
        self._property_changed('twap')
        self.__twap = value        

    @property
    def client_short_name(self) -> str:
        """The short name of a client."""
        return self.__client_short_name

    @client_short_name.setter
    def client_short_name(self, value: str):
        self._property_changed('client_short_name')
        self.__client_short_name = value        

    @property
    def group_category(self) -> str:
        """The type of group: region or sector."""
        return self.__group_category

    @group_category.setter
    def group_category(self, value: str):
        self._property_changed('group_category')
        self.__group_category = value        

    @property
    def bid_plus_ask(self) -> float:
        """Sum of bid & ask."""
        return self.__bid_plus_ask

    @bid_plus_ask.setter
    def bid_plus_ask(self, value: float):
        self._property_changed('bid_plus_ask')
        self.__bid_plus_ask = value        

    @property
    def foreign_ccy_rate(self) -> float:
        """The interest rate of the foreign currency of the associated FX contract."""
        return self.__foreign_ccy_rate

    @foreign_ccy_rate.setter
    def foreign_ccy_rate(self, value: float):
        self._property_changed('foreign_ccy_rate')
        self.__foreign_ccy_rate = value        

    @property
    def election_odds(self) -> float:
        """Odds of winning election."""
        return self.__election_odds

    @election_odds.setter
    def election_odds(self, value: float):
        self._property_changed('election_odds')
        self.__election_odds = value        

    @property
    def wind_direction_forecast(self) -> float:
        """The forecast wind direction of given units."""
        return self.__wind_direction_forecast

    @wind_direction_forecast.setter
    def wind_direction_forecast(self, value: float):
        self._property_changed('wind_direction_forecast')
        self.__wind_direction_forecast = value        

    @property
    def require_anon_client_name(self) -> bool:
        """Requires Anonymization of Client Name."""
        return self.__require_anon_client_name

    @require_anon_client_name.setter
    def require_anon_client_name(self, value: bool):
        self._property_changed('require_anon_client_name')
        self.__require_anon_client_name = value        

    @property
    def pricing_location(self) -> str:
        """Quill pricing location."""
        return self.__pricing_location

    @pricing_location.setter
    def pricing_location(self, value: str):
        self._property_changed('pricing_location')
        self.__pricing_location = value        

    @property
    def beta(self) -> float:
        """Beta."""
        return self.__beta

    @beta.setter
    def beta(self, value: float):
        self._property_changed('beta')
        self.__beta = value        

    @property
    def last_returns_end_date(self) -> datetime.date:
        """Hedge fund last returns before end date."""
        return self.__last_returns_end_date

    @last_returns_end_date.setter
    def last_returns_end_date(self, value: datetime.date):
        self._property_changed('last_returns_end_date')
        self.__last_returns_end_date = value        

    @property
    def upfront_payment_date(self) -> datetime.date:
        """Date of upront payment."""
        return self.__upfront_payment_date

    @upfront_payment_date.setter
    def upfront_payment_date(self, value: datetime.date):
        self._property_changed('upfront_payment_date')
        self.__upfront_payment_date = value        

    @property
    def sell1point5bps(self) -> float:
        """The amount GS would sell for 1.5 bps charge."""
        return self.__sell1point5bps

    @sell1point5bps.setter
    def sell1point5bps(self, value: float):
        self._property_changed('sell1point5bps')
        self.__sell1point5bps = value        

    @property
    def long_exposure(self) -> float:
        """Exposure of a given portfolio to securities which are long in direction. If you
           are $60 short and $40 long, longExposure would be $40."""
        return self.__long_exposure

    @long_exposure.setter
    def long_exposure(self, value: float):
        self._property_changed('long_exposure')
        self.__long_exposure = value        

    @property
    def sell4point5bps(self) -> float:
        """The amount GS would sell for 4.5 bps charge."""
        return self.__sell4point5bps

    @sell4point5bps.setter
    def sell4point5bps(self, value: float):
        self._property_changed('sell4point5bps')
        self.__sell4point5bps = value        

    @property
    def tcm_cost_participation_rate20_pct(self) -> float:
        """TCM cost with a 20 percent participation rate."""
        return self.__tcm_cost_participation_rate20_pct

    @tcm_cost_participation_rate20_pct.setter
    def tcm_cost_participation_rate20_pct(self, value: float):
        self._property_changed('tcm_cost_participation_rate20_pct')
        self.__tcm_cost_participation_rate20_pct = value        

    @property
    def venue_type(self) -> str:
        """The type of venue (Exchange, BD, Dark Pool)."""
        return self.__venue_type

    @venue_type.setter
    def venue_type(self, value: str):
        self._property_changed('venue_type')
        self.__venue_type = value        

    @property
    def current_activity_indicator(self) -> float:
        """Current Activity Indicator (CAI) and Current Activity Indicator Innovations
           (CAII) for each of the world's large economies and many smaller ones,
           as well as aggregate CAIs and CAIIs for regions."""
        return self.__current_activity_indicator

    @current_activity_indicator.setter
    def current_activity_indicator(self, value: float):
        self._property_changed('current_activity_indicator')
        self.__current_activity_indicator = value        

    @property
    def multi_asset_class_swap(self) -> str:
        """Indicates if the swap falls under multiple asset classes."""
        return self.__multi_asset_class_swap

    @multi_asset_class_swap.setter
    def multi_asset_class_swap(self, value: str):
        self._property_changed('multi_asset_class_swap')
        self.__multi_asset_class_swap = value        

    @property
    def delta_change_id(self) -> float:
        """PadMaster unique delta change identifier."""
        return self.__delta_change_id

    @delta_change_id.setter
    def delta_change_id(self, value: float):
        self._property_changed('delta_change_id')
        self.__delta_change_id = value        

    @property
    def implementation_id(self) -> str:
        """Marquee unique Implementation identifier."""
        return self.__implementation_id

    @implementation_id.setter
    def implementation_id(self, value: str):
        self._property_changed('implementation_id')
        self.__implementation_id = value        

    @property
    def leg1_fixed_payment(self) -> float:
        """If fixed payment leg, the fixed payment amount, which is price*number of
           contracts bought*contract unit."""
        return self.__leg1_fixed_payment

    @leg1_fixed_payment.setter
    def leg1_fixed_payment(self, value: float):
        self._property_changed('leg1_fixed_payment')
        self.__leg1_fixed_payment = value        

    @property
    def es_numeric_score(self) -> float:
        """A company's score for E&S subsector-relative numeric metrics."""
        return self.__es_numeric_score

    @es_numeric_score.setter
    def es_numeric_score(self, value: float):
        self._property_changed('es_numeric_score')
        self.__es_numeric_score = value        

    @property
    def in_benchmark(self) -> bool:
        """Whether or not the asset is in the benchmark."""
        return self.__in_benchmark

    @in_benchmark.setter
    def in_benchmark(self, value: bool):
        self._property_changed('in_benchmark')
        self.__in_benchmark = value        

    @property
    def action_sdr(self) -> str:
        """An indication that a publicly reportable securitybased (SB) swap transaction has
           been incorrectly or erroneously publicly disseminated and is canceled
           or corrected or a new transaction."""
        return self.__action_sdr

    @action_sdr.setter
    def action_sdr(self, value: str):
        self._property_changed('action_sdr')
        self.__action_sdr = value        

    @property
    def quantity_frequency(self) -> str:
        """The rate at which the quantity is quoted on the swap. e.g., hourly, daily,
           weekly, monthly."""
        return self.__quantity_frequency

    @quantity_frequency.setter
    def quantity_frequency(self, value: str):
        self._property_changed('quantity_frequency')
        self.__quantity_frequency = value        

    @property
    def count_ideas_qtd(self) -> float:
        """Ideas alive at a time Quarter to date."""
        return self.__count_ideas_qtd

    @count_ideas_qtd.setter
    def count_ideas_qtd(self, value: float):
        self._property_changed('count_ideas_qtd')
        self.__count_ideas_qtd = value        

    @property
    def knock_out_price(self) -> float:
        """Market level required for an order to knock out."""
        return self.__knock_out_price

    @knock_out_price.setter
    def knock_out_price(self, value: float):
        self._property_changed('knock_out_price')
        self.__knock_out_price = value        

    @property
    def spread_currency1(self) -> str:
        """The currency of the spread of leg 1."""
        return self.__spread_currency1

    @spread_currency1.setter
    def spread_currency1(self, value: str):
        self._property_changed('spread_currency1')
        self.__spread_currency1 = value        

    @property
    def spread_currency2(self) -> str:
        """The currency of the spread of leg 2."""
        return self.__spread_currency2

    @spread_currency2.setter
    def spread_currency2(self, value: str):
        self._property_changed('spread_currency2')
        self.__spread_currency2 = value        

    @property
    def current_supply(self) -> float:
        """The sum of all native units ever created and visible on the ledger (i.e.,
           issued) as of that interval. For account-based protocols, only
           accounts with positive balances are counted."""
        return self.__current_supply

    @current_supply.setter
    def current_supply(self, value: float):
        self._property_changed('current_supply')
        self.__current_supply = value        

    @property
    def ctd_asset_id(self) -> str:
        """Id of cheapest to deliver bond."""
        return self.__ctd_asset_id

    @ctd_asset_id.setter
    def ctd_asset_id(self, value: str):
        self._property_changed('ctd_asset_id')
        self.__ctd_asset_id = value        

    @property
    def buy10bps(self) -> float:
        """The amount GS would buy for 10 bps charge."""
        return self.__buy10bps

    @buy10bps.setter
    def buy10bps(self, value: float):
        self._property_changed('buy10bps')
        self.__buy10bps = value        

    @property
    def precipitation(self) -> float:
        """Amount of rainfall in inches."""
        return self.__precipitation

    @precipitation.setter
    def precipitation(self, value: float):
        self._property_changed('precipitation')
        self.__precipitation = value        

    @property
    def value_type(self) -> str:
        """Value type."""
        return self.__value_type

    @value_type.setter
    def value_type(self, value: str):
        self._property_changed('value_type')
        self.__value_type = value        

    @property
    def beta_adjusted_net_exposure(self) -> float:
        """Beta adjusted net exposure."""
        return self.__beta_adjusted_net_exposure

    @beta_adjusted_net_exposure.setter
    def beta_adjusted_net_exposure(self, value: float):
        self._property_changed('beta_adjusted_net_exposure')
        self.__beta_adjusted_net_exposure = value        

    @property
    def estimated_rod_volume(self) -> float:
        """Consolidated rest of day volume in continuous trading and closing auction."""
        return self.__estimated_rod_volume

    @estimated_rod_volume.setter
    def estimated_rod_volume(self, value: float):
        self._property_changed('estimated_rod_volume')
        self.__estimated_rod_volume = value        

    @property
    def sell14bps(self) -> float:
        """The amount GS would sell for 14 bps charge."""
        return self.__sell14bps

    @sell14bps.setter
    def sell14bps(self, value: float):
        self._property_changed('sell14bps')
        self.__sell14bps = value        

    @property
    def excess_return_price(self) -> float:
        """The excess return price of an instrument."""
        return self.__excess_return_price

    @excess_return_price.setter
    def excess_return_price(self, value: float):
        self._property_changed('excess_return_price')
        self.__excess_return_price = value        

    @property
    def fx_pnl(self) -> float:
        """Foreign Exchange Profit and Loss (PNL)."""
        return self.__fx_pnl

    @fx_pnl.setter
    def fx_pnl(self, value: float):
        self._property_changed('fx_pnl')
        self.__fx_pnl = value        

    @property
    def leg2_floating_rate_index(self) -> str:
        """If floating rate index leg, the index."""
        return self.__leg2_floating_rate_index

    @leg2_floating_rate_index.setter
    def leg2_floating_rate_index(self, value: str):
        self._property_changed('leg2_floating_rate_index')
        self.__leg2_floating_rate_index = value        

    @property
    def asset_classifications_gics_industry_group(self) -> str:
        """GICS Industry Group classification (level 2)."""
        return self.__asset_classifications_gics_industry_group

    @asset_classifications_gics_industry_group.setter
    def asset_classifications_gics_industry_group(self, value: str):
        self._property_changed('asset_classifications_gics_industry_group')
        self.__asset_classifications_gics_industry_group = value        

    @property
    def index_constituents(self) -> Tuple[Tuple[str, ...], ...]:
        """Containing the asset name and its weight in the index."""
        return self.__index_constituents

    @index_constituents.setter
    def index_constituents(self, value: Tuple[Tuple[str, ...], ...]):
        self._property_changed('index_constituents')
        self.__index_constituents = value        

    @property
    def lending_sec_id(self) -> str:
        """Securities lending identifiter for the security on loan."""
        return self.__lending_sec_id

    @lending_sec_id.setter
    def lending_sec_id(self, value: str):
        self._property_changed('lending_sec_id')
        self.__lending_sec_id = value        

    @property
    def dollar_duration(self) -> float:
        """Measure of a bond's price sensitivity to changes in interest rates."""
        return self.__dollar_duration

    @dollar_duration.setter
    def dollar_duration(self, value: float):
        self._property_changed('dollar_duration')
        self.__dollar_duration = value        

    @property
    def equity_theta(self) -> float:
        """Theta exposure to equity products."""
        return self.__equity_theta

    @equity_theta.setter
    def equity_theta(self, value: float):
        self._property_changed('equity_theta')
        self.__equity_theta = value        

    @property
    def dv01(self) -> float:
        """Measure of the dollar change in a bond's value to a change in the market
           interest rate."""
        return self.__dv01

    @dv01.setter
    def dv01(self, value: float):
        self._property_changed('dv01')
        self.__dv01 = value        

    @property
    def start_date(self) -> datetime.date:
        """Start date specific to an asset. For example start date for the swap."""
        return self.__start_date

    @start_date.setter
    def start_date(self, value: datetime.date):
        self._property_changed('start_date')
        self.__start_date = value        

    @property
    def mixed_swap(self) -> str:
        """Indicates if the swap falls under both the CFTC and SEC jurisdictions."""
        return self.__mixed_swap

    @mixed_swap.setter
    def mixed_swap(self, value: str):
        self._property_changed('mixed_swap')
        self.__mixed_swap = value        

    @property
    def swaption_premium(self) -> float:
        """Swaption premium."""
        return self.__swaption_premium

    @swaption_premium.setter
    def swaption_premium(self, value: float):
        self._property_changed('swaption_premium')
        self.__swaption_premium = value        

    @property
    def snowfall(self) -> float:
        """Amount of snowfall in inches."""
        return self.__snowfall

    @snowfall.setter
    def snowfall(self, value: float):
        self._property_changed('snowfall')
        self.__snowfall = value        

    @property
    def liquidity_bucket_buy(self) -> float:
        """Liquidity bucket for buying the bond."""
        return self.__liquidity_bucket_buy

    @liquidity_bucket_buy.setter
    def liquidity_bucket_buy(self, value: float):
        self._property_changed('liquidity_bucket_buy')
        self.__liquidity_bucket_buy = value        

    @property
    def day_open(self) -> float:
        """The day open."""
        return self.__day_open

    @day_open.setter
    def day_open(self, value: float):
        self._property_changed('day_open')
        self.__day_open = value        

    @property
    def mic(self) -> str:
        """Market identifier code."""
        return self.__mic

    @mic.setter
    def mic(self, value: str):
        self._property_changed('mic')
        self.__mic = value        

    @property
    def hurdle_type(self) -> str:
        """Hurdle Type."""
        return self.__hurdle_type

    @hurdle_type.setter
    def hurdle_type(self, value: str):
        self._property_changed('hurdle_type')
        self.__hurdle_type = value        

    @property
    def latitude(self) -> float:
        """Latitude."""
        return self.__latitude

    @latitude.setter
    def latitude(self, value: float):
        self._property_changed('latitude')
        self.__latitude = value        

    @property
    def mid(self) -> float:
        """Mid."""
        return self.__mid

    @mid.setter
    def mid(self, value: float):
        self._property_changed('mid')
        self.__mid = value        

    @property
    def implied_repo(self) -> float:
        """Rate of return that can be earned by simultaneously selling a bond futures and
           then buying that actual bond of equal amount in the cash market using
           borrowed money."""
        return self.__implied_repo

    @implied_repo.setter
    def implied_repo(self, value: float):
        self._property_changed('implied_repo')
        self.__implied_repo = value        

    @property
    def long(self) -> float:
        """Long exposure."""
        return self.__long

    @long.setter
    def long(self, value: float):
        self._property_changed('long')
        self.__long = value        

    @property
    def first_execution_time(self) -> datetime.datetime:
        """Arrival execution time."""
        return self.__first_execution_time

    @first_execution_time.setter
    def first_execution_time(self, value: datetime.datetime):
        self._property_changed('first_execution_time')
        self.__first_execution_time = value        

    @property
    def covered_bond(self) -> bool:
        """Whether the debt security is collateralized against a pool of assets that, in
           case of failure of the issuer, can cover claims at any point of time."""
        return self.__covered_bond

    @covered_bond.setter
    def covered_bond(self, value: bool):
        self._property_changed('covered_bond')
        self.__covered_bond = value        

    @property
    def region_code(self) -> str:
        """ISO 3166 Region Code. Generally a three digit code."""
        return self.__region_code

    @region_code.setter
    def region_code(self, value: str):
        self._property_changed('region_code')
        self.__region_code = value        

    @property
    def buy20cents(self) -> float:
        """The amount GS would buy for 20 cents charge."""
        return self.__buy20cents

    @buy20cents.setter
    def buy20cents(self, value: float):
        self._property_changed('buy20cents')
        self.__buy20cents = value        

    @property
    def long_weight(self) -> float:
        """Long weight of a position in a given portfolio. Equivalent to position long
           exposure / total long exposure. If you have a position with a
           longExposure of $20, and your portfolio longExposure is $100,
           longWeight would be 0.2 (20/100)."""
        return self.__long_weight

    @long_weight.setter
    def long_weight(self, value: float):
        self._property_changed('long_weight')
        self.__long_weight = value        

    @property
    def calculation_time(self) -> int:
        """Time taken to calculate risk metric (ms)."""
        return self.__calculation_time

    @calculation_time.setter
    def calculation_time(self, value: int):
        self._property_changed('calculation_time')
        self.__calculation_time = value        

    @property
    def liquidity_bucket_sell(self) -> float:
        """Liquidity bucket for selling the bond."""
        return self.__liquidity_bucket_sell

    @liquidity_bucket_sell.setter
    def liquidity_bucket_sell(self, value: float):
        self._property_changed('liquidity_bucket_sell')
        self.__liquidity_bucket_sell = value        

    @property
    def days_open_unrealized_cash(self) -> float:
        """Unrealised performance vs Day Open, in USD."""
        return self.__days_open_unrealized_cash

    @days_open_unrealized_cash.setter
    def days_open_unrealized_cash(self, value: float):
        self._property_changed('days_open_unrealized_cash')
        self.__days_open_unrealized_cash = value        

    @property
    def temperature(self) -> float:
        """Value of the temperature of given type."""
        return self.__temperature

    @temperature.setter
    def temperature(self, value: float):
        self._property_changed('temperature')
        self.__temperature = value        

    @property
    def average_realized_variance(self) -> float:
        """Average variance of an asset realized by observations of market prices."""
        return self.__average_realized_variance

    @average_realized_variance.setter
    def average_realized_variance(self, value: float):
        self._property_changed('average_realized_variance')
        self.__average_realized_variance = value        

    @property
    def leg1_commodity_underlyer_id(self) -> str:
        """The unique identifier of the asset, reference asset, or reference obligation for
           payments of a party's obligations under the SB swap transaction
           reference."""
        return self.__leg1_commodity_underlyer_id

    @leg1_commodity_underlyer_id.setter
    def leg1_commodity_underlyer_id(self, value: str):
        self._property_changed('leg1_commodity_underlyer_id')
        self.__leg1_commodity_underlyer_id = value        

    @property
    def rating_fitch(self) -> str:
        """Bond rating from Fitch."""
        return self.__rating_fitch

    @rating_fitch.setter
    def rating_fitch(self, value: str):
        self._property_changed('rating_fitch')
        self.__rating_fitch = value        

    @property
    def financial_returns_score(self) -> float:
        """Financial Returns percentile relative to Americas coverage universe (a higher
           score means stronger financial returns)."""
        return self.__financial_returns_score

    @financial_returns_score.setter
    def financial_returns_score(self, value: float):
        self._property_changed('financial_returns_score')
        self.__financial_returns_score = value        

    @property
    def year_or_quarter(self) -> str:
        """Year or quarter for which the forecast holds."""
        return self.__year_or_quarter

    @year_or_quarter.setter
    def year_or_quarter(self, value: str):
        self._property_changed('year_or_quarter')
        self.__year_or_quarter = value        

    @property
    def non_symbol_dimensions(self) -> Tuple[str, ...]:
        """Fields that are not nullable."""
        return self.__non_symbol_dimensions

    @non_symbol_dimensions.setter
    def non_symbol_dimensions(self, value: Tuple[str, ...]):
        self._property_changed('non_symbol_dimensions')
        self.__non_symbol_dimensions = value        

    @property
    def commodities_forecast(self) -> float:
        """Forecast value."""
        return self.__commodities_forecast

    @commodities_forecast.setter
    def commodities_forecast(self, value: float):
        self._property_changed('commodities_forecast')
        self.__commodities_forecast = value        

    @property
    def covid19_by_state(self) -> float:
        """Total number of people affected by covid19 for a given state country."""
        return self.__covid19_by_state

    @covid19_by_state.setter
    def covid19_by_state(self, value: float):
        self._property_changed('covid19_by_state')
        self.__covid19_by_state = value        

    @property
    def percentage_expected_residual(self) -> float:
        """Percentage expected residual quantity."""
        return self.__percentage_expected_residual

    @percentage_expected_residual.setter
    def percentage_expected_residual(self, value: float):
        self._property_changed('percentage_expected_residual')
        self.__percentage_expected_residual = value        

    @property
    def hospital_name(self) -> str:
        """Name of hospital, where hospital is defined as a healthcare institution
           providing at inpatient, therapeutic, and/or rehabilitation services
           under the supervision of physicians."""
        return self.__hospital_name

    @hospital_name.setter
    def hospital_name(self, value: str):
        self._property_changed('hospital_name')
        self.__hospital_name = value        

    @property
    def buy90cents(self) -> float:
        """The amount GS would buy for 90 cents charge."""
        return self.__buy90cents

    @buy90cents.setter
    def buy90cents(self, value: float):
        self._property_changed('buy90cents')
        self.__buy90cents = value        

    @property
    def period_type(self) -> str:
        """Period type."""
        return self.__period_type

    @period_type.setter
    def period_type(self, value: str):
        self._property_changed('period_type')
        self.__period_type = value        

    @property
    def asset_classifications_country_name(self) -> str:
        """Country name of asset."""
        return self.__asset_classifications_country_name

    @asset_classifications_country_name.setter
    def asset_classifications_country_name(self, value: str):
        self._property_changed('asset_classifications_country_name')
        self.__asset_classifications_country_name = value        

    @property
    def total_hospitalized(self) -> float:
        """Total number of hospitalized cases."""
        return self.__total_hospitalized

    @total_hospitalized.setter
    def total_hospitalized(self, value: float):
        self._property_changed('total_hospitalized')
        self.__total_hospitalized = value        

    @property
    def pegged_refill_interval(self) -> float:
        """Time interval (in seconds) between a tranche getting filled and the next tranche
           being shown on the order book."""
        return self.__pegged_refill_interval

    @pegged_refill_interval.setter
    def pegged_refill_interval(self, value: float):
        self._property_changed('pegged_refill_interval')
        self.__pegged_refill_interval = value        

    @property
    def fatalities_probable(self) -> float:
        """Total number of probable fatalities."""
        return self.__fatalities_probable

    @fatalities_probable.setter
    def fatalities_probable(self, value: float):
        self._property_changed('fatalities_probable')
        self.__fatalities_probable = value        

    @property
    def administrative_region(self) -> str:
        """Name of the county or province."""
        return self.__administrative_region

    @administrative_region.setter
    def administrative_region(self, value: str):
        self._property_changed('administrative_region')
        self.__administrative_region = value        

    @property
    def open(self) -> float:
        """Opening level of an asset based on official exchange fixing or calculation agent
           marked level."""
        return self.__open

    @open.setter
    def open(self, value: float):
        self._property_changed('open')
        self.__open = value        

    @property
    def cusip(self) -> str:
        """CUSIP - Committee on Uniform Securities Identification Procedures number
           (subject to licensing)."""
        return self.__cusip

    @cusip.setter
    def cusip(self, value: str):
        self._property_changed('cusip')
        self.__cusip = value        

    @property
    def total_confirmed_by_state(self) -> float:
        """Total number of confirmed cases by state."""
        return self.__total_confirmed_by_state

    @total_confirmed_by_state.setter
    def total_confirmed_by_state(self, value: float):
        self._property_changed('total_confirmed_by_state')
        self.__total_confirmed_by_state = value        

    @property
    def idea_activity_time(self) -> datetime.datetime:
        """The time the idea activity took place. If ideaStatus is open, the time reflects
           the Idea creation time. If ideaStatus is closed, the time reflects
           the time the idea was closed."""
        return self.__idea_activity_time

    @idea_activity_time.setter
    def idea_activity_time(self, value: datetime.datetime):
        self._property_changed('idea_activity_time')
        self.__idea_activity_time = value        

    @property
    def wind_attribute(self) -> str:
        """The attribute of wind required: direction or speed etc."""
        return self.__wind_attribute

    @wind_attribute.setter
    def wind_attribute(self, value: str):
        self._property_changed('wind_attribute')
        self.__wind_attribute = value        

    @property
    def spread_option_atm_fwd_rate(self) -> float:
        """Spread Option ATM forward rate."""
        return self.__spread_option_atm_fwd_rate

    @spread_option_atm_fwd_rate.setter
    def spread_option_atm_fwd_rate(self, value: float):
        self._property_changed('spread_option_atm_fwd_rate')
        self.__spread_option_atm_fwd_rate = value        

    @property
    def net_exposure(self) -> float:
        """The difference between long and short exposure in the portfolio. If you are $60
           short and $40 long, then the netExposure would be -$20 (-60+40)."""
        return self.__net_exposure

    @net_exposure.setter
    def net_exposure(self, value: float):
        self._property_changed('net_exposure')
        self.__net_exposure = value        

    @property
    def option_entitlement(self) -> str:
        """The entitlements to the holder of a single share option, comprised in an option
           contract or transaction supplement."""
        return self.__option_entitlement

    @option_entitlement.setter
    def option_entitlement(self, value: str):
        self._property_changed('option_entitlement')
        self.__option_entitlement = value        

    @property
    def is_legacy_pair_basket(self) -> bool:
        """Whether or not it is a legacy pair baskets which are not tradabale as don't have
           secdb asset."""
        return self.__is_legacy_pair_basket

    @is_legacy_pair_basket.setter
    def is_legacy_pair_basket(self, value: bool):
        self._property_changed('is_legacy_pair_basket')
        self.__is_legacy_pair_basket = value        

    @property
    def issuer_type(self) -> str:
        """The type of the bond issuer."""
        return self.__issuer_type

    @issuer_type.setter
    def issuer_type(self, value: str):
        self._property_changed('issuer_type')
        self.__issuer_type = value        

    @property
    def buy70cents(self) -> float:
        """The amount GS would buy for 70 cents charge."""
        return self.__buy70cents

    @buy70cents.setter
    def buy70cents(self, value: float):
        self._property_changed('buy70cents')
        self.__buy70cents = value        

    @property
    def strike_reference(self) -> str:
        """Reference for strike level (enum: spot, forward)."""
        return self.__strike_reference

    @strike_reference.setter
    def strike_reference(self, value: str):
        self._property_changed('strike_reference')
        self.__strike_reference = value        

    @property
    def asset_count(self) -> float:
        """Number of assets in a portfolio or index."""
        return self.__asset_count

    @asset_count.setter
    def asset_count(self, value: float):
        self._property_changed('asset_count')
        self.__asset_count = value        

    @property
    def is_order_in_limit(self) -> bool:
        """Is the order???s passive leg in limit."""
        return self.__is_order_in_limit

    @is_order_in_limit.setter
    def is_order_in_limit(self, value: bool):
        self._property_changed('is_order_in_limit')
        self.__is_order_in_limit = value        

    @property
    def fundamental_metric(self) -> float:
        """Fundamental metric value."""
        return self.__fundamental_metric

    @fundamental_metric.setter
    def fundamental_metric(self, value: float):
        self._property_changed('fundamental_metric')
        self.__fundamental_metric = value        

    @property
    def quote_status_id(self) -> str:
        """PadMaster unique quote status identifier."""
        return self.__quote_status_id

    @quote_status_id.setter
    def quote_status_id(self, value: str):
        self._property_changed('quote_status_id')
        self.__quote_status_id = value        

    @property
    def absolute_value(self) -> float:
        """The notional value of the asset."""
        return self.__absolute_value

    @absolute_value.setter
    def absolute_value(self, value: float):
        self._property_changed('absolute_value')
        self.__absolute_value = value        

    @property
    def closing_report(self) -> str:
        """Report that was published when the trade idea was closed."""
        return self.__closing_report

    @closing_report.setter
    def closing_report(self, value: str):
        self._property_changed('closing_report')
        self.__closing_report = value        

    @property
    def redemption_notice_period(self) -> Union[Op, float]:
        return self.__redemption_notice_period

    @redemption_notice_period.setter
    def redemption_notice_period(self, value: Union[Op, float]):
        self._property_changed('redemption_notice_period')
        self.__redemption_notice_period = value        

    @property
    def previous_total_confirmed(self) -> float:
        """The previous day's number of total confirmed cases."""
        return self.__previous_total_confirmed

    @previous_total_confirmed.setter
    def previous_total_confirmed(self, value: float):
        self._property_changed('previous_total_confirmed')
        self.__previous_total_confirmed = value        

    @property
    def long_tenor(self) -> str:
        """Tenor of instrument."""
        return self.__long_tenor

    @long_tenor.setter
    def long_tenor(self, value: str):
        self._property_changed('long_tenor')
        self.__long_tenor = value        

    @property
    def multiplier(self) -> float:
        """Underlying unit per asset multiplier."""
        return self.__multiplier

    @multiplier.setter
    def multiplier(self, value: float):
        self._property_changed('multiplier')
        self.__multiplier = value        

    @property
    def buy40cents(self) -> float:
        """The amount GS would buy for 40 cents charge."""
        return self.__buy40cents

    @buy40cents.setter
    def buy40cents(self, value: float):
        self._property_changed('buy40cents')
        self.__buy40cents = value        

    @property
    def asset_count_priced(self) -> float:
        """Number of assets in a portfolio which could be priced."""
        return self.__asset_count_priced

    @asset_count_priced.setter
    def asset_count_priced(self, value: float):
        self._property_changed('asset_count_priced')
        self.__asset_count_priced = value        

    @property
    def vote_direction(self) -> float:
        """Direction of vote."""
        return self.__vote_direction

    @vote_direction.setter
    def vote_direction(self, value: float):
        self._property_changed('vote_direction')
        self.__vote_direction = value        

    @property
    def implied_repo_rate(self) -> float:
        """Rate of return that can be earned by simultaneously selling a bond futures or
           forward contract, and then buying that actual bond of equal amount in
           the cash market using borrowed money."""
        return self.__implied_repo_rate

    @implied_repo_rate.setter
    def implied_repo_rate(self, value: float):
        self._property_changed('implied_repo_rate')
        self.__implied_repo_rate = value        

    @property
    def settlement_currency(self) -> str:
        """The settlement currency type for SB swap transactions in the FX asset class."""
        return self.__settlement_currency

    @settlement_currency.setter
    def settlement_currency(self, value: str):
        self._property_changed('settlement_currency')
        self.__settlement_currency = value        

    @property
    def wtd_degree_days_forecast(self) -> float:
        """The forecast for weighted degree days of diff types of given units."""
        return self.__wtd_degree_days_forecast

    @wtd_degree_days_forecast.setter
    def wtd_degree_days_forecast(self, value: float):
        self._property_changed('wtd_degree_days_forecast')
        self.__wtd_degree_days_forecast = value        

    @property
    def indication_of_collateralization(self) -> str:
        """If an SB swap is not cleared, an indication of whether a swap is
           Uncollateralized (UC), Partially Collateralized (PC), One-Way
           Collateralized (OC), or Fully Collateralized (FC)."""
        return self.__indication_of_collateralization

    @indication_of_collateralization.setter
    def indication_of_collateralization(self, value: str):
        self._property_changed('indication_of_collateralization')
        self.__indication_of_collateralization = value        

    @property
    def future_month_n26(self) -> float:
        """Commods future month code."""
        return self.__future_month_n26

    @future_month_n26.setter
    def future_month_n26(self, value: float):
        self._property_changed('future_month_n26')
        self.__future_month_n26 = value        

    @property
    def lending_partner_fee(self) -> float:
        """Fee earned by the Lending Partner in a securities lending agreement."""
        return self.__lending_partner_fee

    @lending_partner_fee.setter
    def lending_partner_fee(self, value: float):
        self._property_changed('lending_partner_fee')
        self.__lending_partner_fee = value        

    @property
    def future_month_n25(self) -> float:
        """Commods future month code."""
        return self.__future_month_n25

    @future_month_n25.setter
    def future_month_n25(self, value: float):
        self._property_changed('future_month_n25')
        self.__future_month_n25 = value        

    @property
    def future_month_n24(self) -> float:
        """Commods future month code."""
        return self.__future_month_n24

    @future_month_n24.setter
    def future_month_n24(self, value: float):
        self._property_changed('future_month_n24')
        self.__future_month_n24 = value        

    @property
    def primary_vwap_realized_bps(self) -> float:
        """Realised performance vs Primary VWAP, in bps."""
        return self.__primary_vwap_realized_bps

    @primary_vwap_realized_bps.setter
    def primary_vwap_realized_bps(self, value: float):
        self._property_changed('primary_vwap_realized_bps')
        self.__primary_vwap_realized_bps = value        

    @property
    def future_month_n23(self) -> float:
        """Commods future month code."""
        return self.__future_month_n23

    @future_month_n23.setter
    def future_month_n23(self, value: float):
        self._property_changed('future_month_n23')
        self.__future_month_n23 = value        

    @property
    def future_month_n22(self) -> float:
        """Commods future month code."""
        return self.__future_month_n22

    @future_month_n22.setter
    def future_month_n22(self, value: float):
        self._property_changed('future_month_n22')
        self.__future_month_n22 = value        

    @property
    def future_month_n21(self) -> float:
        """Commods future month code."""
        return self.__future_month_n21

    @future_month_n21.setter
    def future_month_n21(self, value: float):
        self._property_changed('future_month_n21')
        self.__future_month_n21 = value        

    @property
    def break_even_inflation(self) -> float:
        """Break even inflation."""
        return self.__break_even_inflation

    @break_even_inflation.setter
    def break_even_inflation(self, value: float):
        self._property_changed('break_even_inflation')
        self.__break_even_inflation = value        

    @property
    def pnl_ytd(self) -> float:
        """Total PnL Year to date."""
        return self.__pnl_ytd

    @pnl_ytd.setter
    def pnl_ytd(self, value: float):
        self._property_changed('pnl_ytd')
        self.__pnl_ytd = value        

    @property
    def leg1_return_type(self) -> str:
        """Indication if return of leg 1 is total."""
        return self.__leg1_return_type

    @leg1_return_type.setter
    def leg1_return_type(self, value: str):
        self._property_changed('leg1_return_type')
        self.__leg1_return_type = value        

    @property
    def tenor2(self) -> str:
        """Tenor of instrument."""
        return self.__tenor2

    @tenor2.setter
    def tenor2(self, value: str):
        self._property_changed('tenor2')
        self.__tenor2 = value        

    @property
    def reset_frequency(self) -> str:
        """An integer multiplier of a period describing how often the parties to an SB swap
           transaction shall evaluate and, when applicable, change the price
           used for the underlying assets of the swap transaction. Such reset
           frequency may be described as one letter preceded by an integer."""
        return self.__reset_frequency

    @reset_frequency.setter
    def reset_frequency(self, value: str):
        self._property_changed('reset_frequency')
        self.__reset_frequency = value        

    @property
    def asset_parameters_payer_frequency(self) -> str:
        """Tenor"""
        return self.__asset_parameters_payer_frequency

    @asset_parameters_payer_frequency.setter
    def asset_parameters_payer_frequency(self, value: str):
        self._property_changed('asset_parameters_payer_frequency')
        self.__asset_parameters_payer_frequency = value        

    @property
    def degree_days_forecast(self) -> float:
        """The forecast value for degree days."""
        return self.__degree_days_forecast

    @degree_days_forecast.setter
    def degree_days_forecast(self, value: float):
        self._property_changed('degree_days_forecast')
        self.__degree_days_forecast = value        

    @property
    def is_manually_silenced(self) -> str:
        """Indicates if an entity was silenced at time of check."""
        return self.__is_manually_silenced

    @is_manually_silenced.setter
    def is_manually_silenced(self, value: str):
        self._property_changed('is_manually_silenced')
        self.__is_manually_silenced = value        

    @property
    def buy3bps(self) -> float:
        """The amount GS would buy for 3 bps charge."""
        return self.__buy3bps

    @buy3bps.setter
    def buy3bps(self, value: float):
        self._property_changed('buy3bps')
        self.__buy3bps = value        

    @property
    def last_updated_by_id(self) -> str:
        """Unique identifier of user who last updated the object."""
        return self.__last_updated_by_id

    @last_updated_by_id.setter
    def last_updated_by_id(self, value: str):
        self._property_changed('last_updated_by_id')
        self.__last_updated_by_id = value        

    @property
    def legal_entity_acct(self) -> str:
        """Account assoicated with the entity that has legal rights to the fund."""
        return self.__legal_entity_acct

    @legal_entity_acct.setter
    def legal_entity_acct(self, value: str):
        self._property_changed('legal_entity_acct')
        self.__legal_entity_acct = value        

    @property
    def target_shareholder_meeting_date(self) -> str:
        """Target acquisition entity shareholder meeting date."""
        return self.__target_shareholder_meeting_date

    @target_shareholder_meeting_date.setter
    def target_shareholder_meeting_date(self, value: str):
        self._property_changed('target_shareholder_meeting_date')
        self.__target_shareholder_meeting_date = value        

    @property
    def pace_of_rollp0(self) -> float:
        """The 0th-percentile of the pace of roll compared to previous quarters (over the
           last 5 years) at the same point in time, i.e. cross-sectional."""
        return self.__pace_of_rollp0

    @pace_of_rollp0.setter
    def pace_of_rollp0(self, value: float):
        self._property_changed('pace_of_rollp0')
        self.__pace_of_rollp0 = value        

    @property
    def controversy_percentile(self) -> float:
        """A percentile that captures a company's controversy ranking."""
        return self.__controversy_percentile

    @controversy_percentile.setter
    def controversy_percentile(self, value: float):
        self._property_changed('controversy_percentile')
        self.__controversy_percentile = value        

    @property
    def leg1_notional_currency(self) -> str:
        """An indication of the type of currency of the notional or principal amount."""
        return self.__leg1_notional_currency

    @leg1_notional_currency.setter
    def leg1_notional_currency(self, value: str):
        self._property_changed('leg1_notional_currency')
        self.__leg1_notional_currency = value        

    @property
    def compliance_effective_time(self) -> datetime.datetime:
        """Time that the compliance status became effective."""
        return self.__compliance_effective_time

    @compliance_effective_time.setter
    def compliance_effective_time(self, value: datetime.datetime):
        self._property_changed('compliance_effective_time')
        self.__compliance_effective_time = value        

    @property
    def expiration_date(self) -> datetime.date:
        """The expiration date of the associated contract and the last date it trades."""
        return self.__expiration_date

    @expiration_date.setter
    def expiration_date(self, value: datetime.date):
        self._property_changed('expiration_date')
        self.__expiration_date = value        

    @property
    def floating_rate_day_count_fraction(self) -> str:
        """Day Count Fraction"""
        return self.__floating_rate_day_count_fraction

    @floating_rate_day_count_fraction.setter
    def floating_rate_day_count_fraction(self, value: str):
        self._property_changed('floating_rate_day_count_fraction')
        self.__floating_rate_day_count_fraction = value        

    @property
    def call_last_date(self) -> datetime.date:
        """ISO 8601-formatted date"""
        return self.__call_last_date

    @call_last_date.setter
    def call_last_date(self, value: datetime.date):
        self._property_changed('call_last_date')
        self.__call_last_date = value        

    @property
    def factor_return(self) -> float:
        """Factor return."""
        return self.__factor_return

    @factor_return.setter
    def factor_return(self, value: float):
        self._property_changed('factor_return')
        self.__factor_return = value        

    @property
    def passive_flow_ratio(self) -> float:
        """Ratio of signed passive dollar flow to market cap of global stocks, i.e.
           proportion of company's market cap that is part of passive fund flows
           observed weekly. Normalised between -3 (low level) and +3 (high
           level)."""
        return self.__passive_flow_ratio

    @passive_flow_ratio.setter
    def passive_flow_ratio(self, value: float):
        self._property_changed('passive_flow_ratio')
        self.__passive_flow_ratio = value        

    @property
    def composite5_day_adv(self) -> float:
        """Composite 5 day ADV."""
        return self.__composite5_day_adv

    @composite5_day_adv.setter
    def composite5_day_adv(self, value: float):
        self._property_changed('composite5_day_adv')
        self.__composite5_day_adv = value        

    @property
    def marginal_contribution_to_risk(self) -> float:
        """Marginal contribution of a given asset to portfolio variance, is dependent on
           covariance matrix."""
        return self.__marginal_contribution_to_risk

    @marginal_contribution_to_risk.setter
    def marginal_contribution_to_risk(self, value: float):
        self._property_changed('marginal_contribution_to_risk')
        self.__marginal_contribution_to_risk = value        

    @property
    def close_date(self) -> datetime.date:
        """Date the trade idea was closed."""
        return self.__close_date

    @close_date.setter
    def close_date(self, value: datetime.date):
        self._property_changed('close_date')
        self.__close_date = value        

    @property
    def temperature_hour_forecast(self) -> float:
        """The hour forecast of max/min temperature of a given day."""
        return self.__temperature_hour_forecast

    @temperature_hour_forecast.setter
    def temperature_hour_forecast(self, value: float):
        self._property_changed('temperature_hour_forecast')
        self.__temperature_hour_forecast = value        

    @property
    def new_ideas_wtd(self) -> float:
        """Ideas received by clients Week to date."""
        return self.__new_ideas_wtd

    @new_ideas_wtd.setter
    def new_ideas_wtd(self, value: float):
        self._property_changed('new_ideas_wtd')
        self.__new_ideas_wtd = value        

    @property
    def asset_class_sdr(self) -> str:
        """An indication of one of the broad categories. For our use case will typically be
           CO."""
        return self.__asset_class_sdr

    @asset_class_sdr.setter
    def asset_class_sdr(self, value: str):
        self._property_changed('asset_class_sdr')
        self.__asset_class_sdr = value        

    @property
    def yield_to_worst(self) -> float:
        """The return an investor realizes on a bond sold at the mid price at the worst
           call date."""
        return self.__yield_to_worst

    @yield_to_worst.setter
    def yield_to_worst(self, value: float):
        self._property_changed('yield_to_worst')
        self.__yield_to_worst = value        

    @property
    def closing_price(self) -> float:
        """Closing price."""
        return self.__closing_price

    @closing_price.setter
    def closing_price(self, value: float):
        self._property_changed('closing_price')
        self.__closing_price = value        

    @property
    def turnover_composite_adjusted(self) -> float:
        """Turnover composite adjusted for corporate actions."""
        return self.__turnover_composite_adjusted

    @turnover_composite_adjusted.setter
    def turnover_composite_adjusted(self, value: float):
        self._property_changed('turnover_composite_adjusted')
        self.__turnover_composite_adjusted = value        

    @property
    def comment(self) -> str:
        """The comment associated with the trade idea in URL encoded format."""
        return self.__comment

    @comment.setter
    def comment(self, value: str):
        self._property_changed('comment')
        self.__comment = value        

    @property
    def source_symbol(self) -> str:
        """Source symbol."""
        return self.__source_symbol

    @source_symbol.setter
    def source_symbol(self, value: str):
        self._property_changed('source_symbol')
        self.__source_symbol = value        

    @property
    def ask_unadjusted(self) -> float:
        """Unadjusted ask level of an asset based on official exchange fixing or
           calculation agent marked level."""
        return self.__ask_unadjusted

    @ask_unadjusted.setter
    def ask_unadjusted(self, value: float):
        self._property_changed('ask_unadjusted')
        self.__ask_unadjusted = value        

    @property
    def restrict_external_derived_data(self) -> bool:
        """Restricts Ability to Use Externally as Part of Derived Data."""
        return self.__restrict_external_derived_data

    @restrict_external_derived_data.setter
    def restrict_external_derived_data(self, value: bool):
        self._property_changed('restrict_external_derived_data')
        self.__restrict_external_derived_data = value        

    @property
    def ask_change(self) -> float:
        """Change in the ask price."""
        return self.__ask_change

    @ask_change.setter
    def ask_change(self, value: float):
        self._property_changed('ask_change')
        self.__ask_change = value        

    @property
    def count_ideas_mtd(self) -> float:
        """Ideas alive at a time Month to date."""
        return self.__count_ideas_mtd

    @count_ideas_mtd.setter
    def count_ideas_mtd(self, value: float):
        self._property_changed('count_ideas_mtd')
        self.__count_ideas_mtd = value        

    @property
    def end_date(self) -> datetime.date:
        """The maturity, termination, or end date of the reportable SB swap transaction."""
        return self.__end_date

    @end_date.setter
    def end_date(self, value: datetime.date):
        self._property_changed('end_date')
        self.__end_date = value        

    @property
    def sunshine(self) -> float:
        """The percent of sunshine for a given location."""
        return self.__sunshine

    @sunshine.setter
    def sunshine(self, value: float):
        self._property_changed('sunshine')
        self.__sunshine = value        

    @property
    def contract_type(self) -> str:
        """Contract type."""
        return self.__contract_type

    @contract_type.setter
    def contract_type(self, value: str):
        self._property_changed('contract_type')
        self.__contract_type = value        

    @property
    def momentum_type(self) -> str:
        """The mode/gear of an algo order running in range bound or directional mode."""
        return self.__momentum_type

    @momentum_type.setter
    def momentum_type(self, value: str):
        self._property_changed('momentum_type')
        self.__momentum_type = value        

    @property
    def specific_risk(self) -> float:
        """Specific Risk."""
        return self.__specific_risk

    @specific_risk.setter
    def specific_risk(self, value: float):
        self._property_changed('specific_risk')
        self.__specific_risk = value        

    @property
    def free_float_market_cap(self) -> float:
        """The sum USD value of the free float supply. Also referred to as free float
           network value or free float market capitalization."""
        return self.__free_float_market_cap

    @free_float_market_cap.setter
    def free_float_market_cap(self, value: float):
        self._property_changed('free_float_market_cap')
        self.__free_float_market_cap = value        

    @property
    def mdapi(self) -> str:
        """MDAPI Asset."""
        return self.__mdapi

    @mdapi.setter
    def mdapi(self, value: str):
        self._property_changed('mdapi')
        self.__mdapi = value        

    @property
    def payoff_qtd(self) -> float:
        """Total win divided by total loss Quarter to date."""
        return self.__payoff_qtd

    @payoff_qtd.setter
    def payoff_qtd(self, value: float):
        self._property_changed('payoff_qtd')
        self.__payoff_qtd = value        

    @property
    def loss(self) -> float:
        """Loss price component."""
        return self.__loss

    @loss.setter
    def loss(self, value: float):
        self._property_changed('loss')
        self.__loss = value        

    @property
    def midcurve_vol(self) -> float:
        """Historical implied normal volatility for a liquid point on midcurve vol surface."""
        return self.__midcurve_vol

    @midcurve_vol.setter
    def midcurve_vol(self, value: float):
        self._property_changed('midcurve_vol')
        self.__midcurve_vol = value        

    @property
    def sell6bps(self) -> float:
        """The amount GS would sell for 6 bps charge."""
        return self.__sell6bps

    @sell6bps.setter
    def sell6bps(self, value: float):
        self._property_changed('sell6bps')
        self.__sell6bps = value        

    @property
    def trading_cost_pnl(self) -> float:
        """Trading cost profit and loss (PNL)."""
        return self.__trading_cost_pnl

    @trading_cost_pnl.setter
    def trading_cost_pnl(self, value: float):
        self._property_changed('trading_cost_pnl')
        self.__trading_cost_pnl = value        

    @property
    def price_notation_type(self) -> str:
        """Basis points, Price, Yield, Spread, Coupon, etc., depending on the type of SB
           swap, which is calculated at affirmation."""
        return self.__price_notation_type

    @price_notation_type.setter
    def price_notation_type(self, value: str):
        self._property_changed('price_notation_type')
        self.__price_notation_type = value        

    @property
    def price(self) -> float:
        """Price of instrument."""
        return self.__price

    @price.setter
    def price(self, value: float):
        self._property_changed('price')
        self.__price = value        

    @property
    def payment_quantity(self) -> float:
        """Quantity in the payment currency."""
        return self.__payment_quantity

    @payment_quantity.setter
    def payment_quantity(self, value: float):
        self._property_changed('payment_quantity')
        self.__payment_quantity = value        

    @property
    def redemption_date(self) -> datetime.date:
        """ISO 8601-formatted date"""
        return self.__redemption_date

    @redemption_date.setter
    def redemption_date(self, value: datetime.date):
        self._property_changed('redemption_date')
        self.__redemption_date = value        

    @property
    def leg2_notional_currency(self) -> str:
        """An indication of the type of currency of the notional or principal amount."""
        return self.__leg2_notional_currency

    @leg2_notional_currency.setter
    def leg2_notional_currency(self, value: str):
        self._property_changed('leg2_notional_currency')
        self.__leg2_notional_currency = value        

    @property
    def sub_region(self) -> str:
        """Filter by any identifier of an asset like ticker, bloomberg id etc."""
        return self.__sub_region

    @sub_region.setter
    def sub_region(self, value: str):
        self._property_changed('sub_region')
        self.__sub_region = value        

    @property
    def product_id(self) -> str:
        """An indication of the product id."""
        return self.__product_id

    @product_id.setter
    def product_id(self, value: str):
        self._property_changed('product_id')
        self.__product_id = value        

    @property
    def benchmark(self) -> str:
        """Benchmark index of a contributor."""
        return self.__benchmark

    @benchmark.setter
    def benchmark(self, value: str):
        self._property_changed('benchmark')
        self.__benchmark = value        

    @property
    def nvt_adj(self) -> float:
        """TThe ratio of the network value (or market capitalization, current supply)
           divided by the adjusted transfer value. Also referred to as NVT."""
        return self.__nvt_adj

    @nvt_adj.setter
    def nvt_adj(self, value: float):
        self._property_changed('nvt_adj')
        self.__nvt_adj = value        

    @property
    def tcm_cost_participation_rate15_pct(self) -> float:
        """TCM cost with a 15 percent participation rate."""
        return self.__tcm_cost_participation_rate15_pct

    @tcm_cost_participation_rate15_pct.setter
    def tcm_cost_participation_rate15_pct(self, value: float):
        self._property_changed('tcm_cost_participation_rate15_pct')
        self.__tcm_cost_participation_rate15_pct = value        

    @property
    def fiscal_year(self) -> str:
        """The Calendar Year."""
        return self.__fiscal_year

    @fiscal_year.setter
    def fiscal_year(self, value: str):
        self._property_changed('fiscal_year')
        self.__fiscal_year = value        

    @property
    def recall_date(self) -> datetime.date:
        """The date at which the securities on loan were recalled."""
        return self.__recall_date

    @recall_date.setter
    def recall_date(self, value: datetime.date):
        self._property_changed('recall_date')
        self.__recall_date = value        

    @property
    def internal(self) -> bool:
        """Whether request came from internal or external."""
        return self.__internal

    @internal.setter
    def internal(self, value: bool):
        self._property_changed('internal')
        self.__internal = value        

    @property
    def gender(self) -> str:
        """Gender of the patient."""
        return self.__gender

    @gender.setter
    def gender(self, value: str):
        self._property_changed('gender')
        self.__gender = value        

    @property
    def asset_classifications_gics_industry(self) -> str:
        """GICS Industry classification (level 3)."""
        return self.__asset_classifications_gics_industry

    @asset_classifications_gics_industry.setter
    def asset_classifications_gics_industry(self, value: str):
        self._property_changed('asset_classifications_gics_industry')
        self.__asset_classifications_gics_industry = value        

    @property
    def adjusted_bid_price(self) -> float:
        """Latest Bid Price (price willing to buy) adjusted for corporate actions."""
        return self.__adjusted_bid_price

    @adjusted_bid_price.setter
    def adjusted_bid_price(self, value: float):
        self._property_changed('adjusted_bid_price')
        self.__adjusted_bid_price = value        

    @property
    def low_unadjusted(self) -> float:
        """Unadjusted low level of an asset based on official exchange fixing or
           calculation agent marked level."""
        return self.__low_unadjusted

    @low_unadjusted.setter
    def low_unadjusted(self, value: float):
        self._property_changed('low_unadjusted')
        self.__low_unadjusted = value        

    @property
    def macs_secondary_asset_class(self) -> str:
        """Indicates the secondary asset class the multi asset class swap falls under."""
        return self.__macs_secondary_asset_class

    @macs_secondary_asset_class.setter
    def macs_secondary_asset_class(self, value: str):
        self._property_changed('macs_secondary_asset_class')
        self.__macs_secondary_asset_class = value        

    @property
    def confirmed_per_million(self) -> float:
        """Total number of confirmed cases per population of one million."""
        return self.__confirmed_per_million

    @confirmed_per_million.setter
    def confirmed_per_million(self, value: float):
        self._property_changed('confirmed_per_million')
        self.__confirmed_per_million = value        

    @property
    def exchange_rate_basis(self) -> str:
        """Currency pair and order in which the exchange rate is denominated, expressed as
           unit currency/quoted currency."""
        return self.__exchange_rate_basis

    @exchange_rate_basis.setter
    def exchange_rate_basis(self, value: str):
        self._property_changed('exchange_rate_basis')
        self.__exchange_rate_basis = value        

    @property
    def data_source_id(self) -> str:
        """PadMaster unique data source identifier."""
        return self.__data_source_id

    @data_source_id.setter
    def data_source_id(self, value: str):
        self._property_changed('data_source_id')
        self.__data_source_id = value        

    @property
    def integrated_score(self) -> float:
        """Average of the Growth, Financial Returns and (1-Multiple) percentile (a higher
           score means more attractive)."""
        return self.__integrated_score

    @integrated_score.setter
    def integrated_score(self, value: float):
        self._property_changed('integrated_score')
        self.__integrated_score = value        

    @property
    def buy7bps(self) -> float:
        """The amount GS would buy for 7 bps charge."""
        return self.__buy7bps

    @buy7bps.setter
    def buy7bps(self, value: float):
        self._property_changed('buy7bps')
        self.__buy7bps = value        

    @property
    def arrival_mid_unrealized_cash(self) -> float:
        """Consolidated unrealised performance vs Arrival Mid, in USD."""
        return self.__arrival_mid_unrealized_cash

    @arrival_mid_unrealized_cash.setter
    def arrival_mid_unrealized_cash(self, value: float):
        self._property_changed('arrival_mid_unrealized_cash')
        self.__arrival_mid_unrealized_cash = value        

    @property
    def knock_in_price(self) -> float:
        """Market level required for an order to knock in."""
        return self.__knock_in_price

    @knock_in_price.setter
    def knock_in_price(self, value: float):
        self._property_changed('knock_in_price')
        self.__knock_in_price = value        

    @property
    def event(self) -> str:
        """An indication of whether an SB swap transaction is a post-execution event that
           affects the price of the swap transaction, e.g. terminations,
           assignments, novations, exchanges, transfers, amendments, conveyances
           or extinguishing of rights that change the price of the SB swap."""
        return self.__event

    @event.setter
    def event(self, value: str):
        self._property_changed('event')
        self.__event = value        

    @property
    def is_intraday_auction(self) -> bool:
        """Flag indicating whether the bucket is within the intraday auction or not."""
        return self.__is_intraday_auction

    @is_intraday_auction.setter
    def is_intraday_auction(self, value: bool):
        self._property_changed('is_intraday_auction')
        self.__is_intraday_auction = value        

    @property
    def location_name(self) -> str:
        """Name of geographical region (of varying granularity)."""
        return self.__location_name

    @location_name.setter
    def location_name(self, value: str):
        self._property_changed('location_name')
        self.__location_name = value        

    @property
    def coupon(self) -> float:
        """The fixed coupon for this bond."""
        return self.__coupon

    @coupon.setter
    def coupon(self, value: float):
        self._property_changed('coupon')
        self.__coupon = value        

    @property
    def percentage_auction_executed_quantity(self) -> float:
        """Percentage of total order filled at auction."""
        return self.__percentage_auction_executed_quantity

    @percentage_auction_executed_quantity.setter
    def percentage_auction_executed_quantity(self, value: float):
        self._property_changed('percentage_auction_executed_quantity')
        self.__percentage_auction_executed_quantity = value        

    @property
    def avg_yield7_day(self) -> float:
        """Only used for GS Money Market funds, assumes sum of the past 7 days, divided by
           7, and expressed as a percent."""
        return self.__avg_yield7_day

    @avg_yield7_day.setter
    def avg_yield7_day(self, value: float):
        self._property_changed('avg_yield7_day')
        self.__avg_yield7_day = value        

    @property
    def reference_rate_eur(self) -> float:
        """The price of an asset quoted in Euros using a framework to select high quality
           constituent markets and a methodology that is resistant manipulation."""
        return self.__reference_rate_eur

    @reference_rate_eur.setter
    def reference_rate_eur(self, value: float):
        self._property_changed('reference_rate_eur')
        self.__reference_rate_eur = value        

    @property
    def original_dissemination_id(self) -> str:
        """On cancellations and corrections, this ID will hold the Dissemination ID of the
           originally published real-time message."""
        return self.__original_dissemination_id

    @original_dissemination_id.setter
    def original_dissemination_id(self, value: str):
        self._property_changed('original_dissemination_id')
        self.__original_dissemination_id = value        

    @property
    def total_on_vent(self) -> float:
        """Total number of patients on ventilator for COVID."""
        return self.__total_on_vent

    @total_on_vent.setter
    def total_on_vent(self, value: float):
        self._property_changed('total_on_vent')
        self.__total_on_vent = value        

    @property
    def twap_unrealized_cash(self) -> float:
        """Consolidated unrealised performance vs TWAP In Limit, in USD."""
        return self.__twap_unrealized_cash

    @twap_unrealized_cash.setter
    def twap_unrealized_cash(self, value: float):
        self._property_changed('twap_unrealized_cash')
        self.__twap_unrealized_cash = value        

    @property
    def sts_credit_market(self) -> str:
        """Credit risk market."""
        return self.__sts_credit_market

    @sts_credit_market.setter
    def sts_credit_market(self, value: str):
        self._property_changed('sts_credit_market')
        self.__sts_credit_market = value        

    @property
    def ons_code(self) -> str:
        """ONS Region code in the UK."""
        return self.__ons_code

    @ons_code.setter
    def ons_code(self, value: str):
        self._property_changed('ons_code')
        self.__ons_code = value        

    @property
    def passive_touch_fills_percentage(self) -> float:
        """Percent of total order filled at passive touch."""
        return self.__passive_touch_fills_percentage

    @passive_touch_fills_percentage.setter
    def passive_touch_fills_percentage(self, value: float):
        self._property_changed('passive_touch_fills_percentage')
        self.__passive_touch_fills_percentage = value        

    @property
    def seniority(self) -> str:
        """The seniority of the bond."""
        return self.__seniority

    @seniority.setter
    def seniority(self, value: str):
        self._property_changed('seniority')
        self.__seniority = value        

    @property
    def leg1_index(self) -> str:
        """If floating index leg, the index."""
        return self.__leg1_index

    @leg1_index.setter
    def leg1_index(self, value: str):
        self._property_changed('leg1_index')
        self.__leg1_index = value        

    @property
    def high_unadjusted(self) -> float:
        """Unadjusted high level of an asset based on official exchange fixing or
           calculation agent marked level."""
        return self.__high_unadjusted

    @high_unadjusted.setter
    def high_unadjusted(self, value: float):
        self._property_changed('high_unadjusted')
        self.__high_unadjusted = value        

    @property
    def submission_event(self) -> str:
        """Describes the status of the submission."""
        return self.__submission_event

    @submission_event.setter
    def submission_event(self, value: str):
        self._property_changed('submission_event')
        self.__submission_event = value        

    @property
    def tv_product_mnemonic(self) -> str:
        """Unique by Trade Vault Product based on Product Taxonomy."""
        return self.__tv_product_mnemonic

    @tv_product_mnemonic.setter
    def tv_product_mnemonic(self, value: str):
        self._property_changed('tv_product_mnemonic')
        self.__tv_product_mnemonic = value        

    @property
    def avg_trade_rate_label(self):
        return self.__avg_trade_rate_label

    @avg_trade_rate_label.setter
    def avg_trade_rate_label(self, value):
        self._property_changed('avg_trade_rate_label')
        self.__avg_trade_rate_label = value        

    @property
    def last_activity_date(self) -> datetime.date:
        """Last date an idea was entered in Alpha Capture."""
        return self.__last_activity_date

    @last_activity_date.setter
    def last_activity_date(self, value: datetime.date):
        self._property_changed('last_activity_date')
        self.__last_activity_date = value        

    @property
    def dissemination_time(self) -> datetime.datetime:
        """Time of dissemination."""
        return self.__dissemination_time

    @dissemination_time.setter
    def dissemination_time(self, value: datetime.datetime):
        self._property_changed('dissemination_time')
        self.__dissemination_time = value        

    @property
    def price_to_cash(self) -> float:
        """Price to cash."""
        return self.__price_to_cash

    @price_to_cash.setter
    def price_to_cash(self, value: float):
        self._property_changed('price_to_cash')
        self.__price_to_cash = value        

    @property
    def buy10cents(self) -> float:
        """The amount GS would buy for 10 cents charge."""
        return self.__buy10cents

    @buy10cents.setter
    def buy10cents(self, value: float):
        self._property_changed('buy10cents')
        self.__buy10cents = value        

    @property
    def realized_market_cap_ratio(self) -> float:
        """The ratio of the sum USD value of the current supply to the sum realized USD
           value of the current supply."""
        return self.__realized_market_cap_ratio

    @realized_market_cap_ratio.setter
    def realized_market_cap_ratio(self, value: float):
        self._property_changed('realized_market_cap_ratio')
        self.__realized_market_cap_ratio = value        

    @property
    def nav_spread(self) -> float:
        """Net asset value spread. Quoted (running) spread (mid) of the underlying basket
           of single name CDS. (Theoretical Index value). In basis points."""
        return self.__nav_spread

    @nav_spread.setter
    def nav_spread(self, value: float):
        self._property_changed('nav_spread')
        self.__nav_spread = value        

    @property
    def venue_mic(self) -> str:
        """MIC code of the venue."""
        return self.__venue_mic

    @venue_mic.setter
    def venue_mic(self, value: str):
        self._property_changed('venue_mic')
        self.__venue_mic = value        

    @property
    def dollar_total_return(self) -> float:
        """The dollar total return of an instrument."""
        return self.__dollar_total_return

    @dollar_total_return.setter
    def dollar_total_return(self, value: float):
        self._property_changed('dollar_total_return')
        self.__dollar_total_return = value        

    @property
    def block_unit(self) -> str:
        """Unit of measure used for Block trades."""
        return self.__block_unit

    @block_unit.setter
    def block_unit(self, value: str):
        self._property_changed('block_unit')
        self.__block_unit = value        

    @property
    def mid_spread(self) -> float:
        """Spread between the yields of a debt security and its benchmark when both are
           purchased at mid price."""
        return self.__mid_spread

    @mid_spread.setter
    def mid_spread(self, value: float):
        self._property_changed('mid_spread')
        self.__mid_spread = value        

    @property
    def istat_province_code(self) -> float:
        """Italian province code (ISTAT 2019)."""
        return self.__istat_province_code

    @istat_province_code.setter
    def istat_province_code(self, value: float):
        self._property_changed('istat_province_code')
        self.__istat_province_code = value        

    @property
    def total_recovered_by_state(self) -> float:
        """Total number of recovered cases by state."""
        return self.__total_recovered_by_state

    @total_recovered_by_state.setter
    def total_recovered_by_state(self, value: float):
        self._property_changed('total_recovered_by_state')
        self.__total_recovered_by_state = value        

    @property
    def repurchase_rate(self) -> float:
        """Repurchase Rate."""
        return self.__repurchase_rate

    @repurchase_rate.setter
    def repurchase_rate(self, value: float):
        self._property_changed('repurchase_rate')
        self.__repurchase_rate = value        

    @property
    def data_source(self) -> str:
        """The source of data from the feeds."""
        return self.__data_source

    @data_source.setter
    def data_source(self, value: str):
        self._property_changed('data_source')
        self.__data_source = value        

    @property
    def total_being_tested(self) -> float:
        """Total number of cases waiting for test results."""
        return self.__total_being_tested

    @total_being_tested.setter
    def total_being_tested(self, value: float):
        self._property_changed('total_being_tested')
        self.__total_being_tested = value        

    @property
    def cleared_or_bilateral(self) -> str:
        """An indication of whether or not an SB swap transaction is going to be cleared by
           a derivatives clearing organization."""
        return self.__cleared_or_bilateral

    @cleared_or_bilateral.setter
    def cleared_or_bilateral(self, value: str):
        self._property_changed('cleared_or_bilateral')
        self.__cleared_or_bilateral = value        

    @property
    def metric_name(self) -> str:
        """Name of the metric."""
        return self.__metric_name

    @metric_name.setter
    def metric_name(self, value: str):
        self._property_changed('metric_name')
        self.__metric_name = value        

    @property
    def ask_gspread(self) -> float:
        """Ask G spread."""
        return self.__ask_gspread

    @ask_gspread.setter
    def ask_gspread(self, value: float):
        self._property_changed('ask_gspread')
        self.__ask_gspread = value        

    @property
    def forecast_hour(self) -> float:
        """The hour forecast for maximum or minumum temperature of given location."""
        return self.__forecast_hour

    @forecast_hour.setter
    def forecast_hour(self, value: float):
        self._property_changed('forecast_hour')
        self.__forecast_hour = value        

    @property
    def leg2_payment_type(self) -> str:
        """Type of payment stream on leg 2."""
        return self.__leg2_payment_type

    @leg2_payment_type.setter
    def leg2_payment_type(self, value: str):
        self._property_changed('leg2_payment_type')
        self.__leg2_payment_type = value        

    @property
    def cal_spread_mis_pricing(self) -> float:
        """Futures implied funding rate relative to interest rate benchmark (usually Libor-
           based). Represents dividend-adjusted rate at which investor is
           borrowing (lending) when long (short) future."""
        return self.__cal_spread_mis_pricing

    @cal_spread_mis_pricing.setter
    def cal_spread_mis_pricing(self, value: float):
        self._property_changed('cal_spread_mis_pricing')
        self.__cal_spread_mis_pricing = value        

    @property
    def total_tested_negative(self) -> float:
        """Total number of test cases that are negative."""
        return self.__total_tested_negative

    @total_tested_negative.setter
    def total_tested_negative(self, value: float):
        self._property_changed('total_tested_negative')
        self.__total_tested_negative = value        

    @property
    def rate366(self) -> float:
        """Rate with interest calculated according to the number of days in a leap year,
           366."""
        return self.__rate366

    @rate366.setter
    def rate366(self, value: float):
        self._property_changed('rate366')
        self.__rate366 = value        

    @property
    def platform(self) -> str:
        """Originating platform."""
        return self.__platform

    @platform.setter
    def platform(self, value: str):
        self._property_changed('platform')
        self.__platform = value        

    @property
    def rate365(self) -> float:
        """Rate with interest calculated according to a normal number of days in the total
           year, 365."""
        return self.__rate365

    @rate365.setter
    def rate365(self, value: float):
        self._property_changed('rate365')
        self.__rate365 = value        

    @property
    def fixed_rate_frequency(self) -> str:
        """Tenor"""
        return self.__fixed_rate_frequency

    @fixed_rate_frequency.setter
    def fixed_rate_frequency(self, value: str):
        self._property_changed('fixed_rate_frequency')
        self.__fixed_rate_frequency = value        

    @property
    def rate360(self) -> float:
        """Rate with interest calculated according to the discount method, using the number
           of days used by banks, 360."""
        return self.__rate360

    @rate360.setter
    def rate360(self, value: float):
        self._property_changed('rate360')
        self.__rate360 = value        

    @property
    def notional_quantity2(self) -> float:
        """For leg 2 of the transaction, where applicable, for swap transactions negotiated
           in non-monetary amounts with fixed notional quantity for each
           schedule period."""
        return self.__notional_quantity2

    @notional_quantity2.setter
    def notional_quantity2(self, value: float):
        self._property_changed('notional_quantity2')
        self.__notional_quantity2 = value        

    @property
    def notional_quantity1(self) -> float:
        """For leg 1 of the transaction, where applicable, for swap transactions negotiated
           in non-monetary amounts with fixed notional quantity for each
           schedule period."""
        return self.__notional_quantity1

    @notional_quantity1.setter
    def notional_quantity1(self, value: float):
        self._property_changed('notional_quantity1')
        self.__notional_quantity1 = value        

    @property
    def is_continuous(self) -> bool:
        """Flag indicating whether the bucket is within continuous or not."""
        return self.__is_continuous

    @is_continuous.setter
    def is_continuous(self, value: bool):
        self._property_changed('is_continuous')
        self.__is_continuous = value        

    @property
    def value(self) -> float:
        """The given value."""
        return self.__value

    @value.setter
    def value(self, value: float):
        self._property_changed('value')
        self.__value = value        

    @property
    def payer_designated_maturity(self) -> str:
        """Tenor"""
        return self.__payer_designated_maturity

    @payer_designated_maturity.setter
    def payer_designated_maturity(self, value: str):
        self._property_changed('payer_designated_maturity')
        self.__payer_designated_maturity = value        

    @property
    def product_type(self) -> str:
        """Product type of basket"""
        return self.__product_type

    @product_type.setter
    def product_type(self, value: str):
        self._property_changed('product_type')
        self.__product_type = value        

    @property
    def mdv22_day(self) -> float:
        """Twenty two day median of shares traded per day."""
        return self.__mdv22_day

    @mdv22_day.setter
    def mdv22_day(self, value: float):
        self._property_changed('mdv22_day')
        self.__mdv22_day = value        

    @property
    def nvt_adj_ff90(self) -> float:
        """The ratio of the free float network value (or market capitalization, free float)
           to the 90-day moving average of the adjusted transfer value. Also
           referred to as FFNVT."""
        return self.__nvt_adj_ff90

    @nvt_adj_ff90.setter
    def nvt_adj_ff90(self, value: float):
        self._property_changed('nvt_adj_ff90')
        self.__nvt_adj_ff90 = value        

    @property
    def twap_realized_bps(self) -> float:
        """Consolidated realised performance vs TWAP In Limit, in bps."""
        return self.__twap_realized_bps

    @twap_realized_bps.setter
    def twap_realized_bps(self, value: float):
        self._property_changed('twap_realized_bps')
        self.__twap_realized_bps = value        

    @property
    def test_measure_label(self) -> str:
        """Semantic label for the test measure."""
        return self.__test_measure_label

    @test_measure_label.setter
    def test_measure_label(self, value: str):
        self._property_changed('test_measure_label')
        self.__test_measure_label = value        

    @property
    def quantity(self) -> float:
        """Number of units of a given asset held within a portfolio."""
        return self.__quantity

    @quantity.setter
    def quantity(self, value: float):
        self._property_changed('quantity')
        self.__quantity = value        

    @property
    def report_id(self) -> str:
        """Report Identifier."""
        return self.__report_id

    @report_id.setter
    def report_id(self, value: str):
        self._property_changed('report_id')
        self.__report_id = value        

    @property
    def index_weight(self) -> float:
        """Weight of MSCI World positions in the region or sector (%)."""
        return self.__index_weight

    @index_weight.setter
    def index_weight(self, value: float):
        self._property_changed('index_weight')
        self.__index_weight = value        

    @property
    def macs_primary_asset_class(self) -> str:
        """Indicates the primary asset class the multi asset class swap falls under."""
        return self.__macs_primary_asset_class

    @macs_primary_asset_class.setter
    def macs_primary_asset_class(self, value: str):
        self._property_changed('macs_primary_asset_class')
        self.__macs_primary_asset_class = value        

    @property
    def trader(self) -> str:
        """Trader name."""
        return self.__trader

    @trader.setter
    def trader(self, value: str):
        self._property_changed('trader')
        self.__trader = value        

    @property
    def leg2_price_type(self) -> str:
        """Price denomination and unit of leg 2."""
        return self.__leg2_price_type

    @leg2_price_type.setter
    def leg2_price_type(self, value: str):
        self._property_changed('leg2_price_type')
        self.__leg2_price_type = value        

    @property
    def floating_rate_reset_frequency_period_multiplier2(self) -> float:
        """For leg 2 of the transaction, where applicable, number of time units that
           determines the frequency at which periodic payment dates for reset
           occur."""
        return self.__floating_rate_reset_frequency_period_multiplier2

    @floating_rate_reset_frequency_period_multiplier2.setter
    def floating_rate_reset_frequency_period_multiplier2(self, value: float):
        self._property_changed('floating_rate_reset_frequency_period_multiplier2')
        self.__floating_rate_reset_frequency_period_multiplier2 = value        

    @property
    def total_active(self) -> float:
        """Total number of confirmed cases minus recovered and fatalities."""
        return self.__total_active

    @total_active.setter
    def total_active(self, value: float):
        self._property_changed('total_active')
        self.__total_active = value        

    @property
    def floating_rate_reset_frequency_period_multiplier1(self) -> float:
        """For leg 1 of the transaction, where applicable, number of time units that
           determines the frequency at which periodic payment dates for reset
           occur."""
        return self.__floating_rate_reset_frequency_period_multiplier1

    @floating_rate_reset_frequency_period_multiplier1.setter
    def floating_rate_reset_frequency_period_multiplier1(self, value: float):
        self._property_changed('floating_rate_reset_frequency_period_multiplier1')
        self.__floating_rate_reset_frequency_period_multiplier1 = value        

    @property
    def gsid2(self) -> str:
        """GSID identifier for datasets which have two gsids in the measures."""
        return self.__gsid2

    @gsid2.setter
    def gsid2(self, value: str):
        self._property_changed('gsid2')
        self.__gsid2 = value        

    @property
    def matched_maturity_ois_swap_spread(self) -> float:
        """Spread between a Matched Maturity OIS Swap Rate and the yield of the bond."""
        return self.__matched_maturity_ois_swap_spread

    @matched_maturity_ois_swap_spread.setter
    def matched_maturity_ois_swap_spread(self, value: float):
        self._property_changed('matched_maturity_ois_swap_spread')
        self.__matched_maturity_ois_swap_spread = value        

    @property
    def valuation_date(self) -> str:
        """Specific to rates, the date a valuation is recorded."""
        return self.__valuation_date

    @valuation_date.setter
    def valuation_date(self, value: str):
        self._property_changed('valuation_date')
        self.__valuation_date = value        

    @property
    def restrict_gs_federation(self) -> bool:
        """Restricts GS Federation Visibility."""
        return self.__restrict_gs_federation

    @restrict_gs_federation.setter
    def restrict_gs_federation(self, value: bool):
        self._property_changed('restrict_gs_federation')
        self.__restrict_gs_federation = value        

    @property
    def position_source(self) -> str:
        """Specifies position data location for the portfolio"""
        return self.__position_source

    @position_source.setter
    def position_source(self, value: str):
        self._property_changed('position_source')
        self.__position_source = value        

    @property
    def tcm_cost_horizon6_hour(self) -> float:
        """TCM cost with a 6 hour time horizon."""
        return self.__tcm_cost_horizon6_hour

    @tcm_cost_horizon6_hour.setter
    def tcm_cost_horizon6_hour(self, value: float):
        self._property_changed('tcm_cost_horizon6_hour')
        self.__tcm_cost_horizon6_hour = value        

    @property
    def buy200cents(self) -> float:
        """The amount GS would buy for 200 cents charge."""
        return self.__buy200cents

    @buy200cents.setter
    def buy200cents(self, value: float):
        self._property_changed('buy200cents')
        self.__buy200cents = value        

    @property
    def vwap_unrealized_bps(self) -> float:
        """Consolidated unrealised performance vs VWAP, in bps."""
        return self.__vwap_unrealized_bps

    @vwap_unrealized_bps.setter
    def vwap_unrealized_bps(self, value: float):
        self._property_changed('vwap_unrealized_bps')
        self.__vwap_unrealized_bps = value        

    @property
    def price_to_book(self) -> float:
        """Price to book."""
        return self.__price_to_book

    @price_to_book.setter
    def price_to_book(self, value: float):
        self._property_changed('price_to_book')
        self.__price_to_book = value        

    @property
    def isin(self) -> str:
        """ISIN - International securities identifier number (subect to licensing)."""
        return self.__isin

    @isin.setter
    def isin(self, value: str):
        self._property_changed('isin')
        self.__isin = value        

    @property
    def pl_id(self) -> str:
        """Platts Symbol Name or description."""
        return self.__pl_id

    @pl_id.setter
    def pl_id(self, value: str):
        self._property_changed('pl_id')
        self.__pl_id = value        

    @property
    def last_returns_start_date(self) -> datetime.date:
        """Hedge fund last returns after start date."""
        return self.__last_returns_start_date

    @last_returns_start_date.setter
    def last_returns_start_date(self, value: datetime.date):
        self._property_changed('last_returns_start_date')
        self.__last_returns_start_date = value        

    @property
    def collateral_value_variance(self) -> float:
        """Diffrence between actual and required collateral levels."""
        return self.__collateral_value_variance

    @collateral_value_variance.setter
    def collateral_value_variance(self, value: float):
        self._property_changed('collateral_value_variance')
        self.__collateral_value_variance = value        

    @property
    def year(self) -> str:
        """Year of forecast."""
        return self.__year

    @year.setter
    def year(self, value: str):
        self._property_changed('year')
        self.__year = value        

    @property
    def forecast_period(self) -> str:
        """Year, quarter or horizon for which the forecast holds."""
        return self.__forecast_period

    @forecast_period.setter
    def forecast_period(self, value: str):
        self._property_changed('forecast_period')
        self.__forecast_period = value        

    @property
    def call_first_date(self) -> datetime.date:
        """ISO 8601-formatted date"""
        return self.__call_first_date

    @call_first_date.setter
    def call_first_date(self, value: datetime.date):
        self._property_changed('call_first_date')
        self.__call_first_date = value        

    @property
    def data_set_ids(self) -> Tuple[Tuple[str, ...], ...]:
        """The dataset Ids."""
        return self.__data_set_ids

    @data_set_ids.setter
    def data_set_ids(self, value: Tuple[Tuple[str, ...], ...]):
        self._property_changed('data_set_ids')
        self.__data_set_ids = value        

    @property
    def economic_terms_hash(self) -> str:
        """Hash code for an asset."""
        return self.__economic_terms_hash

    @economic_terms_hash.setter
    def economic_terms_hash(self, value: str):
        self._property_changed('economic_terms_hash')
        self.__economic_terms_hash = value        

    @property
    def num_beds(self) -> float:
        """Maximum number of beds for which a hospital holds a license to operate; however,
           many hospitals do not operate all the beds for which they are
           licensed."""
        return self.__num_beds

    @num_beds.setter
    def num_beds(self, value: float):
        self._property_changed('num_beds')
        self.__num_beds = value        

    @property
    def sell20bps(self) -> float:
        """The amount GS would sell for 20 bps charge."""
        return self.__sell20bps

    @sell20bps.setter
    def sell20bps(self, value: float):
        self._property_changed('sell20bps')
        self.__sell20bps = value        

    @property
    def client_type(self) -> str:
        """Client type, ex: Hedge Fund, Real Money, Corporate, etc."""
        return self.__client_type

    @client_type.setter
    def client_type(self, value: str):
        self._property_changed('client_type')
        self.__client_type = value        

    @property
    def percentage_close_executed_quantity(self) -> float:
        """Percent of order filled in closing Auction."""
        return self.__percentage_close_executed_quantity

    @percentage_close_executed_quantity.setter
    def percentage_close_executed_quantity(self, value: float):
        self._property_changed('percentage_close_executed_quantity')
        self.__percentage_close_executed_quantity = value        

    @property
    def macaulay_duration(self) -> float:
        """Measure of a bond's price sensitivity to changes in interest rates."""
        return self.__macaulay_duration

    @macaulay_duration.setter
    def macaulay_duration(self, value: float):
        self._property_changed('macaulay_duration')
        self.__macaulay_duration = value        

    @property
    def available_inventory(self) -> float:
        """An estimated indication of the share quantity potentially available to borrow in
           the relevant asset."""
        return self.__available_inventory

    @available_inventory.setter
    def available_inventory(self, value: float):
        self._property_changed('available_inventory')
        self.__available_inventory = value        

    @property
    def est1_day_complete_pct(self) -> float:
        """Estimated 1 day completion percentage."""
        return self.__est1_day_complete_pct

    @est1_day_complete_pct.setter
    def est1_day_complete_pct(self, value: float):
        self._property_changed('est1_day_complete_pct')
        self.__est1_day_complete_pct = value        

    @property
    def relative_hit_rate_ytd(self) -> float:
        """Hit Rate Ratio Year to Date."""
        return self.__relative_hit_rate_ytd

    @relative_hit_rate_ytd.setter
    def relative_hit_rate_ytd(self, value: float):
        self._property_changed('relative_hit_rate_ytd')
        self.__relative_hit_rate_ytd = value        

    @property
    def created_by_id(self) -> str:
        """Unique identifier of user who created the object."""
        return self.__created_by_id

    @created_by_id.setter
    def created_by_id(self, value: str):
        self._property_changed('created_by_id')
        self.__created_by_id = value        

    @property
    def market_data_type(self) -> str:
        """The market data type (e.g. IR BASIS, FX Vol). This can be resolved into a
           dataset when combined with vendor and intraday=true/false."""
        return self.__market_data_type

    @market_data_type.setter
    def market_data_type(self, value: str):
        self._property_changed('market_data_type')
        self.__market_data_type = value        

    @property
    def real_short_rates_contribution(self) -> float:
        """Contribution of short rate component to real FCI."""
        return self.__real_short_rates_contribution

    @real_short_rates_contribution.setter
    def real_short_rates_contribution(self, value: float):
        self._property_changed('real_short_rates_contribution')
        self.__real_short_rates_contribution = value        

    @property
    def metric_category(self) -> str:
        """Category of the metric."""
        return self.__metric_category

    @metric_category.setter
    def metric_category(self, value: str):
        self._property_changed('metric_category')
        self.__metric_category = value        

    @property
    def annualized_carry(self) -> float:
        """Annualized carry of the bond."""
        return self.__annualized_carry

    @annualized_carry.setter
    def annualized_carry(self, value: float):
        self._property_changed('annualized_carry')
        self.__annualized_carry = value        

    @property
    def value_previous(self) -> str:
        """Value for the previous period after the revision (if revision is applicable)."""
        return self.__value_previous

    @value_previous.setter
    def value_previous(self, value: str):
        self._property_changed('value_previous')
        self.__value_previous = value        

    @property
    def transmission_classification(self) -> str:
        """Classification of the transmission."""
        return self.__transmission_classification

    @transmission_classification.setter
    def transmission_classification(self, value: str):
        self._property_changed('transmission_classification')
        self.__transmission_classification = value        

    @property
    def avg_trade_rate(self) -> float:
        """The Average Trading Rate of the stock on the particular date."""
        return self.__avg_trade_rate

    @avg_trade_rate.setter
    def avg_trade_rate(self, value: float):
        self._property_changed('avg_trade_rate')
        self.__avg_trade_rate = value        

    @property
    def short_level(self) -> float:
        """Level of the 5-day normalized flow for short selling/covering."""
        return self.__short_level

    @short_level.setter
    def short_level(self, value: float):
        self._property_changed('short_level')
        self.__short_level = value        

    @property
    def version(self) -> float:
        """Version number."""
        return self.__version

    @version.setter
    def version(self, value: float):
        self._property_changed('version')
        self.__version = value        

    @property
    def category_type(self) -> str:
        """Type of the category."""
        return self.__category_type

    @category_type.setter
    def category_type(self, value: str):
        self._property_changed('category_type')
        self.__category_type = value        

    @property
    def policy_rate_expectation(self) -> float:
        """Returns the historical policy rate expectations for a given meeting date."""
        return self.__policy_rate_expectation

    @policy_rate_expectation.setter
    def policy_rate_expectation(self, value: float):
        self._property_changed('policy_rate_expectation')
        self.__policy_rate_expectation = value        

    @property
    def upload_date(self) -> datetime.date:
        """Index Position Upload Date."""
        return self.__upload_date

    @upload_date.setter
    def upload_date(self, value: datetime.date):
        self._property_changed('upload_date')
        self.__upload_date = value        

    @property
    def block_off_facility(self) -> str:
        """An indication of whether this is a block trade or off-facility swap."""
        return self.__block_off_facility

    @block_off_facility.setter
    def block_off_facility(self, value: str):
        self._property_changed('block_off_facility')
        self.__block_off_facility = value        

    @property
    def unrealized_vwap_performance_usd(self) -> float:
        """Average execution price vs Consolidated VWAP (in limit) since order inception
           ??? unrealized in $."""
        return self.__unrealized_vwap_performance_usd

    @unrealized_vwap_performance_usd.setter
    def unrealized_vwap_performance_usd(self, value: float):
        self._property_changed('unrealized_vwap_performance_usd')
        self.__unrealized_vwap_performance_usd = value        

    @property
    def pace_of_rollp75(self) -> float:
        """The 75th-percentile of the pace of roll compared to previous quarters (over the
           last 5 years) at the same point in time, i.e. cross-sectional.."""
        return self.__pace_of_rollp75

    @pace_of_rollp75.setter
    def pace_of_rollp75(self, value: float):
        self._property_changed('pace_of_rollp75')
        self.__pace_of_rollp75 = value        

    @property
    def earnings_per_share_positive(self) -> float:
        """Earnings per share positive."""
        return self.__earnings_per_share_positive

    @earnings_per_share_positive.setter
    def earnings_per_share_positive(self, value: float):
        self._property_changed('earnings_per_share_positive')
        self.__earnings_per_share_positive = value        

    @property
    def num_icu_beds(self) -> float:
        """All qualified Intensive Care Unit beds, including psychiatric ICU beds and Detox
           ICU beds."""
        return self.__num_icu_beds

    @num_icu_beds.setter
    def num_icu_beds(self, value: float):
        self._property_changed('num_icu_beds')
        self.__num_icu_beds = value        

    @property
    def bucket_volume_in_percentage(self) -> float:
        """Forecast of the percentage volume of shares in the bucket relative to the total
           volume forecasted for the day."""
        return self.__bucket_volume_in_percentage

    @bucket_volume_in_percentage.setter
    def bucket_volume_in_percentage(self, value: float):
        self._property_changed('bucket_volume_in_percentage')
        self.__bucket_volume_in_percentage = value        

    @property
    def estimated_trading_cost(self) -> float:
        """The estimated transaction cost of the order."""
        return self.__estimated_trading_cost

    @estimated_trading_cost.setter
    def estimated_trading_cost(self, value: float):
        self._property_changed('estimated_trading_cost')
        self.__estimated_trading_cost = value        

    @property
    def eid(self) -> str:
        """Goldman Sachs internal exchange identifier."""
        return self.__eid

    @eid.setter
    def eid(self, value: str):
        self._property_changed('eid')
        self.__eid = value        

    @property
    def relative_return_qtd(self) -> float:
        """Relative Return Quarter to Date."""
        return self.__relative_return_qtd

    @relative_return_qtd.setter
    def relative_return_qtd(self, value: float):
        self._property_changed('relative_return_qtd')
        self.__relative_return_qtd = value        

    @property
    def assessed_test_measure(self) -> float:
        """Generic field to hold aggregated assessed numeric measure for test result. This
           field stores the aggregated test measures of entities which are not
           temporarily ignored by silencing (like max delay across unsilenced
           assets). This is further used to perform any follow up actions like
           alerting."""
        return self.__assessed_test_measure

    @assessed_test_measure.setter
    def assessed_test_measure(self, value: float):
        self._property_changed('assessed_test_measure')
        self.__assessed_test_measure = value        

    @property
    def mkt_quoting_style(self) -> str:
        """Quoting style."""
        return self.__mkt_quoting_style

    @mkt_quoting_style.setter
    def mkt_quoting_style(self, value: str):
        self._property_changed('mkt_quoting_style')
        self.__mkt_quoting_style = value        

    @property
    def expiration_tenor(self) -> str:
        """Tenor"""
        return self.__expiration_tenor

    @expiration_tenor.setter
    def expiration_tenor(self, value: str):
        self._property_changed('expiration_tenor')
        self.__expiration_tenor = value        

    @property
    def price_limit(self) -> float:
        """Limit price of the order."""
        return self.__price_limit

    @price_limit.setter
    def price_limit(self, value: float):
        self._property_changed('price_limit')
        self.__price_limit = value        

    @property
    def market_model_id(self) -> str:
        """Marquee unique market model identifier"""
        return self.__market_model_id

    @market_model_id.setter
    def market_model_id(self, value: str):
        self._property_changed('market_model_id')
        self.__market_model_id = value        

    @property
    def receiver_frequency(self) -> str:
        """Tenor"""
        return self.__receiver_frequency

    @receiver_frequency.setter
    def receiver_frequency(self, value: str):
        self._property_changed('receiver_frequency')
        self.__receiver_frequency = value        

    @property
    def realized_correlation(self) -> float:
        """Correlation of an asset realized by observations of market prices."""
        return self.__realized_correlation

    @realized_correlation.setter
    def realized_correlation(self, value: float):
        self._property_changed('realized_correlation')
        self.__realized_correlation = value        

    @property
    def issue_status(self) -> str:
        """Status of the issue."""
        return self.__issue_status

    @issue_status.setter
    def issue_status(self, value: str):
        self._property_changed('issue_status')
        self.__issue_status = value        

    @property
    def collateral_value_actual(self) -> float:
        """Value of collateral covering the given position."""
        return self.__collateral_value_actual

    @collateral_value_actual.setter
    def collateral_value_actual(self, value: float):
        self._property_changed('collateral_value_actual')
        self.__collateral_value_actual = value        

    @property
    def atm_fwd_rate(self) -> float:
        """ATM forward rate."""
        return self.__atm_fwd_rate

    @atm_fwd_rate.setter
    def atm_fwd_rate(self, value: float):
        self._property_changed('atm_fwd_rate')
        self.__atm_fwd_rate = value        

    @property
    def tcm_cost_participation_rate75_pct(self) -> float:
        """TCM cost with a 75 percent participation rate."""
        return self.__tcm_cost_participation_rate75_pct

    @tcm_cost_participation_rate75_pct.setter
    def tcm_cost_participation_rate75_pct(self, value: float):
        self._property_changed('tcm_cost_participation_rate75_pct')
        self.__tcm_cost_participation_rate75_pct = value        

    @property
    def close(self) -> float:
        """Closing level of an asset based on official exchange fixing or calculation agent
           marked level."""
        return self.__close

    @close.setter
    def close(self, value: float):
        self._property_changed('close')
        self.__close = value        

    @property
    def vol30d(self) -> float:
        """T30D volatility, measured as the deviation of log returns."""
        return self.__vol30d

    @vol30d.setter
    def vol30d(self, value: float):
        self._property_changed('vol30d')
        self.__vol30d = value        

    @property
    def es_product_impact_score(self) -> float:
        """A company's score for E&S subsector-relative product impact metrics."""
        return self.__es_product_impact_score

    @es_product_impact_score.setter
    def es_product_impact_score(self, value: float):
        self._property_changed('es_product_impact_score')
        self.__es_product_impact_score = value        

    @property
    def equity_vega(self) -> float:
        """Vega exposure to equity products."""
        return self.__equity_vega

    @equity_vega.setter
    def equity_vega(self, value: float):
        self._property_changed('equity_vega')
        self.__equity_vega = value        

    @property
    def executed_fill_quantity(self) -> float:
        """Executed quantity - on executions."""
        return self.__executed_fill_quantity

    @executed_fill_quantity.setter
    def executed_fill_quantity(self, value: float):
        self._property_changed('executed_fill_quantity')
        self.__executed_fill_quantity = value        

    @property
    def lender_payment(self) -> float:
        """Payment made to lender's bank in support of the income accrued from securities
           lending."""
        return self.__lender_payment

    @lender_payment.setter
    def lender_payment(self, value: float):
        self._property_changed('lender_payment')
        self.__lender_payment = value        

    @property
    def five_day_move(self) -> float:
        """Five day move in the price."""
        return self.__five_day_move

    @five_day_move.setter
    def five_day_move(self, value: float):
        self._property_changed('five_day_move')
        self.__five_day_move = value        

    @property
    def realized_market_cap(self) -> float:
        """The sum USD value based on the USD closing price on the day that a native unit
           last moved (i.e., last transacted) for all native units."""
        return self.__realized_market_cap

    @realized_market_cap.setter
    def realized_market_cap(self, value: float):
        self._property_changed('realized_market_cap')
        self.__realized_market_cap = value        

    @property
    def value_format(self) -> str:
        """Value format."""
        return self.__value_format

    @value_format.setter
    def value_format(self, value: str):
        self._property_changed('value_format')
        self.__value_format = value        

    @property
    def wind_chill_forecast(self) -> float:
        """The forecast wind chill of given units."""
        return self.__wind_chill_forecast

    @wind_chill_forecast.setter
    def wind_chill_forecast(self, value: float):
        self._property_changed('wind_chill_forecast')
        self.__wind_chill_forecast = value        

    @property
    def target_notional(self) -> float:
        """Notional value of the hedge target."""
        return self.__target_notional

    @target_notional.setter
    def target_notional(self, value: float):
        self._property_changed('target_notional')
        self.__target_notional = value        

    @property
    def fill_leg_id(self) -> str:
        """Unique identifier for the leg on which the fill executed."""
        return self.__fill_leg_id

    @fill_leg_id.setter
    def fill_leg_id(self, value: str):
        self._property_changed('fill_leg_id')
        self.__fill_leg_id = value        

    @property
    def rationale(self) -> str:
        """Reason for changing the status of a trade idea."""
        return self.__rationale

    @rationale.setter
    def rationale(self, value: str):
        self._property_changed('rationale')
        self.__rationale = value        

    @property
    def realized_twap_performance_bps(self) -> float:
        """Average execution price vs Consolidated TWAP since order inception ??? realized."""
        return self.__realized_twap_performance_bps

    @realized_twap_performance_bps.setter
    def realized_twap_performance_bps(self, value: float):
        self._property_changed('realized_twap_performance_bps')
        self.__realized_twap_performance_bps = value        

    @property
    def last_updated_since(self) -> datetime.datetime:
        """ISO 8601-formatted timestamp"""
        return self.__last_updated_since

    @last_updated_since.setter
    def last_updated_since(self, value: datetime.datetime):
        self._property_changed('last_updated_since')
        self.__last_updated_since = value        

    @property
    def total_tests(self) -> float:
        """Total number of tests administered."""
        return self.__total_tests

    @total_tests.setter
    def total_tests(self, value: float):
        self._property_changed('total_tests')
        self.__total_tests = value        

    @property
    def equities_contribution(self) -> float:
        """Contribution of equity component to FCI."""
        return self.__equities_contribution

    @equities_contribution.setter
    def equities_contribution(self, value: float):
        self._property_changed('equities_contribution')
        self.__equities_contribution = value        

    @property
    def simon_id(self) -> str:
        """SIMON application asset identifier."""
        return self.__simon_id

    @simon_id.setter
    def simon_id(self, value: str):
        self._property_changed('simon_id')
        self.__simon_id = value        

    @property
    def congestion(self) -> float:
        """Congestion price component."""
        return self.__congestion

    @congestion.setter
    def congestion(self, value: float):
        self._property_changed('congestion')
        self.__congestion = value        

    @property
    def leg2_commodity_instrument_id(self) -> str:
        """The unique identifier of the asset, reference asset, or reference obligation for
           payments of a party's obligations under the SB swap transaction
           reference."""
        return self.__leg2_commodity_instrument_id

    @leg2_commodity_instrument_id.setter
    def leg2_commodity_instrument_id(self, value: str):
        self._property_changed('leg2_commodity_instrument_id')
        self.__leg2_commodity_instrument_id = value        

    @property
    def notes(self) -> str:
        """Notes for series."""
        return self.__notes

    @notes.setter
    def notes(self, value: str):
        self._property_changed('notes')
        self.__notes = value        

    @property
    def total_probable_senior_home(self) -> float:
        """Probable cases in Senior homes and care facilities."""
        return self.__total_probable_senior_home

    @total_probable_senior_home.setter
    def total_probable_senior_home(self, value: float):
        self._property_changed('total_probable_senior_home')
        self.__total_probable_senior_home = value        

    @property
    def event_category(self) -> str:
        """Category."""
        return self.__event_category

    @event_category.setter
    def event_category(self, value: str):
        self._property_changed('event_category')
        self.__event_category = value        

    @property
    def average_fill_rate(self) -> float:
        """Percent complete."""
        return self.__average_fill_rate

    @average_fill_rate.setter
    def average_fill_rate(self, value: float):
        self._property_changed('average_fill_rate')
        self.__average_fill_rate = value        

    @property
    def cins(self) -> str:
        """Cins Identifier."""
        return self.__cins

    @cins.setter
    def cins(self, value: str):
        self._property_changed('cins')
        self.__cins = value        

    @property
    def unadjusted_open(self) -> float:
        """Unadjusted open level of an asset based on official exchange fixing or
           calculation agent marked level."""
        return self.__unadjusted_open

    @unadjusted_open.setter
    def unadjusted_open(self, value: float):
        self._property_changed('unadjusted_open')
        self.__unadjusted_open = value        

    @property
    def criticality(self) -> float:
        """The upgrade criticality of a deployment."""
        return self.__criticality

    @criticality.setter
    def criticality(self, value: float):
        self._property_changed('criticality')
        self.__criticality = value        

    @property
    def bid_ask_spread(self) -> float:
        """Bid ask spread."""
        return self.__bid_ask_spread

    @bid_ask_spread.setter
    def bid_ask_spread(self, value: float):
        self._property_changed('bid_ask_spread')
        self.__bid_ask_spread = value        

    @property
    def arrival_mid_unrealized_bps(self) -> float:
        """Consolidated unrealised performance vs Arrival Mid, in bps."""
        return self.__arrival_mid_unrealized_bps

    @arrival_mid_unrealized_bps.setter
    def arrival_mid_unrealized_bps(self, value: float):
        self._property_changed('arrival_mid_unrealized_bps')
        self.__arrival_mid_unrealized_bps = value        

    @property
    def option_type(self) -> str:
        """One of two option types."""
        return self.__option_type

    @option_type.setter
    def option_type(self, value: str):
        self._property_changed('option_type')
        self.__option_type = value        

    @property
    def termination_date(self) -> datetime.date:
        """The date at which the measure becomes terminated."""
        return self.__termination_date

    @termination_date.setter
    def termination_date(self, value: datetime.date):
        self._property_changed('termination_date')
        self.__termination_date = value        

    @property
    def queries_per_second(self) -> float:
        """Queries per second."""
        return self.__queries_per_second

    @queries_per_second.setter
    def queries_per_second(self, value: float):
        self._property_changed('queries_per_second')
        self.__queries_per_second = value        

    @property
    def liquidity_type(self) -> str:
        """Taking/Providing."""
        return self.__liquidity_type

    @liquidity_type.setter
    def liquidity_type(self, value: str):
        self._property_changed('liquidity_type')
        self.__liquidity_type = value        

    @property
    def credit_limit(self) -> float:
        """The allowed credit limit."""
        return self.__credit_limit

    @credit_limit.setter
    def credit_limit(self, value: float):
        self._property_changed('credit_limit')
        self.__credit_limit = value        

    @property
    def rank_qtd(self) -> float:
        """Rank of the Contributor Quarter to Date."""
        return self.__rank_qtd

    @rank_qtd.setter
    def rank_qtd(self, value: float):
        self._property_changed('rank_qtd')
        self.__rank_qtd = value        

    @property
    def combined_key(self) -> str:
        """Key for epidemic data."""
        return self.__combined_key

    @combined_key.setter
    def combined_key(self, value: str):
        self._property_changed('combined_key')
        self.__combined_key = value        

    @property
    def gir_fx_forecast(self) -> float:
        """FX forecast value for the relative period."""
        return self.__gir_fx_forecast

    @gir_fx_forecast.setter
    def gir_fx_forecast(self, value: float):
        self._property_changed('gir_fx_forecast')
        self.__gir_fx_forecast = value        

    @property
    def effective_tenor(self) -> str:
        """Tenor"""
        return self.__effective_tenor

    @effective_tenor.setter
    def effective_tenor(self, value: str):
        self._property_changed('effective_tenor')
        self.__effective_tenor = value        

    @property
    def gir_commodities_forecast(self) -> float:
        """Forecast value."""
        return self.__gir_commodities_forecast

    @gir_commodities_forecast.setter
    def gir_commodities_forecast(self, value: float):
        self._property_changed('gir_commodities_forecast')
        self.__gir_commodities_forecast = value        

    @property
    def relative_humidity_daily_forecast(self) -> float:
        """The forecast value for humidity in Percentage."""
        return self.__relative_humidity_daily_forecast

    @relative_humidity_daily_forecast.setter
    def relative_humidity_daily_forecast(self, value: float):
        self._property_changed('relative_humidity_daily_forecast')
        self.__relative_humidity_daily_forecast = value        

    @property
    def std30_days_subsidized_yield(self) -> float:
        """Average annual total returns as of most recent calendar quarter-end, does not
           account for any fee waivers or expense reimbursements."""
        return self.__std30_days_subsidized_yield

    @std30_days_subsidized_yield.setter
    def std30_days_subsidized_yield(self, value: float):
        self._property_changed('std30_days_subsidized_yield')
        self.__std30_days_subsidized_yield = value        

    @property
    def annualized_tracking_error(self) -> float:
        """Annualized tracking error."""
        return self.__annualized_tracking_error

    @annualized_tracking_error.setter
    def annualized_tracking_error(self, value: float):
        self._property_changed('annualized_tracking_error')
        self.__annualized_tracking_error = value        

    @property
    def future_month_f26(self) -> float:
        """Commods future month code."""
        return self.__future_month_f26

    @future_month_f26.setter
    def future_month_f26(self, value: float):
        self._property_changed('future_month_f26')
        self.__future_month_f26 = value        

    @property
    def future_month_f25(self) -> float:
        """Commods future month code."""
        return self.__future_month_f25

    @future_month_f25.setter
    def future_month_f25(self, value: float):
        self._property_changed('future_month_f25')
        self.__future_month_f25 = value        

    @property
    def vol_swap(self) -> float:
        """The strike in volatility terms, calculated as square root of fair variance."""
        return self.__vol_swap

    @vol_swap.setter
    def vol_swap(self, value: float):
        self._property_changed('vol_swap')
        self.__vol_swap = value        

    @property
    def future_month_f24(self) -> float:
        """Commods future month code."""
        return self.__future_month_f24

    @future_month_f24.setter
    def future_month_f24(self, value: float):
        self._property_changed('future_month_f24')
        self.__future_month_f24 = value        

    @property
    def heat_index_daily_forecast(self) -> float:
        """The daily forecast value for heat index in Fahrenheit."""
        return self.__heat_index_daily_forecast

    @heat_index_daily_forecast.setter
    def heat_index_daily_forecast(self, value: float):
        self._property_changed('heat_index_daily_forecast')
        self.__heat_index_daily_forecast = value        

    @property
    def future_month_f23(self) -> float:
        """Commods future month code."""
        return self.__future_month_f23

    @future_month_f23.setter
    def future_month_f23(self, value: float):
        self._property_changed('future_month_f23')
        self.__future_month_f23 = value        

    @property
    def real_fci(self) -> float:
        """Real FCI value."""
        return self.__real_fci

    @real_fci.setter
    def real_fci(self, value: float):
        self._property_changed('real_fci')
        self.__real_fci = value        

    @property
    def block_trades_and_large_notional_off_facility_swaps(self) -> str:
        """An indication of whether this is a block trade or off-facility swap."""
        return self.__block_trades_and_large_notional_off_facility_swaps

    @block_trades_and_large_notional_off_facility_swaps.setter
    def block_trades_and_large_notional_off_facility_swaps(self, value: str):
        self._property_changed('block_trades_and_large_notional_off_facility_swaps')
        self.__block_trades_and_large_notional_off_facility_swaps = value        

    @property
    def future_month_f22(self) -> float:
        """Commods future month code."""
        return self.__future_month_f22

    @future_month_f22.setter
    def future_month_f22(self, value: float):
        self._property_changed('future_month_f22')
        self.__future_month_f22 = value        

    @property
    def buy1point5bps(self) -> float:
        """The amount GS would buy for 1.5 bps charge."""
        return self.__buy1point5bps

    @buy1point5bps.setter
    def buy1point5bps(self, value: float):
        self._property_changed('buy1point5bps')
        self.__buy1point5bps = value        

    @property
    def future_month_f21(self) -> float:
        """Commods future month code."""
        return self.__future_month_f21

    @future_month_f21.setter
    def future_month_f21(self, value: float):
        self._property_changed('future_month_f21')
        self.__future_month_f21 = value        

    @property
    def expiration_settlement_date(self) -> datetime.date:
        """Date on which cash/stocks are settled after expiration date."""
        return self.__expiration_settlement_date

    @expiration_settlement_date.setter
    def expiration_settlement_date(self, value: datetime.date):
        self._property_changed('expiration_settlement_date')
        self.__expiration_settlement_date = value        

    @property
    def absolute_return_qtd(self) -> float:
        """Absolute Return Quarter to Date."""
        return self.__absolute_return_qtd

    @absolute_return_qtd.setter
    def absolute_return_qtd(self, value: float):
        self._property_changed('absolute_return_qtd')
        self.__absolute_return_qtd = value        

    @property
    def gross_exposure(self) -> float:
        """Sum of absolute long and short exposures in the portfolio. If you are $60 short
           and $40 long, then the grossExposure would be $100 (60+40)."""
        return self.__gross_exposure

    @gross_exposure.setter
    def gross_exposure(self, value: float):
        self._property_changed('gross_exposure')
        self.__gross_exposure = value        

    @property
    def volume(self) -> float:
        """Accumulated number of shares, lots or contracts traded according to the market
           convention."""
        return self.__volume

    @volume.setter
    def volume(self, value: float):
        self._property_changed('volume')
        self.__volume = value        

    @property
    def adv(self) -> float:
        """Average number of shares or units of a given asset traded over a defined period."""
        return self.__adv

    @adv.setter
    def adv(self, value: float):
        self._property_changed('adv')
        self.__adv = value        

    @property
    def short_conviction_medium(self) -> float:
        """The count of short ideas with medium conviction."""
        return self.__short_conviction_medium

    @short_conviction_medium.setter
    def short_conviction_medium(self, value: float):
        self._property_changed('short_conviction_medium')
        self.__short_conviction_medium = value        

    @property
    def complete_test_measure(self) -> float:
        """Generic field to hold aggregated complete numeric measure for test result. This
           field stores the aggregated test measures of all the entities (like
           max delay across all the assets, either silenced or unsilenced)."""
        return self.__complete_test_measure

    @complete_test_measure.setter
    def complete_test_measure(self, value: float):
        self._property_changed('complete_test_measure')
        self.__complete_test_measure = value        

    @property
    def exchange(self) -> str:
        """Name of marketplace where security, derivative or other instrument is traded"""
        return self.__exchange

    @exchange.setter
    def exchange(self, value: str):
        self._property_changed('exchange')
        self.__exchange = value        

    @property
    def es_policy_score(self) -> float:
        """A company's score for E&S subsector-relative policy metrics."""
        return self.__es_policy_score

    @es_policy_score.setter
    def es_policy_score(self, value: float):
        self._property_changed('es_policy_score')
        self.__es_policy_score = value        

    @property
    def roll_volume_std(self) -> float:
        """Cross-sectional roll volume in standard deviations."""
        return self.__roll_volume_std

    @roll_volume_std.setter
    def roll_volume_std(self, value: float):
        self._property_changed('roll_volume_std')
        self.__roll_volume_std = value        

    @property
    def temperature_daily_forecast(self) -> float:
        """The forecast temperature of diff types in Fahrenheit."""
        return self.__temperature_daily_forecast

    @temperature_daily_forecast.setter
    def temperature_daily_forecast(self, value: float):
        self._property_changed('temperature_daily_forecast')
        self.__temperature_daily_forecast = value        

    @property
    def relative_payoff_qtd(self) -> float:
        """Total win divided by total loss Quarter to date."""
        return self.__relative_payoff_qtd

    @relative_payoff_qtd.setter
    def relative_payoff_qtd(self, value: float):
        self._property_changed('relative_payoff_qtd')
        self.__relative_payoff_qtd = value        

    @property
    def on_loan_percentage(self) -> float:
        """On loan ratio as compared net asset value of lending fund."""
        return self.__on_loan_percentage

    @on_loan_percentage.setter
    def on_loan_percentage(self, value: float):
        self._property_changed('on_loan_percentage')
        self.__on_loan_percentage = value        

    @property
    def twap_remaining_slices(self) -> float:
        """The number of slices remaining on a TWAP."""
        return self.__twap_remaining_slices

    @twap_remaining_slices.setter
    def twap_remaining_slices(self, value: float):
        self._property_changed('twap_remaining_slices')
        self.__twap_remaining_slices = value        

    @property
    def fair_variance(self) -> float:
        """Strike such that the price of an uncapped variance swap on the underlying index
           is zero at inception."""
        return self.__fair_variance

    @fair_variance.setter
    def fair_variance(self, value: float):
        self._property_changed('fair_variance')
        self.__fair_variance = value        

    @property
    def hit_rate_wtd(self) -> float:
        """Hit Rate Ratio Week to Date."""
        return self.__hit_rate_wtd

    @hit_rate_wtd.setter
    def hit_rate_wtd(self, value: float):
        self._property_changed('hit_rate_wtd')
        self.__hit_rate_wtd = value        

    @property
    def previous_close_realized_cash(self) -> float:
        """Realised performance vs Previous Close, in USD."""
        return self.__previous_close_realized_cash

    @previous_close_realized_cash.setter
    def previous_close_realized_cash(self, value: float):
        self._property_changed('previous_close_realized_cash')
        self.__previous_close_realized_cash = value        

    @property
    def realized_volatility(self) -> float:
        """Volatility of an asset realized by observations of market prices."""
        return self.__realized_volatility

    @realized_volatility.setter
    def realized_volatility(self, value: float):
        self._property_changed('realized_volatility')
        self.__realized_volatility = value        

    @property
    def unexecuted_quantity(self) -> float:
        """Un-executed quantity, in shares."""
        return self.__unexecuted_quantity

    @unexecuted_quantity.setter
    def unexecuted_quantity(self, value: float):
        self._property_changed('unexecuted_quantity')
        self.__unexecuted_quantity = value        

    @property
    def proceeds_asset_swap_spread1m(self) -> float:
        """Proceeds asset swap spread vs 1m tenor."""
        return self.__proceeds_asset_swap_spread1m

    @proceeds_asset_swap_spread1m.setter
    def proceeds_asset_swap_spread1m(self, value: float):
        self._property_changed('proceeds_asset_swap_spread1m')
        self.__proceeds_asset_swap_spread1m = value        

    @property
    def clone_parent_id(self) -> str:
        """Marquee unique identifier"""
        return self.__clone_parent_id

    @clone_parent_id.setter
    def clone_parent_id(self, value: str):
        self._property_changed('clone_parent_id')
        self.__clone_parent_id = value        

    @property
    def wind_speed_hourly_forecast(self) -> float:
        """The hourly forecast value for wind speed in Mph."""
        return self.__wind_speed_hourly_forecast

    @wind_speed_hourly_forecast.setter
    def wind_speed_hourly_forecast(self, value: float):
        self._property_changed('wind_speed_hourly_forecast')
        self.__wind_speed_hourly_forecast = value        

    @property
    def etf_flow_ratio(self) -> float:
        """Ratio of signed ETF dollar flow to market cap of global stocks, i.e. proportion
           of company's market cap that is part of ETF flows observed weekly.
           Normalised between -3 (low level) and +3 (high level)."""
        return self.__etf_flow_ratio

    @etf_flow_ratio.setter
    def etf_flow_ratio(self, value: float):
        self._property_changed('etf_flow_ratio')
        self.__etf_flow_ratio = value        

    @property
    def asset_parameters_receiver_rate_option(self) -> str:
        """The underlying benchmark for the payer, e.g. USD-LIBOR-BBA, EUR-EURIBOR-
           TELERATE."""
        return self.__asset_parameters_receiver_rate_option

    @asset_parameters_receiver_rate_option.setter
    def asset_parameters_receiver_rate_option(self, value: str):
        self._property_changed('asset_parameters_receiver_rate_option')
        self.__asset_parameters_receiver_rate_option = value        

    @property
    def buy60cents(self) -> float:
        """The amount GS would buy for 60 cents charge."""
        return self.__buy60cents

    @buy60cents.setter
    def buy60cents(self, value: float):
        self._property_changed('buy60cents')
        self.__buy60cents = value        

    @property
    def security_sub_type_id(self) -> str:
        """PadMaster unique security sub type identifier."""
        return self.__security_sub_type_id

    @security_sub_type_id.setter
    def security_sub_type_id(self, value: str):
        self._property_changed('security_sub_type_id')
        self.__security_sub_type_id = value        

    @property
    def message(self) -> str:
        """Miscellaneous remarks."""
        return self.__message

    @message.setter
    def message(self, value: str):
        self._property_changed('message')
        self.__message = value        

    @property
    def sts_rates_country(self) -> str:
        """Country of interest rate risk for STS assets."""
        return self.__sts_rates_country

    @sts_rates_country.setter
    def sts_rates_country(self, value: str):
        self._property_changed('sts_rates_country')
        self.__sts_rates_country = value        

    @property
    def sell65cents(self) -> float:
        """The amount GS would sell for 65 cents charge."""
        return self.__sell65cents

    @sell65cents.setter
    def sell65cents(self, value: float):
        self._property_changed('sell65cents')
        self.__sell65cents = value        

    @property
    def horizon(self) -> str:
        """Time period indicating the validity of the idea. Eg. 2d (2 days), 1w (1 week),
           3m (3 months), 1y (1 year)."""
        return self.__horizon

    @horizon.setter
    def horizon(self, value: str):
        self._property_changed('horizon')
        self.__horizon = value        

    @property
    def would_if_good_level(self) -> float:
        """If specified, allows the remaining quantity of an algo to be filled like a limit
           order."""
        return self.__would_if_good_level

    @would_if_good_level.setter
    def would_if_good_level(self, value: float):
        self._property_changed('would_if_good_level')
        self.__would_if_good_level = value        

    @property
    def buffer_threshold_required(self) -> float:
        """The required buffer between holdings and on loan quantity for an asset."""
        return self.__buffer_threshold_required

    @buffer_threshold_required.setter
    def buffer_threshold_required(self, value: float):
        self._property_changed('buffer_threshold_required')
        self.__buffer_threshold_required = value        

    @property
    def face_value(self) -> float:
        """The face value of the instrument."""
        return self.__face_value

    @face_value.setter
    def face_value(self, value: float):
        self._property_changed('face_value')
        self.__face_value = value        

    @property
    def roll_volume_hist(self) -> float:
        """Five Year historical roll volume."""
        return self.__roll_volume_hist

    @roll_volume_hist.setter
    def roll_volume_hist(self, value: float):
        self._property_changed('roll_volume_hist')
        self.__roll_volume_hist = value        

    @property
    def counter_party_status(self) -> str:
        """The lending status of a counterparty for a particular portfolio."""
        return self.__counter_party_status

    @counter_party_status.setter
    def counter_party_status(self, value: str):
        self._property_changed('counter_party_status')
        self.__counter_party_status = value        

    @property
    def composite22_day_adv(self) -> float:
        """Composite 22 day ADV."""
        return self.__composite22_day_adv

    @composite22_day_adv.setter
    def composite22_day_adv(self, value: float):
        self._property_changed('composite22_day_adv')
        self.__composite22_day_adv = value        

    @property
    def percentage_far_executed_quantity(self) -> float:
        """Percentage of total order filled at aggressive touch."""
        return self.__percentage_far_executed_quantity

    @percentage_far_executed_quantity.setter
    def percentage_far_executed_quantity(self, value: float):
        self._property_changed('percentage_far_executed_quantity')
        self.__percentage_far_executed_quantity = value        

    @property
    def loan_spread_required(self) -> float:
        """The minimum spread requirement for a securities lending loan."""
        return self.__loan_spread_required

    @loan_spread_required.setter
    def loan_spread_required(self, value: float):
        self._property_changed('loan_spread_required')
        self.__loan_spread_required = value        

    @property
    def asset_class(self) -> str:
        """Asset classification of security. Assets are classified into broad groups which
           exhibit similar characteristics and behave in a consistent way under
           different market conditions"""
        return self.__asset_class

    @asset_class.setter
    def asset_class(self, value: str):
        self._property_changed('asset_class')
        self.__asset_class = value        

    @property
    def sovereign_spread_contribution(self) -> float:
        """Contribution of sovereign spread component to FCI. Only applicable to Euro
           countries."""
        return self.__sovereign_spread_contribution

    @sovereign_spread_contribution.setter
    def sovereign_spread_contribution(self, value: float):
        self._property_changed('sovereign_spread_contribution')
        self.__sovereign_spread_contribution = value        

    @property
    def ric(self) -> str:
        """Reuters instrument code (subject to licensing)."""
        return self.__ric

    @ric.setter
    def ric(self, value: str):
        self._property_changed('ric')
        self.__ric = value        

    @property
    def bucket_end_time(self) -> datetime.datetime:
        """The end time of the bucket in ISO 8601 formatted date and time."""
        return self.__bucket_end_time

    @bucket_end_time.setter
    def bucket_end_time(self, value: datetime.datetime):
        self._property_changed('bucket_end_time')
        self.__bucket_end_time = value        

    @property
    def rate_type(self) -> str:
        """Type of swap structured for a Central Bank swap: rate type = Meeting Forward,
           swaps structured trough End of Year, rateType = EOY Forward and for
           Spot OIS value rateType = Spot."""
        return self.__rate_type

    @rate_type.setter
    def rate_type(self, value: str):
        self._property_changed('rate_type')
        self.__rate_type = value        

    @property
    def total_fatalities_senior_home(self) -> float:
        """Confirmed fatalities in Senior homes and care facilities."""
        return self.__total_fatalities_senior_home

    @total_fatalities_senior_home.setter
    def total_fatalities_senior_home(self, value: float):
        self._property_changed('total_fatalities_senior_home')
        self.__total_fatalities_senior_home = value        

    @property
    def loan_status(self) -> str:
        """Notes which point of the lifecyle a securities lending loan is in."""
        return self.__loan_status

    @loan_status.setter
    def loan_status(self, value: str):
        self._property_changed('loan_status')
        self.__loan_status = value        

    @property
    def short_weight(self) -> float:
        """Short weight of a position in a given portfolio. Equivalent to position short
           exposure / total short exposure. If you have a position with a
           shortExposure of $20, and your portfolio shortExposure is $100, then
           your asset shortWeight would be 0.2 (20/100)."""
        return self.__short_weight

    @short_weight.setter
    def short_weight(self, value: float):
        self._property_changed('short_weight')
        self.__short_weight = value        

    @property
    def geography_id(self) -> str:
        """Region or Country code for which the numbers are represented. For countries, it
           is the ISO 3166 2-digit country code."""
        return self.__geography_id

    @geography_id.setter
    def geography_id(self, value: str):
        self._property_changed('geography_id')
        self.__geography_id = value        

    @property
    def sell7point5bps(self) -> float:
        """The amount GS would sell for 7.5 bps charge."""
        return self.__sell7point5bps

    @sell7point5bps.setter
    def sell7point5bps(self, value: float):
        self._property_changed('sell7point5bps')
        self.__sell7point5bps = value        

    @property
    def nav(self) -> float:
        """Net asset value."""
        return self.__nav

    @nav.setter
    def nav(self, value: float):
        self._property_changed('nav')
        self.__nav = value        

    @property
    def fiscal_quarter(self) -> str:
        """One of the four three-month periods that make up the fiscal year."""
        return self.__fiscal_quarter

    @fiscal_quarter.setter
    def fiscal_quarter(self, value: str):
        self._property_changed('fiscal_quarter')
        self.__fiscal_quarter = value        

    @property
    def version_string(self) -> str:
        """String representing the version number."""
        return self.__version_string

    @version_string.setter
    def version_string(self, value: str):
        self._property_changed('version_string')
        self.__version_string = value        

    @property
    def payoff_ytd(self) -> float:
        """Total win divided by total loss Year to date."""
        return self.__payoff_ytd

    @payoff_ytd.setter
    def payoff_ytd(self, value: float):
        self._property_changed('payoff_ytd')
        self.__payoff_ytd = value        

    @property
    def market_impact(self) -> float:
        """Market impact is based on the Goldman Sachs Shortfall Model where available
           alongside best estimates from the desk."""
        return self.__market_impact

    @market_impact.setter
    def market_impact(self, value: float):
        self._property_changed('market_impact')
        self.__market_impact = value        

    @property
    def event_type(self) -> str:
        """Equals Analyst Meeting if the event indicates an analyst meeting. Equals
           Earnings Release if the event indicates an earnings release. Equals
           Sales Release when the event indicates a sales release. Indicates
           Drug Data when the event indicates an event related to drugs data.
           Equals Other for any other events."""
        return self.__event_type

    @event_type.setter
    def event_type(self, value: str):
        self._property_changed('event_type')
        self.__event_type = value        

    @property
    def fill_price(self) -> float:
        """Last execution price."""
        return self.__fill_price

    @fill_price.setter
    def fill_price(self, value: float):
        self._property_changed('fill_price')
        self.__fill_price = value        

    @property
    def asset_count_long(self) -> float:
        """Number of assets in a portfolio with long exposure."""
        return self.__asset_count_long

    @asset_count_long.setter
    def asset_count_long(self, value: float):
        self._property_changed('asset_count_long')
        self.__asset_count_long = value        

    @property
    def sell180cents(self) -> float:
        """The amount GS would sell for 180 cents charge."""
        return self.__sell180cents

    @sell180cents.setter
    def sell180cents(self, value: float):
        self._property_changed('sell180cents')
        self.__sell180cents = value        

    @property
    def spot(self) -> float:
        """Spot price."""
        return self.__spot

    @spot.setter
    def spot(self, value: float):
        self._property_changed('spot')
        self.__spot = value        

    @property
    def application_id(self) -> str:
        """Client application identifier."""
        return self.__application_id

    @application_id.setter
    def application_id(self, value: str):
        self._property_changed('application_id')
        self.__application_id = value        

    @property
    def indicative_close_price(self) -> float:
        """Indicative close price of an asset forseen at end of the day."""
        return self.__indicative_close_price

    @indicative_close_price.setter
    def indicative_close_price(self, value: float):
        self._property_changed('indicative_close_price')
        self.__indicative_close_price = value        

    @property
    def swap_spread(self) -> float:
        """Swap spread."""
        return self.__swap_spread

    @swap_spread.setter
    def swap_spread(self, value: float):
        self._property_changed('swap_spread')
        self.__swap_spread = value        

    @property
    def trading_restriction(self) -> bool:
        """Whether or not the asset has trading restrictions."""
        return self.__trading_restriction

    @trading_restriction.setter
    def trading_restriction(self, value: bool):
        self._property_changed('trading_restriction')
        self.__trading_restriction = value        

    @property
    def asset_parameters_pay_or_receive(self) -> str:
        """Pay or receive fixed"""
        return self.__asset_parameters_pay_or_receive

    @asset_parameters_pay_or_receive.setter
    def asset_parameters_pay_or_receive(self, value: str):
        self._property_changed('asset_parameters_pay_or_receive')
        self.__asset_parameters_pay_or_receive = value        

    @property
    def price_spot_entry_unit(self) -> str:
        """Unit in which the opening price is reported."""
        return self.__price_spot_entry_unit

    @price_spot_entry_unit.setter
    def price_spot_entry_unit(self, value: str):
        self._property_changed('price_spot_entry_unit')
        self.__price_spot_entry_unit = value        

    @property
    def unrealized_arrival_performance_bps(self) -> float:
        """Average execution price vs Consolidated Arrival (in limit) since order inception
           ??? unrealized."""
        return self.__unrealized_arrival_performance_bps

    @unrealized_arrival_performance_bps.setter
    def unrealized_arrival_performance_bps(self, value: float):
        self._property_changed('unrealized_arrival_performance_bps')
        self.__unrealized_arrival_performance_bps = value        

    @property
    def city(self) -> str:
        """City for which the weather data was gathered."""
        return self.__city

    @city.setter
    def city(self, value: str):
        self._property_changed('city')
        self.__city = value        

    @property
    def pnl_wtd(self) -> float:
        """Total PnL Week to date."""
        return self.__pnl_wtd

    @pnl_wtd.setter
    def pnl_wtd(self, value: float):
        self._property_changed('pnl_wtd')
        self.__pnl_wtd = value        

    @property
    def covariance(self) -> float:
        """Covariance between two ."""
        return self.__covariance

    @covariance.setter
    def covariance(self, value: float):
        self._property_changed('covariance')
        self.__covariance = value        

    @property
    def bucket_volume_in_shares(self) -> float:
        """Forecast of the total volume of shares in the bucket."""
        return self.__bucket_volume_in_shares

    @bucket_volume_in_shares.setter
    def bucket_volume_in_shares(self, value: float):
        self._property_changed('bucket_volume_in_shares')
        self.__bucket_volume_in_shares = value        

    @property
    def commodity_forecast(self) -> float:
        """Commodity forecast value for the tenor, year or quarter."""
        return self.__commodity_forecast

    @commodity_forecast.setter
    def commodity_forecast(self, value: float):
        self._property_changed('commodity_forecast')
        self.__commodity_forecast = value        

    @property
    def valid(self) -> float:
        """Valid."""
        return self.__valid

    @valid.setter
    def valid(self, value: float):
        self._property_changed('valid')
        self.__valid = value        

    @property
    def sts_commodity(self) -> str:
        """Commodity name for STS assets."""
        return self.__sts_commodity

    @sts_commodity.setter
    def sts_commodity(self, value: str):
        self._property_changed('sts_commodity')
        self.__sts_commodity = value        

    @property
    def initial_pricing_date(self) -> datetime.date:
        """Initial pricing date for basket actions."""
        return self.__initial_pricing_date

    @initial_pricing_date.setter
    def initial_pricing_date(self, value: datetime.date):
        self._property_changed('initial_pricing_date')
        self.__initial_pricing_date = value        

    @property
    def indication_of_end_user_exception(self) -> str:
        """If buyer or seller or both is electing the End User Exception."""
        return self.__indication_of_end_user_exception

    @indication_of_end_user_exception.setter
    def indication_of_end_user_exception(self, value: str):
        self._property_changed('indication_of_end_user_exception')
        self.__indication_of_end_user_exception = value        

    @property
    def wind_direction_hourly_forecast(self) -> float:
        """The hourly forecast value for wind direction."""
        return self.__wind_direction_hourly_forecast

    @wind_direction_hourly_forecast.setter
    def wind_direction_hourly_forecast(self, value: float):
        self._property_changed('wind_direction_hourly_forecast')
        self.__wind_direction_hourly_forecast = value        

    @property
    def es_score(self) -> float:
        """A company's score for E&S subsector-relative metrics."""
        return self.__es_score

    @es_score.setter
    def es_score(self, value: float):
        self._property_changed('es_score')
        self.__es_score = value        

    @property
    def yield_(self) -> float:
        """The return an investor realizes on a bond sold at the mid price."""
        return self.__yield

    @yield_.setter
    def yield_(self, value: float):
        self._property_changed('yield_')
        self.__yield = value        

    @property
    def fatalities_underlying_conditions_present(self) -> float:
        """Total number of fatalities of people with underlying conditions."""
        return self.__fatalities_underlying_conditions_present

    @fatalities_underlying_conditions_present.setter
    def fatalities_underlying_conditions_present(self, value: float):
        self._property_changed('fatalities_underlying_conditions_present')
        self.__fatalities_underlying_conditions_present = value        

    @property
    def price_range_in_ticks(self) -> float:
        """The Price Range of the stock in Ticks on the particular date."""
        return self.__price_range_in_ticks

    @price_range_in_ticks.setter
    def price_range_in_ticks(self, value: float):
        self._property_changed('price_range_in_ticks')
        self.__price_range_in_ticks = value        

    @property
    def pace_of_rollp25(self) -> float:
        """The 25th-percentile of the pace of roll compared to previous quarters (over the
           last 5 years) at the same point in time, i.e. cross-sectional."""
        return self.__pace_of_rollp25

    @pace_of_rollp25.setter
    def pace_of_rollp25(self, value: float):
        self._property_changed('pace_of_rollp25')
        self.__pace_of_rollp25 = value        

    @property
    def day_close_realized_usd(self) -> float:
        """Realised performance vs Previous Close, in $."""
        return self.__day_close_realized_usd

    @day_close_realized_usd.setter
    def day_close_realized_usd(self, value: float):
        self._property_changed('day_close_realized_usd')
        self.__day_close_realized_usd = value        

    @property
    def pct_change(self) -> float:
        """Percentage change of the latest trade price or value from the adjusted
           historical close."""
        return self.__pct_change

    @pct_change.setter
    def pct_change(self, value: float):
        self._property_changed('pct_change')
        self.__pct_change = value        

    @property
    def brightness_type(self) -> str:
        """The type of measure required like visibility or sunshine."""
        return self.__brightness_type

    @brightness_type.setter
    def brightness_type(self, value: str):
        self._property_changed('brightness_type')
        self.__brightness_type = value        

    @property
    def future_month3_m(self) -> float:
        """Commods future month code."""
        return self.__future_month3_m

    @future_month3_m.setter
    def future_month3_m(self, value: float):
        self._property_changed('future_month3_m')
        self.__future_month3_m = value        

    @property
    def number_of_rolls(self) -> int:
        """Contract's number of rolls per year."""
        return self.__number_of_rolls

    @number_of_rolls.setter
    def number_of_rolls(self, value: int):
        self._property_changed('number_of_rolls')
        self.__number_of_rolls = value        

    @property
    def iso_country_code_numeric(self) -> float:
        """Iso numeric code."""
        return self.__iso_country_code_numeric

    @iso_country_code_numeric.setter
    def iso_country_code_numeric(self, value: float):
        self._property_changed('iso_country_code_numeric')
        self.__iso_country_code_numeric = value        

    @property
    def price_type(self) -> str:
        """Price denomination and unit."""
        return self.__price_type

    @price_type.setter
    def price_type(self, value: str):
        self._property_changed('price_type')
        self.__price_type = value        

    @property
    def realized_vwap_performance_usd(self) -> float:
        """Average execution price vs Consolidated VWAP (in limit) since order inception
           ??? realized in $."""
        return self.__realized_vwap_performance_usd

    @realized_vwap_performance_usd.setter
    def realized_vwap_performance_usd(self, value: float):
        self._property_changed('realized_vwap_performance_usd')
        self.__realized_vwap_performance_usd = value        

    @property
    def fuel_type(self) -> str:
        """The type of fuel used to generate electricity"""
        return self.__fuel_type

    @fuel_type.setter
    def fuel_type(self, value: str):
        self._property_changed('fuel_type')
        self.__fuel_type = value        

    @property
    def bbid(self) -> str:
        """Bloomberg identifier (ticker and exchange code)."""
        return self.__bbid

    @bbid.setter
    def bbid(self, value: str):
        self._property_changed('bbid')
        self.__bbid = value        

    @property
    def vega_notional_amount(self) -> float:
        """The notional for a variance swap."""
        return self.__vega_notional_amount

    @vega_notional_amount.setter
    def vega_notional_amount(self, value: float):
        self._property_changed('vega_notional_amount')
        self.__vega_notional_amount = value        

    @property
    def fatalities_underlying_conditions_absent(self) -> float:
        """Total number of fatalities of people with no underlying conditions."""
        return self.__fatalities_underlying_conditions_absent

    @fatalities_underlying_conditions_absent.setter
    def fatalities_underlying_conditions_absent(self, value: float):
        self._property_changed('fatalities_underlying_conditions_absent')
        self.__fatalities_underlying_conditions_absent = value        

    @property
    def effective_date(self) -> datetime.date:
        """The date at which the measure becomes effective."""
        return self.__effective_date

    @effective_date.setter
    def effective_date(self, value: datetime.date):
        self._property_changed('effective_date')
        self.__effective_date = value        

    @property
    def capped(self) -> str:
        """Whether a trade is capped at the block notional threshold."""
        return self.__capped

    @capped.setter
    def capped(self, value: str):
        self._property_changed('capped')
        self.__capped = value        

    @property
    def rating(self) -> str:
        """Analyst Rating, which may take on the following values."""
        return self.__rating

    @rating.setter
    def rating(self, value: str):
        self._property_changed('rating')
        self.__rating = value        

    @property
    def option_currency(self) -> str:
        """An indication of type of currency on the option premium."""
        return self.__option_currency

    @option_currency.setter
    def option_currency(self, value: str):
        self._property_changed('option_currency')
        self.__option_currency = value        

    @property
    def is_close_auction(self) -> bool:
        """Flag indicating whether the bucket is within the close auction or not."""
        return self.__is_close_auction

    @is_close_auction.setter
    def is_close_auction(self, value: bool):
        self._property_changed('is_close_auction')
        self.__is_close_auction = value        

    @property
    def volatility(self) -> float:
        """Market implied correlation between two tenors."""
        return self.__volatility

    @volatility.setter
    def volatility(self, value: float):
        self._property_changed('volatility')
        self.__volatility = value        

    @property
    def avg_vent_util(self) -> float:
        """Average number of patients on a ventilator per week."""
        return self.__avg_vent_util

    @avg_vent_util.setter
    def avg_vent_util(self, value: float):
        self._property_changed('avg_vent_util')
        self.__avg_vent_util = value        

    @property
    def underlying_asset_ids(self) -> Tuple[str, ...]:
        """Marquee IDs of the underlying assets."""
        return self.__underlying_asset_ids

    @underlying_asset_ids.setter
    def underlying_asset_ids(self, value: Tuple[str, ...]):
        self._property_changed('underlying_asset_ids')
        self.__underlying_asset_ids = value        

    @property
    def buy6point5bps(self) -> float:
        """The amount GS would buy for 6.5 bps charge."""
        return self.__buy6point5bps

    @buy6point5bps.setter
    def buy6point5bps(self, value: float):
        self._property_changed('buy6point5bps')
        self.__buy6point5bps = value        

    @property
    def vwap_in_limit_realized_cash(self) -> float:
        """Consolidated realised performance vs VWAP In Limit, in USD."""
        return self.__vwap_in_limit_realized_cash

    @vwap_in_limit_realized_cash.setter
    def vwap_in_limit_realized_cash(self, value: float):
        self._property_changed('vwap_in_limit_realized_cash')
        self.__vwap_in_limit_realized_cash = value        

    @property
    def estimated_closing_auction_volume(self) -> float:
        """Estimated closing auction volume."""
        return self.__estimated_closing_auction_volume

    @estimated_closing_auction_volume.setter
    def estimated_closing_auction_volume(self, value: float):
        self._property_changed('estimated_closing_auction_volume')
        self.__estimated_closing_auction_volume = value        

    @property
    def sell2bps(self) -> float:
        """The amount GS would sell for 2 bps charge."""
        return self.__sell2bps

    @sell2bps.setter
    def sell2bps(self, value: float):
        self._property_changed('sell2bps')
        self.__sell2bps = value        

    @property
    def annual_risk(self) -> float:
        """Annualized risk of a given portfolio, position or asset. Generally computed as
           annualized daily standard deviation of returns."""
        return self.__annual_risk

    @annual_risk.setter
    def annual_risk(self, value: float):
        self._property_changed('annual_risk')
        self.__annual_risk = value        

    @property
    def eti(self) -> str:
        """External Trade Identifier."""
        return self.__eti

    @eti.setter
    def eti(self, value: str):
        self._property_changed('eti')
        self.__eti = value        

    @property
    def vwap_in_limit_realized_bps(self) -> float:
        """Consolidated realised performance vs VWAP In Limit, in bps."""
        return self.__vwap_in_limit_realized_bps

    @vwap_in_limit_realized_bps.setter
    def vwap_in_limit_realized_bps(self, value: float):
        self._property_changed('vwap_in_limit_realized_bps')
        self.__vwap_in_limit_realized_bps = value        

    @property
    def rank_mtd(self) -> float:
        """Rank of the Contributor Month to Date."""
        return self.__rank_mtd

    @rank_mtd.setter
    def rank_mtd(self, value: float):
        self._property_changed('rank_mtd')
        self.__rank_mtd = value        

    @property
    def market_buffer(self) -> float:
        """The actual buffer between holdings and on loan quantity for a market."""
        return self.__market_buffer

    @market_buffer.setter
    def market_buffer(self, value: float):
        self._property_changed('market_buffer')
        self.__market_buffer = value        

    @property
    def future_month_j24(self) -> float:
        """Commods future month code."""
        return self.__future_month_j24

    @future_month_j24.setter
    def future_month_j24(self, value: float):
        self._property_changed('future_month_j24')
        self.__future_month_j24 = value        

    @property
    def last_uploaded_time(self) -> datetime.datetime:
        """Timestamp noting last uploaded datapoint."""
        return self.__last_uploaded_time

    @last_uploaded_time.setter
    def last_uploaded_time(self, value: datetime.datetime):
        self._property_changed('last_uploaded_time')
        self.__last_uploaded_time = value        

    @property
    def future_month_j23(self) -> float:
        """Commods future month code."""
        return self.__future_month_j23

    @future_month_j23.setter
    def future_month_j23(self, value: float):
        self._property_changed('future_month_j23')
        self.__future_month_j23 = value        

    @property
    def oe_id(self) -> str:
        """Marquee unique identifier"""
        return self.__oe_id

    @oe_id.setter
    def oe_id(self, value: str):
        self._property_changed('oe_id')
        self.__oe_id = value        

    @property
    def future_month_j22(self) -> float:
        """Commods future month code."""
        return self.__future_month_j22

    @future_month_j22.setter
    def future_month_j22(self, value: float):
        self._property_changed('future_month_j22')
        self.__future_month_j22 = value        

    @property
    def future_month_j21(self) -> float:
        """Commods future month code."""
        return self.__future_month_j21

    @future_month_j21.setter
    def future_month_j21(self, value: float):
        self._property_changed('future_month_j21')
        self.__future_month_j21 = value        

    @property
    def bbid_equivalent(self) -> str:
        """Bloomberg identifier (ticker and country code) equivalent - i.e. for OTCs
           options, the equivalent BBID on exchange."""
        return self.__bbid_equivalent

    @bbid_equivalent.setter
    def bbid_equivalent(self, value: str):
        self._property_changed('bbid_equivalent')
        self.__bbid_equivalent = value        

    @property
    def init_buffer_threshold_required(self) -> float:
        """The required buffer between holdings and on loan quantity for an asset on the
           date of loan initiation."""
        return self.__init_buffer_threshold_required

    @init_buffer_threshold_required.setter
    def init_buffer_threshold_required(self, value: float):
        self._property_changed('init_buffer_threshold_required')
        self.__init_buffer_threshold_required = value        

    @property
    def leg2_designated_maturity(self) -> str:
        """Floating rate index designated maturity period of leg 2."""
        return self.__leg2_designated_maturity

    @leg2_designated_maturity.setter
    def leg2_designated_maturity(self, value: str):
        self._property_changed('leg2_designated_maturity')
        self.__leg2_designated_maturity = value        

    @property
    def matched_maturity_ois_swap_rate(self) -> float:
        """Matched Maturity OIS swap rate."""
        return self.__matched_maturity_ois_swap_rate

    @matched_maturity_ois_swap_rate.setter
    def matched_maturity_ois_swap_rate(self, value: float):
        self._property_changed('matched_maturity_ois_swap_rate')
        self.__matched_maturity_ois_swap_rate = value        

    @property
    def fair_price(self) -> float:
        """Fair Price for a swap."""
        return self.__fair_price

    @fair_price.setter
    def fair_price(self, value: float):
        self._property_changed('fair_price')
        self.__fair_price = value        

    @property
    def participation_rate_in_limit(self) -> float:
        """Average in limit participation rate of the order, including principal fills."""
        return self.__participation_rate_in_limit

    @participation_rate_in_limit.setter
    def participation_rate_in_limit(self, value: float):
        self._property_changed('participation_rate_in_limit')
        self.__participation_rate_in_limit = value        

    @property
    def ext_mkt_class(self) -> str:
        """External MDAPI Class."""
        return self.__ext_mkt_class

    @ext_mkt_class.setter
    def ext_mkt_class(self, value: str):
        self._property_changed('ext_mkt_class')
        self.__ext_mkt_class = value        

    @property
    def price_currency(self) -> str:
        """Denominated pricing currency."""
        return self.__price_currency

    @price_currency.setter
    def price_currency(self, value: str):
        self._property_changed('price_currency')
        self.__price_currency = value        

    @property
    def failed_count(self) -> float:
        """Number of entities that failed the test."""
        return self.__failed_count

    @failed_count.setter
    def failed_count(self, value: float):
        self._property_changed('failed_count')
        self.__failed_count = value        

    @property
    def leg1_index_location(self) -> str:
        """Location of leg."""
        return self.__leg1_index_location

    @leg1_index_location.setter
    def leg1_index_location(self, value: str):
        self._property_changed('leg1_index_location')
        self.__leg1_index_location = value        

    @property
    def supra_strategy(self) -> str:
        """Broad descriptor of a fund's investment approach. Same view permissions as the
           asset"""
        return self.__supra_strategy

    @supra_strategy.setter
    def supra_strategy(self, value: str):
        self._property_changed('supra_strategy')
        self.__supra_strategy = value        

    @property
    def day_count_convention(self) -> str:
        """The determination of how interest accrues over time for the SB swap."""
        return self.__day_count_convention

    @day_count_convention.setter
    def day_count_convention(self, value: str):
        self._property_changed('day_count_convention')
        self.__day_count_convention = value        

    @property
    def rounded_notional_amount1(self) -> float:
        """The total Notional amount or quantity of units of the underlying asset."""
        return self.__rounded_notional_amount1

    @rounded_notional_amount1.setter
    def rounded_notional_amount1(self, value: float):
        self._property_changed('rounded_notional_amount1')
        self.__rounded_notional_amount1 = value        

    @property
    def rounded_notional_amount2(self) -> float:
        """Same as Rounded Notional Amount 1."""
        return self.__rounded_notional_amount2

    @rounded_notional_amount2.setter
    def rounded_notional_amount2(self, value: float):
        self._property_changed('rounded_notional_amount2')
        self.__rounded_notional_amount2 = value        

    @property
    def factor_source(self) -> str:
        """Factor source. One of: Axioma, Prime."""
        return self.__factor_source

    @factor_source.setter
    def factor_source(self, value: str):
        self._property_changed('factor_source')
        self.__factor_source = value        

    @property
    def future_month_j26(self) -> float:
        """Commods future month code."""
        return self.__future_month_j26

    @future_month_j26.setter
    def future_month_j26(self, value: float):
        self._property_changed('future_month_j26')
        self.__future_month_j26 = value        

    @property
    def lending_sec_type(self) -> str:
        """Securities lending identifiter for the security on loan."""
        return self.__lending_sec_type

    @lending_sec_type.setter
    def lending_sec_type(self, value: str):
        self._property_changed('lending_sec_type')
        self.__lending_sec_type = value        

    @property
    def future_month_j25(self) -> float:
        """Commods future month code."""
        return self.__future_month_j25

    @future_month_j25.setter
    def future_month_j25(self, value: float):
        self._property_changed('future_month_j25')
        self.__future_month_j25 = value        

    @property
    def leverage(self) -> float:
        """Leverage."""
        return self.__leverage

    @leverage.setter
    def leverage(self, value: float):
        self._property_changed('leverage')
        self.__leverage = value        

    @property
    def forecast_day(self) -> str:
        """The offset for forecast day for weather from today."""
        return self.__forecast_day

    @forecast_day.setter
    def forecast_day(self, value: str):
        self._property_changed('forecast_day')
        self.__forecast_day = value        

    @property
    def option_family(self) -> str:
        """Style of the option."""
        return self.__option_family

    @option_family.setter
    def option_family(self, value: str):
        self._property_changed('option_family')
        self.__option_family = value        

    @property
    def generator_output(self) -> float:
        """The output of an electricity generator in MW."""
        return self.__generator_output

    @generator_output.setter
    def generator_output(self, value: float):
        self._property_changed('generator_output')
        self.__generator_output = value        

    @property
    def price_spot_stop_loss_value(self) -> float:
        """Stop loss price value of the trade idea."""
        return self.__price_spot_stop_loss_value

    @price_spot_stop_loss_value.setter
    def price_spot_stop_loss_value(self, value: float):
        self._property_changed('price_spot_stop_loss_value')
        self.__price_spot_stop_loss_value = value        

    @property
    def kpi_id(self) -> str:
        """Marquee unique KPI identifier."""
        return self.__kpi_id

    @kpi_id.setter
    def kpi_id(self, value: str):
        self._property_changed('kpi_id')
        self.__kpi_id = value        

    @property
    def wind_generation(self) -> float:
        """Wind generation value provided by source."""
        return self.__wind_generation

    @wind_generation.setter
    def wind_generation(self, value: float):
        self._property_changed('wind_generation')
        self.__wind_generation = value        

    @property
    def percentage_mid_executed_quantity(self) -> float:
        """Percentage of total order filled at midpoint."""
        return self.__percentage_mid_executed_quantity

    @percentage_mid_executed_quantity.setter
    def percentage_mid_executed_quantity(self, value: float):
        self._property_changed('percentage_mid_executed_quantity')
        self.__percentage_mid_executed_quantity = value        

    @property
    def borrow_cost(self) -> float:
        """An indication of the rate one would be charged for borrowing/shorting the
           relevant asset on that day, expressed in bps. Rates may change daily."""
        return self.__borrow_cost

    @borrow_cost.setter
    def borrow_cost(self, value: float):
        self._property_changed('borrow_cost')
        self.__borrow_cost = value        

    @property
    def knock_out_direction(self) -> str:
        """The side of the knock-out price the market level must reach to trigger the knock
           out."""
        return self.__knock_out_direction

    @knock_out_direction.setter
    def knock_out_direction(self, value: str):
        self._property_changed('knock_out_direction')
        self.__knock_out_direction = value        

    @property
    def risk_model(self) -> str:
        """Model used to compute risk or performance attribution. Defines universe,
           factors, calibration period etc."""
        return self.__risk_model

    @risk_model.setter
    def risk_model(self, value: str):
        self._property_changed('risk_model')
        self.__risk_model = value        

    @property
    def asset_parameters_vendor(self) -> str:
        """Marquee unique identifier"""
        return self.__asset_parameters_vendor

    @asset_parameters_vendor.setter
    def asset_parameters_vendor(self, value: str):
        self._property_changed('asset_parameters_vendor')
        self.__asset_parameters_vendor = value        

    @property
    def fair_value(self) -> float:
        """Fair Value."""
        return self.__fair_value

    @fair_value.setter
    def fair_value(self, value: float):
        self._property_changed('fair_value')
        self.__fair_value = value        

    @property
    def open_time(self) -> datetime.datetime:
        """Time opened. ISO 8601 formatted string."""
        return self.__open_time

    @open_time.setter
    def open_time(self, value: datetime.datetime):
        self._property_changed('open_time')
        self.__open_time = value        

    @property
    def pressure_hourly_forecast(self) -> float:
        """The hourly forecast value for pressure in Inch."""
        return self.__pressure_hourly_forecast

    @pressure_hourly_forecast.setter
    def pressure_hourly_forecast(self, value: float):
        self._property_changed('pressure_hourly_forecast')
        self.__pressure_hourly_forecast = value        

    @property
    def local_ccy_rate(self) -> float:
        """The interest rate of the local currency of the associated FX contract."""
        return self.__local_ccy_rate

    @local_ccy_rate.setter
    def local_ccy_rate(self, value: float):
        self._property_changed('local_ccy_rate')
        self.__local_ccy_rate = value        

    @property
    def end_user_exception(self) -> str:
        """If buyer or seller or both is electing the End User Exception."""
        return self.__end_user_exception

    @end_user_exception.setter
    def end_user_exception(self, value: str):
        self._property_changed('end_user_exception')
        self.__end_user_exception = value        

    @property
    def sell90cents(self) -> float:
        """The amount GS would sell for 90 cents charge."""
        return self.__sell90cents

    @sell90cents.setter
    def sell90cents(self, value: float):
        self._property_changed('sell90cents')
        self.__sell90cents = value        

    @property
    def execution_venue(self) -> str:
        """An indication of whether the SB swap transaction was executed on a registered
           swap execution facility or designated contract market or was executed
           as an off-facility swap."""
        return self.__execution_venue

    @execution_venue.setter
    def execution_venue(self, value: str):
        self._property_changed('execution_venue')
        self.__execution_venue = value        

    @property
    def non_standardized_pricing_indicator(self) -> str:
        """Indicator of whether the swap has one or more additional terms or provisions,
           other than those disseminated to the public pursuant that materially
           affects the price of the swap."""
        return self.__non_standardized_pricing_indicator

    @non_standardized_pricing_indicator.setter
    def non_standardized_pricing_indicator(self, value: str):
        self._property_changed('non_standardized_pricing_indicator')
        self.__non_standardized_pricing_indicator = value        

    @property
    def primary_vwap_in_limit_realized_bps(self) -> float:
        """Realised performance vs Primary VWAP In Limit, in bps."""
        return self.__primary_vwap_in_limit_realized_bps

    @primary_vwap_in_limit_realized_bps.setter
    def primary_vwap_in_limit_realized_bps(self, value: float):
        self._property_changed('primary_vwap_in_limit_realized_bps')
        self.__primary_vwap_in_limit_realized_bps = value        

    @property
    def approve_rebalance(self) -> bool:
        """An approved basket."""
        return self.__approve_rebalance

    @approve_rebalance.setter
    def approve_rebalance(self, value: bool):
        self._property_changed('approve_rebalance')
        self.__approve_rebalance = value        

    @property
    def adjusted_close_price(self) -> float:
        """Closing Price adjusted for corporate actions."""
        return self.__adjusted_close_price

    @adjusted_close_price.setter
    def adjusted_close_price(self, value: float):
        self._property_changed('adjusted_close_price')
        self.__adjusted_close_price = value        

    @property
    def lms_id(self) -> str:
        """Market identifier code."""
        return self.__lms_id

    @lms_id.setter
    def lms_id(self, value: str):
        self._property_changed('lms_id')
        self.__lms_id = value        

    @property
    def rebate_rate(self) -> float:
        """Defines the rate of the cash-back payment to an investor who puts up collateral
           in borrowing a stock. A rebate rate of interest implies a fee for the
           loan of securities."""
        return self.__rebate_rate

    @rebate_rate.setter
    def rebate_rate(self, value: float):
        self._property_changed('rebate_rate')
        self.__rebate_rate = value        

    @property
    def sell130cents(self) -> float:
        """The amount GS would sell for 130 cents charge."""
        return self.__sell130cents

    @sell130cents.setter
    def sell130cents(self, value: float):
        self._property_changed('sell130cents')
        self.__sell130cents = value        

    @property
    def price_unit_of_measure1(self) -> str:
        """Basis points, Price, Yield, Spread, Coupon, etc., depending on the type of SB
           swap, which is calculated at affirmation."""
        return self.__price_unit_of_measure1

    @price_unit_of_measure1.setter
    def price_unit_of_measure1(self, value: str):
        self._property_changed('price_unit_of_measure1')
        self.__price_unit_of_measure1 = value        

    @property
    def sell32bps(self) -> float:
        """The amount GS would sell for 32 bps charge."""
        return self.__sell32bps

    @sell32bps.setter
    def sell32bps(self, value: float):
        self._property_changed('sell32bps')
        self.__sell32bps = value        

    @property
    def pace_of_rollp50(self) -> float:
        """The 50th-percentile of the pace of roll compared to previous quarters (over the
           last 5 years) at the same point in time, i.e. cross-sectional."""
        return self.__pace_of_rollp50

    @pace_of_rollp50.setter
    def pace_of_rollp50(self, value: float):
        self._property_changed('pace_of_rollp50')
        self.__pace_of_rollp50 = value        

    @property
    def price_move_vs_arrival(self) -> float:
        """Stock price return versus arrival price return (in bps)."""
        return self.__price_move_vs_arrival

    @price_move_vs_arrival.setter
    def price_move_vs_arrival(self, value: float):
        self._property_changed('price_move_vs_arrival')
        self.__price_move_vs_arrival = value        

    @property
    def strike_relative(self) -> Union[float, str]:
        """Strike as value, percent or at-the-money e.g. 62.5, 95%, ATM-25, ATMF, 10/vol,
           100k/pv, p=10000, p=10000USD, $200K/BP, or multiple strikes
           65.4/-45.8"""
        return self.__strike_relative

    @strike_relative.setter
    def strike_relative(self, value: Union[float, str]):
        self._property_changed('strike_relative')
        self.__strike_relative = value        

    @property
    def pressure_type(self) -> str:
        """The type of pressure required like sea level or barometric."""
        return self.__pressure_type

    @pressure_type.setter
    def pressure_type(self, value: str):
        self._property_changed('pressure_type')
        self.__pressure_type = value        

    @property
    def buy40bps(self) -> float:
        """The amount GS would buy for 40 bps charge."""
        return self.__buy40bps

    @buy40bps.setter
    def buy40bps(self, value: float):
        self._property_changed('buy40bps')
        self.__buy40bps = value        

    @property
    def price_notation(self) -> float:
        """The Basis points, Price, Yield, Spread, Coupon, etc., value depending on the
           type of SB swap, which is calculated at affirmation."""
        return self.__price_notation

    @price_notation.setter
    def price_notation(self, value: float):
        self._property_changed('price_notation')
        self.__price_notation = value        

    @property
    def strategy(self) -> str:
        """More specific descriptor of a fund's investment approach. Same view permissions
           as the asset."""
        return self.__strategy

    @strategy.setter
    def strategy(self, value: str):
        self._property_changed('strategy')
        self.__strategy = value        

    @property
    def price_unit_of_measure2(self) -> str:
        """Basis points, Price, Yield, Spread, Coupon, etc., depending on the type of SB
           swap, which is calculated at affirmation."""
        return self.__price_unit_of_measure2

    @price_unit_of_measure2.setter
    def price_unit_of_measure2(self, value: str):
        self._property_changed('price_unit_of_measure2')
        self.__price_unit_of_measure2 = value        

    @property
    def issue_status_date(self) -> datetime.date:
        """ISO 8601-formatted date"""
        return self.__issue_status_date

    @issue_status_date.setter
    def issue_status_date(self, value: datetime.date):
        self._property_changed('issue_status_date')
        self.__issue_status_date = value        

    @property
    def lender_income(self) -> float:
        """Income earned by the Lender for the loan of securities to a borrower."""
        return self.__lender_income

    @lender_income.setter
    def lender_income(self, value: float):
        self._property_changed('lender_income')
        self.__lender_income = value        

    @property
    def pb_client_id(self) -> str:
        """Prime Brokerage client identifier."""
        return self.__pb_client_id

    @pb_client_id.setter
    def pb_client_id(self, value: str):
        self._property_changed('pb_client_id')
        self.__pb_client_id = value        

    @property
    def istat_region_code(self) -> float:
        """Italian region code (ISTAT 2019)."""
        return self.__istat_region_code

    @istat_region_code.setter
    def istat_region_code(self, value: float):
        self._property_changed('istat_region_code')
        self.__istat_region_code = value        

    @property
    def sell9bps(self) -> float:
        """The amount GS would sell for 9 bps charge."""
        return self.__sell9bps

    @sell9bps.setter
    def sell9bps(self, value: float):
        self._property_changed('sell9bps')
        self.__sell9bps = value        

    @property
    def owner_id(self) -> str:
        """Marquee unique identifier for user who owns the object."""
        return self.__owner_id

    @owner_id.setter
    def owner_id(self, value: str):
        self._property_changed('owner_id')
        self.__owner_id = value        

    @property
    def composite10_day_adv(self) -> float:
        """Composite 10 day ADV."""
        return self.__composite10_day_adv

    @composite10_day_adv.setter
    def composite10_day_adv(self, value: float):
        self._property_changed('composite10_day_adv')
        self.__composite10_day_adv = value        

    @property
    def max_loan_balance(self) -> float:
        """The maximum allowable balance that can be lent out for a lender."""
        return self.__max_loan_balance

    @max_loan_balance.setter
    def max_loan_balance(self, value: float):
        self._property_changed('max_loan_balance')
        self.__max_loan_balance = value        

    @property
    def idea_activity_type(self) -> str:
        """Equals CorporateAction if the activity originates as a result of a corporate
           action. Equals GovernanceAction if the activity originates as a
           result of a control measure. Equals UserAction if the activity is
           user driven."""
        return self.__idea_activity_type

    @idea_activity_type.setter
    def idea_activity_type(self, value: str):
        self._property_changed('idea_activity_type')
        self.__idea_activity_type = value        

    @property
    def sell60cents(self) -> float:
        """The amount GS would sell for 60 cents charge."""
        return self.__sell60cents

    @sell60cents.setter
    def sell60cents(self, value: float):
        self._property_changed('sell60cents')
        self.__sell60cents = value        

    @property
    def idea_source(self) -> str:
        """Equals User if the idea activity originates from a sales person. Equals System
           if the idea activity is system generated."""
        return self.__idea_source

    @idea_source.setter
    def idea_source(self, value: str):
        self._property_changed('idea_source')
        self.__idea_source = value        

    @property
    def ever_on_vent(self) -> float:
        """Total number of patients ever on ventilator for COVID."""
        return self.__ever_on_vent

    @ever_on_vent.setter
    def ever_on_vent(self, value: float):
        self._property_changed('ever_on_vent')
        self.__ever_on_vent = value        

    @property
    def buy15cents(self) -> float:
        """The amount GS would buy for 15 cents charge."""
        return self.__buy15cents

    @buy15cents.setter
    def buy15cents(self, value: float):
        self._property_changed('buy15cents')
        self.__buy15cents = value        

    @property
    def unadjusted_ask(self) -> float:
        """Unadjusted ask level of an asset based on official exchange fixing or
           calculation agent marked level."""
        return self.__unadjusted_ask

    @unadjusted_ask.setter
    def unadjusted_ask(self, value: float):
        self._property_changed('unadjusted_ask')
        self.__unadjusted_ask = value        

    @property
    def contribution_name(self) -> str:
        """Sector or type group name for the corresponding geography when metricName is
           either CAI_CONTRIBUTION_SECTOR or CAI_CONTRIBUTION_TYPE."""
        return self.__contribution_name

    @contribution_name.setter
    def contribution_name(self, value: str):
        self._property_changed('contribution_name')
        self.__contribution_name = value        

    @property
    def given_plus_paid(self) -> float:
        """Total of given & paid."""
        return self.__given_plus_paid

    @given_plus_paid.setter
    def given_plus_paid(self, value: float):
        self._property_changed('given_plus_paid')
        self.__given_plus_paid = value        

    @property
    def last_fill_price(self) -> float:
        """Last execution price."""
        return self.__last_fill_price

    @last_fill_price.setter
    def last_fill_price(self, value: float):
        self._property_changed('last_fill_price')
        self.__last_fill_price = value        

    @property
    def sopr_out(self) -> float:
        """For this version, a spent output???s ???spent value??? is the market value of
           that output (i.e., price multiplied by 1). A created output???s
           ???creation value??? is the market value of that output (i.e., price
           multiplied by 1)."""
        return self.__sopr_out

    @sopr_out.setter
    def sopr_out(self, value: float):
        self._property_changed('sopr_out')
        self.__sopr_out = value        

    @property
    def short_conviction_small(self) -> float:
        """The count of short ideas with small conviction."""
        return self.__short_conviction_small

    @short_conviction_small.setter
    def short_conviction_small(self, value: float):
        self._property_changed('short_conviction_small')
        self.__short_conviction_small = value        

    @property
    def upfront_payment_currency(self) -> str:
        """Currency of upfront payment."""
        return self.__upfront_payment_currency

    @upfront_payment_currency.setter
    def upfront_payment_currency(self, value: str):
        self._property_changed('upfront_payment_currency')
        self.__upfront_payment_currency = value        

    @property
    def spot_settlement_date(self) -> datetime.date:
        """The settlement date for a spot FX trade."""
        return self.__spot_settlement_date

    @spot_settlement_date.setter
    def spot_settlement_date(self, value: datetime.date):
        self._property_changed('spot_settlement_date')
        self.__spot_settlement_date = value        

    @property
    def matrix_order(self) -> float:
        """The matrix col/row order. Number from 0-249."""
        return self.__matrix_order

    @matrix_order.setter
    def matrix_order(self, value: float):
        self._property_changed('matrix_order')
        self.__matrix_order = value        

    @property
    def day_close(self) -> float:
        """The day close."""
        return self.__day_close

    @day_close.setter
    def day_close(self, value: float):
        self._property_changed('day_close')
        self.__day_close = value        

    @property
    def date_index(self) -> float:
        """For a rates asset, represents the proxy for a meeting number."""
        return self.__date_index

    @date_index.setter
    def date_index(self, value: float):
        self._property_changed('date_index')
        self.__date_index = value        

    @property
    def payer_day_count_fraction(self) -> str:
        """Day Count Fraction"""
        return self.__payer_day_count_fraction

    @payer_day_count_fraction.setter
    def payer_day_count_fraction(self, value: str):
        self._property_changed('payer_day_count_fraction')
        self.__payer_day_count_fraction = value        

    @property
    def asset_classifications_is_primary(self) -> bool:
        """Whether or not it is the primary exchange asset."""
        return self.__asset_classifications_is_primary

    @asset_classifications_is_primary.setter
    def asset_classifications_is_primary(self, value: bool):
        self._property_changed('asset_classifications_is_primary')
        self.__asset_classifications_is_primary = value        

    @property
    def break_even_inflation_change(self) -> float:
        """Break even inflation change."""
        return self.__break_even_inflation_change

    @break_even_inflation_change.setter
    def break_even_inflation_change(self, value: float):
        self._property_changed('break_even_inflation_change')
        self.__break_even_inflation_change = value        

    @property
    def buy130cents(self) -> float:
        """The amount GS would buy for 130 cents charge."""
        return self.__buy130cents

    @buy130cents.setter
    def buy130cents(self, value: float):
        self._property_changed('buy130cents')
        self.__buy130cents = value        

    @property
    def dwi_contribution(self) -> float:
        """Contribution of debt weighted exchange rate index to FCI. Only applicable to EM
           countries."""
        return self.__dwi_contribution

    @dwi_contribution.setter
    def dwi_contribution(self, value: float):
        self._property_changed('dwi_contribution')
        self.__dwi_contribution = value        

    @property
    def asset2_id(self) -> str:
        """Marquee unique asset identifier."""
        return self.__asset2_id

    @asset2_id.setter
    def asset2_id(self, value: str):
        self._property_changed('asset2_id')
        self.__asset2_id = value        

    @property
    def economic_forecasts(self) -> float:
        """Forecast value."""
        return self.__economic_forecasts

    @economic_forecasts.setter
    def economic_forecasts(self, value: float):
        self._property_changed('economic_forecasts')
        self.__economic_forecasts = value        

    @property
    def average_fill_price(self) -> float:
        """Average fill price for the order since it started."""
        return self.__average_fill_price

    @average_fill_price.setter
    def average_fill_price(self, value: float):
        self._property_changed('average_fill_price')
        self.__average_fill_price = value        

    @property
    def depth_spread_score(self) -> float:
        """Z-score of the difference between the mid price and the best price an order to
           buy or sell a specific notional can be filled at."""
        return self.__depth_spread_score

    @depth_spread_score.setter
    def depth_spread_score(self, value: float):
        self._property_changed('depth_spread_score')
        self.__depth_spread_score = value        

    @property
    def sell10cents(self) -> float:
        """The amount GS would sell for 10 cents charge."""
        return self.__sell10cents

    @sell10cents.setter
    def sell10cents(self, value: float):
        self._property_changed('sell10cents')
        self.__sell10cents = value        

    @property
    def sub_account(self) -> str:
        """Subaccount."""
        return self.__sub_account

    @sub_account.setter
    def sub_account(self, value: str):
        self._property_changed('sub_account')
        self.__sub_account = value        

    @property
    def buy65cents(self) -> float:
        """The amount GS would buy for 65 cents charge."""
        return self.__buy65cents

    @buy65cents.setter
    def buy65cents(self, value: float):
        self._property_changed('buy65cents')
        self.__buy65cents = value        

    @property
    def bond_cds_basis(self) -> float:
        """Difference between bond spread and underlying cds of the bond."""
        return self.__bond_cds_basis

    @bond_cds_basis.setter
    def bond_cds_basis(self, value: float):
        self._property_changed('bond_cds_basis')
        self.__bond_cds_basis = value        

    @property
    def vendor(self) -> Union[Union[MarketDataVendor, str], str]:
        return self.__vendor

    @vendor.setter
    def vendor(self, value: Union[Union[MarketDataVendor, str], str]):
        self._property_changed('vendor')
        self.__vendor = get_enum_value(MarketDataVendor, value)        

    @property
    def data_set(self) -> str:
        """Unique id of dataset."""
        return self.__data_set

    @data_set.setter
    def data_set(self, value: str):
        self._property_changed('data_set')
        self.__data_set = value        

    @property
    def total_notional_quantity2(self) -> float:
        """For leg 2 of the transaction, where applicable, aggregate Notional quantity of
           the underlying asset for the term of the transaction."""
        return self.__total_notional_quantity2

    @total_notional_quantity2.setter
    def total_notional_quantity2(self, value: float):
        self._property_changed('total_notional_quantity2')
        self.__total_notional_quantity2 = value        

    @property
    def total_notional_quantity1(self) -> float:
        """For leg 1 of the transaction, where applicable, aggregate Notional quantity of
           the underlying asset for the term of the transaction."""
        return self.__total_notional_quantity1

    @total_notional_quantity1.setter
    def total_notional_quantity1(self, value: float):
        self._property_changed('total_notional_quantity1')
        self.__total_notional_quantity1 = value        

    @property
    def notional_amount2(self) -> float:
        """The total Notional amount or quantity of units of the underlying asset."""
        return self.__notional_amount2

    @notional_amount2.setter
    def notional_amount2(self, value: float):
        self._property_changed('notional_amount2')
        self.__notional_amount2 = value        

    @property
    def notional_amount1(self) -> float:
        """The total Notional amount or quantity of units of the underlying asset."""
        return self.__notional_amount1

    @notional_amount1.setter
    def notional_amount1(self, value: float):
        self._property_changed('notional_amount1')
        self.__notional_amount1 = value        

    @property
    def queueing_time(self) -> int:
        """Time for which risk calculation was queued (ms)."""
        return self.__queueing_time

    @queueing_time.setter
    def queueing_time(self, value: int):
        self._property_changed('queueing_time')
        self.__queueing_time = value        

    @property
    def ann_return5_year(self) -> float:
        """Total return representing past performance, used for GS Money Market onshore
           funds, over five years."""
        return self.__ann_return5_year

    @ann_return5_year.setter
    def ann_return5_year(self, value: float):
        self._property_changed('ann_return5_year')
        self.__ann_return5_year = value        

    @property
    def volume_start_of_day(self) -> float:
        """Start of day forecast of daily volume."""
        return self.__volume_start_of_day

    @volume_start_of_day.setter
    def volume_start_of_day(self, value: float):
        self._property_changed('volume_start_of_day')
        self.__volume_start_of_day = value        

    @property
    def price_notation3_type(self) -> str:
        """Basis points, Price, Yield, Spread, Coupon, etc., depending on the type of SB
           swap, which is calculated at affirmation."""
        return self.__price_notation3_type

    @price_notation3_type.setter
    def price_notation3_type(self, value: str):
        self._property_changed('price_notation3_type')
        self.__price_notation3_type = value        

    @property
    def asset_parameters_floating_rate_designated_maturity(self) -> str:
        """Tenor"""
        return self.__asset_parameters_floating_rate_designated_maturity

    @asset_parameters_floating_rate_designated_maturity.setter
    def asset_parameters_floating_rate_designated_maturity(self, value: str):
        self._property_changed('asset_parameters_floating_rate_designated_maturity')
        self.__asset_parameters_floating_rate_designated_maturity = value        

    @property
    def executed_notional_local(self) -> float:
        """Executed notional in local currency."""
        return self.__executed_notional_local

    @executed_notional_local.setter
    def executed_notional_local(self, value: float):
        self._property_changed('executed_notional_local')
        self.__executed_notional_local = value        

    @property
    def business_sponsor(self) -> str:
        """Business Sponsor."""
        return self.__business_sponsor

    @business_sponsor.setter
    def business_sponsor(self, value: str):
        self._property_changed('business_sponsor')
        self.__business_sponsor = value        

    @property
    def unexplained(self) -> float:
        """PNL unexplained by risk model."""
        return self.__unexplained

    @unexplained.setter
    def unexplained(self, value: float):
        self._property_changed('unexplained')
        self.__unexplained = value        

    @property
    def seasonal_adjustment_short(self) -> str:
        """Seasonal adjustment of series."""
        return self.__seasonal_adjustment_short

    @seasonal_adjustment_short.setter
    def seasonal_adjustment_short(self, value: str):
        self._property_changed('seasonal_adjustment_short')
        self.__seasonal_adjustment_short = value        

    @property
    def metric(self) -> str:
        """Metric for the associated asset."""
        return self.__metric

    @metric.setter
    def metric(self, value: str):
        self._property_changed('metric')
        self.__metric = value        

    @property
    def ask(self) -> float:
        """Latest Ask Price (price offering to sell)."""
        return self.__ask

    @ask.setter
    def ask(self, value: float):
        self._property_changed('ask')
        self.__ask = value        

    @property
    def close_price(self) -> float:
        """Closing level of an asset based on official exchange fixing or calculation agent
           marked level."""
        return self.__close_price

    @close_price.setter
    def close_price(self, value: float):
        self._property_changed('close_price')
        self.__close_price = value        

    @property
    def end_time(self) -> datetime.datetime:
        """End time."""
        return self.__end_time

    @end_time.setter
    def end_time(self, value: datetime.datetime):
        self._property_changed('end_time')
        self.__end_time = value        

    @property
    def sell100cents(self) -> float:
        """The amount GS would sell for 100 cents charge."""
        return self.__sell100cents

    @sell100cents.setter
    def sell100cents(self, value: float):
        self._property_changed('sell100cents')
        self.__sell100cents = value        

    @property
    def execution_timestamp(self) -> datetime.datetime:
        """The time and date of execution of the publicly reportable swap transaction in
           Coordinated Universal Time (UTC - CCYY-MMDDThh:mm:ss)."""
        return self.__execution_timestamp

    @execution_timestamp.setter
    def execution_timestamp(self, value: datetime.datetime):
        self._property_changed('execution_timestamp')
        self.__execution_timestamp = value        

    @property
    def buy180cents(self) -> float:
        """The amount GS would buy for 180 cents charge."""
        return self.__buy180cents

    @buy180cents.setter
    def buy180cents(self, value: float):
        self._property_changed('buy180cents')
        self.__buy180cents = value        

    @property
    def absolute_strike(self) -> float:
        """Actual strike value specified in outright terms."""
        return self.__absolute_strike

    @absolute_strike.setter
    def absolute_strike(self, value: float):
        self._property_changed('absolute_strike')
        self.__absolute_strike = value        

    @property
    def sell3point5bps(self) -> float:
        """The amount GS would sell for 3.5 bps charge."""
        return self.__sell3point5bps

    @sell3point5bps.setter
    def sell3point5bps(self, value: float):
        self._property_changed('sell3point5bps')
        self.__sell3point5bps = value        

    @property
    def liquidity_score_buy(self) -> float:
        """The liquidity score assigned to buying the bond."""
        return self.__liquidity_score_buy

    @liquidity_score_buy.setter
    def liquidity_score_buy(self, value: float):
        self._property_changed('liquidity_score_buy')
        self.__liquidity_score_buy = value        

    @property
    def payment_frequency(self) -> str:
        """An integer multiplier of a time period describing how often the parties to the
           SB swap transaction exchange payments associated with each party???s
           obligation. Such payment frequency may be described as one letter
           preceded by an integer."""
        return self.__payment_frequency

    @payment_frequency.setter
    def payment_frequency(self, value: str):
        self._property_changed('payment_frequency')
        self.__payment_frequency = value        

    @property
    def expense_ratio_net_bps(self) -> float:
        """Gives basis point measure of management fee, net."""
        return self.__expense_ratio_net_bps

    @expense_ratio_net_bps.setter
    def expense_ratio_net_bps(self, value: float):
        self._property_changed('expense_ratio_net_bps')
        self.__expense_ratio_net_bps = value        

    @property
    def metric_type(self) -> str:
        """Type of the metric."""
        return self.__metric_type

    @metric_type.setter
    def metric_type(self, value: str):
        self._property_changed('metric_type')
        self.__metric_type = value        

    @property
    def rank_ytd(self) -> float:
        """Rank of the Contributor Year to Date."""
        return self.__rank_ytd

    @rank_ytd.setter
    def rank_ytd(self, value: float):
        self._property_changed('rank_ytd')
        self.__rank_ytd = value        

    @property
    def leg1_spread(self) -> float:
        """Spread of leg."""
        return self.__leg1_spread

    @leg1_spread.setter
    def leg1_spread(self, value: float):
        self._property_changed('leg1_spread')
        self.__leg1_spread = value        

    @property
    def coverage_region(self) -> str:
        """Coverage Region of a contributor."""
        return self.__coverage_region

    @coverage_region.setter
    def coverage_region(self, value: str):
        self._property_changed('coverage_region')
        self.__coverage_region = value        

    @property
    def absolute_return_ytd(self) -> float:
        """Absolute Return Year to Date."""
        return self.__absolute_return_ytd

    @absolute_return_ytd.setter
    def absolute_return_ytd(self, value: float):
        self._property_changed('absolute_return_ytd')
        self.__absolute_return_ytd = value        

    @property
    def day_count_convention2(self) -> str:
        """Day count convention for leg 2."""
        return self.__day_count_convention2

    @day_count_convention2.setter
    def day_count_convention2(self, value: str):
        self._property_changed('day_count_convention2')
        self.__day_count_convention2 = value        

    @property
    def fwdtier(self) -> str:
        """Forward tier."""
        return self.__fwdtier

    @fwdtier.setter
    def fwdtier(self, value: str):
        self._property_changed('fwdtier')
        self.__fwdtier = value        

    @property
    def degree_days(self) -> float:
        """Value of the temperature of given type."""
        return self.__degree_days

    @degree_days.setter
    def degree_days(self, value: float):
        self._property_changed('degree_days')
        self.__degree_days = value        

    @property
    def turnover_adjusted(self) -> float:
        """Turnover adjusted for corporate actions."""
        return self.__turnover_adjusted

    @turnover_adjusted.setter
    def turnover_adjusted(self, value: float):
        self._property_changed('turnover_adjusted')
        self.__turnover_adjusted = value        

    @property
    def price_spot_target_value(self) -> float:
        """Target price value of the trade idea."""
        return self.__price_spot_target_value

    @price_spot_target_value.setter
    def price_spot_target_value(self, value: float):
        self._property_changed('price_spot_target_value')
        self.__price_spot_target_value = value        

    @property
    def market_data_point(self) -> Tuple[Tuple[str, ...], ...]:
        """The market data point (e.g. 3m, 10y, 11y, Dec19)."""
        return self.__market_data_point

    @market_data_point.setter
    def market_data_point(self, value: Tuple[Tuple[str, ...], ...]):
        self._property_changed('market_data_point')
        self.__market_data_point = value        

    @property
    def num_of_funds(self) -> float:
        """Number of funds used for aggregation for a given period."""
        return self.__num_of_funds

    @num_of_funds.setter
    def num_of_funds(self, value: float):
        self._property_changed('num_of_funds')
        self.__num_of_funds = value        

    @property
    def trade_time(self) -> datetime.datetime:
        """Trade Time."""
        return self.__trade_time

    @trade_time.setter
    def trade_time(self, value: datetime.datetime):
        self._property_changed('trade_time')
        self.__trade_time = value        

    @property
    def execution_id(self) -> str:
        """Execution ID."""
        return self.__execution_id

    @execution_id.setter
    def execution_id(self, value: str):
        self._property_changed('execution_id')
        self.__execution_id = value        

    @property
    def turnover_unadjusted(self) -> float:
        """Turnover not adjusted for corporate actions."""
        return self.__turnover_unadjusted

    @turnover_unadjusted.setter
    def turnover_unadjusted(self, value: float):
        self._property_changed('turnover_unadjusted')
        self.__turnover_unadjusted = value        

    @property
    def leg1_floating_index(self) -> str:
        """If floating index leg, the index."""
        return self.__leg1_floating_index

    @leg1_floating_index.setter
    def leg1_floating_index(self, value: str):
        self._property_changed('leg1_floating_index')
        self.__leg1_floating_index = value        

    @property
    def hedge_annualized_volatility(self) -> float:
        """Standard deviation of the annualized returns."""
        return self.__hedge_annualized_volatility

    @hedge_annualized_volatility.setter
    def hedge_annualized_volatility(self, value: float):
        self._property_changed('hedge_annualized_volatility')
        self.__hedge_annualized_volatility = value        

    @property
    def benchmark_currency(self) -> str:
        """Currency, ISO 4217 currency code or exchange quote modifier (e.g. GBP vs GBp)"""
        return self.__benchmark_currency

    @benchmark_currency.setter
    def benchmark_currency(self, value: str):
        self._property_changed('benchmark_currency')
        self.__benchmark_currency = value        

    @property
    def futures_contract(self) -> str:
        """The related futures contract code if applicable."""
        return self.__futures_contract

    @futures_contract.setter
    def futures_contract(self, value: str):
        self._property_changed('futures_contract')
        self.__futures_contract = value        

    @property
    def name(self) -> str:
        """Legal or published name for the asset."""
        return self.__name

    @name.setter
    def name(self, value: str):
        self._property_changed('name')
        self.__name = value        

    @property
    def aum(self) -> Union[Op, float]:
        return self.__aum

    @aum.setter
    def aum(self, value: Union[Op, float]):
        self._property_changed('aum')
        self.__aum = value        

    @property
    def leg1_day_count_convention(self) -> str:
        """The determination of how interest accrues over time for the SB swap."""
        return self.__leg1_day_count_convention

    @leg1_day_count_convention.setter
    def leg1_day_count_convention(self, value: str):
        self._property_changed('leg1_day_count_convention')
        self.__leg1_day_count_convention = value        

    @property
    def cbs_code(self) -> str:
        """CBS Code for Municipality in Netherlands."""
        return self.__cbs_code

    @cbs_code.setter
    def cbs_code(self, value: str):
        self._property_changed('cbs_code')
        self.__cbs_code = value        

    @property
    def folder_name(self) -> str:
        """Folder Name of a chart."""
        return self.__folder_name

    @folder_name.setter
    def folder_name(self, value: str):
        self._property_changed('folder_name')
        self.__folder_name = value        

    @property
    def api_usage(self) -> float:
        """Usage Metrics for a given client entity based on specified service and metrics
           feature."""
        return self.__api_usage

    @api_usage.setter
    def api_usage(self, value: float):
        self._property_changed('api_usage')
        self.__api_usage = value        

    @property
    def twap_interval(self) -> float:
        """Time interval (in milliseconds) at which a TWAP attempts to fill."""
        return self.__twap_interval

    @twap_interval.setter
    def twap_interval(self, value: float):
        self._property_changed('twap_interval')
        self.__twap_interval = value        

    @property
    def payment_frequency_period1(self) -> str:
        """A time period describing how often the parties to the SB swap transaction
           exchange payments associated with each party???s obligation. Such
           payment frequency may be described as one letter preceded by an
           integer."""
        return self.__payment_frequency_period1

    @payment_frequency_period1.setter
    def payment_frequency_period1(self, value: str):
        self._property_changed('payment_frequency_period1')
        self.__payment_frequency_period1 = value        

    @property
    def unique_id(self) -> float:
        """A unique identifier."""
        return self.__unique_id

    @unique_id.setter
    def unique_id(self, value: float):
        self._property_changed('unique_id')
        self.__unique_id = value        

    @property
    def option_expiration_date(self) -> datetime.date:
        """An indication of the date that the option is no longer available for exercise."""
        return self.__option_expiration_date

    @option_expiration_date.setter
    def option_expiration_date(self, value: datetime.date):
        self._property_changed('option_expiration_date')
        self.__option_expiration_date = value        

    @property
    def payment_frequency_period2(self) -> str:
        """A time period describing how often the parties to the SB swap transaction
           exchange payments associated with each party's obligation. Such
           payment frequency may be described as one letter preceded by an
           integer."""
        return self.__payment_frequency_period2

    @payment_frequency_period2.setter
    def payment_frequency_period2(self, value: str):
        self._property_changed('payment_frequency_period2')
        self.__payment_frequency_period2 = value        

    @property
    def swaption_atm_fwd_rate(self) -> float:
        """Swaption ATM forward rate."""
        return self.__swaption_atm_fwd_rate

    @swaption_atm_fwd_rate.setter
    def swaption_atm_fwd_rate(self, value: float):
        self._property_changed('swaption_atm_fwd_rate')
        self.__swaption_atm_fwd_rate = value        

    @property
    def live_date(self) -> Union[Op, datetime.date]:
        return self.__live_date

    @live_date.setter
    def live_date(self, value: Union[Op, datetime.date]):
        self._property_changed('live_date')
        self.__live_date = value        

    @property
    def corporate_action_type(self) -> str:
        """Different types of corporate actions from solactive"""
        return self.__corporate_action_type

    @corporate_action_type.setter
    def corporate_action_type(self, value: str):
        self._property_changed('corporate_action_type')
        self.__corporate_action_type = value        

    @property
    def prime_id(self) -> str:
        """Prime Id."""
        return self.__prime_id

    @prime_id.setter
    def prime_id(self, value: str):
        self._property_changed('prime_id')
        self.__prime_id = value        

    @property
    def description(self) -> str:
        """Description of asset."""
        return self.__description

    @description.setter
    def description(self, value: str):
        self._property_changed('description')
        self.__description = value        

    @property
    def asset_classifications_is_country_primary(self) -> bool:
        """Whether or not it is the primary exchange asset for the exchange country."""
        return self.__asset_classifications_is_country_primary

    @asset_classifications_is_country_primary.setter
    def asset_classifications_is_country_primary(self, value: bool):
        self._property_changed('asset_classifications_is_country_primary')
        self.__asset_classifications_is_country_primary = value        

    @property
    def rebate_rate_limit(self) -> float:
        """The maximum allowable rebate rate that can be paid out to the borrower of a
           stock."""
        return self.__rebate_rate_limit

    @rebate_rate_limit.setter
    def rebate_rate_limit(self, value: float):
        self._property_changed('rebate_rate_limit')
        self.__rebate_rate_limit = value        

    @property
    def factor(self) -> str:
        """Name of the factor. i.e. Momentum"""
        return self.__factor

    @factor.setter
    def factor(self, value: str):
        self._property_changed('factor')
        self.__factor = value        

    @property
    def days_on_loan(self) -> float:
        """The number of days this loan as been on our books."""
        return self.__days_on_loan

    @days_on_loan.setter
    def days_on_loan(self, value: float):
        self._property_changed('days_on_loan')
        self.__days_on_loan = value        

    @property
    def long_conviction_small(self) -> float:
        """The count of long ideas with small conviction."""
        return self.__long_conviction_small

    @long_conviction_small.setter
    def long_conviction_small(self, value: float):
        self._property_changed('long_conviction_small')
        self.__long_conviction_small = value        

    @property
    def sell40cents(self) -> float:
        """The amount GS would sell for 40 cents charge."""
        return self.__sell40cents

    @sell40cents.setter
    def sell40cents(self, value: float):
        self._property_changed('sell40cents')
        self.__sell40cents = value        

    @property
    def relative_payoff_ytd(self) -> float:
        """Total win divided by total loss Year to date."""
        return self.__relative_payoff_ytd

    @relative_payoff_ytd.setter
    def relative_payoff_ytd(self, value: float):
        self._property_changed('relative_payoff_ytd')
        self.__relative_payoff_ytd = value        

    @property
    def gsfeer(self) -> float:
        """Goldman Sachs Fundamental Equilibrium Exchange Rate."""
        return self.__gsfeer

    @gsfeer.setter
    def gsfeer(self, value: float):
        self._property_changed('gsfeer')
        self.__gsfeer = value        

    @property
    def relative_hit_rate_qtd(self) -> float:
        """Hit Rate Ratio Quarter to Date."""
        return self.__relative_hit_rate_qtd

    @relative_hit_rate_qtd.setter
    def relative_hit_rate_qtd(self, value: float):
        self._property_changed('relative_hit_rate_qtd')
        self.__relative_hit_rate_qtd = value        

    @property
    def wam(self) -> float:
        """Weighted average maturity, average of effective maturities of all securities
           held in portfolio, weighted."""
        return self.__wam

    @wam.setter
    def wam(self, value: float):
        self._property_changed('wam')
        self.__wam = value        

    @property
    def wal(self) -> float:
        """Weighted average life, measures sensitivity to changes in liquidity."""
        return self.__wal

    @wal.setter
    def wal(self, value: float):
        self._property_changed('wal')
        self.__wal = value        

    @property
    def quantityccy(self) -> str:
        """Quantity unit."""
        return self.__quantityccy

    @quantityccy.setter
    def quantityccy(self, value: str):
        self._property_changed('quantityccy')
        self.__quantityccy = value        

    @property
    def backtest_id(self) -> str:
        """Marquee unique backtest identifier."""
        return self.__backtest_id

    @backtest_id.setter
    def backtest_id(self, value: str):
        self._property_changed('backtest_id')
        self.__backtest_id = value        

    @property
    def dirty_price(self) -> float:
        """Price of the Bond including accrued interest."""
        return self.__dirty_price

    @dirty_price.setter
    def dirty_price(self, value: float):
        self._property_changed('dirty_price')
        self.__dirty_price = value        

    @property
    def corporate_spread_contribution(self) -> float:
        """Contribution of corporate spread component to FCI."""
        return self.__corporate_spread_contribution

    @corporate_spread_contribution.setter
    def corporate_spread_contribution(self, value: float):
        self._property_changed('corporate_spread_contribution')
        self.__corporate_spread_contribution = value        

    @property
    def relative_humidity_hourly_forecast(self) -> float:
        """The hourly forecast value for relative humidity in percentage."""
        return self.__relative_humidity_hourly_forecast

    @relative_humidity_hourly_forecast.setter
    def relative_humidity_hourly_forecast(self, value: float):
        self._property_changed('relative_humidity_hourly_forecast')
        self.__relative_humidity_hourly_forecast = value        

    @property
    def multiple_score(self) -> float:
        """Multiple percentile relative to Americas coverage universe (a higher score means
           more expensive)."""
        return self.__multiple_score

    @multiple_score.setter
    def multiple_score(self, value: float):
        self._property_changed('multiple_score')
        self.__multiple_score = value        

    @property
    def beta_adjusted_exposure(self) -> float:
        """Beta adjusted exposure."""
        return self.__beta_adjusted_exposure

    @beta_adjusted_exposure.setter
    def beta_adjusted_exposure(self, value: float):
        self._property_changed('beta_adjusted_exposure')
        self.__beta_adjusted_exposure = value        

    @property
    def is_annualized(self) -> bool:
        """Flag indicating if the forecast value is annualized."""
        return self.__is_annualized

    @is_annualized.setter
    def is_annualized(self, value: bool):
        self._property_changed('is_annualized')
        self.__is_annualized = value        

    @property
    def dividend_points(self) -> float:
        """Expected Dividend in index points."""
        return self.__dividend_points

    @dividend_points.setter
    def dividend_points(self, value: float):
        self._property_changed('dividend_points')
        self.__dividend_points = value        

    @property
    def brightness(self) -> float:
        """Value of the measure type selected."""
        return self.__brightness

    @brightness.setter
    def brightness(self, value: float):
        self._property_changed('brightness')
        self.__brightness = value        

    @property
    def asset_parameters_receiver_designated_maturity(self) -> str:
        """Tenor"""
        return self.__asset_parameters_receiver_designated_maturity

    @asset_parameters_receiver_designated_maturity.setter
    def asset_parameters_receiver_designated_maturity(self, value: str):
        self._property_changed('asset_parameters_receiver_designated_maturity')
        self.__asset_parameters_receiver_designated_maturity = value        

    @property
    def bos_in_ticks_description(self) -> str:
        """Description of the Stock's Bid-Offer Spread in Ticks on the particular date."""
        return self.__bos_in_ticks_description

    @bos_in_ticks_description.setter
    def bos_in_ticks_description(self, value: str):
        self._property_changed('bos_in_ticks_description')
        self.__bos_in_ticks_description = value        

    @property
    def test_id(self) -> str:
        """Unique ID for test configuration."""
        return self.__test_id

    @test_id.setter
    def test_id(self, value: str):
        self._property_changed('test_id')
        self.__test_id = value        

    @property
    def implied_correlation(self) -> float:
        """Correlation of an asset implied by observations of market prices."""
        return self.__implied_correlation

    @implied_correlation.setter
    def implied_correlation(self, value: float):
        self._property_changed('implied_correlation')
        self.__implied_correlation = value        

    @property
    def normalized_performance(self) -> float:
        """Performance that is normalized to 1."""
        return self.__normalized_performance

    @normalized_performance.setter
    def normalized_performance(self, value: float):
        self._property_changed('normalized_performance')
        self.__normalized_performance = value        

    @property
    def overnight_news_end_time(self) -> datetime.datetime:
        """The overnight news end time."""
        return self.__overnight_news_end_time

    @overnight_news_end_time.setter
    def overnight_news_end_time(self, value: datetime.datetime):
        self._property_changed('overnight_news_end_time')
        self.__overnight_news_end_time = value        

    @property
    def bytes_consumed(self) -> float:
        """Bytes of raw data fetched in a run of the checker."""
        return self.__bytes_consumed

    @bytes_consumed.setter
    def bytes_consumed(self, value: float):
        self._property_changed('bytes_consumed')
        self.__bytes_consumed = value        

    @property
    def swaption_vol(self) -> float:
        """Historical implied normal volatility for a liquid point on swaption vol surface."""
        return self.__swaption_vol

    @swaption_vol.setter
    def swaption_vol(self, value: float):
        self._property_changed('swaption_vol')
        self.__swaption_vol = value        

    @property
    def estimated_closing_volume(self) -> float:
        """Estimated closing auction volume (in shares)."""
        return self.__estimated_closing_volume

    @estimated_closing_volume.setter
    def estimated_closing_volume(self, value: float):
        self._property_changed('estimated_closing_volume')
        self.__estimated_closing_volume = value        

    @property
    def issuer(self) -> str:
        """The issuer of this bond."""
        return self.__issuer

    @issuer.setter
    def issuer(self, value: str):
        self._property_changed('issuer')
        self.__issuer = value        

    @property
    def dividend_yield(self) -> float:
        """Annualized Dividend Yield."""
        return self.__dividend_yield

    @dividend_yield.setter
    def dividend_yield(self, value: float):
        self._property_changed('dividend_yield')
        self.__dividend_yield = value        

    @property
    def market_type(self) -> str:
        """The type of market for Power. Values may include Physical Bilateral, Day Ahead
           or Real Time."""
        return self.__market_type

    @market_type.setter
    def market_type(self, value: str):
        self._property_changed('market_type')
        self.__market_type = value        

    @property
    def num_units_lower(self) -> float:
        """Units Lower."""
        return self.__num_units_lower

    @num_units_lower.setter
    def num_units_lower(self, value: float):
        self._property_changed('num_units_lower')
        self.__num_units_lower = value        

    @property
    def source_origin(self) -> str:
        """Source origin."""
        return self.__source_origin

    @source_origin.setter
    def source_origin(self, value: str):
        self._property_changed('source_origin')
        self.__source_origin = value        

    @property
    def proceeds_asset_swap_spread3m(self) -> float:
        """Proceeds asset swap spread vs 3m tenor."""
        return self.__proceeds_asset_swap_spread3m

    @proceeds_asset_swap_spread3m.setter
    def proceeds_asset_swap_spread3m(self, value: float):
        self._property_changed('proceeds_asset_swap_spread3m')
        self.__proceeds_asset_swap_spread3m = value        

    @property
    def total_quantity(self) -> float:
        """Rounded total quantity."""
        return self.__total_quantity

    @total_quantity.setter
    def total_quantity(self, value: float):
        self._property_changed('total_quantity')
        self.__total_quantity = value        

    @property
    def internal_user(self) -> bool:
        """Whether user is internal or not."""
        return self.__internal_user

    @internal_user.setter
    def internal_user(self, value: bool):
        self._property_changed('internal_user')
        self.__internal_user = value        

    @property
    def sell40bps(self) -> float:
        """The amount GS would sell for 40 bps charge."""
        return self.__sell40bps

    @sell40bps.setter
    def sell40bps(self, value: float):
        self._property_changed('sell40bps')
        self.__sell40bps = value        

    @property
    def redemption_option(self) -> str:
        """Indicates the calculation convention for callable instruments."""
        return self.__redemption_option

    @redemption_option.setter
    def redemption_option(self, value: str):
        self._property_changed('redemption_option')
        self.__redemption_option = value        

    @property
    def notional_unit2(self) -> str:
        """Unit of reported notional price."""
        return self.__notional_unit2

    @notional_unit2.setter
    def notional_unit2(self, value: str):
        self._property_changed('notional_unit2')
        self.__notional_unit2 = value        

    @property
    def notional_unit1(self) -> str:
        """Unit of reported notional price."""
        return self.__notional_unit1

    @notional_unit1.setter
    def notional_unit1(self, value: str):
        self._property_changed('notional_unit1')
        self.__notional_unit1 = value        

    @property
    def sedol(self) -> str:
        """SEDOL - Stock Exchange Daily Official List (subject to licensing)."""
        return self.__sedol

    @sedol.setter
    def sedol(self, value: str):
        self._property_changed('sedol')
        self.__sedol = value        

    @property
    def rounding_cost_pnl(self) -> float:
        """Rounding Cost Profit and Loss."""
        return self.__rounding_cost_pnl

    @rounding_cost_pnl.setter
    def rounding_cost_pnl(self, value: float):
        self._property_changed('rounding_cost_pnl')
        self.__rounding_cost_pnl = value        

    @property
    def mid_yield(self) -> float:
        """The return an investor realizes on a bond sold at the mid price."""
        return self.__mid_yield

    @mid_yield.setter
    def mid_yield(self, value: float):
        self._property_changed('mid_yield')
        self.__mid_yield = value        

    @property
    def unexecuted_notional_local(self) -> float:
        """Total un-executed notional in local currency."""
        return self.__unexecuted_notional_local

    @unexecuted_notional_local.setter
    def unexecuted_notional_local(self, value: float):
        self._property_changed('unexecuted_notional_local')
        self.__unexecuted_notional_local = value        

    @property
    def sustain_global(self) -> bool:
        """True if the stock is on the SUSTAIN (Global) 50 list as of the corresponding
           date. False if the stock is removed from the SUSTAIN (Global) 50 list
           on the corresponding date."""
        return self.__sustain_global

    @sustain_global.setter
    def sustain_global(self, value: bool):
        self._property_changed('sustain_global')
        self.__sustain_global = value        

    @property
    def ending_date(self) -> str:
        """End date of the period the valuation refers to."""
        return self.__ending_date

    @ending_date.setter
    def ending_date(self, value: str):
        self._property_changed('ending_date')
        self.__ending_date = value        

    @property
    def proceeds_asset_swap_spread12m(self) -> float:
        """Proceeds asset swap spread vs 12m tenor."""
        return self.__proceeds_asset_swap_spread12m

    @proceeds_asset_swap_spread12m.setter
    def proceeds_asset_swap_spread12m(self, value: float):
        self._property_changed('proceeds_asset_swap_spread12m')
        self.__proceeds_asset_swap_spread12m = value        

    @property
    def rvt_adj90(self) -> float:
        """TThe ratio of the network's realized value to the 90-day moving average of the
           adjusted transfer value."""
        return self.__rvt_adj90

    @rvt_adj90.setter
    def rvt_adj90(self, value: float):
        self._property_changed('rvt_adj90')
        self.__rvt_adj90 = value        

    @property
    def gross_investment_wtd(self) -> float:
        """Total gross investment Week to date."""
        return self.__gross_investment_wtd

    @gross_investment_wtd.setter
    def gross_investment_wtd(self, value: float):
        self._property_changed('gross_investment_wtd')
        self.__gross_investment_wtd = value        

    @property
    def ann_return3_year(self) -> float:
        """Total return representing past performance, used for GS Money Market onshore
           funds, over three years."""
        return self.__ann_return3_year

    @ann_return3_year.setter
    def ann_return3_year(self, value: float):
        self._property_changed('ann_return3_year')
        self.__ann_return3_year = value        

    @property
    def sharpe_wtd(self) -> float:
        """Sharpe ratio Week to date."""
        return self.__sharpe_wtd

    @sharpe_wtd.setter
    def sharpe_wtd(self, value: float):
        self._property_changed('sharpe_wtd')
        self.__sharpe_wtd = value        

    @property
    def discount_factor(self) -> float:
        """Present Value of 1 unit of currency on an earlier date."""
        return self.__discount_factor

    @discount_factor.setter
    def discount_factor(self, value: float):
        self._property_changed('discount_factor')
        self.__discount_factor = value        

    @property
    def relative_return_mtd(self) -> float:
        """Relative Return Month to Date."""
        return self.__relative_return_mtd

    @relative_return_mtd.setter
    def relative_return_mtd(self, value: float):
        self._property_changed('relative_return_mtd')
        self.__relative_return_mtd = value        

    @property
    def price_change_on_day(self) -> float:
        """Price change on day."""
        return self.__price_change_on_day

    @price_change_on_day.setter
    def price_change_on_day(self, value: float):
        self._property_changed('price_change_on_day')
        self.__price_change_on_day = value        

    @property
    def buy100cents(self) -> float:
        """The amount GS would buy for 100 cents charge."""
        return self.__buy100cents

    @buy100cents.setter
    def buy100cents(self, value: float):
        self._property_changed('buy100cents')
        self.__buy100cents = value        

    @property
    def forward_point(self) -> float:
        """Outright forward minus spot."""
        return self.__forward_point

    @forward_point.setter
    def forward_point(self, value: float):
        self._property_changed('forward_point')
        self.__forward_point = value        

    @property
    def fci(self) -> float:
        """Nominal FCI value."""
        return self.__fci

    @fci.setter
    def fci(self, value: float):
        self._property_changed('fci')
        self.__fci = value        

    @property
    def recall_quantity(self) -> float:
        """Defines the amount of shares being recalled in a stock loan recall activity."""
        return self.__recall_quantity

    @recall_quantity.setter
    def recall_quantity(self, value: float):
        self._property_changed('recall_quantity')
        self.__recall_quantity = value        

    @property
    def strike_price_currency(self) -> str:
        """The currency of strike price of the option."""
        return self.__strike_price_currency

    @strike_price_currency.setter
    def strike_price_currency(self, value: str):
        self._property_changed('strike_price_currency')
        self.__strike_price_currency = value        

    @property
    def fx_positioning(self) -> float:
        """Positioning data in the FX market."""
        return self.__fx_positioning

    @fx_positioning.setter
    def fx_positioning(self, value: float):
        self._property_changed('fx_positioning')
        self.__fx_positioning = value        

    @property
    def gsid_equivalent(self) -> str:
        """Goldman Sachs internal equity identifier equivalent - i.e. - for Corporate
           Bonds, the equivalent GSID of the underlying security."""
        return self.__gsid_equivalent

    @gsid_equivalent.setter
    def gsid_equivalent(self, value: str):
        self._property_changed('gsid_equivalent')
        self.__gsid_equivalent = value        

    @property
    def categories(self) -> Tuple[str, ...]:
        """Categories for series."""
        return self.__categories

    @categories.setter
    def categories(self, value: Tuple[str, ...]):
        self._property_changed('categories')
        self.__categories = value        

    @property
    def ext_mkt_asset(self) -> str:
        """External MDAPI Asset."""
        return self.__ext_mkt_asset

    @ext_mkt_asset.setter
    def ext_mkt_asset(self, value: str):
        self._property_changed('ext_mkt_asset')
        self.__ext_mkt_asset = value        

    @property
    def quoting_style(self) -> str:
        """Quoting style."""
        return self.__quoting_style

    @quoting_style.setter
    def quoting_style(self, value: str):
        self._property_changed('quoting_style')
        self.__quoting_style = value        

    @property
    def error_message(self) -> str:
        """Error message to correspond to error in factor field."""
        return self.__error_message

    @error_message.setter
    def error_message(self, value: str):
        self._property_changed('error_message')
        self.__error_message = value        

    @property
    def mid_price(self) -> float:
        """The mid price."""
        return self.__mid_price

    @mid_price.setter
    def mid_price(self, value: float):
        self._property_changed('mid_price')
        self.__mid_price = value        

    @property
    def proceeds_asset_swap_spread6m(self) -> float:
        """Proceeds asset swap spread vs 6m tenor."""
        return self.__proceeds_asset_swap_spread6m

    @proceeds_asset_swap_spread6m.setter
    def proceeds_asset_swap_spread6m(self, value: float):
        self._property_changed('proceeds_asset_swap_spread6m')
        self.__proceeds_asset_swap_spread6m = value        

    @property
    def sts_em_dm(self) -> str:
        """Emerging or developed market classification."""
        return self.__sts_em_dm

    @sts_em_dm.setter
    def sts_em_dm(self, value: str):
        self._property_changed('sts_em_dm')
        self.__sts_em_dm = value        

    @property
    def embedded_option(self) -> str:
        """An indication of whether or not the option fields are for an embedded option."""
        return self.__embedded_option

    @embedded_option.setter
    def embedded_option(self, value: str):
        self._property_changed('embedded_option')
        self.__embedded_option = value        

    @property
    def tcm_cost_horizon2_day(self) -> float:
        """TCM cost with a 2 day time horizon."""
        return self.__tcm_cost_horizon2_day

    @tcm_cost_horizon2_day.setter
    def tcm_cost_horizon2_day(self, value: float):
        self._property_changed('tcm_cost_horizon2_day')
        self.__tcm_cost_horizon2_day = value        

    @property
    def age_band(self) -> str:
        """The age band of the caller based on the date of birth provided."""
        return self.__age_band

    @age_band.setter
    def age_band(self, value: str):
        self._property_changed('age_band')
        self.__age_band = value        

    @property
    def returns_enabled(self) -> bool:
        """Whether or not returns are enabled for the Hedge Fund."""
        return self.__returns_enabled

    @returns_enabled.setter
    def returns_enabled(self, value: bool):
        self._property_changed('returns_enabled')
        self.__returns_enabled = value        

    @property
    def run_id(self) -> str:
        """Unique id for check runs, used to query entity data corresponding to dataset
           level data."""
        return self.__run_id

    @run_id.setter
    def run_id(self, value: str):
        self._property_changed('run_id')
        self.__run_id = value        

    @property
    def queue_in_lots(self) -> float:
        """The Queue size in Lots (if applicable) of the stock  on the particular date."""
        return self.__queue_in_lots

    @queue_in_lots.setter
    def queue_in_lots(self, value: float):
        self._property_changed('queue_in_lots')
        self.__queue_in_lots = value        

    @property
    def tender_offer_expiration_date(self) -> str:
        """Expiration date of the tender offer."""
        return self.__tender_offer_expiration_date

    @tender_offer_expiration_date.setter
    def tender_offer_expiration_date(self, value: str):
        self._property_changed('tender_offer_expiration_date')
        self.__tender_offer_expiration_date = value        

    @property
    def midcurve_annuity(self) -> float:
        """Midcurve annuity."""
        return self.__midcurve_annuity

    @midcurve_annuity.setter
    def midcurve_annuity(self, value: float):
        self._property_changed('midcurve_annuity')
        self.__midcurve_annuity = value        

    @property
    def lending_fund_nav_trend(self) -> float:
        """Net Asset Value trend of a securities lending fund."""
        return self.__lending_fund_nav_trend

    @lending_fund_nav_trend.setter
    def lending_fund_nav_trend(self, value: float):
        self._property_changed('lending_fund_nav_trend')
        self.__lending_fund_nav_trend = value        

    @property
    def cloud_cover_forecast(self) -> float:
        """The forecast value for cloud cover."""
        return self.__cloud_cover_forecast

    @cloud_cover_forecast.setter
    def cloud_cover_forecast(self, value: float):
        self._property_changed('cloud_cover_forecast')
        self.__cloud_cover_forecast = value        

    @property
    def tcm_cost_participation_rate5_pct(self) -> float:
        """TCM cost with a 5 percent participation rate."""
        return self.__tcm_cost_participation_rate5_pct

    @tcm_cost_participation_rate5_pct.setter
    def tcm_cost_participation_rate5_pct(self, value: float):
        self._property_changed('tcm_cost_participation_rate5_pct')
        self.__tcm_cost_participation_rate5_pct = value        

    @property
    def default_backcast(self) -> bool:
        """Is basket backcasted using initial positions."""
        return self.__default_backcast

    @default_backcast.setter
    def default_backcast(self, value: bool):
        self._property_changed('default_backcast')
        self.__default_backcast = value        

    @property
    def lockup(self) -> Union[Op, float]:
        return self.__lockup

    @lockup.setter
    def lockup(self, value: Union[Op, float]):
        self._property_changed('lockup')
        self.__lockup = value        

    @property
    def lockup_type(self) -> str:
        """Type of lockup of the fund."""
        return self.__lockup_type

    @lockup_type.setter
    def lockup_type(self, value: str):
        self._property_changed('lockup_type')
        self.__lockup_type = value        

    @property
    def news_on_intensity(self) -> float:
        """A measure of the intensity of media attention to each stock compared with other
           stocks in the index."""
        return self.__news_on_intensity

    @news_on_intensity.setter
    def news_on_intensity(self, value: float):
        self._property_changed('news_on_intensity')
        self.__news_on_intensity = value        

    @property
    def price_forming_continuation_data(self) -> str:
        """An indication of whether an SB swap transaction is a post-execution event that
           affects the price of the swap transaction, e.g. terminations,
           assignments, novations, exchanges, transfers, amendments, conveyances
           or extinguishing of rights that change the price of the SB swap."""
        return self.__price_forming_continuation_data

    @price_forming_continuation_data.setter
    def price_forming_continuation_data(self, value: str):
        self._property_changed('price_forming_continuation_data')
        self.__price_forming_continuation_data = value        

    @property
    def adjusted_short_interest(self) -> float:
        """Adjusted Short Interest rate."""
        return self.__adjusted_short_interest

    @adjusted_short_interest.setter
    def adjusted_short_interest(self, value: float):
        self._property_changed('adjusted_short_interest')
        self.__adjusted_short_interest = value        

    @property
    def new_hospitalized(self) -> float:
        """Number of new patients hospitalized."""
        return self.__new_hospitalized

    @new_hospitalized.setter
    def new_hospitalized(self, value: float):
        self._property_changed('new_hospitalized')
        self.__new_hospitalized = value        

    @property
    def asset_parameters_strike(self) -> Union[float, str]:
        """Strike as value, percent or at-the-money e.g. 62.5, 95%, ATM-25, ATMF, 10/vol,
           100k/pv, p=10000, p=10000USD, $200K/BP, or multiple strikes
           65.4/-45.8"""
        return self.__asset_parameters_strike

    @asset_parameters_strike.setter
    def asset_parameters_strike(self, value: Union[float, str]):
        self._property_changed('asset_parameters_strike')
        self.__asset_parameters_strike = value        

    @property
    def buy35cents(self) -> float:
        """The amount GS would buy for 35 cents charge."""
        return self.__buy35cents

    @buy35cents.setter
    def buy35cents(self, value: float):
        self._property_changed('buy35cents')
        self.__buy35cents = value        

    @property
    def leg2_total_notional(self) -> float:
        """The total Notional amount or quantity of units of the leg 2 underlying asset."""
        return self.__leg2_total_notional

    @leg2_total_notional.setter
    def leg2_total_notional(self, value: float):
        self._property_changed('leg2_total_notional')
        self.__leg2_total_notional = value        

    @property
    def asset_parameters_effective_date(self) -> str:
        """Relative effective date."""
        return self.__asset_parameters_effective_date

    @asset_parameters_effective_date.setter
    def asset_parameters_effective_date(self, value: str):
        self._property_changed('asset_parameters_effective_date')
        self.__asset_parameters_effective_date = value        

    @property
    def ann_return10_year(self) -> float:
        """Total return representing past performance, used for GS Money Market onshore
           funds, over ten years."""
        return self.__ann_return10_year

    @ann_return10_year.setter
    def ann_return10_year(self, value: float):
        self._property_changed('ann_return10_year')
        self.__ann_return10_year = value        

    @property
    def num_adult_icu_beds(self) -> float:
        """All ICU beds, burn ICU beds, surgical ICU beds, or trauma ICU beds meant for
           emergency situations where hospitals may use additional intensive
           care beds to supplement an influx of patients. Does not include
           neonatal, pediatric or premature ICU beds."""
        return self.__num_adult_icu_beds

    @num_adult_icu_beds.setter
    def num_adult_icu_beds(self, value: float):
        self._property_changed('num_adult_icu_beds')
        self.__num_adult_icu_beds = value        

    @property
    def days_to_expiration(self) -> float:
        """Days to Expiration for the contract."""
        return self.__days_to_expiration

    @days_to_expiration.setter
    def days_to_expiration(self, value: float):
        self._property_changed('days_to_expiration')
        self.__days_to_expiration = value        

    @property
    def continuation_event(self) -> str:
        """An indication of whether an SB swap transaction is a post-execution event that
           affects the price of the swap transaction, e.g. terminations,
           assignments, novations, exchanges, transfers, amendments, conveyances
           or extinguishing of rights that change the price of the SB swap."""
        return self.__continuation_event

    @continuation_event.setter
    def continuation_event(self, value: str):
        self._property_changed('continuation_event')
        self.__continuation_event = value        

    @property
    def leg2_commodity_underlyer_id(self) -> str:
        """Same as leg 1 Commodity Underlyer Id if populated."""
        return self.__leg2_commodity_underlyer_id

    @leg2_commodity_underlyer_id.setter
    def leg2_commodity_underlyer_id(self, value: str):
        self._property_changed('leg2_commodity_underlyer_id')
        self.__leg2_commodity_underlyer_id = value        

    @property
    def wi_id(self) -> str:
        """Weather Index Identifier."""
        return self.__wi_id

    @wi_id.setter
    def wi_id(self, value: str):
        self._property_changed('wi_id')
        self.__wi_id = value        

    @property
    def market_cap_category(self) -> str:
        """Category of market capitalizations a fund is focused on from an investment
           perspective. Same view permissions as the asset."""
        return self.__market_cap_category

    @market_cap_category.setter
    def market_cap_category(self, value: str):
        self._property_changed('market_cap_category')
        self.__market_cap_category = value        

    @property
    def historical_volume(self) -> float:
        """One month rolling average."""
        return self.__historical_volume

    @historical_volume.setter
    def historical_volume(self, value: float):
        self._property_changed('historical_volume')
        self.__historical_volume = value        

    @property
    def buy5cents(self) -> float:
        """The amount GS would buy for 5 cents charge."""
        return self.__buy5cents

    @buy5cents.setter
    def buy5cents(self, value: float):
        self._property_changed('buy5cents')
        self.__buy5cents = value        

    @property
    def event_start_date(self) -> datetime.date:
        """The start date of the event if the event occurs during a time window, in the
           time zone of the exchange where the company is listed (optional)."""
        return self.__event_start_date

    @event_start_date.setter
    def event_start_date(self, value: datetime.date):
        self._property_changed('event_start_date')
        self.__event_start_date = value        

    @property
    def leg1_fixed_rate(self) -> float:
        """If fixed rate leg, the fixed rate of leg 1."""
        return self.__leg1_fixed_rate

    @leg1_fixed_rate.setter
    def leg1_fixed_rate(self, value: float):
        self._property_changed('leg1_fixed_rate')
        self.__leg1_fixed_rate = value        

    @property
    def equity_gamma(self) -> float:
        """Gamma exposure to equity products."""
        return self.__equity_gamma

    @equity_gamma.setter
    def equity_gamma(self, value: float):
        self._property_changed('equity_gamma')
        self.__equity_gamma = value        

    @property
    def rpt_id(self) -> str:
        """DDR generated unique and random ID for reconciliation purpose."""
        return self.__rpt_id

    @rpt_id.setter
    def rpt_id(self, value: str):
        self._property_changed('rpt_id')
        self.__rpt_id = value        

    @property
    def gross_income(self) -> float:
        """The income earned by the reinvested collateral including the rebate or fee,
           excluding lender or partner fees."""
        return self.__gross_income

    @gross_income.setter
    def gross_income(self, value: float):
        self._property_changed('gross_income')
        self.__gross_income = value        

    @property
    def em_id(self) -> str:
        """Entity Master identifier."""
        return self.__em_id

    @em_id.setter
    def em_id(self, value: str):
        self._property_changed('em_id')
        self.__em_id = value        

    @property
    def asset_count_in_model(self) -> float:
        """Number of assets in a portfolio in a given risk model."""
        return self.__asset_count_in_model

    @asset_count_in_model.setter
    def asset_count_in_model(self, value: float):
        self._property_changed('asset_count_in_model')
        self.__asset_count_in_model = value        

    @property
    def sts_credit_region(self) -> str:
        """Credit risk region."""
        return self.__sts_credit_region

    @sts_credit_region.setter
    def sts_credit_region(self, value: str):
        self._property_changed('sts_credit_region')
        self.__sts_credit_region = value        

    @property
    def min_temperature(self) -> float:
        """Minimum temperature observed on a given day in fahrenheit."""
        return self.__min_temperature

    @min_temperature.setter
    def min_temperature(self, value: float):
        self._property_changed('min_temperature')
        self.__min_temperature = value        

    @property
    def bucket_start_time(self) -> datetime.datetime:
        """The start time of the bucket in ISO 8601 formatted date and time."""
        return self.__bucket_start_time

    @bucket_start_time.setter
    def bucket_start_time(self, value: datetime.datetime):
        self._property_changed('bucket_start_time')
        self.__bucket_start_time = value        

    @property
    def fill_type(self) -> str:
        """Dark/Lit etc."""
        return self.__fill_type

    @fill_type.setter
    def fill_type(self, value: str):
        self._property_changed('fill_type')
        self.__fill_type = value        

    @property
    def close_time(self) -> datetime.datetime:
        """Time closed. ISO 8601 formatted string."""
        return self.__close_time

    @close_time.setter
    def close_time(self, value: datetime.datetime):
        self._property_changed('close_time')
        self.__close_time = value        

    @property
    def fail_pct(self) -> float:
        """Fail percentage."""
        return self.__fail_pct

    @fail_pct.setter
    def fail_pct(self, value: float):
        self._property_changed('fail_pct')
        self.__fail_pct = value        

    @property
    def iso_country_code_alpha2(self) -> str:
        """Iso2 country codes (2-digit)."""
        return self.__iso_country_code_alpha2

    @iso_country_code_alpha2.setter
    def iso_country_code_alpha2(self, value: str):
        self._property_changed('iso_country_code_alpha2')
        self.__iso_country_code_alpha2 = value        

    @property
    def iso_country_code_alpha3(self) -> str:
        """Iso3 country codes (3-digit)."""
        return self.__iso_country_code_alpha3

    @iso_country_code_alpha3.setter
    def iso_country_code_alpha3(self, value: str):
        self._property_changed('iso_country_code_alpha3')
        self.__iso_country_code_alpha3 = value        

    @property
    def amount(self) -> float:
        """Amount corporate actions pay out."""
        return self.__amount

    @amount.setter
    def amount(self, value: float):
        self._property_changed('amount')
        self.__amount = value        

    @property
    def lending_fund_acct(self) -> str:
        """Account associated with the securities lending fund."""
        return self.__lending_fund_acct

    @lending_fund_acct.setter
    def lending_fund_acct(self, value: str):
        self._property_changed('lending_fund_acct')
        self.__lending_fund_acct = value        

    @property
    def rebate(self) -> float:
        """Amount of the payment to an investor who puts up collateral in borrowing a
           stock."""
        return self.__rebate

    @rebate.setter
    def rebate(self, value: float):
        self._property_changed('rebate')
        self.__rebate = value        

    @property
    def election_type(self) -> str:
        """Type of election e.g. presidential."""
        return self.__election_type

    @election_type.setter
    def election_type(self, value: str):
        self._property_changed('election_type')
        self.__election_type = value        

    @property
    def relative_hit_rate_mtd(self) -> float:
        """Hit Rate Ratio Month to Date."""
        return self.__relative_hit_rate_mtd

    @relative_hit_rate_mtd.setter
    def relative_hit_rate_mtd(self, value: float):
        self._property_changed('relative_hit_rate_mtd')
        self.__relative_hit_rate_mtd = value        

    @property
    def implied_volatility(self) -> float:
        """Volatility of an asset implied by observations of market prices."""
        return self.__implied_volatility

    @implied_volatility.setter
    def implied_volatility(self, value: float):
        self._property_changed('implied_volatility')
        self.__implied_volatility = value        

    @property
    def spread(self) -> float:
        """Quoted (running) spread (mid) of buying / selling protection on an index.
           (Equally weighted CDS basket). In basis points."""
        return self.__spread

    @spread.setter
    def spread(self, value: float):
        self._property_changed('spread')
        self.__spread = value        

    @property
    def variance(self) -> float:
        """Market implied variance between two tenors."""
        return self.__variance

    @variance.setter
    def variance(self, value: float):
        self._property_changed('variance')
        self.__variance = value        

    @property
    def wtd_degree_days_daily_forecast(self) -> float:
        """The forecast value for weighted degree day in Fahrenheit."""
        return self.__wtd_degree_days_daily_forecast

    @wtd_degree_days_daily_forecast.setter
    def wtd_degree_days_daily_forecast(self, value: float):
        self._property_changed('wtd_degree_days_daily_forecast')
        self.__wtd_degree_days_daily_forecast = value        

    @property
    def swaption_annuity(self) -> float:
        """Swaption annuity."""
        return self.__swaption_annuity

    @swaption_annuity.setter
    def swaption_annuity(self, value: float):
        self._property_changed('swaption_annuity')
        self.__swaption_annuity = value        

    @property
    def buy6bps(self) -> float:
        """The amount GS would buy for 6 bps charge."""
        return self.__buy6bps

    @buy6bps.setter
    def buy6bps(self, value: float):
        self._property_changed('buy6bps')
        self.__buy6bps = value        

    @property
    def g10_currency(self) -> bool:
        """Is a G10 asset."""
        return self.__g10_currency

    @g10_currency.setter
    def g10_currency(self, value: bool):
        self._property_changed('g10_currency')
        self.__g10_currency = value        

    @property
    def humidity_forecast(self) -> float:
        """The forecast value for humidity."""
        return self.__humidity_forecast

    @humidity_forecast.setter
    def humidity_forecast(self, value: float):
        self._property_changed('humidity_forecast')
        self.__humidity_forecast = value        

    @property
    def relative_period(self) -> str:
        """The relative period forward for which the forecast is available."""
        return self.__relative_period

    @relative_period.setter
    def relative_period(self, value: str):
        self._property_changed('relative_period')
        self.__relative_period = value        

    @property
    def user(self) -> str:
        """Originating platform."""
        return self.__user

    @user.setter
    def user(self, value: str):
        self._property_changed('user')
        self.__user = value        

    @property
    def customer(self) -> str:
        """Customer kerberos."""
        return self.__customer

    @customer.setter
    def customer(self, value: str):
        self._property_changed('customer')
        self.__customer = value        

    @property
    def leg1_reset_frequency(self) -> str:
        """An integer multiplier of a period describing how often the parties to an SB swap
           transaction shall evaluate and, when applicable, change the price
           used for the underlying assets of the swap transaction (leg 1). Such
           reset frequency may be described as one letter preceded by an
           integer."""
        return self.__leg1_reset_frequency

    @leg1_reset_frequency.setter
    def leg1_reset_frequency(self, value: str):
        self._property_changed('leg1_reset_frequency')
        self.__leg1_reset_frequency = value        

    @property
    def queue_clock_time_label(self):
        return self.__queue_clock_time_label

    @queue_clock_time_label.setter
    def queue_clock_time_label(self, value):
        self._property_changed('queue_clock_time_label')
        self.__queue_clock_time_label = value        

    @property
    def pace_of_rollp100(self) -> float:
        """The 100th-percentile of the pace of roll compared to previous quarters (over the
           last 5 years) at the same point in time, i.e. cross-sectional."""
        return self.__pace_of_rollp100

    @pace_of_rollp100.setter
    def pace_of_rollp100(self, value: float):
        self._property_changed('pace_of_rollp100')
        self.__pace_of_rollp100 = value        

    @property
    def asset_classifications_gics_sub_industry(self) -> str:
        """GICS Sub Industry classification (level 4)."""
        return self.__asset_classifications_gics_sub_industry

    @asset_classifications_gics_sub_industry.setter
    def asset_classifications_gics_sub_industry(self, value: str):
        self._property_changed('asset_classifications_gics_sub_industry')
        self.__asset_classifications_gics_sub_industry = value        

    @property
    def dew_point_hourly_forecast(self) -> float:
        """The hourly forecast value for dew point in Fahrenheit."""
        return self.__dew_point_hourly_forecast

    @dew_point_hourly_forecast.setter
    def dew_point_hourly_forecast(self, value: float):
        self._property_changed('dew_point_hourly_forecast')
        self.__dew_point_hourly_forecast = value        

    @property
    def location_type(self) -> str:
        """The type of location (of varying granularity), e.g. Nation, Region, etc."""
        return self.__location_type

    @location_type.setter
    def location_type(self, value: str):
        self._property_changed('location_type')
        self.__location_type = value        

    @property
    def facet_divisional_reporting_group_id(self) -> str:
        """FACET Divisional Reporting Group ID (DRG) most relevant to the Starting EMMA LE
           ID which contains all associated OE IDs."""
        return self.__facet_divisional_reporting_group_id

    @facet_divisional_reporting_group_id.setter
    def facet_divisional_reporting_group_id(self, value: str):
        self._property_changed('facet_divisional_reporting_group_id')
        self.__facet_divisional_reporting_group_id = value        

    @property
    def realized_twap_performance_usd(self) -> float:
        """Average execution price vs Consolidated TWAP since order inception ??? realized
           in $."""
        return self.__realized_twap_performance_usd

    @realized_twap_performance_usd.setter
    def realized_twap_performance_usd(self, value: float):
        self._property_changed('realized_twap_performance_usd')
        self.__realized_twap_performance_usd = value        

    @property
    def swap_rate(self) -> float:
        """ATM fixed rate for a benchmark tenor on a currency's fixed-floating swap curve."""
        return self.__swap_rate

    @swap_rate.setter
    def swap_rate(self, value: float):
        self._property_changed('swap_rate')
        self.__swap_rate = value        

    @property
    def algo_execution_style(self) -> str:
        """Algo execution style. Dictates how an algo order is being filled."""
        return self.__algo_execution_style

    @algo_execution_style.setter
    def algo_execution_style(self, value: str):
        self._property_changed('algo_execution_style')
        self.__algo_execution_style = value        

    @property
    def client_contact(self) -> str:
        """Name of client(s) requesting data."""
        return self.__client_contact

    @client_contact.setter
    def client_contact(self, value: str):
        self._property_changed('client_contact')
        self.__client_contact = value        

    @property
    def min_temperature_hour(self) -> float:
        """The forecast value of hour with minimum temperature in a day."""
        return self.__min_temperature_hour

    @min_temperature_hour.setter
    def min_temperature_hour(self, value: float):
        self._property_changed('min_temperature_hour')
        self.__min_temperature_hour = value        

    @property
    def trading_currency(self) -> str:
        """Execution currency."""
        return self.__trading_currency

    @trading_currency.setter
    def trading_currency(self, value: str):
        self._property_changed('trading_currency')
        self.__trading_currency = value        

    @property
    def total_by_onset(self) -> float:
        """Total number, by onset of infection, as opposed to confirmation. The date of
           onset is calculated as illness onset date if known. If not, an
           estimated illness onset date was calculated using specimen collection
           date."""
        return self.__total_by_onset

    @total_by_onset.setter
    def total_by_onset(self, value: float):
        self._property_changed('total_by_onset')
        self.__total_by_onset = value        

    @property
    def agency_swap_spread(self) -> float:
        """Agency swap spread."""
        return self.__agency_swap_spread

    @agency_swap_spread.setter
    def agency_swap_spread(self, value: float):
        self._property_changed('agency_swap_spread')
        self.__agency_swap_spread = value        

    @property
    def rank(self) -> float:
        """Rank to determine most relevant asset."""
        return self.__rank

    @rank.setter
    def rank(self, value: float):
        self._property_changed('rank')
        self.__rank = value        

    @property
    def mixed_swap_other_reported_sdr(self) -> str:
        """Indicates the other SDR to which a mixed swap is reported."""
        return self.__mixed_swap_other_reported_sdr

    @mixed_swap_other_reported_sdr.setter
    def mixed_swap_other_reported_sdr(self, value: str):
        self._property_changed('mixed_swap_other_reported_sdr')
        self.__mixed_swap_other_reported_sdr = value        

    @property
    def humidity(self) -> float:
        """The humidity forecast for given location."""
        return self.__humidity

    @humidity.setter
    def humidity(self, value: float):
        self._property_changed('humidity')
        self.__humidity = value        

    @property
    def data_set_category(self) -> str:
        """Top level grouping of dataset."""
        return self.__data_set_category

    @data_set_category.setter
    def data_set_category(self, value: str):
        self._property_changed('data_set_category')
        self.__data_set_category = value        

    @property
    def vwap_realized_bps(self) -> float:
        """Consolidated realised performance vs VWAP, in bps."""
        return self.__vwap_realized_bps

    @vwap_realized_bps.setter
    def vwap_realized_bps(self, value: float):
        self._property_changed('vwap_realized_bps')
        self.__vwap_realized_bps = value        

    @property
    def buy9bps(self) -> float:
        """The amount GS would buy for 9 bps charge."""
        return self.__buy9bps

    @buy9bps.setter
    def buy9bps(self, value: float):
        self._property_changed('buy9bps')
        self.__buy9bps = value        

    @property
    def total_tested(self) -> float:
        """Total number of tested cases."""
        return self.__total_tested

    @total_tested.setter
    def total_tested(self, value: float):
        self._property_changed('total_tested')
        self.__total_tested = value        

    @property
    def fatalities_confirmed(self) -> float:
        """Total number of confirmed fatalities."""
        return self.__fatalities_confirmed

    @fatalities_confirmed.setter
    def fatalities_confirmed(self, value: float):
        self._property_changed('fatalities_confirmed')
        self.__fatalities_confirmed = value        

    @property
    def universe_id1(self) -> str:
        """The risk model universe identifier value."""
        return self.__universe_id1

    @universe_id1.setter
    def universe_id1(self, value: str):
        self._property_changed('universe_id1')
        self.__universe_id1 = value        

    @property
    def asset_parameters_payer_day_count_fraction(self) -> str:
        """Day Count Fraction"""
        return self.__asset_parameters_payer_day_count_fraction

    @asset_parameters_payer_day_count_fraction.setter
    def asset_parameters_payer_day_count_fraction(self, value: str):
        self._property_changed('asset_parameters_payer_day_count_fraction')
        self.__asset_parameters_payer_day_count_fraction = value        

    @property
    def universe_id2(self) -> str:
        """The risk model universe identifier value."""
        return self.__universe_id2

    @universe_id2.setter
    def universe_id2(self, value: str):
        self._property_changed('universe_id2')
        self.__universe_id2 = value        

    @property
    def bid_low(self) -> float:
        """Lowest Bid Price (price willing to buy)."""
        return self.__bid_low

    @bid_low.setter
    def bid_low(self, value: float):
        self._property_changed('bid_low')
        self.__bid_low = value        

    @property
    def bucketize_price(self) -> float:
        """Aggregated price of power for given quantity bucket."""
        return self.__bucketize_price

    @bucketize_price.setter
    def bucketize_price(self, value: float):
        self._property_changed('bucketize_price')
        self.__bucketize_price = value        

    @property
    def fair_variance_volatility(self) -> float:
        """The strike in volatility terms, calculated as square root of fair variance."""
        return self.__fair_variance_volatility

    @fair_variance_volatility.setter
    def fair_variance_volatility(self, value: float):
        self._property_changed('fair_variance_volatility')
        self.__fair_variance_volatility = value        

    @property
    def covid19(self) -> float:
        """Total number of people affected by covid19 for agiven country."""
        return self.__covid19

    @covid19.setter
    def covid19(self, value: float):
        self._property_changed('covid19')
        self.__covid19 = value        

    @property
    def client_exposure(self) -> float:
        """Exposure of client positions to the factor in percent of equity."""
        return self.__client_exposure

    @client_exposure.setter
    def client_exposure(self, value: float):
        self._property_changed('client_exposure')
        self.__client_exposure = value        

    @property
    def leg2_total_notional_unit(self) -> str:
        """Unit of reported notional price."""
        return self.__leg2_total_notional_unit

    @leg2_total_notional_unit.setter
    def leg2_total_notional_unit(self, value: str):
        self._property_changed('leg2_total_notional_unit')
        self.__leg2_total_notional_unit = value        

    @property
    def sell45cents(self) -> float:
        """The amount GS would sell for 45 cents charge."""
        return self.__sell45cents

    @sell45cents.setter
    def sell45cents(self, value: float):
        self._property_changed('sell45cents')
        self.__sell45cents = value        

    @property
    def gs_sustain_sub_sector(self) -> str:
        """GS SUSTAIN sector."""
        return self.__gs_sustain_sub_sector

    @gs_sustain_sub_sector.setter
    def gs_sustain_sub_sector(self, value: str):
        self._property_changed('gs_sustain_sub_sector')
        self.__gs_sustain_sub_sector = value        

    @property
    def sinkable(self) -> bool:
        """A bond that is protected by a fund (called a sinking fund) that sets aside money
           to ensure principal and interest payments are made by the issuer as
           promised."""
        return self.__sinkable

    @sinkable.setter
    def sinkable(self, value: bool):
        self._property_changed('sinkable')
        self.__sinkable = value        

    @property
    def is_real(self) -> bool:
        """Flag indicating whether the value is real or nominal."""
        return self.__is_real

    @is_real.setter
    def is_real(self, value: bool):
        self._property_changed('is_real')
        self.__is_real = value        

    @property
    def max_temperature_hour(self) -> float:
        """The forecast value of hour with max temperature in a day."""
        return self.__max_temperature_hour

    @max_temperature_hour.setter
    def max_temperature_hour(self, value: float):
        self._property_changed('max_temperature_hour')
        self.__max_temperature_hour = value        

    @property
    def leg2_averaging_method(self) -> str:
        """Averaging method of leg."""
        return self.__leg2_averaging_method

    @leg2_averaging_method.setter
    def leg2_averaging_method(self, value: str):
        self._property_changed('leg2_averaging_method')
        self.__leg2_averaging_method = value        

    @property
    def jsn(self) -> str:
        """Japan security number (subject to licensing)."""
        return self.__jsn

    @jsn.setter
    def jsn(self, value: str):
        self._property_changed('jsn')
        self.__jsn = value        

    @property
    def sell160cents(self) -> float:
        """The amount GS would sell for 160 cents charge."""
        return self.__sell160cents

    @sell160cents.setter
    def sell160cents(self, value: float):
        self._property_changed('sell160cents')
        self.__sell160cents = value        

    @property
    def first_exercise_date(self) -> datetime.date:
        """First adjusted date during the exercise period in which an option can be
           exercised."""
        return self.__first_exercise_date

    @first_exercise_date.setter
    def first_exercise_date(self, value: datetime.date):
        self._property_changed('first_exercise_date')
        self.__first_exercise_date = value        

    @property
    def knock_in_direction(self) -> str:
        """The side of the knock-in price the market level must reach to trigger the knock
           in."""
        return self.__knock_in_direction

    @knock_in_direction.setter
    def knock_in_direction(self, value: str):
        self._property_changed('knock_in_direction')
        self.__knock_in_direction = value        

    @property
    def day_close_unrealized_usd(self) -> float:
        """Unrealized performance vs Close, in $."""
        return self.__day_close_unrealized_usd

    @day_close_unrealized_usd.setter
    def day_close_unrealized_usd(self, value: float):
        self._property_changed('day_close_unrealized_usd')
        self.__day_close_unrealized_usd = value        

    @property
    def tenor(self) -> str:
        """Tenor of instrument."""
        return self.__tenor

    @tenor.setter
    def tenor(self, value: str):
        self._property_changed('tenor')
        self.__tenor = value        

    @property
    def pricing_convention(self) -> str:
        """Pricing convention that is used."""
        return self.__pricing_convention

    @pricing_convention.setter
    def pricing_convention(self, value: str):
        self._property_changed('pricing_convention')
        self.__pricing_convention = value        

    @property
    def popularity(self) -> float:
        """Popularity of series."""
        return self.__popularity

    @popularity.setter
    def popularity(self, value: float):
        self._property_changed('popularity')
        self.__popularity = value        

    @property
    def floating_rate_option(self) -> str:
        """The underlying benchmark for the floating rate, e.g. USD-LIBOR-BBA, EUR-EURIBOR-
           TELERATE."""
        return self.__floating_rate_option

    @floating_rate_option.setter
    def floating_rate_option(self, value: str):
        self._property_changed('floating_rate_option')
        self.__floating_rate_option = value        

    @property
    def hedge_value_type(self) -> str:
        """The type of value for which is applied to value the hedge in the comparison."""
        return self.__hedge_value_type

    @hedge_value_type.setter
    def hedge_value_type(self, value: str):
        self._property_changed('hedge_value_type')
        self.__hedge_value_type = value        

    @property
    def asset_parameters_clearing_house(self) -> str:
        """Clearing house."""
        return self.__asset_parameters_clearing_house

    @asset_parameters_clearing_house.setter
    def asset_parameters_clearing_house(self, value: str):
        self._property_changed('asset_parameters_clearing_house')
        self.__asset_parameters_clearing_house = value        

    @property
    def disclaimer(self) -> str:
        """The legal disclaimer associated with the record."""
        return self.__disclaimer

    @disclaimer.setter
    def disclaimer(self, value: str):
        self._property_changed('disclaimer')
        self.__disclaimer = value        

    @property
    def payer_frequency(self) -> str:
        """Tenor"""
        return self.__payer_frequency

    @payer_frequency.setter
    def payer_frequency(self, value: str):
        self._property_changed('payer_frequency')
        self.__payer_frequency = value        

    @property
    def loan_fee(self) -> float:
        """Fee charged for the loan of securities to a borrower in a securities lending
           agreement."""
        return self.__loan_fee

    @loan_fee.setter
    def loan_fee(self, value: float):
        self._property_changed('loan_fee')
        self.__loan_fee = value        

    @property
    def deployment_version(self) -> str:
        """Deployment version."""
        return self.__deployment_version

    @deployment_version.setter
    def deployment_version(self, value: str):
        self._property_changed('deployment_version')
        self.__deployment_version = value        

    @property
    def buy16bps(self) -> float:
        """The amount GS would buy for 16 bps charge."""
        return self.__buy16bps

    @buy16bps.setter
    def buy16bps(self, value: float):
        self._property_changed('buy16bps')
        self.__buy16bps = value        

    @property
    def trade_day_count(self) -> str:
        """The determination of how interest accrues over time for the SB swap."""
        return self.__trade_day_count

    @trade_day_count.setter
    def trade_day_count(self, value: str):
        self._property_changed('trade_day_count')
        self.__trade_day_count = value        

    @property
    def transaction_type(self) -> str:
        """An indication that a publicly reportable security-based (SB) swap transaction
           has been incorrectly or erroneously publicly disseminated and is
           trade, novation or amendment."""
        return self.__transaction_type

    @transaction_type.setter
    def transaction_type(self, value: str):
        self._property_changed('transaction_type')
        self.__transaction_type = value        

    @property
    def price_to_sales(self) -> float:
        """Price to sales."""
        return self.__price_to_sales

    @price_to_sales.setter
    def price_to_sales(self, value: float):
        self._property_changed('price_to_sales')
        self.__price_to_sales = value        

    @property
    def new_ideas_qtd(self) -> float:
        """Ideas received by clients Quarter to date."""
        return self.__new_ideas_qtd

    @new_ideas_qtd.setter
    def new_ideas_qtd(self, value: float):
        self._property_changed('new_ideas_qtd')
        self.__new_ideas_qtd = value        

    @property
    def subdivision_name(self) -> str:
        """Name of the region or subdivision."""
        return self.__subdivision_name

    @subdivision_name.setter
    def subdivision_name(self, value: str):
        self._property_changed('subdivision_name')
        self.__subdivision_name = value        

    @property
    def adjusted_ask_price(self) -> float:
        """Latest Ask Price (price offering to sell) adjusted for corporate actions."""
        return self.__adjusted_ask_price

    @adjusted_ask_price.setter
    def adjusted_ask_price(self, value: float):
        self._property_changed('adjusted_ask_price')
        self.__adjusted_ask_price = value        

    @property
    def factor_universe(self) -> str:
        """Factor universe."""
        return self.__factor_universe

    @factor_universe.setter
    def factor_universe(self, value: str):
        self._property_changed('factor_universe')
        self.__factor_universe = value        

    @property
    def arrival_rt(self) -> float:
        """Arrival Realtime."""
        return self.__arrival_rt

    @arrival_rt.setter
    def arrival_rt(self, value: float):
        self._property_changed('arrival_rt')
        self.__arrival_rt = value        

    @property
    def internal_index_calc_agent(self) -> bool:
        """Calculation agent of the index."""
        return self.__internal_index_calc_agent

    @internal_index_calc_agent.setter
    def internal_index_calc_agent(self, value: bool):
        self._property_changed('internal_index_calc_agent')
        self.__internal_index_calc_agent = value        

    @property
    def excess_margin_value(self) -> float:
        """Available credit value."""
        return self.__excess_margin_value

    @excess_margin_value.setter
    def excess_margin_value(self, value: float):
        self._property_changed('excess_margin_value')
        self.__excess_margin_value = value        

    @property
    def transaction_cost(self) -> float:
        """Transaction cost."""
        return self.__transaction_cost

    @transaction_cost.setter
    def transaction_cost(self, value: float):
        self._property_changed('transaction_cost')
        self.__transaction_cost = value        

    @property
    def central_bank_swap_rate(self) -> float:
        """Returns the OIS swap rate for a swap structured between consecutive meeting
           dates."""
        return self.__central_bank_swap_rate

    @central_bank_swap_rate.setter
    def central_bank_swap_rate(self, value: float):
        self._property_changed('central_bank_swap_rate')
        self.__central_bank_swap_rate = value        

    @property
    def previous_new_confirmed(self) -> float:
        """The previous day's number of new confirmed cases."""
        return self.__previous_new_confirmed

    @previous_new_confirmed.setter
    def previous_new_confirmed(self, value: float):
        self._property_changed('previous_new_confirmed')
        self.__previous_new_confirmed = value        

    @property
    def unrealized_vwap_performance_bps(self) -> float:
        """Average execution price vs Consolidated VWAP (in limit) since order inception
           ??? unrealized."""
        return self.__unrealized_vwap_performance_bps

    @unrealized_vwap_performance_bps.setter
    def unrealized_vwap_performance_bps(self, value: float):
        self._property_changed('unrealized_vwap_performance_bps')
        self.__unrealized_vwap_performance_bps = value        

    @property
    def degree_days_daily_forecast(self) -> float:
        """The forecast value for degree days in Fahrenheit."""
        return self.__degree_days_daily_forecast

    @degree_days_daily_forecast.setter
    def degree_days_daily_forecast(self, value: float):
        self._property_changed('degree_days_daily_forecast')
        self.__degree_days_daily_forecast = value        

    @property
    def position_amount(self) -> float:
        """Corporate actions amount * shares."""
        return self.__position_amount

    @position_amount.setter
    def position_amount(self, value: float):
        self._property_changed('position_amount')
        self.__position_amount = value        

    @property
    def heat_index_hourly_forecast(self) -> float:
        """The hourly forecast value for heat index in Fahrenheit."""
        return self.__heat_index_hourly_forecast

    @heat_index_hourly_forecast.setter
    def heat_index_hourly_forecast(self, value: float):
        self._property_changed('heat_index_hourly_forecast')
        self.__heat_index_hourly_forecast = value        

    @property
    def ma_rank(self) -> float:
        """M&A Rank, which may take on the following values: 1 represents high (at least
           30%, but less than 50%) probability of the company becoming an
           acquisition target, 2 represents medium (at least 15%, but less than
           30%) probability and 3 represents low (less than 15%) probability."""
        return self.__ma_rank

    @ma_rank.setter
    def ma_rank(self, value: float):
        self._property_changed('ma_rank')
        self.__ma_rank = value        

    @property
    def fx_positioning_source(self) -> str:
        """Source of positioning data in the FX market."""
        return self.__fx_positioning_source

    @fx_positioning_source.setter
    def fx_positioning_source(self, value: str):
        self._property_changed('fx_positioning_source')
        self.__fx_positioning_source = value        

    @property
    def vol60d(self) -> float:
        """T60D volatility, measured as the deviation of log returns."""
        return self.__vol60d

    @vol60d.setter
    def vol60d(self, value: float):
        self._property_changed('vol60d')
        self.__vol60d = value        

    @property
    def event_start_date_time(self) -> datetime.datetime:
        """The start time of the event if the event occurs during a time window and the
           event has a specific start time, using UTC convention (optional)."""
        return self.__event_start_date_time

    @event_start_date_time.setter
    def event_start_date_time(self, value: datetime.datetime):
        self._property_changed('event_start_date_time')
        self.__event_start_date_time = value        

    @property
    def implied_volatility_by_delta_strike(self) -> float:
        """Volatility of an asset implied by observations of market prices."""
        return self.__implied_volatility_by_delta_strike

    @implied_volatility_by_delta_strike.setter
    def implied_volatility_by_delta_strike(self, value: float):
        self._property_changed('implied_volatility_by_delta_strike')
        self.__implied_volatility_by_delta_strike = value        

    @property
    def mq_symbol(self) -> str:
        """Goldman Sachs Marquee Symbol applied to entities such as Backtester."""
        return self.__mq_symbol

    @mq_symbol.setter
    def mq_symbol(self, value: str):
        self._property_changed('mq_symbol')
        self.__mq_symbol = value        

    @property
    def num_total_units(self) -> float:
        """Total Units."""
        return self.__num_total_units

    @num_total_units.setter
    def num_total_units(self, value: float):
        self._property_changed('num_total_units')
        self.__num_total_units = value        

    @property
    def corporate_action(self) -> bool:
        """Whether or not it is a corporate action."""
        return self.__corporate_action

    @corporate_action.setter
    def corporate_action(self, value: bool):
        self._property_changed('corporate_action')
        self.__corporate_action = value        

    @property
    def leg1_price_type(self) -> str:
        """Price denomination and unit of leg 1."""
        return self.__leg1_price_type

    @leg1_price_type.setter
    def leg1_price_type(self, value: str):
        self._property_changed('leg1_price_type')
        self.__leg1_price_type = value        

    @property
    def asset_parameters_payer_rate_option(self) -> str:
        """The underlying benchmark for the payer, e.g. USD-LIBOR-BBA, EUR-EURIBOR-
           TELERATE."""
        return self.__asset_parameters_payer_rate_option

    @asset_parameters_payer_rate_option.setter
    def asset_parameters_payer_rate_option(self, value: str):
        self._property_changed('asset_parameters_payer_rate_option')
        self.__asset_parameters_payer_rate_option = value        

    @property
    def sell20cents(self) -> float:
        """The amount GS would sell for 20 cents charge."""
        return self.__sell20cents

    @sell20cents.setter
    def sell20cents(self, value: float):
        self._property_changed('sell20cents')
        self.__sell20cents = value        

    @property
    def leg2_fixed_payment_currency(self) -> str:
        """If fixed payment leg, the unit of fixed payment."""
        return self.__leg2_fixed_payment_currency

    @leg2_fixed_payment_currency.setter
    def leg2_fixed_payment_currency(self, value: str):
        self._property_changed('leg2_fixed_payment_currency')
        self.__leg2_fixed_payment_currency = value        

    @property
    def g_regional_score(self) -> float:
        """A company's score for G metrics within its region."""
        return self.__g_regional_score

    @g_regional_score.setter
    def g_regional_score(self, value: float):
        self._property_changed('g_regional_score')
        self.__g_regional_score = value        

    @property
    def hard_to_borrow(self) -> bool:
        """Whether or not an asset is hard to borrow."""
        return self.__hard_to_borrow

    @hard_to_borrow.setter
    def hard_to_borrow(self, value: bool):
        self._property_changed('hard_to_borrow')
        self.__hard_to_borrow = value        

    @property
    def sell5bps(self) -> float:
        """The amount GS would sell for 5 bps charge."""
        return self.__sell5bps

    @sell5bps.setter
    def sell5bps(self, value: float):
        self._property_changed('sell5bps')
        self.__sell5bps = value        

    @property
    def roll_vwap(self) -> float:
        """Calendar spread vwap."""
        return self.__roll_vwap

    @roll_vwap.setter
    def roll_vwap(self, value: float):
        self._property_changed('roll_vwap')
        self.__roll_vwap = value        

    @property
    def wpk(self) -> str:
        """Wertpapierkennnummer (WKN, WPKN, Wert), German security identifier code (subject
           to licensing)."""
        return self.__wpk

    @wpk.setter
    def wpk(self, value: str):
        self._property_changed('wpk')
        self.__wpk = value        

    @property
    def bespoke_swap(self) -> str:
        """Indication if the trade is bespoke."""
        return self.__bespoke_swap

    @bespoke_swap.setter
    def bespoke_swap(self, value: str):
        self._property_changed('bespoke_swap')
        self.__bespoke_swap = value        

    @property
    def asset_parameters_expiration_date(self) -> str:
        """Relative expiration date."""
        return self.__asset_parameters_expiration_date

    @asset_parameters_expiration_date.setter
    def asset_parameters_expiration_date(self, value: str):
        self._property_changed('asset_parameters_expiration_date')
        self.__asset_parameters_expiration_date = value        

    @property
    def country_name(self) -> str:
        """Country name for which FCI is calculated."""
        return self.__country_name

    @country_name.setter
    def country_name(self, value: str):
        self._property_changed('country_name')
        self.__country_name = value        

    @property
    def carry(self) -> float:
        """Carry."""
        return self.__carry

    @carry.setter
    def carry(self, value: float):
        self._property_changed('carry')
        self.__carry = value        

    @property
    def starting_date(self) -> str:
        """Start date of the period the valuation refers to."""
        return self.__starting_date

    @starting_date.setter
    def starting_date(self, value: str):
        self._property_changed('starting_date')
        self.__starting_date = value        

    @property
    def loan_id(self) -> str:
        """Loan reference for a securities lending loan."""
        return self.__loan_id

    @loan_id.setter
    def loan_id(self, value: str):
        self._property_changed('loan_id')
        self.__loan_id = value        

    @property
    def onboarded(self) -> bool:
        """Whether or not social domain has been onboarded."""
        return self.__onboarded

    @onboarded.setter
    def onboarded(self, value: bool):
        self._property_changed('onboarded')
        self.__onboarded = value        

    @property
    def liquidity_score(self) -> float:
        """Liquidity conditions in the aggregate market, calculated as the average of touch
           liquidity score, touch spread score, and depth spread score."""
        return self.__liquidity_score

    @liquidity_score.setter
    def liquidity_score(self, value: float):
        self._property_changed('liquidity_score')
        self.__liquidity_score = value        

    @property
    def long_rates_contribution(self) -> float:
        """Contribution of long rate component to FCI."""
        return self.__long_rates_contribution

    @long_rates_contribution.setter
    def long_rates_contribution(self, value: float):
        self._property_changed('long_rates_contribution')
        self.__long_rates_contribution = value        

    @property
    def source_date_span(self) -> float:
        """Date span for event in days."""
        return self.__source_date_span

    @source_date_span.setter
    def source_date_span(self, value: float):
        self._property_changed('source_date_span')
        self.__source_date_span = value        

    @property
    def ann_yield6_month(self) -> float:
        """Calculates the total return for 6 months, representing past performance."""
        return self.__ann_yield6_month

    @ann_yield6_month.setter
    def ann_yield6_month(self, value: float):
        self._property_changed('ann_yield6_month')
        self.__ann_yield6_month = value        

    @property
    def underlying_data_set_id(self) -> str:
        """Dataset on which this (virtual) dataset is based."""
        return self.__underlying_data_set_id

    @underlying_data_set_id.setter
    def underlying_data_set_id(self, value: str):
        self._property_changed('underlying_data_set_id')
        self.__underlying_data_set_id = value        

    @property
    def close_unadjusted(self) -> float:
        """Unadjusted Close level of an asset based on official exchange fixing or
           calculation agent marked level."""
        return self.__close_unadjusted

    @close_unadjusted.setter
    def close_unadjusted(self, value: float):
        self._property_changed('close_unadjusted')
        self.__close_unadjusted = value        

    @property
    def value_unit(self) -> str:
        """Value unit."""
        return self.__value_unit

    @value_unit.setter
    def value_unit(self, value: str):
        self._property_changed('value_unit')
        self.__value_unit = value        

    @property
    def quantity_unit(self) -> str:
        """Unit of measure for trade quantity."""
        return self.__quantity_unit

    @quantity_unit.setter
    def quantity_unit(self, value: str):
        self._property_changed('quantity_unit')
        self.__quantity_unit = value        

    @property
    def adjusted_low_price(self) -> float:
        """Adjusted low level of an asset based on official exchange fixing or calculation
           agent marked level."""
        return self.__adjusted_low_price

    @adjusted_low_price.setter
    def adjusted_low_price(self, value: float):
        self._property_changed('adjusted_low_price')
        self.__adjusted_low_price = value        

    @property
    def is_momentum(self) -> bool:
        """Flag indicating whether the value is a momentum value or not."""
        return self.__is_momentum

    @is_momentum.setter
    def is_momentum(self, value: bool):
        self._property_changed('is_momentum')
        self.__is_momentum = value        

    @property
    def long_conviction_large(self) -> float:
        """The count of long ideas with large conviction."""
        return self.__long_conviction_large

    @long_conviction_large.setter
    def long_conviction_large(self, value: float):
        self._property_changed('long_conviction_large')
        self.__long_conviction_large = value        

    @property
    def oad(self) -> float:
        """Option-adjusted duration."""
        return self.__oad

    @oad.setter
    def oad(self, value: float):
        self._property_changed('oad')
        self.__oad = value        

    @property
    def rate(self) -> float:
        """Rate of the asset for the time period in percent."""
        return self.__rate

    @rate.setter
    def rate(self, value: float):
        self._property_changed('rate')
        self.__rate = value        

    @property
    def coupon_type(self) -> str:
        """The coupon type of the bond."""
        return self.__coupon_type

    @coupon_type.setter
    def coupon_type(self, value: str):
        self._property_changed('coupon_type')
        self.__coupon_type = value        

    @property
    def client(self) -> str:
        """Entity name."""
        return self.__client

    @client.setter
    def client(self, value: str):
        self._property_changed('client')
        self.__client = value        

    @property
    def esg_detailed_metric(self) -> float:
        """Value of the metric corresponding to the parameter metricName."""
        return self.__esg_detailed_metric

    @esg_detailed_metric.setter
    def esg_detailed_metric(self, value: float):
        self._property_changed('esg_detailed_metric')
        self.__esg_detailed_metric = value        

    @property
    def conviction_list(self) -> bool:
        """Conviction List, which is true if the security is on the Conviction Buy List or
           false otherwise. Securities with a convictionList value equal to true
           are by definition a subset of the securities with a rating equal to
           Buy."""
        return self.__conviction_list

    @conviction_list.setter
    def conviction_list(self, value: bool):
        self._property_changed('conviction_list')
        self.__conviction_list = value        

    @property
    def passive_etf_ratio(self) -> float:
        """Ratio of passive ETF ownership, i.e the proportion of a company's marketcap that
           is held by passive ETFs. Normalised between -3 (low level) and +3
           (high level)."""
        return self.__passive_etf_ratio

    @passive_etf_ratio.setter
    def passive_etf_ratio(self, value: float):
        self._property_changed('passive_etf_ratio')
        self.__passive_etf_ratio = value        

    @property
    def future_month_g26(self) -> float:
        """Commods future month code."""
        return self.__future_month_g26

    @future_month_g26.setter
    def future_month_g26(self, value: float):
        self._property_changed('future_month_g26')
        self.__future_month_g26 = value        

    @property
    def future_month_g25(self) -> float:
        """Commods future month code."""
        return self.__future_month_g25

    @future_month_g25.setter
    def future_month_g25(self, value: float):
        self._property_changed('future_month_g25')
        self.__future_month_g25 = value        

    @property
    def future_month_g24(self) -> float:
        """Commods future month code."""
        return self.__future_month_g24

    @future_month_g24.setter
    def future_month_g24(self, value: float):
        self._property_changed('future_month_g24')
        self.__future_month_g24 = value        

    @property
    def future_month_g23(self) -> float:
        """Commods future month code."""
        return self.__future_month_g23

    @future_month_g23.setter
    def future_month_g23(self, value: float):
        self._property_changed('future_month_g23')
        self.__future_month_g23 = value        

    @property
    def type_of_return(self) -> str:
        """The type of return for the commodity index. Only applicable for commodity
           indices."""
        return self.__type_of_return

    @type_of_return.setter
    def type_of_return(self, value: str):
        self._property_changed('type_of_return')
        self.__type_of_return = value        

    @property
    def future_month_g22(self) -> float:
        """Commods future month code."""
        return self.__future_month_g22

    @future_month_g22.setter
    def future_month_g22(self, value: float):
        self._property_changed('future_month_g22')
        self.__future_month_g22 = value        

    @property
    def servicing_cost_long_pnl(self) -> float:
        """Servicing Cost Long Profit and Loss."""
        return self.__servicing_cost_long_pnl

    @servicing_cost_long_pnl.setter
    def servicing_cost_long_pnl(self, value: float):
        self._property_changed('servicing_cost_long_pnl')
        self.__servicing_cost_long_pnl = value        

    @property
    def excess_margin_percentage(self) -> float:
        """Available credit percentage."""
        return self.__excess_margin_percentage

    @excess_margin_percentage.setter
    def excess_margin_percentage(self, value: float):
        self._property_changed('excess_margin_percentage')
        self.__excess_margin_percentage = value        

    @property
    def future_month_g21(self) -> float:
        """Commods future month code."""
        return self.__future_month_g21

    @future_month_g21.setter
    def future_month_g21(self, value: float):
        self._property_changed('future_month_g21')
        self.__future_month_g21 = value        

    @property
    def total_mild(self) -> float:
        """Total number of active cases with mild symptoms."""
        return self.__total_mild

    @total_mild.setter
    def total_mild(self, value: float):
        self._property_changed('total_mild')
        self.__total_mild = value        

    @property
    def realized_arrival_performance_bps(self) -> float:
        """Average execution price vs Consolidated Arrival (in limit) since order inception
           ??? realized."""
        return self.__realized_arrival_performance_bps

    @realized_arrival_performance_bps.setter
    def realized_arrival_performance_bps(self, value: float):
        self._property_changed('realized_arrival_performance_bps')
        self.__realized_arrival_performance_bps = value        

    @property
    def precipitation_daily_forecast_inches(self) -> float:
        """The forecast value for precipitation in Inch."""
        return self.__precipitation_daily_forecast_inches

    @precipitation_daily_forecast_inches.setter
    def precipitation_daily_forecast_inches(self, value: float):
        self._property_changed('precipitation_daily_forecast_inches')
        self.__precipitation_daily_forecast_inches = value        

    @property
    def exchange_id(self) -> str:
        """Unique identifier for an exchange."""
        return self.__exchange_id

    @exchange_id.setter
    def exchange_id(self, value: str):
        self._property_changed('exchange_id')
        self.__exchange_id = value        

    @property
    def leg2_fixed_payment(self) -> float:
        """If fixed payment leg, the fixed payment amount, which is price*number of
           contracts bought*contract unit."""
        return self.__leg2_fixed_payment

    @leg2_fixed_payment.setter
    def leg2_fixed_payment(self, value: float):
        self._property_changed('leg2_fixed_payment')
        self.__leg2_fixed_payment = value        

    @property
    def tcm_cost_horizon20_day(self) -> float:
        """TCM cost with a 20 day time horizon."""
        return self.__tcm_cost_horizon20_day

    @tcm_cost_horizon20_day.setter
    def tcm_cost_horizon20_day(self, value: float):
        self._property_changed('tcm_cost_horizon20_day')
        self.__tcm_cost_horizon20_day = value        

    @property
    def realm(self) -> str:
        """Realm."""
        return self.__realm

    @realm.setter
    def realm(self, value: str):
        self._property_changed('realm')
        self.__realm = value        

    @property
    def gate(self) -> float:
        """Gate amount."""
        return self.__gate

    @gate.setter
    def gate(self, value: float):
        self._property_changed('gate')
        self.__gate = value        

    @property
    def bid(self) -> float:
        """Latest Bid Price (price willing to buy)."""
        return self.__bid

    @bid.setter
    def bid(self, value: float):
        self._property_changed('bid')
        self.__bid = value        

    @property
    def hedge_value(self) -> float:
        return self.__hedge_value

    @hedge_value.setter
    def hedge_value(self, value: float):
        self._property_changed('hedge_value')
        self.__hedge_value = value        

    @property
    def is_seasonally_adjusted(self) -> bool:
        """Flag indicating if the forecast value is seasonally adjusted."""
        return self.__is_seasonally_adjusted

    @is_seasonally_adjusted.setter
    def is_seasonally_adjusted(self, value: bool):
        self._property_changed('is_seasonally_adjusted')
        self.__is_seasonally_adjusted = value        

    @property
    def order_start_time(self) -> datetime.datetime:
        """Order start time."""
        return self.__order_start_time

    @order_start_time.setter
    def order_start_time(self, value: datetime.datetime):
        self._property_changed('order_start_time')
        self.__order_start_time = value        

    @property
    def is_aggressive(self) -> float:
        """Indicates if the fill was aggressive or passive."""
        return self.__is_aggressive

    @is_aggressive.setter
    def is_aggressive(self, value: float):
        self._property_changed('is_aggressive')
        self.__is_aggressive = value        

    @property
    def floating_rate_designated_maturity(self) -> str:
        """Tenor"""
        return self.__floating_rate_designated_maturity

    @floating_rate_designated_maturity.setter
    def floating_rate_designated_maturity(self, value: str):
        self._property_changed('floating_rate_designated_maturity')
        self.__floating_rate_designated_maturity = value        

    @property
    def percentage_near_executed_quantity(self) -> float:
        """Percentage of total order filled at passive touch."""
        return self.__percentage_near_executed_quantity

    @percentage_near_executed_quantity.setter
    def percentage_near_executed_quantity(self, value: float):
        self._property_changed('percentage_near_executed_quantity')
        self.__percentage_near_executed_quantity = value        

    @property
    def order_id(self) -> str:
        """The unique ID of the order."""
        return self.__order_id

    @order_id.setter
    def order_id(self, value: str):
        self._property_changed('order_id')
        self.__order_id = value        

    @property
    def hospital_type(self) -> str:
        """Categorical type of hospital as defined by the last four digits of the
           hospital???s Medicare Provider Number, ie. Critical Access Hospital,
           Short Term Acute Care Hospital, etc."""
        return self.__hospital_type

    @hospital_type.setter
    def hospital_type(self, value: str):
        self._property_changed('hospital_type')
        self.__hospital_type = value        

    @property
    def day_close_realized_bps(self) -> float:
        """Realised performance vs Previous Close, in bps."""
        return self.__day_close_realized_bps

    @day_close_realized_bps.setter
    def day_close_realized_bps(self, value: float):
        self._property_changed('day_close_realized_bps')
        self.__day_close_realized_bps = value        

    @property
    def precipitation_hourly_forecast(self) -> float:
        """The hourly forecast value for precipitation in Inch."""
        return self.__precipitation_hourly_forecast

    @precipitation_hourly_forecast.setter
    def precipitation_hourly_forecast(self, value: float):
        self._property_changed('precipitation_hourly_forecast')
        self.__precipitation_hourly_forecast = value        

    @property
    def market_cap_usd(self) -> float:
        """Market capitalization of a given asset denominated in USD."""
        return self.__market_cap_usd

    @market_cap_usd.setter
    def market_cap_usd(self, value: float):
        self._property_changed('market_cap_usd')
        self.__market_cap_usd = value        

    @property
    def auction_fills_percentage(self) -> float:
        """Percent of total order filled in auction."""
        return self.__auction_fills_percentage

    @auction_fills_percentage.setter
    def auction_fills_percentage(self, value: float):
        self._property_changed('auction_fills_percentage')
        self.__auction_fills_percentage = value        

    @property
    def high_price(self) -> float:
        """High level of an asset based on official exchange fixing or calculation agent
           marked level."""
        return self.__high_price

    @high_price.setter
    def high_price(self, value: float):
        self._property_changed('high_price')
        self.__high_price = value        

    @property
    def absolute_shares(self) -> float:
        """The number of shares without adjusting for side."""
        return self.__absolute_shares

    @absolute_shares.setter
    def absolute_shares(self, value: float):
        self._property_changed('absolute_shares')
        self.__absolute_shares = value        

    @property
    def fixed_rate_day_count_fraction(self) -> str:
        """Day Count Fraction"""
        return self.__fixed_rate_day_count_fraction

    @fixed_rate_day_count_fraction.setter
    def fixed_rate_day_count_fraction(self, value: str):
        self._property_changed('fixed_rate_day_count_fraction')
        self.__fixed_rate_day_count_fraction = value        

    @property
    def model(self) -> str:
        """Model."""
        return self.__model

    @model.setter
    def model(self, value: str):
        self._property_changed('model')
        self.__model = value        

    @property
    def unrealized_twap_performance_usd(self) -> float:
        """Average execution price vs Consolidated TWAP since order inception ???
           unrealized in $."""
        return self.__unrealized_twap_performance_usd

    @unrealized_twap_performance_usd.setter
    def unrealized_twap_performance_usd(self, value: float):
        self._property_changed('unrealized_twap_performance_usd')
        self.__unrealized_twap_performance_usd = value        

    @property
    def id(self) -> str:
        """Marquee unique identifier"""
        return self.__id

    @id.setter
    def id(self, value: str):
        self._property_changed('id')
        self.__id = value        

    @property
    def maturity(self) -> str:
        """Maturity of the instrument."""
        return self.__maturity

    @maturity.setter
    def maturity(self, value: str):
        self._property_changed('maturity')
        self.__maturity = value        

    @property
    def delta_change(self) -> str:
        """PadMaster delta changes."""
        return self.__delta_change

    @delta_change.setter
    def delta_change(self, value: str):
        self._property_changed('delta_change')
        self.__delta_change = value        

    @property
    def index(self) -> float:
        """Mid point or volume weighted average of all transactions."""
        return self.__index

    @index.setter
    def index(self, value: float):
        self._property_changed('index')
        self.__index = value        

    @property
    def unrealized_arrival_performance_usd(self) -> float:
        """Average execution price vs Consolidated Arrival (in limit) since order inception
           ??? unrealized in $."""
        return self.__unrealized_arrival_performance_usd

    @unrealized_arrival_performance_usd.setter
    def unrealized_arrival_performance_usd(self, value: float):
        self._property_changed('unrealized_arrival_performance_usd')
        self.__unrealized_arrival_performance_usd = value        

    @property
    def iceberg_slippage(self) -> float:
        """Iceberg slippage represented as pips."""
        return self.__iceberg_slippage

    @iceberg_slippage.setter
    def iceberg_slippage(self, value: float):
        self._property_changed('iceberg_slippage')
        self.__iceberg_slippage = value        

    @property
    def sell120cents(self) -> float:
        """The amount GS would sell for 120 cents charge."""
        return self.__sell120cents

    @sell120cents.setter
    def sell120cents(self, value: float):
        self._property_changed('sell120cents')
        self.__sell120cents = value        

    @property
    def future_month_x26(self) -> float:
        """Commods future month code."""
        return self.__future_month_x26

    @future_month_x26.setter
    def future_month_x26(self, value: float):
        self._property_changed('future_month_x26')
        self.__future_month_x26 = value        

    @property
    def asset_types(self) -> Tuple[Tuple[Union[AssetType, str], ...], ...]:
        """Asset Types supported."""
        return self.__asset_types

    @asset_types.setter
    def asset_types(self, value: Tuple[Tuple[Union[AssetType, str], ...], ...]):
        self._property_changed('asset_types')
        self.__asset_types = value        

    @property
    def future_month_x25(self) -> float:
        """Commods future month code."""
        return self.__future_month_x25

    @future_month_x25.setter
    def future_month_x25(self, value: float):
        self._property_changed('future_month_x25')
        self.__future_month_x25 = value        

    @property
    def bcid(self) -> str:
        """Bloomberg composite identifier (ticker and country code)."""
        return self.__bcid

    @bcid.setter
    def bcid(self, value: str):
        self._property_changed('bcid')
        self.__bcid = value        

    @property
    def mkt_point(self) -> Tuple[Tuple[str, ...], ...]:
        """The MDAPI Point (e.g. 3m, 10y, 11y, Dec19)."""
        return self.__mkt_point

    @mkt_point.setter
    def mkt_point(self, value: Tuple[Tuple[str, ...], ...]):
        self._property_changed('mkt_point')
        self.__mkt_point = value        

    @property
    def future_month_x24(self) -> float:
        """Commods future month code."""
        return self.__future_month_x24

    @future_month_x24.setter
    def future_month_x24(self, value: float):
        self._property_changed('future_month_x24')
        self.__future_month_x24 = value        

    @property
    def restriction_start_date(self) -> datetime.date:
        """The date at which the security restriction was enacted."""
        return self.__restriction_start_date

    @restriction_start_date.setter
    def restriction_start_date(self, value: datetime.date):
        self._property_changed('restriction_start_date')
        self.__restriction_start_date = value        

    @property
    def touch_liquidity_score(self) -> float:
        """Z-score of the amount available to trade at the top of the aggregated order
           book."""
        return self.__touch_liquidity_score

    @touch_liquidity_score.setter
    def touch_liquidity_score(self, value: float):
        self._property_changed('touch_liquidity_score')
        self.__touch_liquidity_score = value        

    @property
    def future_month_x23(self) -> float:
        """Commods future month code."""
        return self.__future_month_x23

    @future_month_x23.setter
    def future_month_x23(self, value: float):
        self._property_changed('future_month_x23')
        self.__future_month_x23 = value        

    @property
    def future_month_x22(self) -> float:
        """Commods future month code."""
        return self.__future_month_x22

    @future_month_x22.setter
    def future_month_x22(self, value: float):
        self._property_changed('future_month_x22')
        self.__future_month_x22 = value        

    @property
    def factor_category_id(self) -> str:
        """Id for Factor Categories. Note that 'CUR' should be used to represent the
           currency category. Must match regex pattern ^[a-zA-Z0-9]{0,20}$."""
        return self.__factor_category_id

    @factor_category_id.setter
    def factor_category_id(self, value: str):
        self._property_changed('factor_category_id')
        self.__factor_category_id = value        

    @property
    def security_type_id(self) -> str:
        """PadMaster unique security type identifier."""
        return self.__security_type_id

    @security_type_id.setter
    def security_type_id(self, value: str):
        self._property_changed('security_type_id')
        self.__security_type_id = value        

    @property
    def future_month_x21(self) -> float:
        """Commods future month code."""
        return self.__future_month_x21

    @future_month_x21.setter
    def future_month_x21(self, value: float):
        self._property_changed('future_month_x21')
        self.__future_month_x21 = value        

    @property
    def investment_ytd(self) -> float:
        """Total net investment Year to date."""
        return self.__investment_ytd

    @investment_ytd.setter
    def investment_ytd(self, value: float):
        self._property_changed('investment_ytd')
        self.__investment_ytd = value        

    @property
    def leg2_notional(self) -> float:
        """The total Notional amount or quantity of units of the leg 2 underlying asset."""
        return self.__leg2_notional

    @leg2_notional.setter
    def leg2_notional(self, value: float):
        self._property_changed('leg2_notional')
        self.__leg2_notional = value        

    @property
    def sell1bps(self) -> float:
        """The amount GS would sell for 1 bps charge."""
        return self.__sell1bps

    @sell1bps.setter
    def sell1bps(self, value: float):
        self._property_changed('sell1bps')
        self.__sell1bps = value        

    @property
    def sell200cents(self) -> float:
        """The amount GS would sell for 200 cents charge."""
        return self.__sell200cents

    @sell200cents.setter
    def sell200cents(self, value: float):
        self._property_changed('sell200cents')
        self.__sell200cents = value        

    @property
    def expected_completion_date(self) -> str:
        """Expected day of acquisition completion."""
        return self.__expected_completion_date

    @expected_completion_date.setter
    def expected_completion_date(self, value: str):
        self._property_changed('expected_completion_date')
        self.__expected_completion_date = value        

    @property
    def spread_option_vol(self) -> float:
        """Historical implied normal volatility for a liquid point on spread option vol
           surface."""
        return self.__spread_option_vol

    @spread_option_vol.setter
    def spread_option_vol(self, value: float):
        self._property_changed('spread_option_vol')
        self.__spread_option_vol = value        

    @property
    def sell80cents(self) -> float:
        """The amount GS would sell for 80 cents charge."""
        return self.__sell80cents

    @sell80cents.setter
    def sell80cents(self, value: float):
        self._property_changed('sell80cents')
        self.__sell80cents = value        

    @property
    def inflation_swap_rate(self) -> float:
        """Zero coupon inflation swap break-even rate for a given currency."""
        return self.__inflation_swap_rate

    @inflation_swap_rate.setter
    def inflation_swap_rate(self, value: float):
        self._property_changed('inflation_swap_rate')
        self.__inflation_swap_rate = value        

    @property
    def active_queries(self) -> float:
        """Active Queries."""
        return self.__active_queries

    @active_queries.setter
    def active_queries(self, value: float):
        self._property_changed('active_queries')
        self.__active_queries = value        

    @property
    def sell45bps(self) -> float:
        """The amount GS would sell for 45 bps charge."""
        return self.__sell45bps

    @sell45bps.setter
    def sell45bps(self, value: float):
        self._property_changed('sell45bps')
        self.__sell45bps = value        

    @property
    def embeded_option(self) -> str:
        """An indication of whether or not the option fields are for an embedded option."""
        return self.__embeded_option

    @embeded_option.setter
    def embeded_option(self, value: str):
        self._property_changed('embeded_option')
        self.__embeded_option = value        

    @property
    def event_source(self) -> str:
        """Equals GS if the event is sourced from Goldman Sachs Global Investment Research
           analysts. Equals TR if the event is sourced from Refinitive
           StreetEvents."""
        return self.__event_source

    @event_source.setter
    def event_source(self, value: str):
        self._property_changed('event_source')
        self.__event_source = value        

    @property
    def qis_perm_no(self) -> str:
        """QIS Permanent Security Number."""
        return self.__qis_perm_no

    @qis_perm_no.setter
    def qis_perm_no(self, value: str):
        self._property_changed('qis_perm_no')
        self.__qis_perm_no = value        

    @property
    def settlement(self) -> str:
        """Swap Settlement Type"""
        return self.__settlement

    @settlement.setter
    def settlement(self, value: str):
        self._property_changed('settlement')
        self.__settlement = value        

    @property
    def shareclass_id(self) -> str:
        """Identifies shareclass with a unique code."""
        return self.__shareclass_id

    @shareclass_id.setter
    def shareclass_id(self, value: str):
        self._property_changed('shareclass_id')
        self.__shareclass_id = value        

    @property
    def feature2(self) -> str:
        """Second metrics feature."""
        return self.__feature2

    @feature2.setter
    def feature2(self, value: str):
        self._property_changed('feature2')
        self.__feature2 = value        

    @property
    def feature3(self) -> str:
        """Third metrics feature."""
        return self.__feature3

    @feature3.setter
    def feature3(self, value: str):
        self._property_changed('feature3')
        self.__feature3 = value        

    @property
    def settlement_currency2(self) -> str:
        """The settlement currency type for SB swap transactions."""
        return self.__settlement_currency2

    @settlement_currency2.setter
    def settlement_currency2(self, value: str):
        self._property_changed('settlement_currency2')
        self.__settlement_currency2 = value        

    @property
    def sts_commodity_sector(self) -> str:
        """Commodity sector for STS assets."""
        return self.__sts_commodity_sector

    @sts_commodity_sector.setter
    def sts_commodity_sector(self, value: str):
        self._property_changed('sts_commodity_sector')
        self.__sts_commodity_sector = value        

    @property
    def exception_status(self) -> str:
        """The violation status for this particular line item."""
        return self.__exception_status

    @exception_status.setter
    def exception_status(self, value: str):
        self._property_changed('exception_status')
        self.__exception_status = value        

    @property
    def overnight_news_intensity(self) -> float:
        """A measure of the intensity/extent of media attention to each stock compared with
           other stocks in the index. It is based on the number of overnight
           news articles that are highly relevant for each stock. Overnight is
           between previous day???s close and current day???s open."""
        return self.__overnight_news_intensity

    @overnight_news_intensity.setter
    def overnight_news_intensity(self, value: float):
        self._property_changed('overnight_news_intensity')
        self.__overnight_news_intensity = value        

    @property
    def sales_coverage(self) -> str:
        """Primary or secondary sales coverage."""
        return self.__sales_coverage

    @sales_coverage.setter
    def sales_coverage(self, value: str):
        self._property_changed('sales_coverage')
        self.__sales_coverage = value        

    @property
    def feature1(self) -> str:
        """First metrics feature."""
        return self.__feature1

    @feature1.setter
    def feature1(self, value: str):
        self._property_changed('feature1')
        self.__feature1 = value        

    @property
    def tcm_cost_participation_rate10_pct(self) -> float:
        """TCM cost with a 10 percent participation rate."""
        return self.__tcm_cost_participation_rate10_pct

    @tcm_cost_participation_rate10_pct.setter
    def tcm_cost_participation_rate10_pct(self, value: float):
        self._property_changed('tcm_cost_participation_rate10_pct')
        self.__tcm_cost_participation_rate10_pct = value        

    @property
    def event_time(self) -> str:
        """The time of the event if the event has a specific time or the end time of the
           event if the event occurs during a time window (optional). It is
           represented in HH:MM 24 hour format in the time zone of the exchange
           where the company is listed."""
        return self.__event_time

    @event_time.setter
    def event_time(self, value: str):
        self._property_changed('event_time')
        self.__event_time = value        

    @property
    def position_source_name(self) -> str:
        """Position source name for quick access."""
        return self.__position_source_name

    @position_source_name.setter
    def position_source_name(self, value: str):
        self._property_changed('position_source_name')
        self.__position_source_name = value        

    @property
    def delivery_date(self) -> datetime.date:
        """The final date by which the underlying commodity for a futures contract must be
           delivered in order for the terms of the contract to be fulfilled."""
        return self.__delivery_date

    @delivery_date.setter
    def delivery_date(self, value: datetime.date):
        self._property_changed('delivery_date')
        self.__delivery_date = value        

    @property
    def settlement_currency1(self) -> str:
        """The settlement currency type for SB swap transactions."""
        return self.__settlement_currency1

    @settlement_currency1.setter
    def settlement_currency1(self, value: str):
        self._property_changed('settlement_currency1')
        self.__settlement_currency1 = value        

    @property
    def interest_rate(self) -> float:
        """Interest rate."""
        return self.__interest_rate

    @interest_rate.setter
    def interest_rate(self, value: float):
        self._property_changed('interest_rate')
        self.__interest_rate = value        

    @property
    def side(self) -> str:
        """Long or short."""
        return self.__side

    @side.setter
    def side(self, value: str):
        self._property_changed('side')
        self.__side = value        

    @property
    def dynamic_hybrid_aggressive_style(self) -> str:
        """Aggressive style of a Dynamic Hybrid order."""
        return self.__dynamic_hybrid_aggressive_style

    @dynamic_hybrid_aggressive_style.setter
    def dynamic_hybrid_aggressive_style(self, value: str):
        self._property_changed('dynamic_hybrid_aggressive_style')
        self.__dynamic_hybrid_aggressive_style = value        

    @property
    def compliance_restricted_status(self) -> str:
        """Restricted status as set by compliance."""
        return self.__compliance_restricted_status

    @compliance_restricted_status.setter
    def compliance_restricted_status(self, value: str):
        self._property_changed('compliance_restricted_status')
        self.__compliance_restricted_status = value        

    @property
    def borrow_fee(self) -> float:
        """An indication of the rate one would be charged for borrowing/shorting the
           relevant asset on that day, expressed in annualized percent terms.
           Rates may change daily."""
        return self.__borrow_fee

    @borrow_fee.setter
    def borrow_fee(self, value: float):
        self._property_changed('borrow_fee')
        self.__borrow_fee = value        

    @property
    def ever_icu(self) -> float:
        """Total number of patients ever in intensive care for COVID."""
        return self.__ever_icu

    @ever_icu.setter
    def ever_icu(self, value: float):
        self._property_changed('ever_icu')
        self.__ever_icu = value        

    @property
    def no_worse_than_level(self) -> float:
        """Prevents execution if the market level is worse than the specified level."""
        return self.__no_worse_than_level

    @no_worse_than_level.setter
    def no_worse_than_level(self, value: float):
        self._property_changed('no_worse_than_level')
        self.__no_worse_than_level = value        

    @property
    def update_time(self) -> datetime.datetime:
        """Update time of the data element, which allows historical as-of query."""
        return self.__update_time

    @update_time.setter
    def update_time(self, value: datetime.datetime):
        self._property_changed('update_time')
        self.__update_time = value        

    @property
    def loan_spread(self) -> float:
        """The difference between the investment rate on cash collateral and the rebate
           rate of a loan."""
        return self.__loan_spread

    @loan_spread.setter
    def loan_spread(self, value: float):
        self._property_changed('loan_spread')
        self.__loan_spread = value        

    @property
    def tcm_cost_horizon12_hour(self) -> float:
        """TCM cost with a 12 hour time horizon."""
        return self.__tcm_cost_horizon12_hour

    @tcm_cost_horizon12_hour.setter
    def tcm_cost_horizon12_hour(self, value: float):
        self._property_changed('tcm_cost_horizon12_hour')
        self.__tcm_cost_horizon12_hour = value        

    @property
    def dew_point(self) -> float:
        """Temperature in fahrenheit below which water condenses."""
        return self.__dew_point

    @dew_point.setter
    def dew_point(self, value: float):
        self._property_changed('dew_point')
        self.__dew_point = value        

    @property
    def research_commission(self) -> float:
        """The dollar amount of commissions received from clients."""
        return self.__research_commission

    @research_commission.setter
    def research_commission(self, value: float):
        self._property_changed('research_commission')
        self.__research_commission = value        

    @property
    def buy2bps(self) -> float:
        """The amount GS would buy for 2 bps charge."""
        return self.__buy2bps

    @buy2bps.setter
    def buy2bps(self, value: float):
        self._property_changed('buy2bps')
        self.__buy2bps = value        

    @property
    def asset_classifications_risk_country_code(self) -> str:
        """Risk Country code (ISO 3166)."""
        return self.__asset_classifications_risk_country_code

    @asset_classifications_risk_country_code.setter
    def asset_classifications_risk_country_code(self, value: str):
        self._property_changed('asset_classifications_risk_country_code')
        self.__asset_classifications_risk_country_code = value        

    @property
    def new_ideas_mtd(self) -> float:
        """Ideas received by clients Month to date."""
        return self.__new_ideas_mtd

    @new_ideas_mtd.setter
    def new_ideas_mtd(self, value: float):
        self._property_changed('new_ideas_mtd')
        self.__new_ideas_mtd = value        

    @property
    def var_swap_by_expiry(self) -> float:
        """Strike such that the price of an uncapped variance swap on the underlying index
           is zero at inception."""
        return self.__var_swap_by_expiry

    @var_swap_by_expiry.setter
    def var_swap_by_expiry(self, value: float):
        self._property_changed('var_swap_by_expiry')
        self.__var_swap_by_expiry = value        

    @property
    def sell_date(self) -> datetime.date:
        """Sell date of the securities triggering the stock loan recall activity."""
        return self.__sell_date

    @sell_date.setter
    def sell_date(self, value: datetime.date):
        self._property_changed('sell_date')
        self.__sell_date = value        

    @property
    def aum_start(self) -> float:
        """Assets under management at the start of the period."""
        return self.__aum_start

    @aum_start.setter
    def aum_start(self, value: float):
        self._property_changed('aum_start')
        self.__aum_start = value        

    @property
    def asset_parameters_settlement(self) -> str:
        """Settlement type."""
        return self.__asset_parameters_settlement

    @asset_parameters_settlement.setter
    def asset_parameters_settlement(self, value: str):
        self._property_changed('asset_parameters_settlement')
        self.__asset_parameters_settlement = value        

    @property
    def max_temperature(self) -> float:
        """Maximum temperature observed on a given day in fahrenheit."""
        return self.__max_temperature

    @max_temperature.setter
    def max_temperature(self, value: float):
        self._property_changed('max_temperature')
        self.__max_temperature = value        

    @property
    def acquirer_shareholder_meeting_date(self) -> str:
        """Shareholders meeting date for acquiring entity."""
        return self.__acquirer_shareholder_meeting_date

    @acquirer_shareholder_meeting_date.setter
    def acquirer_shareholder_meeting_date(self, value: str):
        self._property_changed('acquirer_shareholder_meeting_date')
        self.__acquirer_shareholder_meeting_date = value        

    @property
    def count_ideas_wtd(self) -> float:
        """Ideas alive at a time Week to date."""
        return self.__count_ideas_wtd

    @count_ideas_wtd.setter
    def count_ideas_wtd(self, value: float):
        self._property_changed('count_ideas_wtd')
        self.__count_ideas_wtd = value        

    @property
    def arrival_rt_normalized(self) -> float:
        """Performance against Benchmark in pip."""
        return self.__arrival_rt_normalized

    @arrival_rt_normalized.setter
    def arrival_rt_normalized(self, value: float):
        self._property_changed('arrival_rt_normalized')
        self.__arrival_rt_normalized = value        

    @property
    def report_type(self) -> str:
        """Type of report to execute"""
        return self.__report_type

    @report_type.setter
    def report_type(self, value: str):
        self._property_changed('report_type')
        self.__report_type = value        

    @property
    def source_url(self) -> str:
        """Source URL."""
        return self.__source_url

    @source_url.setter
    def source_url(self, value: str):
        self._property_changed('source_url')
        self.__source_url = value        

    @property
    def estimated_return(self) -> float:
        """Estimated return of asset over a given period (e.g. close-to-close)."""
        return self.__estimated_return

    @estimated_return.setter
    def estimated_return(self, value: float):
        self._property_changed('estimated_return')
        self.__estimated_return = value        

    @property
    def high(self) -> float:
        """High level of an asset based on official exchange fixing or calculation agent
           marked level."""
        return self.__high

    @high.setter
    def high(self, value: float):
        self._property_changed('high')
        self.__high = value        

    @property
    def source_last_update(self) -> str:
        """Source last update."""
        return self.__source_last_update

    @source_last_update.setter
    def source_last_update(self, value: str):
        self._property_changed('source_last_update')
        self.__source_last_update = value        

    @property
    def sunshine_forecast(self) -> float:
        """The forecast value for sunshine."""
        return self.__sunshine_forecast

    @sunshine_forecast.setter
    def sunshine_forecast(self, value: float):
        self._property_changed('sunshine_forecast')
        self.__sunshine_forecast = value        

    @property
    def quantity_mw(self) -> float:
        """Quantity of electricity in megawatts."""
        return self.__quantity_mw

    @quantity_mw.setter
    def quantity_mw(self, value: float):
        self._property_changed('quantity_mw')
        self.__quantity_mw = value        

    @property
    def sell70cents(self) -> float:
        """The amount GS would sell for 70 cents charge."""
        return self.__sell70cents

    @sell70cents.setter
    def sell70cents(self, value: float):
        self._property_changed('sell70cents')
        self.__sell70cents = value        

    @property
    def sell110cents(self) -> float:
        """The amount GS would sell for 110 cents charge."""
        return self.__sell110cents

    @sell110cents.setter
    def sell110cents(self, value: float):
        self._property_changed('sell110cents')
        self.__sell110cents = value        

    @property
    def pnode_id(self) -> str:
        """Pricing node identifier sourced from Morningstar."""
        return self.__pnode_id

    @pnode_id.setter
    def pnode_id(self, value: str):
        self._property_changed('pnode_id')
        self.__pnode_id = value        

    @property
    def price1(self) -> float:
        """The Basis points, Price, Yield, Spread, Coupon, etc., value depending on the
           type of SB swap, which is calculated at affirmation."""
        return self.__price1

    @price1.setter
    def price1(self, value: float):
        self._property_changed('price1')
        self.__price1 = value        

    @property
    def price2(self) -> float:
        """The Basis points, Price, Yield, Spread, Coupon, etc., value depending on the
           type of SB swap, which is calculated at affirmation."""
        return self.__price2

    @price2.setter
    def price2(self, value: float):
        self._property_changed('price2')
        self.__price2 = value        

    @property
    def reference_rate(self) -> float:
        """USD price generated using a framework to select high quality constituent markets
           and a methodology that is resistant to manipulation."""
        return self.__reference_rate

    @reference_rate.setter
    def reference_rate(self, value: float):
        self._property_changed('reference_rate')
        self.__reference_rate = value        

    @property
    def humidity_type(self) -> str:
        """The humidity type: Relative, average etc."""
        return self.__humidity_type

    @humidity_type.setter
    def humidity_type(self, value: str):
        self._property_changed('humidity_type')
        self.__humidity_type = value        

    @property
    def prev_close_ask(self) -> float:
        """Previous business day's close ask price."""
        return self.__prev_close_ask

    @prev_close_ask.setter
    def prev_close_ask(self, value: float):
        self._property_changed('prev_close_ask')
        self.__prev_close_ask = value        

    @property
    def level(self) -> float:
        """Level of the 5-day normalized flow in a given factor."""
        return self.__level

    @level.setter
    def level(self, value: float):
        self._property_changed('level')
        self.__level = value        

    @property
    def implied_volatility_by_expiration(self) -> float:
        """Volatility of an asset implied by observations of market prices."""
        return self.__implied_volatility_by_expiration

    @implied_volatility_by_expiration.setter
    def implied_volatility_by_expiration(self, value: float):
        self._property_changed('implied_volatility_by_expiration')
        self.__implied_volatility_by_expiration = value        

    @property
    def hurdle(self) -> Union[Op, float]:
        return self.__hurdle

    @hurdle.setter
    def hurdle(self, value: Union[Op, float]):
        self._property_changed('hurdle')
        self.__hurdle = value        

    @property
    def asset_parameters_fixed_rate_day_count_fraction(self) -> str:
        """Day Count Fraction"""
        return self.__asset_parameters_fixed_rate_day_count_fraction

    @asset_parameters_fixed_rate_day_count_fraction.setter
    def asset_parameters_fixed_rate_day_count_fraction(self, value: str):
        self._property_changed('asset_parameters_fixed_rate_day_count_fraction')
        self.__asset_parameters_fixed_rate_day_count_fraction = value        

    @property
    def es_momentum_score(self) -> float:
        """A company's score for E&S subsector-relative momentum."""
        return self.__es_momentum_score

    @es_momentum_score.setter
    def es_momentum_score(self, value: float):
        self._property_changed('es_momentum_score')
        self.__es_momentum_score = value        

    @property
    def leg1_commodity_instrument_id(self) -> str:
        """The asset, reference asset, or reference obligation for payments of a party's
           obligations under the SB swap transaction reference."""
        return self.__leg1_commodity_instrument_id

    @leg1_commodity_instrument_id.setter
    def leg1_commodity_instrument_id(self, value: str):
        self._property_changed('leg1_commodity_instrument_id')
        self.__leg1_commodity_instrument_id = value        

    @property
    def leg2_index(self) -> str:
        """If floating index leg, the index."""
        return self.__leg2_index

    @leg2_index.setter
    def leg2_index(self, value: str):
        self._property_changed('leg2_index')
        self.__leg2_index = value        

    @property
    def net_weight(self) -> float:
        """Difference between the longWeight and shortWeight. If you have IBM stock with
           shortWeight 0.2 and also IBM stock with longWeight 0.4, then the
           netWeight would be 0.2 (-0.2+0.4)."""
        return self.__net_weight

    @net_weight.setter
    def net_weight(self, value: float):
        self._property_changed('net_weight')
        self.__net_weight = value        

    @property
    def portfolio_managers(self) -> Tuple[str, ...]:
        """Portfolio managers of asset."""
        return self.__portfolio_managers

    @portfolio_managers.setter
    def portfolio_managers(self, value: Tuple[str, ...]):
        self._property_changed('portfolio_managers')
        self.__portfolio_managers = value        

    @property
    def bos_in_ticks(self) -> float:
        """The Bid-Offer Spread of the stock in Ticks on the particular date."""
        return self.__bos_in_ticks

    @bos_in_ticks.setter
    def bos_in_ticks(self, value: float):
        self._property_changed('bos_in_ticks')
        self.__bos_in_ticks = value        

    @property
    def asset_parameters_coupon_type(self) -> str:
        """The coupon type of the bond."""
        return self.__asset_parameters_coupon_type

    @asset_parameters_coupon_type.setter
    def asset_parameters_coupon_type(self, value: str):
        self._property_changed('asset_parameters_coupon_type')
        self.__asset_parameters_coupon_type = value        

    @property
    def expected_residual_quantity(self) -> float:
        """Expected Residual Quantity."""
        return self.__expected_residual_quantity

    @expected_residual_quantity.setter
    def expected_residual_quantity(self, value: float):
        self._property_changed('expected_residual_quantity')
        self.__expected_residual_quantity = value        

    @property
    def roll_date(self) -> datetime.date:
        """Roll Dates for Equity Index Quarterly Futures."""
        return self.__roll_date

    @roll_date.setter
    def roll_date(self, value: datetime.date):
        self._property_changed('roll_date')
        self.__roll_date = value        

    @property
    def dynamic_hybrid_speed(self) -> str:
        """Execution speed of a Dynamic Hybrid order."""
        return self.__dynamic_hybrid_speed

    @dynamic_hybrid_speed.setter
    def dynamic_hybrid_speed(self, value: str):
        self._property_changed('dynamic_hybrid_speed')
        self.__dynamic_hybrid_speed = value        

    @property
    def cap_floor_vol(self) -> float:
        """Historical implied normal volatility for a liquid point on cap and floor vol
           surface."""
        return self.__cap_floor_vol

    @cap_floor_vol.setter
    def cap_floor_vol(self, value: float):
        self._property_changed('cap_floor_vol')
        self.__cap_floor_vol = value        

    @property
    def target_quantity(self) -> float:
        """The target executed quantity as published from the algo."""
        return self.__target_quantity

    @target_quantity.setter
    def target_quantity(self, value: float):
        self._property_changed('target_quantity')
        self.__target_quantity = value        

    @property
    def submitter(self) -> str:
        """Name of person submitting request."""
        return self.__submitter

    @submitter.setter
    def submitter(self, value: str):
        self._property_changed('submitter')
        self.__submitter = value        

    @property
    def no(self) -> float:
        """Price of no contract."""
        return self.__no

    @no.setter
    def no(self, value: float):
        self._property_changed('no')
        self.__no = value        

    @property
    def notional(self) -> float:
        """Notional."""
        return self.__notional

    @notional.setter
    def notional(self, value: float):
        self._property_changed('notional')
        self.__notional = value        

    @property
    def es_disclosure_percentage(self) -> float:
        """The percentage of E&S metrics the company discloses relative to the number of
           E&S metrics relevant for its subsector."""
        return self.__es_disclosure_percentage

    @es_disclosure_percentage.setter
    def es_disclosure_percentage(self, value: float):
        self._property_changed('es_disclosure_percentage')
        self.__es_disclosure_percentage = value        

    @property
    def close_executed_quantity_percentage(self) -> float:
        """Percent of order executed in closing Auction."""
        return self.__close_executed_quantity_percentage

    @close_executed_quantity_percentage.setter
    def close_executed_quantity_percentage(self, value: float):
        self._property_changed('close_executed_quantity_percentage')
        self.__close_executed_quantity_percentage = value        

    @property
    def twap_realized_cash(self) -> float:
        """Consolidated realised performance vs TWAP In Limit, in USD."""
        return self.__twap_realized_cash

    @twap_realized_cash.setter
    def twap_realized_cash(self, value: float):
        self._property_changed('twap_realized_cash')
        self.__twap_realized_cash = value        

    @property
    def is_open_auction(self) -> bool:
        """Flag indicating whether the bucket is within the open auction or not."""
        return self.__is_open_auction

    @is_open_auction.setter
    def is_open_auction(self, value: bool):
        self._property_changed('is_open_auction')
        self.__is_open_auction = value        

    @property
    def leg1_type(self) -> str:
        """Indication if leg 1 is fixed or floating or Physical."""
        return self.__leg1_type

    @leg1_type.setter
    def leg1_type(self, value: str):
        self._property_changed('leg1_type')
        self.__leg1_type = value        

    @property
    def wet_bulb_temp_hourly_forecast(self) -> float:
        """The hourly forecast value for wet bulb temperature in Fahrenheit."""
        return self.__wet_bulb_temp_hourly_forecast

    @wet_bulb_temp_hourly_forecast.setter
    def wet_bulb_temp_hourly_forecast(self, value: float):
        self._property_changed('wet_bulb_temp_hourly_forecast')
        self.__wet_bulb_temp_hourly_forecast = value        

    @property
    def cleanup_price(self) -> float:
        """The WIG price used by the algo."""
        return self.__cleanup_price

    @cleanup_price.setter
    def cleanup_price(self, value: float):
        self._property_changed('cleanup_price')
        self.__cleanup_price = value        

    @property
    def total(self) -> float:
        """Total exposure."""
        return self.__total

    @total.setter
    def total(self, value: float):
        self._property_changed('total')
        self.__total = value        

    @property
    def filled_notional_usd(self) -> float:
        """Executed Notional in USD."""
        return self.__filled_notional_usd

    @filled_notional_usd.setter
    def filled_notional_usd(self, value: float):
        self._property_changed('filled_notional_usd')
        self.__filled_notional_usd = value        

    @property
    def asset_id(self) -> str:
        """Marquee unique asset identifier."""
        return self.__asset_id

    @asset_id.setter
    def asset_id(self, value: str):
        self._property_changed('asset_id')
        self.__asset_id = value        

    @property
    def block_trade_election_indicator(self) -> str:
        """An indication of whether this is a block trade or off-facility swap."""
        return self.__block_trade_election_indicator

    @block_trade_election_indicator.setter
    def block_trade_election_indicator(self, value: str):
        self._property_changed('block_trade_election_indicator')
        self.__block_trade_election_indicator = value        

    @property
    def test_status(self) -> str:
        """Result of the quality test."""
        return self.__test_status

    @test_status.setter
    def test_status(self, value: str):
        self._property_changed('test_status')
        self.__test_status = value        

    @property
    def mkt_type(self) -> str:
        """The MDAPI Type (e.g. IR BASIS, FX Vol)."""
        return self.__mkt_type

    @mkt_type.setter
    def mkt_type(self, value: str):
        self._property_changed('mkt_type')
        self.__mkt_type = value        

    @property
    def last_updated_time(self) -> datetime.datetime:
        """Timestamp of when the object was last updated."""
        return self.__last_updated_time

    @last_updated_time.setter
    def last_updated_time(self, value: datetime.datetime):
        self._property_changed('last_updated_time')
        self.__last_updated_time = value        

    @property
    def yield30_day(self) -> float:
        """Net income per share for last 30 days/NAV."""
        return self.__yield30_day

    @yield30_day.setter
    def yield30_day(self, value: float):
        self._property_changed('yield30_day')
        self.__yield30_day = value        

    @property
    def buy28bps(self) -> float:
        """The amount GS would buy for 28 bps charge."""
        return self.__buy28bps

    @buy28bps.setter
    def buy28bps(self, value: float):
        self._property_changed('buy28bps')
        self.__buy28bps = value        

    @property
    def proportion_of_risk(self) -> float:
        """Proportion of risk with respect to the portfolio's total risk."""
        return self.__proportion_of_risk

    @proportion_of_risk.setter
    def proportion_of_risk(self, value: float):
        self._property_changed('proportion_of_risk')
        self.__proportion_of_risk = value        

    @property
    def future_month_k23(self) -> float:
        """Commods future month code."""
        return self.__future_month_k23

    @future_month_k23.setter
    def future_month_k23(self, value: float):
        self._property_changed('future_month_k23')
        self.__future_month_k23 = value        

    @property
    def future_month_k22(self) -> float:
        """Commods future month code."""
        return self.__future_month_k22

    @future_month_k22.setter
    def future_month_k22(self, value: float):
        self._property_changed('future_month_k22')
        self.__future_month_k22 = value        

    @property
    def future_month_k21(self) -> float:
        """Commods future month code."""
        return self.__future_month_k21

    @future_month_k21.setter
    def future_month_k21(self, value: float):
        self._property_changed('future_month_k21')
        self.__future_month_k21 = value        

    @property
    def primary_entity_id(self) -> str:
        """Primary Key for an entity; in use for Data Quality Checker."""
        return self.__primary_entity_id

    @primary_entity_id.setter
    def primary_entity_id(self, value: str):
        self._property_changed('primary_entity_id')
        self.__primary_entity_id = value        

    @property
    def cross(self) -> str:
        """FX cross symbol."""
        return self.__cross

    @cross.setter
    def cross(self, value: str):
        self._property_changed('cross')
        self.__cross = value        

    @property
    def idea_status(self) -> str:
        """The activity status of the idea."""
        return self.__idea_status

    @idea_status.setter
    def idea_status(self, value: str):
        self._property_changed('idea_status')
        self.__idea_status = value        

    @property
    def contract_subtype(self) -> str:
        """Contract subtype."""
        return self.__contract_subtype

    @contract_subtype.setter
    def contract_subtype(self, value: str):
        self._property_changed('contract_subtype')
        self.__contract_subtype = value        

    @property
    def sri(self) -> bool:
        """Whether or not an asset is classified as socially responsible investing."""
        return self.__sri

    @sri.setter
    def sri(self, value: bool):
        self._property_changed('sri')
        self.__sri = value        

    @property
    def fx_forecast(self) -> float:
        """FX forecast value for the relative period."""
        return self.__fx_forecast

    @fx_forecast.setter
    def fx_forecast(self, value: float):
        self._property_changed('fx_forecast')
        self.__fx_forecast = value        

    @property
    def fixing_time_label(self) -> str:
        """Time at which the fixing was taken."""
        return self.__fixing_time_label

    @fixing_time_label.setter
    def fixing_time_label(self, value: str):
        self._property_changed('fixing_time_label')
        self.__fixing_time_label = value        

    @property
    def is_etf(self) -> bool:
        """Whether or not assetType is an ETF."""
        return self.__is_etf

    @is_etf.setter
    def is_etf(self, value: bool):
        self._property_changed('is_etf')
        self.__is_etf = value        

    @property
    def fill_id(self) -> str:
        """Unique identifier for a fill."""
        return self.__fill_id

    @fill_id.setter
    def fill_id(self, value: str):
        self._property_changed('fill_id')
        self.__fill_id = value        

    @property
    def excess_returns(self) -> float:
        """Excess returns for backtest."""
        return self.__excess_returns

    @excess_returns.setter
    def excess_returns(self, value: float):
        self._property_changed('excess_returns')
        self.__excess_returns = value        

    @property
    def dollar_return(self) -> float:
        """Dollar return of asset over a given period (e.g. close-to-close)."""
        return self.__dollar_return

    @dollar_return.setter
    def dollar_return(self, value: float):
        self._property_changed('dollar_return')
        self.__dollar_return = value        

    @property
    def order_in_limit(self) -> bool:
        """Is the order???s passive leg in limit."""
        return self.__order_in_limit

    @order_in_limit.setter
    def order_in_limit(self, value: bool):
        self._property_changed('order_in_limit')
        self.__order_in_limit = value        

    @property
    def expiry_time(self) -> datetime.datetime:
        """Order expiration date."""
        return self.__expiry_time

    @expiry_time.setter
    def expiry_time(self, value: datetime.datetime):
        self._property_changed('expiry_time')
        self.__expiry_time = value        

    @property
    def return_on_equity(self) -> float:
        """Return on equity."""
        return self.__return_on_equity

    @return_on_equity.setter
    def return_on_equity(self, value: float):
        self._property_changed('return_on_equity')
        self.__return_on_equity = value        

    @property
    def future_month_k26(self) -> float:
        """Commods future month code."""
        return self.__future_month_k26

    @future_month_k26.setter
    def future_month_k26(self, value: float):
        self._property_changed('future_month_k26')
        self.__future_month_k26 = value        

    @property
    def future_month_k25(self) -> float:
        """Commods future month code."""
        return self.__future_month_k25

    @future_month_k25.setter
    def future_month_k25(self, value: float):
        self._property_changed('future_month_k25')
        self.__future_month_k25 = value        

    @property
    def future_month_k24(self) -> float:
        """Commods future month code."""
        return self.__future_month_k24

    @future_month_k24.setter
    def future_month_k24(self, value: float):
        self._property_changed('future_month_k24')
        self.__future_month_k24 = value        

    @property
    def restriction_end_date(self) -> datetime.date:
        """The date at which the security restriction was lifted."""
        return self.__restriction_end_date

    @restriction_end_date.setter
    def restriction_end_date(self, value: datetime.date):
        self._property_changed('restriction_end_date')
        self.__restriction_end_date = value        

    @property
    def queue_in_lots_description(self) -> str:
        """Description of the Stock's Queue size in Lots (if applicable) on the particular
           date."""
        return self.__queue_in_lots_description

    @queue_in_lots_description.setter
    def queue_in_lots_description(self, value: str):
        self._property_changed('queue_in_lots_description')
        self.__queue_in_lots_description = value        

    @property
    def volume_limit(self) -> float:
        """The allowed percentage of ATV that can be placed on loan for a lender."""
        return self.__volume_limit

    @volume_limit.setter
    def volume_limit(self, value: float):
        self._property_changed('volume_limit')
        self.__volume_limit = value        

    @property
    def objective(self) -> str:
        """The objective of the hedge."""
        return self.__objective

    @objective.setter
    def objective(self, value: str):
        self._property_changed('objective')
        self.__objective = value        

    @property
    def nav_price(self) -> float:
        """Net asset value price. Quoted price (mid, 100 ??? Upfront) of the underlying
           basket of single name CDS. (Theoretical Index value). In percent."""
        return self.__nav_price

    @nav_price.setter
    def nav_price(self, value: float):
        self._property_changed('nav_price')
        self.__nav_price = value        

    @property
    def leg1_underlying_asset(self) -> str:
        """The asset, reference asset, or reference obligation for payments of a party???s
           obligations under the SB swap transaction reference."""
        return self.__leg1_underlying_asset

    @leg1_underlying_asset.setter
    def leg1_underlying_asset(self, value: str):
        self._property_changed('leg1_underlying_asset')
        self.__leg1_underlying_asset = value        

    @property
    def bbgid(self) -> str:
        """Bloomberg Global Identifier."""
        return self.__bbgid

    @bbgid.setter
    def bbgid(self, value: str):
        self._property_changed('bbgid')
        self.__bbgid = value        

    @property
    def private_placement_type(self) -> str:
        """Regulation that applies to a bond."""
        return self.__private_placement_type

    @private_placement_type.setter
    def private_placement_type(self, value: str):
        self._property_changed('private_placement_type')
        self.__private_placement_type = value        

    @property
    def hedge_notional(self) -> float:
        """Notional value of the hedge."""
        return self.__hedge_notional

    @hedge_notional.setter
    def hedge_notional(self, value: float):
        self._property_changed('hedge_notional')
        self.__hedge_notional = value        

    @property
    def ask_low(self) -> float:
        """The lowest ask Price (price offering to sell)."""
        return self.__ask_low

    @ask_low.setter
    def ask_low(self, value: float):
        self._property_changed('ask_low')
        self.__ask_low = value        

    @property
    def intended_p_rate(self) -> float:
        """The intended participation rate from the algo."""
        return self.__intended_p_rate

    @intended_p_rate.setter
    def intended_p_rate(self, value: float):
        self._property_changed('intended_p_rate')
        self.__intended_p_rate = value        

    @property
    def expiry(self) -> str:
        """The time period before the option expires."""
        return self.__expiry

    @expiry.setter
    def expiry(self, value: str):
        self._property_changed('expiry')
        self.__expiry = value        

    @property
    def avg_monthly_yield(self) -> float:
        """Only used for GS Money Market funds, assumes sum of the past 30 days, divided by
           30, and expressed as a percent."""
        return self.__avg_monthly_yield

    @avg_monthly_yield.setter
    def avg_monthly_yield(self, value: float):
        self._property_changed('avg_monthly_yield')
        self.__avg_monthly_yield = value        

    @property
    def period_direction(self) -> str:
        """Direction of the outlook period."""
        return self.__period_direction

    @period_direction.setter
    def period_direction(self, value: str):
        self._property_changed('period_direction')
        self.__period_direction = value        

    @property
    def prev_rpt_id(self) -> str:
        """On cancellations and corrections, this ID will hold the Dissemination ID of the
           originally published real-time message."""
        return self.__prev_rpt_id

    @prev_rpt_id.setter
    def prev_rpt_id(self, value: str):
        self._property_changed('prev_rpt_id')
        self.__prev_rpt_id = value        

    @property
    def earnings_per_share(self) -> float:
        """Earnings per share."""
        return self.__earnings_per_share

    @earnings_per_share.setter
    def earnings_per_share(self, value: float):
        self._property_changed('earnings_per_share')
        self.__earnings_per_share = value        

    @property
    def strike_percentage(self) -> float:
        """Strike compared to market value."""
        return self.__strike_percentage

    @strike_percentage.setter
    def strike_percentage(self, value: float):
        self._property_changed('strike_percentage')
        self.__strike_percentage = value        

    @property
    def es_product_impact_percentile(self) -> float:
        """A percentile that captures a company's E&S product impact ranking within its
           subsector."""
        return self.__es_product_impact_percentile

    @es_product_impact_percentile.setter
    def es_product_impact_percentile(self, value: float):
        self._property_changed('es_product_impact_percentile')
        self.__es_product_impact_percentile = value        

    @property
    def vwap_realized_cash(self) -> float:
        """Consolidated realised performance vs VWAP, in USD."""
        return self.__vwap_realized_cash

    @vwap_realized_cash.setter
    def vwap_realized_cash(self, value: float):
        self._property_changed('vwap_realized_cash')
        self.__vwap_realized_cash = value        

    @property
    def par_asset_swap_spread1m(self) -> float:
        """Par asset swap spread vs 1m tenor."""
        return self.__par_asset_swap_spread1m

    @par_asset_swap_spread1m.setter
    def par_asset_swap_spread1m(self, value: float):
        self._property_changed('par_asset_swap_spread1m')
        self.__par_asset_swap_spread1m = value        

    @property
    def prev_close_bid(self) -> float:
        """Previous close BID price."""
        return self.__prev_close_bid

    @prev_close_bid.setter
    def prev_close_bid(self, value: float):
        self._property_changed('prev_close_bid')
        self.__prev_close_bid = value        

    @property
    def minimum_increment(self) -> float:
        """The minimum increment size of the bond purchase allowed above the minimum
           denomination as authorized by the bond documents."""
        return self.__minimum_increment

    @minimum_increment.setter
    def minimum_increment(self, value: float):
        self._property_changed('minimum_increment')
        self.__minimum_increment = value        

    @property
    def tcm_cost_horizon16_day(self) -> float:
        """TCM cost with a 16 day time horizon."""
        return self.__tcm_cost_horizon16_day

    @tcm_cost_horizon16_day.setter
    def tcm_cost_horizon16_day(self, value: float):
        self._property_changed('tcm_cost_horizon16_day')
        self.__tcm_cost_horizon16_day = value        

    @property
    def investment_mtd(self) -> float:
        """Total net investment Month to date."""
        return self.__investment_mtd

    @investment_mtd.setter
    def investment_mtd(self, value: float):
        self._property_changed('investment_mtd')
        self.__investment_mtd = value        

    @property
    def settlement_date(self) -> datetime.date:
        """The settlement date of the associated FX contract."""
        return self.__settlement_date

    @settlement_date.setter
    def settlement_date(self, value: datetime.date):
        self._property_changed('settlement_date')
        self.__settlement_date = value        

    @property
    def weighted_average_mid_normalized(self) -> float:
        """Performance against Benchmark in pip."""
        return self.__weighted_average_mid_normalized

    @weighted_average_mid_normalized.setter
    def weighted_average_mid_normalized(self, value: float):
        self._property_changed('weighted_average_mid_normalized')
        self.__weighted_average_mid_normalized = value        

    @property
    def sales_per_share(self) -> float:
        """Sales per share."""
        return self.__sales_per_share

    @sales_per_share.setter
    def sales_per_share(self, value: float):
        self._property_changed('sales_per_share')
        self.__sales_per_share = value        

    @property
    def unadjusted_close(self) -> float:
        """Unadjusted Close level of an asset based on official exchange fixing or
           calculation agent marked level."""
        return self.__unadjusted_close

    @unadjusted_close.setter
    def unadjusted_close(self, value: float):
        self._property_changed('unadjusted_close')
        self.__unadjusted_close = value        

    @property
    def loan_date(self) -> datetime.date:
        """The date at which the securities loan was enacted."""
        return self.__loan_date

    @loan_date.setter
    def loan_date(self, value: datetime.date):
        self._property_changed('loan_date')
        self.__loan_date = value        

    @property
    def matched_maturity_swap_spread1m(self) -> float:
        """Matched maturity swap spread vs 1m tenor."""
        return self.__matched_maturity_swap_spread1m

    @matched_maturity_swap_spread1m.setter
    def matched_maturity_swap_spread1m(self, value: float):
        self._property_changed('matched_maturity_swap_spread1m')
        self.__matched_maturity_swap_spread1m = value        

    @property
    def collateral_percentage_actual(self) -> float:
        """Collateral percentage covering contractual the given position."""
        return self.__collateral_percentage_actual

    @collateral_percentage_actual.setter
    def collateral_percentage_actual(self, value: float):
        self._property_changed('collateral_percentage_actual')
        self.__collateral_percentage_actual = value        

    @property
    def vwap_in_limit_unrealized_bps(self) -> float:
        """Consolidated unrealised performance vs VWAP In Limit, in bps."""
        return self.__vwap_in_limit_unrealized_bps

    @vwap_in_limit_unrealized_bps.setter
    def vwap_in_limit_unrealized_bps(self, value: float):
        self._property_changed('vwap_in_limit_unrealized_bps')
        self.__vwap_in_limit_unrealized_bps = value        

    @property
    def metric_value(self) -> float:
        """Value of the metric calculated for the given geographyName and date."""
        return self.__metric_value

    @metric_value.setter
    def metric_value(self, value: float):
        self._property_changed('metric_value')
        self.__metric_value = value        

    @property
    def auto_exec_state(self) -> str:
        """Auto Execution State."""
        return self.__auto_exec_state

    @auto_exec_state.setter
    def auto_exec_state(self, value: str):
        self._property_changed('auto_exec_state')
        self.__auto_exec_state = value        

    @property
    def total_recovered(self) -> float:
        """Total number of recovered cases."""
        return self.__total_recovered

    @total_recovered.setter
    def total_recovered(self, value: float):
        self._property_changed('total_recovered')
        self.__total_recovered = value        

    @property
    def relative_return_ytd(self) -> float:
        """Relative Return Year to Date."""
        return self.__relative_return_ytd

    @relative_return_ytd.setter
    def relative_return_ytd(self, value: float):
        self._property_changed('relative_return_ytd')
        self.__relative_return_ytd = value        

    @property
    def tick_server(self) -> str:
        """Tickserver Symbol."""
        return self.__tick_server

    @tick_server.setter
    def tick_server(self, value: str):
        self._property_changed('tick_server')
        self.__tick_server = value        

    @property
    def cumulative_volume_in_percentage(self) -> float:
        """Forecast of the percentage of the cumulative volume of shares from start of day
           to the end of the bucket interval, relative to the total daily
           volume."""
        return self.__cumulative_volume_in_percentage

    @cumulative_volume_in_percentage.setter
    def cumulative_volume_in_percentage(self, value: float):
        self._property_changed('cumulative_volume_in_percentage')
        self.__cumulative_volume_in_percentage = value        

    @property
    def real_time_restriction_status(self) -> Tuple[Tuple[str, ...], ...]:
        """Real Time Restricted status as set by compliance."""
        return self.__real_time_restriction_status

    @real_time_restriction_status.setter
    def real_time_restriction_status(self, value: Tuple[Tuple[str, ...], ...]):
        self._property_changed('real_time_restriction_status')
        self.__real_time_restriction_status = value        

    @property
    def trade_type(self) -> str:
        """Trade type."""
        return self.__trade_type

    @trade_type.setter
    def trade_type(self, value: str):
        self._property_changed('trade_type')
        self.__trade_type = value        

    @property
    def settlement_type(self) -> str:
        """Swap Settlement Type"""
        return self.__settlement_type

    @settlement_type.setter
    def settlement_type(self, value: str):
        self._property_changed('settlement_type')
        self.__settlement_type = value        

    @property
    def net_change(self) -> float:
        """Difference between the lastest trading price or value and the adjusted
           historical closing value or settlement price."""
        return self.__net_change

    @net_change.setter
    def net_change(self, value: float):
        self._property_changed('net_change')
        self.__net_change = value        

    @property
    def number_of_underliers(self) -> float:
        """Total number of underliers."""
        return self.__number_of_underliers

    @number_of_underliers.setter
    def number_of_underliers(self, value: float):
        self._property_changed('number_of_underliers')
        self.__number_of_underliers = value        

    @property
    def swap_type(self) -> str:
        """Swap type of position."""
        return self.__swap_type

    @swap_type.setter
    def swap_type(self, value: str):
        self._property_changed('swap_type')
        self.__swap_type = value        

    @property
    def forecast_type(self) -> str:
        """Type of return for commodity indices. Spot for individual commodities."""
        return self.__forecast_type

    @forecast_type.setter
    def forecast_type(self, value: str):
        self._property_changed('forecast_type')
        self.__forecast_type = value        

    @property
    def leg1_notional(self) -> float:
        """The total Notional amount or quantity of units of the leg 1 underlying asset."""
        return self.__leg1_notional

    @leg1_notional.setter
    def leg1_notional(self, value: float):
        self._property_changed('leg1_notional')
        self.__leg1_notional = value        

    @property
    def sell_settle_date(self) -> datetime.date:
        """Data that the sell of securities will settle."""
        return self.__sell_settle_date

    @sell_settle_date.setter
    def sell_settle_date(self, value: datetime.date):
        self._property_changed('sell_settle_date')
        self.__sell_settle_date = value        

    @property
    def new_ideas_ytd(self) -> float:
        """Ideas received by clients Year to date."""
        return self.__new_ideas_ytd

    @new_ideas_ytd.setter
    def new_ideas_ytd(self, value: float):
        self._property_changed('new_ideas_ytd')
        self.__new_ideas_ytd = value        

    @property
    def management_fee(self) -> Union[Op, float]:
        return self.__management_fee

    @management_fee.setter
    def management_fee(self, value: Union[Op, float]):
        self._property_changed('management_fee')
        self.__management_fee = value        

    @property
    def par_asset_swap_spread3m(self) -> float:
        """Par asset swap spread vs 3m tenor."""
        return self.__par_asset_swap_spread3m

    @par_asset_swap_spread3m.setter
    def par_asset_swap_spread3m(self, value: float):
        self._property_changed('par_asset_swap_spread3m')
        self.__par_asset_swap_spread3m = value        

    @property
    def sell36bps(self) -> float:
        """The amount GS would sell for 36 bps charge."""
        return self.__sell36bps

    @sell36bps.setter
    def sell36bps(self, value: float):
        self._property_changed('sell36bps')
        self.__sell36bps = value        

    @property
    def matched_maturity_swap_spread3m(self) -> float:
        """Matched maturity swap spread vs 3m tenor."""
        return self.__matched_maturity_swap_spread3m

    @matched_maturity_swap_spread3m.setter
    def matched_maturity_swap_spread3m(self, value: float):
        self._property_changed('matched_maturity_swap_spread3m')
        self.__matched_maturity_swap_spread3m = value        

    @property
    def source_id(self) -> str:
        """Unique id of data provider."""
        return self.__source_id

    @source_id.setter
    def source_id(self, value: str):
        self._property_changed('source_id')
        self.__source_id = value        

    @property
    def country(self) -> str:
        """Country of incorporation of asset."""
        return self.__country

    @country.setter
    def country(self, value: str):
        self._property_changed('country')
        self.__country = value        

    @property
    def option_premium_currency(self) -> str:
        """An indication of type of currency on the option premium."""
        return self.__option_premium_currency

    @option_premium_currency.setter
    def option_premium_currency(self, value: str):
        self._property_changed('option_premium_currency')
        self.__option_premium_currency = value        

    @property
    def vwap(self) -> float:
        """VWAP benchmark price."""
        return self.__vwap

    @vwap.setter
    def vwap(self, value: float):
        self._property_changed('vwap')
        self.__vwap = value        

    @property
    def touch_spread_score(self) -> float:
        """Z-score of the difference between highest bid and lowest offer."""
        return self.__touch_spread_score

    @touch_spread_score.setter
    def touch_spread_score(self, value: float):
        self._property_changed('touch_spread_score')
        self.__touch_spread_score = value        

    @property
    def rating_second_highest(self) -> str:
        """Second highest bond rating between Moody's, Fitch, and Standard and Poor's."""
        return self.__rating_second_highest

    @rating_second_highest.setter
    def rating_second_highest(self, value: str):
        self._property_changed('rating_second_highest')
        self.__rating_second_highest = value        

    @property
    def sell24bps(self) -> float:
        """The amount GS would sell for 24 bps charge."""
        return self.__sell24bps

    @sell24bps.setter
    def sell24bps(self, value: float):
        self._property_changed('sell24bps')
        self.__sell24bps = value        

    @property
    def frequency(self) -> str:
        """Requested frequency of data delivery."""
        return self.__frequency

    @frequency.setter
    def frequency(self, value: str):
        self._property_changed('frequency')
        self.__frequency = value        

    @property
    def activity_id(self) -> str:
        """Marquee unique Activity identifier."""
        return self.__activity_id

    @activity_id.setter
    def activity_id(self, value: str):
        self._property_changed('activity_id')
        self.__activity_id = value        

    @property
    def estimated_impact(self) -> float:
        """Likely impact of a proposed trade on the price of an asset (bps). The model's
           shortfall estimates reflect how much it cost to execute similar
           trades in the past, as opposed to providing a hypothetical cost
           derived using tick data."""
        return self.__estimated_impact

    @estimated_impact.setter
    def estimated_impact(self, value: float):
        self._property_changed('estimated_impact')
        self.__estimated_impact = value        

    @property
    def sell35cents(self) -> float:
        """The amount GS would sell for 35 cents charge."""
        return self.__sell35cents

    @sell35cents.setter
    def sell35cents(self, value: float):
        self._property_changed('sell35cents')
        self.__sell35cents = value        

    @property
    def loan_spread_bucket(self) -> str:
        """The difference between the investment rate on cash collateral and the rebate
           rate of a loan."""
        return self.__loan_spread_bucket

    @loan_spread_bucket.setter
    def loan_spread_bucket(self, value: str):
        self._property_changed('loan_spread_bucket')
        self.__loan_spread_bucket = value        

    @property
    def coronavirus_global_activity_tracker(self) -> float:
        """Value for the global activity tracker."""
        return self.__coronavirus_global_activity_tracker

    @coronavirus_global_activity_tracker.setter
    def coronavirus_global_activity_tracker(self, value: float):
        self._property_changed('coronavirus_global_activity_tracker')
        self.__coronavirus_global_activity_tracker = value        

    @property
    def underlyers(self) -> str:
        """Top underlyers. Supported values are 'all' or 'top_10', 'top_15', etc.."""
        return self.__underlyers

    @underlyers.setter
    def underlyers(self, value: str):
        self._property_changed('underlyers')
        self.__underlyers = value        

    @property
    def asset_parameters_pricing_location(self) -> str:
        """The location in which the asset was priced."""
        return self.__asset_parameters_pricing_location

    @asset_parameters_pricing_location.setter
    def asset_parameters_pricing_location(self, value: str):
        self._property_changed('asset_parameters_pricing_location')
        self.__asset_parameters_pricing_location = value        

    @property
    def event_description(self) -> str:
        """Short description of the event, providing additional information beyond
           eventType."""
        return self.__event_description

    @event_description.setter
    def event_description(self, value: str):
        self._property_changed('event_description')
        self.__event_description = value        

    @property
    def iceberg_max_size(self) -> float:
        """Iceberg max size in terms of the quantity unit."""
        return self.__iceberg_max_size

    @iceberg_max_size.setter
    def iceberg_max_size(self, value: float):
        self._property_changed('iceberg_max_size')
        self.__iceberg_max_size = value        

    @property
    def asset_parameters_coupon(self) -> float:
        """The fixed coupon for this bond."""
        return self.__asset_parameters_coupon

    @asset_parameters_coupon.setter
    def asset_parameters_coupon(self, value: float):
        self._property_changed('asset_parameters_coupon')
        self.__asset_parameters_coupon = value        

    @property
    def details(self) -> str:
        """Corporate action details."""
        return self.__details

    @details.setter
    def details(self, value: str):
        self._property_changed('details')
        self.__details = value        

    @property
    def sector(self) -> str:
        """The risk model sector of the stock."""
        return self.__sector

    @sector.setter
    def sector(self, value: str):
        self._property_changed('sector')
        self.__sector = value        

    @property
    def avg_bed_util_rate(self) -> float:
        """Average rate of bed utilization, computed as Total Patient Days (excluding
           nursery days) / Bed Days Available."""
        return self.__avg_bed_util_rate

    @avg_bed_util_rate.setter
    def avg_bed_util_rate(self, value: float):
        self._property_changed('avg_bed_util_rate')
        self.__avg_bed_util_rate = value        

    @property
    def buy20bps(self) -> float:
        """The amount GS would buy for 20 bps charge."""
        return self.__buy20bps

    @buy20bps.setter
    def buy20bps(self, value: float):
        self._property_changed('buy20bps')
        self.__buy20bps = value        

    @property
    def index_level(self) -> float:
        """The value of the index."""
        return self.__index_level

    @index_level.setter
    def index_level(self, value: float):
        self._property_changed('index_level')
        self.__index_level = value        

    @property
    def epidemic(self) -> float:
        """Total number of people affected by an epidemic."""
        return self.__epidemic

    @epidemic.setter
    def epidemic(self, value: float):
        self._property_changed('epidemic')
        self.__epidemic = value        

    @property
    def mctr(self) -> float:
        """Marginal contribution of a given asset to portfolio variance, is dependent on
           covariance matrix."""
        return self.__mctr

    @mctr.setter
    def mctr(self, value: float):
        self._property_changed('mctr')
        self.__mctr = value        

    @property
    def exchange_time(self) -> datetime.datetime:
        """Local time at the executing venue."""
        return self.__exchange_time

    @exchange_time.setter
    def exchange_time(self, value: datetime.datetime):
        self._property_changed('exchange_time')
        self.__exchange_time = value        

    @property
    def historical_close(self) -> float:
        """Historical Close Price."""
        return self.__historical_close

    @historical_close.setter
    def historical_close(self, value: float):
        self._property_changed('historical_close')
        self.__historical_close = value        

    @property
    def fips_code(self) -> float:
        """County FIPS code."""
        return self.__fips_code

    @fips_code.setter
    def fips_code(self, value: float):
        self._property_changed('fips_code')
        self.__fips_code = value        

    @property
    def buy32bps(self) -> float:
        """The amount GS would buy for 32 bps charge."""
        return self.__buy32bps

    @buy32bps.setter
    def buy32bps(self, value: float):
        self._property_changed('buy32bps')
        self.__buy32bps = value        

    @property
    def idea_id(self) -> str:
        """Marquee unique trade idea identifier."""
        return self.__idea_id

    @idea_id.setter
    def idea_id(self, value: str):
        self._property_changed('idea_id')
        self.__idea_id = value        

    @property
    def comment_status(self) -> str:
        """Corporate action comment status."""
        return self.__comment_status

    @comment_status.setter
    def comment_status(self, value: str):
        self._property_changed('comment_status')
        self.__comment_status = value        

    @property
    def marginal_cost(self) -> float:
        """Marginal cost."""
        return self.__marginal_cost

    @marginal_cost.setter
    def marginal_cost(self, value: float):
        self._property_changed('marginal_cost')
        self.__marginal_cost = value        

    @property
    def client_weight(self) -> float:
        """Weight of client positions in the region or sector (%)."""
        return self.__client_weight

    @client_weight.setter
    def client_weight(self, value: float):
        self._property_changed('client_weight')
        self.__client_weight = value        

    @property
    def leg1_delivery_point(self) -> str:
        """Delivery point of leg."""
        return self.__leg1_delivery_point

    @leg1_delivery_point.setter
    def leg1_delivery_point(self, value: str):
        self._property_changed('leg1_delivery_point')
        self.__leg1_delivery_point = value        

    @property
    def sell5cents(self) -> float:
        """The amount GS would sell for 5 cents charge."""
        return self.__sell5cents

    @sell5cents.setter
    def sell5cents(self, value: float):
        self._property_changed('sell5cents')
        self.__sell5cents = value        

    @property
    def liq_wkly(self) -> float:
        """Percent of assets that could be quickly and easily converted into investable
           cash without loss of value within a week."""
        return self.__liq_wkly

    @liq_wkly.setter
    def liq_wkly(self, value: float):
        self._property_changed('liq_wkly')
        self.__liq_wkly = value        

    @property
    def unrealized_twap_performance_bps(self) -> float:
        """Average execution price vs Consolidated TWAP since order inception ???
           unrealized."""
        return self.__unrealized_twap_performance_bps

    @unrealized_twap_performance_bps.setter
    def unrealized_twap_performance_bps(self, value: float):
        self._property_changed('unrealized_twap_performance_bps')
        self.__unrealized_twap_performance_bps = value        

    @property
    def region(self) -> str:
        """Regional classification for the asset"""
        return self.__region

    @region.setter
    def region(self, value: str):
        self._property_changed('region')
        self.__region = value        

    @property
    def temperature_hour(self) -> float:
        """The forecast value of hour with min/max temperature in a day."""
        return self.__temperature_hour

    @temperature_hour.setter
    def temperature_hour(self, value: float):
        self._property_changed('temperature_hour')
        self.__temperature_hour = value        

    @property
    def upper_bound(self) -> float:
        """Upper bound value."""
        return self.__upper_bound

    @upper_bound.setter
    def upper_bound(self, value: float):
        self._property_changed('upper_bound')
        self.__upper_bound = value        

    @property
    def sell55cents(self) -> float:
        """The amount GS would sell for 55 cents charge."""
        return self.__sell55cents

    @sell55cents.setter
    def sell55cents(self, value: float):
        self._property_changed('sell55cents')
        self.__sell55cents = value        

    @property
    def num_pedi_icu_beds(self) -> float:
        """All neonatal, pediatric and premature ICU beds."""
        return self.__num_pedi_icu_beds

    @num_pedi_icu_beds.setter
    def num_pedi_icu_beds(self, value: float):
        self._property_changed('num_pedi_icu_beds')
        self.__num_pedi_icu_beds = value        

    @property
    def bid_yield(self) -> float:
        """The return an investor realizes on a bond sold at the bid price."""
        return self.__bid_yield

    @bid_yield.setter
    def bid_yield(self, value: float):
        self._property_changed('bid_yield')
        self.__bid_yield = value        

    @property
    def expected_residual(self) -> float:
        """Expected residual quantity."""
        return self.__expected_residual

    @expected_residual.setter
    def expected_residual(self, value: float):
        self._property_changed('expected_residual')
        self.__expected_residual = value        

    @property
    def option_premium(self) -> float:
        """An indication of the market value of the option at the time of execution."""
        return self.__option_premium

    @option_premium.setter
    def option_premium(self, value: float):
        self._property_changed('option_premium')
        self.__option_premium = value        

    @property
    def owner_name(self) -> str:
        """Name of person submitting request."""
        return self.__owner_name

    @owner_name.setter
    def owner_name(self, value: str):
        self._property_changed('owner_name')
        self.__owner_name = value        

    @property
    def par_asset_swap_spread6m(self) -> float:
        """Par asset swap spread vs 6m tenor."""
        return self.__par_asset_swap_spread6m

    @par_asset_swap_spread6m.setter
    def par_asset_swap_spread6m(self, value: float):
        self._property_changed('par_asset_swap_spread6m')
        self.__par_asset_swap_spread6m = value        

    @property
    def z_score(self) -> float:
        """Z Score."""
        return self.__z_score

    @z_score.setter
    def z_score(self, value: float):
        self._property_changed('z_score')
        self.__z_score = value        

    @property
    def sell12bps(self) -> float:
        """The amount GS would sell for 12 bps charge."""
        return self.__sell12bps

    @sell12bps.setter
    def sell12bps(self, value: float):
        self._property_changed('sell12bps')
        self.__sell12bps = value        

    @property
    def event_start_time(self) -> str:
        """The start time of the event if the event occurs during a time window and the
           event has a specific start time. It is represented in HH:MM 24 hour
           format in the time zone of the exchange where the company is listed."""
        return self.__event_start_time

    @event_start_time.setter
    def event_start_time(self, value: str):
        self._property_changed('event_start_time')
        self.__event_start_time = value        

    @property
    def matched_maturity_swap_spread6m(self) -> float:
        """Matched maturity swap spread vs 6m tenor."""
        return self.__matched_maturity_swap_spread6m

    @matched_maturity_swap_spread6m.setter
    def matched_maturity_swap_spread6m(self, value: float):
        self._property_changed('matched_maturity_swap_spread6m')
        self.__matched_maturity_swap_spread6m = value        

    @property
    def turnover(self) -> float:
        """Turnover."""
        return self.__turnover

    @turnover.setter
    def turnover(self, value: float):
        self._property_changed('turnover')
        self.__turnover = value        

    @property
    def price_spot_target_unit(self) -> str:
        """Unit in which the target price is reported."""
        return self.__price_spot_target_unit

    @price_spot_target_unit.setter
    def price_spot_target_unit(self, value: str):
        self._property_changed('price_spot_target_unit')
        self.__price_spot_target_unit = value        

    @property
    def coverage(self) -> str:
        """Coverage of dataset."""
        return self.__coverage

    @coverage.setter
    def coverage(self, value: str):
        self._property_changed('coverage')
        self.__coverage = value        

    @property
    def g_percentile(self) -> float:
        """A percentile that captures a company's G ranking relative to the entire ESG
           universe."""
        return self.__g_percentile

    @g_percentile.setter
    def g_percentile(self, value: float):
        self._property_changed('g_percentile')
        self.__g_percentile = value        

    @property
    def rvt_adj(self) -> float:
        """The ratio of the network's realized value to the 90-day moving average of the
           adjusted transfer value."""
        return self.__rvt_adj

    @rvt_adj.setter
    def rvt_adj(self, value: float):
        self._property_changed('rvt_adj')
        self.__rvt_adj = value        

    @property
    def cloud_cover_hourly_forecast(self) -> float:
        """The hourly forecast value for cloud cover."""
        return self.__cloud_cover_hourly_forecast

    @cloud_cover_hourly_forecast.setter
    def cloud_cover_hourly_forecast(self, value: float):
        self._property_changed('cloud_cover_hourly_forecast')
        self.__cloud_cover_hourly_forecast = value        

    @property
    def lending_fund_nav(self) -> float:
        """Net Asset Value of a securities lending fund."""
        return self.__lending_fund_nav

    @lending_fund_nav.setter
    def lending_fund_nav(self, value: float):
        self._property_changed('lending_fund_nav')
        self.__lending_fund_nav = value        

    @property
    def source_original_category(self) -> str:
        """Source category's original name."""
        return self.__source_original_category

    @source_original_category.setter
    def source_original_category(self, value: str):
        self._property_changed('source_original_category')
        self.__source_original_category = value        

    @property
    def percent_close_execution_quantity(self) -> float:
        """Percentage of order filled at auction close."""
        return self.__percent_close_execution_quantity

    @percent_close_execution_quantity.setter
    def percent_close_execution_quantity(self, value: float):
        self._property_changed('percent_close_execution_quantity')
        self.__percent_close_execution_quantity = value        

    @property
    def latest_execution_time(self) -> datetime.datetime:
        """ISO 8601-formatted timestamp"""
        return self.__latest_execution_time

    @latest_execution_time.setter
    def latest_execution_time(self, value: datetime.datetime):
        self._property_changed('latest_execution_time')
        self.__latest_execution_time = value        

    @property
    def arrival_mid_realized_bps(self) -> float:
        """Consolidated realised performance vs Arrival Mid, in bps."""
        return self.__arrival_mid_realized_bps

    @arrival_mid_realized_bps.setter
    def arrival_mid_realized_bps(self, value: float):
        self._property_changed('arrival_mid_realized_bps')
        self.__arrival_mid_realized_bps = value        

    @property
    def location(self) -> str:
        """The location at which a price fixing has been taken."""
        return self.__location

    @location.setter
    def location(self, value: str):
        self._property_changed('location')
        self.__location = value        

    @property
    def scenario_id(self) -> str:
        """Marquee unique scenario identifier"""
        return self.__scenario_id

    @scenario_id.setter
    def scenario_id(self, value: str):
        self._property_changed('scenario_id')
        self.__scenario_id = value        

    @property
    def termination_tenor(self) -> str:
        """Tenor"""
        return self.__termination_tenor

    @termination_tenor.setter
    def termination_tenor(self, value: str):
        self._property_changed('termination_tenor')
        self.__termination_tenor = value        

    @property
    def queue_clock_time(self) -> float:
        """The Queue Clock Time of the stock  on the particular date."""
        return self.__queue_clock_time

    @queue_clock_time.setter
    def queue_clock_time(self, value: float):
        self._property_changed('queue_clock_time')
        self.__queue_clock_time = value        

    @property
    def discretion_lower_bound(self) -> float:
        """The lower bound of the discretion band as published from the algo."""
        return self.__discretion_lower_bound

    @discretion_lower_bound.setter
    def discretion_lower_bound(self, value: float):
        self._property_changed('discretion_lower_bound')
        self.__discretion_lower_bound = value        

    @property
    def tcm_cost_participation_rate50_pct(self) -> float:
        """TCM cost with a 50 percent participation rate."""
        return self.__tcm_cost_participation_rate50_pct

    @tcm_cost_participation_rate50_pct.setter
    def tcm_cost_participation_rate50_pct(self, value: float):
        self._property_changed('tcm_cost_participation_rate50_pct')
        self.__tcm_cost_participation_rate50_pct = value        

    @property
    def rating_linear(self) -> float:
        """Rating of the bond in linear form."""
        return self.__rating_linear

    @rating_linear.setter
    def rating_linear(self, value: float):
        self._property_changed('rating_linear')
        self.__rating_linear = value        

    @property
    def previous_close_unrealized_bps(self) -> float:
        """Unrealised performance vs Previous Close, in bps."""
        return self.__previous_close_unrealized_bps

    @previous_close_unrealized_bps.setter
    def previous_close_unrealized_bps(self, value: float):
        self._property_changed('previous_close_unrealized_bps')
        self.__previous_close_unrealized_bps = value        

    @property
    def sub_asset_class_for_other_commodity(self) -> str:
        """An indication of the sub asset class."""
        return self.__sub_asset_class_for_other_commodity

    @sub_asset_class_for_other_commodity.setter
    def sub_asset_class_for_other_commodity(self, value: str):
        self._property_changed('sub_asset_class_for_other_commodity')
        self.__sub_asset_class_for_other_commodity = value        

    @property
    def forward_price(self) -> float:
        """Trader's estimate for the price of power in MWh."""
        return self.__forward_price

    @forward_price.setter
    def forward_price(self, value: float):
        self._property_changed('forward_price')
        self.__forward_price = value        

    @property
    def type(self) -> str:
        """Asset type differentiates the product categorization or contract type"""
        return self.__type

    @type.setter
    def type(self, value: str):
        self._property_changed('type')
        self.__type = value        

    @property
    def strike_ref(self) -> str:
        """Reference for strike level (enum: spot, forward,delta_call, delta_put,
           delta_neutral)."""
        return self.__strike_ref

    @strike_ref.setter
    def strike_ref(self, value: str):
        self._property_changed('strike_ref')
        self.__strike_ref = value        

    @property
    def cumulative_pnl(self) -> float:
        """Cumulative PnL from the start date to the current date."""
        return self.__cumulative_pnl

    @cumulative_pnl.setter
    def cumulative_pnl(self, value: float):
        self._property_changed('cumulative_pnl')
        self.__cumulative_pnl = value        

    @property
    def short_tenor(self) -> str:
        """Tenor of instrument."""
        return self.__short_tenor

    @short_tenor.setter
    def short_tenor(self, value: str):
        self._property_changed('short_tenor')
        self.__short_tenor = value        

    @property
    def sell28bps(self) -> float:
        """The amount GS would sell for 28 bps charge."""
        return self.__sell28bps

    @sell28bps.setter
    def sell28bps(self, value: float):
        self._property_changed('sell28bps')
        self.__sell28bps = value        

    @property
    def fund_class(self) -> str:
        """Class of the fund."""
        return self.__fund_class

    @fund_class.setter
    def fund_class(self, value: str):
        self._property_changed('fund_class')
        self.__fund_class = value        

    @property
    def unadjusted_volume(self) -> float:
        """Unadjusted volume traded."""
        return self.__unadjusted_volume

    @unadjusted_volume.setter
    def unadjusted_volume(self, value: float):
        self._property_changed('unadjusted_volume')
        self.__unadjusted_volume = value        

    @property
    def buy36bps(self) -> float:
        """The amount GS would buy for 36 bps charge."""
        return self.__buy36bps

    @buy36bps.setter
    def buy36bps(self, value: float):
        self._property_changed('buy36bps')
        self.__buy36bps = value        

    @property
    def position_idx(self) -> int:
        """The index of the corresponding position in the risk request."""
        return self.__position_idx

    @position_idx.setter
    def position_idx(self, value: int):
        self._property_changed('position_idx')
        self.__position_idx = value        

    @property
    def wind_chill_hourly_forecast(self) -> float:
        """The hourly forecast value for wind chill."""
        return self.__wind_chill_hourly_forecast

    @wind_chill_hourly_forecast.setter
    def wind_chill_hourly_forecast(self, value: float):
        self._property_changed('wind_chill_hourly_forecast')
        self.__wind_chill_hourly_forecast = value        

    @property
    def sec_name(self) -> str:
        """Internal Goldman Sachs security name."""
        return self.__sec_name

    @sec_name.setter
    def sec_name(self, value: str):
        self._property_changed('sec_name')
        self.__sec_name = value        

    @property
    def implied_volatility_by_relative_strike(self) -> float:
        """Volatility of an asset implied by observations of market prices."""
        return self.__implied_volatility_by_relative_strike

    @implied_volatility_by_relative_strike.setter
    def implied_volatility_by_relative_strike(self, value: float):
        self._property_changed('implied_volatility_by_relative_strike')
        self.__implied_volatility_by_relative_strike = value        

    @property
    def percent_adv(self) -> float:
        """Size of trade as percentage of average daily volume (e.g. .05, 1, 2, ..., 20)."""
        return self.__percent_adv

    @percent_adv.setter
    def percent_adv(self, value: float):
        self._property_changed('percent_adv')
        self.__percent_adv = value        

    @property
    def reference_rate_usd(self) -> float:
        """The price of an asset quoted in U.S. dollars using a framework to select high
           quality constituent markets and a methodology that is resistant
           manipulation."""
        return self.__reference_rate_usd

    @reference_rate_usd.setter
    def reference_rate_usd(self, value: float):
        self._property_changed('reference_rate_usd')
        self.__reference_rate_usd = value        

    @property
    def leg1_total_notional(self) -> float:
        """The total Notional amount or quantity of units of the leg 1 underlying asset."""
        return self.__leg1_total_notional

    @leg1_total_notional.setter
    def leg1_total_notional(self, value: float):
        self._property_changed('leg1_total_notional')
        self.__leg1_total_notional = value        

    @property
    def contract(self) -> str:
        """Contract month code and year (e.g. F18)."""
        return self.__contract

    @contract.setter
    def contract(self, value: str):
        self._property_changed('contract')
        self.__contract = value        

    @property
    def nvt_adj90(self) -> float:
        """The ratio of the network value (or market capitalization, current supply) to the
           90-day moving average of the adjusted transfer value."""
        return self.__nvt_adj90

    @nvt_adj90.setter
    def nvt_adj90(self, value: float):
        self._property_changed('nvt_adj90')
        self.__nvt_adj90 = value        

    @property
    def payment_frequency1(self) -> str:
        """An integer multiplier of a time period describing how often the parties to the
           SB swap transaction exchange payments associated with each party???s
           obligation. Such payment frequency may be described as one letter
           preceded by an integer."""
        return self.__payment_frequency1

    @payment_frequency1.setter
    def payment_frequency1(self, value: str):
        self._property_changed('payment_frequency1')
        self.__payment_frequency1 = value        

    @property
    def payment_frequency2(self) -> str:
        """Same as Payment Frequency 1."""
        return self.__payment_frequency2

    @payment_frequency2.setter
    def payment_frequency2(self, value: str):
        self._property_changed('payment_frequency2')
        self.__payment_frequency2 = value        

    @property
    def bespoke(self) -> str:
        """Indication if the trade is bespoke."""
        return self.__bespoke

    @bespoke.setter
    def bespoke(self, value: str):
        self._property_changed('bespoke')
        self.__bespoke = value        

    @property
    def repo_tenor(self) -> str:
        """Maturity of repurchase agreement."""
        return self.__repo_tenor

    @repo_tenor.setter
    def repo_tenor(self, value: str):
        self._property_changed('repo_tenor')
        self.__repo_tenor = value        

    @property
    def sell15cents(self) -> float:
        """The amount GS would sell for 15 cents charge."""
        return self.__sell15cents

    @sell15cents.setter
    def sell15cents(self, value: float):
        self._property_changed('sell15cents')
        self.__sell15cents = value        

    @property
    def investment_qtd(self) -> float:
        """Total net investment Quarter to date."""
        return self.__investment_qtd

    @investment_qtd.setter
    def investment_qtd(self, value: float):
        self._property_changed('investment_qtd')
        self.__investment_qtd = value        

    @property
    def heat_index_forecast(self) -> float:
        """The heat index forecast in a given unit."""
        return self.__heat_index_forecast

    @heat_index_forecast.setter
    def heat_index_forecast(self, value: float):
        self._property_changed('heat_index_forecast')
        self.__heat_index_forecast = value        

    @property
    def rating_standard_and_poors(self) -> str:
        """Bond rating from Standard And Poor's."""
        return self.__rating_standard_and_poors

    @rating_standard_and_poors.setter
    def rating_standard_and_poors(self, value: str):
        self._property_changed('rating_standard_and_poors')
        self.__rating_standard_and_poors = value        

    @property
    def quality_stars(self) -> float:
        """Confidence in the BPE."""
        return self.__quality_stars

    @quality_stars.setter
    def quality_stars(self, value: float):
        self._property_changed('quality_stars')
        self.__quality_stars = value        

    @property
    def leg2_floating_index(self) -> str:
        """If floating index leg, the index."""
        return self.__leg2_floating_index

    @leg2_floating_index.setter
    def leg2_floating_index(self, value: str):
        self._property_changed('leg2_floating_index')
        self.__leg2_floating_index = value        

    @property
    def source_ticker(self) -> str:
        """Source ticker."""
        return self.__source_ticker

    @source_ticker.setter
    def source_ticker(self, value: str):
        self._property_changed('source_ticker')
        self.__source_ticker = value        

    @property
    def primary_vwap_unrealized_bps(self) -> float:
        """Unrealised performance vs Primary VWAP, in bps."""
        return self.__primary_vwap_unrealized_bps

    @primary_vwap_unrealized_bps.setter
    def primary_vwap_unrealized_bps(self, value: float):
        self._property_changed('primary_vwap_unrealized_bps')
        self.__primary_vwap_unrealized_bps = value        

    @property
    def gsid(self) -> str:
        """Goldman Sachs internal equity identifier."""
        return self.__gsid

    @gsid.setter
    def gsid(self, value: str):
        self._property_changed('gsid')
        self.__gsid = value        

    @property
    def lending_fund(self) -> str:
        """Name of the lending fund on a securities lending agreement."""
        return self.__lending_fund

    @lending_fund.setter
    def lending_fund(self, value: str):
        self._property_changed('lending_fund')
        self.__lending_fund = value        

    @property
    def sensitivity(self) -> float:
        """Sensitivity."""
        return self.__sensitivity

    @sensitivity.setter
    def sensitivity(self, value: float):
        self._property_changed('sensitivity')
        self.__sensitivity = value        

    @property
    def embedded_option_type(self) -> str:
        """The type of embedded option if the option fields are for an embedded option."""
        return self.__embedded_option_type

    @embedded_option_type.setter
    def embedded_option_type(self, value: str):
        self._property_changed('embedded_option_type')
        self.__embedded_option_type = value        

    @property
    def day_count(self) -> str:
        """The determination of how interest accrues over time for the SB swap."""
        return self.__day_count

    @day_count.setter
    def day_count(self, value: str):
        self._property_changed('day_count')
        self.__day_count = value        

    @property
    def sell16bps(self) -> float:
        """The amount GS would sell for 16 bps charge."""
        return self.__sell16bps

    @sell16bps.setter
    def sell16bps(self, value: float):
        self._property_changed('sell16bps')
        self.__sell16bps = value        

    @property
    def relative_break_even_inflation_change(self) -> float:
        """Relative break even inflation change."""
        return self.__relative_break_even_inflation_change

    @relative_break_even_inflation_change.setter
    def relative_break_even_inflation_change(self, value: float):
        self._property_changed('relative_break_even_inflation_change')
        self.__relative_break_even_inflation_change = value        

    @property
    def sell25cents(self) -> float:
        """The amount GS would sell for 25 cents charge."""
        return self.__sell25cents

    @sell25cents.setter
    def sell25cents(self, value: float):
        self._property_changed('sell25cents')
        self.__sell25cents = value        

    @property
    def var_swap(self) -> float:
        """Strike such that the price of an uncapped variance swap on the underlying index
           is zero at inception."""
        return self.__var_swap

    @var_swap.setter
    def var_swap(self, value: float):
        self._property_changed('var_swap')
        self.__var_swap = value        

    @property
    def buy5point5bps(self) -> float:
        """The amount GS would buy for 5.5 bps charge."""
        return self.__buy5point5bps

    @buy5point5bps.setter
    def buy5point5bps(self, value: float):
        self._property_changed('buy5point5bps')
        self.__buy5point5bps = value        

    @property
    def block_large_notional(self) -> str:
        """An indication of whether this is a block trade or off-facility swap."""
        return self.__block_large_notional

    @block_large_notional.setter
    def block_large_notional(self, value: str):
        self._property_changed('block_large_notional')
        self.__block_large_notional = value        

    @property
    def sell2point5bps(self) -> float:
        """The amount GS would sell for 2.5 bps charge."""
        return self.__sell2point5bps

    @sell2point5bps.setter
    def sell2point5bps(self, value: float):
        self._property_changed('sell2point5bps')
        self.__sell2point5bps = value        

    @property
    def capacity(self) -> str:
        """Risk/agency execution."""
        return self.__capacity

    @capacity.setter
    def capacity(self, value: str):
        self._property_changed('capacity')
        self.__capacity = value        

    @property
    def sectors_raw(self) -> Tuple[str, ...]:
        """Sector classifications of an asset."""
        return self.__sectors_raw

    @sectors_raw.setter
    def sectors_raw(self, value: Tuple[str, ...]):
        self._property_changed('sectors_raw')
        self.__sectors_raw = value        

    @property
    def primary_vwap_in_limit(self) -> float:
        """Primary VWAP In Limit benchmark price."""
        return self.__primary_vwap_in_limit

    @primary_vwap_in_limit.setter
    def primary_vwap_in_limit(self, value: float):
        self._property_changed('primary_vwap_in_limit')
        self.__primary_vwap_in_limit = value        

    @property
    def shareclass_price(self) -> float:
        """Price of the shareclass on a certain day."""
        return self.__shareclass_price

    @shareclass_price.setter
    def shareclass_price(self, value: float):
        self._property_changed('shareclass_price')
        self.__shareclass_price = value        

    @property
    def trade_size(self) -> float:
        """Size of trade ($mm)."""
        return self.__trade_size

    @trade_size.setter
    def trade_size(self, value: float):
        self._property_changed('trade_size')
        self.__trade_size = value        

    @property
    def price_spot_entry_value(self) -> float:
        """Opening price value of the trade idea."""
        return self.__price_spot_entry_value

    @price_spot_entry_value.setter
    def price_spot_entry_value(self, value: float):
        self._property_changed('price_spot_entry_value')
        self.__price_spot_entry_value = value        

    @property
    def buy8point5bps(self) -> float:
        """The amount GS would buy for 8.5 bps charge."""
        return self.__buy8point5bps

    @buy8point5bps.setter
    def buy8point5bps(self, value: float):
        self._property_changed('buy8point5bps')
        self.__buy8point5bps = value        

    @property
    def symbol_dimensions(self) -> Tuple[str, ...]:
        """Set of fields that determine database table name."""
        return self.__symbol_dimensions

    @symbol_dimensions.setter
    def symbol_dimensions(self, value: Tuple[str, ...]):
        self._property_changed('symbol_dimensions')
        self.__symbol_dimensions = value        

    @property
    def buy24bps(self) -> float:
        """The amount GS would buy for 24 bps charge."""
        return self.__buy24bps

    @buy24bps.setter
    def buy24bps(self, value: float):
        self._property_changed('buy24bps')
        self.__buy24bps = value        

    @property
    def side_pocket(self) -> str:
        """Account utilized to separate illiquid assets from more liquid investments."""
        return self.__side_pocket

    @side_pocket.setter
    def side_pocket(self, value: str):
        self._property_changed('side_pocket')
        self.__side_pocket = value        

    @property
    def observation(self) -> str:
        """Value of observation."""
        return self.__observation

    @observation.setter
    def observation(self, value: str):
        self._property_changed('observation')
        self.__observation = value        

    @property
    def option_type_sdr(self) -> str:
        """An indication of the type of the option."""
        return self.__option_type_sdr

    @option_type_sdr.setter
    def option_type_sdr(self, value: str):
        self._property_changed('option_type_sdr')
        self.__option_type_sdr = value        

    @property
    def scenario_group_id(self) -> str:
        """Marquee unique scenario group identifier"""
        return self.__scenario_group_id

    @scenario_group_id.setter
    def scenario_group_id(self, value: str):
        self._property_changed('scenario_group_id')
        self.__scenario_group_id = value        

    @property
    def average_implied_variance(self) -> float:
        """Average variance of an asset implied by observations of market prices."""
        return self.__average_implied_variance

    @average_implied_variance.setter
    def average_implied_variance(self, value: float):
        self._property_changed('average_implied_variance')
        self.__average_implied_variance = value        

    @property
    def avg_trade_rate_description(self) -> str:
        """Description of the Stock's Average Trading Rate on the particular date."""
        return self.__avg_trade_rate_description

    @avg_trade_rate_description.setter
    def avg_trade_rate_description(self, value: str):
        self._property_changed('avg_trade_rate_description')
        self.__avg_trade_rate_description = value        

    @property
    def fraction(self) -> float:
        """Fraction."""
        return self.__fraction

    @fraction.setter
    def fraction(self, value: float):
        self._property_changed('fraction')
        self.__fraction = value        

    @property
    def asset_count_short(self) -> float:
        """Number of assets in a portfolio with short exposure."""
        return self.__asset_count_short

    @asset_count_short.setter
    def asset_count_short(self, value: float):
        self._property_changed('asset_count_short')
        self.__asset_count_short = value        

    @property
    def collateral_percentage_required(self) -> float:
        """Collateral percentage requied to cover the given position."""
        return self.__collateral_percentage_required

    @collateral_percentage_required.setter
    def collateral_percentage_required(self, value: float):
        self._property_changed('collateral_percentage_required')
        self.__collateral_percentage_required = value        

    @property
    def sell5point5bps(self) -> float:
        """The amount GS would sell for 5.5 bps charge."""
        return self.__sell5point5bps

    @sell5point5bps.setter
    def sell5point5bps(self, value: float):
        self._property_changed('sell5point5bps')
        self.__sell5point5bps = value        

    @property
    def date(self) -> datetime.date:
        """ISO 8601 formatted date."""
        return self.__date

    @date.setter
    def date(self, value: datetime.date):
        self._property_changed('date')
        self.__date = value        

    @property
    def zip_code(self) -> float:
        """Postal code."""
        return self.__zip_code

    @zip_code.setter
    def zip_code(self, value: float):
        self._property_changed('zip_code')
        self.__zip_code = value        

    @property
    def total_std_return_since_inception(self) -> float:
        """Average annual total returns as of most recent calendar quarter-end."""
        return self.__total_std_return_since_inception

    @total_std_return_since_inception.setter
    def total_std_return_since_inception(self, value: float):
        self._property_changed('total_std_return_since_inception')
        self.__total_std_return_since_inception = value        

    @property
    def source_category(self) -> str:
        """Source category of event."""
        return self.__source_category

    @source_category.setter
    def source_category(self, value: str):
        self._property_changed('source_category')
        self.__source_category = value        

    @property
    def volume_unadjusted(self) -> float:
        """Unadjusted volume traded."""
        return self.__volume_unadjusted

    @volume_unadjusted.setter
    def volume_unadjusted(self, value: float):
        self._property_changed('volume_unadjusted')
        self.__volume_unadjusted = value        

    @property
    def passive_ratio(self) -> float:
        """Ratio of passive ownership (including ETFs and mutual funds), i.e the proportion
           of a company's marketcap that is held by passive ETFs and mutual
           funds. Normalised between -3 (low level) and +3 (high level)."""
        return self.__passive_ratio

    @passive_ratio.setter
    def passive_ratio(self, value: float):
        self._property_changed('passive_ratio')
        self.__passive_ratio = value        

    @property
    def price_to_earnings(self) -> float:
        """Price to earnings."""
        return self.__price_to_earnings

    @price_to_earnings.setter
    def price_to_earnings(self, value: float):
        self._property_changed('price_to_earnings')
        self.__price_to_earnings = value        

    @property
    def order_depth(self) -> float:
        """Order book depth level of the corresponding ask or bid."""
        return self.__order_depth

    @order_depth.setter
    def order_depth(self, value: float):
        self._property_changed('order_depth')
        self.__order_depth = value        

    @property
    def ann_yield3_month(self) -> float:
        """Calculates the total return for 3 months, representing past performance."""
        return self.__ann_yield3_month

    @ann_yield3_month.setter
    def ann_yield3_month(self, value: float):
        self._property_changed('ann_yield3_month')
        self.__ann_yield3_month = value        

    @property
    def net_flow_std(self) -> float:
        """Net flow for the asset in standard deviations."""
        return self.__net_flow_std

    @net_flow_std.setter
    def net_flow_std(self, value: float):
        self._property_changed('net_flow_std')
        self.__net_flow_std = value        

    @property
    def encoded_stats(self) -> str:
        """Asset stats object in json format."""
        return self.__encoded_stats

    @encoded_stats.setter
    def encoded_stats(self, value: str):
        self._property_changed('encoded_stats')
        self.__encoded_stats = value        

    @property
    def buy5bps(self) -> float:
        """The amount GS would buy for 5 bps charge."""
        return self.__buy5bps

    @buy5bps.setter
    def buy5bps(self, value: float):
        self._property_changed('buy5bps')
        self.__buy5bps = value        

    @property
    def run_time(self) -> float:
        """Time that a run of the QA checker took."""
        return self.__run_time

    @run_time.setter
    def run_time(self, value: float):
        self._property_changed('run_time')
        self.__run_time = value        

    @property
    def ask_size(self) -> float:
        """The number of shares, lots, or contracts willing to sell at the Ask price."""
        return self.__ask_size

    @ask_size.setter
    def ask_size(self, value: float):
        self._property_changed('ask_size')
        self.__ask_size = value        

    @property
    def absolute_return_mtd(self) -> float:
        """Absolute Return Month to Date."""
        return self.__absolute_return_mtd

    @absolute_return_mtd.setter
    def absolute_return_mtd(self, value: float):
        self._property_changed('absolute_return_mtd')
        self.__absolute_return_mtd = value        

    @property
    def std30_days_unsubsidized_yield(self) -> float:
        """Average annual total returns as of most recent calendar quarter-end."""
        return self.__std30_days_unsubsidized_yield

    @std30_days_unsubsidized_yield.setter
    def std30_days_unsubsidized_yield(self, value: float):
        self._property_changed('std30_days_unsubsidized_yield')
        self.__std30_days_unsubsidized_yield = value        

    @property
    def resource(self) -> str:
        """The event resource. For example: Asset"""
        return self.__resource

    @resource.setter
    def resource(self, value: str):
        self._property_changed('resource')
        self.__resource = value        

    @property
    def average_realized_volatility(self) -> float:
        """Average volatility of an asset realized by observations of market prices."""
        return self.__average_realized_volatility

    @average_realized_volatility.setter
    def average_realized_volatility(self, value: float):
        self._property_changed('average_realized_volatility')
        self.__average_realized_volatility = value        

    @property
    def trace_adv_buy(self) -> float:
        """TRACE ADV for the buy side."""
        return self.__trace_adv_buy

    @trace_adv_buy.setter
    def trace_adv_buy(self, value: float):
        self._property_changed('trace_adv_buy')
        self.__trace_adv_buy = value        

    @property
    def new_confirmed(self) -> float:
        """New cofirmed cases."""
        return self.__new_confirmed

    @new_confirmed.setter
    def new_confirmed(self, value: float):
        self._property_changed('new_confirmed')
        self.__new_confirmed = value        

    @property
    def sell8bps(self) -> float:
        """The amount GS would sell for 8 bps charge."""
        return self.__sell8bps

    @sell8bps.setter
    def sell8bps(self, value: float):
        self._property_changed('sell8bps')
        self.__sell8bps = value        

    @property
    def bid_price(self) -> float:
        """Latest Bid Price (price willing to buy)."""
        return self.__bid_price

    @bid_price.setter
    def bid_price(self, value: float):
        self._property_changed('bid_price')
        self.__bid_price = value        

    @property
    def sell8point5bps(self) -> float:
        """The amount GS would sell for 8.5 bps charge."""
        return self.__sell8point5bps

    @sell8point5bps.setter
    def sell8point5bps(self, value: float):
        self._property_changed('sell8point5bps')
        self.__sell8point5bps = value        

    @property
    def target_price_unrealized_bps(self) -> float:
        """Unrealised performance vs Target Price, in bps."""
        return self.__target_price_unrealized_bps

    @target_price_unrealized_bps.setter
    def target_price_unrealized_bps(self, value: float):
        self._property_changed('target_price_unrealized_bps')
        self.__target_price_unrealized_bps = value        

    @property
    def es_numeric_percentile(self) -> float:
        """A percentile that captures a company's E&S numeric ranking within its subsector."""
        return self.__es_numeric_percentile

    @es_numeric_percentile.setter
    def es_numeric_percentile(self, value: float):
        self._property_changed('es_numeric_percentile')
        self.__es_numeric_percentile = value        

    @property
    def leg2_underlying_asset(self) -> str:
        """The asset, reference asset, or reference obligation for payments of a party???s
           obligations under the SB swap transaction reference."""
        return self.__leg2_underlying_asset

    @leg2_underlying_asset.setter
    def leg2_underlying_asset(self, value: str):
        self._property_changed('leg2_underlying_asset')
        self.__leg2_underlying_asset = value        

    @property
    def csa_terms(self) -> str:
        """Identifier of terms or rules under which collateral is posted or transferred
           between swap counterparties (e.g. ccy-1 means LCH clearing with
           collateral in currency ccy)."""
        return self.__csa_terms

    @csa_terms.setter
    def csa_terms(self, value: str):
        self._property_changed('csa_terms')
        self.__csa_terms = value        

    @property
    def relative_payoff_mtd(self) -> float:
        """Total win divided by total loss Month to date."""
        return self.__relative_payoff_mtd

    @relative_payoff_mtd.setter
    def relative_payoff_mtd(self, value: float):
        self._property_changed('relative_payoff_mtd')
        self.__relative_payoff_mtd = value        

    @property
    def daily_net_shareholder_flows(self) -> float:
        """Cash dividends paid daily."""
        return self.__daily_net_shareholder_flows

    @daily_net_shareholder_flows.setter
    def daily_net_shareholder_flows(self, value: float):
        self._property_changed('daily_net_shareholder_flows')
        self.__daily_net_shareholder_flows = value        

    @property
    def buy2point5bps(self) -> float:
        """The amount GS would buy for 2.5 bps charge."""
        return self.__buy2point5bps

    @buy2point5bps.setter
    def buy2point5bps(self, value: float):
        self._property_changed('buy2point5bps')
        self.__buy2point5bps = value        

    @property
    def cai(self) -> float:
        """Current Activity Indicator (CAI) and Current Activity Indicator Innovations
           (CAII) for each of the world's large economies and many smaller ones,
           as well as aggregate CAIs and CAIIs for regions."""
        return self.__cai

    @cai.setter
    def cai(self, value: float):
        self._property_changed('cai')
        self.__cai = value        

    @property
    def executed_notional_usd(self) -> float:
        """Executed notional in USD."""
        return self.__executed_notional_usd

    @executed_notional_usd.setter
    def executed_notional_usd(self, value: float):
        self._property_changed('executed_notional_usd')
        self.__executed_notional_usd = value        

    @property
    def system_time(self) -> datetime.datetime:
        """Time at which an event took place in the system. ISO 8601 formatted string."""
        return self.__system_time

    @system_time.setter
    def system_time(self, value: datetime.datetime):
        self._property_changed('system_time')
        self.__system_time = value        

    @property
    def total_home_isolation(self) -> float:
        """Total number of cases in home isolation."""
        return self.__total_home_isolation

    @total_home_isolation.setter
    def total_home_isolation(self, value: float):
        self._property_changed('total_home_isolation')
        self.__total_home_isolation = value        

    @property
    def station_name(self) -> str:
        """The name of weather station where data is recorded/forecast."""
        return self.__station_name

    @station_name.setter
    def station_name(self, value: str):
        self._property_changed('station_name')
        self.__station_name = value        

    @property
    def pass_pct(self) -> float:
        """Pass percentage."""
        return self.__pass_pct

    @pass_pct.setter
    def pass_pct(self, value: float):
        self._property_changed('pass_pct')
        self.__pass_pct = value        

    @property
    def opening_report(self) -> str:
        """Report that was published when the trade idea was opened."""
        return self.__opening_report

    @opening_report.setter
    def opening_report(self, value: str):
        self._property_changed('opening_report')
        self.__opening_report = value        

    @property
    def event_timestamp(self) -> datetime.datetime:
        """The time and date of when the transaction is terminated by the reporting
           counterparty which will be earlier than the expiration date of the
           transaction."""
        return self.__event_timestamp

    @event_timestamp.setter
    def event_timestamp(self, value: datetime.datetime):
        self._property_changed('event_timestamp')
        self.__event_timestamp = value        

    @property
    def midcurve_atm_fwd_rate(self) -> float:
        """Midcurve ATM forward rate."""
        return self.__midcurve_atm_fwd_rate

    @midcurve_atm_fwd_rate.setter
    def midcurve_atm_fwd_rate(self, value: float):
        self._property_changed('midcurve_atm_fwd_rate')
        self.__midcurve_atm_fwd_rate = value        

    @property
    def precipitation_forecast(self) -> float:
        """The forecast value for precipitation."""
        return self.__precipitation_forecast

    @precipitation_forecast.setter
    def precipitation_forecast(self, value: float):
        self._property_changed('precipitation_forecast')
        self.__precipitation_forecast = value        

    @property
    def equity_risk_premium_index(self) -> float:
        """Equity risk premium index: difference between cost of equity and 10y treasury
           yield."""
        return self.__equity_risk_premium_index

    @equity_risk_premium_index.setter
    def equity_risk_premium_index(self, value: float):
        self._property_changed('equity_risk_premium_index')
        self.__equity_risk_premium_index = value        

    @property
    def fatalities_underlying_conditions_unknown(self) -> float:
        """Total number of fatalities of people that it is unknown whether they had
           underlying conditions."""
        return self.__fatalities_underlying_conditions_unknown

    @fatalities_underlying_conditions_unknown.setter
    def fatalities_underlying_conditions_unknown(self, value: float):
        self._property_changed('fatalities_underlying_conditions_unknown')
        self.__fatalities_underlying_conditions_unknown = value        

    @property
    def buy12bps(self) -> float:
        """The amount GS would buy for 12 bps charge."""
        return self.__buy12bps

    @buy12bps.setter
    def buy12bps(self, value: float):
        self._property_changed('buy12bps')
        self.__buy12bps = value        

    @property
    def clearing_house(self) -> str:
        """Swap Clearing House"""
        return self.__clearing_house

    @clearing_house.setter
    def clearing_house(self, value: str):
        self._property_changed('clearing_house')
        self.__clearing_house = value        

    @property
    def day_close_unrealized_bps(self) -> float:
        """Unrealized performance vs Close, in bps."""
        return self.__day_close_unrealized_bps

    @day_close_unrealized_bps.setter
    def day_close_unrealized_bps(self, value: float):
        self._property_changed('day_close_unrealized_bps')
        self.__day_close_unrealized_bps = value        

    @property
    def sts_rates_maturity(self) -> str:
        """Risk maturity bucket for STS assets."""
        return self.__sts_rates_maturity

    @sts_rates_maturity.setter
    def sts_rates_maturity(self, value: str):
        self._property_changed('sts_rates_maturity')
        self.__sts_rates_maturity = value        

    @property
    def liq_dly(self) -> float:
        """Percent of assets that could be quickly and easily converted into investable
           cash without loss of value within a day."""
        return self.__liq_dly

    @liq_dly.setter
    def liq_dly(self, value: float):
        self._property_changed('liq_dly')
        self.__liq_dly = value        

    @property
    def contributor_role(self) -> str:
        """Role (specialist / generalist..) of a contributor."""
        return self.__contributor_role

    @contributor_role.setter
    def contributor_role(self, value: str):
        self._property_changed('contributor_role')
        self.__contributor_role = value        

    @property
    def total_fatalities(self) -> float:
        """Total number of fatalities."""
        return self.__total_fatalities

    @total_fatalities.setter
    def total_fatalities(self, value: float):
        self._property_changed('total_fatalities')
        self.__total_fatalities = value        


class IndexCurveShift(Scenario):
        
    """A scenario to manipulate index curve shape"""

    @camel_case_translate
    def __init__(
        self,
        market_data_pattern: MarketDataPattern = None,
        annualised_parallel_shift: float = None,
        annualised_slope_shift: float = None,
        cutoff: float = None,
        floor: float = None,
        tenor: str = None,
        rate_option: str = None,
        bucket_shift: float = None,
        bucket_start: datetime.date = None,
        bucket_end: datetime.date = None,
        name: str = None
    ):        
        super().__init__()
        self.market_data_pattern = market_data_pattern
        self.annualised_parallel_shift = annualised_parallel_shift
        self.annualised_slope_shift = annualised_slope_shift
        self.cutoff = cutoff
        self.floor = floor
        self.tenor = tenor
        self.rate_option = rate_option
        self.bucket_shift = bucket_shift
        self.bucket_start = bucket_start
        self.bucket_end = bucket_end
        self.name = name

    @property
    def scenario_type(self) -> str:
        """IndexCurveShift"""
        return 'IndexCurveShift'        

    @property
    def market_data_pattern(self) -> MarketDataPattern:
        """Market pattern for matching curve assets"""
        return self.__market_data_pattern

    @market_data_pattern.setter
    def market_data_pattern(self, value: MarketDataPattern):
        self._property_changed('market_data_pattern')
        self.__market_data_pattern = value        

    @property
    def annualised_parallel_shift(self) -> float:
        """Size of the parallel shift (in bps/year)"""
        return self.__annualised_parallel_shift

    @annualised_parallel_shift.setter
    def annualised_parallel_shift(self, value: float):
        self._property_changed('annualised_parallel_shift')
        self.__annualised_parallel_shift = value        

    @property
    def annualised_slope_shift(self) -> float:
        """Size of the slope shift (in bps/year)"""
        return self.__annualised_slope_shift

    @annualised_slope_shift.setter
    def annualised_slope_shift(self, value: float):
        self._property_changed('annualised_slope_shift')
        self.__annualised_slope_shift = value        

    @property
    def cutoff(self) -> float:
        """The cutoff point (in years)"""
        return self.__cutoff

    @cutoff.setter
    def cutoff(self, value: float):
        self._property_changed('cutoff')
        self.__cutoff = value        

    @property
    def floor(self) -> float:
        """The floor value (in bps)"""
        return self.__floor

    @floor.setter
    def floor(self, value: float):
        self._property_changed('floor')
        self.__floor = value        

    @property
    def tenor(self) -> str:
        """Tenor of rate option to which shock is applied"""
        return self.__tenor

    @tenor.setter
    def tenor(self, value: str):
        self._property_changed('tenor')
        self.__tenor = value        

    @property
    def rate_option(self) -> str:
        """Rate option to which shock is applied"""
        return self.__rate_option

    @rate_option.setter
    def rate_option(self, value: str):
        self._property_changed('rate_option')
        self.__rate_option = value        

    @property
    def bucket_shift(self) -> float:
        """Size of the bucket shift (in bps)"""
        return self.__bucket_shift

    @bucket_shift.setter
    def bucket_shift(self, value: float):
        self._property_changed('bucket_shift')
        self.__bucket_shift = value        

    @property
    def bucket_start(self) -> datetime.date:
        """The start date of the custom bucket"""
        return self.__bucket_start

    @bucket_start.setter
    def bucket_start(self, value: datetime.date):
        self._property_changed('bucket_start')
        self.__bucket_start = value        

    @property
    def bucket_end(self) -> datetime.date:
        """The end date of the custom bucket"""
        return self.__bucket_end

    @bucket_end.setter
    def bucket_end(self, value: datetime.date):
        self._property_changed('bucket_end')
        self.__bucket_end = value        


class MarketDataPatternAndShock(Base):
        
    """A shock to apply to market coordinate values matching the supplied pattern"""

    @camel_case_translate
    def __init__(
        self,
        pattern: MarketDataPattern,
        shock: MarketDataShock,
        name: str = None
    ):        
        super().__init__()
        self.pattern = pattern
        self.shock = shock
        self.name = name

    @property
    def pattern(self) -> MarketDataPattern:
        """A pattern used to match market coordinates"""
        return self.__pattern

    @pattern.setter
    def pattern(self, value: MarketDataPattern):
        self._property_changed('pattern')
        self.__pattern = value        

    @property
    def shock(self) -> MarketDataShock:
        """A shock to apply to market coordinate values"""
        return self.__shock

    @shock.setter
    def shock(self, value: MarketDataShock):
        self._property_changed('shock')
        self.__shock = value        


class PCOExposureLeg(Base):
        
    """Parameters required for PCO Exposure Leg"""

    @camel_case_translate
    def __init__(
        self,
        local_to_base_rate: str = None,
        local_nav_limits: Tuple[str, ...] = None,
        base_nav_limits: Tuple[str, ...] = None,
        all_approved_hedge_ratio: str = None,
        show_all_approved_hedge_ratio: bool = None,
        hedge_ratio: str = None,
        exposure_ratio: str = None,
        local_currency: Union[Currency, str] = None,
        target_ratio: str = None,
        benchmark: PCOBenchmark = None,
        long_rebalance_threshold: str = None,
        short_rebalance_threshold: str = None,
        auto_roll: bool = None,
        name: str = None
    ):        
        super().__init__()
        self.local_to_base_rate = local_to_base_rate
        self.local_nav_limits = local_nav_limits
        self.base_nav_limits = base_nav_limits
        self.all_approved_hedge_ratio = all_approved_hedge_ratio
        self.show_all_approved_hedge_ratio = show_all_approved_hedge_ratio
        self.hedge_ratio = hedge_ratio
        self.exposure_ratio = exposure_ratio
        self.local_currency = local_currency
        self.target_ratio = target_ratio
        self.benchmark = benchmark
        self.long_rebalance_threshold = long_rebalance_threshold
        self.short_rebalance_threshold = short_rebalance_threshold
        self.auto_roll = auto_roll
        self.name = name

    @property
    def local_to_base_rate(self) -> str:
        """Previously day FX spot rates for each currency pair"""
        return self.__local_to_base_rate

    @local_to_base_rate.setter
    def local_to_base_rate(self, value: str):
        self._property_changed('local_to_base_rate')
        self.__local_to_base_rate = value        

    @property
    def local_nav_limits(self) -> Tuple[str, ...]:
        """Net Asset Value limits for local currency"""
        return self.__local_nav_limits

    @local_nav_limits.setter
    def local_nav_limits(self, value: Tuple[str, ...]):
        self._property_changed('local_nav_limits')
        self.__local_nav_limits = value        

    @property
    def base_nav_limits(self) -> Tuple[str, ...]:
        """Net Asset Value limits for base currency"""
        return self.__base_nav_limits

    @base_nav_limits.setter
    def base_nav_limits(self, value: Tuple[str, ...]):
        self._property_changed('base_nav_limits')
        self.__base_nav_limits = value        

    @property
    def all_approved_hedge_ratio(self) -> str:
        """Projected hedge ratio"""
        return self.__all_approved_hedge_ratio

    @all_approved_hedge_ratio.setter
    def all_approved_hedge_ratio(self, value: str):
        self._property_changed('all_approved_hedge_ratio')
        self.__all_approved_hedge_ratio = value        

    @property
    def show_all_approved_hedge_ratio(self) -> bool:
        """If UI displays projected hedge ratio"""
        return self.__show_all_approved_hedge_ratio

    @show_all_approved_hedge_ratio.setter
    def show_all_approved_hedge_ratio(self, value: bool):
        self._property_changed('show_all_approved_hedge_ratio')
        self.__show_all_approved_hedge_ratio = value        

    @property
    def hedge_ratio(self) -> str:
        """Ratio of target exposure that is intended to be hedged"""
        return self.__hedge_ratio

    @hedge_ratio.setter
    def hedge_ratio(self, value: str):
        self._property_changed('hedge_ratio')
        self.__hedge_ratio = value        

    @property
    def exposure_ratio(self) -> str:
        """Exposure ratio"""
        return self.__exposure_ratio

    @exposure_ratio.setter
    def exposure_ratio(self, value: str):
        self._property_changed('exposure_ratio')
        self.__exposure_ratio = value        

    @property
    def local_currency(self) -> Union[Currency, str]:
        """Local currency"""
        return self.__local_currency

    @local_currency.setter
    def local_currency(self, value: Union[Currency, str]):
        self._property_changed('local_currency')
        self.__local_currency = get_enum_value(Currency, value)        

    @property
    def target_ratio(self) -> str:
        """Target hedge ratio for each currency"""
        return self.__target_ratio

    @target_ratio.setter
    def target_ratio(self, value: str):
        self._property_changed('target_ratio')
        self.__target_ratio = value        

    @property
    def benchmark(self) -> PCOBenchmark:
        """Benchmark used for each currency"""
        return self.__benchmark

    @benchmark.setter
    def benchmark(self, value: PCOBenchmark):
        self._property_changed('benchmark')
        self.__benchmark = value        

    @property
    def long_rebalance_threshold(self) -> str:
        """Long threshold for TNA adjustment for each currency"""
        return self.__long_rebalance_threshold

    @long_rebalance_threshold.setter
    def long_rebalance_threshold(self, value: str):
        self._property_changed('long_rebalance_threshold')
        self.__long_rebalance_threshold = value        

    @property
    def short_rebalance_threshold(self) -> str:
        """Short threshold for TNA adjustment for each currency"""
        return self.__short_rebalance_threshold

    @short_rebalance_threshold.setter
    def short_rebalance_threshold(self, value: str):
        self._property_changed('short_rebalance_threshold')
        self.__short_rebalance_threshold = value        

    @property
    def auto_roll(self) -> bool:
        """Whether roll orders will be automatically generated for each currency"""
        return self.__auto_roll

    @auto_roll.setter
    def auto_roll(self, value: bool):
        self._property_changed('auto_roll')
        self.__auto_roll = value        


class CSLScheduleArray(Base):
        
    """An array of schedules"""

    @camel_case_translate
    def __init__(
        self,
        schedule_values: Tuple[CSLSchedule, ...] = None,
        name: str = None
    ):        
        super().__init__()
        self.schedule_values = schedule_values
        self.name = name

    @property
    def schedule_values(self) -> Tuple[CSLSchedule, ...]:
        """A schedule"""
        return self.__schedule_values

    @schedule_values.setter
    def schedule_values(self, value: Tuple[CSLSchedule, ...]):
        self._property_changed('schedule_values')
        self.__schedule_values = value        


class MarketDataShockBasedScenario(Scenario):
        
    """A scenario comprised of user-defined market data shocks"""

    @camel_case_translate
    def __init__(
        self,
        shocks: Tuple[MarketDataPatternAndShock, ...],
        name: str = None
    ):        
        super().__init__()
        self.shocks = shocks
        self.name = name

    @property
    def scenario_type(self) -> str:
        """MarketDataShockBasedScenario"""
        return 'MarketDataShockBasedScenario'        

    @property
    def shocks(self) -> Tuple[MarketDataPatternAndShock, ...]:
        """A shock to apply to market coordinate values matching the supplied pattern"""
        return self.__shocks

    @shocks.setter
    def shocks(self, value: Tuple[MarketDataPatternAndShock, ...]):
        self._property_changed('shocks')
        self.__shocks = value        


class OverlayMarket(Base):
        
    """A market with explicit coordinate values overlayed over a base market"""

    @camel_case_translate
    def __init__(
        self,
        base_market: Union[CloseMarket, LiveMarket, TimestampedMarket],
        market_data: Tuple[MarketDataCoordinateValue, ...],
        name: str = None
    ):        
        super().__init__()
        self.base_market = base_market
        self.market_data = market_data
        self.name = name

    @property
    def market_type(self) -> str:
        """OverlayMarket"""
        return 'OverlayMarket'        

    @property
    def base_market(self) -> Union[CloseMarket, LiveMarket, TimestampedMarket]:
        """The base market"""
        return self.__base_market

    @base_market.setter
    def base_market(self, value: Union[CloseMarket, LiveMarket, TimestampedMarket]):
        self._property_changed('base_market')
        self.__base_market = value        

    @property
    def market_data(self) -> Tuple[MarketDataCoordinateValue, ...]:
        """Market data to overlay over the base market"""
        return self.__market_data

    @market_data.setter
    def market_data(self, value: Tuple[MarketDataCoordinateValue, ...]):
        self._property_changed('market_data')
        self.__market_data = value        


class PCOExposure(Base):
        
    """Parameters required for PCO Exposure"""

    @camel_case_translate
    def __init__(
        self,
        last_data_updated_date_time: datetime.datetime = None,
        nav_includes_fx_hedges: bool = None,
        use_fx_rate_on_base_fx_forward: bool = None,
        last_generate_orders_date_time: datetime.datetime = None,
        legs: Tuple[PCOExposureLeg, ...] = None,
        adjustments: PCOExposureAdjustments = None,
        ratio_mode: str = None,
        hedge_calc_currency: Union[PCOCurrencyType, str] = None,
        name: str = None
    ):        
        super().__init__()
        self.last_data_updated_date_time = last_data_updated_date_time
        self.nav_includes_fx_hedges = nav_includes_fx_hedges
        self.use_fx_rate_on_base_fx_forward = use_fx_rate_on_base_fx_forward
        self.last_generate_orders_date_time = last_generate_orders_date_time
        self.legs = legs
        self.adjustments = adjustments
        self.ratio_mode = ratio_mode
        self.hedge_calc_currency = hedge_calc_currency
        self.name = name

    @property
    def last_data_updated_date_time(self) -> datetime.datetime:
        """Last time when data was updated"""
        return self.__last_data_updated_date_time

    @last_data_updated_date_time.setter
    def last_data_updated_date_time(self, value: datetime.datetime):
        self._property_changed('last_data_updated_date_time')
        self.__last_data_updated_date_time = value        

    @property
    def nav_includes_fx_hedges(self) -> bool:
        """Whether Net Asset Value includes FX hedges"""
        return self.__nav_includes_fx_hedges

    @nav_includes_fx_hedges.setter
    def nav_includes_fx_hedges(self, value: bool):
        self._property_changed('nav_includes_fx_hedges')
        self.__nav_includes_fx_hedges = value        

    @property
    def use_fx_rate_on_base_fx_forward(self) -> bool:
        """Use open hedge in notional of base currency or local currency"""
        return self.__use_fx_rate_on_base_fx_forward

    @use_fx_rate_on_base_fx_forward.setter
    def use_fx_rate_on_base_fx_forward(self, value: bool):
        self._property_changed('use_fx_rate_on_base_fx_forward')
        self.__use_fx_rate_on_base_fx_forward = value        

    @property
    def last_generate_orders_date_time(self) -> datetime.datetime:
        """Last time when orders are generated"""
        return self.__last_generate_orders_date_time

    @last_generate_orders_date_time.setter
    def last_generate_orders_date_time(self, value: datetime.datetime):
        self._property_changed('last_generate_orders_date_time')
        self.__last_generate_orders_date_time = value        

    @property
    def legs(self) -> Tuple[PCOExposureLeg, ...]:
        """Exposure details for each leg"""
        return self.__legs

    @legs.setter
    def legs(self, value: Tuple[PCOExposureLeg, ...]):
        self._property_changed('legs')
        self.__legs = value        

    @property
    def adjustments(self) -> PCOExposureAdjustments:
        """Exposure adjustments"""
        return self.__adjustments

    @adjustments.setter
    def adjustments(self, value: PCOExposureAdjustments):
        self._property_changed('adjustments')
        self.__adjustments = value        

    @property
    def ratio_mode(self) -> str:
        """One of hedge ratio or exposure ratio"""
        return self.__ratio_mode

    @ratio_mode.setter
    def ratio_mode(self, value: str):
        self._property_changed('ratio_mode')
        self.__ratio_mode = value        

    @property
    def hedge_calc_currency(self) -> Union[PCOCurrencyType, str]:
        """One of Local and Base"""
        return self.__hedge_calc_currency

    @hedge_calc_currency.setter
    def hedge_calc_currency(self, value: Union[PCOCurrencyType, str]):
        self._property_changed('hedge_calc_currency')
        self.__hedge_calc_currency = get_enum_value(PCOCurrencyType, value)        


class MarketDataScenario(Base):
        
    """A market data scenario to apply to the calculation"""

    @camel_case_translate
    def __init__(
        self,
        scenario: dict,
        subtract_base: bool = False,
        name: str = None
    ):        
        super().__init__()
        self.scenario = scenario
        self.subtract_base = subtract_base
        self.name = name

    @property
    def scenario(self) -> dict:
        """The scenario"""
        return self.__scenario

    @scenario.setter
    def scenario(self, value: dict):
        self._property_changed('scenario')
        self.__scenario = value        

    @property
    def subtract_base(self) -> bool:
        """Subtract values computed under the base market data state, to return a diff, if
           true"""
        return self.__subtract_base

    @subtract_base.setter
    def subtract_base(self, value: bool):
        self._property_changed('subtract_base')
        self.__subtract_base = value        


class Position(Base):
        
    @camel_case_translate
    def __init__(
        self,
        asset_id: str = None,
        quantity: float = None,
        notional: float = None,
        party_to: SimpleParty = None,
        party_from: SimpleParty = None,
        external_ids: Tuple[dict, ...] = None,
        margin_ids: Tuple[dict, ...] = None,
        instrument: InstrumentBase = None,
        description: str = None,
        name: str = None
    ):        
        super().__init__()
        self.asset_id = asset_id
        self.quantity = quantity
        self.notional = notional
        self.party_to = party_to
        self.party_from = party_from
        self.external_ids = external_ids
        self.margin_ids = margin_ids
        self.instrument = instrument
        self.description = description
        self.name = name

    @property
    def asset_id(self) -> str:
        """Marquee unique asset identifier."""
        return self.__asset_id

    @asset_id.setter
    def asset_id(self, value: str):
        self._property_changed('asset_id')
        self.__asset_id = value        

    @property
    def quantity(self) -> float:
        """Quantity of position"""
        return self.__quantity

    @quantity.setter
    def quantity(self, value: float):
        self._property_changed('quantity')
        self.__quantity = value        

    @property
    def notional(self) -> float:
        """Notional of position"""
        return self.__notional

    @notional.setter
    def notional(self, value: float):
        self._property_changed('notional')
        self.__notional = value        

    @property
    def party_to(self) -> SimpleParty:
        return self.__party_to

    @party_to.setter
    def party_to(self, value: SimpleParty):
        self._property_changed('party_to')
        self.__party_to = value        

    @property
    def party_from(self) -> SimpleParty:
        return self.__party_from

    @party_from.setter
    def party_from(self, value: SimpleParty):
        self._property_changed('party_from')
        self.__party_from = value        

    @property
    def external_ids(self) -> Tuple[dict, ...]:
        """A list of identifiers (external to Marquee) for this position"""
        return self.__external_ids

    @external_ids.setter
    def external_ids(self, value: Tuple[dict, ...]):
        self._property_changed('external_ids')
        self.__external_ids = value        

    @property
    def margin_ids(self) -> Tuple[dict, ...]:
        """A list of margin identifiers (e.g. CSA) for this position"""
        return self.__margin_ids

    @margin_ids.setter
    def margin_ids(self, value: Tuple[dict, ...]):
        self._property_changed('margin_ids')
        self.__margin_ids = value        

    @property
    def instrument(self) -> InstrumentBase:
        """Valid Instruments"""
        return self.__instrument

    @instrument.setter
    def instrument(self, value: InstrumentBase):
        self._property_changed('instrument')
        self.__instrument = value        

    @property
    def description(self) -> str:
        """Description of a particular trade or position."""
        return self.__description

    @description.setter
    def description(self, value: str):
        self._property_changed('description')
        self.__description = value        


class RelativeMarket(Base):
        
    """Market for pricing between two states (e.g. for PnlExplain)"""

    @camel_case_translate
    def __init__(
        self,
        from_market: Union[CloseMarket, LiveMarket, TimestampedMarket, OverlayMarket],
        to_market: Union[CloseMarket, LiveMarket, TimestampedMarket, OverlayMarket],
        name: str = None
    ):        
        super().__init__()
        self.from_market = from_market
        self.to_market = to_market
        self.name = name

    @property
    def market_type(self) -> str:
        """RelativeMarket"""
        return 'RelativeMarket'        

    @property
    def from_market(self) -> Union[CloseMarket, LiveMarket, TimestampedMarket, OverlayMarket]:
        """The base market"""
        return self.__from_market

    @from_market.setter
    def from_market(self, value: Union[CloseMarket, LiveMarket, TimestampedMarket, OverlayMarket]):
        self._property_changed('from_market')
        self.__from_market = value        

    @property
    def to_market(self) -> Union[CloseMarket, LiveMarket, TimestampedMarket, OverlayMarket]:
        """The target market"""
        return self.__to_market

    @to_market.setter
    def to_market(self, value: Union[CloseMarket, LiveMarket, TimestampedMarket, OverlayMarket]):
        self._property_changed('to_market')
        self.__to_market = value        


class PricingDateAndMarketDataAsOf(Base):
        
    """Pricing date and market data as of (date or time)"""

    @camel_case_translate
    def __init__(
        self,
        pricing_date: datetime.date,
        market_data_as_of: Union[datetime.date, datetime.datetime] = None,
        market: dict = None,
        name: str = None
    ):        
        super().__init__()
        self.pricing_date = pricing_date
        self.market_data_as_of = market_data_as_of
        self.market = market
        self.name = name

    @property
    def pricing_date(self) -> datetime.date:
        """The date for which to perform the calculation"""
        return self.__pricing_date

    @pricing_date.setter
    def pricing_date(self, value: datetime.date):
        self._property_changed('pricing_date')
        self.__pricing_date = value        

    @property
    def market_data_as_of(self) -> Union[datetime.date, datetime.datetime]:
        """The date or time to source market data"""
        return self.__market_data_as_of

    @market_data_as_of.setter
    def market_data_as_of(self, value: Union[datetime.date, datetime.datetime]):
        self._property_changed('market_data_as_of')
        self.__market_data_as_of = value        

    @property
    def market(self) -> dict:
        """The market used for pricing"""
        return self.__market

    @market.setter
    def market(self, value: dict):
        self._property_changed('market')
        self.__market = value        


class LiquidityRequest(Base):
        
    """Required parameters in order to get liquidity information on a set of positions"""

    @camel_case_translate
    def __init__(
        self,
        notional: float = None,
        positions: dict = None,
        risk_model: str = None,
        date: datetime.date = None,
        currency: Union[Currency, str] = None,
        participation_rate: float = None,
        execution_horizon: float = None,
        execution_start_time: datetime.datetime = None,
        execution_end_time: datetime.datetime = None,
        benchmark_id: str = None,
        measures: Tuple[Union[LiquidityMeasure, str], ...] = None,
        time_series_benchmark_ids: Tuple[str, ...] = None,
        time_series_start_date: datetime.date = None,
        time_series_end_date: datetime.date = None,
        format_: Union[Format, str] = None,
        report_parameters: LiquidityReportParameters = None,
        explode_positions: bool = False,
        name: str = None
    ):        
        super().__init__()
        self.notional = notional
        self.positions = positions
        self.risk_model = risk_model
        self.date = date
        self.currency = currency
        self.participation_rate = participation_rate
        self.execution_horizon = execution_horizon
        self.execution_start_time = execution_start_time
        self.execution_end_time = execution_end_time
        self.benchmark_id = benchmark_id
        self.measures = measures
        self.time_series_benchmark_ids = time_series_benchmark_ids
        self.time_series_start_date = time_series_start_date
        self.time_series_end_date = time_series_end_date
        self.__format = get_enum_value(Format, format_)
        self.report_parameters = report_parameters
        self.explode_positions = explode_positions
        self.name = name

    @property
    def notional(self) -> float:
        """Notional value of the positions."""
        return self.__notional

    @notional.setter
    def notional(self, value: float):
        self._property_changed('notional')
        self.__notional = value        

    @property
    def positions(self) -> dict:
        """A set of quantity or weighted positions."""
        return self.__positions

    @positions.setter
    def positions(self, value: dict):
        self._property_changed('positions')
        self.__positions = value        

    @property
    def risk_model(self) -> str:
        """Marquee unique risk model identifier"""
        return self.__risk_model

    @risk_model.setter
    def risk_model(self, value: str):
        self._property_changed('risk_model')
        self.__risk_model = value        

    @property
    def date(self) -> datetime.date:
        """ISO 8601-formatted date"""
        return self.__date

    @date.setter
    def date(self, value: datetime.date):
        self._property_changed('date')
        self.__date = value        

    @property
    def currency(self) -> Union[Currency, str]:
        """Currency, ISO 4217 currency code or exchange quote modifier (e.g. GBP vs GBp)"""
        return self.__currency

    @currency.setter
    def currency(self, value: Union[Currency, str]):
        self._property_changed('currency')
        self.__currency = get_enum_value(Currency, value)        

    @property
    def participation_rate(self) -> float:
        return self.__participation_rate

    @participation_rate.setter
    def participation_rate(self, value: float):
        self._property_changed('participation_rate')
        self.__participation_rate = value        

    @property
    def execution_horizon(self) -> float:
        return self.__execution_horizon

    @execution_horizon.setter
    def execution_horizon(self, value: float):
        self._property_changed('execution_horizon')
        self.__execution_horizon = value        

    @property
    def execution_start_time(self) -> datetime.datetime:
        """ISO 8601-formatted timestamp"""
        return self.__execution_start_time

    @execution_start_time.setter
    def execution_start_time(self, value: datetime.datetime):
        self._property_changed('execution_start_time')
        self.__execution_start_time = value        

    @property
    def execution_end_time(self) -> datetime.datetime:
        """ISO 8601-formatted timestamp"""
        return self.__execution_end_time

    @execution_end_time.setter
    def execution_end_time(self, value: datetime.datetime):
        self._property_changed('execution_end_time')
        self.__execution_end_time = value        

    @property
    def benchmark_id(self) -> str:
        """Marquee unique asset identifier of the benchmark."""
        return self.__benchmark_id

    @benchmark_id.setter
    def benchmark_id(self, value: str):
        self._property_changed('benchmark_id')
        self.__benchmark_id = value        

    @property
    def measures(self) -> Tuple[Union[LiquidityMeasure, str], ...]:
        return self.__measures

    @measures.setter
    def measures(self, value: Tuple[Union[LiquidityMeasure, str], ...]):
        self._property_changed('measures')
        self.__measures = value        

    @property
    def time_series_benchmark_ids(self) -> Tuple[str, ...]:
        """Marquee unique identifiers of assets to be used as benchmarks."""
        return self.__time_series_benchmark_ids

    @time_series_benchmark_ids.setter
    def time_series_benchmark_ids(self, value: Tuple[str, ...]):
        self._property_changed('time_series_benchmark_ids')
        self.__time_series_benchmark_ids = value        

    @property
    def time_series_start_date(self) -> datetime.date:
        """ISO 8601-formatted date"""
        return self.__time_series_start_date

    @time_series_start_date.setter
    def time_series_start_date(self, value: datetime.date):
        self._property_changed('time_series_start_date')
        self.__time_series_start_date = value        

    @property
    def time_series_end_date(self) -> datetime.date:
        """ISO 8601-formatted date"""
        return self.__time_series_end_date

    @time_series_end_date.setter
    def time_series_end_date(self, value: datetime.date):
        self._property_changed('time_series_end_date')
        self.__time_series_end_date = value        

    @property
    def format(self) -> Union[Format, str]:
        """Alternative format for data to be returned in"""
        return self.__format

    @format.setter
    def format(self, value: Union[Format, str]):
        self._property_changed('format')
        self.__format = get_enum_value(Format, value)        

    @property
    def report_parameters(self) -> LiquidityReportParameters:
        """Parameters to be used on liquidity reports"""
        return self.__report_parameters

    @report_parameters.setter
    def report_parameters(self, value: LiquidityReportParameters):
        self._property_changed('report_parameters')
        self.__report_parameters = value        

    @property
    def explode_positions(self) -> bool:
        """Flag determining whether the positions should be exploded before doing
           calculations."""
        return self.__explode_positions

    @explode_positions.setter
    def explode_positions(self, value: bool):
        self._property_changed('explode_positions')
        self.__explode_positions = value        


class PositionSet(Base):
        
    @camel_case_translate
    def __init__(
        self,
        positions: Tuple[Position, ...],
        position_date: datetime.date,
        id_: str = None,
        last_update_time: datetime.datetime = None,
        type_: str = None,
        divisor: float = None,
        last_updated_time: datetime.datetime = None,
        name: str = None
    ):        
        super().__init__()
        self.__id = id_
        self.position_date = position_date
        self.last_update_time = last_update_time
        self.positions = positions
        self.__type = type_
        self.divisor = divisor
        self.last_updated_time = last_updated_time
        self.name = name

    @property
    def id(self) -> str:
        """Unique identifier"""
        return self.__id

    @id.setter
    def id(self, value: str):
        self._property_changed('id')
        self.__id = value        

    @property
    def position_date(self) -> datetime.date:
        """ISO 8601-formatted date"""
        return self.__position_date

    @position_date.setter
    def position_date(self, value: datetime.date):
        self._property_changed('position_date')
        self.__position_date = value        

    @property
    def last_update_time(self) -> datetime.datetime:
        """ISO 8601-formatted timestamp"""
        return self.__last_update_time

    @last_update_time.setter
    def last_update_time(self, value: datetime.datetime):
        self._property_changed('last_update_time')
        self.__last_update_time = value        

    @property
    def positions(self) -> Tuple[Position, ...]:
        """Array of quantity position objects."""
        return self.__positions

    @positions.setter
    def positions(self, value: Tuple[Position, ...]):
        self._property_changed('positions')
        self.__positions = value        

    @property
    def type(self) -> str:
        """The composition type of a Portfolio"""
        return self.__type

    @type.setter
    def type(self, value: str):
        self._property_changed('type')
        self.__type = value        

    @property
    def divisor(self) -> float:
        """optional index divisor for a position set"""
        return self.__divisor

    @divisor.setter
    def divisor(self, value: float):
        self._property_changed('divisor')
        self.__divisor = value        

    @property
    def last_updated_time(self) -> datetime.datetime:
        """Timestamp of when the object was last updated."""
        return self.__last_updated_time

    @last_updated_time.setter
    def last_updated_time(self, value: datetime.datetime):
        self._property_changed('last_updated_time')
        self.__last_updated_time = value        


class RiskPosition(Base):
        
    @camel_case_translate
    def __init__(
        self,
        instrument: Priceable,
        quantity: float = None,
        name: str = None
    ):        
        super().__init__()
        self.instrument = instrument
        self.quantity = quantity
        self.name = name

    @property
    def instrument(self) -> Priceable:
        """Instrument or Id   To specify a Marquee asset use the asset Id. For listed
           products use an XRef, e.g. { 'bid': 'NGZ19 Comdty' }, { 'isin':
           'US912810SD19' }. To specify an instrument use one of the listed
           types"""
        return self.__instrument

    @instrument.setter
    def instrument(self, value: Priceable):
        self._property_changed('instrument')
        self.__instrument = value        

    @property
    def quantity(self) -> float:
        """Quantity of instrument"""
        return self.__quantity

    @quantity.setter
    def quantity(self, value: float):
        self._property_changed('quantity')
        self.__quantity = value        


class RiskRequest(Base):
        
    """Object representation of a risk calculation request"""

    @camel_case_translate
    def __init__(
        self,
        positions: Tuple[RiskPosition, ...],
        measures: Tuple[RiskMeasure, ...],
        pricing_and_market_data_as_of: Tuple[PricingDateAndMarketDataAsOf, ...] = None,
        pricing_location: Union[PricingLocation, str] = None,
        wait_for_results: bool = False,
        scenario: MarketDataScenario = None,
        parameters: RiskRequestParameters = None,
        request_visible_to_gs: bool = False,
        name: str = None
    ):        
        super().__init__()
        self.positions = positions
        self.measures = measures
        self.pricing_and_market_data_as_of = pricing_and_market_data_as_of
        self.pricing_location = pricing_location
        self.wait_for_results = wait_for_results
        self.scenario = scenario
        self.parameters = parameters
        self.request_visible_to_gs = request_visible_to_gs
        self.name = name

    @property
    def positions(self) -> Tuple[RiskPosition, ...]:
        """The positions on which to run the risk calculation"""
        return self.__positions

    @positions.setter
    def positions(self, value: Tuple[RiskPosition, ...]):
        self._property_changed('positions')
        self.__positions = value        

    @property
    def measures(self) -> Tuple[RiskMeasure, ...]:
        """A collection of risk measures to compute. E.g. { 'measureType': 'Delta',
           'assetClass': 'Equity'"""
        return self.__measures

    @measures.setter
    def measures(self, value: Tuple[RiskMeasure, ...]):
        self._property_changed('measures')
        self.__measures = value        

    @property
    def pricing_and_market_data_as_of(self) -> Tuple[PricingDateAndMarketDataAsOf, ...]:
        """Pricing date and market data as of (date or time)"""
        return self.__pricing_and_market_data_as_of

    @pricing_and_market_data_as_of.setter
    def pricing_and_market_data_as_of(self, value: Tuple[PricingDateAndMarketDataAsOf, ...]):
        self._property_changed('pricing_and_market_data_as_of')
        self.__pricing_and_market_data_as_of = value        

    @property
    def pricing_location(self) -> Union[PricingLocation, str]:
        """The location for pricing and market data"""
        return self.__pricing_location

    @pricing_location.setter
    def pricing_location(self, value: Union[PricingLocation, str]):
        self._property_changed('pricing_location')
        self.__pricing_location = get_enum_value(PricingLocation, value)        

    @property
    def wait_for_results(self) -> bool:
        """For short-running requests this may be set to true and the results will be
           returned directly. If false, the response will contain the Id to
           retrieve the results"""
        return self.__wait_for_results

    @wait_for_results.setter
    def wait_for_results(self, value: bool):
        self._property_changed('wait_for_results')
        self.__wait_for_results = value        

    @property
    def scenario(self) -> MarketDataScenario:
        """A market data scenario to apply to the calculation"""
        return self.__scenario

    @scenario.setter
    def scenario(self, value: MarketDataScenario):
        self._property_changed('scenario')
        self.__scenario = value        

    @property
    def parameters(self) -> RiskRequestParameters:
        """Parameters for the risk request"""
        return self.__parameters

    @parameters.setter
    def parameters(self, value: RiskRequestParameters):
        self._property_changed('parameters')
        self.__parameters = value        

    @property
    def request_visible_to_gs(self) -> bool:
        return self.__request_visible_to_gs

    @request_visible_to_gs.setter
    def request_visible_to_gs(self, value: bool):
        self._property_changed('request_visible_to_gs')
        self.__request_visible_to_gs = value        


class ReportParameters(Base):
        
    """Parameters specific to the report type"""

    @camel_case_translate
    def __init__(
        self,
        asset_class: Union[AssetClass, str] = None,
        transaction_cost_model: str = None,
        trading_cost: float = None,
        servicing_cost_long: float = None,
        servicing_cost_short: float = None,
        region: str = None,
        risk_model: str = None,
        fx_hedged: bool = None,
        publish_to_bloomberg: bool = None,
        publish_to_reuters: bool = None,
        publish_to_factset: bool = None,
        include_price_history: bool = None,
        index_update: bool = None,
        index_rebalance: bool = None,
        basket_action: Union[BasketAction, str] = None,
        api_domain: bool = None,
        initial_price: float = None,
        stock_level_exposures: bool = None,
        explode_positions: bool = None,
        scenario_id: str = None,
        scenario_ids: Tuple[str, ...] = None,
        scenario_group_id: str = None,
        scenario_type: Union[ScenarioType, str] = None,
        market_model_id: str = None,
        risk_measures: Tuple[RiskMeasure, ...] = None,
        initial_pricing_date: datetime.date = None,
        backcast: bool = None,
        risk_request: RiskRequest = None,
        participation_rate: float = None,
        approve_rebalance: bool = None,
        use_risk_request_batch_mode: bool = False,
        limited_access_assets: Tuple[str, ...] = None,
        corporate_action_restricted_assets: Tuple[str, ...] = None,
        backcast_dates: Tuple[datetime.date, ...] = None,
        base_currency: Union[Currency, str] = None,
        local_currency: Union[Currency, str] = None,
        fund_calendar: Union[PCOFundCalendar, str] = None,
        calculation_currency: Union[PCOCurrencyType, str] = None,
        hedge_settlement_interval: Tuple[PCOParameterValues, ...] = None,
        hedge_settlement_day: Tuple[PCOParameterValues, ...] = None,
        roll_horizon: Tuple[PCOParameterValues, ...] = None,
        pnl_currency: Tuple[PCOParameterValues, ...] = None,
        nav_publication_period: Tuple[PCOParameterValues, ...] = None,
        roll_date_zero_threshold: bool = None,
        unrealised_mark_to_market: PCOUnrealisedMarkToMarket = None,
        target_deviation: Tuple[PCOTargetDeviation, ...] = None,
        cash_balances: Tuple[PCOCashBalance, ...] = None,
        exposure: PCOExposure = None,
        settlements: Tuple[PCOSettlements, ...] = None,
        show_cash: bool = None,
        show_exposure: bool = None,
        name: str = None
    ):        
        super().__init__()
        self.asset_class = asset_class
        self.transaction_cost_model = transaction_cost_model
        self.trading_cost = trading_cost
        self.servicing_cost_long = servicing_cost_long
        self.servicing_cost_short = servicing_cost_short
        self.region = region
        self.risk_model = risk_model
        self.fx_hedged = fx_hedged
        self.publish_to_bloomberg = publish_to_bloomberg
        self.publish_to_reuters = publish_to_reuters
        self.publish_to_factset = publish_to_factset
        self.include_price_history = include_price_history
        self.index_update = index_update
        self.index_rebalance = index_rebalance
        self.basket_action = basket_action
        self.api_domain = api_domain
        self.initial_price = initial_price
        self.stock_level_exposures = stock_level_exposures
        self.explode_positions = explode_positions
        self.scenario_id = scenario_id
        self.scenario_ids = scenario_ids
        self.scenario_group_id = scenario_group_id
        self.scenario_type = scenario_type
        self.market_model_id = market_model_id
        self.risk_measures = risk_measures
        self.initial_pricing_date = initial_pricing_date
        self.backcast = backcast
        self.risk_request = risk_request
        self.participation_rate = participation_rate
        self.approve_rebalance = approve_rebalance
        self.use_risk_request_batch_mode = use_risk_request_batch_mode
        self.limited_access_assets = limited_access_assets
        self.corporate_action_restricted_assets = corporate_action_restricted_assets
        self.backcast_dates = backcast_dates
        self.base_currency = base_currency
        self.local_currency = local_currency
        self.fund_calendar = fund_calendar
        self.calculation_currency = calculation_currency
        self.hedge_settlement_interval = hedge_settlement_interval
        self.hedge_settlement_day = hedge_settlement_day
        self.roll_horizon = roll_horizon
        self.pnl_currency = pnl_currency
        self.nav_publication_period = nav_publication_period
        self.roll_date_zero_threshold = roll_date_zero_threshold
        self.unrealised_mark_to_market = unrealised_mark_to_market
        self.target_deviation = target_deviation
        self.cash_balances = cash_balances
        self.exposure = exposure
        self.settlements = settlements
        self.show_cash = show_cash
        self.show_exposure = show_exposure
        self.name = name

    @property
    def asset_class(self) -> Union[AssetClass, str]:
        """Asset classification of security. Assets are classified into broad groups which
           exhibit similar characteristics and behave in a consistent way under
           different market conditions"""
        return self.__asset_class

    @asset_class.setter
    def asset_class(self, value: Union[AssetClass, str]):
        self._property_changed('asset_class')
        self.__asset_class = get_enum_value(AssetClass, value)        

    @property
    def transaction_cost_model(self) -> str:
        """Determines which model to use"""
        return self.__transaction_cost_model

    @transaction_cost_model.setter
    def transaction_cost_model(self, value: str):
        self._property_changed('transaction_cost_model')
        self.__transaction_cost_model = value        

    @property
    def trading_cost(self) -> float:
        """bps cost to execute delta"""
        return self.__trading_cost

    @trading_cost.setter
    def trading_cost(self, value: float):
        self._property_changed('trading_cost')
        self.__trading_cost = value        

    @property
    def servicing_cost_long(self) -> float:
        """bps cost to fund long positions"""
        return self.__servicing_cost_long

    @servicing_cost_long.setter
    def servicing_cost_long(self, value: float):
        self._property_changed('servicing_cost_long')
        self.__servicing_cost_long = value        

    @property
    def servicing_cost_short(self) -> float:
        """bps cost to fund short positions"""
        return self.__servicing_cost_short

    @servicing_cost_short.setter
    def servicing_cost_short(self, value: float):
        self._property_changed('servicing_cost_short')
        self.__servicing_cost_short = value        

    @property
    def region(self) -> str:
        """The region of the report"""
        return self.__region

    @region.setter
    def region(self, value: str):
        self._property_changed('region')
        self.__region = value        

    @property
    def risk_model(self) -> str:
        """Marquee unique risk model identifier"""
        return self.__risk_model

    @risk_model.setter
    def risk_model(self, value: str):
        self._property_changed('risk_model')
        self.__risk_model = value        

    @property
    def fx_hedged(self) -> bool:
        """Assume portfolio is FX Hedged"""
        return self.__fx_hedged

    @fx_hedged.setter
    def fx_hedged(self, value: bool):
        self._property_changed('fx_hedged')
        self.__fx_hedged = value        

    @property
    def publish_to_bloomberg(self) -> bool:
        """Publish Basket to Bloomberg"""
        return self.__publish_to_bloomberg

    @publish_to_bloomberg.setter
    def publish_to_bloomberg(self, value: bool):
        self._property_changed('publish_to_bloomberg')
        self.__publish_to_bloomberg = value        

    @property
    def publish_to_reuters(self) -> bool:
        """Publish Basket to Reuters"""
        return self.__publish_to_reuters

    @publish_to_reuters.setter
    def publish_to_reuters(self, value: bool):
        self._property_changed('publish_to_reuters')
        self.__publish_to_reuters = value        

    @property
    def publish_to_factset(self) -> bool:
        """Publish Basket to Factset"""
        return self.__publish_to_factset

    @publish_to_factset.setter
    def publish_to_factset(self, value: bool):
        self._property_changed('publish_to_factset')
        self.__publish_to_factset = value        

    @property
    def include_price_history(self) -> bool:
        """Include full price history"""
        return self.__include_price_history

    @include_price_history.setter
    def include_price_history(self, value: bool):
        self._property_changed('include_price_history')
        self.__include_price_history = value        

    @property
    def index_update(self) -> bool:
        """Update the basket"""
        return self.__index_update

    @index_update.setter
    def index_update(self, value: bool):
        self._property_changed('index_update')
        self.__index_update = value        

    @property
    def index_rebalance(self) -> bool:
        """Rebalance the basket"""
        return self.__index_rebalance

    @index_rebalance.setter
    def index_rebalance(self, value: bool):
        self._property_changed('index_rebalance')
        self.__index_rebalance = value        

    @property
    def basket_action(self) -> Union[BasketAction, str]:
        """Indicates which basket action triggered the report"""
        return self.__basket_action

    @basket_action.setter
    def basket_action(self, value: Union[BasketAction, str]):
        self._property_changed('basket_action')
        self.__basket_action = get_enum_value(BasketAction, value)        

    @property
    def api_domain(self) -> bool:
        """Indicates if report is triggered from ui/api call"""
        return self.__api_domain

    @api_domain.setter
    def api_domain(self, value: bool):
        self._property_changed('api_domain')
        self.__api_domain = value        

    @property
    def initial_price(self) -> float:
        """Initial price for the position set"""
        return self.__initial_price

    @initial_price.setter
    def initial_price(self, value: float):
        self._property_changed('initial_price')
        self.__initial_price = value        

    @property
    def stock_level_exposures(self) -> bool:
        """Publish stock level exposures"""
        return self.__stock_level_exposures

    @stock_level_exposures.setter
    def stock_level_exposures(self, value: bool):
        self._property_changed('stock_level_exposures')
        self.__stock_level_exposures = value        

    @property
    def explode_positions(self) -> bool:
        """Whether to explode positions during risk run"""
        return self.__explode_positions

    @explode_positions.setter
    def explode_positions(self, value: bool):
        self._property_changed('explode_positions')
        self.__explode_positions = value        

    @property
    def scenario_id(self) -> str:
        """Marquee unique scenario identifier"""
        return self.__scenario_id

    @scenario_id.setter
    def scenario_id(self, value: str):
        self._property_changed('scenario_id')
        self.__scenario_id = value        

    @property
    def scenario_ids(self) -> Tuple[str, ...]:
        """Array of scenario identifiers related to the object"""
        return self.__scenario_ids

    @scenario_ids.setter
    def scenario_ids(self, value: Tuple[str, ...]):
        self._property_changed('scenario_ids')
        self.__scenario_ids = value        

    @property
    def scenario_group_id(self) -> str:
        """Marquee unique scenario group identifier"""
        return self.__scenario_group_id

    @scenario_group_id.setter
    def scenario_group_id(self, value: str):
        self._property_changed('scenario_group_id')
        self.__scenario_group_id = value        

    @property
    def scenario_type(self) -> Union[ScenarioType, str]:
        """Type of Scenario"""
        return self.__scenario_type

    @scenario_type.setter
    def scenario_type(self, value: Union[ScenarioType, str]):
        self._property_changed('scenario_type')
        self.__scenario_type = get_enum_value(ScenarioType, value)        

    @property
    def market_model_id(self) -> str:
        """Marquee unique market model identifier"""
        return self.__market_model_id

    @market_model_id.setter
    def market_model_id(self, value: str):
        self._property_changed('market_model_id')
        self.__market_model_id = value        

    @property
    def risk_measures(self) -> Tuple[RiskMeasure, ...]:
        """An array of risk measures to get from the risk calculation."""
        return self.__risk_measures

    @risk_measures.setter
    def risk_measures(self, value: Tuple[RiskMeasure, ...]):
        self._property_changed('risk_measures')
        self.__risk_measures = value        

    @property
    def initial_pricing_date(self) -> datetime.date:
        """ISO 8601-formatted date"""
        return self.__initial_pricing_date

    @initial_pricing_date.setter
    def initial_pricing_date(self, value: datetime.date):
        self._property_changed('initial_pricing_date')
        self.__initial_pricing_date = value        

    @property
    def backcast(self) -> bool:
        """Use backcasted portfolio derived from positions on the end date."""
        return self.__backcast

    @backcast.setter
    def backcast(self, value: bool):
        self._property_changed('backcast')
        self.__backcast = value        

    @property
    def risk_request(self) -> RiskRequest:
        """A request for a risk calculation"""
        return self.__risk_request

    @risk_request.setter
    def risk_request(self, value: RiskRequest):
        self._property_changed('risk_request')
        self.__risk_request = value        

    @property
    def participation_rate(self) -> float:
        """Liquidity analytics participation rate."""
        return self.__participation_rate

    @participation_rate.setter
    def participation_rate(self, value: float):
        self._property_changed('participation_rate')
        self.__participation_rate = value        

    @property
    def approve_rebalance(self) -> bool:
        """An approved basket"""
        return self.__approve_rebalance

    @approve_rebalance.setter
    def approve_rebalance(self, value: bool):
        self._property_changed('approve_rebalance')
        self.__approve_rebalance = value        

    @property
    def use_risk_request_batch_mode(self) -> bool:
        """Switch to enable RiskRequest batching"""
        return self.__use_risk_request_batch_mode

    @use_risk_request_batch_mode.setter
    def use_risk_request_batch_mode(self, value: bool):
        self._property_changed('use_risk_request_batch_mode')
        self.__use_risk_request_batch_mode = value        

    @property
    def limited_access_assets(self) -> Tuple[str, ...]:
        """List of constituents in the basket that GS has limited access to"""
        return self.__limited_access_assets

    @limited_access_assets.setter
    def limited_access_assets(self, value: Tuple[str, ...]):
        self._property_changed('limited_access_assets')
        self.__limited_access_assets = value        

    @property
    def corporate_action_restricted_assets(self) -> Tuple[str, ...]:
        """List of constituents in the basket that will not be adjusted for corporate
           actions in the future"""
        return self.__corporate_action_restricted_assets

    @corporate_action_restricted_assets.setter
    def corporate_action_restricted_assets(self, value: Tuple[str, ...]):
        self._property_changed('corporate_action_restricted_assets')
        self.__corporate_action_restricted_assets = value        

    @property
    def backcast_dates(self) -> Tuple[datetime.date, ...]:
        """List of dates user upload to backcast basket"""
        return self.__backcast_dates

    @backcast_dates.setter
    def backcast_dates(self, value: Tuple[datetime.date, ...]):
        self._property_changed('backcast_dates')
        self.__backcast_dates = value        

    @property
    def base_currency(self) -> Union[Currency, str]:
        """Base currency"""
        return self.__base_currency

    @base_currency.setter
    def base_currency(self, value: Union[Currency, str]):
        self._property_changed('base_currency')
        self.__base_currency = get_enum_value(Currency, value)        

    @property
    def local_currency(self) -> Union[Currency, str]:
        """Local currency"""
        return self.__local_currency

    @local_currency.setter
    def local_currency(self, value: Union[Currency, str]):
        self._property_changed('local_currency')
        self.__local_currency = get_enum_value(Currency, value)        

    @property
    def fund_calendar(self) -> Union[PCOFundCalendar, str]:
        """Holiday Calendar of Fund"""
        return self.__fund_calendar

    @fund_calendar.setter
    def fund_calendar(self, value: Union[PCOFundCalendar, str]):
        self._property_changed('fund_calendar')
        self.__fund_calendar = get_enum_value(PCOFundCalendar, value)        

    @property
    def calculation_currency(self) -> Union[PCOCurrencyType, str]:
        """Calculation currency type"""
        return self.__calculation_currency

    @calculation_currency.setter
    def calculation_currency(self, value: Union[PCOCurrencyType, str]):
        self._property_changed('calculation_currency')
        self.__calculation_currency = get_enum_value(PCOCurrencyType, value)        

    @property
    def hedge_settlement_interval(self) -> Tuple[PCOParameterValues, ...]:
        """Default tenor of hedging for each currency"""
        return self.__hedge_settlement_interval

    @hedge_settlement_interval.setter
    def hedge_settlement_interval(self, value: Tuple[PCOParameterValues, ...]):
        self._property_changed('hedge_settlement_interval')
        self.__hedge_settlement_interval = value        

    @property
    def hedge_settlement_day(self) -> Tuple[PCOParameterValues, ...]:
        """Settlement date of each currency"""
        return self.__hedge_settlement_day

    @hedge_settlement_day.setter
    def hedge_settlement_day(self, value: Tuple[PCOParameterValues, ...]):
        self._property_changed('hedge_settlement_day')
        self.__hedge_settlement_day = value        

    @property
    def roll_horizon(self) -> Tuple[PCOParameterValues, ...]:
        """Number of days to roll before settlement for each currency"""
        return self.__roll_horizon

    @roll_horizon.setter
    def roll_horizon(self, value: Tuple[PCOParameterValues, ...]):
        self._property_changed('roll_horizon')
        self.__roll_horizon = value        

    @property
    def pnl_currency(self) -> Tuple[PCOParameterValues, ...]:
        """One of Local and Base"""
        return self.__pnl_currency

    @pnl_currency.setter
    def pnl_currency(self, value: Tuple[PCOParameterValues, ...]):
        self._property_changed('pnl_currency')
        self.__pnl_currency = value        

    @property
    def nav_publication_period(self) -> Tuple[PCOParameterValues, ...]:
        """Days it takes for a subscription or redemption show up in NAV after it happens"""
        return self.__nav_publication_period

    @nav_publication_period.setter
    def nav_publication_period(self, value: Tuple[PCOParameterValues, ...]):
        self._property_changed('nav_publication_period')
        self.__nav_publication_period = value        

    @property
    def roll_date_zero_threshold(self) -> bool:
        """If true, rebalance this program when rolling"""
        return self.__roll_date_zero_threshold

    @roll_date_zero_threshold.setter
    def roll_date_zero_threshold(self, value: bool):
        self._property_changed('roll_date_zero_threshold')
        self.__roll_date_zero_threshold = value        

    @property
    def unrealised_mark_to_market(self) -> PCOUnrealisedMarkToMarket:
        """History of unrealised mark to market of open trades for each currency"""
        return self.__unrealised_mark_to_market

    @unrealised_mark_to_market.setter
    def unrealised_mark_to_market(self, value: PCOUnrealisedMarkToMarket):
        self._property_changed('unrealised_mark_to_market')
        self.__unrealised_mark_to_market = value        

    @property
    def target_deviation(self) -> Tuple[PCOTargetDeviation, ...]:
        """History of target deviation for each currency"""
        return self.__target_deviation

    @target_deviation.setter
    def target_deviation(self, value: Tuple[PCOTargetDeviation, ...]):
        self._property_changed('target_deviation')
        self.__target_deviation = value        

    @property
    def cash_balances(self) -> Tuple[PCOCashBalance, ...]:
        """Cash flows for each currency"""
        return self.__cash_balances

    @cash_balances.setter
    def cash_balances(self, value: Tuple[PCOCashBalance, ...]):
        self._property_changed('cash_balances')
        self.__cash_balances = value        

    @property
    def exposure(self) -> PCOExposure:
        """Total exposure for portfolio"""
        return self.__exposure

    @exposure.setter
    def exposure(self, value: PCOExposure):
        self._property_changed('exposure')
        self.__exposure = value        

    @property
    def settlements(self) -> Tuple[PCOSettlements, ...]:
        """History of settlements for each currency"""
        return self.__settlements

    @settlements.setter
    def settlements(self, value: Tuple[PCOSettlements, ...]):
        self._property_changed('settlements')
        self.__settlements = value        

    @property
    def show_cash(self) -> bool:
        """If cash table is shown in UI"""
        return self.__show_cash

    @show_cash.setter
    def show_cash(self, value: bool):
        self._property_changed('show_cash')
        self.__show_cash = value        

    @property
    def show_exposure(self) -> bool:
        """If exposure table is shown in UI"""
        return self.__show_exposure

    @show_exposure.setter
    def show_exposure(self, value: bool):
        self._property_changed('show_exposure')
        self.__show_exposure = value        


class ReportScheduleRequest(Base):
        
    """Parameters in order to schedule a report"""

    @camel_case_translate
    def __init__(
        self,
        parameters: ReportParameters = None,
        end_date: datetime.date = None,
        start_date: datetime.date = None,
        priority: Union[ReportJobPriority, str] = None,
        name: str = None
    ):        
        super().__init__()
        self.parameters = parameters
        self.end_date = end_date
        self.start_date = start_date
        self.priority = priority
        self.name = name

    @property
    def parameters(self) -> ReportParameters:
        """Parameters specific to the report type"""
        return self.__parameters

    @parameters.setter
    def parameters(self, value: ReportParameters):
        self._property_changed('parameters')
        self.__parameters = value        

    @property
    def end_date(self) -> datetime.date:
        """ISO 8601-formatted date"""
        return self.__end_date

    @end_date.setter
    def end_date(self, value: datetime.date):
        self._property_changed('end_date')
        self.__end_date = value        

    @property
    def start_date(self) -> datetime.date:
        """ISO 8601-formatted date"""
        return self.__start_date

    @start_date.setter
    def start_date(self, value: datetime.date):
        self._property_changed('start_date')
        self.__start_date = value        

    @property
    def priority(self) -> Union[ReportJobPriority, str]:
        """Report job priority."""
        return self.__priority

    @priority.setter
    def priority(self, value: Union[ReportJobPriority, str]):
        self._property_changed('priority')
        self.__priority = get_enum_value(ReportJobPriority, value)        
