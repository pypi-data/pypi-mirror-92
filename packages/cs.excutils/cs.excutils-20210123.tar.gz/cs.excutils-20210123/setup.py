#!/usr/bin/env python
from setuptools import setup
setup(
  name = 'cs.excutils',
  author = 'Cameron Simpson',
  author_email = 'cs@cskk.id.au',
  version = '20210123',
  url = 'https://bitbucket.org/cameron_simpson/css/commits/all',
  description =
    'Convenience facilities for managing exceptions.',
  long_description =
    ('Convenience facilities for managing exceptions.\n'    
 '\n'    
 '*Latest release 20210123*:\n'    
 '@transmute: refactor to raise chained exceptions in Python 3+.\n'    
 '\n'    
 '## Function `exc_fold(*da, **dkw)`\n'    
 '\n'    
 'Decorator to catch specific exception types and return a defined default '    
 'value.\n'    
 '\n'    
 '## Function `logexc(func)`\n'    
 '\n'    
 'Decorator to log exceptions and reraise.\n'    
 '\n'    
 '## Function `logexc_gen(genfunc)`\n'    
 '\n'    
 'Decorator to log exceptions and reraise for generators.\n'    
 '\n'    
 '## Function `LogExceptions(conceal=False)`\n'    
 '\n'    
 'Wrapper for `NoExceptions` which reports exceptions and optionally\n'    
 'suppresses them.\n'    
 '\n'    
 '## Function `noexc(func)`\n'    
 '\n'    
 'Decorator to wrap a function which should never raise an exception.\n'    
 'Instead, any raised exception is attempted to be logged.\n'    
 '\n'    
 'A significant side effect is of course that if the function raises an\n'    
 'exception it now returns `None`.\n'    
 'My primary use case is actually to wrap logging functions,\n'    
 'which I have had abort otherwise sensible code.\n'    
 '\n'    
 '## Function `noexc_gen(func)`\n'    
 '\n'    
 'Decorator to wrap a generator which should never raise an exception.\n'    
 'Instead, any raised exception is attempted to be logged and iteration ends.\n'    
 '\n'    
 'My primary use case is wrapping generators chained in a pipeline,\n'    
 'as in cs.later.Later.pipeline.\n'    
 '\n'    
 '## Class `NoExceptions`\n'    
 '\n'    
 'A context manager to catch _all_ exceptions and log them.\n'    
 '\n'    
 "Arguably this should be a bare try...except but that's syntacticly\n"    
 'noisy and separates the catch from the top.\n'    
 'For simple function calls `return_exc_info()` is probably better.\n'    
 '\n'    
 '### Method `NoExceptions.__init__(self, handler)`\n'    
 '\n'    
 'Initialise the `NoExceptions` context manager.\n'    
 '\n'    
 'The `handler` is a callable which\n'    
 'expects `(exc_type,exc_value,traceback)`\n'    
 'and returns `True` or `False`\n'    
 'for the `__exit__` method of the manager.\n'    
 'If `handler` is `None`, the `__exit__` method\n'    
 'always returns `True`, suppressing any exception.\n'    
 '\n'    
 '## Function `return_exc_info(func, *args, **kwargs)`\n'    
 '\n'    
 'Run the supplied function and arguments.\n'    
 'Return `(func_return, None)`\n'    
 'in the case of successful operation\n'    
 'and `(None, exc_info)` in the case of an exception.\n'    
 '\n'    
 '`exc_info` is a 3-tuple of `(exc_type, exc_value, exc_traceback)`\n'    
 'as returned by `sys.exc_info()`.\n'    
 'If you need to protect a whole suite and would rather not move it\n'    
 'into its own function, consider the NoExceptions context manager.\n'    
 '\n'    
 '## Function `returns_exc_info(func)`\n'    
 '\n'    
 'Decorator function to wrap functions whose exceptions should be caught,\n'    
 'such as inside event loops or worker threads.\n'    
 '\n'    
 'It causes a function to return `(func_return, None)`\n'    
 'in the case of successful operation\n'    
 'and `(None, exc_info)` in the case of an exception.\n'    
 '\n'    
 '`exc_info` is a 3-tuple of `(exc_type, exc_value, exc_traceback)`\n'    
 'as returned by `sys.exc_info()`.\n'    
 '\n'    
 '## Function `safe_property(func)`\n'    
 '\n'    
 'Substitute for @property which lets AttributeErrors escape as '    
 'RuntimeErrors.\n'    
 '\n'    
 '## Function `transmute(*da, **dkw)`\n'    
 '\n'    
 'Decorator to transmute an inner exception to another exception type.\n'    
 '\n'    
 'The motivating use case is properties in a class with a\n'    
 '`__getattr__` method;\n'    
 'if some inner operation of the property function raises `AttributeError`\n'    
 'then the property is bypassed in favour of `__getattr__`.\n'    
 'Confusion ensues.\n'    
 '\n'    
 'In principle this can be an issue with any exception raised\n'    
 'from "deeper" in the call chain, which can be mistaken for a\n'    
 '"shallow" exception raised by the function itself.\n'    
 '\n'    
 '## Function `unattributable(func)`\n'    
 '\n'    
 'Decorator to transmute `AttributeError` into a `RuntimeError`.\n'    
 '\n'    
 '## Function `unimplemented(func)`\n'    
 '\n'    
 'Decorator for stub methods that must be implemented by a stub class.\n'    
 '\n'    
 '# Release Log\n'    
 '\n'    
 '\n'    
 '\n'    
 '*Release 20210123*:\n'    
 '@transmute: refactor to raise chained exceptions in Python 3+.\n'    
 '\n'    
 '*Release 20190812*:\n'    
 'LogExceptions: drop stack trace noise.\n'    
 '\n'    
 '*Release 20190220*:\n'    
 'New decorator @exc_fold to catch particular exceptions, log an error and '    
 'return a defined value.\n'    
 '\n'    
 '*Release 20190101*:\n'    
 '@logexc: handle missing func.__name__.\n'    
 '\n'    
 '*Release 20170904*:\n'    
 'Minor updates, improved docstring.\n'    
 '\n'    
 '*Release 20160828*:\n'    
 '* @unattributable and @safe_property decorators, used to protect properties '    
 'from inner AttributeErrors.\n'    
 '* Improved exception practices.\n'    
 '\n'    
 '*Release 20150118*:\n'    
 'metadata updates\n'    
 '\n'    
 '*Release 20150110*:\n'    
 'Initial distinfo for pypi release.'),
  classifiers = ['Programming Language :: Python', 'Programming Language :: Python :: 2', 'Programming Language :: Python :: 3', 'Development Status :: 4 - Beta', 'Intended Audience :: Developers', 'Operating System :: OS Independent', 'Topic :: Software Development :: Libraries :: Python Modules', 'License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)'],
  install_requires = ['cs.deco', 'cs.logutils', 'cs.py.func'],
  keywords = ['python2', 'python3'],
  license = 'GNU General Public License v3 or later (GPLv3+)',
  long_description_content_type = 'text/markdown',
  package_dir = {'': 'lib/python'},
  py_modules = ['cs.excutils'],
)
