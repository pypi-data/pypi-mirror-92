Metadata-Version: 2.1
Name: tegridy-tools
Version: 1.0.2
Summary: All tegridy-tools as python modules because there is never enough tegridy :)
Home-page: https://github.com/asigalov61/tegridy-tools
Author: Aleksandr Sigalov
Author-email: asigalov61@hotmail.com
License: Apache 2.0
Description: ## tegridy-tools
        
        ***
        
        ### Description of directories:
        
        #### 1) pretty_midi
        ##### This is a a slightly modified and streamlined version of the original pretty_midi which is compatible with noteseq and other Music AI packages/modules.
        
        #### 2) noteseq
        ##### This is a modified and streamlined version of the original noteseq package that is stand-alone and independent of anything, including Tensorflow and the need to install any unique/fancy prerequisites.
        
        #### 3) python-midi
        ##### This is the python-midi by @vishnubob for Python 3. Needs manual install but otherwise it works fine on the latest Python 3 versions.
        
        #### 4) mido
        ##### Mirror copy of the latest release (as of 1-19-2021) and the source files.
        
        ***
        
        ### Description of modules:
        
        #### 1) MIDI module version 6.7 by Peter Billam
        #### This is a dependency/MIDI processing core module for TMIDI module (which is optional) as TMIDI module includes a copy of this module.
        
        #### 2) TMIDI Module
        ##### This module is all about MIDI and Artifical Intellgence/Algorithmic Intelligence. All functions there specifically tailored to help to create/design Music AI systems and/or Algo Music systems.
        
        ***
        
        ##### Fun and exciting things you might want to try:
        
        ##### 0) Stay on top of things with Reformer and now - Performer. Thanks to @lucidrains and TMIDI you can now try the latest and the greatest in SOTA transformers.
        
        ##### https://github.com/lucidrains/performer-pytorch
        ##### https://github.com/asigalov61/SuperPiano/blob/master/Super_Piano_6_Performer_GPU.ipynb
        
        ##### https://github.com/lucidrains/reformer-pytorch
        ##### https://github.com/asigalov61/SuperPiano/blob/master/SuperPiano5_(Reformer_TPU).ipynb
        
        ***
        
        ##### https://github.com/huggingface/transformers/tree/master/notebooks#community-notebooks
        
        ##### 1) Try TMIDI with the Summarization implementations. Can music be summarized? Can this be used to make bridges between musical pieces?
        
        ##### 2) Try TMIDI with QA implementations. Does music have QA elements? 
        
        ##### 3) Try TMIDI with Translator implementations. How music can be translated and permutated?!?
        
        ##### 4) Try TMIDI with Sentiment Analysis...etc.
        
        ##### Enjoy and have fun :)
        
        ****
        
        ##### Project Los Angeles
        
        ##### Tegridy Code 2021
        
Keywords: music nlp raspberry-pi machine-learning deep-learning midi numpy               keras pytorch music-generation python-modules plagiarism-detection               midi-toolkit midi-processing artifical-intelligence tensorflow2               tegridy pyknon midi-processor midi-search
Platform: UNKNOWN
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Science/Research
Classifier: License :: OSI Approved :: Apache Software License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3.4
Classifier: Programming Language :: Python :: 3.5
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Description-Content-Type: text/markdown
