# coding: utf-8

"""
    DLRN API

    DLRN API client

    OpenAPI spec version: 1.0.0

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems


class PromotionQuery(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, commit_hash=None, distro_hash=None, extended_hash=None,
                 aggregate_hash=None, promote_name=None, offset=None,
                 limit=None, component=None):
        """PromotionQuery - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'commit_hash': 'str',
            'distro_hash': 'str',
            'extended_hash': 'str',
            'aggregate_hash': 'str',
            'promote_name': 'str',
            'offset': 'int',
            'limit': 'int',
            'component': 'str',
        }

        self.attribute_map = {
            'commit_hash': 'commit_hash',
            'distro_hash': 'distro_hash',
            'extended_hash': 'extended_hash',
            'aggregate_hash': 'aggregate_hash',
            'promote_name': 'promote_name',
            'offset': 'offset',
            'limit': 'limit',
            'component': 'component',
        }

        self._commit_hash = commit_hash
        self._distro_hash = distro_hash
        self._extended_hash = extended_hash
        self._aggregate_hash = aggregate_hash
        self._promote_name = promote_name
        self._offset = offset
        self._limit = limit
        self._component = component

    @property
    def commit_hash(self):
        """Gets the commit_hash of this Promotion Query.

        commit_hash of promoted repo

        :return: The commit_hash of this Promotion  Query.
        :rtype: str
        """
        return self._commit_hash

    @commit_hash.setter
    def commit_hash(self, commit_hash):
        """Sets the commit_hash of this Promotion Query.

        commit_hash of promoted repo

        :param commit_hash: The commit_hash of this Promotion Query.
        :type: str
        """

        self._commit_hash = commit_hash

    @property
    def distro_hash(self):
        """Gets the distro_hash of this Promotion Query.

        distro_hash of promoted repo

        :return: The distro_hash of this Promotion Query.
        :rtype: str
        """
        return self._distro_hash

    @distro_hash.setter
    def distro_hash(self, distro_hash):
        """Sets the distro_hash of this Promotion Query.

        distro_hash of promoted repo

        :param distro_hash: The distro_hash of this Promotion Query.
        :type: str
        """

        self._distro_hash = distro_hash

    @property
    def extended_hash(self):
        """Gets the extended_hash of this Promotion Query.

        distro_hash of promoted repo

        :return: The extended_hash of this Promotion Query.
        :rtype: str
        """
        return self._extended_hash

    @extended_hash.setter
    def extended_hash(self, extended_hash):
        """Sets the extended_hash of this Promotion Query.

        extended_hash of promoted repo

        :param extended_hash: The extended_hash of this Promotion Query.
        :type: str
        """

        self._extended_hash = extended_hash

    @property
    def aggregate_hash(self):
        """Gets the aggregate_hash of this Promotion Query.

        aggregate_hash of promoted repo

        :return: The aggregate_hash of this Promotion Query.
        :rtype: str
        """
        return self._aggregate_hash

    @aggregate_hash.setter
    def aggregate_hash(self, aggregate_hash):
        """Sets the aggregate_hash of this Promotion Query.

        aggregate_hash of promoted repo

        :param aggregate_hash: The aggregate_hash of this Promotion Query.
        :type: str
        """

        self._aggregate_hash = aggregate_hash

    @property
    def promote_name(self):
        """Gets the promote_name of this Promotion Query.

        name used for the promotion

        :return: The promote_name of this Promotion Query.
        :rtype: str
        """
        return self._promote_name

    @promote_name.setter
    def promote_name(self, promote_name):
        """Sets the promote_name of this Promotion Query.

        name used for the promotion

        :param promote_name: The promote_name of this Promotion Query.
        :type: str
        """

        self._promote_name = promote_name

    @property
    def offset(self):
        """Gets the offset of this Promotion Query.

        Skip the first X promotions

        :return: The offset used.
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this Promotion Query.

        Skip the first X promotions

        :param offset: The offset used
        :type: int
        """

        self._offset = offset

    @property
    def limit(self):
        """Gets the limit of this Promotion Query.

        Limit to the first X promotions

        :return: The limit used.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this Promotion Query.

        Limit to the first X promotions

        :param limit: The limit used
        :type: int
        """

        self._limit = limit

    @property
    def component(self):
        """Gets the component of this Promotion Query.

        Limit to the query to promotions for this component

        :return: The component used.
        :rtype: string
        """
        return self._component

    @component.setter
    def component(self, component):
        """Sets the component of this Promotion Query.

        Limit to the query to promotions for this component

        :param component: The component used
        :type: string
        """

        self._component = component

    def to_dict(self):
        """Returns the model properties as a dict """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model """
        return pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint` """
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal """
        if not isinstance(other, PromotionQuery):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal """
        return not self == other
