# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_fmippim')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_fmippim')
    _fmippim = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_fmippim', [dirname(__file__)])
        except ImportError:
            import _fmippim
            return _fmippim
        try:
            _mod = imp.load_module('_fmippim', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _fmippim = swig_import_helper()
    del swig_import_helper
else:
    import _fmippim
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _fmippim.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _fmippim.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _fmippim.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _fmippim.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _fmippim.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _fmippim.SwigPyIterator_equal(self, x)

    def copy(self):
        return _fmippim.SwigPyIterator_copy(self)

    def next(self):
        return _fmippim.SwigPyIterator_next(self)

    def __next__(self):
        return _fmippim.SwigPyIterator___next__(self)

    def previous(self):
        return _fmippim.SwigPyIterator_previous(self)

    def advance(self, n):
        return _fmippim.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _fmippim.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _fmippim.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _fmippim.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _fmippim.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _fmippim.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _fmippim.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _fmippim.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def new_double_pointer():
    return _fmippim.new_double_pointer()
new_double_pointer = _fmippim.new_double_pointer

def copy_double_pointer(value):
    return _fmippim.copy_double_pointer(value)
copy_double_pointer = _fmippim.copy_double_pointer

def delete_double_pointer(obj):
    return _fmippim.delete_double_pointer(obj)
delete_double_pointer = _fmippim.delete_double_pointer

def double_pointer_assign(obj, value):
    return _fmippim.double_pointer_assign(obj, value)
double_pointer_assign = _fmippim.double_pointer_assign

def double_pointer_value(obj):
    return _fmippim.double_pointer_value(obj)
double_pointer_value = _fmippim.double_pointer_value

def new_int_pointer():
    return _fmippim.new_int_pointer()
new_int_pointer = _fmippim.new_int_pointer

def copy_int_pointer(value):
    return _fmippim.copy_int_pointer(value)
copy_int_pointer = _fmippim.copy_int_pointer

def delete_int_pointer(obj):
    return _fmippim.delete_int_pointer(obj)
delete_int_pointer = _fmippim.delete_int_pointer

def int_pointer_assign(obj, value):
    return _fmippim.int_pointer_assign(obj, value)
int_pointer_assign = _fmippim.int_pointer_assign

def int_pointer_value(obj):
    return _fmippim.int_pointer_value(obj)
int_pointer_value = _fmippim.int_pointer_value

def new_string_pointer():
    return _fmippim.new_string_pointer()
new_string_pointer = _fmippim.new_string_pointer

def copy_string_pointer(value):
    return _fmippim.copy_string_pointer(value)
copy_string_pointer = _fmippim.copy_string_pointer

def delete_string_pointer(obj):
    return _fmippim.delete_string_pointer(obj)
delete_string_pointer = _fmippim.delete_string_pointer

def string_pointer_assign(obj, value):
    return _fmippim.string_pointer_assign(obj, value)
string_pointer_assign = _fmippim.string_pointer_assign

def string_pointer_value(obj):
    return _fmippim.string_pointer_value(obj)
string_pointer_value = _fmippim.string_pointer_value

def new_char_pointer():
    return _fmippim.new_char_pointer()
new_char_pointer = _fmippim.new_char_pointer

def copy_char_pointer(value):
    return _fmippim.copy_char_pointer(value)
copy_char_pointer = _fmippim.copy_char_pointer

def delete_char_pointer(obj):
    return _fmippim.delete_char_pointer(obj)
delete_char_pointer = _fmippim.delete_char_pointer

def char_pointer_assign(obj, value):
    return _fmippim.char_pointer_assign(obj, value)
char_pointer_assign = _fmippim.char_pointer_assign

def char_pointer_value(obj):
    return _fmippim.char_pointer_value(obj)
char_pointer_value = _fmippim.char_pointer_value

def new_double_array(nelements):
    return _fmippim.new_double_array(nelements)
new_double_array = _fmippim.new_double_array

def delete_double_array(ary):
    return _fmippim.delete_double_array(ary)
delete_double_array = _fmippim.delete_double_array

def double_array_getitem(ary, index):
    return _fmippim.double_array_getitem(ary, index)
double_array_getitem = _fmippim.double_array_getitem

def double_array_setitem(ary, index, value):
    return _fmippim.double_array_setitem(ary, index, value)
double_array_setitem = _fmippim.double_array_setitem

def new_int_array(nelements):
    return _fmippim.new_int_array(nelements)
new_int_array = _fmippim.new_int_array

def delete_int_array(ary):
    return _fmippim.delete_int_array(ary)
delete_int_array = _fmippim.delete_int_array

def int_array_getitem(ary, index):
    return _fmippim.int_array_getitem(ary, index)
int_array_getitem = _fmippim.int_array_getitem

def int_array_setitem(ary, index, value):
    return _fmippim.int_array_setitem(ary, index, value)
int_array_setitem = _fmippim.int_array_setitem

def new_string_array(nelements):
    return _fmippim.new_string_array(nelements)
new_string_array = _fmippim.new_string_array

def delete_string_array(ary):
    return _fmippim.delete_string_array(ary)
delete_string_array = _fmippim.delete_string_array

def string_array_getitem(ary, index):
    return _fmippim.string_array_getitem(ary, index)
string_array_getitem = _fmippim.string_array_getitem

def string_array_setitem(ary, index, value):
    return _fmippim.string_array_setitem(ary, index, value)
string_array_setitem = _fmippim.string_array_setitem

def new_char_array(nelements):
    return _fmippim.new_char_array(nelements)
new_char_array = _fmippim.new_char_array

def delete_char_array(ary):
    return _fmippim.delete_char_array(ary)
delete_char_array = _fmippim.delete_char_array

def char_array_getitem(ary, index):
    return _fmippim.char_array_getitem(ary, index)
char_array_getitem = _fmippim.char_array_getitem

def char_array_setitem(ary, index, value):
    return _fmippim.char_array_setitem(ary, index, value)
char_array_setitem = _fmippim.char_array_setitem
class StringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _fmippim.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _fmippim.StringVector___nonzero__(self)

    def __bool__(self):
        return _fmippim.StringVector___bool__(self)

    def __len__(self):
        return _fmippim.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _fmippim.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _fmippim.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _fmippim.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _fmippim.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _fmippim.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _fmippim.StringVector___setitem__(self, *args)

    def pop(self):
        return _fmippim.StringVector_pop(self)

    def append(self, x):
        return _fmippim.StringVector_append(self, x)

    def empty(self):
        return _fmippim.StringVector_empty(self)

    def size(self):
        return _fmippim.StringVector_size(self)

    def swap(self, v):
        return _fmippim.StringVector_swap(self, v)

    def begin(self):
        return _fmippim.StringVector_begin(self)

    def end(self):
        return _fmippim.StringVector_end(self)

    def rbegin(self):
        return _fmippim.StringVector_rbegin(self)

    def rend(self):
        return _fmippim.StringVector_rend(self)

    def clear(self):
        return _fmippim.StringVector_clear(self)

    def get_allocator(self):
        return _fmippim.StringVector_get_allocator(self)

    def pop_back(self):
        return _fmippim.StringVector_pop_back(self)

    def erase(self, *args):
        return _fmippim.StringVector_erase(self, *args)

    def __init__(self, *args):
        this = _fmippim.new_StringVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _fmippim.StringVector_push_back(self, x)

    def front(self):
        return _fmippim.StringVector_front(self)

    def back(self):
        return _fmippim.StringVector_back(self)

    def assign(self, n, x):
        return _fmippim.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _fmippim.StringVector_resize(self, *args)

    def insert(self, *args):
        return _fmippim.StringVector_insert(self, *args)

    def reserve(self, n):
        return _fmippim.StringVector_reserve(self, n)

    def capacity(self):
        return _fmippim.StringVector_capacity(self)
    __swig_destroy__ = _fmippim.delete_StringVector
    __del__ = lambda self: None
StringVector_swigregister = _fmippim.StringVector_swigregister
StringVector_swigregister(StringVector)

class UnsignedIntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnsignedIntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UnsignedIntVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _fmippim.UnsignedIntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _fmippim.UnsignedIntVector___nonzero__(self)

    def __bool__(self):
        return _fmippim.UnsignedIntVector___bool__(self)

    def __len__(self):
        return _fmippim.UnsignedIntVector___len__(self)

    def __getslice__(self, i, j):
        return _fmippim.UnsignedIntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _fmippim.UnsignedIntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _fmippim.UnsignedIntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _fmippim.UnsignedIntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _fmippim.UnsignedIntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _fmippim.UnsignedIntVector___setitem__(self, *args)

    def pop(self):
        return _fmippim.UnsignedIntVector_pop(self)

    def append(self, x):
        return _fmippim.UnsignedIntVector_append(self, x)

    def empty(self):
        return _fmippim.UnsignedIntVector_empty(self)

    def size(self):
        return _fmippim.UnsignedIntVector_size(self)

    def swap(self, v):
        return _fmippim.UnsignedIntVector_swap(self, v)

    def begin(self):
        return _fmippim.UnsignedIntVector_begin(self)

    def end(self):
        return _fmippim.UnsignedIntVector_end(self)

    def rbegin(self):
        return _fmippim.UnsignedIntVector_rbegin(self)

    def rend(self):
        return _fmippim.UnsignedIntVector_rend(self)

    def clear(self):
        return _fmippim.UnsignedIntVector_clear(self)

    def get_allocator(self):
        return _fmippim.UnsignedIntVector_get_allocator(self)

    def pop_back(self):
        return _fmippim.UnsignedIntVector_pop_back(self)

    def erase(self, *args):
        return _fmippim.UnsignedIntVector_erase(self, *args)

    def __init__(self, *args):
        this = _fmippim.new_UnsignedIntVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _fmippim.UnsignedIntVector_push_back(self, x)

    def front(self):
        return _fmippim.UnsignedIntVector_front(self)

    def back(self):
        return _fmippim.UnsignedIntVector_back(self)

    def assign(self, n, x):
        return _fmippim.UnsignedIntVector_assign(self, n, x)

    def resize(self, *args):
        return _fmippim.UnsignedIntVector_resize(self, *args)

    def insert(self, *args):
        return _fmippim.UnsignedIntVector_insert(self, *args)

    def reserve(self, n):
        return _fmippim.UnsignedIntVector_reserve(self, n)

    def capacity(self):
        return _fmippim.UnsignedIntVector_capacity(self)
    __swig_destroy__ = _fmippim.delete_UnsignedIntVector
    __del__ = lambda self: None
UnsignedIntVector_swigregister = _fmippim.UnsignedIntVector_swigregister
UnsignedIntVector_swigregister(UnsignedIntVector)

fmiTypeReal = _fmippim.fmiTypeReal
fmiTypeInteger = _fmippim.fmiTypeInteger
fmiTypeBoolean = _fmippim.fmiTypeBoolean
fmiTypeString = _fmippim.fmiTypeString
fmiTypeUnknown = _fmippim.fmiTypeUnknown
fmiModelTypesPlatform = _fmippim.fmiModelTypesPlatform
fmiPlatform = _fmippim.fmiPlatform
class fmiEventInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fmiEventInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fmiEventInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["iterationConverged"] = _fmippim.fmiEventInfo_iterationConverged_set
    __swig_getmethods__["iterationConverged"] = _fmippim.fmiEventInfo_iterationConverged_get
    if _newclass:
        iterationConverged = _swig_property(_fmippim.fmiEventInfo_iterationConverged_get, _fmippim.fmiEventInfo_iterationConverged_set)
    __swig_setmethods__["stateValueReferencesChanged"] = _fmippim.fmiEventInfo_stateValueReferencesChanged_set
    __swig_getmethods__["stateValueReferencesChanged"] = _fmippim.fmiEventInfo_stateValueReferencesChanged_get
    if _newclass:
        stateValueReferencesChanged = _swig_property(_fmippim.fmiEventInfo_stateValueReferencesChanged_get, _fmippim.fmiEventInfo_stateValueReferencesChanged_set)
    __swig_setmethods__["stateValuesChanged"] = _fmippim.fmiEventInfo_stateValuesChanged_set
    __swig_getmethods__["stateValuesChanged"] = _fmippim.fmiEventInfo_stateValuesChanged_get
    if _newclass:
        stateValuesChanged = _swig_property(_fmippim.fmiEventInfo_stateValuesChanged_get, _fmippim.fmiEventInfo_stateValuesChanged_set)
    __swig_setmethods__["terminateSimulation"] = _fmippim.fmiEventInfo_terminateSimulation_set
    __swig_getmethods__["terminateSimulation"] = _fmippim.fmiEventInfo_terminateSimulation_get
    if _newclass:
        terminateSimulation = _swig_property(_fmippim.fmiEventInfo_terminateSimulation_get, _fmippim.fmiEventInfo_terminateSimulation_set)
    __swig_setmethods__["upcomingTimeEvent"] = _fmippim.fmiEventInfo_upcomingTimeEvent_set
    __swig_getmethods__["upcomingTimeEvent"] = _fmippim.fmiEventInfo_upcomingTimeEvent_get
    if _newclass:
        upcomingTimeEvent = _swig_property(_fmippim.fmiEventInfo_upcomingTimeEvent_get, _fmippim.fmiEventInfo_upcomingTimeEvent_set)
    __swig_setmethods__["nextEventTime"] = _fmippim.fmiEventInfo_nextEventTime_set
    __swig_getmethods__["nextEventTime"] = _fmippim.fmiEventInfo_nextEventTime_get
    if _newclass:
        nextEventTime = _swig_property(_fmippim.fmiEventInfo_nextEventTime_get, _fmippim.fmiEventInfo_nextEventTime_set)

    def __init__(self):
        this = _fmippim.new_fmiEventInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fmippim.delete_fmiEventInfo
    __del__ = lambda self: None
fmiEventInfo_swigregister = _fmippim.fmiEventInfo_swigregister
fmiEventInfo_swigregister(fmiEventInfo)

fmiOK = _fmippim.fmiOK
fmiWarning = _fmippim.fmiWarning
fmiDiscard = _fmippim.fmiDiscard
fmiError = _fmippim.fmiError
fmiFatal = _fmippim.fmiFatal
fmiPending = _fmippim.fmiPending
fmiDoStepStatus = _fmippim.fmiDoStepStatus
fmiPendingStatus = _fmippim.fmiPendingStatus
fmiLastSuccessfulTime = _fmippim.fmiLastSuccessfulTime
fmi2TypesPlatform = _fmippim.fmi2TypesPlatform
class fmi2EventInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fmi2EventInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fmi2EventInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["newDiscreteStatesNeeded"] = _fmippim.fmi2EventInfo_newDiscreteStatesNeeded_set
    __swig_getmethods__["newDiscreteStatesNeeded"] = _fmippim.fmi2EventInfo_newDiscreteStatesNeeded_get
    if _newclass:
        newDiscreteStatesNeeded = _swig_property(_fmippim.fmi2EventInfo_newDiscreteStatesNeeded_get, _fmippim.fmi2EventInfo_newDiscreteStatesNeeded_set)
    __swig_setmethods__["terminateSimulation"] = _fmippim.fmi2EventInfo_terminateSimulation_set
    __swig_getmethods__["terminateSimulation"] = _fmippim.fmi2EventInfo_terminateSimulation_get
    if _newclass:
        terminateSimulation = _swig_property(_fmippim.fmi2EventInfo_terminateSimulation_get, _fmippim.fmi2EventInfo_terminateSimulation_set)
    __swig_setmethods__["nominalsOfContinuousStatesChanged"] = _fmippim.fmi2EventInfo_nominalsOfContinuousStatesChanged_set
    __swig_getmethods__["nominalsOfContinuousStatesChanged"] = _fmippim.fmi2EventInfo_nominalsOfContinuousStatesChanged_get
    if _newclass:
        nominalsOfContinuousStatesChanged = _swig_property(_fmippim.fmi2EventInfo_nominalsOfContinuousStatesChanged_get, _fmippim.fmi2EventInfo_nominalsOfContinuousStatesChanged_set)
    __swig_setmethods__["valuesOfContinuousStatesChanged"] = _fmippim.fmi2EventInfo_valuesOfContinuousStatesChanged_set
    __swig_getmethods__["valuesOfContinuousStatesChanged"] = _fmippim.fmi2EventInfo_valuesOfContinuousStatesChanged_get
    if _newclass:
        valuesOfContinuousStatesChanged = _swig_property(_fmippim.fmi2EventInfo_valuesOfContinuousStatesChanged_get, _fmippim.fmi2EventInfo_valuesOfContinuousStatesChanged_set)
    __swig_setmethods__["nextEventTimeDefined"] = _fmippim.fmi2EventInfo_nextEventTimeDefined_set
    __swig_getmethods__["nextEventTimeDefined"] = _fmippim.fmi2EventInfo_nextEventTimeDefined_get
    if _newclass:
        nextEventTimeDefined = _swig_property(_fmippim.fmi2EventInfo_nextEventTimeDefined_get, _fmippim.fmi2EventInfo_nextEventTimeDefined_set)
    __swig_setmethods__["nextEventTime"] = _fmippim.fmi2EventInfo_nextEventTime_set
    __swig_getmethods__["nextEventTime"] = _fmippim.fmi2EventInfo_nextEventTime_get
    if _newclass:
        nextEventTime = _swig_property(_fmippim.fmi2EventInfo_nextEventTime_get, _fmippim.fmi2EventInfo_nextEventTime_set)

    def __init__(self):
        this = _fmippim.new_fmi2EventInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fmippim.delete_fmi2EventInfo
    __del__ = lambda self: None
fmi2EventInfo_swigregister = _fmippim.fmi2EventInfo_swigregister
fmi2EventInfo_swigregister(fmi2EventInfo)

fmi2OK = _fmippim.fmi2OK
fmi2Warning = _fmippim.fmi2Warning
fmi2Discard = _fmippim.fmi2Discard
fmi2Error = _fmippim.fmi2Error
fmi2Fatal = _fmippim.fmi2Fatal
fmi2Pending = _fmippim.fmi2Pending
fmi2ModelExchange = _fmippim.fmi2ModelExchange
fmi2CoSimulation = _fmippim.fmi2CoSimulation
fmi2DoStepStatus = _fmippim.fmi2DoStepStatus
fmi2PendingStatus = _fmippim.fmi2PendingStatus
fmi2LastSuccessfulTime = _fmippim.fmi2LastSuccessfulTime
fmi2Terminated = _fmippim.fmi2Terminated
class FMUModelExchangeV1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FMUModelExchangeV1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FMUModelExchangeV1, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fmippim.new_FMUModelExchangeV1(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fmippim.delete_FMUModelExchangeV1
    __del__ = lambda self: None

    def instantiate(self, instanceName):
        return _fmippim.FMUModelExchangeV1_instantiate(self, instanceName)

    def initialize(self, toleranceDefined=False, tolerance=1e-5):
        return _fmippim.FMUModelExchangeV1_initialize(self, toleranceDefined, tolerance)

    def getContinuousStates(self, val):
        return _fmippim.FMUModelExchangeV1_getContinuousStates(self, val)

    def setContinuousStates(self, val):
        return _fmippim.FMUModelExchangeV1_setContinuousStates(self, val)

    def getDerivatives(self, val):
        return _fmippim.FMUModelExchangeV1_getDerivatives(self, val)

    def getEventIndicators(self, eventsind):
        return _fmippim.FMUModelExchangeV1_getEventIndicators(self, eventsind)

    def integrateN(self, tend, nsteps):
        return _fmippim.FMUModelExchangeV1_integrateN(self, tend, nsteps)

    def integrate(self, tend, deltaT=1e-5):
        return _fmippim.FMUModelExchangeV1_integrate(self, tend, deltaT)

    def stepOverEvent(self):
        return _fmippim.FMUModelExchangeV1_stepOverEvent(self)

    def completedIntegratorStep(self):
        return _fmippim.FMUModelExchangeV1_completedIntegratorStep(self)

    def getEventFlag(self):
        return _fmippim.FMUModelExchangeV1_getEventFlag(self)

    def setEventFlag(self, flag):
        return _fmippim.FMUModelExchangeV1_setEventFlag(self, flag)

    def resetEventFlags(self):
        return _fmippim.FMUModelExchangeV1_resetEventFlags(self)

    def getIntEvent(self):
        return _fmippim.FMUModelExchangeV1_getIntEvent(self)

    def getTimeEvent(self):
        return _fmippim.FMUModelExchangeV1_getTimeEvent(self)

    def raiseEvent(self):
        return _fmippim.FMUModelExchangeV1_raiseEvent(self)

    def checkEvents(self):
        return _fmippim.FMUModelExchangeV1_checkEvents(self)

    def checkStateEvent(self):
        return _fmippim.FMUModelExchangeV1_checkStateEvent(self)

    def checkTimeEvent(self):
        return _fmippim.FMUModelExchangeV1_checkTimeEvent(self)

    def checkStepEvent(self):
        return _fmippim.FMUModelExchangeV1_checkStepEvent(self)

    def handleEvents(self):
        return _fmippim.FMUModelExchangeV1_handleEvents(self)

    def setTime(self, time):
        return _fmippim.FMUModelExchangeV1_setTime(self, time)

    def rewindTime(self, deltaRewindTime):
        return _fmippim.FMUModelExchangeV1_rewindTime(self, deltaRewindTime)

    def getTime(self):
        return _fmippim.FMUModelExchangeV1_getTime(self)

    def getType(self, variableName):
        return _fmippim.FMUModelExchangeV1_getType(self, variableName)

    def getValueRef(self, name):
        return _fmippim.FMUModelExchangeV1_getValueRef(self, name)

    def getLastStatus(self):
        return _fmippim.FMUModelExchangeV1_getLastStatus(self)

    def getValue(self, *args):
        return _fmippim.FMUModelExchangeV1_getValue(self, *args)

    def getRealValue(self, name):
        return _fmippim.FMUModelExchangeV1_getRealValue(self, name)

    def getIntegerValue(self, name):
        return _fmippim.FMUModelExchangeV1_getIntegerValue(self, name)

    def getBooleanValue(self, name):
        return _fmippim.FMUModelExchangeV1_getBooleanValue(self, name)

    def getStringValue(self, name):
        return _fmippim.FMUModelExchangeV1_getStringValue(self, name)

    def setValue(self, *args):
        return _fmippim.FMUModelExchangeV1_setValue(self, *args)

    def setRealValue(self, name, val):
        return _fmippim.FMUModelExchangeV1_setRealValue(self, name, val)

    def setIntegerValue(self, name, val):
        return _fmippim.FMUModelExchangeV1_setIntegerValue(self, name, val)

    def setBooleanValue(self, name, val):
        return _fmippim.FMUModelExchangeV1_setBooleanValue(self, name, val)

    def setStringValue(self, name, val):
        return _fmippim.FMUModelExchangeV1_setStringValue(self, name, val)

    def nStates(self):
        return _fmippim.FMUModelExchangeV1_nStates(self)

    def nEventInds(self):
        return _fmippim.FMUModelExchangeV1_nEventInds(self)

    def nValueRefs(self):
        return _fmippim.FMUModelExchangeV1_nValueRefs(self)

    def sendDebugMessage(self, msg):
        return _fmippim.FMUModelExchangeV1_sendDebugMessage(self, msg)

    def logger(self, *args):
        return _fmippim.FMUModelExchangeV1_logger(self, *args)

    def getEventSearchPrecision(self):
        return _fmippim.FMUModelExchangeV1_getEventSearchPrecision(self)

    def setCallbacks(self, logger, allocateMemory, freeMemory):
        return _fmippim.FMUModelExchangeV1_setCallbacks(self, logger, allocateMemory, freeMemory)
FMUModelExchangeV1_swigregister = _fmippim.FMUModelExchangeV1_swigregister
FMUModelExchangeV1_swigregister(FMUModelExchangeV1)

class FMUModelExchangeV2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FMUModelExchangeV2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FMUModelExchangeV2, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fmippim.new_FMUModelExchangeV2(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fmippim.delete_FMUModelExchangeV2
    __del__ = lambda self: None

    def instantiate(self, instanceName):
        return _fmippim.FMUModelExchangeV2_instantiate(self, instanceName)

    def initialize(self, toleranceDefined=False, tolerance=1e-5):
        return _fmippim.FMUModelExchangeV2_initialize(self, toleranceDefined, tolerance)

    def getContinuousStates(self, val):
        return _fmippim.FMUModelExchangeV2_getContinuousStates(self, val)

    def setContinuousStates(self, val):
        return _fmippim.FMUModelExchangeV2_setContinuousStates(self, val)

    def getDerivatives(self, val):
        return _fmippim.FMUModelExchangeV2_getDerivatives(self, val)

    def getDerivativesRefs(self):
        return _fmippim.FMUModelExchangeV2_getDerivativesRefs(self)

    def getDerivativesNames(self):
        return _fmippim.FMUModelExchangeV2_getDerivativesNames(self)

    def getJac(self, J):
        return _fmippim.FMUModelExchangeV2_getJac(self, J)

    def getEventIndicators(self, eventsind):
        return _fmippim.FMUModelExchangeV2_getEventIndicators(self, eventsind)

    def integrateN(self, tend, nsteps):
        return _fmippim.FMUModelExchangeV2_integrateN(self, tend, nsteps)

    def integrate(self, tend, deltaT=1e-5):
        return _fmippim.FMUModelExchangeV2_integrate(self, tend, deltaT)

    def handleEvents(self):
        return _fmippim.FMUModelExchangeV2_handleEvents(self)

    def completedIntegratorStep(self):
        return _fmippim.FMUModelExchangeV2_completedIntegratorStep(self)

    def getEventFlag(self):
        return _fmippim.FMUModelExchangeV2_getEventFlag(self)

    def setEventFlag(self, flag):
        return _fmippim.FMUModelExchangeV2_setEventFlag(self, flag)

    def resetEventFlags(self):
        return _fmippim.FMUModelExchangeV2_resetEventFlags(self)

    def getIntEvent(self):
        return _fmippim.FMUModelExchangeV2_getIntEvent(self)

    def getTimeEvent(self):
        return _fmippim.FMUModelExchangeV2_getTimeEvent(self)

    def raiseEvent(self):
        return _fmippim.FMUModelExchangeV2_raiseEvent(self)

    def checkEvents(self):
        return _fmippim.FMUModelExchangeV2_checkEvents(self)

    def checkStateEvent(self):
        return _fmippim.FMUModelExchangeV2_checkStateEvent(self)

    def checkTimeEvent(self):
        return _fmippim.FMUModelExchangeV2_checkTimeEvent(self)

    def checkStepEvent(self):
        return _fmippim.FMUModelExchangeV2_checkStepEvent(self)

    def setTime(self, time):
        return _fmippim.FMUModelExchangeV2_setTime(self, time)

    def rewindTime(self, deltaRewindTime):
        return _fmippim.FMUModelExchangeV2_rewindTime(self, deltaRewindTime)

    def getTime(self):
        return _fmippim.FMUModelExchangeV2_getTime(self)

    def getType(self, variableName):
        return _fmippim.FMUModelExchangeV2_getType(self, variableName)

    def getValueRef(self, name):
        return _fmippim.FMUModelExchangeV2_getValueRef(self, name)

    def getLastStatus(self):
        return _fmippim.FMUModelExchangeV2_getLastStatus(self)

    def getValue(self, *args):
        return _fmippim.FMUModelExchangeV2_getValue(self, *args)

    def getRealValue(self, name):
        return _fmippim.FMUModelExchangeV2_getRealValue(self, name)

    def getIntegerValue(self, name):
        return _fmippim.FMUModelExchangeV2_getIntegerValue(self, name)

    def getBooleanValue(self, name):
        return _fmippim.FMUModelExchangeV2_getBooleanValue(self, name)

    def getStringValue(self, name):
        return _fmippim.FMUModelExchangeV2_getStringValue(self, name)

    def setValue(self, *args):
        return _fmippim.FMUModelExchangeV2_setValue(self, *args)

    def setRealValue(self, name, val):
        return _fmippim.FMUModelExchangeV2_setRealValue(self, name, val)

    def setIntegerValue(self, name, val):
        return _fmippim.FMUModelExchangeV2_setIntegerValue(self, name, val)

    def setBooleanValue(self, name, val):
        return _fmippim.FMUModelExchangeV2_setBooleanValue(self, name, val)

    def setStringValue(self, name, val):
        return _fmippim.FMUModelExchangeV2_setStringValue(self, name, val)

    def nStates(self):
        return _fmippim.FMUModelExchangeV2_nStates(self)

    def getStatesRefs(self):
        return _fmippim.FMUModelExchangeV2_getStatesRefs(self)

    def getStatesNames(self):
        return _fmippim.FMUModelExchangeV2_getStatesNames(self)

    def nEventInds(self):
        return _fmippim.FMUModelExchangeV2_nEventInds(self)

    def nValueRefs(self):
        return _fmippim.FMUModelExchangeV2_nValueRefs(self)

    def sendDebugMessage(self, msg):
        return _fmippim.FMUModelExchangeV2_sendDebugMessage(self, msg)

    def logger(self, *args):
        return _fmippim.FMUModelExchangeV2_logger(self, *args)

    def getEventSearchPrecision(self):
        return _fmippim.FMUModelExchangeV2_getEventSearchPrecision(self)

    def setCallbacks(self, logger, allocateMemory, freeMemory):
        return _fmippim.FMUModelExchangeV2_setCallbacks(self, logger, allocateMemory, freeMemory)

    def setComponentEnvironment(self, env):
        return _fmippim.FMUModelExchangeV2_setComponentEnvironment(self, env)

    def enterContinuousTimeMode(self):
        return _fmippim.FMUModelExchangeV2_enterContinuousTimeMode(self)

    def enterEventMode(self):
        return _fmippim.FMUModelExchangeV2_enterEventMode(self)

    def stepOverEvent(self):
        return _fmippim.FMUModelExchangeV2_stepOverEvent(self)
FMUModelExchangeV2_swigregister = _fmippim.FMUModelExchangeV2_swigregister
FMUModelExchangeV2_swigregister(FMUModelExchangeV2)

class FMUCoSimulationV1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FMUCoSimulationV1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FMUCoSimulationV1, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fmippim.new_FMUCoSimulationV1(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fmippim.delete_FMUCoSimulationV1
    __del__ = lambda self: None

    def terminate(self):
        return _fmippim.FMUCoSimulationV1_terminate(self)

    def instantiate(self, instanceName, timeout, visible, interactive):
        return _fmippim.FMUCoSimulationV1_instantiate(self, instanceName, timeout, visible, interactive)

    def initialize(self, startTime, stopTimeDefined, stopTime):
        return _fmippim.FMUCoSimulationV1_initialize(self, startTime, stopTimeDefined, stopTime)

    def doStep(self, currentCommunicationPoint, communicationStepSize, newStep):
        return _fmippim.FMUCoSimulationV1_doStep(self, currentCommunicationPoint, communicationStepSize, newStep)

    def getTime(self):
        return _fmippim.FMUCoSimulationV1_getTime(self)

    def setValue(self, *args):
        return _fmippim.FMUCoSimulationV1_setValue(self, *args)

    def setRealValue(self, name, val):
        return _fmippim.FMUCoSimulationV1_setRealValue(self, name, val)

    def setIntegerValue(self, name, val):
        return _fmippim.FMUCoSimulationV1_setIntegerValue(self, name, val)

    def setBooleanValue(self, name, val):
        return _fmippim.FMUCoSimulationV1_setBooleanValue(self, name, val)

    def setStringValue(self, name, val):
        return _fmippim.FMUCoSimulationV1_setStringValue(self, name, val)

    def getValue(self, *args):
        return _fmippim.FMUCoSimulationV1_getValue(self, *args)

    def getRealValue(self, name):
        return _fmippim.FMUCoSimulationV1_getRealValue(self, name)

    def getIntegerValue(self, name):
        return _fmippim.FMUCoSimulationV1_getIntegerValue(self, name)

    def getBooleanValue(self, name):
        return _fmippim.FMUCoSimulationV1_getBooleanValue(self, name)

    def getStringValue(self, name):
        return _fmippim.FMUCoSimulationV1_getStringValue(self, name)

    def getLastStatus(self):
        return _fmippim.FMUCoSimulationV1_getLastStatus(self)

    def getValueRef(self, name):
        return _fmippim.FMUCoSimulationV1_getValueRef(self, name)

    def nStates(self):
        return _fmippim.FMUCoSimulationV1_nStates(self)

    def nEventInds(self):
        return _fmippim.FMUCoSimulationV1_nEventInds(self)

    def nValueRefs(self):
        return _fmippim.FMUCoSimulationV1_nValueRefs(self)

    def getType(self, variableName):
        return _fmippim.FMUCoSimulationV1_getType(self, variableName)

    def canHandleVariableCommunicationStepSize(self):
        return _fmippim.FMUCoSimulationV1_canHandleVariableCommunicationStepSize(self)

    def canHandleEvents(self):
        return _fmippim.FMUCoSimulationV1_canHandleEvents(self)

    def canRejectSteps(self):
        return _fmippim.FMUCoSimulationV1_canRejectSteps(self)

    def canInterpolateInputs(self):
        return _fmippim.FMUCoSimulationV1_canInterpolateInputs(self)

    def maxOutputDerivativeOrder(self):
        return _fmippim.FMUCoSimulationV1_maxOutputDerivativeOrder(self)

    def canRunAsynchronuously(self):
        return _fmippim.FMUCoSimulationV1_canRunAsynchronuously(self)

    def canSignalEvents(self):
        return _fmippim.FMUCoSimulationV1_canSignalEvents(self)

    def canBeInstantiatedOnlyOncePerProcess(self):
        return _fmippim.FMUCoSimulationV1_canBeInstantiatedOnlyOncePerProcess(self)

    def canNotUseMemoryManagementFunctions(self):
        return _fmippim.FMUCoSimulationV1_canNotUseMemoryManagementFunctions(self)

    def sendDebugMessage(self, msg):
        return _fmippim.FMUCoSimulationV1_sendDebugMessage(self, msg)

    def logger(self, *args):
        return _fmippim.FMUCoSimulationV1_logger(self, *args)

    def setCallbacks(self, logger, allocateMemory, freeMemory, stepFinished):
        return _fmippim.FMUCoSimulationV1_setCallbacks(self, logger, allocateMemory, freeMemory, stepFinished)
FMUCoSimulationV1_swigregister = _fmippim.FMUCoSimulationV1_swigregister
FMUCoSimulationV1_swigregister(FMUCoSimulationV1)

class FMUCoSimulationV2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FMUCoSimulationV2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FMUCoSimulationV2, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fmippim.new_FMUCoSimulationV2(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fmippim.delete_FMUCoSimulationV2
    __del__ = lambda self: None

    def terminate(self):
        return _fmippim.FMUCoSimulationV2_terminate(self)

    def instantiate(self, instanceName, timeout, visible, interactive):
        return _fmippim.FMUCoSimulationV2_instantiate(self, instanceName, timeout, visible, interactive)

    def initialize(self, startTime, stopTimeDefined, stopTime):
        return _fmippim.FMUCoSimulationV2_initialize(self, startTime, stopTimeDefined, stopTime)

    def doStep(self, currentCommunicationPoint, communicationStepSize, newStep):
        return _fmippim.FMUCoSimulationV2_doStep(self, currentCommunicationPoint, communicationStepSize, newStep)

    def getTime(self):
        return _fmippim.FMUCoSimulationV2_getTime(self)

    def setValue(self, *args):
        return _fmippim.FMUCoSimulationV2_setValue(self, *args)

    def setRealValue(self, name, val):
        return _fmippim.FMUCoSimulationV2_setRealValue(self, name, val)

    def setIntegerValue(self, name, val):
        return _fmippim.FMUCoSimulationV2_setIntegerValue(self, name, val)

    def setBooleanValue(self, name, val):
        return _fmippim.FMUCoSimulationV2_setBooleanValue(self, name, val)

    def setStringValue(self, name, val):
        return _fmippim.FMUCoSimulationV2_setStringValue(self, name, val)

    def getValue(self, *args):
        return _fmippim.FMUCoSimulationV2_getValue(self, *args)

    def getRealValue(self, name):
        return _fmippim.FMUCoSimulationV2_getRealValue(self, name)

    def getIntegerValue(self, name):
        return _fmippim.FMUCoSimulationV2_getIntegerValue(self, name)

    def getBooleanValue(self, name):
        return _fmippim.FMUCoSimulationV2_getBooleanValue(self, name)

    def getStringValue(self, name):
        return _fmippim.FMUCoSimulationV2_getStringValue(self, name)

    def getLastStatus(self):
        return _fmippim.FMUCoSimulationV2_getLastStatus(self)

    def getValueRef(self, name):
        return _fmippim.FMUCoSimulationV2_getValueRef(self, name)

    def nStates(self):
        return _fmippim.FMUCoSimulationV2_nStates(self)

    def nEventInds(self):
        return _fmippim.FMUCoSimulationV2_nEventInds(self)

    def nValueRefs(self):
        return _fmippim.FMUCoSimulationV2_nValueRefs(self)

    def getType(self, variableName):
        return _fmippim.FMUCoSimulationV2_getType(self, variableName)

    def canHandleVariableCommunicationStepSize(self):
        return _fmippim.FMUCoSimulationV2_canHandleVariableCommunicationStepSize(self)

    def canHandleEvents(self):
        return _fmippim.FMUCoSimulationV2_canHandleEvents(self)

    def canRejectSteps(self):
        return _fmippim.FMUCoSimulationV2_canRejectSteps(self)

    def canInterpolateInputs(self):
        return _fmippim.FMUCoSimulationV2_canInterpolateInputs(self)

    def maxOutputDerivativeOrder(self):
        return _fmippim.FMUCoSimulationV2_maxOutputDerivativeOrder(self)

    def canRunAsynchronuously(self):
        return _fmippim.FMUCoSimulationV2_canRunAsynchronuously(self)

    def canSignalEvents(self):
        return _fmippim.FMUCoSimulationV2_canSignalEvents(self)

    def canBeInstantiatedOnlyOncePerProcess(self):
        return _fmippim.FMUCoSimulationV2_canBeInstantiatedOnlyOncePerProcess(self)

    def canNotUseMemoryManagementFunctions(self):
        return _fmippim.FMUCoSimulationV2_canNotUseMemoryManagementFunctions(self)

    def sendDebugMessage(self, msg):
        return _fmippim.FMUCoSimulationV2_sendDebugMessage(self, msg)

    def logger(self, *args):
        return _fmippim.FMUCoSimulationV2_logger(self, *args)

    def setCallbacks(self, logger, allocateMemory, freeMemory, stepFinished):
        return _fmippim.FMUCoSimulationV2_setCallbacks(self, logger, allocateMemory, freeMemory, stepFinished)

    def setComponentEnvironment(self, env):
        return _fmippim.FMUCoSimulationV2_setComponentEnvironment(self, env)
FMUCoSimulationV2_swigregister = _fmippim.FMUCoSimulationV2_swigregister
FMUCoSimulationV2_swigregister(FMUCoSimulationV2)

class LogBuffer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LogBuffer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LogBuffer, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _fmippim.delete_LogBuffer
    __del__ = lambda self: None
    if _newclass:
        getLogBuffer = staticmethod(_fmippim.LogBuffer_getLogBuffer)
    else:
        getLogBuffer = _fmippim.LogBuffer_getLogBuffer

    def writeToBuffer(self, msg):
        return _fmippim.LogBuffer_writeToBuffer(self, msg)

    def readFromBuffer(self):
        return _fmippim.LogBuffer_readFromBuffer(self)

    def clear(self):
        return _fmippim.LogBuffer_clear(self)

    def activate(self):
        return _fmippim.LogBuffer_activate(self)

    def deactivate(self):
        return _fmippim.LogBuffer_deactivate(self)

    def isActivated(self):
        return _fmippim.LogBuffer_isActivated(self)
LogBuffer_swigregister = _fmippim.LogBuffer_swigregister
LogBuffer_swigregister(LogBuffer)

def LogBuffer_getLogBuffer():
    return _fmippim.LogBuffer_getLogBuffer()
LogBuffer_getLogBuffer = _fmippim.LogBuffer_getLogBuffer

eu = _fmippim.eu
rk = _fmippim.rk
abm = _fmippim.abm
ck = _fmippim.ck
dp = _fmippim.dp
fe = _fmippim.fe
bs = _fmippim.bs
ro = _fmippim.ro
bdf = _fmippim.bdf
abm2 = _fmippim.abm2
NSTEPPERS = _fmippim.NSTEPPERS
class IncrementalFMU(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IncrementalFMU, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IncrementalFMU, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fmippim.new_IncrementalFMU(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fmippim.delete_IncrementalFMU
    __del__ = lambda self: None

    def init(self, *args):
        return _fmippim.IncrementalFMU_init(self, *args)

    def setIntegratorProperties(self, prop):
        return _fmippim.IncrementalFMU_setIntegratorProperties(self, prop)

    def getIntegratorProperties(self):
        return _fmippim.IncrementalFMU_getIntegratorProperties(self)

    def getType(self, varName):
        return _fmippim.IncrementalFMU_getType(self, varName)

    def defineRealInputs(self, inputs, nInputs):
        return _fmippim.IncrementalFMU_defineRealInputs(self, inputs, nInputs)

    def defineIntegerInputs(self, inputs, nInputs):
        return _fmippim.IncrementalFMU_defineIntegerInputs(self, inputs, nInputs)

    def defineBooleanInputs(self, inputs, nInputs):
        return _fmippim.IncrementalFMU_defineBooleanInputs(self, inputs, nInputs)

    def defineStringInputs(self, inputs, nInputs):
        return _fmippim.IncrementalFMU_defineStringInputs(self, inputs, nInputs)

    def defineRealOutputs(self, outputs, nOutputs):
        return _fmippim.IncrementalFMU_defineRealOutputs(self, outputs, nOutputs)

    def defineIntegerOutputs(self, outputs, nOutputs):
        return _fmippim.IncrementalFMU_defineIntegerOutputs(self, outputs, nOutputs)

    def defineBooleanOutputs(self, outputs, nOutputs):
        return _fmippim.IncrementalFMU_defineBooleanOutputs(self, outputs, nOutputs)

    def defineStringOutputs(self, outputs, nOutputs):
        return _fmippim.IncrementalFMU_defineStringOutputs(self, outputs, nOutputs)

    def getRealOutputs(self):
        return _fmippim.IncrementalFMU_getRealOutputs(self)

    def getIntegerOutputs(self):
        return _fmippim.IncrementalFMU_getIntegerOutputs(self)

    def getBooleanOutputs(self):
        return _fmippim.IncrementalFMU_getBooleanOutputs(self)

    def getStringOutputs(self):
        return _fmippim.IncrementalFMU_getStringOutputs(self)

    def sync(self, *args):
        return _fmippim.IncrementalFMU_sync(self, *args)

    def updateState(self, t1):
        return _fmippim.IncrementalFMU_updateState(self, t1)

    def updateStateFromTheRight(self, t1):
        return _fmippim.IncrementalFMU_updateStateFromTheRight(self, t1)

    def syncState(self, t1, realInputs, integerInputs, booleanInputs, stringInputs):
        return _fmippim.IncrementalFMU_syncState(self, t1, realInputs, integerInputs, booleanInputs, stringInputs)

    def predictState(self, t1):
        return _fmippim.IncrementalFMU_predictState(self, t1)

    def getLastStatus(self):
        return _fmippim.IncrementalFMU_getLastStatus(self)

    def getTimeDiffResolution(self):
        return _fmippim.IncrementalFMU_getTimeDiffResolution(self)
IncrementalFMU_swigregister = _fmippim.IncrementalFMU_swigregister
IncrementalFMU_swigregister(IncrementalFMU)

class RollbackFMU(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RollbackFMU, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RollbackFMU, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fmippim.new_RollbackFMU(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fmippim.delete_RollbackFMU
    __del__ = lambda self: None

    def integrate(self, *args):
        return _fmippim.RollbackFMU_integrate(self, *args)

    def saveCurrentStateForRollback(self):
        return _fmippim.RollbackFMU_saveCurrentStateForRollback(self)

    def releaseRollbackState(self):
        return _fmippim.RollbackFMU_releaseRollbackState(self)

    def getValue(self, *args):
        return _fmippim.RollbackFMU_getValue(self, *args)

    def getRealValue(self, name):
        return _fmippim.RollbackFMU_getRealValue(self, name)

    def getIntegerValue(self, name):
        return _fmippim.RollbackFMU_getIntegerValue(self, name)

    def getBooleanValue(self, name):
        return _fmippim.RollbackFMU_getBooleanValue(self, name)

    def getStringValue(self, name):
        return _fmippim.RollbackFMU_getStringValue(self, name)

    def setRealValue(self, name, val):
        return _fmippim.RollbackFMU_setRealValue(self, name, val)

    def setIntegerValue(self, name, val):
        return _fmippim.RollbackFMU_setIntegerValue(self, name, val)

    def setBooleanValue(self, name, val):
        return _fmippim.RollbackFMU_setBooleanValue(self, name, val)

    def setStringValue(self, name, val):
        return _fmippim.RollbackFMU_setStringValue(self, name, val)

    def getTime(self):
        return _fmippim.RollbackFMU_getTime(self)

    def initialize(self, toleranceDefined=False, tolerance=1e-5):
        return _fmippim.RollbackFMU_initialize(self, toleranceDefined, tolerance)

    def instantiate(self, instanceName):
        return _fmippim.RollbackFMU_instantiate(self, instanceName)

    def getLastStatus(self):
        return _fmippim.RollbackFMU_getLastStatus(self)
RollbackFMU_swigregister = _fmippim.RollbackFMU_swigregister
RollbackFMU_swigregister(RollbackFMU)

class FixedStepSizeFMU(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FixedStepSizeFMU, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FixedStepSizeFMU, name)
    __repr__ = _swig_repr

    def __init__(self, fmuDirUri, modelIdentifier, loggingOn=0, timeDiffResolution=1e-4):
        this = _fmippim.new_FixedStepSizeFMU(fmuDirUri, modelIdentifier, loggingOn, timeDiffResolution)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fmippim.delete_FixedStepSizeFMU
    __del__ = lambda self: None

    def init(self, *args):
        return _fmippim.FixedStepSizeFMU_init(self, *args)

    def defineRealInputs(self, inputs, nInputs):
        return _fmippim.FixedStepSizeFMU_defineRealInputs(self, inputs, nInputs)

    def defineIntegerInputs(self, inputs, nInputs):
        return _fmippim.FixedStepSizeFMU_defineIntegerInputs(self, inputs, nInputs)

    def defineBooleanInputs(self, inputs, nInputs):
        return _fmippim.FixedStepSizeFMU_defineBooleanInputs(self, inputs, nInputs)

    def defineStringInputs(self, inputs, nInputs):
        return _fmippim.FixedStepSizeFMU_defineStringInputs(self, inputs, nInputs)

    def defineRealOutputs(self, outputs, nOutputs):
        return _fmippim.FixedStepSizeFMU_defineRealOutputs(self, outputs, nOutputs)

    def defineIntegerOutputs(self, outputs, nOutputs):
        return _fmippim.FixedStepSizeFMU_defineIntegerOutputs(self, outputs, nOutputs)

    def defineBooleanOutputs(self, outputs, nOutputs):
        return _fmippim.FixedStepSizeFMU_defineBooleanOutputs(self, outputs, nOutputs)

    def defineStringOutputs(self, outputs, nOutputs):
        return _fmippim.FixedStepSizeFMU_defineStringOutputs(self, outputs, nOutputs)

    def getRealOutputs(self):
        return _fmippim.FixedStepSizeFMU_getRealOutputs(self)

    def getIntegerOutputs(self):
        return _fmippim.FixedStepSizeFMU_getIntegerOutputs(self)

    def getBooleanOutputs(self):
        return _fmippim.FixedStepSizeFMU_getBooleanOutputs(self)

    def getStringOutputs(self):
        return _fmippim.FixedStepSizeFMU_getStringOutputs(self)

    def sync(self, *args):
        return _fmippim.FixedStepSizeFMU_sync(self, *args)

    def iterateOnce(self):
        return _fmippim.FixedStepSizeFMU_iterateOnce(self)

    def getLastStatus(self):
        return _fmippim.FixedStepSizeFMU_getLastStatus(self)
FixedStepSizeFMU_swigregister = _fmippim.FixedStepSizeFMU_swigregister
FixedStepSizeFMU_swigregister(FixedStepSizeFMU)

class VariableStepSizeFMU(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VariableStepSizeFMU, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VariableStepSizeFMU, name)
    __repr__ = _swig_repr

    def __init__(self, fmuDirUri, modelIdentifier, loggingOn=0, timeDiffResolution=1e-4):
        this = _fmippim.new_VariableStepSizeFMU(fmuDirUri, modelIdentifier, loggingOn, timeDiffResolution)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fmippim.delete_VariableStepSizeFMU
    __del__ = lambda self: None

    def init(self, *args):
        return _fmippim.VariableStepSizeFMU_init(self, *args)

    def defineRealInputs(self, inputs, nInputs):
        return _fmippim.VariableStepSizeFMU_defineRealInputs(self, inputs, nInputs)

    def defineIntegerInputs(self, inputs, nInputs):
        return _fmippim.VariableStepSizeFMU_defineIntegerInputs(self, inputs, nInputs)

    def defineBooleanInputs(self, inputs, nInputs):
        return _fmippim.VariableStepSizeFMU_defineBooleanInputs(self, inputs, nInputs)

    def defineStringInputs(self, inputs, nInputs):
        return _fmippim.VariableStepSizeFMU_defineStringInputs(self, inputs, nInputs)

    def defineRealOutputs(self, outputs, nOutputs):
        return _fmippim.VariableStepSizeFMU_defineRealOutputs(self, outputs, nOutputs)

    def defineIntegerOutputs(self, outputs, nOutputs):
        return _fmippim.VariableStepSizeFMU_defineIntegerOutputs(self, outputs, nOutputs)

    def defineBooleanOutputs(self, outputs, nOutputs):
        return _fmippim.VariableStepSizeFMU_defineBooleanOutputs(self, outputs, nOutputs)

    def defineStringOutputs(self, outputs, nOutputs):
        return _fmippim.VariableStepSizeFMU_defineStringOutputs(self, outputs, nOutputs)

    def getRealOutputs(self):
        return _fmippim.VariableStepSizeFMU_getRealOutputs(self)

    def getIntegerOutputs(self):
        return _fmippim.VariableStepSizeFMU_getIntegerOutputs(self)

    def getBooleanOutputs(self):
        return _fmippim.VariableStepSizeFMU_getBooleanOutputs(self)

    def getStringOutputs(self):
        return _fmippim.VariableStepSizeFMU_getStringOutputs(self)

    def sync(self, *args):
        return _fmippim.VariableStepSizeFMU_sync(self, *args)

    def iterateOnce(self):
        return _fmippim.VariableStepSizeFMU_iterateOnce(self)

    def getLastStatus(self):
        return _fmippim.VariableStepSizeFMU_getLastStatus(self)
VariableStepSizeFMU_swigregister = _fmippim.VariableStepSizeFMU_swigregister
VariableStepSizeFMU_swigregister(VariableStepSizeFMU)

class InterpolatingFixedStepSizeFMU(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InterpolatingFixedStepSizeFMU, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InterpolatingFixedStepSizeFMU, name)
    __repr__ = _swig_repr

    def __init__(self, fmuDirUri, modelIdentifier, loggingOn=0, timeDiffResolution=1e-4):
        this = _fmippim.new_InterpolatingFixedStepSizeFMU(fmuDirUri, modelIdentifier, loggingOn, timeDiffResolution)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fmippim.delete_InterpolatingFixedStepSizeFMU
    __del__ = lambda self: None

    def init(self, *args):
        return _fmippim.InterpolatingFixedStepSizeFMU_init(self, *args)

    def defineRealInputs(self, inputs, nInputs):
        return _fmippim.InterpolatingFixedStepSizeFMU_defineRealInputs(self, inputs, nInputs)

    def defineIntegerInputs(self, inputs, nInputs):
        return _fmippim.InterpolatingFixedStepSizeFMU_defineIntegerInputs(self, inputs, nInputs)

    def defineBooleanInputs(self, inputs, nInputs):
        return _fmippim.InterpolatingFixedStepSizeFMU_defineBooleanInputs(self, inputs, nInputs)

    def defineStringInputs(self, inputs, nInputs):
        return _fmippim.InterpolatingFixedStepSizeFMU_defineStringInputs(self, inputs, nInputs)

    def defineRealOutputs(self, outputs, nOutputs):
        return _fmippim.InterpolatingFixedStepSizeFMU_defineRealOutputs(self, outputs, nOutputs)

    def defineIntegerOutputs(self, outputs, nOutputs):
        return _fmippim.InterpolatingFixedStepSizeFMU_defineIntegerOutputs(self, outputs, nOutputs)

    def defineBooleanOutputs(self, outputs, nOutputs):
        return _fmippim.InterpolatingFixedStepSizeFMU_defineBooleanOutputs(self, outputs, nOutputs)

    def defineStringOutputs(self, outputs, nOutputs):
        return _fmippim.InterpolatingFixedStepSizeFMU_defineStringOutputs(self, outputs, nOutputs)

    def getRealOutputs(self):
        return _fmippim.InterpolatingFixedStepSizeFMU_getRealOutputs(self)

    def getIntegerOutputs(self):
        return _fmippim.InterpolatingFixedStepSizeFMU_getIntegerOutputs(self)

    def getBooleanOutputs(self):
        return _fmippim.InterpolatingFixedStepSizeFMU_getBooleanOutputs(self)

    def getStringOutputs(self):
        return _fmippim.InterpolatingFixedStepSizeFMU_getStringOutputs(self)

    def sync(self, *args):
        return _fmippim.InterpolatingFixedStepSizeFMU_sync(self, *args)

    def iterateOnce(self):
        return _fmippim.InterpolatingFixedStepSizeFMU_iterateOnce(self)

    def getLastStatus(self):
        return _fmippim.InterpolatingFixedStepSizeFMU_getLastStatus(self)
InterpolatingFixedStepSizeFMU_swigregister = _fmippim.InterpolatingFixedStepSizeFMU_swigregister
InterpolatingFixedStepSizeFMU_swigregister(InterpolatingFixedStepSizeFMU)

# This file is compatible with both classic and new-style classes.


